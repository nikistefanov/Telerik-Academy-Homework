cscope 15 C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM"               0002669113
	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\BSP\stm32f4xx_nucleo.c

43 
	~"°m32f4xx_nu˛eo.h
"

74 
	#__STM32F4xx_NUCLEO_BSP_VERSION_MAIN
 (0x01Ë

	)

75 
	#__STM32F4xx_NUCLEO_BSP_VERSION_SUB1
 (0x02Ë

	)

76 
	#__STM32F4xx_NUCLEO_BSP_VERSION_SUB2
 (0x02Ë

	)

77 
	#__STM32F4xx_NUCLEO_BSP_VERSION_RC
 (0x00Ë

	)

78 
	#__STM32F4xx_NUCLEO_BSP_VERSION
 ((
__STM32F4xx_NUCLEO_BSP_VERSION_MAIN
 << 24)\

79 |(
__STM32F4xx_NUCLEO_BSP_VERSION_SUB1
 << 16)\

80 |(
__STM32F4xx_NUCLEO_BSP_VERSION_SUB2
 << 8 )\

81 |(
__STM32F4xx_NUCLEO_BSP_VERSION_RC
))

	)

86 
	#SD_DUMMY_BYTE
 0xFF

	)

87 
	#SD_NO_RESPONSE_EXPECTED
 0x80

	)

103 
GPIO_Ty≥Def
* 
	gGPIO_PORT
[
LEDn
] = {
LED2_GPIO_PORT
};

105 c⁄° 
uöt16_t
 
	gGPIO_PIN
[
LEDn
] = {
LED2_PIN
};

107 
GPIO_Ty≥Def
* 
	gBUTTON_PORT
[
BUTTONn
] = {
KEY_BUTTON_GPIO_PORT
};

108 c⁄° 
uöt16_t
 
	gBUTTON_PIN
[
BUTTONn
] = {
KEY_BUTTON_PIN
};

109 c⁄° 
uöt8_t
 
	gBUTTON_IRQn
[
BUTTONn
] = {
KEY_BUTTON_EXTI_IRQn
};

115 
uöt32_t
 
	gSpixTimeout
 = 
NUCLEO_SPIx_TIMEOUT_MAX
;

116 
SPI_H™dÀTy≥Def
 
	ghnu˛eo_Spi
;

117 
ADC_H™dÀTy≥Def
 
	ghnu˛eo_Adc
;

120 
ADC_Ch™√lC⁄fTy≥Def
 
	gsC⁄fig
;

129 
SPIx_Inô
();

130 
SPIx_Wrôe
(
uöt8_t
 
VÆue
);

131 
uöt32_t
 
SPIx_Ród
();

132 
SPIx_Eº‹
();

133 
SPIx_M•Inô
(
SPI_H™dÀTy≥Def
 *
h•i
);

135 
ADCx_Inô
();

136 
ADCx_M•Inô
(
ADC_H™dÀTy≥Def
 *
hadc
);

139 
SD_IO_Inô
();

140 
HAL_SètusTy≥Def
 
SD_IO_WrôeCmd
(
uöt8_t
 
Cmd
, 
uöt32_t
 
Arg
, uöt8_à
Crc
, uöt8_à
Re•⁄£
);

141 
HAL_SètusTy≥Def
 
SD_IO_WaôRe•⁄£
(
uöt8_t
 
Re•⁄£
);

142 
SD_IO_WrôeDummy
();

143 
SD_IO_WrôeByã
(
uöt8_t
 
D©a
);

144 
uöt8_t
 
SD_IO_RódByã
();

147 
LCD_IO_Inô
();

148 
LCD_IO_WrôeD©a
(
uöt8_t
 
D©a
);

149 
LCD_IO_WrôeMu…ùÀD©a
(
uöt8_t
 *
pD©a
, 
uöt32_t
 
Size
);

150 
LCD_IO_WrôeReg
(
uöt8_t
 
LCDReg
);

151 
LCD_Dñay
(
uöt32_t
 
dñay
);

165 
uöt32_t
 
	$BSP_GëVîsi⁄
()

167  
__STM32F4xx_NUCLEO_BSP_VERSION
;

168 
	}
}

177 
	$BSP_LED_Inô
(
Led_Ty≥Def
 
Led
)

179 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

182 
	`LEDx_GPIO_CLK_ENABLE
(
Led
);

185 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN
[
Led
];

186 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

187 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLUP
;

188 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FAST
;

190 
	`HAL_GPIO_Inô
(
GPIO_PORT
[
Led
], &
GPIO_InôSåu˘
);

192 
	`HAL_GPIO_WrôePö
(
GPIO_PORT
[
Led
], 
GPIO_PIN
[Led], 
GPIO_PIN_RESET
);

193 
	}
}

202 
	$BSP_LED_On
(
Led_Ty≥Def
 
Led
)

204 
	`HAL_GPIO_WrôePö
(
GPIO_PORT
[
Led
], 
GPIO_PIN
[Led], 
GPIO_PIN_SET
);

205 
	}
}

214 
	$BSP_LED_Off
(
Led_Ty≥Def
 
Led
)

216 
	`HAL_GPIO_WrôePö
(
GPIO_PORT
[
Led
], 
GPIO_PIN
[Led], 
GPIO_PIN_RESET
);

217 
	}
}

226 
	$BSP_LED_ToggÀ
(
Led_Ty≥Def
 
Led
)

228 
	`HAL_GPIO_ToggÀPö
(
GPIO_PORT
[
Led
], 
GPIO_PIN
[Led]);

229 
	}
}

242 
	$BSP_PB_Inô
(
Buâ⁄_Ty≥Def
 
Buâ⁄
, 
Buâ⁄Mode_Ty≥Def
 
Buâ⁄Mode
)

244 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

247 
	`BUTTONx_GPIO_CLK_ENABLE
(
Buâ⁄
);

249 if(
Buâ⁄Mode
 =
BUTTON_MODE_GPIO
)

252 
GPIO_InôSåu˘
.
Pö
 = 
BUTTON_PIN
[
Buâ⁄
];

253 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

254 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLDOWN
;

255 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FAST
;

256 
	`HAL_GPIO_Inô
(
BUTTON_PORT
[
Buâ⁄
], &
GPIO_InôSåu˘
);

259 if(
Buâ⁄Mode
 =
BUTTON_MODE_EXTI
)

262 
GPIO_InôSåu˘
.
Pö
 = 
BUTTON_PIN
[
Buâ⁄
];

263 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

264 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_IT_FALLING
;

265 
	`HAL_GPIO_Inô
(
BUTTON_PORT
[
Buâ⁄
], &
GPIO_InôSåu˘
);

268 
	`HAL_NVIC_SëPri‹ôy
((
IRQn_Ty≥
)(
BUTTON_IRQn
[
Buâ⁄
]), 0x0F, 0x00);

269 
	`HAL_NVIC_E«bÀIRQ
((
IRQn_Ty≥
)(
BUTTON_IRQn
[
Buâ⁄
]));

271 
	}
}

279 
uöt32_t
 
	$BSP_PB_GëSèã
(
Buâ⁄_Ty≥Def
 
Buâ⁄
)

281  
	`HAL_GPIO_RódPö
(
BUTTON_PORT
[
Buâ⁄
], 
BUTTON_PIN
[Button]);

282 
	}
}

292 
	$SPIx_M•Inô
(
SPI_H™dÀTy≥Def
 *
h•i
)

294 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

298 
	`NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE
();

299 
	`NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE
();

302 
GPIO_InôSåu˘
.
Pö
 = 
NUCLEO_SPIx_SCK_PIN
;

303 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

304 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLUP
;

305 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_HIGH
;

306 
GPIO_InôSåu˘
.
A…î«ã
 = 
NUCLEO_SPIx_SCK_AF
;

307 
	`HAL_GPIO_Inô
(
NUCLEO_SPIx_SCK_GPIO_PORT
, &
GPIO_InôSåu˘
);

310 
GPIO_InôSåu˘
.
Pö
 = 
NUCLEO_SPIx_MOSI_PIN
;

311 
GPIO_InôSåu˘
.
A…î«ã
 = 
NUCLEO_SPIx_MISO_MOSI_AF
;

312 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLDOWN
;

313 
	`HAL_GPIO_Inô
(
NUCLEO_SPIx_MISO_MOSI_GPIO_PORT
, &
GPIO_InôSåu˘
);

315 
GPIO_InôSåu˘
.
Pö
 = 
NUCLEO_SPIx_MISO_PIN
;

316 
	`HAL_GPIO_Inô
(
NUCLEO_SPIx_MISO_MOSI_GPIO_PORT
, &
GPIO_InôSåu˘
);

320 
	`NUCLEO_SPIx_CLK_ENABLE
();

321 
	}
}

328 
	$SPIx_Inô
()

330 if(
	`HAL_SPI_GëSèã
(&
hnu˛eo_Spi
Ë=
HAL_SPI_STATE_RESET
)

333 
hnu˛eo_Spi
.
In°™˚
 = 
NUCLEO_SPIx
;

342 
hnu˛eo_Spi
.
Inô
.
BaudR©ePªsˇÀr
 = 
SPI_BAUDRATEPRESCALER_8
;

343 
hnu˛eo_Spi
.
Inô
.
Dúe˘i⁄
 = 
SPI_DIRECTION_2LINES
;

344 
hnu˛eo_Spi
.
Inô
.
CLKPha£
 = 
SPI_PHASE_2EDGE
;

345 
hnu˛eo_Spi
.
Inô
.
CLKPﬁ¨ôy
 = 
SPI_POLARITY_HIGH
;

346 
hnu˛eo_Spi
.
Inô
.
CRCCÆcuœti⁄
 = 
SPI_CRCCALCULATION_DISABLED
;

347 
hnu˛eo_Spi
.
Inô
.
CRCPﬁynomül
 = 7;

348 
hnu˛eo_Spi
.
Inô
.
D©aSize
 = 
SPI_DATASIZE_8BIT
;

349 
hnu˛eo_Spi
.
Inô
.
Fú°Bô
 = 
SPI_FIRSTBIT_MSB
;

350 
hnu˛eo_Spi
.
Inô
.
NSS
 = 
SPI_NSS_SOFT
;

351 
hnu˛eo_Spi
.
Inô
.
TIMode
 = 
SPI_TIMODE_DISABLED
;

352 
hnu˛eo_Spi
.
Inô
.
Mode
 = 
SPI_MODE_MASTER
;

354 
	`SPIx_M•Inô
(&
hnu˛eo_Spi
);

355 
	`HAL_SPI_Inô
(&
hnu˛eo_Spi
);

357 
	}
}

364 
uöt32_t
 
	$SPIx_Ród
()

366 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

367 
uöt32_t
 
ªadvÆue
 = 0;

368 
uöt32_t
 
wrôevÆue
 = 0xFFFFFFFF;

370 
°©us
 = 
	`HAL_SPI_TønsmôRe˚ive
(&
hnu˛eo_Spi
, (
uöt8_t
*Ë&
wrôevÆue
, (uöt8_t*Ë&
ªadvÆue
, 1, 
SpixTimeout
);

373 if(
°©us
 !
HAL_OK
)

376 
	`SPIx_Eº‹
();

379  
ªadvÆue
;

380 
	}
}

387 
	$SPIx_Wrôe
(
uöt8_t
 
VÆue
)

389 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

391 
°©us
 = 
	`HAL_SPI_Tønsmô
(&
hnu˛eo_Spi
, (
uöt8_t
*Ë&
VÆue
, 1, 
SpixTimeout
);

394 if(
°©us
 !
HAL_OK
)

397 
	`SPIx_Eº‹
();

399 
	}
}

406 
	$SPIx_Eº‹
 ()

409 
	`HAL_SPI_DeInô
(&
hnu˛eo_Spi
);

412 
	`SPIx_Inô
();

413 
	}
}

426 
	$SD_IO_Inô
()

428 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

429 
uöt8_t
 
cou¡î
;

432 
	`SD_CS_GPIO_CLK_ENABLE
();

435 
GPIO_InôSåu˘
.
Pö
 = 
SD_CS_PIN
;

436 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

437 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLUP
;

438 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_HIGH
;

439 
	`HAL_GPIO_Inô
(
SD_CS_GPIO_PORT
, &
GPIO_InôSåu˘
);

443 
	`SPIx_Inô
();

446 
	`SD_CS_HIGH
();

450 
cou¡î
 = 0; counter <= 9; counter++)

453 
	`SD_IO_WrôeByã
(
SD_DUMMY_BYTE
);

455 
	}
}

462 
	$SD_IO_WrôeByã
(
uöt8_t
 
D©a
)

465 
	`SPIx_Wrôe
(
D©a
);

466 
	}
}

473 
uöt8_t
 
	$SD_IO_RódByã
()

475 
uöt8_t
 
d©a
 = 0;

478 
d©a
 = 
	`SPIx_Ród
();

481  
d©a
;

482 
	}
}

492 
HAL_SètusTy≥Def
 
	$SD_IO_WrôeCmd
(
uöt8_t
 
Cmd
, 
uöt32_t
 
Arg
, uöt8_à
Crc
, uöt8_à
Re•⁄£
)

494 
uöt32_t
 
cou¡î
 = 0x00;

495 
uöt8_t
 
‰ame
[6];

498 
‰ame
[0] = (
Cmd
 | 0x40);

499 
‰ame
[1] = (
uöt8_t
)(
Arg
 >> 24);

500 
‰ame
[2] = (
uöt8_t
)(
Arg
 >> 16);

501 
‰ame
[3] = (
uöt8_t
)(
Arg
 >> 8);

502 
‰ame
[4] = (
uöt8_t
)(
Arg
);

503 
‰ame
[5] = (
Crc
);

506 
	`SD_CS_LOW
();

509 
cou¡î
 = 0; counter < 6; counter++)

511 
	`SD_IO_WrôeByã
(
‰ame
[
cou¡î
]);

514 if(
Re•⁄£
 !
SD_NO_RESPONSE_EXPECTED
)

516  
	`SD_IO_WaôRe•⁄£
(
Re•⁄£
);

519  
HAL_OK
;

520 
	}
}

527 
HAL_SètusTy≥Def
 
	$SD_IO_WaôRe•⁄£
(
uöt8_t
 
Re•⁄£
)

529 
uöt32_t
 
timeout
 = 0xFFFF;

532 (
	`SD_IO_RódByã
(Ë!
Re•⁄£
Ë&& 
timeout
)

534 
timeout
--;

537 i‡(
timeout
 == 0)

540  
HAL_TIMEOUT
;

545  
HAL_OK
;

547 
	}
}

554 
	$SD_IO_WrôeDummy
()

557 
	`SD_CS_HIGH
();

560 
	`SD_IO_WrôeByã
(
SD_DUMMY_BYTE
);

561 
	}
}

569 
	$LCD_IO_Inô
()

571 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

574 
	`LCD_CS_GPIO_CLK_ENABLE
();

575 
	`LCD_DC_GPIO_CLK_ENABLE
();

578 
GPIO_InôSåu˘
.
Pö
 = 
LCD_CS_PIN
;

579 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

580 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

581 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_HIGH
;

582 
	`HAL_GPIO_Inô
(
SD_CS_GPIO_PORT
, &
GPIO_InôSåu˘
);

585 
GPIO_InôSåu˘
.
Pö
 = 
LCD_DC_PIN
;

586 
	`HAL_GPIO_Inô
(
LCD_DC_GPIO_PORT
, &
GPIO_InôSåu˘
);

589 
	`LCD_CS_HIGH
();

592 
	`SPIx_Inô
();

593 
	}
}

600 
	$LCD_IO_WrôeReg
(
uöt8_t
 
LCDReg
)

603 
	`LCD_CS_LOW
();

606 
	`LCD_DC_LOW
();

609 
	`SPIx_Wrôe
(
LCDReg
);

612 
	`LCD_CS_HIGH
();

613 
	}
}

621 
	$LCD_IO_WrôeD©a
(
uöt8_t
 
D©a
)

624 
	`LCD_CS_LOW
();

627 
	`LCD_DC_HIGH
();

630 
	`SPIx_Wrôe
(
D©a
);

633 
	`LCD_CS_HIGH
();

634 
	}
}

642 
	$LCD_IO_WrôeMu…ùÀD©a
(
uöt8_t
 *
pD©a
, 
uöt32_t
 
Size
)

644 
uöt32_t
 
cou¡î
 = 0;

647 
	`LCD_CS_LOW
();

650 
	`LCD_DC_HIGH
();

652 i‡(
Size
 == 1)

656 
	`SPIx_Wrôe
(*
pD©a
);

662 
cou¡î
 = 
Size
; counter != 0; counter--)

664 ((
hnu˛eo_Spi
.
In°™˚
->
SR
Ë& 
SPI_FLAG_TXE
) != SPI_FLAG_TXE)

668 *((
__IO
 
uöt8_t
*)&
hnu˛eo_Spi
.
In°™˚
->
DR
Ë*(
pD©a
+1);

670 ((
hnu˛eo_Spi
.
In°™˚
->
SR
Ë& 
SPI_FLAG_TXE
) != SPI_FLAG_TXE)

673 *((
__IO
 
uöt8_t
*)&
hnu˛eo_Spi
.
In°™˚
->
DR
Ë*
pD©a
;

674 
cou¡î
--;

675 
pD©a
 += 2;

679 ((
hnu˛eo_Spi
.
In°™˚
->
SR
Ë& 
SPI_FLAG_BSY
Ë!
RESET
)

685 
	`LCD_CS_HIGH
();

686 
	}
}

693 
	$LCD_Dñay
(
uöt32_t
 
Dñay
)

695 
	`HAL_Dñay
(
Dñay
);

696 
	}
}

704 
	$ADCx_M•Inô
(
ADC_H™dÀTy≥Def
 *
hadc
)

706 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

710 
	`NUCLEO_ADCx_GPIO_CLK_ENABLE
();

713 
GPIO_InôSåu˘
.
Pö
 = 
NUCLEO_ADCx_GPIO_PIN
 ;

714 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_ANALOG
;

715 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

716 
	`HAL_GPIO_Inô
(
NUCLEO_ADCx_GPIO_PORT
, &
GPIO_InôSåu˘
);

720 
	`NUCLEO_ADCx_CLK_ENABLE
();

721 
	}
}

728 
	$ADCx_Inô
()

730 if(
	`HAL_ADC_GëSèã
(&
hnu˛eo_Adc
Ë=
HAL_ADC_STATE_RESET
)

733 
hnu˛eo_Adc
.
In°™˚
 = 
NUCLEO_ADCx
;

734 
hnu˛eo_Adc
.
Inô
.
ClockPªsˇÀr
 = 
ADC_CLOCKPRESCALER_PCLK_DIV4
;

735 
hnu˛eo_Adc
.
Inô
.
Resﬁuti⁄
 = 
ADC_RESOLUTION12b
;

736 
hnu˛eo_Adc
.
Inô
.
D©aAlign
 = 
ADC_DATAALIGN_RIGHT
;

737 
hnu˛eo_Adc
.
Inô
.
C⁄töuousC⁄vMode
 = 
DISABLE
;

738 
hnu˛eo_Adc
.
Inô
.
Disc⁄töuousC⁄vMode
 = 
DISABLE
;

739 
hnu˛eo_Adc
.
Inô
.
Exã∫ÆTrigC⁄vEdge
 = 
ADC_EXTERNALTRIGCONVEDGE_NONE
;

740 
hnu˛eo_Adc
.
Inô
.
EOCSñe˘i⁄
 = 
EOC_SINGLE_CONV
;

741 
hnu˛eo_Adc
.
Inô
.
NbrOfC⁄vîsi⁄
 = 1;

742 
hnu˛eo_Adc
.
Inô
.
DMAC⁄töuousReque°s
 = 
DISABLE
;

744 
	`ADCx_M•Inô
(&
hnu˛eo_Adc
);

745 
	`HAL_ADC_Inô
(&
hnu˛eo_Adc
);

747 
	}
}

755 
uöt8_t
 
	$BSP_JOY_Inô
()

757 
uöt8_t
 
°©us
 = 1;

759 
	`ADCx_Inô
();

762 
sC⁄fig
.
Ch™√l
 = 
NUCLEO_ADCx_CHANNEL
;

763 
sC⁄fig
.
Sam∂ögTime
 = 
ADC_SAMPLETIME_3CYCLES
;

764 
sC⁄fig
.
R™k
 = 1;

765 
°©us
 = 
	`HAL_ADC_C⁄figCh™√l
(&
hnu˛eo_Adc
, &
sC⁄fig
);

768  
°©us
;

769 
	}
}

783 
JOYSèã_Ty≥Def
 
	$BSP_JOY_GëSèã
()

785 
JOYSèã_Ty≥Def
 
°©e
;

786 
uöt16_t
 
keyc⁄vîãdvÆue
 = 0;

789 
	`HAL_ADC_Sèπ
(&
hnu˛eo_Adc
);

792 
	`HAL_ADC_PﬁlF‹C⁄vîsi⁄
(&
hnu˛eo_Adc
, 10);

795 if(
	`HAL_ADC_GëSèã
(&
hnu˛eo_Adc
Ë=
HAL_ADC_STATE_EOC_REG
)

798 
keyc⁄vîãdvÆue
 = 
	`HAL_ADC_GëVÆue
(&
hnu˛eo_Adc
);

801 if((
keyc⁄vîãdvÆue
 > 2010) && (keyconvertedvalue < 2090))

803 
°©e
 = 
JOY_UP
;

805 if((
keyc⁄vîãdvÆue
 > 680) && (keyconvertedvalue < 780))

807 
°©e
 = 
JOY_RIGHT
;

809 if((
keyc⁄vîãdvÆue
 > 1270) && (keyconvertedvalue < 1350))

811 
°©e
 = 
JOY_SEL
;

813 if((
keyc⁄vîãdvÆue
 > 50) && (keyconvertedvalue < 130))

815 
°©e
 = 
JOY_DOWN
;

817 if((
keyc⁄vîãdvÆue
 > 3680) && (keyconvertedvalue < 3760))

819 
°©e
 = 
JOY_LEFT
;

823 
°©e
 = 
JOY_NONE
;

827 if(
°©e
 !
JOY_NONE
)

829 
keyc⁄vîãdvÆue
 = 
	`HAL_ADC_GëVÆue
(&
hnu˛eo_Adc
);

832  
°©e
;

833 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\BSP\stm32f4xx_nucleo.h

43 #i‚de‡
__STM32F4XX_NUCLEO_H


44 
	#__STM32F4XX_NUCLEO_H


	)

46 #ifde‡
__˝lu•lus


51 
	~"°m32f4xx_hÆ.h
"

70 
LED2
 = 0

71 }
	tLed_Ty≥Def
;

75 
BUTTON_USER
 = 0,

77 
BUTTON_KEY
 = 
BUTTON_USER


78 } 
	tBuâ⁄_Ty≥Def
;

82 
BUTTON_MODE_GPIO
 = 0,

83 
BUTTON_MODE_EXTI
 = 1

84 }
	tBuâ⁄Mode_Ty≥Def
;

88 
JOY_NONE
 = 0,

89 
JOY_SEL
 = 1,

90 
JOY_DOWN
 = 2,

91 
JOY_LEFT
 = 3,

92 
JOY_RIGHT
 = 4,

93 
JOY_UP
 = 5

94 }
	tJOYSèã_Ty≥Def
;

107 #i‡!
deföed
 (
USE_STM32F4XX_NUCLEO
)

108 
	#USE_STM32F4XX_NUCLEO


	)

114 
	#LEDn
 1

	)

116 
	#LED2_PIN
 
GPIO_PIN_5


	)

117 
	#LED2_GPIO_PORT
 
GPIOA


	)

118 
	#LED2_GPIO_CLK_ENABLE
(Ë
	`__GPIOA_CLK_ENABLE
()

	)

119 
	#LED2_GPIO_CLK_DISABLE
(Ë
	`__GPIOA_CLK_DISABLE
()

	)

121 
	#LEDx_GPIO_CLK_ENABLE
(
__INDEX__
Ëdo{if((__INDEX__Ë=0Ë
	`LED2_GPIO_CLK_ENABLE
(); \

122 }0)

	)

123 
	#LEDx_GPIO_CLK_DISABLE
(
__INDEX__
Ëdo{if((__INDEX__Ë=0Ë
	`LED2_GPIO_CLK_DISABLE
(); \

124 }0)

	)

132 
	#BUTTONn
 1

	)

137 
	#USER_BUTTON_PIN
 
GPIO_PIN_13


	)

138 
	#USER_BUTTON_GPIO_PORT
 
GPIOC


	)

139 
	#USER_BUTTON_GPIO_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOC_CLK_ENABLE
()

	)

140 
	#USER_BUTTON_GPIO_CLK_DISABLE
(Ë
	`__HAL_RCC_GPIOC_CLK_DISABLE
()

	)

141 
	#USER_BUTTON_EXTI_LINE
 
GPIO_PIN_13


	)

142 
	#USER_BUTTON_EXTI_IRQn
 
EXTI15_10_IRQn


	)

144 
	#KEY_BUTTON_PIN
 
USER_BUTTON_PIN


	)

145 
	#KEY_BUTTON_GPIO_PORT
 
USER_BUTTON_GPIO_PORT


	)

146 
	#KEY_BUTTON_GPIO_CLK_ENABLE
(Ë
	`USER_BUTTON_GPIO_CLK_ENABLE
()

	)

147 
	#KEY_BUTTON_GPIO_CLK_DISABLE
(Ë
	`USER_BUTTON_GPIO_CLK_DISABLE
()

	)

148 
	#KEY_BUTTON_EXTI_LINE
 
USER_BUTTON_EXTI_LINE


	)

149 
	#KEY_BUTTON_EXTI_IRQn
 
USER_BUTTON_EXTI_IRQn


	)

152 
	#BUTTONx_GPIO_CLK_ENABLE
(
__BUTTON__
Ëdÿ{ if((__BUTTON__Ë=
BUTTON_USER
Ë{ 
	`USER_BUTTON_GPIO_CLK_ENABLE
(); } } 0)

	)

154 
	#BUTTONx_GPIO_CLK_DISABLE
(
__BUTTON__
Ëdÿ{ if((__BUTTON__Ë=
BUTTON_USER
Ë{ 
	`USER_BUTTON_GPIO_CLK_DISABLE
(); } } 0)

	)

163 
	#NUCLEO_SPIx
 
SPI1


	)

164 
	#NUCLEO_SPIx_CLK_ENABLE
(Ë
	`__SPI1_CLK_ENABLE
()

	)

166 
	#NUCLEO_SPIx_SCK_AF
 
GPIO_AF5_SPI1


	)

167 
	#NUCLEO_SPIx_SCK_GPIO_PORT
 
GPIOA


	)

168 
	#NUCLEO_SPIx_SCK_PIN
 
GPIO_PIN_5


	)

169 
	#NUCLEO_SPIx_SCK_GPIO_CLK_ENABLE
(Ë
	`__GPIOA_CLK_ENABLE
()

	)

170 
	#NUCLEO_SPIx_SCK_GPIO_CLK_DISABLE
(Ë
	`__GPIOA_CLK_DISABLE
()

	)

172 
	#NUCLEO_SPIx_MISO_MOSI_AF
 
GPIO_AF5_SPI1


	)

173 
	#NUCLEO_SPIx_MISO_MOSI_GPIO_PORT
 
GPIOA


	)

174 
	#NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_ENABLE
(Ë
	`__GPIOA_CLK_ENABLE
()

	)

175 
	#NUCLEO_SPIx_MISO_MOSI_GPIO_CLK_DISABLE
(Ë
	`__GPIOA_CLK_DISABLE
()

	)

176 
	#NUCLEO_SPIx_MISO_PIN
 
GPIO_PIN_6


	)

177 
	#NUCLEO_SPIx_MOSI_PIN
 
GPIO_PIN_7


	)

183 
	#NUCLEO_SPIx_TIMEOUT_MAX
 1000

	)

188 
	#SD_CS_LOW
(Ë
	`HAL_GPIO_WrôePö
(
SD_CS_GPIO_PORT
, 
SD_CS_PIN
, 
GPIO_PIN_RESET
)

	)

189 
	#SD_CS_HIGH
(Ë
	`HAL_GPIO_WrôePö
(
SD_CS_GPIO_PORT
, 
SD_CS_PIN
, 
GPIO_PIN_SET
)

	)

194 
	#LCD_CS_LOW
(Ë
	`HAL_GPIO_WrôePö
(
LCD_CS_GPIO_PORT
, 
LCD_CS_PIN
, 
GPIO_PIN_RESET
)

	)

195 
	#LCD_CS_HIGH
(Ë
	`HAL_GPIO_WrôePö
(
LCD_CS_GPIO_PORT
, 
LCD_CS_PIN
, 
GPIO_PIN_SET
)

	)

196 
	#LCD_DC_LOW
(Ë
	`HAL_GPIO_WrôePö
(
LCD_DC_GPIO_PORT
, 
LCD_DC_PIN
, 
GPIO_PIN_RESET
)

	)

197 
	#LCD_DC_HIGH
(Ë
	`HAL_GPIO_WrôePö
(
LCD_DC_GPIO_PORT
, 
LCD_DC_PIN
, 
GPIO_PIN_SET
)

	)

202 
	#SD_CS_PIN
 
GPIO_PIN_5


	)

203 
	#SD_CS_GPIO_PORT
 
GPIOB


	)

204 
	#SD_CS_GPIO_CLK_ENABLE
(Ë
	`__GPIOB_CLK_ENABLE
()

	)

205 
	#SD_CS_GPIO_CLK_DISABLE
(Ë
	`__GPIOB_CLK_DISABLE
()

	)

210 
	#LCD_CS_PIN
 
GPIO_PIN_6


	)

211 
	#LCD_CS_GPIO_PORT
 
GPIOB


	)

212 
	#LCD_CS_GPIO_CLK_ENABLE
(Ë
	`__GPIOB_CLK_ENABLE
()

	)

213 
	#LCD_CS_GPIO_CLK_DISABLE
(Ë
	`__GPIOB_CLK_DISABLE
()

	)

218 
	#LCD_DC_PIN
 
GPIO_PIN_9


	)

219 
	#LCD_DC_GPIO_PORT
 
GPIOA


	)

220 
	#LCD_DC_GPIO_CLK_ENABLE
(Ë
	`__GPIOA_CLK_ENABLE
()

	)

221 
	#LCD_DC_GPIO_CLK_DISABLE
(Ë
	`__GPIOA_CLK_DISABLE
()

	)

228 
	#NUCLEO_ADCx
 
ADC1


	)

229 
	#NUCLEO_ADCx_CLK_ENABLE
(Ë
	`__ADC1_CLK_ENABLE
()

	)

231 
	#NUCLEO_ADCx_CHANNEL
 
ADC_CHANNEL_8


	)

233 
	#NUCLEO_ADCx_GPIO_PORT
 
GPIOB


	)

234 
	#NUCLEO_ADCx_GPIO_PIN
 
GPIO_PIN_0


	)

235 
	#NUCLEO_ADCx_GPIO_CLK_ENABLE
(Ë
	`__GPIOB_CLK_ENABLE
()

	)

236 
	#NUCLEO_ADCx_GPIO_CLK_DISABLE
(Ë
	`__GPIOB_CLK_DISABLE
()

	)

255 
uöt32_t
 
BSP_GëVîsi⁄
();

256 
BSP_LED_Inô
(
Led_Ty≥Def
 
Led
);

257 
BSP_LED_On
(
Led_Ty≥Def
 
Led
);

258 
BSP_LED_Off
(
Led_Ty≥Def
 
Led
);

259 
BSP_LED_ToggÀ
(
Led_Ty≥Def
 
Led
);

260 
BSP_PB_Inô
(
Buâ⁄_Ty≥Def
 
Buâ⁄
, 
Buâ⁄Mode_Ty≥Def
 
Buâ⁄Mode
);

261 
uöt32_t
 
BSP_PB_GëSèã
(
Buâ⁄_Ty≥Def
 
Buâ⁄
);

262 
uöt8_t
 
BSP_JOY_Inô
();

263 
JOYSèã_Ty≥Def
 
BSP_JOY_GëSèã
();

281 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\Legacy\stm32_hal_legacy.h

40 #i‚de‡
__STM32_HAL_LEGACY


41 
	#__STM32_HAL_LEGACY


	)

43 #ifde‡
__˝lu•lus


54 
	#AES_FLAG_RDERR
 
CRYP_FLAG_RDERR


	)

55 
	#AES_FLAG_WRERR
 
CRYP_FLAG_WRERR


	)

56 
	#AES_CLEARFLAG_CCF
 
CRYP_CLEARFLAG_CCF


	)

57 
	#AES_CLEARFLAG_RDERR
 
CRYP_CLEARFLAG_RDERR


	)

58 
	#AES_CLEARFLAG_WRERR
 
CRYP_CLEARFLAG_WRERR


	)

67 
	#ADC_RESOLUTION12b
 
ADC_RESOLUTION_12B


	)

68 
	#ADC_RESOLUTION10b
 
ADC_RESOLUTION_10B


	)

69 
	#ADC_RESOLUTION8b
 
ADC_RESOLUTION_8B


	)

70 
	#ADC_RESOLUTION6b
 
ADC_RESOLUTION_6B


	)

71 
	#OVR_DATA_OVERWRITTEN
 
ADC_OVR_DATA_OVERWRITTEN


	)

72 
	#OVR_DATA_PRESERVED
 
ADC_OVR_DATA_PRESERVED


	)

73 
	#EOC_SINGLE_CONV
 
ADC_EOC_SINGLE_CONV


	)

74 
	#EOC_SEQ_CONV
 
ADC_EOC_SEQ_CONV


	)

75 
	#EOC_SINGLE_SEQ_CONV
 
ADC_EOC_SINGLE_SEQ_CONV


	)

76 
	#REGULAR_GROUP
 
ADC_REGULAR_GROUP


	)

77 
	#INJECTED_GROUP
 
ADC_INJECTED_GROUP


	)

78 
	#REGULAR_INJECTED_GROUP
 
ADC_REGULAR_INJECTED_GROUP


	)

79 
	#AWD_EVENT
 
ADC_AWD_EVENT


	)

80 
	#AWD1_EVENT
 
ADC_AWD1_EVENT


	)

81 
	#AWD2_EVENT
 
ADC_AWD2_EVENT


	)

82 
	#AWD3_EVENT
 
ADC_AWD3_EVENT


	)

83 
	#OVR_EVENT
 
ADC_OVR_EVENT


	)

84 
	#JQOVF_EVENT
 
ADC_JQOVF_EVENT


	)

85 
	#ALL_CHANNELS
 
ADC_ALL_CHANNELS


	)

86 
	#REGULAR_CHANNELS
 
ADC_REGULAR_CHANNELS


	)

87 
	#INJECTED_CHANNELS
 
ADC_INJECTED_CHANNELS


	)

88 
	#SYSCFG_FLAG_SENSOR_ADC
 
ADC_FLAG_SENSOR


	)

89 
	#SYSCFG_FLAG_VREF_ADC
 
ADC_FLAG_VREFINT


	)

90 
	#ADC_CLOCKPRESCALER_PCLK_DIV1
 
ADC_CLOCK_SYNC_PCLK_DIV1


	)

91 
	#ADC_CLOCKPRESCALER_PCLK_DIV2
 
ADC_CLOCK_SYNC_PCLK_DIV2


	)

92 
	#ADC_CLOCKPRESCALER_PCLK_DIV4
 
ADC_CLOCK_SYNC_PCLK_DIV4


	)

93 
	#ADC_CLOCKPRESCALER_PCLK_DIV6
 
ADC_CLOCK_SYNC_PCLK_DIV6


	)

94 
	#ADC_CLOCKPRESCALER_PCLK_DIV8
 
ADC_CLOCK_SYNC_PCLK_DIV8


	)

95 
	#ADC_EXTERNALTRIG0_T6_TRGO
 
ADC_EXTERNALTRIGCONV_T6_TRGO


	)

96 
	#ADC_EXTERNALTRIG1_T21_CC2
 
ADC_EXTERNALTRIGCONV_T21_CC2


	)

97 
	#ADC_EXTERNALTRIG2_T2_TRGO
 
ADC_EXTERNALTRIGCONV_T2_TRGO


	)

98 
	#ADC_EXTERNALTRIG3_T2_CC4
 
ADC_EXTERNALTRIGCONV_T2_CC4


	)

99 
	#ADC_EXTERNALTRIG4_T22_TRGO
 
ADC_EXTERNALTRIGCONV_T22_TRGO


	)

100 
	#ADC_EXTERNALTRIG7_EXT_IT11
 
ADC_EXTERNALTRIGCONV_EXT_IT11


	)

101 
	#ADC_CLOCK_ASYNC
 
ADC_CLOCK_ASYNC_DIV1


	)

102 
	#ADC_EXTERNALTRIG_EDGE_NONE
 
ADC_EXTERNALTRIGCONVEDGE_NONE


	)

103 
	#ADC_EXTERNALTRIG_EDGE_RISING
 
ADC_EXTERNALTRIGCONVEDGE_RISING


	)

104 
	#ADC_EXTERNALTRIG_EDGE_FALLING
 
ADC_EXTERNALTRIGCONVEDGE_FALLING


	)

105 
	#ADC_EXTERNALTRIG_EDGE_RISINGFALLING
 
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING


	)

114 
	#__HAL_CEC_GET_IT
 
__HAL_CEC_GET_FLAG


	)

124 
	#COMP_WINDOWMODE_DISABLED
 
COMP_WINDOWMODE_DISABLE


	)

125 
	#COMP_WINDOWMODE_ENABLED
 
COMP_WINDOWMODE_ENABLE


	)

126 
	#COMP_EXTI_LINE_COMP1_EVENT
 
COMP_EXTI_LINE_COMP1


	)

127 
	#COMP_EXTI_LINE_COMP2_EVENT
 
COMP_EXTI_LINE_COMP2


	)

137 
	#CRC_OUTPUTDATA_INVERSION_DISABLED
 
CRC_OUTPUTDATA_INVERSION_DISABLE


	)

138 
	#CRC_OUTPUTDATA_INVERSION_ENABLED
 
CRC_OUTPUTDATA_INVERSION_ENABLE


	)

148 
	#DAC1_CHANNEL_1
 
DAC_CHANNEL_1


	)

149 
	#DAC1_CHANNEL_2
 
DAC_CHANNEL_2


	)

150 
	#DAC2_CHANNEL_1
 
DAC_CHANNEL_1


	)

151 
	#DAC_WAVE_NONE
 ((
uöt32_t
)0x00000000)

	)

152 
	#DAC_WAVE_NOISE
 ((
uöt32_t
)
DAC_CR_WAVE1_0
)

	)

153 
	#DAC_WAVE_TRIANGLE
 ((
uöt32_t
)
DAC_CR_WAVE1_1
)

	)

154 
	#DAC_WAVEGENERATION_NONE
 
DAC_WAVE_NONE


	)

155 
	#DAC_WAVEGENERATION_NOISE
 
DAC_WAVE_NOISE


	)

156 
	#DAC_WAVEGENERATION_TRIANGLE
 
DAC_WAVE_TRIANGLE


	)

165 
	#HAL_REMAPDMA_ADC_DMA_CH2
 
DMA_REMAP_ADC_DMA_CH2


	)

166 
	#HAL_REMAPDMA_USART1_TX_DMA_CH4
 
DMA_REMAP_USART1_TX_DMA_CH4


	)

167 
	#HAL_REMAPDMA_USART1_RX_DMA_CH5
 
DMA_REMAP_USART1_RX_DMA_CH5


	)

168 
	#HAL_REMAPDMA_TIM16_DMA_CH4
 
DMA_REMAP_TIM16_DMA_CH4


	)

169 
	#HAL_REMAPDMA_TIM17_DMA_CH2
 
DMA_REMAP_TIM17_DMA_CH2


	)

170 
	#HAL_REMAPDMA_USART3_DMA_CH32
 
DMA_REMAP_USART3_DMA_CH32


	)

171 
	#HAL_REMAPDMA_TIM16_DMA_CH6
 
DMA_REMAP_TIM16_DMA_CH6


	)

172 
	#HAL_REMAPDMA_TIM17_DMA_CH7
 
DMA_REMAP_TIM17_DMA_CH7


	)

173 
	#HAL_REMAPDMA_SPI2_DMA_CH67
 
DMA_REMAP_SPI2_DMA_CH67


	)

174 
	#HAL_REMAPDMA_USART2_DMA_CH67
 
DMA_REMAP_USART2_DMA_CH67


	)

175 
	#HAL_REMAPDMA_USART3_DMA_CH32
 
DMA_REMAP_USART3_DMA_CH32


	)

176 
	#HAL_REMAPDMA_I2C1_DMA_CH76
 
DMA_REMAP_I2C1_DMA_CH76


	)

177 
	#HAL_REMAPDMA_TIM1_DMA_CH6
 
DMA_REMAP_TIM1_DMA_CH6


	)

178 
	#HAL_REMAPDMA_TIM2_DMA_CH7
 
DMA_REMAP_TIM2_DMA_CH7


	)

179 
	#HAL_REMAPDMA_TIM3_DMA_CH6
 
DMA_REMAP_TIM3_DMA_CH6


	)

181 
	#IS_HAL_REMAPDMA
 
IS_DMA_REMAP


	)

182 
	#__HAL_REMAPDMA_CHANNEL_ENABLE
 
__HAL_DMA_REMAP_CHANNEL_ENABLE


	)

183 
	#__HAL_REMAPDMA_CHANNEL_DISABLE
 
__HAL_DMA_REMAP_CHANNEL_DISABLE


	)

195 
	#TYPEPROGRAM_BYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

196 
	#TYPEPROGRAM_HALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

197 
	#TYPEPROGRAM_WORD
 
FLASH_TYPEPROGRAM_WORD


	)

198 
	#TYPEPROGRAM_DOUBLEWORD
 
FLASH_TYPEPROGRAM_DOUBLEWORD


	)

199 
	#TYPEERASE_SECTORS
 
FLASH_TYPEERASE_SECTORS


	)

200 
	#TYPEERASE_PAGES
 
FLASH_TYPEERASE_PAGES


	)

201 
	#TYPEERASE_PAGEERASE
 
FLASH_TYPEERASE_PAGES


	)

202 
	#TYPEERASE_MASSERASE
 
FLASH_TYPEERASE_MASSERASE


	)

203 
	#WRPSTATE_DISABLE
 
OB_WRPSTATE_DISABLE


	)

204 
	#WRPSTATE_ENABLE
 
OB_WRPSTATE_ENABLE


	)

205 
	#HAL_FLASH_TIMEOUT_VALUE
 
FLASH_TIMEOUT_VALUE


	)

206 
	#OBEX_PCROP
 
OPTIONBYTE_PCROP


	)

207 
	#OBEX_BOOTCONFIG
 
OPTIONBYTE_BOOTCONFIG


	)

208 
	#PCROPSTATE_DISABLE
 
OB_PCROP_STATE_DISABLE


	)

209 
	#PCROPSTATE_ENABLE
 
OB_PCROP_STATE_ENABLE


	)

210 
	#TYPEERASEDATA_BYTE
 
FLASH_TYPEERASEDATA_BYTE


	)

211 
	#TYPEERASEDATA_HALFWORD
 
FLASH_TYPEERASEDATA_HALFWORD


	)

212 
	#TYPEERASEDATA_WORD
 
FLASH_TYPEERASEDATA_WORD


	)

213 
	#TYPEPROGRAMDATA_BYTE
 
FLASH_TYPEPROGRAMDATA_BYTE


	)

214 
	#TYPEPROGRAMDATA_HALFWORD
 
FLASH_TYPEPROGRAMDATA_HALFWORD


	)

215 
	#TYPEPROGRAMDATA_WORD
 
FLASH_TYPEPROGRAMDATA_WORD


	)

216 
	#TYPEPROGRAMDATA_FASTBYTE
 
FLASH_TYPEPROGRAMDATA_FASTBYTE


	)

217 
	#TYPEPROGRAMDATA_FASTHALFWORD
 
FLASH_TYPEPROGRAMDATA_FASTHALFWORD


	)

218 
	#TYPEPROGRAMDATA_FASTWORD
 
FLASH_TYPEPROGRAMDATA_FASTWORD


	)

219 
	#PAGESIZE
 
FLASH_PAGE_SIZE


	)

220 
	#TYPEPROGRAM_FASTBYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

221 
	#TYPEPROGRAM_FASTHALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

222 
	#TYPEPROGRAM_FASTWORD
 
FLASH_TYPEPROGRAM_WORD


	)

223 
	#VOLTAGE_RANGE_1
 
FLASH_VOLTAGE_RANGE_1


	)

224 
	#VOLTAGE_RANGE_2
 
FLASH_VOLTAGE_RANGE_2


	)

225 
	#VOLTAGE_RANGE_3
 
FLASH_VOLTAGE_RANGE_3


	)

226 
	#VOLTAGE_RANGE_4
 
FLASH_VOLTAGE_RANGE_4


	)

227 
	#TYPEPROGRAM_FAST
 
FLASH_TYPEPROGRAM_FAST


	)

228 
	#TYPEPROGRAM_FAST_AND_LAST
 
FLASH_TYPEPROGRAM_FAST_AND_LAST


	)

229 
	#WRPAREA_BANK1_AREAA
 
OB_WRPAREA_BANK1_AREAA


	)

230 
	#WRPAREA_BANK1_AREAB
 
OB_WRPAREA_BANK1_AREAB


	)

231 
	#WRPAREA_BANK2_AREAA
 
OB_WRPAREA_BANK2_AREAA


	)

232 
	#WRPAREA_BANK2_AREAB
 
OB_WRPAREA_BANK2_AREAB


	)

233 
	#IWDG_STDBY_FREEZE
 
OB_IWDG_STDBY_FREEZE


	)

234 
	#IWDG_STDBY_ACTIVE
 
OB_IWDG_STDBY_RUN


	)

235 
	#IWDG_STOP_FREEZE
 
OB_IWDG_STOP_FREEZE


	)

236 
	#IWDG_STOP_ACTIVE
 
OB_IWDG_STOP_RUN


	)

237 
	#FLASH_ERROR_NONE
 
HAL_FLASH_ERROR_NONE


	)

238 
	#FLASH_ERROR_RD
 
HAL_FLASH_ERROR_RD


	)

239 
	#FLASH_ERROR_PG
 
HAL_FLASH_ERROR_PROG


	)

240 
	#FLASH_ERROR_PGP
 
HAL_FLASH_ERROR_PGS


	)

241 
	#FLASH_ERROR_WRP
 
HAL_FLASH_ERROR_WRP


	)

242 
	#FLASH_ERROR_OPTV
 
HAL_FLASH_ERROR_OPTV


	)

243 
	#FLASH_ERROR_OPTVUSR
 
HAL_FLASH_ERROR_OPTVUSR


	)

244 
	#FLASH_ERROR_PROG
 
HAL_FLASH_ERROR_PROG


	)

245 
	#FLASH_ERROR_OP
 
HAL_FLASH_ERROR_OPERATION


	)

246 
	#FLASH_ERROR_PGA
 
HAL_FLASH_ERROR_PGA


	)

247 
	#FLASH_ERROR_SIZE
 
HAL_FLASH_ERROR_SIZE


	)

248 
	#FLASH_ERROR_SIZ
 
HAL_FLASH_ERROR_SIZE


	)

249 
	#FLASH_ERROR_PGS
 
HAL_FLASH_ERROR_PGS


	)

250 
	#FLASH_ERROR_MIS
 
HAL_FLASH_ERROR_MIS


	)

251 
	#FLASH_ERROR_FAST
 
HAL_FLASH_ERROR_FAST


	)

252 
	#FLASH_ERROR_FWWERR
 
HAL_FLASH_ERROR_FWWERR


	)

253 
	#FLASH_ERROR_NOTZERO
 
HAL_FLASH_ERROR_NOTZERO


	)

254 
	#FLASH_ERROR_OPERATION
 
HAL_FLASH_ERROR_OPERATION


	)

255 
	#FLASH_ERROR_ERS
 
HAL_FLASH_ERROR_ERS


	)

256 
	#OB_WDG_SW
 
OB_IWDG_SW


	)

257 
	#OB_WDG_HW
 
OB_IWDG_HW


	)

258 
	#OB_SDADC12_VDD_MONITOR_SET
 
OB_SDACD_VDD_MONITOR_SET


	)

259 
	#OB_SDADC12_VDD_MONITOR_RESET
 
OB_SDACD_VDD_MONITOR_RESET


	)

260 
	#OB_RAM_PARITY_CHECK_SET
 
OB_SRAM_PARITY_SET


	)

261 
	#OB_RAM_PARITY_CHECK_RESET
 
OB_SRAM_PARITY_RESET


	)

262 
	#IS_OB_SDADC12_VDD_MONITOR
 
IS_OB_SDACD_VDD_MONITOR


	)

263 
	#OB_RDP_LEVEL0
 
OB_RDP_LEVEL_0


	)

264 
	#OB_RDP_LEVEL1
 
OB_RDP_LEVEL_1


	)

265 
	#OB_RDP_LEVEL2
 
OB_RDP_LEVEL_2


	)

274 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA9
 
I2C_FASTMODEPLUS_PA9


	)

275 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA10
 
I2C_FASTMODEPLUS_PA10


	)

276 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB6
 
I2C_FASTMODEPLUS_PB6


	)

277 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB7
 
I2C_FASTMODEPLUS_PB7


	)

278 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB8
 
I2C_FASTMODEPLUS_PB8


	)

279 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB9
 
I2C_FASTMODEPLUS_PB9


	)

280 
	#HAL_SYSCFG_FASTMODEPLUS_I2C1
 
I2C_FASTMODEPLUS_I2C1


	)

281 
	#HAL_SYSCFG_FASTMODEPLUS_I2C2
 
I2C_FASTMODEPLUS_I2C2


	)

282 
	#HAL_SYSCFG_FASTMODEPLUS_I2C3
 
I2C_FASTMODEPLUS_I2C3


	)

291 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32F7
)

292 
	#FMC_NAND_PCC_WAIT_FEATURE_DISABLE
 
FMC_NAND_WAIT_FEATURE_DISABLE


	)

293 
	#FMC_NAND_PCC_WAIT_FEATURE_ENABLE
 
FMC_NAND_WAIT_FEATURE_ENABLE


	)

294 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_8
 
FMC_NAND_MEM_BUS_WIDTH_8


	)

295 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_16
 
FMC_NAND_MEM_BUS_WIDTH_16


	)

297 
	#FMC_NAND_WAIT_FEATURE_DISABLE
 
FMC_NAND_PCC_WAIT_FEATURE_DISABLE


	)

298 
	#FMC_NAND_WAIT_FEATURE_ENABLE
 
FMC_NAND_PCC_WAIT_FEATURE_ENABLE


	)

299 
	#FMC_NAND_MEM_BUS_WIDTH_8
 
FMC_NAND_PCC_MEM_BUS_WIDTH_8


	)

300 
	#FMC_NAND_MEM_BUS_WIDTH_16
 
FMC_NAND_PCC_MEM_BUS_WIDTH_16


	)

310 
	#FSMC_NORSRAM_TYPEDEF
 
FSMC_NORSRAM_Ty≥Def


	)

311 
	#FSMC_NORSRAM_EXTENDED_TYPEDEF
 
FSMC_NORSRAM_EXTENDED_Ty≥Def


	)

319 
	#GET_GPIO_SOURCE
 
GPIO_GET_INDEX


	)

320 
	#GET_GPIO_INDEX
 
GPIO_GET_INDEX


	)

322 #i‡
deföed
(
STM32F4
)

323 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDIO


	)

324 
	#GPIO_AF12_SDMMC1
 
GPIO_AF12_SDIO


	)

327 #i‡
deföed
(
STM32F7
)

328 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

329 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

332 #i‡
deföed
(
STM32L4
)

333 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

334 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

337 
	#GPIO_AF0_LPTIM
 
GPIO_AF0_LPTIM1


	)

338 
	#GPIO_AF1_LPTIM
 
GPIO_AF1_LPTIM1


	)

339 
	#GPIO_AF2_LPTIM
 
GPIO_AF2_LPTIM1


	)

341 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32F4
)

342 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

343 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

344 
	#GPIO_SPEED_FAST
 
GPIO_SPEED_FREQ_HIGH


	)

345 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

355 
	#HRTIM_TIMDELAYEDPROTECTION_DISABLED
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED


	)

356 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_EEV6


	)

357 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_EEV6


	)

358 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV6


	)

359 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6


	)

360 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_DEEV7


	)

361 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_DEEV7


	)

362 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7


	)

363 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7


	)

371 
	#I2C_DUALADDRESS_DISABLED
 
I2C_DUALADDRESS_DISABLE


	)

372 
	#I2C_DUALADDRESS_ENABLED
 
I2C_DUALADDRESS_ENABLE


	)

373 
	#I2C_GENERALCALL_DISABLED
 
I2C_GENERALCALL_DISABLE


	)

374 
	#I2C_GENERALCALL_ENABLED
 
I2C_GENERALCALL_ENABLE


	)

375 
	#I2C_NOSTRETCH_DISABLED
 
I2C_NOSTRETCH_DISABLE


	)

376 
	#I2C_NOSTRETCH_ENABLED
 
I2C_NOSTRETCH_ENABLE


	)

377 
	#I2C_ANALOGFILTER_ENABLED
 
I2C_ANALOGFILTER_ENABLE


	)

378 
	#I2C_ANALOGFILTER_DISABLED
 
I2C_ANALOGFILTER_DISABLE


	)

386 
	#IRDA_ONE_BIT_SAMPLE_DISABLED
 
IRDA_ONE_BIT_SAMPLE_DISABLE


	)

387 
	#IRDA_ONE_BIT_SAMPLE_ENABLED
 
IRDA_ONE_BIT_SAMPLE_ENABLE


	)

396 
	#KR_KEY_RELOAD
 
IWDG_KEY_RELOAD


	)

397 
	#KR_KEY_ENABLE
 
IWDG_KEY_ENABLE


	)

398 
	#KR_KEY_EWA
 
IWDG_KEY_WRITE_ACCESS_ENABLE


	)

399 
	#KR_KEY_DWA
 
IWDG_KEY_WRITE_ACCESS_DISABLE


	)

408 
	#LPTIM_CLOCKSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION


	)

409 
	#LPTIM_CLOCKSAMPLETIME_2TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_2TRANSITIONS


	)

410 
	#LPTIM_CLOCKSAMPLETIME_4TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_4TRANSITIONS


	)

411 
	#LPTIM_CLOCKSAMPLETIME_8TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_8TRANSITIONS


	)

413 
	#LPTIM_CLOCKPOLARITY_RISINGEDGE
 
LPTIM_CLOCKPOLARITY_RISING


	)

414 
	#LPTIM_CLOCKPOLARITY_FALLINGEDGE
 
LPTIM_CLOCKPOLARITY_FALLING


	)

415 
	#LPTIM_CLOCKPOLARITY_BOTHEDGES
 
LPTIM_CLOCKPOLARITY_RISING_FALLING


	)

417 
	#LPTIM_TRIGSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION


	)

418 
	#LPTIM_TRIGSAMPLETIME_2TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

419 
	#LPTIM_TRIGSAMPLETIME_4TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

420 
	#LPTIM_TRIGSAMPLETIME_8TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

424 
	#LPTIM_TRIGSAMPLETIME_2TRANSITION
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

425 
	#LPTIM_TRIGSAMPLETIME_4TRANSITION
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

426 
	#LPTIM_TRIGSAMPLETIME_8TRANSITION
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

435 
	#NAND_AddªssTy≥def
 
NAND_AddªssTy≥Def


	)

437 
	#__ARRAY_ADDRESS
 
ARRAY_ADDRESS


	)

438 
	#__ADDR_1°_CYCLE
 
ADDR_1ST_CYCLE


	)

439 
	#__ADDR_2nd_CYCLE
 
ADDR_2ND_CYCLE


	)

440 
	#__ADDR_3rd_CYCLE
 
ADDR_3RD_CYCLE


	)

441 
	#__ADDR_4th_CYCLE
 
ADDR_4TH_CYCLE


	)

449 
	#NOR_SètusTy≥def
 
HAL_NOR_SètusTy≥Def


	)

450 
	#NOR_SUCCESS
 
HAL_NOR_STATUS_SUCCESS


	)

451 
	#NOR_ONGOING
 
HAL_NOR_STATUS_ONGOING


	)

452 
	#NOR_ERROR
 
HAL_NOR_STATUS_ERROR


	)

453 
	#NOR_TIMEOUT
 
HAL_NOR_STATUS_TIMEOUT


	)

455 
	#__NOR_WRITE
 
NOR_WRITE


	)

456 
	#__NOR_ADDR_SHIFT
 
NOR_ADDR_SHIFT


	)

465 
	#OPAMP_NONINVERTINGINPUT_VP0
 
OPAMP_NONINVERTINGINPUT_IO0


	)

466 
	#OPAMP_NONINVERTINGINPUT_VP1
 
OPAMP_NONINVERTINGINPUT_IO1


	)

467 
	#OPAMP_NONINVERTINGINPUT_VP2
 
OPAMP_NONINVERTINGINPUT_IO2


	)

468 
	#OPAMP_NONINVERTINGINPUT_VP3
 
OPAMP_NONINVERTINGINPUT_IO3


	)

470 
	#OPAMP_SEC_NONINVERTINGINPUT_VP0
 
OPAMP_SEC_NONINVERTINGINPUT_IO0


	)

471 
	#OPAMP_SEC_NONINVERTINGINPUT_VP1
 
OPAMP_SEC_NONINVERTINGINPUT_IO1


	)

472 
	#OPAMP_SEC_NONINVERTINGINPUT_VP2
 
OPAMP_SEC_NONINVERTINGINPUT_IO2


	)

473 
	#OPAMP_SEC_NONINVERTINGINPUT_VP3
 
OPAMP_SEC_NONINVERTINGINPUT_IO3


	)

475 
	#OPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

476 
	#OPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

478 
	#IOPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

479 
	#IOPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

481 
	#OPAMP_SEC_INVERTINGINPUT_VM0
 
OPAMP_SEC_INVERTINGINPUT_IO0


	)

482 
	#OPAMP_SEC_INVERTINGINPUT_VM1
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

484 
	#OPAMP_INVERTINGINPUT_VINM
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

486 
	#OPAMP_PGACONNECT_NO
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_NO


	)

487 
	#OPAMP_PGACONNECT_VM0
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0


	)

488 
	#OPAMP_PGACONNECT_VM1
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1


	)

497 
	#I2S_STANDARD_PHILLIPS
 
I2S_STANDARD_PHILIPS


	)

507 
	#CF_DATA
 
ATA_DATA


	)

508 
	#CF_SECTOR_COUNT
 
ATA_SECTOR_COUNT


	)

509 
	#CF_SECTOR_NUMBER
 
ATA_SECTOR_NUMBER


	)

510 
	#CF_CYLINDER_LOW
 
ATA_CYLINDER_LOW


	)

511 
	#CF_CYLINDER_HIGH
 
ATA_CYLINDER_HIGH


	)

512 
	#CF_CARD_HEAD
 
ATA_CARD_HEAD


	)

513 
	#CF_STATUS_CMD
 
ATA_STATUS_CMD


	)

514 
	#CF_STATUS_CMD_ALTERNATE
 
ATA_STATUS_CMD_ALTERNATE


	)

515 
	#CF_COMMON_DATA_AREA
 
ATA_COMMON_DATA_AREA


	)

518 
	#CF_READ_SECTOR_CMD
 
ATA_READ_SECTOR_CMD


	)

519 
	#CF_WRITE_SECTOR_CMD
 
ATA_WRITE_SECTOR_CMD


	)

520 
	#CF_ERASE_SECTOR_CMD
 
ATA_ERASE_SECTOR_CMD


	)

521 
	#CF_IDENTIFY_CMD
 
ATA_IDENTIFY_CMD


	)

523 
	#PCCARD_SètusTy≥def
 
HAL_PCCARD_SètusTy≥Def


	)

524 
	#PCCARD_SUCCESS
 
HAL_PCCARD_STATUS_SUCCESS


	)

525 
	#PCCARD_ONGOING
 
HAL_PCCARD_STATUS_ONGOING


	)

526 
	#PCCARD_ERROR
 
HAL_PCCARD_STATUS_ERROR


	)

527 
	#PCCARD_TIMEOUT
 
HAL_PCCARD_STATUS_TIMEOUT


	)

536 
	#FORMAT_BIN
 
RTC_FORMAT_BIN


	)

537 
	#FORMAT_BCD
 
RTC_FORMAT_BCD


	)

539 
	#RTC_ALARMSUBSECONDMASK_N⁄e
 
RTC_ALARMSUBSECONDMASK_NONE


	)

540 
	#RTC_TAMPERERASEBACKUP_ENABLED
 
RTC_TAMPER_ERASE_BACKUP_ENABLE


	)

541 
	#RTC_TAMPERERASEBACKUP_DISABLED
 
RTC_TAMPER_ERASE_BACKUP_DISABLE


	)

542 
	#RTC_TAMPERMASK_FLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

543 
	#RTC_TAMPERMASK_FLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

545 
	#RTC_MASKTAMPERFLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

546 
	#RTC_MASKTAMPERFLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

547 
	#RTC_TAMPERERASEBACKUP_ENABLED
 
RTC_TAMPER_ERASE_BACKUP_ENABLE


	)

548 
	#RTC_TAMPERERASEBACKUP_DISABLED
 
RTC_TAMPER_ERASE_BACKUP_DISABLE


	)

549 
	#RTC_MASKTAMPERFLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

550 
	#RTC_MASKTAMPERFLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

551 
	#RTC_TAMPER1_2_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

552 
	#RTC_TAMPER1_2_3_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

554 
	#RTC_TIMESTAMPPIN_PC13
 
RTC_TIMESTAMPPIN_DEFAULT


	)

555 
	#RTC_TIMESTAMPPIN_PA0
 
RTC_TIMESTAMPPIN_POS1


	)

556 
	#RTC_TIMESTAMPPIN_PI8
 
RTC_TIMESTAMPPIN_POS1


	)

557 
	#RTC_TIMESTAMPPIN_PC1
 
RTC_TIMESTAMPPIN_POS2


	)

559 
	#RTC_OUTPUT_REMAP_PC13
 
RTC_OUTPUT_REMAP_NONE


	)

560 
	#RTC_OUTPUT_REMAP_PB14
 
RTC_OUTPUT_REMAP_POS1


	)

561 
	#RTC_OUTPUT_REMAP_PB2
 
RTC_OUTPUT_REMAP_POS1


	)

563 
	#RTC_TAMPERPIN_PC13
 
RTC_TAMPERPIN_DEFAULT


	)

564 
	#RTC_TAMPERPIN_PA0
 
RTC_TAMPERPIN_POS1


	)

565 
	#RTC_TAMPERPIN_PI8
 
RTC_TAMPERPIN_POS1


	)

575 
	#SMARTCARD_NACK_ENABLED
 
SMARTCARD_NACK_ENABLE


	)

576 
	#SMARTCARD_NACK_DISABLED
 
SMARTCARD_NACK_DISABLE


	)

578 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLED
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

579 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLED
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

580 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLE
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

581 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLE
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

583 
	#SMARTCARD_TIMEOUT_DISABLED
 
SMARTCARD_TIMEOUT_DISABLE


	)

584 
	#SMARTCARD_TIMEOUT_ENABLED
 
SMARTCARD_TIMEOUT_ENABLE


	)

586 
	#SMARTCARD_LASTBIT_DISABLED
 
SMARTCARD_LASTBIT_DISABLE


	)

587 
	#SMARTCARD_LASTBIT_ENABLED
 
SMARTCARD_LASTBIT_ENABLE


	)

596 
	#SMBUS_DUALADDRESS_DISABLED
 
SMBUS_DUALADDRESS_DISABLE


	)

597 
	#SMBUS_DUALADDRESS_ENABLED
 
SMBUS_DUALADDRESS_ENABLE


	)

598 
	#SMBUS_GENERALCALL_DISABLED
 
SMBUS_GENERALCALL_DISABLE


	)

599 
	#SMBUS_GENERALCALL_ENABLED
 
SMBUS_GENERALCALL_ENABLE


	)

600 
	#SMBUS_NOSTRETCH_DISABLED
 
SMBUS_NOSTRETCH_DISABLE


	)

601 
	#SMBUS_NOSTRETCH_ENABLED
 
SMBUS_NOSTRETCH_ENABLE


	)

602 
	#SMBUS_ANALOGFILTER_ENABLED
 
SMBUS_ANALOGFILTER_ENABLE


	)

603 
	#SMBUS_ANALOGFILTER_DISABLED
 
SMBUS_ANALOGFILTER_DISABLE


	)

604 
	#SMBUS_PEC_DISABLED
 
SMBUS_PEC_DISABLE


	)

605 
	#SMBUS_PEC_ENABLED
 
SMBUS_PEC_ENABLE


	)

606 
	#HAL_SMBUS_STATE_SLAVE_LISTEN
 
HAL_SMBUS_STATE_LISTEN


	)

614 
	#SPI_TIMODE_DISABLED
 
SPI_TIMODE_DISABLE


	)

615 
	#SPI_TIMODE_ENABLED
 
SPI_TIMODE_ENABLE


	)

617 
	#SPI_CRCCALCULATION_DISABLED
 
SPI_CRCCALCULATION_DISABLE


	)

618 
	#SPI_CRCCALCULATION_ENABLED
 
SPI_CRCCALCULATION_ENABLE


	)

620 
	#SPI_NSS_PULSE_DISABLED
 
SPI_NSS_PULSE_DISABLE


	)

621 
	#SPI_NSS_PULSE_ENABLED
 
SPI_NSS_PULSE_ENABLE


	)

630 
	#CCER_CCxE_MASK
 
TIM_CCER_CCxE_MASK


	)

631 
	#CCER_CCxNE_MASK
 
TIM_CCER_CCxNE_MASK


	)

633 
	#TIM_DMABa£_CR1
 
TIM_DMABASE_CR1


	)

634 
	#TIM_DMABa£_CR2
 
TIM_DMABASE_CR2


	)

635 
	#TIM_DMABa£_SMCR
 
TIM_DMABASE_SMCR


	)

636 
	#TIM_DMABa£_DIER
 
TIM_DMABASE_DIER


	)

637 
	#TIM_DMABa£_SR
 
TIM_DMABASE_SR


	)

638 
	#TIM_DMABa£_EGR
 
TIM_DMABASE_EGR


	)

639 
	#TIM_DMABa£_CCMR1
 
TIM_DMABASE_CCMR1


	)

640 
	#TIM_DMABa£_CCMR2
 
TIM_DMABASE_CCMR2


	)

641 
	#TIM_DMABa£_CCER
 
TIM_DMABASE_CCER


	)

642 
	#TIM_DMABa£_CNT
 
TIM_DMABASE_CNT


	)

643 
	#TIM_DMABa£_PSC
 
TIM_DMABASE_PSC


	)

644 
	#TIM_DMABa£_ARR
 
TIM_DMABASE_ARR


	)

645 
	#TIM_DMABa£_RCR
 
TIM_DMABASE_RCR


	)

646 
	#TIM_DMABa£_CCR1
 
TIM_DMABASE_CCR1


	)

647 
	#TIM_DMABa£_CCR2
 
TIM_DMABASE_CCR2


	)

648 
	#TIM_DMABa£_CCR3
 
TIM_DMABASE_CCR3


	)

649 
	#TIM_DMABa£_CCR4
 
TIM_DMABASE_CCR4


	)

650 
	#TIM_DMABa£_BDTR
 
TIM_DMABASE_BDTR


	)

651 
	#TIM_DMABa£_DCR
 
TIM_DMABASE_DCR


	)

652 
	#TIM_DMABa£_DMAR
 
TIM_DMABASE_DMAR


	)

653 
	#TIM_DMABa£_OR1
 
TIM_DMABASE_OR1


	)

654 
	#TIM_DMABa£_CCMR3
 
TIM_DMABASE_CCMR3


	)

655 
	#TIM_DMABa£_CCR5
 
TIM_DMABASE_CCR5


	)

656 
	#TIM_DMABa£_CCR6
 
TIM_DMABASE_CCR6


	)

657 
	#TIM_DMABa£_OR2
 
TIM_DMABASE_OR2


	)

658 
	#TIM_DMABa£_OR3
 
TIM_DMABASE_OR3


	)

659 
	#TIM_DMABa£_OR
 
TIM_DMABASE_OR


	)

661 
	#TIM_EvítSour˚_Upd©e
 
TIM_EVENTSOURCE_UPDATE


	)

662 
	#TIM_EvítSour˚_CC1
 
TIM_EVENTSOURCE_CC1


	)

663 
	#TIM_EvítSour˚_CC2
 
TIM_EVENTSOURCE_CC2


	)

664 
	#TIM_EvítSour˚_CC3
 
TIM_EVENTSOURCE_CC3


	)

665 
	#TIM_EvítSour˚_CC4
 
TIM_EVENTSOURCE_CC4


	)

666 
	#TIM_EvítSour˚_COM
 
TIM_EVENTSOURCE_COM


	)

667 
	#TIM_EvítSour˚_Triggî
 
TIM_EVENTSOURCE_TRIGGER


	)

668 
	#TIM_EvítSour˚_Bªak
 
TIM_EVENTSOURCE_BREAK


	)

669 
	#TIM_EvítSour˚_Bªak2
 
TIM_EVENTSOURCE_BREAK2


	)

671 
	#TIM_DMABur°Lígth_1Tøns„r
 
TIM_DMABURSTLENGTH_1TRANSFER


	)

672 
	#TIM_DMABur°Lígth_2Tøns„rs
 
TIM_DMABURSTLENGTH_2TRANSFERS


	)

673 
	#TIM_DMABur°Lígth_3Tøns„rs
 
TIM_DMABURSTLENGTH_3TRANSFERS


	)

674 
	#TIM_DMABur°Lígth_4Tøns„rs
 
TIM_DMABURSTLENGTH_4TRANSFERS


	)

675 
	#TIM_DMABur°Lígth_5Tøns„rs
 
TIM_DMABURSTLENGTH_5TRANSFERS


	)

676 
	#TIM_DMABur°Lígth_6Tøns„rs
 
TIM_DMABURSTLENGTH_6TRANSFERS


	)

677 
	#TIM_DMABur°Lígth_7Tøns„rs
 
TIM_DMABURSTLENGTH_7TRANSFERS


	)

678 
	#TIM_DMABur°Lígth_8Tøns„rs
 
TIM_DMABURSTLENGTH_8TRANSFERS


	)

679 
	#TIM_DMABur°Lígth_9Tøns„rs
 
TIM_DMABURSTLENGTH_9TRANSFERS


	)

680 
	#TIM_DMABur°Lígth_10Tøns„rs
 
TIM_DMABURSTLENGTH_10TRANSFERS


	)

681 
	#TIM_DMABur°Lígth_11Tøns„rs
 
TIM_DMABURSTLENGTH_11TRANSFERS


	)

682 
	#TIM_DMABur°Lígth_12Tøns„rs
 
TIM_DMABURSTLENGTH_12TRANSFERS


	)

683 
	#TIM_DMABur°Lígth_13Tøns„rs
 
TIM_DMABURSTLENGTH_13TRANSFERS


	)

684 
	#TIM_DMABur°Lígth_14Tøns„rs
 
TIM_DMABURSTLENGTH_14TRANSFERS


	)

685 
	#TIM_DMABur°Lígth_15Tøns„rs
 
TIM_DMABURSTLENGTH_15TRANSFERS


	)

686 
	#TIM_DMABur°Lígth_16Tøns„rs
 
TIM_DMABURSTLENGTH_16TRANSFERS


	)

687 
	#TIM_DMABur°Lígth_17Tøns„rs
 
TIM_DMABURSTLENGTH_17TRANSFERS


	)

688 
	#TIM_DMABur°Lígth_18Tøns„rs
 
TIM_DMABURSTLENGTH_18TRANSFERS


	)

697 
	#TSC_SYNC_POL_FALL
 
TSC_SYNC_POLARITY_FALLING


	)

698 
	#TSC_SYNC_POL_RISE_HIGH
 
TSC_SYNC_POLARITY_RISING


	)

706 
	#UART_ONEBIT_SAMPLING_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

707 
	#UART_ONEBIT_SAMPLING_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

708 
	#UART_ONE_BIT_SAMPLE_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

709 
	#UART_ONE_BIT_SAMPLE_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

711 
	#__HAL_UART_ONEBIT_ENABLE
 
__HAL_UART_ONE_BIT_SAMPLE_ENABLE


	)

712 
	#__HAL_UART_ONEBIT_DISABLE
 
__HAL_UART_ONE_BIT_SAMPLE_DISABLE


	)

714 
	#__DIV_SAMPLING16
 
UART_DIV_SAMPLING16


	)

715 
	#__DIVMANT_SAMPLING16
 
UART_DIVMANT_SAMPLING16


	)

716 
	#__DIVFRAQ_SAMPLING16
 
UART_DIVFRAQ_SAMPLING16


	)

717 
	#__UART_BRR_SAMPLING16
 
UART_BRR_SAMPLING16


	)

719 
	#__DIV_SAMPLING8
 
UART_DIV_SAMPLING8


	)

720 
	#__DIVMANT_SAMPLING8
 
UART_DIVMANT_SAMPLING8


	)

721 
	#__DIVFRAQ_SAMPLING8
 
UART_DIVFRAQ_SAMPLING8


	)

722 
	#__UART_BRR_SAMPLING8
 
UART_BRR_SAMPLING8


	)

724 
	#UART_WAKEUPMETHODE_IDLELINE
 
UART_WAKEUPMETHOD_IDLELINE


	)

725 
	#UART_WAKEUPMETHODE_ADDRESSMARK
 
UART_WAKEUPMETHOD_ADDRESSMARK


	)

736 
	#USART_CLOCK_DISABLED
 
USART_CLOCK_DISABLE


	)

737 
	#USART_CLOCK_ENABLED
 
USART_CLOCK_ENABLE


	)

739 
	#USARTNACK_ENABLED
 
USART_NACK_ENABLE


	)

740 
	#USARTNACK_DISABLED
 
USART_NACK_DISABLE


	)

748 
	#CFR_BASE
 
WWDG_CFR_BASE


	)

757 
	#CAN_FûãrFIFO0
 
CAN_FILTER_FIFO0


	)

758 
	#CAN_FûãrFIFO1
 
CAN_FILTER_FIFO1


	)

759 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

760 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

761 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

762 
	#INAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

763 
	#SLAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

764 
	#CAN_TXSTATUS_FAILED
 ((
uöt8_t
)0x00)

	)

765 
	#CAN_TXSTATUS_OK
 ((
uöt8_t
)0x01)

	)

766 
	#CAN_TXSTATUS_PENDING
 ((
uöt8_t
)0x02)

	)

776 
	#VLAN_TAG
 
ETH_VLAN_TAG


	)

777 
	#MIN_ETH_PAYLOAD
 
ETH_MIN_ETH_PAYLOAD


	)

778 
	#MAX_ETH_PAYLOAD
 
ETH_MAX_ETH_PAYLOAD


	)

779 
	#JUMBO_FRAME_PAYLOAD
 
ETH_JUMBO_FRAME_PAYLOAD


	)

780 
	#MACMIIAR_CR_MASK
 
ETH_MACMIIAR_CR_MASK


	)

781 
	#MACCR_CLEAR_MASK
 
ETH_MACCR_CLEAR_MASK


	)

782 
	#MACFCR_CLEAR_MASK
 
ETH_MACFCR_CLEAR_MASK


	)

783 
	#DMAOMR_CLEAR_MASK
 
ETH_DMAOMR_CLEAR_MASK


	)

785 
	#ETH_MMCCR
 ((
uöt32_t
)0x00000100)

	)

786 
	#ETH_MMCRIR
 ((
uöt32_t
)0x00000104)

	)

787 
	#ETH_MMCTIR
 ((
uöt32_t
)0x00000108)

	)

788 
	#ETH_MMCRIMR
 ((
uöt32_t
)0x0000010C)

	)

789 
	#ETH_MMCTIMR
 ((
uöt32_t
)0x00000110)

	)

790 
	#ETH_MMCTGFSCCR
 ((
uöt32_t
)0x0000014C)

	)

791 
	#ETH_MMCTGFMSCCR
 ((
uöt32_t
)0x00000150)

	)

792 
	#ETH_MMCTGFCR
 ((
uöt32_t
)0x00000168)

	)

793 
	#ETH_MMCRFCECR
 ((
uöt32_t
)0x00000194)

	)

794 
	#ETH_MMCRFAECR
 ((
uöt32_t
)0x00000198)

	)

795 
	#ETH_MMCRGUFCR
 ((
uöt32_t
)0x000001C4)

	)

814 
	#HAL_CRYP_Compuèti⁄C∂tCÆlback
 
HAL_CRYPEx_Compuèti⁄C∂tCÆlback


	)

823 
	#HAL_HMAC_MD5_Föish
 
HAL_HASH_MD5_Föish


	)

824 
	#HAL_HMAC_SHA1_Föish
 
HAL_HASH_SHA1_Föish


	)

825 
	#HAL_HMAC_SHA224_Föish
 
HAL_HASH_SHA224_Föish


	)

826 
	#HAL_HMAC_SHA256_Föish
 
HAL_HASH_SHA256_Föish


	)

830 
	#HASH_AlgoSñe˘i⁄_SHA1
 
HASH_ALGOSELECTION_SHA1


	)

831 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_ALGOSELECTION_SHA224


	)

832 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_ALGOSELECTION_SHA256


	)

833 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_ALGOSELECTION_MD5


	)

835 
	#HASH_AlgoMode_HASH
 
HASH_ALGOMODE_HASH


	)

836 
	#HASH_AlgoMode_HMAC
 
HASH_ALGOMODE_HMAC


	)

838 
	#HASH_HMACKeyTy≥_Sh‹tKey
 
HASH_HMAC_KEYTYPE_SHORTKEY


	)

839 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_HMAC_KEYTYPE_LONGKEY


	)

847 
	#HAL_E«bÀDBGSÀïMode
 
HAL_DBGMCU_E«bÀDBGSÀïMode


	)

848 
	#HAL_DißbÀDBGSÀïMode
 
HAL_DBGMCU_DißbÀDBGSÀïMode


	)

849 
	#HAL_E«bÀDBGSt›Mode
 
HAL_DBGMCU_E«bÀDBGSt›Mode


	)

850 
	#HAL_DißbÀDBGSt›Mode
 
HAL_DBGMCU_DißbÀDBGSt›Mode


	)

851 
	#HAL_E«bÀDBGSèndbyMode
 
HAL_DBGMCU_E«bÀDBGSèndbyMode


	)

852 
	#HAL_DißbÀDBGSèndbyMode
 
HAL_DBGMCU_DißbÀDBGSèndbyMode


	)

853 
	#HAL_DBG_LowPowîC⁄fig
(
Pîùh
, 
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_DBGMCU_DBG_E«bÀLowPowîC⁄fig
(PîùhË: 
	`HAL_DBGMCU_DBG_DißbÀLowPowîC⁄fig
(Pîùh))

	)

854 
	#HAL_VREFINT_OuçutSñe˘
 
HAL_SYSCFG_VREFINT_OuçutSñe˘


	)

855 
	#HAL_Lock_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_SYSCFG_E«bÀ_Lock_VREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀ_Lock_VREFINT
())

	)

856 
	#HAL_VREFINT_Cmd
(
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_SYSCFG_E«bÀVREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀVREFINT
())

	)

857 
	#HAL_ADC_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINT
(Ë: 
	`HAL_ADCEx_DißbÀVREFINT
())

	)

858 
	#HAL_ADC_E«bÀBuf„rSís‹_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINTTempSís‹
(Ë: 
	`HAL_ADCEx_DißbÀVREFINTTempSís‹
())

	)

866 
	#FLASH_HÆfPageProgøm
 
HAL_FLASHEx_HÆfPageProgøm


	)

867 
	#FLASH_E«bÀRunPowîDown
 
HAL_FLASHEx_E«bÀRunPowîDown


	)

868 
	#FLASH_DißbÀRunPowîDown
 
HAL_FLASHEx_DißbÀRunPowîDown


	)

869 
	#HAL_DATA_EEPROMEx_U∆ock
 
HAL_FLASHEx_DATAEEPROM_U∆ock


	)

870 
	#HAL_DATA_EEPROMEx_Lock
 
HAL_FLASHEx_DATAEEPROM_Lock


	)

871 
	#HAL_DATA_EEPROMEx_Eø£
 
HAL_FLASHEx_DATAEEPROM_Eø£


	)

872 
	#HAL_DATA_EEPROMEx_Progøm
 
HAL_FLASHEx_DATAEEPROM_Progøm


	)

881 
	#HAL_I2CEx_A«logFûãr_C⁄fig
 
HAL_I2CEx_C⁄figA«logFûãr


	)

882 
	#HAL_I2CEx_DigôÆFûãr_C⁄fig
 
HAL_I2CEx_C⁄figDigôÆFûãr


	)

884 
	#HAL_I2CFa°ModePlusC⁄fig
(
SYSCFG_I2CFa°ModePlus
, 
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_I2CEx_E«bÀFa°ModePlus
(SYSCFG_I2CFa°ModePlus): 
	`HAL_I2CEx_DißbÀFa°ModePlus
(SYSCFG_I2CFa°ModePlus))

	)

892 
	#HAL_PWR_PVDC⁄fig
 
HAL_PWR_C⁄figPVD


	)

893 
	#HAL_PWR_DißbÀBkUpReg
 
HAL_PWREx_DißbÀBkUpReg


	)

894 
	#HAL_PWR_DißbÀFœshPowîDown
 
HAL_PWREx_DißbÀFœshPowîDown


	)

895 
	#HAL_PWR_DißbÀVddio2M⁄ô‹
 
HAL_PWREx_DißbÀVddio2M⁄ô‹


	)

896 
	#HAL_PWR_E«bÀBkUpReg
 
HAL_PWREx_E«bÀBkUpReg


	)

897 
	#HAL_PWR_E«bÀFœshPowîDown
 
HAL_PWREx_E«bÀFœshPowîDown


	)

898 
	#HAL_PWR_E«bÀVddio2M⁄ô‹
 
HAL_PWREx_E«bÀVddio2M⁄ô‹


	)

899 
	#HAL_PWR_PVD_PVM_IRQH™dÀr
 
HAL_PWREx_PVD_PVM_IRQH™dÀr


	)

900 
	#HAL_PWR_PVDLevñC⁄fig
 
HAL_PWR_C⁄figPVD


	)

901 
	#HAL_PWR_Vddio2M⁄ô‹_IRQH™dÀr
 
HAL_PWREx_Vddio2M⁄ô‹_IRQH™dÀr


	)

902 
	#HAL_PWR_Vddio2M⁄ô‹CÆlback
 
HAL_PWREx_Vddio2M⁄ô‹CÆlback


	)

903 
	#HAL_PWREx_A˘iv©eOvîDrive
 
HAL_PWREx_E«bÀOvîDrive


	)

904 
	#HAL_PWREx_Dó˘iv©eOvîDrive
 
HAL_PWREx_DißbÀOvîDrive


	)

905 
	#HAL_PWREx_DißbÀSDADCA«log
 
HAL_PWREx_DißbÀSDADC


	)

906 
	#HAL_PWREx_E«bÀSDADCA«log
 
HAL_PWREx_E«bÀSDADC


	)

907 
	#HAL_PWREx_PVMC⁄fig
 
HAL_PWREx_C⁄figPVM


	)

909 
	#PWR_MODE_NORMAL
 
PWR_PVD_MODE_NORMAL


	)

910 
	#PWR_MODE_IT_RISING
 
PWR_PVD_MODE_IT_RISING


	)

911 
	#PWR_MODE_IT_FALLING
 
PWR_PVD_MODE_IT_FALLING


	)

912 
	#PWR_MODE_IT_RISING_FALLING
 
PWR_PVD_MODE_IT_RISING_FALLING


	)

913 
	#PWR_MODE_EVENT_RISING
 
PWR_PVD_MODE_EVENT_RISING


	)

914 
	#PWR_MODE_EVENT_FALLING
 
PWR_PVD_MODE_EVENT_FALLING


	)

915 
	#PWR_MODE_EVENT_RISING_FALLING
 
PWR_PVD_MODE_EVENT_RISING_FALLING


	)

917 
	#CR_OFFSET_BB
 
PWR_CR_OFFSET_BB


	)

918 
	#CSR_OFFSET_BB
 
PWR_CSR_OFFSET_BB


	)

920 
	#DBP_BôNumbî
 
DBP_BIT_NUMBER


	)

921 
	#PVDE_BôNumbî
 
PVDE_BIT_NUMBER


	)

922 
	#PMODE_BôNumbî
 
PMODE_BIT_NUMBER


	)

923 
	#EWUP_BôNumbî
 
EWUP_BIT_NUMBER


	)

924 
	#FPDS_BôNumbî
 
FPDS_BIT_NUMBER


	)

925 
	#ODEN_BôNumbî
 
ODEN_BIT_NUMBER


	)

926 
	#ODSWEN_BôNumbî
 
ODSWEN_BIT_NUMBER


	)

927 
	#MRLVDS_BôNumbî
 
MRLVDS_BIT_NUMBER


	)

928 
	#LPLVDS_BôNumbî
 
LPLVDS_BIT_NUMBER


	)

929 
	#BRE_BôNumbî
 
BRE_BIT_NUMBER


	)

931 
	#PWR_MODE_EVT
 
PWR_PVD_MODE_NORMAL


	)

940 
	#HAL_SMBUS_Sœve_Li°í_IT
 
HAL_SMBUS_E«bÀLi°í_IT


	)

941 
	#HAL_SMBUS_SœveAddrCÆlback
 
HAL_SMBUS_AddrCÆlback


	)

942 
	#HAL_SMBUS_SœveLi°íC∂tCÆlback
 
HAL_SMBUS_Li°íC∂tCÆlback


	)

950 
	#HAL_SPI_FlushRxFifo
 
HAL_SPIEx_FlushRxFifo


	)

958 
	#HAL_TIM_DMADñayPul£C∂t
 
TIM_DMADñayPul£C∂t


	)

959 
	#HAL_TIM_DMAEº‹
 
TIM_DMAEº‹


	)

960 
	#HAL_TIM_DMAC≠tuªC∂t
 
TIM_DMAC≠tuªC∂t


	)

961 
	#HAL_TIMEx_DMACommuèti⁄C∂t
 
TIMEx_DMACommuèti⁄C∂t


	)

969 
	#HAL_UART_WakeupCÆlback
 
HAL_UARTEx_WakeupCÆlback


	)

977 
	#HAL_LTDC_LöeEvíCÆlback
 
HAL_LTDC_LöeEvítCÆlback


	)

996 
	#AES_IT_CC
 
CRYP_IT_CC


	)

997 
	#AES_IT_ERR
 
CRYP_IT_ERR


	)

998 
	#AES_FLAG_CCF
 
CRYP_FLAG_CCF


	)

1006 
	#__HAL_GET_BOOT_MODE
 
__HAL_SYSCFG_GET_BOOT_MODE


	)

1007 
	#__HAL_REMAPMEMORY_FLASH
 
__HAL_SYSCFG_REMAPMEMORY_FLASH


	)

1008 
	#__HAL_REMAPMEMORY_SYSTEMFLASH
 
__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH


	)

1009 
	#__HAL_REMAPMEMORY_SRAM
 
__HAL_SYSCFG_REMAPMEMORY_SRAM


	)

1010 
	#__HAL_REMAPMEMORY_FMC
 
__HAL_SYSCFG_REMAPMEMORY_FMC


	)

1011 
	#__HAL_REMAPMEMORY_FMC_SDRAM
 
__HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM


	)

1012 
	#__HAL_REMAPMEMORY_FSMC
 
__HAL_SYSCFG_REMAPMEMORY_FSMC


	)

1013 
	#__HAL_REMAPMEMORY_QUADSPI
 
__HAL_SYSCFG_REMAPMEMORY_QUADSPI


	)

1014 
	#__HAL_FMC_BANK
 
__HAL_SYSCFG_FMC_BANK


	)

1015 
	#__HAL_GET_FLAG
 
__HAL_SYSCFG_GET_FLAG


	)

1016 
	#__HAL_CLEAR_FLAG
 
__HAL_SYSCFG_CLEAR_FLAG


	)

1017 
	#__HAL_VREFINT_OUT_ENABLE
 
__HAL_SYSCFG_VREFINT_OUT_ENABLE


	)

1018 
	#__HAL_VREFINT_OUT_DISABLE
 
__HAL_SYSCFG_VREFINT_OUT_DISABLE


	)

1020 
	#SYSCFG_FLAG_VREF_READY
 
SYSCFG_FLAG_VREFINT_READY


	)

1021 
	#SYSCFG_FLAG_RC48
 
RCC_FLAG_HSI48


	)

1022 
	#IS_SYSCFG_FASTMODEPLUS_CONFIG
 
IS_I2C_FASTMODEPLUS


	)

1023 
	#UFB_MODE_BôNumbî
 
UFB_MODE_BIT_NUMBER


	)

1024 
	#CMP_PD_BôNumbî
 
CMP_PD_BIT_NUMBER


	)

1034 
	#__ADC_ENABLE
 
__HAL_ADC_ENABLE


	)

1035 
	#__ADC_DISABLE
 
__HAL_ADC_DISABLE


	)

1036 
	#__HAL_ADC_ENABLING_CONDITIONS
 
ADC_ENABLING_CONDITIONS


	)

1037 
	#__HAL_ADC_DISABLING_CONDITIONS
 
ADC_DISABLING_CONDITIONS


	)

1038 
	#__HAL_ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1039 
	#__ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1040 
	#__HAL_ADC_IS_SOFTWARE_START_REGULAR
 
ADC_IS_SOFTWARE_START_REGULAR


	)

1041 
	#__HAL_ADC_IS_SOFTWARE_START_INJECTED
 
ADC_IS_SOFTWARE_START_INJECTED


	)

1042 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED
 
ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED


	)

1043 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR
 
ADC_IS_CONVERSION_ONGOING_REGULAR


	)

1044 
	#__HAL_ADC_IS_CONVERSION_ONGOING_INJECTED
 
ADC_IS_CONVERSION_ONGOING_INJECTED


	)

1045 
	#__HAL_ADC_IS_CONVERSION_ONGOING
 
ADC_IS_CONVERSION_ONGOING


	)

1046 
	#__HAL_ADC_CLEAR_ERRORCODE
 
ADC_CLEAR_ERRORCODE


	)

1048 
	#__HAL_ADC_GET_RESOLUTION
 
ADC_GET_RESOLUTION


	)

1049 
	#__HAL_ADC_JSQR_RK
 
ADC_JSQR_RK


	)

1050 
	#__HAL_ADC_CFGR_AWD1CH
 
ADC_CFGR_AWD1CH_SHIFT


	)

1051 
	#__HAL_ADC_CFGR_AWD23CR
 
ADC_CFGR_AWD23CR


	)

1052 
	#__HAL_ADC_CFGR_INJECT_AUTO_CONVERSION
 
ADC_CFGR_INJECT_AUTO_CONVERSION


	)

1053 
	#__HAL_ADC_CFGR_INJECT_CONTEXT_QUEUE
 
ADC_CFGR_INJECT_CONTEXT_QUEUE


	)

1054 
	#__HAL_ADC_CFGR_INJECT_DISCCONTINUOUS
 
ADC_CFGR_INJECT_DISCCONTINUOUS


	)

1055 
	#__HAL_ADC_CFGR_REG_DISCCONTINUOUS
 
ADC_CFGR_REG_DISCCONTINUOUS


	)

1056 
	#__HAL_ADC_CFGR_DISCONTINUOUS_NUM
 
ADC_CFGR_DISCONTINUOUS_NUM


	)

1057 
	#__HAL_ADC_CFGR_AUTOWAIT
 
ADC_CFGR_AUTOWAIT


	)

1058 
	#__HAL_ADC_CFGR_CONTINUOUS
 
ADC_CFGR_CONTINUOUS


	)

1059 
	#__HAL_ADC_CFGR_OVERRUN
 
ADC_CFGR_OVERRUN


	)

1060 
	#__HAL_ADC_CFGR_DMACONTREQ
 
ADC_CFGR_DMACONTREQ


	)

1061 
	#__HAL_ADC_CFGR_EXTSEL
 
ADC_CFGR_EXTSEL_SET


	)

1062 
	#__HAL_ADC_JSQR_JEXTSEL
 
ADC_JSQR_JEXTSEL_SET


	)

1063 
	#__HAL_ADC_OFR_CHANNEL
 
ADC_OFR_CHANNEL


	)

1064 
	#__HAL_ADC_DIFSEL_CHANNEL
 
ADC_DIFSEL_CHANNEL


	)

1065 
	#__HAL_ADC_CALFACT_DIFF_SET
 
ADC_CALFACT_DIFF_SET


	)

1066 
	#__HAL_ADC_CALFACT_DIFF_GET
 
ADC_CALFACT_DIFF_GET


	)

1067 
	#__HAL_ADC_TRX_HIGHTHRESHOLD
 
ADC_TRX_HIGHTHRESHOLD


	)

1069 
	#__HAL_ADC_OFFSET_SHIFT_RESOLUTION
 
ADC_OFFSET_SHIFT_RESOLUTION


	)

1070 
	#__HAL_ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD1THRESHOLD_SHIFT_RESOLUTION


	)

1071 
	#__HAL_ADC_AWD23THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD23THRESHOLD_SHIFT_RESOLUTION


	)

1072 
	#__HAL_ADC_COMMON_REGISTER
 
ADC_COMMON_REGISTER


	)

1073 
	#__HAL_ADC_COMMON_CCR_MULTI
 
ADC_COMMON_CCR_MULTI


	)

1074 
	#__HAL_ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1075 
	#__ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1076 
	#__HAL_ADC_NONMULTIMODE_OR_MULTIMODEMASTER
 
ADC_NONMULTIMODE_OR_MULTIMODEMASTER


	)

1077 
	#__HAL_ADC_COMMON_ADC_OTHER
 
ADC_COMMON_ADC_OTHER


	)

1078 
	#__HAL_ADC_MULTI_SLAVE
 
ADC_MULTI_SLAVE


	)

1080 
	#__HAL_ADC_SQR1_L
 
ADC_SQR1_L_SHIFT


	)

1081 
	#__HAL_ADC_JSQR_JL
 
ADC_JSQR_JL_SHIFT


	)

1082 
	#__HAL_ADC_JSQR_RK_JL
 
ADC_JSQR_RK_JL


	)

1083 
	#__HAL_ADC_CR1_DISCONTINUOUS_NUM
 
ADC_CR1_DISCONTINUOUS_NUM


	)

1084 
	#__HAL_ADC_CR1_SCAN
 
ADC_CR1_SCAN_SET


	)

1085 
	#__HAL_ADC_CONVCYCLES_MAX_RANGE
 
ADC_CONVCYCLES_MAX_RANGE


	)

1086 
	#__HAL_ADC_CLOCK_PRESCALER_RANGE
 
ADC_CLOCK_PRESCALER_RANGE


	)

1087 
	#__HAL_ADC_GET_CLOCK_PRESCALER
 
ADC_GET_CLOCK_PRESCALER


	)

1089 
	#__HAL_ADC_SQR1
 
ADC_SQR1


	)

1090 
	#__HAL_ADC_SMPR1
 
ADC_SMPR1


	)

1091 
	#__HAL_ADC_SMPR2
 
ADC_SMPR2


	)

1092 
	#__HAL_ADC_SQR3_RK
 
ADC_SQR3_RK


	)

1093 
	#__HAL_ADC_SQR2_RK
 
ADC_SQR2_RK


	)

1094 
	#__HAL_ADC_SQR1_RK
 
ADC_SQR1_RK


	)

1095 
	#__HAL_ADC_CR2_CONTINUOUS
 
ADC_CR2_CONTINUOUS


	)

1096 
	#__HAL_ADC_CR1_DISCONTINUOUS
 
ADC_CR1_DISCONTINUOUS


	)

1097 
	#__HAL_ADC_CR1_SCANCONV
 
ADC_CR1_SCANCONV


	)

1098 
	#__HAL_ADC_CR2_EOCSñe˘i⁄
 
ADC_CR2_EOCSñe˘i⁄


	)

1099 
	#__HAL_ADC_CR2_DMAC⁄tReq
 
ADC_CR2_DMAC⁄tReq


	)

1100 
	#__HAL_ADC_GET_RESOLUTION
 
ADC_GET_RESOLUTION


	)

1101 
	#__HAL_ADC_JSQR
 
ADC_JSQR


	)

1103 
	#__HAL_ADC_CHSELR_CHANNEL
 
ADC_CHSELR_CHANNEL


	)

1104 
	#__HAL_ADC_CFGR1_REG_DISCCONTINUOUS
 
ADC_CFGR1_REG_DISCCONTINUOUS


	)

1105 
	#__HAL_ADC_CFGR1_AUTOOFF
 
ADC_CFGR1_AUTOOFF


	)

1106 
	#__HAL_ADC_CFGR1_AUTOWAIT
 
ADC_CFGR1_AUTOWAIT


	)

1107 
	#__HAL_ADC_CFGR1_CONTINUOUS
 
ADC_CFGR1_CONTINUOUS


	)

1108 
	#__HAL_ADC_CFGR1_OVERRUN
 
ADC_CFGR1_OVERRUN


	)

1109 
	#__HAL_ADC_CFGR1_SCANDIR
 
ADC_CFGR1_SCANDIR


	)

1110 
	#__HAL_ADC_CFGR1_DMACONTREQ
 
ADC_CFGR1_DMACONTREQ


	)

1119 
	#__HAL_DHR12R1_ALIGNEMENT
 
DAC_DHR12R1_ALIGNMENT


	)

1120 
	#__HAL_DHR12R2_ALIGNEMENT
 
DAC_DHR12R2_ALIGNMENT


	)

1121 
	#__HAL_DHR12RD_ALIGNEMENT
 
DAC_DHR12RD_ALIGNMENT


	)

1122 
	#IS_DAC_GENERATE_WAVE
 
IS_DAC_WAVE


	)

1131 
	#__HAL_FREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM1


	)

1132 
	#__HAL_UNFREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM1


	)

1133 
	#__HAL_FREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM2


	)

1134 
	#__HAL_UNFREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM2


	)

1135 
	#__HAL_FREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM3


	)

1136 
	#__HAL_UNFREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM3


	)

1137 
	#__HAL_FREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM4


	)

1138 
	#__HAL_UNFREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM4


	)

1139 
	#__HAL_FREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM5


	)

1140 
	#__HAL_UNFREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM5


	)

1141 
	#__HAL_FREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM6


	)

1142 
	#__HAL_UNFREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM6


	)

1143 
	#__HAL_FREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM7


	)

1144 
	#__HAL_UNFREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM7


	)

1145 
	#__HAL_FREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM8


	)

1146 
	#__HAL_UNFREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM8


	)

1148 
	#__HAL_FREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM9


	)

1149 
	#__HAL_UNFREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM9


	)

1150 
	#__HAL_FREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM10


	)

1151 
	#__HAL_UNFREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM10


	)

1152 
	#__HAL_FREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM11


	)

1153 
	#__HAL_UNFREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM11


	)

1154 
	#__HAL_FREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM12


	)

1155 
	#__HAL_UNFREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM12


	)

1156 
	#__HAL_FREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM13


	)

1157 
	#__HAL_UNFREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM13


	)

1158 
	#__HAL_FREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM14


	)

1159 
	#__HAL_UNFREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM14


	)

1160 
	#__HAL_FREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN2


	)

1161 
	#__HAL_UNFREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN2


	)

1164 
	#__HAL_FREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM15


	)

1165 
	#__HAL_UNFREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM15


	)

1166 
	#__HAL_FREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM16


	)

1167 
	#__HAL_UNFREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM16


	)

1168 
	#__HAL_FREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM17


	)

1169 
	#__HAL_UNFREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM17


	)

1170 
	#__HAL_FREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_FREEZE_RTC


	)

1171 
	#__HAL_UNFREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_RTC


	)

1172 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG


	)

1173 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_WWDG


	)

1174 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG


	)

1175 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_IWDG


	)

1176 
	#__HAL_FREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT


	)

1177 
	#__HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT


	)

1178 
	#__HAL_FREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT


	)

1179 
	#__HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT


	)

1180 
	#__HAL_FREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT


	)

1181 
	#__HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT


	)

1182 
	#__HAL_FREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN1


	)

1183 
	#__HAL_UNFREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN1


	)

1184 
	#__HAL_FREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM1


	)

1185 
	#__HAL_UNFREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM1


	)

1186 
	#__HAL_FREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM2


	)

1187 
	#__HAL_UNFREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM2


	)

1197 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1198 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

1199 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1200 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

1201 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1202 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

1203 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1204 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

1205 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1206 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

1207 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

1208 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

1209 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

1210 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

1211 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

1212 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

1213 
	#__HAL_COMP_GET_EXTI_LINE
 
COMP_GET_EXTI_LINE


	)

1223 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WAVE_NONE
) || \

1224 ((
WAVE
Ë=
DAC_WAVE_NOISE
)|| \

1225 ((
WAVE
Ë=
DAC_WAVE_TRIANGLE
))

	)

1235 
	#IS_WRPAREA
 
IS_OB_WRPAREA


	)

1236 
	#IS_TYPEPROGRAM
 
IS_FLASH_TYPEPROGRAM


	)

1237 
	#IS_TYPEPROGRAMFLASH
 
IS_FLASH_TYPEPROGRAM


	)

1238 
	#IS_TYPEERASE
 
IS_FLASH_TYPEERASE


	)

1239 
	#IS_NBSECTORS
 
IS_FLASH_NBSECTORS


	)

1240 
	#IS_OB_WDG_SOURCE
 
IS_OB_IWDG_SOURCE


	)

1250 
	#__HAL_I2C_RESET_CR2
 
I2C_RESET_CR2


	)

1251 
	#__HAL_I2C_GENERATE_START
 
I2C_GENERATE_START


	)

1252 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQ_RANGE


	)

1253 
	#__HAL_I2C_RISE_TIME
 
I2C_RISE_TIME


	)

1254 
	#__HAL_I2C_SPEED_STANDARD
 
I2C_SPEED_STANDARD


	)

1255 
	#__HAL_I2C_SPEED_FAST
 
I2C_SPEED_FAST


	)

1256 
	#__HAL_I2C_SPEED
 
I2C_SPEED


	)

1257 
	#__HAL_I2C_7BIT_ADD_WRITE
 
I2C_7BIT_ADD_WRITE


	)

1258 
	#__HAL_I2C_7BIT_ADD_READ
 
I2C_7BIT_ADD_READ


	)

1259 
	#__HAL_I2C_10BIT_ADDRESS
 
I2C_10BIT_ADDRESS


	)

1260 
	#__HAL_I2C_10BIT_HEADER_WRITE
 
I2C_10BIT_HEADER_WRITE


	)

1261 
	#__HAL_I2C_10BIT_HEADER_READ
 
I2C_10BIT_HEADER_READ


	)

1262 
	#__HAL_I2C_MEM_ADD_MSB
 
I2C_MEM_ADD_MSB


	)

1263 
	#__HAL_I2C_MEM_ADD_LSB
 
I2C_MEM_ADD_LSB


	)

1264 
	#__HAL_I2C_FREQRANGE
 
I2C_FREQRANGE


	)

1273 
	#IS_I2S_INSTANCE
 
IS_I2S_ALL_INSTANCE


	)

1274 
	#IS_I2S_INSTANCE_EXT
 
IS_I2S_ALL_INSTANCE_EXT


	)

1284 
	#__IRDA_DISABLE
 
__HAL_IRDA_DISABLE


	)

1285 
	#__IRDA_ENABLE
 
__HAL_IRDA_ENABLE


	)

1287 
	#__HAL_IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

1288 
	#__HAL_IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

1289 
	#__IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

1290 
	#__IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

1292 
	#IS_IRDA_ONEBIT_SAMPLE
 
IS_IRDA_ONE_BIT_SAMPLE


	)

1303 
	#__HAL_IWDG_ENABLE_WRITE_ACCESS
 
IWDG_ENABLE_WRITE_ACCESS


	)

1304 
	#__HAL_IWDG_DISABLE_WRITE_ACCESS
 
IWDG_DISABLE_WRITE_ACCESS


	)

1314 
	#__HAL_LPTIM_ENABLE_INTERRUPT
 
__HAL_LPTIM_ENABLE_IT


	)

1315 
	#__HAL_LPTIM_DISABLE_INTERRUPT
 
__HAL_LPTIM_DISABLE_IT


	)

1316 
	#__HAL_LPTIM_GET_ITSTATUS
 
__HAL_LPTIM_GET_IT_SOURCE


	)

1326 
	#__OPAMP_CSR_OPAXPD
 
OPAMP_CSR_OPAXPD


	)

1327 
	#__OPAMP_CSR_S3SELX
 
OPAMP_CSR_S3SELX


	)

1328 
	#__OPAMP_CSR_S4SELX
 
OPAMP_CSR_S4SELX


	)

1329 
	#__OPAMP_CSR_S5SELX
 
OPAMP_CSR_S5SELX


	)

1330 
	#__OPAMP_CSR_S6SELX
 
OPAMP_CSR_S6SELX


	)

1331 
	#__OPAMP_CSR_OPAXCAL_L
 
OPAMP_CSR_OPAXCAL_L


	)

1332 
	#__OPAMP_CSR_OPAXCAL_H
 
OPAMP_CSR_OPAXCAL_H


	)

1333 
	#__OPAMP_CSR_OPAXLPM
 
OPAMP_CSR_OPAXLPM


	)

1334 
	#__OPAMP_CSR_ALL_SWITCHES
 
OPAMP_CSR_ALL_SWITCHES


	)

1335 
	#__OPAMP_CSR_ANAWSELX
 
OPAMP_CSR_ANAWSELX


	)

1336 
	#__OPAMP_CSR_OPAXCALOUT
 
OPAMP_CSR_OPAXCALOUT


	)

1337 
	#__OPAMP_OFFSET_TRIM_BITSPOSITION
 
OPAMP_OFFSET_TRIM_BITSPOSITION


	)

1338 
	#__OPAMP_OFFSET_TRIM_SET
 
OPAMP_OFFSET_TRIM_SET


	)

1348 
	#__HAL_PVD_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

1349 
	#__HAL_PVD_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

1350 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

1351 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1352 
	#__HAL_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

1353 
	#__HAL_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1354 
	#__HAL_PVM_EVENT_DISABLE
 
__HAL_PWR_PVM_EVENT_DISABLE


	)

1355 
	#__HAL_PVM_EVENT_ENABLE
 
__HAL_PWR_PVM_EVENT_ENABLE


	)

1356 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_DISABLE


	)

1357 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_ENABLE


	)

1358 
	#__HAL_PVM_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_DISABLE


	)

1359 
	#__HAL_PVM_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_ENABLE


	)

1360 
	#__HAL_PWR_INTERNALWAKEUP_DISABLE
 
HAL_PWREx_DißbÀI¡î«lWakeUpLöe


	)

1361 
	#__HAL_PWR_INTERNALWAKEUP_ENABLE
 
HAL_PWREx_E«bÀI¡î«lWakeUpLöe


	)

1362 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_DISABLE
 
HAL_PWREx_DißbÀPuŒUpPuŒDownC⁄fig


	)

1363 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_ENABLE
 
HAL_PWREx_E«bÀPuŒUpPuŒDownC⁄fig


	)

1364 
	#__HAL_PWR_PVD_EXTI_CLEAR_EGDE_TRIGGER
(Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
()

	)

1365 
	#__HAL_PWR_PVD_EXTI_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

1366 
	#__HAL_PWR_PVD_EXTI_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

1367 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

1368 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1369 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

1370 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1371 
	#__HAL_PWR_PVD_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

1372 
	#__HAL_PWR_PVD_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

1373 
	#__HAL_PWR_PVM_DISABLE
(Ë
	`HAL_PWREx_DißbÀPVM1
();
	`HAL_PWREx_DißbÀPVM2
();
	`HAL_PWREx_DißbÀPVM3
();
	`HAL_PWREx_DißbÀPVM4
()

	)

1374 
	#__HAL_PWR_PVM_ENABLE
(Ë
	`HAL_PWREx_E«bÀPVM1
();
	`HAL_PWREx_E«bÀPVM2
();
	`HAL_PWREx_E«bÀPVM3
();
	`HAL_PWREx_E«bÀPVM4
()

	)

1375 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_DISABLE
 
HAL_PWREx_DißbÀSRAM2C⁄ã¡Rëíti⁄


	)

1376 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_ENABLE
 
HAL_PWREx_E«bÀSRAM2C⁄ã¡Rëíti⁄


	)

1377 
	#__HAL_PWR_VDDIO2_DISABLE
 
HAL_PWREx_DißbÀVddIO2


	)

1378 
	#__HAL_PWR_VDDIO2_ENABLE
 
HAL_PWREx_E«bÀVddIO2


	)

1379 
	#__HAL_PWR_VDDIO2_EXTI_CLEAR_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_DISABLE_FALLING_EDGE


	)

1380 
	#__HAL_PWR_VDDIO2_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_ENABLE_FALLING_EDGE


	)

1381 
	#__HAL_PWR_VDDUSB_DISABLE
 
HAL_PWREx_DißbÀVddUSB


	)

1382 
	#__HAL_PWR_VDDUSB_ENABLE
 
HAL_PWREx_E«bÀVddUSB


	)

1384 #i‡
deföed
 (
STM32F4
)

1385 
	#__HAL_PVD_EXTI_ENABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
()

	)

1386 
	#__HAL_PVD_EXTI_DISABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
()

	)

1387 
	#__HAL_PVD_EXTI_GET_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GET_FLAG
()

	)

1388 
	#__HAL_PVD_EXTI_CLEAR_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
()

	)

1389 
	#__HAL_PVD_EXTI_GENERATE_SWIT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GENERATE_SWIT
()

	)

1391 
	#__HAL_PVD_EXTI_CLEAR_FLAG
 
__HAL_PWR_PVD_EXTI_CLEAR_FLAG


	)

1392 
	#__HAL_PVD_EXTI_DISABLE_IT
 
__HAL_PWR_PVD_EXTI_DISABLE_IT


	)

1393 
	#__HAL_PVD_EXTI_ENABLE_IT
 
__HAL_PWR_PVD_EXTI_ENABLE_IT


	)

1394 
	#__HAL_PVD_EXTI_GENERATE_SWIT
 
__HAL_PWR_PVD_EXTI_GENERATE_SWIT


	)

1395 
	#__HAL_PVD_EXTI_GET_FLAG
 
__HAL_PWR_PVD_EXTI_GET_FLAG


	)

1406 
	#RCC_St›WakeUpClock_MSI
 
RCC_STOP_WAKEUPCLOCK_MSI


	)

1407 
	#RCC_St›WakeUpClock_HSI
 
RCC_STOP_WAKEUPCLOCK_HSI


	)

1409 
	#HAL_RCC_CCSCÆlback
 
HAL_RCC_CSSCÆlback


	)

1410 
	#HAL_RC48_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_RCCEx_E«bÀHSI48_VREFINT
(Ë: 
	`HAL_RCCEx_DißbÀHSI48_VREFINT
())

	)

1412 
	#__ADC_CLK_DISABLE
 
__HAL_RCC_ADC_CLK_DISABLE


	)

1413 
	#__ADC_CLK_ENABLE
 
__HAL_RCC_ADC_CLK_ENABLE


	)

1414 
	#__ADC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC_CLK_SLEEP_DISABLE


	)

1415 
	#__ADC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC_CLK_SLEEP_ENABLE


	)

1416 
	#__ADC_FORCE_RESET
 
__HAL_RCC_ADC_FORCE_RESET


	)

1417 
	#__ADC_RELEASE_RESET
 
__HAL_RCC_ADC_RELEASE_RESET


	)

1418 
	#__ADC1_CLK_DISABLE
 
__HAL_RCC_ADC1_CLK_DISABLE


	)

1419 
	#__ADC1_CLK_ENABLE
 
__HAL_RCC_ADC1_CLK_ENABLE


	)

1420 
	#__ADC1_FORCE_RESET
 
__HAL_RCC_ADC1_FORCE_RESET


	)

1421 
	#__ADC1_RELEASE_RESET
 
__HAL_RCC_ADC1_RELEASE_RESET


	)

1422 
	#__ADC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_ENABLE


	)

1423 
	#__ADC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_DISABLE


	)

1424 
	#__ADC2_CLK_DISABLE
 
__HAL_RCC_ADC2_CLK_DISABLE


	)

1425 
	#__ADC2_CLK_ENABLE
 
__HAL_RCC_ADC2_CLK_ENABLE


	)

1426 
	#__ADC2_FORCE_RESET
 
__HAL_RCC_ADC2_FORCE_RESET


	)

1427 
	#__ADC2_RELEASE_RESET
 
__HAL_RCC_ADC2_RELEASE_RESET


	)

1428 
	#__ADC3_CLK_DISABLE
 
__HAL_RCC_ADC3_CLK_DISABLE


	)

1429 
	#__ADC3_CLK_ENABLE
 
__HAL_RCC_ADC3_CLK_ENABLE


	)

1430 
	#__ADC3_FORCE_RESET
 
__HAL_RCC_ADC3_FORCE_RESET


	)

1431 
	#__ADC3_RELEASE_RESET
 
__HAL_RCC_ADC3_RELEASE_RESET


	)

1432 
	#__AES_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

1433 
	#__AES_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

1434 
	#__AES_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

1435 
	#__AES_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

1436 
	#__AES_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

1437 
	#__AES_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

1438 
	#__CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_ENABLE


	)

1439 
	#__CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_DISABLE


	)

1440 
	#__CRYP_CLK_ENABLE
 
__HAL_RCC_CRYP_CLK_ENABLE


	)

1441 
	#__CRYP_CLK_DISABLE
 
__HAL_RCC_CRYP_CLK_DISABLE


	)

1442 
	#__CRYP_FORCE_RESET
 
__HAL_RCC_CRYP_FORCE_RESET


	)

1443 
	#__CRYP_RELEASE_RESET
 
__HAL_RCC_CRYP_RELEASE_RESET


	)

1444 
	#__AFIO_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

1445 
	#__AFIO_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

1446 
	#__AFIO_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

1447 
	#__AFIO_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

1448 
	#__AHB_FORCE_RESET
 
__HAL_RCC_AHB_FORCE_RESET


	)

1449 
	#__AHB_RELEASE_RESET
 
__HAL_RCC_AHB_RELEASE_RESET


	)

1450 
	#__AHB1_FORCE_RESET
 
__HAL_RCC_AHB1_FORCE_RESET


	)

1451 
	#__AHB1_RELEASE_RESET
 
__HAL_RCC_AHB1_RELEASE_RESET


	)

1452 
	#__AHB2_FORCE_RESET
 
__HAL_RCC_AHB2_FORCE_RESET


	)

1453 
	#__AHB2_RELEASE_RESET
 
__HAL_RCC_AHB2_RELEASE_RESET


	)

1454 
	#__AHB3_FORCE_RESET
 
__HAL_RCC_AHB3_FORCE_RESET


	)

1455 
	#__AHB3_RELEASE_RESET
 
__HAL_RCC_AHB3_RELEASE_RESET


	)

1456 
	#__APB1_FORCE_RESET
 
__HAL_RCC_APB1_FORCE_RESET


	)

1457 
	#__APB1_RELEASE_RESET
 
__HAL_RCC_APB1_RELEASE_RESET


	)

1458 
	#__APB2_FORCE_RESET
 
__HAL_RCC_APB2_FORCE_RESET


	)

1459 
	#__APB2_RELEASE_RESET
 
__HAL_RCC_APB2_RELEASE_RESET


	)

1460 
	#__BKP_CLK_DISABLE
 
__HAL_RCC_BKP_CLK_DISABLE


	)

1461 
	#__BKP_CLK_ENABLE
 
__HAL_RCC_BKP_CLK_ENABLE


	)

1462 
	#__BKP_FORCE_RESET
 
__HAL_RCC_BKP_FORCE_RESET


	)

1463 
	#__BKP_RELEASE_RESET
 
__HAL_RCC_BKP_RELEASE_RESET


	)

1464 
	#__CAN1_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

1465 
	#__CAN1_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

1466 
	#__CAN1_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_DISABLE


	)

1467 
	#__CAN1_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_ENABLE


	)

1468 
	#__CAN1_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

1469 
	#__CAN1_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

1470 
	#__CAN_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

1471 
	#__CAN_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

1472 
	#__CAN_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

1473 
	#__CAN_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

1474 
	#__CAN2_CLK_DISABLE
 
__HAL_RCC_CAN2_CLK_DISABLE


	)

1475 
	#__CAN2_CLK_ENABLE
 
__HAL_RCC_CAN2_CLK_ENABLE


	)

1476 
	#__CAN2_FORCE_RESET
 
__HAL_RCC_CAN2_FORCE_RESET


	)

1477 
	#__CAN2_RELEASE_RESET
 
__HAL_RCC_CAN2_RELEASE_RESET


	)

1478 
	#__CEC_CLK_DISABLE
 
__HAL_RCC_CEC_CLK_DISABLE


	)

1479 
	#__CEC_CLK_ENABLE
 
__HAL_RCC_CEC_CLK_ENABLE


	)

1480 
	#__COMP_CLK_DISABLE
 
__HAL_RCC_COMP_CLK_DISABLE


	)

1481 
	#__COMP_CLK_ENABLE
 
__HAL_RCC_COMP_CLK_ENABLE


	)

1482 
	#__COMP_FORCE_RESET
 
__HAL_RCC_COMP_FORCE_RESET


	)

1483 
	#__COMP_RELEASE_RESET
 
__HAL_RCC_COMP_RELEASE_RESET


	)

1484 
	#__COMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_COMP_CLK_SLEEP_ENABLE


	)

1485 
	#__COMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_COMP_CLK_SLEEP_DISABLE


	)

1486 
	#__CEC_FORCE_RESET
 
__HAL_RCC_CEC_FORCE_RESET


	)

1487 
	#__CEC_RELEASE_RESET
 
__HAL_RCC_CEC_RELEASE_RESET


	)

1488 
	#__CRC_CLK_DISABLE
 
__HAL_RCC_CRC_CLK_DISABLE


	)

1489 
	#__CRC_CLK_ENABLE
 
__HAL_RCC_CRC_CLK_ENABLE


	)

1490 
	#__CRC_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRC_CLK_SLEEP_DISABLE


	)

1491 
	#__CRC_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRC_CLK_SLEEP_ENABLE


	)

1492 
	#__CRC_FORCE_RESET
 
__HAL_RCC_CRC_FORCE_RESET


	)

1493 
	#__CRC_RELEASE_RESET
 
__HAL_RCC_CRC_RELEASE_RESET


	)

1494 
	#__DAC_CLK_DISABLE
 
__HAL_RCC_DAC_CLK_DISABLE


	)

1495 
	#__DAC_CLK_ENABLE
 
__HAL_RCC_DAC_CLK_ENABLE


	)

1496 
	#__DAC_FORCE_RESET
 
__HAL_RCC_DAC_FORCE_RESET


	)

1497 
	#__DAC_RELEASE_RESET
 
__HAL_RCC_DAC_RELEASE_RESET


	)

1498 
	#__DAC1_CLK_DISABLE
 
__HAL_RCC_DAC1_CLK_DISABLE


	)

1499 
	#__DAC1_CLK_ENABLE
 
__HAL_RCC_DAC1_CLK_ENABLE


	)

1500 
	#__DAC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_DISABLE


	)

1501 
	#__DAC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_ENABLE


	)

1502 
	#__DAC1_FORCE_RESET
 
__HAL_RCC_DAC1_FORCE_RESET


	)

1503 
	#__DAC1_RELEASE_RESET
 
__HAL_RCC_DAC1_RELEASE_RESET


	)

1504 
	#__DBGMCU_CLK_ENABLE
 
__HAL_RCC_DBGMCU_CLK_ENABLE


	)

1505 
	#__DBGMCU_CLK_DISABLE
 
__HAL_RCC_DBGMCU_CLK_DISABLE


	)

1506 
	#__DBGMCU_FORCE_RESET
 
__HAL_RCC_DBGMCU_FORCE_RESET


	)

1507 
	#__DBGMCU_RELEASE_RESET
 
__HAL_RCC_DBGMCU_RELEASE_RESET


	)

1508 
	#__DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM_CLK_DISABLE


	)

1509 
	#__DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM_CLK_ENABLE


	)

1510 
	#__DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE


	)

1511 
	#__DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE


	)

1512 
	#__DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM_FORCE_RESET


	)

1513 
	#__DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM_RELEASE_RESET


	)

1514 
	#__DMA1_CLK_DISABLE
 
__HAL_RCC_DMA1_CLK_DISABLE


	)

1515 
	#__DMA1_CLK_ENABLE
 
__HAL_RCC_DMA1_CLK_ENABLE


	)

1516 
	#__DMA1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_DISABLE


	)

1517 
	#__DMA1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_ENABLE


	)

1518 
	#__DMA1_FORCE_RESET
 
__HAL_RCC_DMA1_FORCE_RESET


	)

1519 
	#__DMA1_RELEASE_RESET
 
__HAL_RCC_DMA1_RELEASE_RESET


	)

1520 
	#__DMA2_CLK_DISABLE
 
__HAL_RCC_DMA2_CLK_DISABLE


	)

1521 
	#__DMA2_CLK_ENABLE
 
__HAL_RCC_DMA2_CLK_ENABLE


	)

1522 
	#__DMA2_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_DISABLE


	)

1523 
	#__DMA2_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_ENABLE


	)

1524 
	#__DMA2_FORCE_RESET
 
__HAL_RCC_DMA2_FORCE_RESET


	)

1525 
	#__DMA2_RELEASE_RESET
 
__HAL_RCC_DMA2_RELEASE_RESET


	)

1526 
	#__ETHMAC_CLK_DISABLE
 
__HAL_RCC_ETHMAC_CLK_DISABLE


	)

1527 
	#__ETHMAC_CLK_ENABLE
 
__HAL_RCC_ETHMAC_CLK_ENABLE


	)

1528 
	#__ETHMAC_FORCE_RESET
 
__HAL_RCC_ETHMAC_FORCE_RESET


	)

1529 
	#__ETHMAC_RELEASE_RESET
 
__HAL_RCC_ETHMAC_RELEASE_RESET


	)

1530 
	#__ETHMACRX_CLK_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_DISABLE


	)

1531 
	#__ETHMACRX_CLK_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_ENABLE


	)

1532 
	#__ETHMACTX_CLK_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_DISABLE


	)

1533 
	#__ETHMACTX_CLK_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_ENABLE


	)

1534 
	#__FIREWALL_CLK_DISABLE
 
__HAL_RCC_FIREWALL_CLK_DISABLE


	)

1535 
	#__FIREWALL_CLK_ENABLE
 
__HAL_RCC_FIREWALL_CLK_ENABLE


	)

1536 
	#__FLASH_CLK_DISABLE
 
__HAL_RCC_FLASH_CLK_DISABLE


	)

1537 
	#__FLASH_CLK_ENABLE
 
__HAL_RCC_FLASH_CLK_ENABLE


	)

1538 
	#__FLASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_DISABLE


	)

1539 
	#__FLASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_ENABLE


	)

1540 
	#__FLASH_FORCE_RESET
 
__HAL_RCC_FLASH_FORCE_RESET


	)

1541 
	#__FLASH_RELEASE_RESET
 
__HAL_RCC_FLASH_RELEASE_RESET


	)

1542 
	#__FLITF_CLK_DISABLE
 
__HAL_RCC_FLITF_CLK_DISABLE


	)

1543 
	#__FLITF_CLK_ENABLE
 
__HAL_RCC_FLITF_CLK_ENABLE


	)

1544 
	#__FLITF_FORCE_RESET
 
__HAL_RCC_FLITF_FORCE_RESET


	)

1545 
	#__FLITF_RELEASE_RESET
 
__HAL_RCC_FLITF_RELEASE_RESET


	)

1546 
	#__FLITF_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_ENABLE


	)

1547 
	#__FLITF_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_DISABLE


	)

1548 
	#__FMC_CLK_DISABLE
 
__HAL_RCC_FMC_CLK_DISABLE


	)

1549 
	#__FMC_CLK_ENABLE
 
__HAL_RCC_FMC_CLK_ENABLE


	)

1550 
	#__FMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FMC_CLK_SLEEP_DISABLE


	)

1551 
	#__FMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FMC_CLK_SLEEP_ENABLE


	)

1552 
	#__FMC_FORCE_RESET
 
__HAL_RCC_FMC_FORCE_RESET


	)

1553 
	#__FMC_RELEASE_RESET
 
__HAL_RCC_FMC_RELEASE_RESET


	)

1554 
	#__FSMC_CLK_DISABLE
 
__HAL_RCC_FSMC_CLK_DISABLE


	)

1555 
	#__FSMC_CLK_ENABLE
 
__HAL_RCC_FSMC_CLK_ENABLE


	)

1556 
	#__GPIOA_CLK_DISABLE
 
__HAL_RCC_GPIOA_CLK_DISABLE


	)

1557 
	#__GPIOA_CLK_ENABLE
 
__HAL_RCC_GPIOA_CLK_ENABLE


	)

1558 
	#__GPIOA_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE


	)

1559 
	#__GPIOA_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE


	)

1560 
	#__GPIOA_FORCE_RESET
 
__HAL_RCC_GPIOA_FORCE_RESET


	)

1561 
	#__GPIOA_RELEASE_RESET
 
__HAL_RCC_GPIOA_RELEASE_RESET


	)

1562 
	#__GPIOB_CLK_DISABLE
 
__HAL_RCC_GPIOB_CLK_DISABLE


	)

1563 
	#__GPIOB_CLK_ENABLE
 
__HAL_RCC_GPIOB_CLK_ENABLE


	)

1564 
	#__GPIOB_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE


	)

1565 
	#__GPIOB_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE


	)

1566 
	#__GPIOB_FORCE_RESET
 
__HAL_RCC_GPIOB_FORCE_RESET


	)

1567 
	#__GPIOB_RELEASE_RESET
 
__HAL_RCC_GPIOB_RELEASE_RESET


	)

1568 
	#__GPIOC_CLK_DISABLE
 
__HAL_RCC_GPIOC_CLK_DISABLE


	)

1569 
	#__GPIOC_CLK_ENABLE
 
__HAL_RCC_GPIOC_CLK_ENABLE


	)

1570 
	#__GPIOC_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE


	)

1571 
	#__GPIOC_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE


	)

1572 
	#__GPIOC_FORCE_RESET
 
__HAL_RCC_GPIOC_FORCE_RESET


	)

1573 
	#__GPIOC_RELEASE_RESET
 
__HAL_RCC_GPIOC_RELEASE_RESET


	)

1574 
	#__GPIOD_CLK_DISABLE
 
__HAL_RCC_GPIOD_CLK_DISABLE


	)

1575 
	#__GPIOD_CLK_ENABLE
 
__HAL_RCC_GPIOD_CLK_ENABLE


	)

1576 
	#__GPIOD_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE


	)

1577 
	#__GPIOD_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE


	)

1578 
	#__GPIOD_FORCE_RESET
 
__HAL_RCC_GPIOD_FORCE_RESET


	)

1579 
	#__GPIOD_RELEASE_RESET
 
__HAL_RCC_GPIOD_RELEASE_RESET


	)

1580 
	#__GPIOE_CLK_DISABLE
 
__HAL_RCC_GPIOE_CLK_DISABLE


	)

1581 
	#__GPIOE_CLK_ENABLE
 
__HAL_RCC_GPIOE_CLK_ENABLE


	)

1582 
	#__GPIOE_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE


	)

1583 
	#__GPIOE_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE


	)

1584 
	#__GPIOE_FORCE_RESET
 
__HAL_RCC_GPIOE_FORCE_RESET


	)

1585 
	#__GPIOE_RELEASE_RESET
 
__HAL_RCC_GPIOE_RELEASE_RESET


	)

1586 
	#__GPIOF_CLK_DISABLE
 
__HAL_RCC_GPIOF_CLK_DISABLE


	)

1587 
	#__GPIOF_CLK_ENABLE
 
__HAL_RCC_GPIOF_CLK_ENABLE


	)

1588 
	#__GPIOF_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE


	)

1589 
	#__GPIOF_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE


	)

1590 
	#__GPIOF_FORCE_RESET
 
__HAL_RCC_GPIOF_FORCE_RESET


	)

1591 
	#__GPIOF_RELEASE_RESET
 
__HAL_RCC_GPIOF_RELEASE_RESET


	)

1592 
	#__GPIOG_CLK_DISABLE
 
__HAL_RCC_GPIOG_CLK_DISABLE


	)

1593 
	#__GPIOG_CLK_ENABLE
 
__HAL_RCC_GPIOG_CLK_ENABLE


	)

1594 
	#__GPIOG_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE


	)

1595 
	#__GPIOG_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE


	)

1596 
	#__GPIOG_FORCE_RESET
 
__HAL_RCC_GPIOG_FORCE_RESET


	)

1597 
	#__GPIOG_RELEASE_RESET
 
__HAL_RCC_GPIOG_RELEASE_RESET


	)

1598 
	#__GPIOH_CLK_DISABLE
 
__HAL_RCC_GPIOH_CLK_DISABLE


	)

1599 
	#__GPIOH_CLK_ENABLE
 
__HAL_RCC_GPIOH_CLK_ENABLE


	)

1600 
	#__GPIOH_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE


	)

1601 
	#__GPIOH_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE


	)

1602 
	#__GPIOH_FORCE_RESET
 
__HAL_RCC_GPIOH_FORCE_RESET


	)

1603 
	#__GPIOH_RELEASE_RESET
 
__HAL_RCC_GPIOH_RELEASE_RESET


	)

1604 
	#__I2C1_CLK_DISABLE
 
__HAL_RCC_I2C1_CLK_DISABLE


	)

1605 
	#__I2C1_CLK_ENABLE
 
__HAL_RCC_I2C1_CLK_ENABLE


	)

1606 
	#__I2C1_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_DISABLE


	)

1607 
	#__I2C1_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_ENABLE


	)

1608 
	#__I2C1_FORCE_RESET
 
__HAL_RCC_I2C1_FORCE_RESET


	)

1609 
	#__I2C1_RELEASE_RESET
 
__HAL_RCC_I2C1_RELEASE_RESET


	)

1610 
	#__I2C2_CLK_DISABLE
 
__HAL_RCC_I2C2_CLK_DISABLE


	)

1611 
	#__I2C2_CLK_ENABLE
 
__HAL_RCC_I2C2_CLK_ENABLE


	)

1612 
	#__I2C2_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_DISABLE


	)

1613 
	#__I2C2_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_ENABLE


	)

1614 
	#__I2C2_FORCE_RESET
 
__HAL_RCC_I2C2_FORCE_RESET


	)

1615 
	#__I2C2_RELEASE_RESET
 
__HAL_RCC_I2C2_RELEASE_RESET


	)

1616 
	#__I2C3_CLK_DISABLE
 
__HAL_RCC_I2C3_CLK_DISABLE


	)

1617 
	#__I2C3_CLK_ENABLE
 
__HAL_RCC_I2C3_CLK_ENABLE


	)

1618 
	#__I2C3_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_DISABLE


	)

1619 
	#__I2C3_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_ENABLE


	)

1620 
	#__I2C3_FORCE_RESET
 
__HAL_RCC_I2C3_FORCE_RESET


	)

1621 
	#__I2C3_RELEASE_RESET
 
__HAL_RCC_I2C3_RELEASE_RESET


	)

1622 
	#__LCD_CLK_DISABLE
 
__HAL_RCC_LCD_CLK_DISABLE


	)

1623 
	#__LCD_CLK_ENABLE
 
__HAL_RCC_LCD_CLK_ENABLE


	)

1624 
	#__LCD_CLK_SLEEP_DISABLE
 
__HAL_RCC_LCD_CLK_SLEEP_DISABLE


	)

1625 
	#__LCD_CLK_SLEEP_ENABLE
 
__HAL_RCC_LCD_CLK_SLEEP_ENABLE


	)

1626 
	#__LCD_FORCE_RESET
 
__HAL_RCC_LCD_FORCE_RESET


	)

1627 
	#__LCD_RELEASE_RESET
 
__HAL_RCC_LCD_RELEASE_RESET


	)

1628 
	#__LPTIM1_CLK_DISABLE
 
__HAL_RCC_LPTIM1_CLK_DISABLE


	)

1629 
	#__LPTIM1_CLK_ENABLE
 
__HAL_RCC_LPTIM1_CLK_ENABLE


	)

1630 
	#__LPTIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE


	)

1631 
	#__LPTIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE


	)

1632 
	#__LPTIM1_FORCE_RESET
 
__HAL_RCC_LPTIM1_FORCE_RESET


	)

1633 
	#__LPTIM1_RELEASE_RESET
 
__HAL_RCC_LPTIM1_RELEASE_RESET


	)

1634 
	#__LPTIM2_CLK_DISABLE
 
__HAL_RCC_LPTIM2_CLK_DISABLE


	)

1635 
	#__LPTIM2_CLK_ENABLE
 
__HAL_RCC_LPTIM2_CLK_ENABLE


	)

1636 
	#__LPTIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE


	)

1637 
	#__LPTIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE


	)

1638 
	#__LPTIM2_FORCE_RESET
 
__HAL_RCC_LPTIM2_FORCE_RESET


	)

1639 
	#__LPTIM2_RELEASE_RESET
 
__HAL_RCC_LPTIM2_RELEASE_RESET


	)

1640 
	#__LPUART1_CLK_DISABLE
 
__HAL_RCC_LPUART1_CLK_DISABLE


	)

1641 
	#__LPUART1_CLK_ENABLE
 
__HAL_RCC_LPUART1_CLK_ENABLE


	)

1642 
	#__LPUART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE


	)

1643 
	#__LPUART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE


	)

1644 
	#__LPUART1_FORCE_RESET
 
__HAL_RCC_LPUART1_FORCE_RESET


	)

1645 
	#__LPUART1_RELEASE_RESET
 
__HAL_RCC_LPUART1_RELEASE_RESET


	)

1646 
	#__OPAMP_CLK_DISABLE
 
__HAL_RCC_OPAMP_CLK_DISABLE


	)

1647 
	#__OPAMP_CLK_ENABLE
 
__HAL_RCC_OPAMP_CLK_ENABLE


	)

1648 
	#__OPAMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_DISABLE


	)

1649 
	#__OPAMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_ENABLE


	)

1650 
	#__OPAMP_FORCE_RESET
 
__HAL_RCC_OPAMP_FORCE_RESET


	)

1651 
	#__OPAMP_RELEASE_RESET
 
__HAL_RCC_OPAMP_RELEASE_RESET


	)

1652 
	#__OTGFS_CLK_DISABLE
 
__HAL_RCC_OTGFS_CLK_DISABLE


	)

1653 
	#__OTGFS_CLK_ENABLE
 
__HAL_RCC_OTGFS_CLK_ENABLE


	)

1654 
	#__OTGFS_CLK_SLEEP_DISABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_DISABLE


	)

1655 
	#__OTGFS_CLK_SLEEP_ENABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_ENABLE


	)

1656 
	#__OTGFS_FORCE_RESET
 
__HAL_RCC_OTGFS_FORCE_RESET


	)

1657 
	#__OTGFS_RELEASE_RESET
 
__HAL_RCC_OTGFS_RELEASE_RESET


	)

1658 
	#__PWR_CLK_DISABLE
 
__HAL_RCC_PWR_CLK_DISABLE


	)

1659 
	#__PWR_CLK_ENABLE
 
__HAL_RCC_PWR_CLK_ENABLE


	)

1660 
	#__PWR_CLK_SLEEP_DISABLE
 
__HAL_RCC_PWR_CLK_SLEEP_DISABLE


	)

1661 
	#__PWR_CLK_SLEEP_ENABLE
 
__HAL_RCC_PWR_CLK_SLEEP_ENABLE


	)

1662 
	#__PWR_FORCE_RESET
 
__HAL_RCC_PWR_FORCE_RESET


	)

1663 
	#__PWR_RELEASE_RESET
 
__HAL_RCC_PWR_RELEASE_RESET


	)

1664 
	#__QSPI_CLK_DISABLE
 
__HAL_RCC_QSPI_CLK_DISABLE


	)

1665 
	#__QSPI_CLK_ENABLE
 
__HAL_RCC_QSPI_CLK_ENABLE


	)

1666 
	#__QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_DISABLE


	)

1667 
	#__QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_ENABLE


	)

1668 
	#__QSPI_FORCE_RESET
 
__HAL_RCC_QSPI_FORCE_RESET


	)

1669 
	#__QSPI_RELEASE_RESET
 
__HAL_RCC_QSPI_RELEASE_RESET


	)

1670 
	#__RNG_CLK_DISABLE
 
__HAL_RCC_RNG_CLK_DISABLE


	)

1671 
	#__RNG_CLK_ENABLE
 
__HAL_RCC_RNG_CLK_ENABLE


	)

1672 
	#__RNG_CLK_SLEEP_DISABLE
 
__HAL_RCC_RNG_CLK_SLEEP_DISABLE


	)

1673 
	#__RNG_CLK_SLEEP_ENABLE
 
__HAL_RCC_RNG_CLK_SLEEP_ENABLE


	)

1674 
	#__RNG_FORCE_RESET
 
__HAL_RCC_RNG_FORCE_RESET


	)

1675 
	#__RNG_RELEASE_RESET
 
__HAL_RCC_RNG_RELEASE_RESET


	)

1676 
	#__SAI1_CLK_DISABLE
 
__HAL_RCC_SAI1_CLK_DISABLE


	)

1677 
	#__SAI1_CLK_ENABLE
 
__HAL_RCC_SAI1_CLK_ENABLE


	)

1678 
	#__SAI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_DISABLE


	)

1679 
	#__SAI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_ENABLE


	)

1680 
	#__SAI1_FORCE_RESET
 
__HAL_RCC_SAI1_FORCE_RESET


	)

1681 
	#__SAI1_RELEASE_RESET
 
__HAL_RCC_SAI1_RELEASE_RESET


	)

1682 
	#__SAI2_CLK_DISABLE
 
__HAL_RCC_SAI2_CLK_DISABLE


	)

1683 
	#__SAI2_CLK_ENABLE
 
__HAL_RCC_SAI2_CLK_ENABLE


	)

1684 
	#__SAI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_DISABLE


	)

1685 
	#__SAI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_ENABLE


	)

1686 
	#__SAI2_FORCE_RESET
 
__HAL_RCC_SAI2_FORCE_RESET


	)

1687 
	#__SAI2_RELEASE_RESET
 
__HAL_RCC_SAI2_RELEASE_RESET


	)

1688 
	#__SDIO_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

1689 
	#__SDIO_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

1690 
	#__SDMMC_CLK_DISABLE
 
__HAL_RCC_SDMMC_CLK_DISABLE


	)

1691 
	#__SDMMC_CLK_ENABLE
 
__HAL_RCC_SDMMC_CLK_ENABLE


	)

1692 
	#__SDMMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_DISABLE


	)

1693 
	#__SDMMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_ENABLE


	)

1694 
	#__SDMMC_FORCE_RESET
 
__HAL_RCC_SDMMC_FORCE_RESET


	)

1695 
	#__SDMMC_RELEASE_RESET
 
__HAL_RCC_SDMMC_RELEASE_RESET


	)

1696 
	#__SPI1_CLK_DISABLE
 
__HAL_RCC_SPI1_CLK_DISABLE


	)

1697 
	#__SPI1_CLK_ENABLE
 
__HAL_RCC_SPI1_CLK_ENABLE


	)

1698 
	#__SPI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_DISABLE


	)

1699 
	#__SPI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_ENABLE


	)

1700 
	#__SPI1_FORCE_RESET
 
__HAL_RCC_SPI1_FORCE_RESET


	)

1701 
	#__SPI1_RELEASE_RESET
 
__HAL_RCC_SPI1_RELEASE_RESET


	)

1702 
	#__SPI2_CLK_DISABLE
 
__HAL_RCC_SPI2_CLK_DISABLE


	)

1703 
	#__SPI2_CLK_ENABLE
 
__HAL_RCC_SPI2_CLK_ENABLE


	)

1704 
	#__SPI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_DISABLE


	)

1705 
	#__SPI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_ENABLE


	)

1706 
	#__SPI2_FORCE_RESET
 
__HAL_RCC_SPI2_FORCE_RESET


	)

1707 
	#__SPI2_RELEASE_RESET
 
__HAL_RCC_SPI2_RELEASE_RESET


	)

1708 
	#__SPI3_CLK_DISABLE
 
__HAL_RCC_SPI3_CLK_DISABLE


	)

1709 
	#__SPI3_CLK_ENABLE
 
__HAL_RCC_SPI3_CLK_ENABLE


	)

1710 
	#__SPI3_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_DISABLE


	)

1711 
	#__SPI3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_ENABLE


	)

1712 
	#__SPI3_FORCE_RESET
 
__HAL_RCC_SPI3_FORCE_RESET


	)

1713 
	#__SPI3_RELEASE_RESET
 
__HAL_RCC_SPI3_RELEASE_RESET


	)

1714 
	#__SRAM_CLK_DISABLE
 
__HAL_RCC_SRAM_CLK_DISABLE


	)

1715 
	#__SRAM_CLK_ENABLE
 
__HAL_RCC_SRAM_CLK_ENABLE


	)

1716 
	#__SRAM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE


	)

1717 
	#__SRAM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE


	)

1718 
	#__SRAM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE


	)

1719 
	#__SRAM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE


	)

1720 
	#__SWPMI1_CLK_DISABLE
 
__HAL_RCC_SWPMI1_CLK_DISABLE


	)

1721 
	#__SWPMI1_CLK_ENABLE
 
__HAL_RCC_SWPMI1_CLK_ENABLE


	)

1722 
	#__SWPMI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE


	)

1723 
	#__SWPMI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE


	)

1724 
	#__SWPMI1_FORCE_RESET
 
__HAL_RCC_SWPMI1_FORCE_RESET


	)

1725 
	#__SWPMI1_RELEASE_RESET
 
__HAL_RCC_SWPMI1_RELEASE_RESET


	)

1726 
	#__SYSCFG_CLK_DISABLE
 
__HAL_RCC_SYSCFG_CLK_DISABLE


	)

1727 
	#__SYSCFG_CLK_ENABLE
 
__HAL_RCC_SYSCFG_CLK_ENABLE


	)

1728 
	#__SYSCFG_CLK_SLEEP_DISABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE


	)

1729 
	#__SYSCFG_CLK_SLEEP_ENABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE


	)

1730 
	#__SYSCFG_FORCE_RESET
 
__HAL_RCC_SYSCFG_FORCE_RESET


	)

1731 
	#__SYSCFG_RELEASE_RESET
 
__HAL_RCC_SYSCFG_RELEASE_RESET


	)

1732 
	#__TIM1_CLK_DISABLE
 
__HAL_RCC_TIM1_CLK_DISABLE


	)

1733 
	#__TIM1_CLK_ENABLE
 
__HAL_RCC_TIM1_CLK_ENABLE


	)

1734 
	#__TIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_DISABLE


	)

1735 
	#__TIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_ENABLE


	)

1736 
	#__TIM1_FORCE_RESET
 
__HAL_RCC_TIM1_FORCE_RESET


	)

1737 
	#__TIM1_RELEASE_RESET
 
__HAL_RCC_TIM1_RELEASE_RESET


	)

1738 
	#__TIM10_CLK_DISABLE
 
__HAL_RCC_TIM10_CLK_DISABLE


	)

1739 
	#__TIM10_CLK_ENABLE
 
__HAL_RCC_TIM10_CLK_ENABLE


	)

1740 
	#__TIM10_FORCE_RESET
 
__HAL_RCC_TIM10_FORCE_RESET


	)

1741 
	#__TIM10_RELEASE_RESET
 
__HAL_RCC_TIM10_RELEASE_RESET


	)

1742 
	#__TIM11_CLK_DISABLE
 
__HAL_RCC_TIM11_CLK_DISABLE


	)

1743 
	#__TIM11_CLK_ENABLE
 
__HAL_RCC_TIM11_CLK_ENABLE


	)

1744 
	#__TIM11_FORCE_RESET
 
__HAL_RCC_TIM11_FORCE_RESET


	)

1745 
	#__TIM11_RELEASE_RESET
 
__HAL_RCC_TIM11_RELEASE_RESET


	)

1746 
	#__TIM12_CLK_DISABLE
 
__HAL_RCC_TIM12_CLK_DISABLE


	)

1747 
	#__TIM12_CLK_ENABLE
 
__HAL_RCC_TIM12_CLK_ENABLE


	)

1748 
	#__TIM12_FORCE_RESET
 
__HAL_RCC_TIM12_FORCE_RESET


	)

1749 
	#__TIM12_RELEASE_RESET
 
__HAL_RCC_TIM12_RELEASE_RESET


	)

1750 
	#__TIM13_CLK_DISABLE
 
__HAL_RCC_TIM13_CLK_DISABLE


	)

1751 
	#__TIM13_CLK_ENABLE
 
__HAL_RCC_TIM13_CLK_ENABLE


	)

1752 
	#__TIM13_FORCE_RESET
 
__HAL_RCC_TIM13_FORCE_RESET


	)

1753 
	#__TIM13_RELEASE_RESET
 
__HAL_RCC_TIM13_RELEASE_RESET


	)

1754 
	#__TIM14_CLK_DISABLE
 
__HAL_RCC_TIM14_CLK_DISABLE


	)

1755 
	#__TIM14_CLK_ENABLE
 
__HAL_RCC_TIM14_CLK_ENABLE


	)

1756 
	#__TIM14_FORCE_RESET
 
__HAL_RCC_TIM14_FORCE_RESET


	)

1757 
	#__TIM14_RELEASE_RESET
 
__HAL_RCC_TIM14_RELEASE_RESET


	)

1758 
	#__TIM15_CLK_DISABLE
 
__HAL_RCC_TIM15_CLK_DISABLE


	)

1759 
	#__TIM15_CLK_ENABLE
 
__HAL_RCC_TIM15_CLK_ENABLE


	)

1760 
	#__TIM15_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_DISABLE


	)

1761 
	#__TIM15_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_ENABLE


	)

1762 
	#__TIM15_FORCE_RESET
 
__HAL_RCC_TIM15_FORCE_RESET


	)

1763 
	#__TIM15_RELEASE_RESET
 
__HAL_RCC_TIM15_RELEASE_RESET


	)

1764 
	#__TIM16_CLK_DISABLE
 
__HAL_RCC_TIM16_CLK_DISABLE


	)

1765 
	#__TIM16_CLK_ENABLE
 
__HAL_RCC_TIM16_CLK_ENABLE


	)

1766 
	#__TIM16_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_DISABLE


	)

1767 
	#__TIM16_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_ENABLE


	)

1768 
	#__TIM16_FORCE_RESET
 
__HAL_RCC_TIM16_FORCE_RESET


	)

1769 
	#__TIM16_RELEASE_RESET
 
__HAL_RCC_TIM16_RELEASE_RESET


	)

1770 
	#__TIM17_CLK_DISABLE
 
__HAL_RCC_TIM17_CLK_DISABLE


	)

1771 
	#__TIM17_CLK_ENABLE
 
__HAL_RCC_TIM17_CLK_ENABLE


	)

1772 
	#__TIM17_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_DISABLE


	)

1773 
	#__TIM17_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_ENABLE


	)

1774 
	#__TIM17_FORCE_RESET
 
__HAL_RCC_TIM17_FORCE_RESET


	)

1775 
	#__TIM17_RELEASE_RESET
 
__HAL_RCC_TIM17_RELEASE_RESET


	)

1776 
	#__TIM2_CLK_DISABLE
 
__HAL_RCC_TIM2_CLK_DISABLE


	)

1777 
	#__TIM2_CLK_ENABLE
 
__HAL_RCC_TIM2_CLK_ENABLE


	)

1778 
	#__TIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_DISABLE


	)

1779 
	#__TIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_ENABLE


	)

1780 
	#__TIM2_FORCE_RESET
 
__HAL_RCC_TIM2_FORCE_RESET


	)

1781 
	#__TIM2_RELEASE_RESET
 
__HAL_RCC_TIM2_RELEASE_RESET


	)

1782 
	#__TIM3_CLK_DISABLE
 
__HAL_RCC_TIM3_CLK_DISABLE


	)

1783 
	#__TIM3_CLK_ENABLE
 
__HAL_RCC_TIM3_CLK_ENABLE


	)

1784 
	#__TIM3_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_DISABLE


	)

1785 
	#__TIM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_ENABLE


	)

1786 
	#__TIM3_FORCE_RESET
 
__HAL_RCC_TIM3_FORCE_RESET


	)

1787 
	#__TIM3_RELEASE_RESET
 
__HAL_RCC_TIM3_RELEASE_RESET


	)

1788 
	#__TIM4_CLK_DISABLE
 
__HAL_RCC_TIM4_CLK_DISABLE


	)

1789 
	#__TIM4_CLK_ENABLE
 
__HAL_RCC_TIM4_CLK_ENABLE


	)

1790 
	#__TIM4_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_DISABLE


	)

1791 
	#__TIM4_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_ENABLE


	)

1792 
	#__TIM4_FORCE_RESET
 
__HAL_RCC_TIM4_FORCE_RESET


	)

1793 
	#__TIM4_RELEASE_RESET
 
__HAL_RCC_TIM4_RELEASE_RESET


	)

1794 
	#__TIM5_CLK_DISABLE
 
__HAL_RCC_TIM5_CLK_DISABLE


	)

1795 
	#__TIM5_CLK_ENABLE
 
__HAL_RCC_TIM5_CLK_ENABLE


	)

1796 
	#__TIM5_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_DISABLE


	)

1797 
	#__TIM5_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_ENABLE


	)

1798 
	#__TIM5_FORCE_RESET
 
__HAL_RCC_TIM5_FORCE_RESET


	)

1799 
	#__TIM5_RELEASE_RESET
 
__HAL_RCC_TIM5_RELEASE_RESET


	)

1800 
	#__TIM6_CLK_DISABLE
 
__HAL_RCC_TIM6_CLK_DISABLE


	)

1801 
	#__TIM6_CLK_ENABLE
 
__HAL_RCC_TIM6_CLK_ENABLE


	)

1802 
	#__TIM6_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_DISABLE


	)

1803 
	#__TIM6_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_ENABLE


	)

1804 
	#__TIM6_FORCE_RESET
 
__HAL_RCC_TIM6_FORCE_RESET


	)

1805 
	#__TIM6_RELEASE_RESET
 
__HAL_RCC_TIM6_RELEASE_RESET


	)

1806 
	#__TIM7_CLK_DISABLE
 
__HAL_RCC_TIM7_CLK_DISABLE


	)

1807 
	#__TIM7_CLK_ENABLE
 
__HAL_RCC_TIM7_CLK_ENABLE


	)

1808 
	#__TIM7_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_DISABLE


	)

1809 
	#__TIM7_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_ENABLE


	)

1810 
	#__TIM7_FORCE_RESET
 
__HAL_RCC_TIM7_FORCE_RESET


	)

1811 
	#__TIM7_RELEASE_RESET
 
__HAL_RCC_TIM7_RELEASE_RESET


	)

1812 
	#__TIM8_CLK_DISABLE
 
__HAL_RCC_TIM8_CLK_DISABLE


	)

1813 
	#__TIM8_CLK_ENABLE
 
__HAL_RCC_TIM8_CLK_ENABLE


	)

1814 
	#__TIM8_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_DISABLE


	)

1815 
	#__TIM8_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_ENABLE


	)

1816 
	#__TIM8_FORCE_RESET
 
__HAL_RCC_TIM8_FORCE_RESET


	)

1817 
	#__TIM8_RELEASE_RESET
 
__HAL_RCC_TIM8_RELEASE_RESET


	)

1818 
	#__TIM9_CLK_DISABLE
 
__HAL_RCC_TIM9_CLK_DISABLE


	)

1819 
	#__TIM9_CLK_ENABLE
 
__HAL_RCC_TIM9_CLK_ENABLE


	)

1820 
	#__TIM9_FORCE_RESET
 
__HAL_RCC_TIM9_FORCE_RESET


	)

1821 
	#__TIM9_RELEASE_RESET
 
__HAL_RCC_TIM9_RELEASE_RESET


	)

1822 
	#__TSC_CLK_DISABLE
 
__HAL_RCC_TSC_CLK_DISABLE


	)

1823 
	#__TSC_CLK_ENABLE
 
__HAL_RCC_TSC_CLK_ENABLE


	)

1824 
	#__TSC_CLK_SLEEP_DISABLE
 
__HAL_RCC_TSC_CLK_SLEEP_DISABLE


	)

1825 
	#__TSC_CLK_SLEEP_ENABLE
 
__HAL_RCC_TSC_CLK_SLEEP_ENABLE


	)

1826 
	#__TSC_FORCE_RESET
 
__HAL_RCC_TSC_FORCE_RESET


	)

1827 
	#__TSC_RELEASE_RESET
 
__HAL_RCC_TSC_RELEASE_RESET


	)

1828 
	#__UART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

1829 
	#__UART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

1830 
	#__UART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

1831 
	#__UART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

1832 
	#__UART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

1833 
	#__UART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

1834 
	#__UART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

1835 
	#__UART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

1836 
	#__UART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

1837 
	#__UART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

1838 
	#__UART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

1839 
	#__UART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

1840 
	#__USART1_CLK_DISABLE
 
__HAL_RCC_USART1_CLK_DISABLE


	)

1841 
	#__USART1_CLK_ENABLE
 
__HAL_RCC_USART1_CLK_ENABLE


	)

1842 
	#__USART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART1_CLK_SLEEP_DISABLE


	)

1843 
	#__USART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART1_CLK_SLEEP_ENABLE


	)

1844 
	#__USART1_FORCE_RESET
 
__HAL_RCC_USART1_FORCE_RESET


	)

1845 
	#__USART1_RELEASE_RESET
 
__HAL_RCC_USART1_RELEASE_RESET


	)

1846 
	#__USART2_CLK_DISABLE
 
__HAL_RCC_USART2_CLK_DISABLE


	)

1847 
	#__USART2_CLK_ENABLE
 
__HAL_RCC_USART2_CLK_ENABLE


	)

1848 
	#__USART2_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART2_CLK_SLEEP_DISABLE


	)

1849 
	#__USART2_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART2_CLK_SLEEP_ENABLE


	)

1850 
	#__USART2_FORCE_RESET
 
__HAL_RCC_USART2_FORCE_RESET


	)

1851 
	#__USART2_RELEASE_RESET
 
__HAL_RCC_USART2_RELEASE_RESET


	)

1852 
	#__USART3_CLK_DISABLE
 
__HAL_RCC_USART3_CLK_DISABLE


	)

1853 
	#__USART3_CLK_ENABLE
 
__HAL_RCC_USART3_CLK_ENABLE


	)

1854 
	#__USART3_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART3_CLK_SLEEP_DISABLE


	)

1855 
	#__USART3_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART3_CLK_SLEEP_ENABLE


	)

1856 
	#__USART3_FORCE_RESET
 
__HAL_RCC_USART3_FORCE_RESET


	)

1857 
	#__USART3_RELEASE_RESET
 
__HAL_RCC_USART3_RELEASE_RESET


	)

1858 
	#__USART4_CLK_DISABLE
 
__HAL_RCC_USART4_CLK_DISABLE


	)

1859 
	#__USART4_CLK_ENABLE
 
__HAL_RCC_USART4_CLK_ENABLE


	)

1860 
	#__USART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART4_CLK_SLEEP_ENABLE


	)

1861 
	#__USART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART4_CLK_SLEEP_DISABLE


	)

1862 
	#__USART4_FORCE_RESET
 
__HAL_RCC_USART4_FORCE_RESET


	)

1863 
	#__USART4_RELEASE_RESET
 
__HAL_RCC_USART4_RELEASE_RESET


	)

1864 
	#__USART5_CLK_DISABLE
 
__HAL_RCC_USART5_CLK_DISABLE


	)

1865 
	#__USART5_CLK_ENABLE
 
__HAL_RCC_USART5_CLK_ENABLE


	)

1866 
	#__USART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART5_CLK_SLEEP_ENABLE


	)

1867 
	#__USART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART5_CLK_SLEEP_DISABLE


	)

1868 
	#__USART5_FORCE_RESET
 
__HAL_RCC_USART5_FORCE_RESET


	)

1869 
	#__USART5_RELEASE_RESET
 
__HAL_RCC_USART5_RELEASE_RESET


	)

1870 
	#__USART7_CLK_DISABLE
 
__HAL_RCC_USART7_CLK_DISABLE


	)

1871 
	#__USART7_CLK_ENABLE
 
__HAL_RCC_USART7_CLK_ENABLE


	)

1872 
	#__USART7_FORCE_RESET
 
__HAL_RCC_USART7_FORCE_RESET


	)

1873 
	#__USART7_RELEASE_RESET
 
__HAL_RCC_USART7_RELEASE_RESET


	)

1874 
	#__USART8_CLK_DISABLE
 
__HAL_RCC_USART8_CLK_DISABLE


	)

1875 
	#__USART8_CLK_ENABLE
 
__HAL_RCC_USART8_CLK_ENABLE


	)

1876 
	#__USART8_FORCE_RESET
 
__HAL_RCC_USART8_FORCE_RESET


	)

1877 
	#__USART8_RELEASE_RESET
 
__HAL_RCC_USART8_RELEASE_RESET


	)

1878 
	#__USB_CLK_DISABLE
 
__HAL_RCC_USB_CLK_DISABLE


	)

1879 
	#__USB_CLK_ENABLE
 
__HAL_RCC_USB_CLK_ENABLE


	)

1880 
	#__USB_FORCE_RESET
 
__HAL_RCC_USB_FORCE_RESET


	)

1881 
	#__USB_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_CLK_SLEEP_ENABLE


	)

1882 
	#__USB_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_CLK_SLEEP_DISABLE


	)

1883 
	#__USB_OTG_FS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_DISABLE


	)

1884 
	#__USB_OTG_FS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_ENABLE


	)

1885 
	#__USB_RELEASE_RESET
 
__HAL_RCC_USB_RELEASE_RESET


	)

1886 
	#__WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG_CLK_DISABLE


	)

1887 
	#__WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG_CLK_ENABLE


	)

1888 
	#__WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_DISABLE


	)

1889 
	#__WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_ENABLE


	)

1890 
	#__WWDG_FORCE_RESET
 
__HAL_RCC_WWDG_FORCE_RESET


	)

1891 
	#__WWDG_RELEASE_RESET
 
__HAL_RCC_WWDG_RELEASE_RESET


	)

1892 
	#__TIM21_CLK_ENABLE
 
__HAL_RCC_TIM21_CLK_ENABLE


	)

1893 
	#__TIM21_CLK_DISABLE
 
__HAL_RCC_TIM21_CLK_DISABLE


	)

1894 
	#__TIM21_FORCE_RESET
 
__HAL_RCC_TIM21_FORCE_RESET


	)

1895 
	#__TIM21_RELEASE_RESET
 
__HAL_RCC_TIM21_RELEASE_RESET


	)

1896 
	#__TIM21_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_ENABLE


	)

1897 
	#__TIM21_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_DISABLE


	)

1898 
	#__TIM22_CLK_ENABLE
 
__HAL_RCC_TIM22_CLK_ENABLE


	)

1899 
	#__TIM22_CLK_DISABLE
 
__HAL_RCC_TIM22_CLK_DISABLE


	)

1900 
	#__TIM22_FORCE_RESET
 
__HAL_RCC_TIM22_FORCE_RESET


	)

1901 
	#__TIM22_RELEASE_RESET
 
__HAL_RCC_TIM22_RELEASE_RESET


	)

1902 
	#__TIM22_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_ENABLE


	)

1903 
	#__TIM22_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_DISABLE


	)

1904 
	#__CRS_CLK_DISABLE
 
__HAL_RCC_CRS_CLK_DISABLE


	)

1905 
	#__CRS_CLK_ENABLE
 
__HAL_RCC_CRS_CLK_ENABLE


	)

1906 
	#__CRS_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRS_CLK_SLEEP_DISABLE


	)

1907 
	#__CRS_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRS_CLK_SLEEP_ENABLE


	)

1908 
	#__CRS_FORCE_RESET
 
__HAL_RCC_CRS_FORCE_RESET


	)

1909 
	#__CRS_RELEASE_RESET
 
__HAL_RCC_CRS_RELEASE_RESET


	)

1910 
	#__RCC_BACKUPRESET_FORCE
 
__HAL_RCC_BACKUPRESET_FORCE


	)

1911 
	#__RCC_BACKUPRESET_RELEASE
 
__HAL_RCC_BACKUPRESET_RELEASE


	)

1913 
	#__USB_OTG_FS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

1914 
	#__USB_OTG_FS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

1915 
	#__USB_OTG_FS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE


	)

1916 
	#__USB_OTG_FS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE


	)

1917 
	#__USB_OTG_HS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_DISABLE


	)

1918 
	#__USB_OTG_HS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_ENABLE


	)

1919 
	#__USB_OTG_HS_ULPI_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE


	)

1920 
	#__USB_OTG_HS_ULPI_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE


	)

1921 
	#__TIM9_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_ENABLE


	)

1922 
	#__TIM9_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_DISABLE


	)

1923 
	#__TIM10_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_ENABLE


	)

1924 
	#__TIM10_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_DISABLE


	)

1925 
	#__TIM11_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_ENABLE


	)

1926 
	#__TIM11_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_DISABLE


	)

1927 
	#__ETHMACPTP_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE


	)

1928 
	#__ETHMACPTP_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE


	)

1929 
	#__ETHMACPTP_CLK_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_ENABLE


	)

1930 
	#__ETHMACPTP_CLK_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_DISABLE


	)

1931 
	#__HASH_CLK_ENABLE
 
__HAL_RCC_HASH_CLK_ENABLE


	)

1932 
	#__HASH_FORCE_RESET
 
__HAL_RCC_HASH_FORCE_RESET


	)

1933 
	#__HASH_RELEASE_RESET
 
__HAL_RCC_HASH_RELEASE_RESET


	)

1934 
	#__HASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_HASH_CLK_SLEEP_ENABLE


	)

1935 
	#__HASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_HASH_CLK_SLEEP_DISABLE


	)

1936 
	#__HASH_CLK_DISABLE
 
__HAL_RCC_HASH_CLK_DISABLE


	)

1937 
	#__SPI5_CLK_ENABLE
 
__HAL_RCC_SPI5_CLK_ENABLE


	)

1938 
	#__SPI5_CLK_DISABLE
 
__HAL_RCC_SPI5_CLK_DISABLE


	)

1939 
	#__SPI5_FORCE_RESET
 
__HAL_RCC_SPI5_FORCE_RESET


	)

1940 
	#__SPI5_RELEASE_RESET
 
__HAL_RCC_SPI5_RELEASE_RESET


	)

1941 
	#__SPI5_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_ENABLE


	)

1942 
	#__SPI5_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_DISABLE


	)

1943 
	#__SPI6_CLK_ENABLE
 
__HAL_RCC_SPI6_CLK_ENABLE


	)

1944 
	#__SPI6_CLK_DISABLE
 
__HAL_RCC_SPI6_CLK_DISABLE


	)

1945 
	#__SPI6_FORCE_RESET
 
__HAL_RCC_SPI6_FORCE_RESET


	)

1946 
	#__SPI6_RELEASE_RESET
 
__HAL_RCC_SPI6_RELEASE_RESET


	)

1947 
	#__SPI6_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_ENABLE


	)

1948 
	#__SPI6_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_DISABLE


	)

1949 
	#__LTDC_CLK_ENABLE
 
__HAL_RCC_LTDC_CLK_ENABLE


	)

1950 
	#__LTDC_CLK_DISABLE
 
__HAL_RCC_LTDC_CLK_DISABLE


	)

1951 
	#__LTDC_FORCE_RESET
 
__HAL_RCC_LTDC_FORCE_RESET


	)

1952 
	#__LTDC_RELEASE_RESET
 
__HAL_RCC_LTDC_RELEASE_RESET


	)

1953 
	#__LTDC_CLK_SLEEP_ENABLE
 
__HAL_RCC_LTDC_CLK_SLEEP_ENABLE


	)

1954 
	#__ETHMAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE


	)

1955 
	#__ETHMAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE


	)

1956 
	#__ETHMACTX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE


	)

1957 
	#__ETHMACTX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE


	)

1958 
	#__ETHMACRX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE


	)

1959 
	#__ETHMACRX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE


	)

1960 
	#__TIM12_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_ENABLE


	)

1961 
	#__TIM12_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_DISABLE


	)

1962 
	#__TIM13_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_ENABLE


	)

1963 
	#__TIM13_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_DISABLE


	)

1964 
	#__TIM14_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_ENABLE


	)

1965 
	#__TIM14_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_DISABLE


	)

1966 
	#__BKPSRAM_CLK_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_ENABLE


	)

1967 
	#__BKPSRAM_CLK_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_DISABLE


	)

1968 
	#__BKPSRAM_CLK_SLEEP_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE


	)

1969 
	#__BKPSRAM_CLK_SLEEP_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE


	)

1970 
	#__CCMDATARAMEN_CLK_ENABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_ENABLE


	)

1971 
	#__CCMDATARAMEN_CLK_DISABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_DISABLE


	)

1972 
	#__USART6_CLK_ENABLE
 
__HAL_RCC_USART6_CLK_ENABLE


	)

1973 
	#__USART6_CLK_DISABLE
 
__HAL_RCC_USART6_CLK_DISABLE


	)

1974 
	#__USART6_FORCE_RESET
 
__HAL_RCC_USART6_FORCE_RESET


	)

1975 
	#__USART6_RELEASE_RESET
 
__HAL_RCC_USART6_RELEASE_RESET


	)

1976 
	#__USART6_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART6_CLK_SLEEP_ENABLE


	)

1977 
	#__USART6_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART6_CLK_SLEEP_DISABLE


	)

1978 
	#__SPI4_CLK_ENABLE
 
__HAL_RCC_SPI4_CLK_ENABLE


	)

1979 
	#__SPI4_CLK_DISABLE
 
__HAL_RCC_SPI4_CLK_DISABLE


	)

1980 
	#__SPI4_FORCE_RESET
 
__HAL_RCC_SPI4_FORCE_RESET


	)

1981 
	#__SPI4_RELEASE_RESET
 
__HAL_RCC_SPI4_RELEASE_RESET


	)

1982 
	#__SPI4_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_ENABLE


	)

1983 
	#__SPI4_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_DISABLE


	)

1984 
	#__GPIOI_CLK_ENABLE
 
__HAL_RCC_GPIOI_CLK_ENABLE


	)

1985 
	#__GPIOI_CLK_DISABLE
 
__HAL_RCC_GPIOI_CLK_DISABLE


	)

1986 
	#__GPIOI_FORCE_RESET
 
__HAL_RCC_GPIOI_FORCE_RESET


	)

1987 
	#__GPIOI_RELEASE_RESET
 
__HAL_RCC_GPIOI_RELEASE_RESET


	)

1988 
	#__GPIOI_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE


	)

1989 
	#__GPIOI_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE


	)

1990 
	#__GPIOJ_CLK_ENABLE
 
__HAL_RCC_GPIOJ_CLK_ENABLE


	)

1991 
	#__GPIOJ_CLK_DISABLE
 
__HAL_RCC_GPIOJ_CLK_DISABLE


	)

1992 
	#__GPIOJ_FORCE_RESET
 
__HAL_RCC_GPIOJ_FORCE_RESET


	)

1993 
	#__GPIOJ_RELEASE_RESET
 
__HAL_RCC_GPIOJ_RELEASE_RESET


	)

1994 
	#__GPIOJ_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE


	)

1995 
	#__GPIOJ_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE


	)

1996 
	#__GPIOK_CLK_ENABLE
 
__HAL_RCC_GPIOK_CLK_ENABLE


	)

1997 
	#__GPIOK_CLK_DISABLE
 
__HAL_RCC_GPIOK_CLK_DISABLE


	)

1998 
	#__GPIOK_RELEASE_RESET
 
__HAL_RCC_GPIOK_RELEASE_RESET


	)

1999 
	#__GPIOK_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_ENABLE


	)

2000 
	#__GPIOK_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_DISABLE


	)

2001 
	#__ETH_CLK_ENABLE
 
__HAL_RCC_ETH_CLK_ENABLE


	)

2002 
	#__ETH_CLK_DISABLE
 
__HAL_RCC_ETH_CLK_DISABLE


	)

2003 
	#__DCMI_CLK_ENABLE
 
__HAL_RCC_DCMI_CLK_ENABLE


	)

2004 
	#__DCMI_CLK_DISABLE
 
__HAL_RCC_DCMI_CLK_DISABLE


	)

2005 
	#__DCMI_FORCE_RESET
 
__HAL_RCC_DCMI_FORCE_RESET


	)

2006 
	#__DCMI_RELEASE_RESET
 
__HAL_RCC_DCMI_RELEASE_RESET


	)

2007 
	#__DCMI_CLK_SLEEP_ENABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_ENABLE


	)

2008 
	#__DCMI_CLK_SLEEP_DISABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_DISABLE


	)

2009 
	#__UART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

2010 
	#__UART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

2011 
	#__UART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

2012 
	#__UART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

2013 
	#__UART7_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART7_CLK_SLEEP_ENABLE


	)

2014 
	#__UART7_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART7_CLK_SLEEP_DISABLE


	)

2015 
	#__UART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

2016 
	#__UART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

2017 
	#__UART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

2018 
	#__UART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

2019 
	#__UART8_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART8_CLK_SLEEP_ENABLE


	)

2020 
	#__UART8_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART8_CLK_SLEEP_DISABLE


	)

2021 
	#__OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2022 
	#__OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2023 
	#__OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2024 
	#__OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2025 
	#__OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2026 
	#__OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2027 
	#__HAL_RCC_OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2028 
	#__HAL_RCC_OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2029 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED


	)

2030 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED


	)

2031 
	#__HAL_RCC_OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2032 
	#__HAL_RCC_OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2033 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2034 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2035 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED


	)

2036 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED


	)

2037 
	#__CRYP_FORCE_RESET
 
__HAL_RCC_CRYP_FORCE_RESET


	)

2038 
	#__SRAM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM3_CLK_SLEEP_ENABLE


	)

2039 
	#__CAN2_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_ENABLE


	)

2040 
	#__CAN2_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_DISABLE


	)

2041 
	#__DAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC_CLK_SLEEP_ENABLE


	)

2042 
	#__DAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC_CLK_SLEEP_DISABLE


	)

2043 
	#__ADC2_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_ENABLE


	)

2044 
	#__ADC2_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_DISABLE


	)

2045 
	#__ADC3_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_ENABLE


	)

2046 
	#__ADC3_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_DISABLE


	)

2047 
	#__FSMC_FORCE_RESET
 
__HAL_RCC_FSMC_FORCE_RESET


	)

2048 
	#__FSMC_RELEASE_RESET
 
__HAL_RCC_FSMC_RELEASE_RESET


	)

2049 
	#__FSMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_ENABLE


	)

2050 
	#__FSMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_DISABLE


	)

2051 
	#__SDIO_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

2052 
	#__SDIO_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

2053 
	#__SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

2054 
	#__SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

2055 
	#__DMA2D_CLK_ENABLE
 
__HAL_RCC_DMA2D_CLK_ENABLE


	)

2056 
	#__DMA2D_CLK_DISABLE
 
__HAL_RCC_DMA2D_CLK_DISABLE


	)

2057 
	#__DMA2D_FORCE_RESET
 
__HAL_RCC_DMA2D_FORCE_RESET


	)

2058 
	#__DMA2D_RELEASE_RESET
 
__HAL_RCC_DMA2D_RELEASE_RESET


	)

2059 
	#__DMA2D_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_ENABLE


	)

2060 
	#__DMA2D_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_DISABLE


	)

2063 
	#__HAL_RCC_OTGFS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2064 
	#__HAL_RCC_OTGFS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2066 
	#__ADC12_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

2067 
	#__ADC12_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

2068 
	#__ADC34_CLK_ENABLE
 
__HAL_RCC_ADC34_CLK_ENABLE


	)

2069 
	#__ADC34_CLK_DISABLE
 
__HAL_RCC_ADC34_CLK_DISABLE


	)

2070 
	#__ADC12_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

2071 
	#__ADC12_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

2072 
	#__DAC2_CLK_ENABLE
 
__HAL_RCC_DAC2_CLK_ENABLE


	)

2073 
	#__DAC2_CLK_DISABLE
 
__HAL_RCC_DAC2_CLK_DISABLE


	)

2074 
	#__TIM18_CLK_ENABLE
 
__HAL_RCC_TIM18_CLK_ENABLE


	)

2075 
	#__TIM18_CLK_DISABLE
 
__HAL_RCC_TIM18_CLK_DISABLE


	)

2076 
	#__TIM19_CLK_ENABLE
 
__HAL_RCC_TIM19_CLK_ENABLE


	)

2077 
	#__TIM19_CLK_DISABLE
 
__HAL_RCC_TIM19_CLK_DISABLE


	)

2078 
	#__TIM20_CLK_ENABLE
 
__HAL_RCC_TIM20_CLK_ENABLE


	)

2079 
	#__TIM20_CLK_DISABLE
 
__HAL_RCC_TIM20_CLK_DISABLE


	)

2080 
	#__HRTIM1_CLK_ENABLE
 
__HAL_RCC_HRTIM1_CLK_ENABLE


	)

2081 
	#__HRTIM1_CLK_DISABLE
 
__HAL_RCC_HRTIM1_CLK_DISABLE


	)

2082 
	#__SDADC1_CLK_ENABLE
 
__HAL_RCC_SDADC1_CLK_ENABLE


	)

2083 
	#__SDADC2_CLK_ENABLE
 
__HAL_RCC_SDADC2_CLK_ENABLE


	)

2084 
	#__SDADC3_CLK_ENABLE
 
__HAL_RCC_SDADC3_CLK_ENABLE


	)

2085 
	#__SDADC1_CLK_DISABLE
 
__HAL_RCC_SDADC1_CLK_DISABLE


	)

2086 
	#__SDADC2_CLK_DISABLE
 
__HAL_RCC_SDADC2_CLK_DISABLE


	)

2087 
	#__SDADC3_CLK_DISABLE
 
__HAL_RCC_SDADC3_CLK_DISABLE


	)

2089 
	#__ADC12_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

2090 
	#__ADC12_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

2091 
	#__ADC34_FORCE_RESET
 
__HAL_RCC_ADC34_FORCE_RESET


	)

2092 
	#__ADC34_RELEASE_RESET
 
__HAL_RCC_ADC34_RELEASE_RESET


	)

2093 
	#__ADC12_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

2094 
	#__ADC12_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

2095 
	#__DAC2_FORCE_RESET
 
__HAL_RCC_DAC2_FORCE_RESET


	)

2096 
	#__DAC2_RELEASE_RESET
 
__HAL_RCC_DAC2_RELEASE_RESET


	)

2097 
	#__TIM18_FORCE_RESET
 
__HAL_RCC_TIM18_FORCE_RESET


	)

2098 
	#__TIM18_RELEASE_RESET
 
__HAL_RCC_TIM18_RELEASE_RESET


	)

2099 
	#__TIM19_FORCE_RESET
 
__HAL_RCC_TIM19_FORCE_RESET


	)

2100 
	#__TIM19_RELEASE_RESET
 
__HAL_RCC_TIM19_RELEASE_RESET


	)

2101 
	#__TIM20_FORCE_RESET
 
__HAL_RCC_TIM20_FORCE_RESET


	)

2102 
	#__TIM20_RELEASE_RESET
 
__HAL_RCC_TIM20_RELEASE_RESET


	)

2103 
	#__HRTIM1_FORCE_RESET
 
__HAL_RCC_HRTIM1_FORCE_RESET


	)

2104 
	#__HRTIM1_RELEASE_RESET
 
__HAL_RCC_HRTIM1_RELEASE_RESET


	)

2105 
	#__SDADC1_FORCE_RESET
 
__HAL_RCC_SDADC1_FORCE_RESET


	)

2106 
	#__SDADC2_FORCE_RESET
 
__HAL_RCC_SDADC2_FORCE_RESET


	)

2107 
	#__SDADC3_FORCE_RESET
 
__HAL_RCC_SDADC3_FORCE_RESET


	)

2108 
	#__SDADC1_RELEASE_RESET
 
__HAL_RCC_SDADC1_RELEASE_RESET


	)

2109 
	#__SDADC2_RELEASE_RESET
 
__HAL_RCC_SDADC2_RELEASE_RESET


	)

2110 
	#__SDADC3_RELEASE_RESET
 
__HAL_RCC_SDADC3_RELEASE_RESET


	)

2112 
	#__ADC1_IS_CLK_ENABLED
 
__HAL_RCC_ADC1_IS_CLK_ENABLED


	)

2113 
	#__ADC1_IS_CLK_DISABLED
 
__HAL_RCC_ADC1_IS_CLK_DISABLED


	)

2114 
	#__ADC12_IS_CLK_ENABLED
 
__HAL_RCC_ADC12_IS_CLK_ENABLED


	)

2115 
	#__ADC12_IS_CLK_DISABLED
 
__HAL_RCC_ADC12_IS_CLK_DISABLED


	)

2116 
	#__ADC34_IS_CLK_ENABLED
 
__HAL_RCC_ADC34_IS_CLK_ENABLED


	)

2117 
	#__ADC34_IS_CLK_DISABLED
 
__HAL_RCC_ADC34_IS_CLK_DISABLED


	)

2118 
	#__CEC_IS_CLK_ENABLED
 
__HAL_RCC_CEC_IS_CLK_ENABLED


	)

2119 
	#__CEC_IS_CLK_DISABLED
 
__HAL_RCC_CEC_IS_CLK_DISABLED


	)

2120 
	#__CRC_IS_CLK_ENABLED
 
__HAL_RCC_CRC_IS_CLK_ENABLED


	)

2121 
	#__CRC_IS_CLK_DISABLED
 
__HAL_RCC_CRC_IS_CLK_DISABLED


	)

2122 
	#__DAC1_IS_CLK_ENABLED
 
__HAL_RCC_DAC1_IS_CLK_ENABLED


	)

2123 
	#__DAC1_IS_CLK_DISABLED
 
__HAL_RCC_DAC1_IS_CLK_DISABLED


	)

2124 
	#__DAC2_IS_CLK_ENABLED
 
__HAL_RCC_DAC2_IS_CLK_ENABLED


	)

2125 
	#__DAC2_IS_CLK_DISABLED
 
__HAL_RCC_DAC2_IS_CLK_DISABLED


	)

2126 
	#__DMA1_IS_CLK_ENABLED
 
__HAL_RCC_DMA1_IS_CLK_ENABLED


	)

2127 
	#__DMA1_IS_CLK_DISABLED
 
__HAL_RCC_DMA1_IS_CLK_DISABLED


	)

2128 
	#__DMA2_IS_CLK_ENABLED
 
__HAL_RCC_DMA2_IS_CLK_ENABLED


	)

2129 
	#__DMA2_IS_CLK_DISABLED
 
__HAL_RCC_DMA2_IS_CLK_DISABLED


	)

2130 
	#__FLITF_IS_CLK_ENABLED
 
__HAL_RCC_FLITF_IS_CLK_ENABLED


	)

2131 
	#__FLITF_IS_CLK_DISABLED
 
__HAL_RCC_FLITF_IS_CLK_DISABLED


	)

2132 
	#__FMC_IS_CLK_ENABLED
 
__HAL_RCC_FMC_IS_CLK_ENABLED


	)

2133 
	#__FMC_IS_CLK_DISABLED
 
__HAL_RCC_FMC_IS_CLK_DISABLED


	)

2134 
	#__GPIOA_IS_CLK_ENABLED
 
__HAL_RCC_GPIOA_IS_CLK_ENABLED


	)

2135 
	#__GPIOA_IS_CLK_DISABLED
 
__HAL_RCC_GPIOA_IS_CLK_DISABLED


	)

2136 
	#__GPIOB_IS_CLK_ENABLED
 
__HAL_RCC_GPIOB_IS_CLK_ENABLED


	)

2137 
	#__GPIOB_IS_CLK_DISABLED
 
__HAL_RCC_GPIOB_IS_CLK_DISABLED


	)

2138 
	#__GPIOC_IS_CLK_ENABLED
 
__HAL_RCC_GPIOC_IS_CLK_ENABLED


	)

2139 
	#__GPIOC_IS_CLK_DISABLED
 
__HAL_RCC_GPIOC_IS_CLK_DISABLED


	)

2140 
	#__GPIOD_IS_CLK_ENABLED
 
__HAL_RCC_GPIOD_IS_CLK_ENABLED


	)

2141 
	#__GPIOD_IS_CLK_DISABLED
 
__HAL_RCC_GPIOD_IS_CLK_DISABLED


	)

2142 
	#__GPIOE_IS_CLK_ENABLED
 
__HAL_RCC_GPIOE_IS_CLK_ENABLED


	)

2143 
	#__GPIOE_IS_CLK_DISABLED
 
__HAL_RCC_GPIOE_IS_CLK_DISABLED


	)

2144 
	#__GPIOF_IS_CLK_ENABLED
 
__HAL_RCC_GPIOF_IS_CLK_ENABLED


	)

2145 
	#__GPIOF_IS_CLK_DISABLED
 
__HAL_RCC_GPIOF_IS_CLK_DISABLED


	)

2146 
	#__GPIOG_IS_CLK_ENABLED
 
__HAL_RCC_GPIOG_IS_CLK_ENABLED


	)

2147 
	#__GPIOG_IS_CLK_DISABLED
 
__HAL_RCC_GPIOG_IS_CLK_DISABLED


	)

2148 
	#__GPIOH_IS_CLK_ENABLED
 
__HAL_RCC_GPIOH_IS_CLK_ENABLED


	)

2149 
	#__GPIOH_IS_CLK_DISABLED
 
__HAL_RCC_GPIOH_IS_CLK_DISABLED


	)

2150 
	#__HRTIM1_IS_CLK_ENABLED
 
__HAL_RCC_HRTIM1_IS_CLK_ENABLED


	)

2151 
	#__HRTIM1_IS_CLK_DISABLED
 
__HAL_RCC_HRTIM1_IS_CLK_DISABLED


	)

2152 
	#__I2C1_IS_CLK_ENABLED
 
__HAL_RCC_I2C1_IS_CLK_ENABLED


	)

2153 
	#__I2C1_IS_CLK_DISABLED
 
__HAL_RCC_I2C1_IS_CLK_DISABLED


	)

2154 
	#__I2C2_IS_CLK_ENABLED
 
__HAL_RCC_I2C2_IS_CLK_ENABLED


	)

2155 
	#__I2C2_IS_CLK_DISABLED
 
__HAL_RCC_I2C2_IS_CLK_DISABLED


	)

2156 
	#__I2C3_IS_CLK_ENABLED
 
__HAL_RCC_I2C3_IS_CLK_ENABLED


	)

2157 
	#__I2C3_IS_CLK_DISABLED
 
__HAL_RCC_I2C3_IS_CLK_DISABLED


	)

2158 
	#__PWR_IS_CLK_ENABLED
 
__HAL_RCC_PWR_IS_CLK_ENABLED


	)

2159 
	#__PWR_IS_CLK_DISABLED
 
__HAL_RCC_PWR_IS_CLK_DISABLED


	)

2160 
	#__SYSCFG_IS_CLK_ENABLED
 
__HAL_RCC_SYSCFG_IS_CLK_ENABLED


	)

2161 
	#__SYSCFG_IS_CLK_DISABLED
 
__HAL_RCC_SYSCFG_IS_CLK_DISABLED


	)

2162 
	#__SPI1_IS_CLK_ENABLED
 
__HAL_RCC_SPI1_IS_CLK_ENABLED


	)

2163 
	#__SPI1_IS_CLK_DISABLED
 
__HAL_RCC_SPI1_IS_CLK_DISABLED


	)

2164 
	#__SPI2_IS_CLK_ENABLED
 
__HAL_RCC_SPI2_IS_CLK_ENABLED


	)

2165 
	#__SPI2_IS_CLK_DISABLED
 
__HAL_RCC_SPI2_IS_CLK_DISABLED


	)

2166 
	#__SPI3_IS_CLK_ENABLED
 
__HAL_RCC_SPI3_IS_CLK_ENABLED


	)

2167 
	#__SPI3_IS_CLK_DISABLED
 
__HAL_RCC_SPI3_IS_CLK_DISABLED


	)

2168 
	#__SPI4_IS_CLK_ENABLED
 
__HAL_RCC_SPI4_IS_CLK_ENABLED


	)

2169 
	#__SPI4_IS_CLK_DISABLED
 
__HAL_RCC_SPI4_IS_CLK_DISABLED


	)

2170 
	#__SDADC1_IS_CLK_ENABLED
 
__HAL_RCC_SDADC1_IS_CLK_ENABLED


	)

2171 
	#__SDADC1_IS_CLK_DISABLED
 
__HAL_RCC_SDADC1_IS_CLK_DISABLED


	)

2172 
	#__SDADC2_IS_CLK_ENABLED
 
__HAL_RCC_SDADC2_IS_CLK_ENABLED


	)

2173 
	#__SDADC2_IS_CLK_DISABLED
 
__HAL_RCC_SDADC2_IS_CLK_DISABLED


	)

2174 
	#__SDADC3_IS_CLK_ENABLED
 
__HAL_RCC_SDADC3_IS_CLK_ENABLED


	)

2175 
	#__SDADC3_IS_CLK_DISABLED
 
__HAL_RCC_SDADC3_IS_CLK_DISABLED


	)

2176 
	#__SRAM_IS_CLK_ENABLED
 
__HAL_RCC_SRAM_IS_CLK_ENABLED


	)

2177 
	#__SRAM_IS_CLK_DISABLED
 
__HAL_RCC_SRAM_IS_CLK_DISABLED


	)

2178 
	#__TIM1_IS_CLK_ENABLED
 
__HAL_RCC_TIM1_IS_CLK_ENABLED


	)

2179 
	#__TIM1_IS_CLK_DISABLED
 
__HAL_RCC_TIM1_IS_CLK_DISABLED


	)

2180 
	#__TIM2_IS_CLK_ENABLED
 
__HAL_RCC_TIM2_IS_CLK_ENABLED


	)

2181 
	#__TIM2_IS_CLK_DISABLED
 
__HAL_RCC_TIM2_IS_CLK_DISABLED


	)

2182 
	#__TIM3_IS_CLK_ENABLED
 
__HAL_RCC_TIM3_IS_CLK_ENABLED


	)

2183 
	#__TIM3_IS_CLK_DISABLED
 
__HAL_RCC_TIM3_IS_CLK_DISABLED


	)

2184 
	#__TIM4_IS_CLK_ENABLED
 
__HAL_RCC_TIM4_IS_CLK_ENABLED


	)

2185 
	#__TIM4_IS_CLK_DISABLED
 
__HAL_RCC_TIM4_IS_CLK_DISABLED


	)

2186 
	#__TIM5_IS_CLK_ENABLED
 
__HAL_RCC_TIM5_IS_CLK_ENABLED


	)

2187 
	#__TIM5_IS_CLK_DISABLED
 
__HAL_RCC_TIM5_IS_CLK_DISABLED


	)

2188 
	#__TIM6_IS_CLK_ENABLED
 
__HAL_RCC_TIM6_IS_CLK_ENABLED


	)

2189 
	#__TIM6_IS_CLK_DISABLED
 
__HAL_RCC_TIM6_IS_CLK_DISABLED


	)

2190 
	#__TIM7_IS_CLK_ENABLED
 
__HAL_RCC_TIM7_IS_CLK_ENABLED


	)

2191 
	#__TIM7_IS_CLK_DISABLED
 
__HAL_RCC_TIM7_IS_CLK_DISABLED


	)

2192 
	#__TIM8_IS_CLK_ENABLED
 
__HAL_RCC_TIM8_IS_CLK_ENABLED


	)

2193 
	#__TIM8_IS_CLK_DISABLED
 
__HAL_RCC_TIM8_IS_CLK_DISABLED


	)

2194 
	#__TIM12_IS_CLK_ENABLED
 
__HAL_RCC_TIM12_IS_CLK_ENABLED


	)

2195 
	#__TIM12_IS_CLK_DISABLED
 
__HAL_RCC_TIM12_IS_CLK_DISABLED


	)

2196 
	#__TIM13_IS_CLK_ENABLED
 
__HAL_RCC_TIM13_IS_CLK_ENABLED


	)

2197 
	#__TIM13_IS_CLK_DISABLED
 
__HAL_RCC_TIM13_IS_CLK_DISABLED


	)

2198 
	#__TIM14_IS_CLK_ENABLED
 
__HAL_RCC_TIM14_IS_CLK_ENABLED


	)

2199 
	#__TIM14_IS_CLK_DISABLED
 
__HAL_RCC_TIM14_IS_CLK_DISABLED


	)

2200 
	#__TIM15_IS_CLK_ENABLED
 
__HAL_RCC_TIM15_IS_CLK_ENABLED


	)

2201 
	#__TIM15_IS_CLK_DISABLED
 
__HAL_RCC_TIM15_IS_CLK_DISABLED


	)

2202 
	#__TIM16_IS_CLK_ENABLED
 
__HAL_RCC_TIM16_IS_CLK_ENABLED


	)

2203 
	#__TIM16_IS_CLK_DISABLED
 
__HAL_RCC_TIM16_IS_CLK_DISABLED


	)

2204 
	#__TIM17_IS_CLK_ENABLED
 
__HAL_RCC_TIM17_IS_CLK_ENABLED


	)

2205 
	#__TIM17_IS_CLK_DISABLED
 
__HAL_RCC_TIM17_IS_CLK_DISABLED


	)

2206 
	#__TIM18_IS_CLK_ENABLED
 
__HAL_RCC_TIM18_IS_CLK_ENABLED


	)

2207 
	#__TIM18_IS_CLK_DISABLED
 
__HAL_RCC_TIM18_IS_CLK_DISABLED


	)

2208 
	#__TIM19_IS_CLK_ENABLED
 
__HAL_RCC_TIM19_IS_CLK_ENABLED


	)

2209 
	#__TIM19_IS_CLK_DISABLED
 
__HAL_RCC_TIM19_IS_CLK_DISABLED


	)

2210 
	#__TIM20_IS_CLK_ENABLED
 
__HAL_RCC_TIM20_IS_CLK_ENABLED


	)

2211 
	#__TIM20_IS_CLK_DISABLED
 
__HAL_RCC_TIM20_IS_CLK_DISABLED


	)

2212 
	#__TSC_IS_CLK_ENABLED
 
__HAL_RCC_TSC_IS_CLK_ENABLED


	)

2213 
	#__TSC_IS_CLK_DISABLED
 
__HAL_RCC_TSC_IS_CLK_DISABLED


	)

2214 
	#__UART4_IS_CLK_ENABLED
 
__HAL_RCC_UART4_IS_CLK_ENABLED


	)

2215 
	#__UART4_IS_CLK_DISABLED
 
__HAL_RCC_UART4_IS_CLK_DISABLED


	)

2216 
	#__UART5_IS_CLK_ENABLED
 
__HAL_RCC_UART5_IS_CLK_ENABLED


	)

2217 
	#__UART5_IS_CLK_DISABLED
 
__HAL_RCC_UART5_IS_CLK_DISABLED


	)

2218 
	#__USART1_IS_CLK_ENABLED
 
__HAL_RCC_USART1_IS_CLK_ENABLED


	)

2219 
	#__USART1_IS_CLK_DISABLED
 
__HAL_RCC_USART1_IS_CLK_DISABLED


	)

2220 
	#__USART2_IS_CLK_ENABLED
 
__HAL_RCC_USART2_IS_CLK_ENABLED


	)

2221 
	#__USART2_IS_CLK_DISABLED
 
__HAL_RCC_USART2_IS_CLK_DISABLED


	)

2222 
	#__USART3_IS_CLK_ENABLED
 
__HAL_RCC_USART3_IS_CLK_ENABLED


	)

2223 
	#__USART3_IS_CLK_DISABLED
 
__HAL_RCC_USART3_IS_CLK_DISABLED


	)

2224 
	#__USB_IS_CLK_ENABLED
 
__HAL_RCC_USB_IS_CLK_ENABLED


	)

2225 
	#__USB_IS_CLK_DISABLED
 
__HAL_RCC_USB_IS_CLK_DISABLED


	)

2226 
	#__WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG_IS_CLK_ENABLED


	)

2227 
	#__WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG_IS_CLK_DISABLED


	)

2229 #i‡
deföed
(
STM32F4
)

2230 
	#__HAL_RCC_SDMMC1_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

2231 
	#__HAL_RCC_SDMMC1_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

2232 
	#__HAL_RCC_SDMMC1_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

2233 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

2234 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

2235 
	#__HAL_RCC_SDMMC1_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

2236 
	#__HAL_RCC_SDMMC1_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

2237 
	#Sdmmc1ClockSñe˘i⁄
 
SdioClockSñe˘i⁄


	)

2238 
	#RCC_PERIPHCLK_SDMMC1
 
RCC_PERIPHCLK_SDIO


	)

2239 
	#RCC_SDMMC1CLKSOURCE_CLK48
 
RCC_SDIOCLKSOURCE_CK48


	)

2240 
	#RCC_SDMMC1CLKSOURCE_SYSCLK
 
RCC_SDIOCLKSOURCE_SYSCLK


	)

2241 
	#__HAL_RCC_SDMMC1_CONFIG
 
__HAL_RCC_SDIO_CONFIG


	)

2242 
	#__HAL_RCC_GET_SDMMC1_SOURCE
 
__HAL_RCC_GET_SDIO_SOURCE


	)

2245 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

2246 
	#__HAL_RCC_SDIO_CLK_ENABLE
 
__HAL_RCC_SDMMC1_CLK_ENABLE


	)

2247 
	#__HAL_RCC_SDIO_FORCE_RESET
 
__HAL_RCC_SDMMC1_FORCE_RESET


	)

2248 
	#__HAL_RCC_SDIO_RELEASE_RESET
 
__HAL_RCC_SDMMC1_RELEASE_RESET


	)

2249 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE


	)

2250 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE


	)

2251 
	#__HAL_RCC_SDIO_CLK_ENABLE
 
__HAL_RCC_SDMMC1_CLK_ENABLE


	)

2252 
	#__HAL_RCC_SDIO_CLK_DISABLE
 
__HAL_RCC_SDMMC1_CLK_DISABLE


	)

2253 
	#SdioClockSñe˘i⁄
 
Sdmmc1ClockSñe˘i⁄


	)

2254 
	#RCC_PERIPHCLK_SDIO
 
RCC_PERIPHCLK_SDMMC1


	)

2255 
	#__HAL_RCC_SDIO_CONFIG
 
__HAL_RCC_SDMMC1_CONFIG


	)

2256 
	#__HAL_RCC_GET_SDIO_SOURCE
 
__HAL_RCC_GET_SDMMC1_SOURCE


	)

2259 #i‡
deföed
(
STM32F7
)

2260 
	#RCC_SDIOCLKSOURCE_CK48
 
RCC_SDMMC1CLKSOURCE_CLK48


	)

2261 
	#RCC_SDIOCLKSOURCE_SYSCLK
 
RCC_SDMMC1CLKSOURCE_SYSCLK


	)

2264 
	#__HAL_RCC_I2SCLK
 
__HAL_RCC_I2S_CONFIG


	)

2265 
	#__HAL_RCC_I2SCLK_CONFIG
 
__HAL_RCC_I2S_CONFIG


	)

2267 
	#__RCC_PLLSRC
 
RCC_GET_PLL_OSCSOURCE


	)

2269 
	#IS_RCC_MSIRANGE
 
IS_RCC_MSI_CLOCK_RANGE


	)

2270 
	#IS_RCC_RTCCLK_SOURCE
 
IS_RCC_RTCCLKSOURCE


	)

2271 
	#IS_RCC_SYSCLK_DIV
 
IS_RCC_HCLK


	)

2272 
	#IS_RCC_HCLK_DIV
 
IS_RCC_PCLK


	)

2274 
	#RCC_IT_HSI14
 
RCC_IT_HSI14RDY


	)

2276 
	#IS_RCC_MCOSOURCE
 
IS_RCC_MCO1SOURCE


	)

2277 
	#__HAL_RCC_MCO_CONFIG
 
__HAL_RCC_MCO1_CONFIG


	)

2278 
	#RCC_MCO_NODIV
 
RCC_MCODIV_1


	)

2279 
	#RCC_MCO_DIV1
 
RCC_MCODIV_1


	)

2280 
	#RCC_MCO_DIV2
 
RCC_MCODIV_2


	)

2281 
	#RCC_MCO_DIV4
 
RCC_MCODIV_4


	)

2282 
	#RCC_MCO_DIV8
 
RCC_MCODIV_8


	)

2283 
	#RCC_MCO_DIV16
 
RCC_MCODIV_16


	)

2284 
	#RCC_MCO_DIV32
 
RCC_MCODIV_32


	)

2285 
	#RCC_MCO_DIV64
 
RCC_MCODIV_64


	)

2286 
	#RCC_MCO_DIV128
 
RCC_MCODIV_128


	)

2287 
	#RCC_MCOSOURCE_NONE
 
RCC_MCO1SOURCE_NOCLOCK


	)

2288 
	#RCC_MCOSOURCE_LSI
 
RCC_MCO1SOURCE_LSI


	)

2289 
	#RCC_MCOSOURCE_LSE
 
RCC_MCO1SOURCE_LSE


	)

2290 
	#RCC_MCOSOURCE_SYSCLK
 
RCC_MCO1SOURCE_SYSCLK


	)

2291 
	#RCC_MCOSOURCE_HSI
 
RCC_MCO1SOURCE_HSI


	)

2292 
	#RCC_MCOSOURCE_HSI14
 
RCC_MCO1SOURCE_HSI14


	)

2293 
	#RCC_MCOSOURCE_HSI48
 
RCC_MCO1SOURCE_HSI48


	)

2294 
	#RCC_MCOSOURCE_HSE
 
RCC_MCO1SOURCE_HSE


	)

2295 
	#RCC_MCOSOURCE_PLLCLK_DIV1
 
RCC_MCO1SOURCE_PLLCLK


	)

2296 
	#RCC_MCOSOURCE_PLLCLK_NODIV
 
RCC_MCO1SOURCE_PLLCLK


	)

2297 
	#RCC_MCOSOURCE_PLLCLK_DIV2
 
RCC_MCO1SOURCE_PLLCLK_DIV2


	)

2299 
	#RCC_RTCCLKSOURCE_NONE
 
RCC_RTCCLKSOURCE_NO_CLK


	)

2301 
	#RCC_USBCLK_PLLSAI1
 
RCC_USBCLKSOURCE_PLLSAI1


	)

2302 
	#RCC_USBCLK_PLL
 
RCC_USBCLKSOURCE_PLL


	)

2303 
	#RCC_USBCLK_MSI
 
RCC_USBCLKSOURCE_MSI


	)

2304 
	#RCC_USBCLKSOURCE_PLLCLK
 
RCC_USBCLKSOURCE_PLL


	)

2305 
	#RCC_USBPLLCLK_DIV1
 
RCC_USBCLKSOURCE_PLL


	)

2306 
	#RCC_USBPLLCLK_DIV1_5
 
RCC_USBCLKSOURCE_PLL_DIV1_5


	)

2307 
	#RCC_USBPLLCLK_DIV2
 
RCC_USBCLKSOURCE_PLL_DIV2


	)

2308 
	#RCC_USBPLLCLK_DIV3
 
RCC_USBCLKSOURCE_PLL_DIV3


	)

2310 
	#HSION_BôNumbî
 
RCC_HSION_BIT_NUMBER


	)

2311 
	#HSION_BITNUMBER
 
RCC_HSION_BIT_NUMBER


	)

2312 
	#HSEON_BôNumbî
 
RCC_HSEON_BIT_NUMBER


	)

2313 
	#HSEON_BITNUMBER
 
RCC_HSEON_BIT_NUMBER


	)

2314 
	#MSION_BITNUMBER
 
RCC_MSION_BIT_NUMBER


	)

2315 
	#CSSON_BôNumbî
 
RCC_CSSON_BIT_NUMBER


	)

2316 
	#CSSON_BITNUMBER
 
RCC_CSSON_BIT_NUMBER


	)

2317 
	#PLLON_BôNumbî
 
RCC_PLLON_BIT_NUMBER


	)

2318 
	#PLLON_BITNUMBER
 
RCC_PLLON_BIT_NUMBER


	)

2319 
	#PLLI2SON_BôNumbî
 
RCC_PLLI2SON_BIT_NUMBER


	)

2320 
	#I2SSRC_BôNumbî
 
RCC_I2SSRC_BIT_NUMBER


	)

2321 
	#RTCEN_BôNumbî
 
RCC_RTCEN_BIT_NUMBER


	)

2322 
	#RTCEN_BITNUMBER
 
RCC_RTCEN_BIT_NUMBER


	)

2323 
	#BDRST_BôNumbî
 
RCC_BDRST_BIT_NUMBER


	)

2324 
	#BDRST_BITNUMBER
 
RCC_BDRST_BIT_NUMBER


	)

2325 
	#RTCRST_BITNUMBER
 
RCC_RTCRST_BIT_NUMBER


	)

2326 
	#LSION_BôNumbî
 
RCC_LSION_BIT_NUMBER


	)

2327 
	#LSION_BITNUMBER
 
RCC_LSION_BIT_NUMBER


	)

2328 
	#LSEON_BôNumbî
 
RCC_LSEON_BIT_NUMBER


	)

2329 
	#LSEON_BITNUMBER
 
RCC_LSEON_BIT_NUMBER


	)

2330 
	#LSEBYP_BITNUMBER
 
RCC_LSEBYP_BIT_NUMBER


	)

2331 
	#PLLSAION_BôNumbî
 
RCC_PLLSAION_BIT_NUMBER


	)

2332 
	#TIMPRE_BôNumbî
 
RCC_TIMPRE_BIT_NUMBER


	)

2333 
	#RMVF_BôNumbî
 
RCC_RMVF_BIT_NUMBER


	)

2334 
	#RMVF_BITNUMBER
 
RCC_RMVF_BIT_NUMBER


	)

2335 
	#RCC_CR2_HSI14TRIM_BôNumbî
 
RCC_HSI14TRIM_BIT_NUMBER


	)

2336 
	#CR_BYTE2_ADDRESS
 
RCC_CR_BYTE2_ADDRESS


	)

2337 
	#CIR_BYTE1_ADDRESS
 
RCC_CIR_BYTE1_ADDRESS


	)

2338 
	#CIR_BYTE2_ADDRESS
 
RCC_CIR_BYTE2_ADDRESS


	)

2339 
	#BDCR_BYTE0_ADDRESS
 
RCC_BDCR_BYTE0_ADDRESS


	)

2340 
	#DBP_TIMEOUT_VALUE
 
RCC_DBP_TIMEOUT_VALUE


	)

2341 
	#LSE_TIMEOUT_VALUE
 
RCC_LSE_TIMEOUT_VALUE


	)

2343 
	#CR_HSION_BB
 
RCC_CR_HSION_BB


	)

2344 
	#CR_CSSON_BB
 
RCC_CR_CSSON_BB


	)

2345 
	#CR_PLLON_BB
 
RCC_CR_PLLON_BB


	)

2346 
	#CR_PLLI2SON_BB
 
RCC_CR_PLLI2SON_BB


	)

2347 
	#CR_MSION_BB
 
RCC_CR_MSION_BB


	)

2348 
	#CSR_LSION_BB
 
RCC_CSR_LSION_BB


	)

2349 
	#CSR_LSEON_BB
 
RCC_CSR_LSEON_BB


	)

2350 
	#CSR_LSEBYP_BB
 
RCC_CSR_LSEBYP_BB


	)

2351 
	#CSR_RTCEN_BB
 
RCC_CSR_RTCEN_BB


	)

2352 
	#CSR_RTCRST_BB
 
RCC_CSR_RTCRST_BB


	)

2353 
	#CFGR_I2SSRC_BB
 
RCC_CFGR_I2SSRC_BB


	)

2354 
	#BDCR_RTCEN_BB
 
RCC_BDCR_RTCEN_BB


	)

2355 
	#BDCR_BDRST_BB
 
RCC_BDCR_BDRST_BB


	)

2356 
	#CR_HSEON_BB
 
RCC_CR_HSEON_BB


	)

2357 
	#CSR_RMVF_BB
 
RCC_CSR_RMVF_BB


	)

2358 
	#CR_PLLSAION_BB
 
RCC_CR_PLLSAION_BB


	)

2359 
	#DCKCFGR_TIMPRE_BB
 
RCC_DCKCFGR_TIMPRE_BB


	)

2368 
	#HAL_RNG_RódyCÆlback
(
__HANDLE__
Ë
	`HAL_RNG_RódyD©aCÆlback
((__HANDLE__), 
uöt32_t
 
øndom32bô
)

	)

2378 
	#__HAL_RTC_CLEAR_FLAG
 
__HAL_RTC_EXTI_CLEAR_FLAG


	)

2379 
	#__HAL_RTC_DISABLE_IT
 
__HAL_RTC_EXTI_DISABLE_IT


	)

2380 
	#__HAL_RTC_ENABLE_IT
 
__HAL_RTC_EXTI_ENABLE_IT


	)

2382 #i‡
deföed
 (
STM32F1
)

2383 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
()

	)

2385 
	#__HAL_RTC_EXTI_ENABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
()

	)

2387 
	#__HAL_RTC_EXTI_DISABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
()

	)

2389 
	#__HAL_RTC_EXTI_GET_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
()

	)

2391 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
()

	)

2393 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
() : \

2394 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
() : \

2395 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
()))

	)

2396 
	#__HAL_RTC_EXTI_ENABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
() : \

2397 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
() : \

2398 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
()))

	)

2399 
	#__HAL_RTC_EXTI_DISABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
() : \

2400 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT
() : \

2401 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT
()))

	)

2402 
	#__HAL_RTC_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
() : \

2403 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG
() : \

2404 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG
()))

	)

2405 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
() : \

2406 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT
() : \

2407 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT
()))

	)

2410 
	#IS_ALARM
 
IS_RTC_ALARM


	)

2411 
	#IS_ALARM_MASK
 
IS_RTC_ALARM_MASK


	)

2412 
	#IS_TAMPER
 
IS_RTC_TAMPER


	)

2413 
	#IS_TAMPER_ERASE_MODE
 
IS_RTC_TAMPER_ERASE_MODE


	)

2414 
	#IS_TAMPER_FILTER
 
IS_RTC_TAMPER_FILTER


	)

2415 
	#IS_TAMPER_INTERRUPT
 
IS_RTC_TAMPER_INTERRUPT


	)

2416 
	#IS_TAMPER_MASKFLAG_STATE
 
IS_RTC_TAMPER_MASKFLAG_STATE


	)

2417 
	#IS_TAMPER_PRECHARGE_DURATION
 
IS_RTC_TAMPER_PRECHARGE_DURATION


	)

2418 
	#IS_TAMPER_PULLUP_STATE
 
IS_RTC_TAMPER_PULLUP_STATE


	)

2419 
	#IS_TAMPER_SAMPLING_FREQ
 
IS_RTC_TAMPER_SAMPLING_FREQ


	)

2420 
	#IS_TAMPER_TIMESTAMPONTAMPER_DETECTION
 
IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION


	)

2421 
	#IS_TAMPER_TRIGGER
 
IS_RTC_TAMPER_TRIGGER


	)

2422 
	#IS_WAKEUP_CLOCK
 
IS_RTC_WAKEUP_CLOCK


	)

2423 
	#IS_WAKEUP_COUNTER
 
IS_RTC_WAKEUP_COUNTER


	)

2425 
	#__RTC_WRITEPROTECTION_ENABLE
 
__HAL_RTC_WRITEPROTECTION_ENABLE


	)

2426 
	#__RTC_WRITEPROTECTION_DISABLE
 
__HAL_RTC_WRITEPROTECTION_DISABLE


	)

2436 
	#SD_OCR_CID_CSD_OVERWRIETE
 
SD_OCR_CID_CSD_OVERWRITE


	)

2437 
	#SD_CMD_SD_APP_STAUS
 
SD_CMD_SD_APP_STATUS


	)

2439 #i‡
deföed
(
STM32F4
)

2440 
	#SD_SDMMC_DISABLED
 
SD_SDIO_DISABLED


	)

2441 
	#SD_SDMMC_FUNCTION_BUSY
 
SD_SDIO_FUNCTION_BUSY


	)

2442 
	#SD_SDMMC_FUNCTION_FAILED
 
SD_SDIO_FUNCTION_FAILED


	)

2443 
	#SD_SDMMC_UNKNOWN_FUNCTION
 
SD_SDIO_UNKNOWN_FUNCTION


	)

2444 
	#SD_CMD_SDMMC_SEN_OP_COND
 
SD_CMD_SDIO_SEN_OP_COND


	)

2445 
	#SD_CMD_SDMMC_RW_DIRECT
 
SD_CMD_SDIO_RW_DIRECT


	)

2446 
	#SD_CMD_SDMMC_RW_EXTENDED
 
SD_CMD_SDIO_RW_EXTENDED


	)

2447 
	#__HAL_SD_SDMMC_ENABLE
 
__HAL_SD_SDIO_ENABLE


	)

2448 
	#__HAL_SD_SDMMC_DISABLE
 
__HAL_SD_SDIO_DISABLE


	)

2449 
	#__HAL_SD_SDMMC_DMA_ENABLE
 
__HAL_SD_SDIO_DMA_ENABLE


	)

2450 
	#__HAL_SD_SDMMC_DMA_DISABLE
 
__HAL_SD_SDIO_DMA_DISABL


	)

2451 
	#__HAL_SD_SDMMC_ENABLE_IT
 
__HAL_SD_SDIO_ENABLE_IT


	)

2452 
	#__HAL_SD_SDMMC_DISABLE_IT
 
__HAL_SD_SDIO_DISABLE_IT


	)

2453 
	#__HAL_SD_SDMMC_GET_FLAG
 
__HAL_SD_SDIO_GET_FLAG


	)

2454 
	#__HAL_SD_SDMMC_CLEAR_FLAG
 
__HAL_SD_SDIO_CLEAR_FLAG


	)

2455 
	#__HAL_SD_SDMMC_GET_IT
 
__HAL_SD_SDIO_GET_IT


	)

2456 
	#__HAL_SD_SDMMC_CLEAR_IT
 
__HAL_SD_SDIO_CLEAR_IT


	)

2457 
	#SDMMC_STATIC_FLAGS
 
SDIO_STATIC_FLAGS


	)

2458 
	#SDMMC_CMD0TIMEOUT
 
SDIO_CMD0TIMEOUT


	)

2459 
	#SD_SDMMC_SEND_IF_COND
 
SD_SDIO_SEND_IF_COND


	)

2461 
	#SDMMC1_IRQn
 
SDIO_IRQn


	)

2462 
	#SDMMC1_IRQH™dÀr
 
SDIO_IRQH™dÀr


	)

2465 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

2466 
	#SD_SDIO_DISABLED
 
SD_SDMMC_DISABLED


	)

2467 
	#SD_SDIO_FUNCTION_BUSY
 
SD_SDMMC_FUNCTION_BUSY


	)

2468 
	#SD_SDIO_FUNCTION_FAILED
 
SD_SDMMC_FUNCTION_FAILED


	)

2469 
	#SD_SDIO_UNKNOWN_FUNCTION
 
SD_SDMMC_UNKNOWN_FUNCTION


	)

2470 
	#SD_CMD_SDIO_SEN_OP_COND
 
SD_CMD_SDMMC_SEN_OP_COND


	)

2471 
	#SD_CMD_SDIO_RW_DIRECT
 
SD_CMD_SDMMC_RW_DIRECT


	)

2472 
	#SD_CMD_SDIO_RW_EXTENDED
 
SD_CMD_SDMMC_RW_EXTENDED


	)

2473 
	#__HAL_SD_SDIO_ENABLE
 
__HAL_SD_SDMMC_ENABLE


	)

2474 
	#__HAL_SD_SDIO_DISABLE
 
__HAL_SD_SDMMC_DISABLE


	)

2475 
	#__HAL_SD_SDIO_DMA_ENABLE
 
__HAL_SD_SDMMC_DMA_ENABLE


	)

2476 
	#__HAL_SD_SDIO_DMA_DISABL
 
__HAL_SD_SDMMC_DMA_DISABLE


	)

2477 
	#__HAL_SD_SDIO_ENABLE_IT
 
__HAL_SD_SDMMC_ENABLE_IT


	)

2478 
	#__HAL_SD_SDIO_DISABLE_IT
 
__HAL_SD_SDMMC_DISABLE_IT


	)

2479 
	#__HAL_SD_SDIO_GET_FLAG
 
__HAL_SD_SDMMC_GET_FLAG


	)

2480 
	#__HAL_SD_SDIO_CLEAR_FLAG
 
__HAL_SD_SDMMC_CLEAR_FLAG


	)

2481 
	#__HAL_SD_SDIO_GET_IT
 
__HAL_SD_SDMMC_GET_IT


	)

2482 
	#__HAL_SD_SDIO_CLEAR_IT
 
__HAL_SD_SDMMC_CLEAR_IT


	)

2483 
	#SDIO_STATIC_FLAGS
 
SDMMC_STATIC_FLAGS


	)

2484 
	#SDIO_CMD0TIMEOUT
 
SDMMC_CMD0TIMEOUT


	)

2485 
	#SD_SDIO_SEND_IF_COND
 
SD_SDMMC_SEND_IF_COND


	)

2487 
	#SDIO_IRQn
 
SDMMC1_IRQn


	)

2488 
	#SDIO_IRQH™dÀr
 
SDMMC1_IRQH™dÀr


	)

2498 
	#__SMARTCARD_ENABLE_IT
 
__HAL_SMARTCARD_ENABLE_IT


	)

2499 
	#__SMARTCARD_DISABLE_IT
 
__HAL_SMARTCARD_DISABLE_IT


	)

2500 
	#__SMARTCARD_ENABLE
 
__HAL_SMARTCARD_ENABLE


	)

2501 
	#__SMARTCARD_DISABLE
 
__HAL_SMARTCARD_DISABLE


	)

2502 
	#__SMARTCARD_DMA_REQUEST_ENABLE
 
__HAL_SMARTCARD_DMA_REQUEST_ENABLE


	)

2503 
	#__SMARTCARD_DMA_REQUEST_DISABLE
 
__HAL_SMARTCARD_DMA_REQUEST_DISABLE


	)

2505 
	#__HAL_SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

2506 
	#__SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

2508 
	#IS_SMARTCARD_ONEBIT_SAMPLING
 
IS_SMARTCARD_ONE_BIT_SAMPLE


	)

2517 
	#__HAL_SMBUS_RESET_CR1
 
SMBUS_RESET_CR1


	)

2518 
	#__HAL_SMBUS_RESET_CR2
 
SMBUS_RESET_CR2


	)

2519 
	#__HAL_SMBUS_GENERATE_START
 
SMBUS_GENERATE_START


	)

2520 
	#__HAL_SMBUS_GET_ADDR_MATCH
 
SMBUS_GET_ADDR_MATCH


	)

2521 
	#__HAL_SMBUS_GET_DIR
 
SMBUS_GET_DIR


	)

2522 
	#__HAL_SMBUS_GET_STOP_MODE
 
SMBUS_GET_STOP_MODE


	)

2523 
	#__HAL_SMBUS_GET_PEC_MODE
 
SMBUS_GET_PEC_MODE


	)

2524 
	#__HAL_SMBUS_GET_ALERT_ENABLED
 
SMBUS_GET_ALERT_ENABLED


	)

2533 
	#__HAL_SPI_1LINE_TX
 
SPI_1LINE_TX


	)

2534 
	#__HAL_SPI_1LINE_RX
 
SPI_1LINE_RX


	)

2535 
	#__HAL_SPI_RESET_CRC
 
SPI_RESET_CRC


	)

2545 
	#__HAL_UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

2546 
	#__HAL_UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

2547 
	#__UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

2548 
	#__UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

2550 
	#IS_UART_WAKEUPMETHODE
 
IS_UART_WAKEUPMETHOD


	)

2552 
	#IS_UART_ONEBIT_SAMPLE
 
IS_UART_ONE_BIT_SAMPLE


	)

2553 
	#IS_UART_ONEBIT_SAMPLING
 
IS_UART_ONE_BIT_SAMPLE


	)

2564 
	#__USART_ENABLE_IT
 
__HAL_USART_ENABLE_IT


	)

2565 
	#__USART_DISABLE_IT
 
__HAL_USART_DISABLE_IT


	)

2566 
	#__USART_ENABLE
 
__HAL_USART_ENABLE


	)

2567 
	#__USART_DISABLE
 
__HAL_USART_DISABLE


	)

2569 
	#__HAL_USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

2570 
	#__USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

2579 
	#USB_EXTI_LINE_WAKEUP
 
USB_WAKEUP_EXTI_LINE


	)

2581 
	#USB_FS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE


	)

2582 
	#USB_FS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE


	)

2583 
	#USB_FS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

2584 
	#USB_FS_EXTI_LINE_WAKEUP
 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

2586 
	#USB_HS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE


	)

2587 
	#USB_HS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE


	)

2588 
	#USB_HS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

2589 
	#USB_HS_EXTI_LINE_WAKEUP
 
USB_OTG_HS_WAKEUP_EXTI_LINE


	)

2591 
	#__HAL_USB_EXTI_ENABLE_IT
 
__HAL_USB_WAKEUP_EXTI_ENABLE_IT


	)

2592 
	#__HAL_USB_EXTI_DISABLE_IT
 
__HAL_USB_WAKEUP_EXTI_DISABLE_IT


	)

2593 
	#__HAL_USB_EXTI_GET_FLAG
 
__HAL_USB_WAKEUP_EXTI_GET_FLAG


	)

2594 
	#__HAL_USB_EXTI_CLEAR_FLAG
 
__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG


	)

2595 
	#__HAL_USB_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

2596 
	#__HAL_USB_EXTI_SET_FALLING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

2597 
	#__HAL_USB_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

2599 
	#__HAL_USB_FS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT


	)

2600 
	#__HAL_USB_FS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT


	)

2601 
	#__HAL_USB_FS_EXTI_GET_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG


	)

2602 
	#__HAL_USB_FS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG


	)

2603 
	#__HAL_USB_FS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

2604 
	#__HAL_USB_FS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

2605 
	#__HAL_USB_FS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

2606 
	#__HAL_USB_FS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT


	)

2608 
	#__HAL_USB_HS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT


	)

2609 
	#__HAL_USB_HS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT


	)

2610 
	#__HAL_USB_HS_EXTI_GET_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG


	)

2611 
	#__HAL_USB_HS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG


	)

2612 
	#__HAL_USB_HS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

2613 
	#__HAL_USB_HS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

2614 
	#__HAL_USB_HS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

2615 
	#__HAL_USB_HS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT


	)

2617 
	#HAL_PCD_A˘iveRemŸeWakeup
 
HAL_PCD_A˘iv©eRemŸeWakeup


	)

2618 
	#HAL_PCD_DeA˘iveRemŸeWakeup
 
HAL_PCD_DeA˘iv©eRemŸeWakeup


	)

2620 
	#HAL_PCD_SëTxFiFo
 
HAL_PCDEx_SëTxFiFo


	)

2621 
	#HAL_PCD_SëRxFiFo
 
HAL_PCDEx_SëRxFiFo


	)

2629 
	#__HAL_TIM_SëICPªsˇÀrVÆue
 
TIM_SET_ICPRESCALERVALUE


	)

2630 
	#__HAL_TIM_Re£tICPªsˇÀrVÆue
 
TIM_RESET_ICPRESCALERVALUE


	)

2632 
	#TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

2633 
	#TIM_GET_CLEAR_IT
 
__HAL_TIM_CLEAR_IT


	)

2635 
	#__HAL_TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

2637 
	#__HAL_TIM_DIRECTION_STATUS
 
__HAL_TIM_IS_TIM_COUNTING_DOWN


	)

2638 
	#__HAL_TIM_PRESCALER
 
__HAL_TIM_SET_PRESCALER


	)

2639 
	#__HAL_TIM_SëCou¡î
 
__HAL_TIM_SET_COUNTER


	)

2640 
	#__HAL_TIM_GëCou¡î
 
__HAL_TIM_GET_COUNTER


	)

2641 
	#__HAL_TIM_SëAut‹ñﬂd
 
__HAL_TIM_SET_AUTORELOAD


	)

2642 
	#__HAL_TIM_GëAut‹ñﬂd
 
__HAL_TIM_GET_AUTORELOAD


	)

2643 
	#__HAL_TIM_SëClockDivisi⁄
 
__HAL_TIM_SET_CLOCKDIVISION


	)

2644 
	#__HAL_TIM_GëClockDivisi⁄
 
__HAL_TIM_GET_CLOCKDIVISION


	)

2645 
	#__HAL_TIM_SëICPªsˇÀr
 
__HAL_TIM_SET_ICPRESCALER


	)

2646 
	#__HAL_TIM_GëICPªsˇÀr
 
__HAL_TIM_GET_ICPRESCALER


	)

2647 
	#__HAL_TIM_SëCom∑ª
 
__HAL_TIM_SET_COMPARE


	)

2648 
	#__HAL_TIM_GëCom∑ª
 
__HAL_TIM_GET_COMPARE


	)

2650 
	#TIM_TS_ITR0
 ((
uöt32_t
)0x0000)

	)

2651 
	#TIM_TS_ITR1
 ((
uöt32_t
)0x0010)

	)

2652 
	#TIM_TS_ITR2
 ((
uöt32_t
)0x0020)

	)

2653 
	#TIM_TS_ITR3
 ((
uöt32_t
)0x0030)

	)

2654 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

2655 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

2656 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

2657 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

2659 
	#TIM_CHANNEL_1
 ((
uöt32_t
)0x0000)

	)

2660 
	#TIM_CHANNEL_2
 ((
uöt32_t
)0x0004)

	)

2661 
	#IS_TIM_PWMI_CHANNELS
(
CHANNEL
Ë(((CHANNELË=
TIM_CHANNEL_1
) || \

2662 ((
CHANNEL
Ë=
TIM_CHANNEL_2
))

	)

2664 
	#TIM_OUTPUTNSTATE_DISABLE
 ((
uöt32_t
)0x0000)

	)

2665 
	#TIM_OUTPUTNSTATE_ENABLE
 (
TIM_CCER_CC1NE
)

	)

2667 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OUTPUTNSTATE_DISABLE
) || \

2668 ((
STATE
Ë=
TIM_OUTPUTNSTATE_ENABLE
))

	)

2670 
	#TIM_OUTPUTSTATE_DISABLE
 ((
uöt32_t
)0x0000)

	)

2671 
	#TIM_OUTPUTSTATE_ENABLE
 (
TIM_CCER_CC1E
)

	)

2673 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OUTPUTSTATE_DISABLE
) || \

2674 ((
STATE
Ë=
TIM_OUTPUTSTATE_ENABLE
))

	)

2683 
	#__HAL_ETH_EXTI_ENABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_IT


	)

2684 
	#__HAL_ETH_EXTI_DISABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_DISABLE_IT


	)

2685 
	#__HAL_ETH_EXTI_GET_FLAG
 
__HAL_ETH_WAKEUP_EXTI_GET_FLAG


	)

2686 
	#__HAL_ETH_EXTI_CLEAR_FLAG
 
__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG


	)

2687 
	#__HAL_ETH_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER


	)

2688 
	#__HAL_ETH_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER


	)

2689 
	#__HAL_ETH_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER


	)

2691 
	#ETH_PROMISCIOUSMODE_ENABLE
 
ETH_PROMISCUOUS_MODE_ENABLE


	)

2692 
	#ETH_PROMISCIOUSMODE_DISABLE
 
ETH_PROMISCUOUS_MODE_DISABLE


	)

2693 
	#IS_ETH_PROMISCIOUS_MODE
 
IS_ETH_PROMISCUOUS_MODE


	)

2701 
	#__HAL_LTDC_LAYER
 
LTDC_LAYER


	)

2709 
	#SAI_OUTPUTDRIVE_DISABLED
 
SAI_OUTPUTDRIVE_DISABLE


	)

2710 
	#SAI_OUTPUTDRIVE_ENABLED
 
SAI_OUTPUTDRIVE_ENABLE


	)

2711 
	#SAI_MASTERDIVIDER_ENABLED
 
SAI_MASTERDIVIDER_ENABLE


	)

2712 
	#SAI_MASTERDIVIDER_DISABLED
 
SAI_MASTERDIVIDER_DISABLE


	)

2713 
	#SAI_STREOMODE
 
SAI_STEREOMODE


	)

2714 
	#SAI_FIFOSètus_Em±y
 
SAI_FIFOSTATUS_EMPTY


	)

2715 
	#SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_LESS1QUARTERFULL


	)

2716 
	#SAI_FIFOSètus_1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_1QUARTERFULL


	)

2717 
	#SAI_FIFOSètus_HÆfFuŒ
 
SAI_FIFOSTATUS_HALFFULL


	)

2718 
	#SAI_FIFOSètus_3Qu¨ãrsFuŒ
 
SAI_FIFOSTATUS_3QUARTERFULL


	)

2719 
	#SAI_FIFOSètus_FuŒ
 
SAI_FIFOSTATUS_FULL


	)

2720 
	#IS_SAI_BLOCK_MONO_STREO_MODE
 
IS_SAI_BLOCK_MONO_STEREO_MODE


	)

2735 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal.h

40 #i‚de‡
__STM32F4xx_HAL_H


41 
	#__STM32F4xx_HAL_H


	)

43 #ifde‡
__˝lu•lus


48 
	~"°m32f4xx.h
"

49 
	~"°m32f4xx_hÆ_c⁄f.h
"

68 
	#__HAL_DBGMCU_FREEZE_TIM2
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM2_STOP
))

	)

69 
	#__HAL_DBGMCU_FREEZE_TIM3
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM3_STOP
))

	)

70 
	#__HAL_DBGMCU_FREEZE_TIM4
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM4_STOP
))

	)

71 
	#__HAL_DBGMCU_FREEZE_TIM5
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM5_STOP
))

	)

72 
	#__HAL_DBGMCU_FREEZE_TIM6
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM6_STOP
))

	)

73 
	#__HAL_DBGMCU_FREEZE_TIM7
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM7_STOP
))

	)

74 
	#__HAL_DBGMCU_FREEZE_TIM12
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM12_STOP
))

	)

75 
	#__HAL_DBGMCU_FREEZE_TIM13
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM13_STOP
))

	)

76 
	#__HAL_DBGMCU_FREEZE_TIM14
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_TIM14_STOP
))

	)

77 
	#__HAL_DBGMCU_FREEZE_RTC
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_RTC_STOP
))

	)

78 
	#__HAL_DBGMCU_FREEZE_WWDG
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_WWDG_STOP
))

	)

79 
	#__HAL_DBGMCU_FREEZE_IWDG
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_IWDG_STOP
))

	)

80 
	#__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
))

	)

81 
	#__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
))

	)

82 
	#__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
))

	)

83 
	#__HAL_DBGMCU_FREEZE_CAN1
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_CAN1_STOP
))

	)

84 
	#__HAL_DBGMCU_FREEZE_CAN2
(Ë(
DBGMCU
->
APB1FZ
 |(
DBGMCU_APB1_FZ_DBG_CAN2_STOP
))

	)

85 
	#__HAL_DBGMCU_FREEZE_TIM1
(Ë(
DBGMCU
->
APB2FZ
 |(
DBGMCU_APB2_FZ_DBG_TIM1_STOP
))

	)

86 
	#__HAL_DBGMCU_FREEZE_TIM8
(Ë(
DBGMCU
->
APB2FZ
 |(
DBGMCU_APB2_FZ_DBG_TIM8_STOP
))

	)

87 
	#__HAL_DBGMCU_FREEZE_TIM9
(Ë(
DBGMCU
->
APB2FZ
 |(
DBGMCU_APB2_FZ_DBG_TIM9_STOP
))

	)

88 
	#__HAL_DBGMCU_FREEZE_TIM10
(Ë(
DBGMCU
->
APB2FZ
 |(
DBGMCU_APB2_FZ_DBG_TIM10_STOP
))

	)

89 
	#__HAL_DBGMCU_FREEZE_TIM11
(Ë(
DBGMCU
->
APB2FZ
 |(
DBGMCU_APB2_FZ_DBG_TIM11_STOP
))

	)

91 
	#__HAL_DBGMCU_UNFREEZE_TIM2
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM2_STOP
))

	)

92 
	#__HAL_DBGMCU_UNFREEZE_TIM3
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM3_STOP
))

	)

93 
	#__HAL_DBGMCU_UNFREEZE_TIM4
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM4_STOP
))

	)

94 
	#__HAL_DBGMCU_UNFREEZE_TIM5
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM5_STOP
))

	)

95 
	#__HAL_DBGMCU_UNFREEZE_TIM6
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM6_STOP
))

	)

96 
	#__HAL_DBGMCU_UNFREEZE_TIM7
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM7_STOP
))

	)

97 
	#__HAL_DBGMCU_UNFREEZE_TIM12
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM12_STOP
))

	)

98 
	#__HAL_DBGMCU_UNFREEZE_TIM13
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM13_STOP
))

	)

99 
	#__HAL_DBGMCU_UNFREEZE_TIM14
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_TIM14_STOP
))

	)

100 
	#__HAL_DBGMCU_UNFREEZE_RTC
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_RTC_STOP
))

	)

101 
	#__HAL_DBGMCU_UNFREEZE_WWDG
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_WWDG_STOP
))

	)

102 
	#__HAL_DBGMCU_UNFREEZE_IWDG
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_IWDG_STOP
))

	)

103 
	#__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
))

	)

104 
	#__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
))

	)

105 
	#__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
))

	)

106 
	#__HAL_DBGMCU_UNFREEZE_CAN1
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_CAN1_STOP
))

	)

107 
	#__HAL_DBGMCU_UNFREEZE_CAN2
(Ë(
DBGMCU
->
APB1FZ
 &~(
DBGMCU_APB1_FZ_DBG_CAN2_STOP
))

	)

108 
	#__HAL_DBGMCU_UNFREEZE_TIM1
(Ë(
DBGMCU
->
APB2FZ
 &~(
DBGMCU_APB2_FZ_DBG_TIM1_STOP
))

	)

109 
	#__HAL_DBGMCU_UNFREEZE_TIM8
(Ë(
DBGMCU
->
APB2FZ
 &~(
DBGMCU_APB2_FZ_DBG_TIM8_STOP
))

	)

110 
	#__HAL_DBGMCU_UNFREEZE_TIM9
(Ë(
DBGMCU
->
APB2FZ
 &~(
DBGMCU_APB2_FZ_DBG_TIM9_STOP
))

	)

111 
	#__HAL_DBGMCU_UNFREEZE_TIM10
(Ë(
DBGMCU
->
APB2FZ
 &~(
DBGMCU_APB2_FZ_DBG_TIM10_STOP
))

	)

112 
	#__HAL_DBGMCU_UNFREEZE_TIM11
(Ë(
DBGMCU
->
APB2FZ
 &~(
DBGMCU_APB2_FZ_DBG_TIM11_STOP
))

	)

116 
	#__HAL_SYSCFG_REMAPMEMORY_FLASH
(Ë(
SYSCFG
->
MEMRMP
 &~(
SYSCFG_MEMRMP_MEM_MODE
))

	)

120 
	#__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH
(Ëdÿ{
SYSCFG
->
MEMRMP
 &~(
SYSCFG_MEMRMP_MEM_MODE
);\

121 
SYSCFG
->
MEMRMP
 |
SYSCFG_MEMRMP_MEM_MODE_0
;\

122 }0);

	)

126 
	#__HAL_SYSCFG_REMAPMEMORY_SRAM
(Ëdÿ{
SYSCFG
->
MEMRMP
 &~(
SYSCFG_MEMRMP_MEM_MODE
);\

127 
SYSCFG
->
MEMRMP
 |(
SYSCFG_MEMRMP_MEM_MODE_0
 | 
SYSCFG_MEMRMP_MEM_MODE_1
);\

128 }0);

	)

130 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
)|| deföed(
STM32F417xx
)

133 
	#__HAL_SYSCFG_REMAPMEMORY_FSMC
(Ëdÿ{
SYSCFG
->
MEMRMP
 &~(
SYSCFG_MEMRMP_MEM_MODE
);\

134 
SYSCFG
->
MEMRMP
 |(
SYSCFG_MEMRMP_MEM_MODE_1
);\

135 }0);

	)

138 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

139 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

142 
	#__HAL_SYSCFG_REMAPMEMORY_FMC
(Ëdÿ{
SYSCFG
->
MEMRMP
 &~(
SYSCFG_MEMRMP_MEM_MODE
);\

143 
SYSCFG
->
MEMRMP
 |(
SYSCFG_MEMRMP_MEM_MODE_1
);\

144 }0);

	)

148 
	#__HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM
(Ëdÿ{
SYSCFG
->
MEMRMP
 &~(
SYSCFG_MEMRMP_MEM_MODE
);\

149 
SYSCFG
->
MEMRMP
 |(
SYSCFG_MEMRMP_MEM_MODE_2
);\

150 }0);

	)

153 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

161 
	#__HAL_SYSCFG_BREAK_PVD_LOCK
(Ëdÿ{
SYSCFG
->
CFGR2
 &~(
SYSCFG_CFGR2_PVD_LOCK
); \

162 
SYSCFG
->
CFGR2
 |
SYSCFG_CFGR2_PVD_LOCK
; \

163 }0)

	)

175 
	#__HAL_SYSCFG_BREAK_LOCKUP_LOCK
(Ëdÿ{
SYSCFG
->
CFGR2
 &~(
SYSCFG_CFGR2_LOCKUP_LOCK
); \

176 
SYSCFG
->
CFGR2
 |
SYSCFG_CFGR2_LOCKUP_LOCK
; \

177 }0)

	)

194 
HAL_SètusTy≥Def
 
HAL_Inô
();

195 
HAL_SètusTy≥Def
 
HAL_DeInô
();

196 
HAL_M•Inô
();

197 
HAL_M•DeInô
();

198 
HAL_SètusTy≥Def
 
HAL_InôTick
 (
uöt32_t
 
TickPri‹ôy
);

207 
HAL_IncTick
();

208 
HAL_Dñay
(
__IO
 
uöt32_t
 
Dñay
);

209 
uöt32_t
 
HAL_GëTick
();

210 
HAL_Su•ídTick
();

211 
HAL_ResumeTick
();

212 
uöt32_t
 
HAL_GëHÆVîsi⁄
();

213 
uöt32_t
 
HAL_GëREVID
();

214 
uöt32_t
 
HAL_GëDEVID
();

215 
HAL_DBGMCU_E«bÀDBGSÀïMode
();

216 
HAL_DBGMCU_DißbÀDBGSÀïMode
();

217 
HAL_DBGMCU_E«bÀDBGSt›Mode
();

218 
HAL_DBGMCU_DißbÀDBGSt›Mode
();

219 
HAL_DBGMCU_E«bÀDBGSèndbyMode
();

220 
HAL_DBGMCU_DißbÀDBGSèndbyMode
();

221 
HAL_E«bÀCom≥nßti⁄Cñl
();

222 
HAL_DißbÀCom≥nßti⁄Cñl
();

223 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

224 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

225 
HAL_E«bÀMem‹ySw≠pögB™k
();

226 
HAL_DißbÀMem‹ySw≠pögB™k
();

260 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_adc.h

39 #i‚de‡
__STM32F4xx_ADC_H


40 
	#__STM32F4xx_ADC_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
HAL_ADC_STATE_RESET
 = 0x00,

68 
HAL_ADC_STATE_READY
 = 0x01,

69 
HAL_ADC_STATE_BUSY
 = 0x02,

70 
HAL_ADC_STATE_BUSY_REG
 = 0x12,

71 
HAL_ADC_STATE_BUSY_INJ
 = 0x22,

72 
HAL_ADC_STATE_BUSY_INJ_REG
 = 0x32,

73 
HAL_ADC_STATE_TIMEOUT
 = 0x03,

74 
HAL_ADC_STATE_ERROR
 = 0x04,

75 
HAL_ADC_STATE_EOC
 = 0x05,

76 
HAL_ADC_STATE_EOC_REG
 = 0x15,

77 
HAL_ADC_STATE_EOC_INJ
 = 0x25,

78 
HAL_ADC_STATE_EOC_INJ_REG
 = 0x35,

79 
HAL_ADC_STATE_AWD
 = 0x06

81 }
	tHAL_ADC_SèãTy≥Def
;

88 
uöt32_t
 
ClockPªsˇÀr
;

91 
uöt32_t
 
Resﬁuti⁄
;

93 
uöt32_t
 
D©aAlign
;

95 
uöt32_t
 
SˇnC⁄vMode
;

98 
uöt32_t
 
EOCSñe˘i⁄
;

105 
uöt32_t
 
C⁄töuousC⁄vMode
;

107 
uöt32_t
 
DMAC⁄töuousReque°s
;

109 
uöt32_t
 
NbrOfC⁄vîsi⁄
;

112 
uöt32_t
 
Disc⁄töuousC⁄vMode
;

115 
uöt32_t
 
NbrOfDiscC⁄vîsi⁄
;

118 
uöt32_t
 
Exã∫ÆTrigC⁄v
;

122 
uöt32_t
 
Exã∫ÆTrigC⁄vEdge
;

126 }
	tADC_InôTy≥Def
;

133 
ADC_Ty≥Def
 *
In°™˚
;

135 
ADC_InôTy≥Def
 
Inô
;

137 
__IO
 
uöt32_t
 
NbrOfCuºítC⁄vîsi⁄R™k
;

139 
DMA_H™dÀTy≥Def
 *
DMA_H™dÀ
;

141 
HAL_LockTy≥Def
 
Lock
;

143 
__IO
 
HAL_ADC_SèãTy≥Def
 
Sèã
;

145 
__IO
 
uöt32_t
 
Eº‹Code
;

146 }
	tADC_H™dÀTy≥Def
;

153 
uöt32_t
 
Ch™√l
;

155 
uöt32_t
 
R™k
;

157 
uöt32_t
 
Sam∂ögTime
;

159 
uöt32_t
 
Off£t
;

160 }
	tADC_Ch™√lC⁄fTy≥Def
;

167 
uöt32_t
 
W©chdogMode
;

169 
uöt32_t
 
HighThªshﬁd
;

171 
uöt32_t
 
LowThªshﬁd
;

173 
uöt32_t
 
Ch™√l
;

176 
uöt32_t
 
ITMode
;

179 
uöt32_t
 
W©chdogNumbî
;

180 }
	tADC_A«logWDGC⁄fTy≥Def
;

193 
	#HAL_ADC_ERROR_NONE
 ((
uöt32_t
)0x00Ë

	)

194 
	#HAL_ADC_ERROR_OVR
 ((
uöt32_t
)0x01Ë

	)

195 
	#HAL_ADC_ERROR_DMA
 ((
uöt32_t
)0x02Ë

	)

204 
	#ADC_CLOCK_SYNC_PCLK_DIV2
 ((
uöt32_t
)0x00000000)

	)

205 
	#ADC_CLOCK_SYNC_PCLK_DIV4
 ((
uöt32_t
)
ADC_CCR_ADCPRE_0
)

	)

206 
	#ADC_CLOCK_SYNC_PCLK_DIV6
 ((
uöt32_t
)
ADC_CCR_ADCPRE_1
)

	)

207 
	#ADC_CLOCK_SYNC_PCLK_DIV8
 ((
uöt32_t
)
ADC_CCR_ADCPRE
)

	)

215 
	#ADC_TWOSAMPLINGDELAY_5CYCLES
 ((
uöt32_t
)0x00000000)

	)

216 
	#ADC_TWOSAMPLINGDELAY_6CYCLES
 ((
uöt32_t
)
ADC_CCR_DELAY_0
)

	)

217 
	#ADC_TWOSAMPLINGDELAY_7CYCLES
 ((
uöt32_t
)
ADC_CCR_DELAY_1
)

	)

218 
	#ADC_TWOSAMPLINGDELAY_8CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_1
 | 
ADC_CCR_DELAY_0
))

	)

219 
	#ADC_TWOSAMPLINGDELAY_9CYCLES
 ((
uöt32_t
)
ADC_CCR_DELAY_2
)

	)

220 
	#ADC_TWOSAMPLINGDELAY_10CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_2
 | 
ADC_CCR_DELAY_0
))

	)

221 
	#ADC_TWOSAMPLINGDELAY_11CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_2
 | 
ADC_CCR_DELAY_1
))

	)

222 
	#ADC_TWOSAMPLINGDELAY_12CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_2
 | 
ADC_CCR_DELAY_1
 | 
ADC_CCR_DELAY_0
))

	)

223 
	#ADC_TWOSAMPLINGDELAY_13CYCLES
 ((
uöt32_t
)
ADC_CCR_DELAY_3
)

	)

224 
	#ADC_TWOSAMPLINGDELAY_14CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_3
 | 
ADC_CCR_DELAY_0
))

	)

225 
	#ADC_TWOSAMPLINGDELAY_15CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_3
 | 
ADC_CCR_DELAY_1
))

	)

226 
	#ADC_TWOSAMPLINGDELAY_16CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_3
 | 
ADC_CCR_DELAY_1
 | 
ADC_CCR_DELAY_0
))

	)

227 
	#ADC_TWOSAMPLINGDELAY_17CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_3
 | 
ADC_CCR_DELAY_2
))

	)

228 
	#ADC_TWOSAMPLINGDELAY_18CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_3
 | 
ADC_CCR_DELAY_2
 | 
ADC_CCR_DELAY_0
))

	)

229 
	#ADC_TWOSAMPLINGDELAY_19CYCLES
 ((
uöt32_t
)(
ADC_CCR_DELAY_3
 | 
ADC_CCR_DELAY_2
 | 
ADC_CCR_DELAY_1
))

	)

230 
	#ADC_TWOSAMPLINGDELAY_20CYCLES
 ((
uöt32_t
)
ADC_CCR_DELAY
)

	)

238 
	#ADC_RESOLUTION_12B
 ((
uöt32_t
)0x00000000)

	)

239 
	#ADC_RESOLUTION_10B
 ((
uöt32_t
)
ADC_CR1_RES_0
)

	)

240 
	#ADC_RESOLUTION_8B
 ((
uöt32_t
)
ADC_CR1_RES_1
)

	)

241 
	#ADC_RESOLUTION_6B
 ((
uöt32_t
)
ADC_CR1_RES
)

	)

249 
	#ADC_EXTERNALTRIGCONVEDGE_NONE
 ((
uöt32_t
)0x00000000)

	)

250 
	#ADC_EXTERNALTRIGCONVEDGE_RISING
 ((
uöt32_t
)
ADC_CR2_EXTEN_0
)

	)

251 
	#ADC_EXTERNALTRIGCONVEDGE_FALLING
 ((
uöt32_t
)
ADC_CR2_EXTEN_1
)

	)

252 
	#ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING
 ((
uöt32_t
)
ADC_CR2_EXTEN
)

	)

262 
	#ADC_EXTERNALTRIGCONV_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

263 
	#ADC_EXTERNALTRIGCONV_T1_CC2
 ((
uöt32_t
)
ADC_CR2_EXTSEL_0
)

	)

264 
	#ADC_EXTERNALTRIGCONV_T1_CC3
 ((
uöt32_t
)
ADC_CR2_EXTSEL_1
)

	)

265 
	#ADC_EXTERNALTRIGCONV_T2_CC2
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_1
 | 
ADC_CR2_EXTSEL_0
))

	)

266 
	#ADC_EXTERNALTRIGCONV_T2_CC3
 ((
uöt32_t
)
ADC_CR2_EXTSEL_2
)

	)

267 
	#ADC_EXTERNALTRIGCONV_T2_CC4
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_0
))

	)

268 
	#ADC_EXTERNALTRIGCONV_T2_TRGO
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_1
))

	)

269 
	#ADC_EXTERNALTRIGCONV_T3_CC1
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_1
 | 
ADC_CR2_EXTSEL_0
))

	)

270 
	#ADC_EXTERNALTRIGCONV_T3_TRGO
 ((
uöt32_t
)
ADC_CR2_EXTSEL_3
)

	)

271 
	#ADC_EXTERNALTRIGCONV_T4_CC4
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_3
 | 
ADC_CR2_EXTSEL_0
))

	)

272 
	#ADC_EXTERNALTRIGCONV_T5_CC1
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_3
 | 
ADC_CR2_EXTSEL_1
))

	)

273 
	#ADC_EXTERNALTRIGCONV_T5_CC2
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_3
 | 
ADC_CR2_EXTSEL_1
 | 
ADC_CR2_EXTSEL_0
))

	)

274 
	#ADC_EXTERNALTRIGCONV_T5_CC3
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_3
 | 
ADC_CR2_EXTSEL_2
))

	)

275 
	#ADC_EXTERNALTRIGCONV_T8_CC1
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_3
 | 
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_0
))

	)

276 
	#ADC_EXTERNALTRIGCONV_T8_TRGO
 ((
uöt32_t
)(
ADC_CR2_EXTSEL_3
 | 
ADC_CR2_EXTSEL_2
 | 
ADC_CR2_EXTSEL_1
))

	)

277 
	#ADC_EXTERNALTRIGCONV_Ext_IT11
 ((
uöt32_t
)
ADC_CR2_EXTSEL
)

	)

278 
	#ADC_SOFTWARE_START
 ((
uöt32_t
)
ADC_CR2_EXTSEL
 + 1)

	)

286 
	#ADC_DATAALIGN_RIGHT
 ((
uöt32_t
)0x00000000)

	)

287 
	#ADC_DATAALIGN_LEFT
 ((
uöt32_t
)
ADC_CR2_ALIGN
)

	)

295 
	#ADC_CHANNEL_0
 ((
uöt32_t
)0x00000000)

	)

296 
	#ADC_CHANNEL_1
 ((
uöt32_t
)
ADC_CR1_AWDCH_0
)

	)

297 
	#ADC_CHANNEL_2
 ((
uöt32_t
)
ADC_CR1_AWDCH_1
)

	)

298 
	#ADC_CHANNEL_3
 ((
uöt32_t
)(
ADC_CR1_AWDCH_1
 | 
ADC_CR1_AWDCH_0
))

	)

299 
	#ADC_CHANNEL_4
 ((
uöt32_t
)
ADC_CR1_AWDCH_2
)

	)

300 
	#ADC_CHANNEL_5
 ((
uöt32_t
)(
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_0
))

	)

301 
	#ADC_CHANNEL_6
 ((
uöt32_t
)(
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_1
))

	)

302 
	#ADC_CHANNEL_7
 ((
uöt32_t
)(
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_1
 | 
ADC_CR1_AWDCH_0
))

	)

303 
	#ADC_CHANNEL_8
 ((
uöt32_t
)
ADC_CR1_AWDCH_3
)

	)

304 
	#ADC_CHANNEL_9
 ((
uöt32_t
)(
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_0
))

	)

305 
	#ADC_CHANNEL_10
 ((
uöt32_t
)(
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_1
))

	)

306 
	#ADC_CHANNEL_11
 ((
uöt32_t
)(
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_1
 | 
ADC_CR1_AWDCH_0
))

	)

307 
	#ADC_CHANNEL_12
 ((
uöt32_t
)(
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_2
))

	)

308 
	#ADC_CHANNEL_13
 ((
uöt32_t
)(
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_0
))

	)

309 
	#ADC_CHANNEL_14
 ((
uöt32_t
)(
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_1
))

	)

310 
	#ADC_CHANNEL_15
 ((
uöt32_t
)(
ADC_CR1_AWDCH_3
 | 
ADC_CR1_AWDCH_2
 | 
ADC_CR1_AWDCH_1
 | 
ADC_CR1_AWDCH_0
))

	)

311 
	#ADC_CHANNEL_16
 ((
uöt32_t
)
ADC_CR1_AWDCH_4
)

	)

312 
	#ADC_CHANNEL_17
 ((
uöt32_t
)(
ADC_CR1_AWDCH_4
 | 
ADC_CR1_AWDCH_0
))

	)

313 
	#ADC_CHANNEL_18
 ((
uöt32_t
)(
ADC_CR1_AWDCH_4
 | 
ADC_CR1_AWDCH_1
))

	)

315 
	#ADC_CHANNEL_VREFINT
 ((
uöt32_t
)
ADC_CHANNEL_17
)

	)

316 
	#ADC_CHANNEL_VBAT
 ((
uöt32_t
)
ADC_CHANNEL_18
)

	)

324 
	#ADC_SAMPLETIME_3CYCLES
 ((
uöt32_t
)0x00000000)

	)

325 
	#ADC_SAMPLETIME_15CYCLES
 ((
uöt32_t
)
ADC_SMPR1_SMP10_0
)

	)

326 
	#ADC_SAMPLETIME_28CYCLES
 ((
uöt32_t
)
ADC_SMPR1_SMP10_1
)

	)

327 
	#ADC_SAMPLETIME_56CYCLES
 ((
uöt32_t
)(
ADC_SMPR1_SMP10_1
 | 
ADC_SMPR1_SMP10_0
))

	)

328 
	#ADC_SAMPLETIME_84CYCLES
 ((
uöt32_t
)
ADC_SMPR1_SMP10_2
)

	)

329 
	#ADC_SAMPLETIME_112CYCLES
 ((
uöt32_t
)(
ADC_SMPR1_SMP10_2
 | 
ADC_SMPR1_SMP10_0
))

	)

330 
	#ADC_SAMPLETIME_144CYCLES
 ((
uöt32_t
)(
ADC_SMPR1_SMP10_2
 | 
ADC_SMPR1_SMP10_1
))

	)

331 
	#ADC_SAMPLETIME_480CYCLES
 ((
uöt32_t
)
ADC_SMPR1_SMP10
)

	)

339 
	#ADC_EOC_SEQ_CONV
 ((
uöt32_t
)0x00000000)

	)

340 
	#ADC_EOC_SINGLE_CONV
 ((
uöt32_t
)0x00000001)

	)

341 
	#ADC_EOC_SINGLE_SEQ_CONV
 ((
uöt32_t
)0x00000002Ë

	)

349 
	#ADC_AWD_EVENT
 ((
uöt32_t
)
ADC_FLAG_AWD
)

	)

350 
	#ADC_OVR_EVENT
 ((
uöt32_t
)
ADC_FLAG_OVR
)

	)

358 
	#ADC_ANALOGWATCHDOG_SINGLE_REG
 ((
uöt32_t
)(
ADC_CR1_AWDSGL
 | 
ADC_CR1_AWDEN
))

	)

359 
	#ADC_ANALOGWATCHDOG_SINGLE_INJEC
 ((
uöt32_t
)(
ADC_CR1_AWDSGL
 | 
ADC_CR1_JAWDEN
))

	)

360 
	#ADC_ANALOGWATCHDOG_SINGLE_REGINJEC
 ((
uöt32_t
)(
ADC_CR1_AWDSGL
 | 
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
))

	)

361 
	#ADC_ANALOGWATCHDOG_ALL_REG
 ((
uöt32_t
)
ADC_CR1_AWDEN
)

	)

362 
	#ADC_ANALOGWATCHDOG_ALL_INJEC
 ((
uöt32_t
)
ADC_CR1_JAWDEN
)

	)

363 
	#ADC_ANALOGWATCHDOG_ALL_REGINJEC
 ((
uöt32_t
)(
ADC_CR1_AWDEN
 | 
ADC_CR1_JAWDEN
))

	)

364 
	#ADC_ANALOGWATCHDOG_NONE
 ((
uöt32_t
)0x00000000)

	)

372 
	#ADC_IT_EOC
 ((
uöt32_t
)
ADC_CR1_EOCIE
)

	)

373 
	#ADC_IT_AWD
 ((
uöt32_t
)
ADC_CR1_AWDIE
)

	)

374 
	#ADC_IT_JEOC
 ((
uöt32_t
)
ADC_CR1_JEOCIE
)

	)

375 
	#ADC_IT_OVR
 ((
uöt32_t
)
ADC_CR1_OVRIE
)

	)

383 
	#ADC_FLAG_AWD
 ((
uöt32_t
)
ADC_SR_AWD
)

	)

384 
	#ADC_FLAG_EOC
 ((
uöt32_t
)
ADC_SR_EOC
)

	)

385 
	#ADC_FLAG_JEOC
 ((
uöt32_t
)
ADC_SR_JEOC
)

	)

386 
	#ADC_FLAG_JSTRT
 ((
uöt32_t
)
ADC_SR_JSTRT
)

	)

387 
	#ADC_FLAG_STRT
 ((
uöt32_t
)
ADC_SR_STRT
)

	)

388 
	#ADC_FLAG_OVR
 ((
uöt32_t
)
ADC_SR_OVR
)

	)

396 
	#ADC_ALL_CHANNELS
 ((
uöt32_t
)0x00000001)

	)

397 
	#ADC_REGULAR_CHANNELS
 ((
uöt32_t
)0x00000002Ë

	)

398 
	#ADC_INJECTED_CHANNELS
 ((
uöt32_t
)0x00000003Ë

	)

416 
	#__HAL_ADC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_ADC_STATE_RESET
)

	)

423 
	#__HAL_ADC_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR2
 |
ADC_CR2_ADON
)

	)

430 
	#__HAL_ADC_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR2
 &~
ADC_CR2_ADON
)

	)

438 
	#__HAL_ADC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
CR1
Ë|(__INTERRUPT__))

	)

446 
	#__HAL_ADC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
CR1
Ë&~(__INTERRUPT__))

	)

453 
	#__HAL_ADC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
CR1
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

461 
	#__HAL_ADC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
Ë~(__FLAG__))

	)

469 
	#__HAL_ADC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((__HANDLE__)->
In°™˚
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

476 
	~"°m32f4xx_hÆ_adc_ex.h
"

487 
HAL_SètusTy≥Def
 
HAL_ADC_Inô
(
ADC_H™dÀTy≥Def
* 
hadc
);

488 
HAL_SètusTy≥Def
 
HAL_ADC_DeInô
(
ADC_H™dÀTy≥Def
 *
hadc
);

489 
HAL_ADC_M•Inô
(
ADC_H™dÀTy≥Def
* 
hadc
);

490 
HAL_ADC_M•DeInô
(
ADC_H™dÀTy≥Def
* 
hadc
);

499 
HAL_SètusTy≥Def
 
HAL_ADC_Sèπ
(
ADC_H™dÀTy≥Def
* 
hadc
);

500 
HAL_SètusTy≥Def
 
HAL_ADC_St›
(
ADC_H™dÀTy≥Def
* 
hadc
);

501 
HAL_SètusTy≥Def
 
HAL_ADC_PﬁlF‹C⁄vîsi⁄
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Timeout
);

503 
HAL_SètusTy≥Def
 
HAL_ADC_PﬁlF‹Evít
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
EvítTy≥
, uöt32_à
Timeout
);

505 
HAL_SètusTy≥Def
 
HAL_ADC_Sèπ_IT
(
ADC_H™dÀTy≥Def
* 
hadc
);

506 
HAL_SètusTy≥Def
 
HAL_ADC_St›_IT
(
ADC_H™dÀTy≥Def
* 
hadc
);

508 
HAL_ADC_IRQH™dÀr
(
ADC_H™dÀTy≥Def
* 
hadc
);

510 
HAL_SètusTy≥Def
 
HAL_ADC_Sèπ_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
* 
pD©a
, uöt32_à
Lígth
);

511 
HAL_SètusTy≥Def
 
HAL_ADC_St›_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
);

513 
uöt32_t
 
HAL_ADC_GëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
);

515 
HAL_ADC_C⁄vC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
);

516 
HAL_ADC_C⁄vHÆfC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
);

517 
HAL_ADC_LevñOutOfWödowCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
);

518 
HAL_ADC_Eº‹CÆlback
(
ADC_H™dÀTy≥Def
 *
hadc
);

527 
HAL_SètusTy≥Def
 
HAL_ADC_C⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
);

528 
HAL_SètusTy≥Def
 
HAL_ADC_A«logWDGC⁄fig
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_A«logWDGC⁄fTy≥Def
* 
A«logWDGC⁄fig
);

537 
HAL_ADC_SèãTy≥Def
 
HAL_ADC_GëSèã
(
ADC_H™dÀTy≥Def
* 
hadc
);

538 
uöt32_t
 
HAL_ADC_GëEº‹
(
ADC_H™dÀTy≥Def
 *
hadc
);

555 
	#ADC_STAB_DELAY_US
 ((
uöt32_t
Ë3)

	)

559 
	#ADC_TEMPSENSOR_DELAY_US
 ((
uöt32_t
Ë10)

	)

568 
	#IS_ADC_CLOCKPRESCALER
(
ADC_CLOCK
Ë(((ADC_CLOCKË=
ADC_CLOCK_SYNC_PCLK_DIV2
) || \

569 ((
ADC_CLOCK
Ë=
ADC_CLOCK_SYNC_PCLK_DIV4
) || \

570 ((
ADC_CLOCK
Ë=
ADC_CLOCK_SYNC_PCLK_DIV6
) || \

571 ((
ADC_CLOCK
Ë=
ADC_CLOCK_SYNC_PCLK_DIV8
))

	)

572 
	#IS_ADC_SAMPLING_DELAY
(
DELAY
Ë(((DELAYË=
ADC_TWOSAMPLINGDELAY_5CYCLES
) || \

573 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_6CYCLES
) || \

574 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_7CYCLES
) || \

575 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_8CYCLES
) || \

576 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_9CYCLES
) || \

577 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_10CYCLES
) || \

578 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_11CYCLES
) || \

579 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_12CYCLES
) || \

580 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_13CYCLES
) || \

581 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_14CYCLES
) || \

582 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_15CYCLES
) || \

583 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_16CYCLES
) || \

584 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_17CYCLES
) || \

585 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_18CYCLES
) || \

586 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_19CYCLES
) || \

587 ((
DELAY
Ë=
ADC_TWOSAMPLINGDELAY_20CYCLES
))

	)

588 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_RESOLUTION_12B
) || \

589 ((
RESOLUTION
Ë=
ADC_RESOLUTION_10B
) || \

590 ((
RESOLUTION
Ë=
ADC_RESOLUTION_8B
) || \

591 ((
RESOLUTION
Ë=
ADC_RESOLUTION_6B
))

	)

592 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_EXTERNALTRIGCONVEDGE_NONE
) || \

593 ((
EDGE
Ë=
ADC_EXTERNALTRIGCONVEDGE_RISING
) || \

594 ((
EDGE
Ë=
ADC_EXTERNALTRIGCONVEDGE_FALLING
) || \

595 ((
EDGE
Ë=
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING
))

	)

596 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_EXTERNALTRIGCONV_T1_CC1
) || \

597 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T1_CC2
) || \

598 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T1_CC3
) || \

599 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T2_CC2
) || \

600 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T2_CC3
) || \

601 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T2_CC4
) || \

602 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T2_TRGO
) || \

603 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T3_CC1
) || \

604 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T3_TRGO
) || \

605 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T4_CC4
) || \

606 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T5_CC1
) || \

607 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T5_CC2
) || \

608 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T5_CC3
) || \

609 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T8_CC1
) || \

610 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_T8_TRGO
) || \

611 ((
REGTRIG
Ë=
ADC_EXTERNALTRIGCONV_Ext_IT11
)|| \

612 ((
REGTRIG
Ë=
ADC_SOFTWARE_START
))

	)

613 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_DATAALIGN_RIGHT
) || \

614 ((
ALIGN
Ë=
ADC_DATAALIGN_LEFT
))

	)

615 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_SAMPLETIME_3CYCLES
) || \

616 ((
TIME
Ë=
ADC_SAMPLETIME_15CYCLES
) || \

617 ((
TIME
Ë=
ADC_SAMPLETIME_28CYCLES
) || \

618 ((
TIME
Ë=
ADC_SAMPLETIME_56CYCLES
) || \

619 ((
TIME
Ë=
ADC_SAMPLETIME_84CYCLES
) || \

620 ((
TIME
Ë=
ADC_SAMPLETIME_112CYCLES
) || \

621 ((
TIME
Ë=
ADC_SAMPLETIME_144CYCLES
) || \

622 ((
TIME
Ë=
ADC_SAMPLETIME_480CYCLES
))

	)

623 
	#IS_ADC_EOCSñe˘i⁄
(
EOCSñe˘i⁄
Ë(((EOCSñe˘i⁄Ë=
ADC_EOC_SINGLE_CONV
) || \

624 ((
EOCSñe˘i⁄
Ë=
ADC_EOC_SEQ_CONV
) || \

625 ((
EOCSñe˘i⁄
Ë=
ADC_EOC_SINGLE_SEQ_CONV
))

	)

626 
	#IS_ADC_EVENT_TYPE
(
EVENT
Ë(((EVENTË=
ADC_AWD_EVENT
) || \

627 ((
EVENT
Ë=
ADC_OVR_EVENT
))

	)

628 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_ANALOGWATCHDOG_SINGLE_REG
) || \

629 ((
WATCHDOG
Ë=
ADC_ANALOGWATCHDOG_SINGLE_INJEC
) || \

630 ((
WATCHDOG
Ë=
ADC_ANALOGWATCHDOG_SINGLE_REGINJEC
) || \

631 ((
WATCHDOG
Ë=
ADC_ANALOGWATCHDOG_ALL_REG
) || \

632 ((
WATCHDOG
Ë=
ADC_ANALOGWATCHDOG_ALL_INJEC
) || \

633 ((
WATCHDOG
Ë=
ADC_ANALOGWATCHDOG_ALL_REGINJEC
) || \

634 ((
WATCHDOG
Ë=
ADC_ANALOGWATCHDOG_NONE
))

	)

635 
	#IS_ADC_CHANNELS_TYPE
(
CHANNEL_TYPE
Ë(((CHANNEL_TYPEË=
ADC_ALL_CHANNELS
) || \

636 ((
CHANNEL_TYPE
Ë=
ADC_REGULAR_CHANNELS
) || \

637 ((
CHANNEL_TYPE
Ë=
ADC_INJECTED_CHANNELS
))

	)

638 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<((
uöt32_t
)0xFFF))

	)

640 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>((
uöt32_t
)1)Ë&& ((LENGTHË<((uöt32_t)16)))

	)

641 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>((
uöt32_t
)1)Ë&& ((RANKË<((uöt32_t)16)))

	)

642 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>((
uöt32_t
)1)Ë&& ((NUMBERË<((uöt32_t)8)))

	)

643 
	#IS_ADC_RANGE
(
RESOLUTION
, 
ADC_VALUE
) \

644 ((((
RESOLUTION
Ë=
ADC_RESOLUTION_12B
Ë&& ((
ADC_VALUE
Ë<((
uöt32_t
)0x0FFF))) || \

645 (((
RESOLUTION
Ë=
ADC_RESOLUTION_10B
Ë&& ((
ADC_VALUE
Ë<((
uöt32_t
)0x03FF))) || \

646 (((
RESOLUTION
Ë=
ADC_RESOLUTION_8B
Ë&& ((
ADC_VALUE
Ë<((
uöt32_t
)0x00FF))) || \

647 (((
RESOLUTION
Ë=
ADC_RESOLUTION_6B
Ë&& ((
ADC_VALUE
Ë<((
uöt32_t
)0x003F))))

	)

654 
	#ADC_SQR1
(
_NbrOfC⁄vîsi⁄_
Ë(((_NbrOfC⁄vîsi⁄_Ë- (
uöt8_t
)1Ë<< 20)

	)

662 
	#ADC_SMPR1
(
_SAMPLETIME_
, 
_CHANNELNB_
Ë((_SAMPLETIME_Ë<< (3 * (((
uöt32_t
)((
uöt16_t
)(_CHANNELNB_))Ë- 10)))

	)

670 
	#ADC_SMPR2
(
_SAMPLETIME_
, 
_CHANNELNB_
Ë((_SAMPLETIME_Ë<< (3 * ((
uöt32_t
)((
uöt16_t
)(_CHANNELNB_)))))

	)

678 
	#ADC_SQR3_RK
(
_CHANNELNB_
, 
_RANKNB_
Ë(((
uöt32_t
)((
uöt16_t
)(_CHANNELNB_))Ë<< (5 * ((_RANKNB_Ë- 1)))

	)

686 
	#ADC_SQR2_RK
(
_CHANNELNB_
, 
_RANKNB_
Ë(((
uöt32_t
)((
uöt16_t
)(_CHANNELNB_))Ë<< (5 * ((_RANKNB_Ë- 7)))

	)

694 
	#ADC_SQR1_RK
(
_CHANNELNB_
, 
_RANKNB_
Ë(((
uöt32_t
)((
uöt16_t
)(_CHANNELNB_))Ë<< (5 * ((_RANKNB_Ë- 13)))

	)

701 
	#ADC_CR2_CONTINUOUS
(
_CONTINUOUS_MODE_
Ë((_CONTINUOUS_MODE_Ë<< 1)

	)

708 
	#ADC_CR1_DISCONTINUOUS
(
_NBR_DISCONTINUOUSCONV_
Ë(((_NBR_DISCONTINUOUSCONV_Ë- 1Ë<< 
	`POSITION_VAL
(
ADC_CR1_DISCNUM
))

	)

715 
	#ADC_CR1_SCANCONV
(
_SCANCONV_MODE_
Ë((_SCANCONV_MODE_Ë<< 8)

	)

722 
	#ADC_CR2_EOCSñe˘i⁄
(
_EOCSñe˘i⁄_MODE_
Ë((_EOCSñe˘i⁄_MODE_Ë<< 10)

	)

729 
	#ADC_CR2_DMAC⁄tReq
(
_DMAC⁄tReq_MODE_
Ë((_DMAC⁄tReq_MODE_Ë<< 9)

	)

736 
	#ADC_GET_RESOLUTION
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
CR1
Ë& 
ADC_CR1_RES
)

	)

759 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_adc_ex.h

39 #i‚de‡
__STM32F4xx_ADC_EX_H


40 
	#__STM32F4xx_ADC_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
Inje˘edCh™√l
;

69 
uöt32_t
 
Inje˘edR™k
;

71 
uöt32_t
 
Inje˘edSam∂ögTime
;

73 
uöt32_t
 
Inje˘edOff£t
;

75 
uöt32_t
 
Inje˘edNbrOfC⁄vîsi⁄
;

78 
uöt32_t
 
AutoInje˘edC⁄v
;

80 
uöt32_t
 
Inje˘edDisc⁄töuousC⁄vMode
;

82 
uöt32_t
 
Exã∫ÆTrigInjecC⁄vEdge
;

84 
uöt32_t
 
Exã∫ÆTrigInjecC⁄v
;

86 }
	tADC_Inje˘i⁄C⁄fTy≥Def
;

93 
uöt32_t
 
Mode
;

95 
uöt32_t
 
DMAAc˚ssMode
;

97 
uöt32_t
 
TwoSam∂ögDñay
;

99 }
	tADC_Mu…iModeTy≥Def
;

113 
	#ADC_MODE_INDEPENDENT
 ((
uöt32_t
)0x00000000)

	)

114 
	#ADC_DUALMODE_REGSIMULT_INJECSIMULT
 ((
uöt32_t
)
ADC_CCR_MULTI_0
)

	)

115 
	#ADC_DUALMODE_REGSIMULT_ALTERTRIG
 ((
uöt32_t
)
ADC_CCR_MULTI_1
)

	)

116 
	#ADC_DUALMODE_INJECSIMULT
 ((
uöt32_t
)(
ADC_CCR_MULTI_2
 | 
ADC_CCR_MULTI_0
))

	)

117 
	#ADC_DUALMODE_REGSIMULT
 ((
uöt32_t
)(
ADC_CCR_MULTI_2
 | 
ADC_CCR_MULTI_1
))

	)

118 
	#ADC_DUALMODE_INTERL
 ((
uöt32_t
)(
ADC_CCR_MULTI_2
 | 
ADC_CCR_MULTI_1
 | 
ADC_CCR_MULTI_0
))

	)

119 
	#ADC_DUALMODE_ALTERTRIG
 ((
uöt32_t
)(
ADC_CCR_MULTI_3
 | 
ADC_CCR_MULTI_0
))

	)

120 
	#ADC_TRIPLEMODE_REGSIMULT_INJECSIMULT
 ((
uöt32_t
)(
ADC_CCR_MULTI_4
 | 
ADC_CCR_MULTI_0
))

	)

121 
	#ADC_TRIPLEMODE_REGSIMULT_A…îTrig
 ((
uöt32_t
)(
ADC_CCR_MULTI_4
 | 
ADC_CCR_MULTI_1
))

	)

122 
	#ADC_TRIPLEMODE_INJECSIMULT
 ((
uöt32_t
)(
ADC_CCR_MULTI_4
 | 
ADC_CCR_MULTI_2
 | 
ADC_CCR_MULTI_0
))

	)

123 
	#ADC_TRIPLEMODE_REGSIMULT
 ((
uöt32_t
)(
ADC_CCR_MULTI_4
 | 
ADC_CCR_MULTI_2
 | 
ADC_CCR_MULTI_1
))

	)

124 
	#ADC_TRIPLEMODE_INTERL
 ((
uöt32_t
)(
ADC_CCR_MULTI_4
 | 
ADC_CCR_MULTI_2
 | 
ADC_CCR_MULTI_1
 | 
ADC_CCR_MULTI_0
))

	)

125 
	#ADC_TRIPLEMODE_ALTERTRIG
 ((
uöt32_t
)(
ADC_CCR_MULTI_4
 | 
ADC_CCR_MULTI_3
 | 
ADC_CCR_MULTI_0
))

	)

133 
	#ADC_DMAACCESSMODE_DISABLED
 ((
uöt32_t
)0x00000000Ë

	)

134 
	#ADC_DMAACCESSMODE_1
 ((
uöt32_t
)
ADC_CCR_DMA_0
Ë

	)

135 
	#ADC_DMAACCESSMODE_2
 ((
uöt32_t
)
ADC_CCR_DMA_1
Ë

	)

136 
	#ADC_DMAACCESSMODE_3
 ((
uöt32_t
)
ADC_CCR_DMA
Ë

	)

144 
	#ADC_EXTERNALTRIGINJECCONVEDGE_NONE
 ((
uöt32_t
)0x00000000)

	)

145 
	#ADC_EXTERNALTRIGINJECCONVEDGE_RISING
 ((
uöt32_t
)
ADC_CR2_JEXTEN_0
)

	)

146 
	#ADC_EXTERNALTRIGINJECCONVEDGE_FALLING
 ((
uöt32_t
)
ADC_CR2_JEXTEN_1
)

	)

147 
	#ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING
 ((
uöt32_t
)
ADC_CR2_JEXTEN
)

	)

155 
	#ADC_EXTERNALTRIGINJECCONV_T1_CC4
 ((
uöt32_t
)0x00000000)

	)

156 
	#ADC_EXTERNALTRIGINJECCONV_T1_TRGO
 ((
uöt32_t
)
ADC_CR2_JEXTSEL_0
)

	)

157 
	#ADC_EXTERNALTRIGINJECCONV_T2_CC1
 ((
uöt32_t
)
ADC_CR2_JEXTSEL_1
)

	)

158 
	#ADC_EXTERNALTRIGINJECCONV_T2_TRGO
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_1
 | 
ADC_CR2_JEXTSEL_0
))

	)

159 
	#ADC_EXTERNALTRIGINJECCONV_T3_CC2
 ((
uöt32_t
)
ADC_CR2_JEXTSEL_2
)

	)

160 
	#ADC_EXTERNALTRIGINJECCONV_T3_CC4
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_0
))

	)

161 
	#ADC_EXTERNALTRIGINJECCONV_T4_CC1
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_1
))

	)

162 
	#ADC_EXTERNALTRIGINJECCONV_T4_CC2
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_1
 | 
ADC_CR2_JEXTSEL_0
))

	)

163 
	#ADC_EXTERNALTRIGINJECCONV_T4_CC3
 ((
uöt32_t
)
ADC_CR2_JEXTSEL_3
)

	)

164 
	#ADC_EXTERNALTRIGINJECCONV_T4_TRGO
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_3
 | 
ADC_CR2_JEXTSEL_0
))

	)

165 
	#ADC_EXTERNALTRIGINJECCONV_T5_CC4
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_3
 | 
ADC_CR2_JEXTSEL_1
))

	)

166 
	#ADC_EXTERNALTRIGINJECCONV_T5_TRGO
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_3
 | 
ADC_CR2_JEXTSEL_1
 | 
ADC_CR2_JEXTSEL_0
))

	)

167 
	#ADC_EXTERNALTRIGINJECCONV_T8_CC2
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_3
 | 
ADC_CR2_JEXTSEL_2
))

	)

168 
	#ADC_EXTERNALTRIGINJECCONV_T8_CC3
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_3
 | 
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_0
))

	)

169 
	#ADC_EXTERNALTRIGINJECCONV_T8_CC4
 ((
uöt32_t
)(
ADC_CR2_JEXTSEL_3
 | 
ADC_CR2_JEXTSEL_2
 | 
ADC_CR2_JEXTSEL_1
))

	)

170 
	#ADC_EXTERNALTRIGINJECCONV_EXT_IT15
 ((
uöt32_t
)
ADC_CR2_JEXTSEL
)

	)

171 
	#ADC_INJECTED_SOFTWARE_START
 ((
uöt32_t
)
ADC_CR2_JEXTSEL
 + 1)

	)

179 
	#ADC_INJECTED_RANK_1
 ((
uöt32_t
)0x00000001)

	)

180 
	#ADC_INJECTED_RANK_2
 ((
uöt32_t
)0x00000002)

	)

181 
	#ADC_INJECTED_RANK_3
 ((
uöt32_t
)0x00000003)

	)

182 
	#ADC_INJECTED_RANK_4
 ((
uöt32_t
)0x00000004)

	)

190 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

191 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) || \

192 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F412xG
)

193 
	#ADC_CHANNEL_TEMPSENSOR
 ((
uöt32_t
)
ADC_CHANNEL_16
)

	)

196 #i‡
deföed
(
STM32F411xE
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

197 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

198 
	#ADC_CHANNEL_DIFFERENCIATION_TEMPSENSOR_VBAT
 ((
uöt32_t
)0x10000000Ë

	)

199 
	#ADC_CHANNEL_TEMPSENSOR
 ((
uöt32_t
)
ADC_CHANNEL_18
 | 
ADC_CHANNEL_DIFFERENCIATION_TEMPSENSOR_VBAT
)

	)

229 
HAL_SètusTy≥Def
 
HAL_ADCEx_Inje˘edSèπ
(
ADC_H™dÀTy≥Def
* 
hadc
);

230 
HAL_SètusTy≥Def
 
HAL_ADCEx_Inje˘edSt›
(
ADC_H™dÀTy≥Def
* 
hadc
);

231 
HAL_SètusTy≥Def
 
HAL_ADCEx_Inje˘edPﬁlF‹C⁄vîsi⁄
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Timeout
);

232 
HAL_SètusTy≥Def
 
HAL_ADCEx_Inje˘edSèπ_IT
(
ADC_H™dÀTy≥Def
* 
hadc
);

233 
HAL_SètusTy≥Def
 
HAL_ADCEx_Inje˘edSt›_IT
(
ADC_H™dÀTy≥Def
* 
hadc
);

234 
uöt32_t
 
HAL_ADCEx_Inje˘edGëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
, uöt32_à
Inje˘edR™k
);

235 
HAL_SètusTy≥Def
 
HAL_ADCEx_Mu…iModeSèπ_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
* 
pD©a
, uöt32_à
Lígth
);

236 
HAL_SètusTy≥Def
 
HAL_ADCEx_Mu…iModeSt›_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
);

237 
uöt32_t
 
HAL_ADCEx_Mu…iModeGëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
);

238 
HAL_ADCEx_Inje˘edC⁄vC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
);

241 
HAL_SètusTy≥Def
 
HAL_ADCEx_Inje˘edC⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
,
ADC_Inje˘i⁄C⁄fTy≥Def
* 
sC⁄figInje˘ed
);

242 
HAL_SètusTy≥Def
 
HAL_ADCEx_Mu…iModeC⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Mu…iModeTy≥Def
* 
mu…imode
);

266 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

267 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) || \

268 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F412xG
)

269 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë((CHANNELË<
ADC_CHANNEL_18
)

	)

272 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

273 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

274 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË<
ADC_CHANNEL_18
) || \

275 ((
CHANNEL
Ë=
ADC_CHANNEL_TEMPSENSOR
))

	)

278 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_MODE_INDEPENDENT
) || \

279 ((
MODE
Ë=
ADC_DUALMODE_REGSIMULT_INJECSIMULT
) || \

280 ((
MODE
Ë=
ADC_DUALMODE_REGSIMULT_ALTERTRIG
) || \

281 ((
MODE
Ë=
ADC_DUALMODE_INJECSIMULT
) || \

282 ((
MODE
Ë=
ADC_DUALMODE_REGSIMULT
) || \

283 ((
MODE
Ë=
ADC_DUALMODE_INTERL
) || \

284 ((
MODE
Ë=
ADC_DUALMODE_ALTERTRIG
) || \

285 ((
MODE
Ë=
ADC_TRIPLEMODE_REGSIMULT_INJECSIMULT
) || \

286 ((
MODE
Ë=
ADC_TRIPLEMODE_REGSIMULT_A…îTrig
) || \

287 ((
MODE
Ë=
ADC_TRIPLEMODE_INJECSIMULT
) || \

288 ((
MODE
Ë=
ADC_TRIPLEMODE_REGSIMULT
) || \

289 ((
MODE
Ë=
ADC_TRIPLEMODE_INTERL
) || \

290 ((
MODE
Ë=
ADC_TRIPLEMODE_ALTERTRIG
))

	)

291 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAACCESSMODE_DISABLED
) || \

292 ((
MODE
Ë=
ADC_DMAACCESSMODE_1
) || \

293 ((
MODE
Ë=
ADC_DMAACCESSMODE_2
) || \

294 ((
MODE
Ë=
ADC_DMAACCESSMODE_3
))

	)

295 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_EXTERNALTRIGINJECCONVEDGE_NONE
) || \

296 ((
EDGE
Ë=
ADC_EXTERNALTRIGINJECCONVEDGE_RISING
) || \

297 ((
EDGE
Ë=
ADC_EXTERNALTRIGINJECCONVEDGE_FALLING
) || \

298 ((
EDGE
Ë=
ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING
))

	)

299 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_EXTERNALTRIGINJECCONV_T1_CC4
) || \

300 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T1_TRGO
) || \

301 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T2_CC1
) || \

302 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T2_TRGO
) || \

303 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T3_CC2
) || \

304 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T3_CC4
) || \

305 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T4_CC1
) || \

306 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T4_CC2
) || \

307 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T4_CC3
) || \

308 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T4_TRGO
) || \

309 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T5_CC4
) || \

310 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T5_TRGO
) || \

311 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T8_CC2
) || \

312 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T8_CC3
) || \

313 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_T8_CC4
) || \

314 ((
INJTRIG
Ë=
ADC_EXTERNALTRIGINJECCONV_EXT_IT15
)|| \

315 ((
INJTRIG
Ë=
ADC_INJECTED_SOFTWARE_START
))

	)

316 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>((
uöt32_t
)1)Ë&& ((LENGTHË<((uöt32_t)4)))

	)

317 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>((
uöt32_t
)1)Ë&& ((RANKË<((uöt32_t)4)))

	)

326 
	#ADC_JSQR
(
_CHANNELNB_
, 
_RANKNB_
, 
_JSQR_JL_
Ë(((
uöt32_t
)((
uöt16_t
)(_CHANNELNB_))Ë<< (5 * (
uöt8_t
)(((_RANKNB_Ë+ 3Ë- (_JSQR_JL_))))

	)

349 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_can.h

39 #i‚de‡
__STM32F4xx_HAL_CAN_H


40 
	#__STM32F4xx_HAL_CAN_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

47 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

48 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_hÆ_def.h
"

70 
HAL_CAN_STATE_RESET
 = 0x00,

71 
HAL_CAN_STATE_READY
 = 0x01,

72 
HAL_CAN_STATE_BUSY
 = 0x02,

73 
HAL_CAN_STATE_BUSY_TX
 = 0x12,

74 
HAL_CAN_STATE_BUSY_RX
 = 0x22,

75 
HAL_CAN_STATE_BUSY_TX_RX
 = 0x32,

76 
HAL_CAN_STATE_TIMEOUT
 = 0x03,

77 
HAL_CAN_STATE_ERROR
 = 0x04

79 }
	tHAL_CAN_SèãTy≥Def
;

86 
uöt32_t
 
PªsˇÀr
;

89 
uöt32_t
 
Mode
;

92 
uöt32_t
 
SJW
;

97 
uöt32_t
 
BS1
;

100 
uöt32_t
 
BS2
;

103 
uöt32_t
 
TTCM
;

106 
uöt32_t
 
ABOM
;

109 
uöt32_t
 
AWUM
;

112 
uöt32_t
 
NART
;

115 
uöt32_t
 
RFLM
;

118 
uöt32_t
 
TXFP
;

120 }
	tCAN_InôTy≥Def
;

127 
uöt32_t
 
FûãrIdHigh
;

131 
uöt32_t
 
FûãrIdLow
;

135 
uöt32_t
 
FûãrMaskIdHigh
;

140 
uöt32_t
 
FûãrMaskIdLow
;

145 
uöt32_t
 
FûãrFIFOAssignmít
;

148 
uöt32_t
 
FûãrNumbî
;

151 
uöt32_t
 
FûãrMode
;

154 
uöt32_t
 
FûãrSˇÀ
;

157 
uöt32_t
 
FûãrA˘iv©i⁄
;

160 
uöt32_t
 
B™kNumbî
;

163 }
	tCAN_FûãrC⁄fTy≥Def
;

170 
uöt32_t
 
StdId
;

173 
uöt32_t
 
ExtId
;

176 
uöt32_t
 
IDE
;

179 
uöt32_t
 
RTR
;

182 
uöt32_t
 
DLC
;

185 
uöt8_t
 
D©a
[8];

188 }
	tC™TxMsgTy≥Def
;

195 
uöt32_t
 
StdId
;

198 
uöt32_t
 
ExtId
;

201 
uöt32_t
 
IDE
;

204 
uöt32_t
 
RTR
;

207 
uöt32_t
 
DLC
;

210 
uöt8_t
 
D©a
[8];

213 
uöt32_t
 
FMI
;

216 
uöt32_t
 
FIFONumbî
;

219 }
	tC™RxMsgTy≥Def
;

226 
CAN_Ty≥Def
 *
In°™˚
;

228 
CAN_InôTy≥Def
 
Inô
;

230 
C™TxMsgTy≥Def
* 
pTxMsg
;

232 
C™RxMsgTy≥Def
* 
pRxMsg
;

234 
__IO
 
HAL_CAN_SèãTy≥Def
 
Sèã
;

236 
HAL_LockTy≥Def
 
Lock
;

238 
__IO
 
uöt32_t
 
Eº‹Code
;

240 }
	tCAN_H™dÀTy≥Def
;

254 
	#HAL_CAN_ERROR_NONE
 0x00

	)

255 
	#HAL_CAN_ERROR_EWG
 0x01

	)

256 
	#HAL_CAN_ERROR_EPV
 0x02

	)

257 
	#HAL_CAN_ERROR_BOF
 0x04

	)

258 
	#HAL_CAN_ERROR_STF
 0x08

	)

259 
	#HAL_CAN_ERROR_FOR
 0x10

	)

260 
	#HAL_CAN_ERROR_ACK
 0x20

	)

261 
	#HAL_CAN_ERROR_BR
 0x40

	)

262 
	#HAL_CAN_ERROR_BD
 0x80

	)

263 
	#HAL_CAN_ERROR_CRC
 0x100

	)

271 
	#CAN_INITSTATUS_FAILED
 ((
uöt8_t
)0x00Ë

	)

272 
	#CAN_INITSTATUS_SUCCESS
 ((
uöt8_t
)0x01Ë

	)

280 
	#CAN_MODE_NORMAL
 ((
uöt32_t
)0x00000000Ë

	)

281 
	#CAN_MODE_LOOPBACK
 ((
uöt32_t
)
CAN_BTR_LBKM
Ë

	)

282 
	#CAN_MODE_SILENT
 ((
uöt32_t
)
CAN_BTR_SILM
Ë

	)

283 
	#CAN_MODE_SILENT_LOOPBACK
 ((
uöt32_t
)(
CAN_BTR_LBKM
 | 
CAN_BTR_SILM
)Ë

	)

291 
	#CAN_SJW_1TQ
 ((
uöt32_t
)0x00000000Ë

	)

292 
	#CAN_SJW_2TQ
 ((
uöt32_t
)
CAN_BTR_SJW_0
Ë

	)

293 
	#CAN_SJW_3TQ
 ((
uöt32_t
)
CAN_BTR_SJW_1
Ë

	)

294 
	#CAN_SJW_4TQ
 ((
uöt32_t
)
CAN_BTR_SJW
Ë

	)

302 
	#CAN_BS1_1TQ
 ((
uöt32_t
)0x00000000Ë

	)

303 
	#CAN_BS1_2TQ
 ((
uöt32_t
)
CAN_BTR_TS1_0
Ë

	)

304 
	#CAN_BS1_3TQ
 ((
uöt32_t
)
CAN_BTR_TS1_1
Ë

	)

305 
	#CAN_BS1_4TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)Ë

	)

306 
	#CAN_BS1_5TQ
 ((
uöt32_t
)
CAN_BTR_TS1_2
Ë

	)

307 
	#CAN_BS1_6TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_0
)Ë

	)

308 
	#CAN_BS1_7TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
)Ë

	)

309 
	#CAN_BS1_8TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)Ë

	)

310 
	#CAN_BS1_9TQ
 ((
uöt32_t
)
CAN_BTR_TS1_3
Ë

	)

311 
	#CAN_BS1_10TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_0
)Ë

	)

312 
	#CAN_BS1_11TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_1
)Ë

	)

313 
	#CAN_BS1_12TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_1
 | 
CAN_BTR_TS1_0
)Ë

	)

314 
	#CAN_BS1_13TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
)Ë

	)

315 
	#CAN_BS1_14TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_0
)Ë

	)

316 
	#CAN_BS1_15TQ
 ((
uöt32_t
)(
CAN_BTR_TS1_3
 | 
CAN_BTR_TS1_2
 | 
CAN_BTR_TS1_1
)Ë

	)

317 
	#CAN_BS1_16TQ
 ((
uöt32_t
)
CAN_BTR_TS1
Ë

	)

325 
	#CAN_BS2_1TQ
 ((
uöt32_t
)0x00000000Ë

	)

326 
	#CAN_BS2_2TQ
 ((
uöt32_t
)
CAN_BTR_TS2_0
Ë

	)

327 
	#CAN_BS2_3TQ
 ((
uöt32_t
)
CAN_BTR_TS2_1
Ë

	)

328 
	#CAN_BS2_4TQ
 ((
uöt32_t
)(
CAN_BTR_TS2_1
 | 
CAN_BTR_TS2_0
)Ë

	)

329 
	#CAN_BS2_5TQ
 ((
uöt32_t
)
CAN_BTR_TS2_2
Ë

	)

330 
	#CAN_BS2_6TQ
 ((
uöt32_t
)(
CAN_BTR_TS2_2
 | 
CAN_BTR_TS2_0
)Ë

	)

331 
	#CAN_BS2_7TQ
 ((
uöt32_t
)(
CAN_BTR_TS2_2
 | 
CAN_BTR_TS2_1
)Ë

	)

332 
	#CAN_BS2_8TQ
 ((
uöt32_t
)
CAN_BTR_TS2
Ë

	)

340 
	#CAN_FILTERMODE_IDMASK
 ((
uöt8_t
)0x00Ë

	)

341 
	#CAN_FILTERMODE_IDLIST
 ((
uöt8_t
)0x01Ë

	)

349 
	#CAN_FILTERSCALE_16BIT
 ((
uöt8_t
)0x00Ë

	)

350 
	#CAN_FILTERSCALE_32BIT
 ((
uöt8_t
)0x01Ë

	)

358 
	#CAN_FILTER_FIFO0
 ((
uöt8_t
)0x00Ë

	)

359 
	#CAN_FILTER_FIFO1
 ((
uöt8_t
)0x01Ë

	)

367 
	#CAN_ID_STD
 ((
uöt32_t
)0x00000000Ë

	)

368 
	#CAN_ID_EXT
 ((
uöt32_t
)0x00000004Ë

	)

376 
	#CAN_RTR_DATA
 ((
uöt32_t
)0x00000000Ë

	)

377 
	#CAN_RTR_REMOTE
 ((
uöt32_t
)0x00000002Ë

	)

385 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

386 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

400 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x00000500Ë

	)

401 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x00000508Ë

	)

402 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x00000510Ë

	)

403 
	#CAN_FLAG_TXOK0
 ((
uöt32_t
)0x00000501Ë

	)

404 
	#CAN_FLAG_TXOK1
 ((
uöt32_t
)0x00000509Ë

	)

405 
	#CAN_FLAG_TXOK2
 ((
uöt32_t
)0x00000511Ë

	)

406 
	#CAN_FLAG_TME0
 ((
uöt32_t
)0x0000051AË

	)

407 
	#CAN_FLAG_TME1
 ((
uöt32_t
)0x0000051BË

	)

408 
	#CAN_FLAG_TME2
 ((
uöt32_t
)0x0000051CË

	)

411 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x00000203Ë

	)

412 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x00000204Ë

	)

414 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x00000403Ë

	)

415 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x00000404Ë

	)

418 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x00000103Ë

	)

419 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x00000101Ë

	)

420 
	#CAN_FLAG_SLAKI
 ((
uöt32_t
)0x00000104Ë

	)

425 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x00000300Ë

	)

426 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x00000301Ë

	)

427 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x00000302Ë

	)

435 
	#CAN_IT_TME
 ((
uöt32_t
)
CAN_IER_TMEIE
Ë

	)

438 
	#CAN_IT_FMP0
 ((
uöt32_t
)
CAN_IER_FMPIE0
Ë

	)

439 
	#CAN_IT_FF0
 ((
uöt32_t
)
CAN_IER_FFIE0
Ë

	)

440 
	#CAN_IT_FOV0
 ((
uöt32_t
)
CAN_IER_FOVIE0
Ë

	)

441 
	#CAN_IT_FMP1
 ((
uöt32_t
)
CAN_IER_FMPIE1
Ë

	)

442 
	#CAN_IT_FF1
 ((
uöt32_t
)
CAN_IER_FFIE1
Ë

	)

443 
	#CAN_IT_FOV1
 ((
uöt32_t
)
CAN_IER_FOVIE1
Ë

	)

446 
	#CAN_IT_WKU
 ((
uöt32_t
)
CAN_IER_WKUIE
Ë

	)

447 
	#CAN_IT_SLK
 ((
uöt32_t
)
CAN_IER_SLKIE
Ë

	)

450 
	#CAN_IT_EWG
 ((
uöt32_t
)
CAN_IER_EWGIE
Ë

	)

451 
	#CAN_IT_EPV
 ((
uöt32_t
)
CAN_IER_EPVIE
Ë

	)

452 
	#CAN_IT_BOF
 ((
uöt32_t
)
CAN_IER_BOFIE
Ë

	)

453 
	#CAN_IT_LEC
 ((
uöt32_t
)
CAN_IER_LECIE
Ë

	)

454 
	#CAN_IT_ERR
 ((
uöt32_t
)
CAN_IER_ERRIE
Ë

	)

462 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

463 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

464 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

482 
	#__HAL_CAN_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_CAN_STATE_RESET
)

	)

490 
	#__HAL_CAN_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
IER
Ë|(__INTERRUPT__))

	)

498 
	#__HAL_CAN_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
IER
Ë&~(__INTERRUPT__))

	)

506 
	#__HAL_CAN_MSG_PENDING
(
__HANDLE__
, 
__FIFONUMBER__
Ë(((__FIFONUMBER__Ë=
CAN_FIFO0
)? \

507 ((
uöt8_t
)((
__HANDLE__
)->
In°™˚
->
RF0R
&(
uöt32_t
)0x03)Ë: ((uöt8_t)((__HANDLE__)->In°™˚->
RF1R
&(uöt32_t)0x03)))

	)

536 
	#__HAL_CAN_GET_FLAG
(
__HANDLE__
, 
__FLAG__
) \

537 ((((
__FLAG__
Ë>> 8Ë=5)? ((((
__HANDLE__
)->
In°™˚
->
TSR
Ë& (1 << ((__FLAG__Ë& 
CAN_FLAG_MASK
))) == (1 << ((__FLAG__) & CAN_FLAG_MASK))): \

538 (((
__FLAG__
Ë>> 8Ë=2)? ((((
__HANDLE__
)->
In°™˚
->
RF0R
Ë& (1 << ((__FLAG__Ë& 
CAN_FLAG_MASK
))) == (1 << ((__FLAG__) & CAN_FLAG_MASK))): \

539 (((
__FLAG__
Ë>> 8Ë=4)? ((((
__HANDLE__
)->
In°™˚
->
RF1R
Ë& (1 << ((__FLAG__Ë& 
CAN_FLAG_MASK
))) == (1 << ((__FLAG__) & CAN_FLAG_MASK))): \

540 (((
__FLAG__
Ë>> 8Ë=1)? ((((
__HANDLE__
)->
In°™˚
->
MSR
Ë& (1 << ((__FLAG__Ë& 
CAN_FLAG_MASK
))) == (1 << ((__FLAG__) & CAN_FLAG_MASK))): \

541 ((((
__HANDLE__
)->
In°™˚
->
ESR
Ë& (1 << ((
__FLAG__
Ë& 
CAN_FLAG_MASK
))Ë=(1 << ((__FLAG__Ë& CAN_FLAG_MASK))))

	)

570 
	#__HAL_CAN_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

571 ((((
__FLAG__
Ë>> 8Ë=5)? (((
__HANDLE__
)->
In°™˚
->
TSR
Ë~((
uöt32_t
)1 << ((__FLAG__Ë& 
CAN_FLAG_MASK
))): \

572 (((
__FLAG__
Ë>> 8Ë=2)? (((
__HANDLE__
)->
In°™˚
->
RF0R
Ë~((
uöt32_t
)1 << ((__FLAG__Ë& 
CAN_FLAG_MASK
))): \

573 (((
__FLAG__
Ë>> 8Ë=4)? (((
__HANDLE__
)->
In°™˚
->
RF1R
Ë~((
uöt32_t
)1 << ((__FLAG__Ë& 
CAN_FLAG_MASK
))): \

574 (((
__FLAG__
Ë>> 8Ë=1)? (((
__HANDLE__
)->
In°™˚
->
MSR
Ë~((
uöt32_t
)1 << ((__FLAG__Ë& 
CAN_FLAG_MASK
))): \

575 (((
__HANDLE__
)->
In°™˚
->
ESR
Ë~((
uöt32_t
)1 << ((
__FLAG__
Ë& 
CAN_FLAG_MASK
))))

	)

586 
	#__HAL_CAN_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
IER
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

594 
	#__HAL_CAN_TRANSMIT_STATUS
(
__HANDLE__
, 
__TRANSMITMAILBOX__
)\

595 (((
__TRANSMITMAILBOX__
Ë=
CAN_TXMAILBOX_0
)? ((((
__HANDLE__
)->
In°™˚
->
TSR
Ë& (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
)) == (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0)) :\

596 ((
__TRANSMITMAILBOX__
Ë=
CAN_TXMAILBOX_1
)? ((((
__HANDLE__
)->
In°™˚
->
TSR
Ë& (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
)) == (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1)) :\

597 ((((
__HANDLE__
)->
In°™˚
->
TSR
Ë& (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
)Ë=(CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2)))

	)

605 
	#__HAL_CAN_FIFO_RELEASE
(
__HANDLE__
, 
__FIFONUMBER__
Ë(((__FIFONUMBER__Ë=
CAN_FIFO0
)? \

606 ((
__HANDLE__
)->
In°™˚
->
RF0R
 |
CAN_RF0R_RFOM0
Ë: ((__HANDLE__)->In°™˚->
RF1R
 |
CAN_RF1R_RFOM1
))

	)

614 
	#__HAL_CAN_CANCEL_TRANSMIT
(
__HANDLE__
, 
__TRANSMITMAILBOX__
)\

615 (((
__TRANSMITMAILBOX__
Ë=
CAN_TXMAILBOX_0
)? ((
__HANDLE__
)->
In°™˚
->
TSR
 |
CAN_TSR_ABRQ0
) :\

616 ((
__TRANSMITMAILBOX__
Ë=
CAN_TXMAILBOX_1
)? ((
__HANDLE__
)->
In°™˚
->
TSR
 |
CAN_TSR_ABRQ1
) :\

617 ((
__HANDLE__
)->
In°™˚
->
TSR
 |
CAN_TSR_ABRQ2
))

	)

628 
	#__HAL_CAN_DBG_FREEZE
(
__HANDLE__
, 
__NEWSTATE__
Ë(((__NEWSTATE__Ë=
ENABLE
)? \

629 ((
__HANDLE__
)->
In°™˚
->
MCR
 |
CAN_MCR_DBF
Ë: ((__HANDLE__)->In°™˚->MCR &~CAN_MCR_DBF))

	)

644 
HAL_SètusTy≥Def
 
	`HAL_CAN_Inô
(
CAN_H™dÀTy≥Def
* 
hˇn
);

645 
HAL_SètusTy≥Def
 
	`HAL_CAN_C⁄figFûãr
(
CAN_H™dÀTy≥Def
* 
hˇn
, 
CAN_FûãrC⁄fTy≥Def
* 
sFûãrC⁄fig
);

646 
HAL_SètusTy≥Def
 
	`HAL_CAN_DeInô
(
CAN_H™dÀTy≥Def
* 
hˇn
);

647 
	`HAL_CAN_M•Inô
(
CAN_H™dÀTy≥Def
* 
hˇn
);

648 
	`HAL_CAN_M•DeInô
(
CAN_H™dÀTy≥Def
* 
hˇn
);

657 
HAL_SètusTy≥Def
 
	`HAL_CAN_Tønsmô
(
CAN_H™dÀTy≥Def
 *
hˇn
, 
uöt32_t
 
Timeout
);

658 
HAL_SètusTy≥Def
 
	`HAL_CAN_Tønsmô_IT
(
CAN_H™dÀTy≥Def
 *
hˇn
);

659 
HAL_SètusTy≥Def
 
	`HAL_CAN_Re˚ive
(
CAN_H™dÀTy≥Def
 *
hˇn
, 
uöt8_t
 
FIFONumbî
, 
uöt32_t
 
Timeout
);

660 
HAL_SètusTy≥Def
 
	`HAL_CAN_Re˚ive_IT
(
CAN_H™dÀTy≥Def
 *
hˇn
, 
uöt8_t
 
FIFONumbî
);

661 
HAL_SètusTy≥Def
 
	`HAL_CAN_SÀï
(
CAN_H™dÀTy≥Def
 *
hˇn
);

662 
HAL_SètusTy≥Def
 
	`HAL_CAN_WakeUp
(
CAN_H™dÀTy≥Def
 *
hˇn
);

663 
	`HAL_CAN_IRQH™dÀr
(
CAN_H™dÀTy≥Def
* 
hˇn
);

664 
	`HAL_CAN_TxC∂tCÆlback
(
CAN_H™dÀTy≥Def
* 
hˇn
);

665 
	`HAL_CAN_RxC∂tCÆlback
(
CAN_H™dÀTy≥Def
* 
hˇn
);

666 
	`HAL_CAN_Eº‹CÆlback
(
CAN_H™dÀTy≥Def
 *
hˇn
);

675 
uöt32_t
 
	`HAL_CAN_GëEº‹
(
CAN_H™dÀTy≥Def
 *
hˇn
);

676 
HAL_CAN_SèãTy≥Def
 
	`HAL_CAN_GëSèã
(
CAN_H™dÀTy≥Def
* 
hˇn
);

707 
	#CAN_TXSTATUS_NOMAILBOX
 ((
uöt8_t
)0x04Ë

	)

708 
	#CAN_FLAG_MASK
 ((
uöt32_t
)0x000000FF)

	)

717 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_MODE_NORMAL
) || \

718 ((
MODE
Ë=
CAN_MODE_LOOPBACK
)|| \

719 ((
MODE
Ë=
CAN_MODE_SILENT
) || \

720 ((
MODE
Ë=
CAN_MODE_SILENT_LOOPBACK
))

	)

721 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1TQ
Ë|| ((SJWË=
CAN_SJW_2TQ
)|| \

722 ((
SJW
Ë=
CAN_SJW_3TQ
Ë|| ((SJWË=
CAN_SJW_4TQ
))

	)

723 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16TQ
)

	)

724 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8TQ
)

	)

725 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

726 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

727 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FILTERMODE_IDMASK
) || \

728 ((
MODE
Ë=
CAN_FILTERMODE_IDLIST
))

	)

729 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FILTERSCALE_16BIT
) || \

730 ((
SCALE
Ë=
CAN_FILTERSCALE_32BIT
))

	)

731 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FILTER_FIFO0
) || \

732 ((
FIFO
Ë=
CAN_FILTER_FIFO1
))

	)

733 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë((BANKNUMBERË<28)

	)

735 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

736 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

737 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

738 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

740 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_ID_STD
) || \

741 ((
IDTYPE
Ë=
CAN_ID_EXT
))

	)

742 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_DATA
Ë|| ((RTRË=
CAN_RTR_REMOTE
))

	)

743 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

759 
STM32F429xx
 || 
STM32F439xx
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

769 #ifde‡
__˝lu•lus


770 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_cec.h

39 #i‚de‡
__STM32F4xx_HAL_CEC_H


40 
	#__STM32F4xx_HAL_CEC_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F446xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

68 
uöt32_t
 
Sig«lFªeTime
;

74 
uöt32_t
 
Tﬁî™˚
;

78 
uöt32_t
 
BRERxSt›
;

82 
uöt32_t
 
BREEº‹BôGí
;

87 
uöt32_t
 
LBPEEº‹BôGí
;

92 
uöt32_t
 
Brﬂdˇ°MsgNoEº‹BôGí
;

108 
uöt32_t
 
Sig«lFªeTimeO±i⁄
;

112 
uöt32_t
 
OwnAddªss
;

114 
uöt32_t
 
Li°íMode
;

124 
uöt8_t
 
Inôüt‹Addªss
;

126 }
	tCEC_InôTy≥Def
;

133 
	mHAL_CEC_STATE_RESET
 = 0x00,

134 
	mHAL_CEC_STATE_READY
 = 0x01,

135 
	mHAL_CEC_STATE_BUSY
 = 0x02,

136 
	mHAL_CEC_STATE_BUSY_TX
 = 0x03,

137 
	mHAL_CEC_STATE_BUSY_RX
 = 0x04,

138 
	mHAL_CEC_STATE_STANDBY_RX
 = 0x05,

139 
	mHAL_CEC_STATE_TIMEOUT
 = 0x06,

140 
	mHAL_CEC_STATE_ERROR
 = 0x07

141 }
	tHAL_CEC_SèãTy≥Def
;

148 
CEC_Ty≥Def
 *
	mIn°™˚
;

150 
CEC_InôTy≥Def
 
	mInô
;

152 
uöt8_t
 *
	mpTxBuffPå
;

154 
uöt16_t
 
	mTxX„rCou¡
;

156 
uöt8_t
 *
	mpRxBuffPå
;

158 
uöt16_t
 
	mRxX„rSize
;

160 
uöt32_t
 
	mEº‹Code
;

163 
HAL_LockTy≥Def
 
	mLock
;

165 
HAL_CEC_SèãTy≥Def
 
	mSèã
;

167 }
	tCEC_H™dÀTy≥Def
;

180 
	#HAL_CEC_ERROR_NONE
 (
uöt32_t
Ë0x0

	)

181 
	#HAL_CEC_ERROR_RXOVR
 
CEC_ISR_RXOVR


	)

182 
	#HAL_CEC_ERROR_BRE
 
CEC_ISR_BRE


	)

183 
	#HAL_CEC_ERROR_SBPE
 
CEC_ISR_SBPE


	)

184 
	#HAL_CEC_ERROR_LBPE
 
CEC_ISR_LBPE


	)

185 
	#HAL_CEC_ERROR_RXACKE
 
CEC_ISR_RXACKE


	)

186 
	#HAL_CEC_ERROR_ARBLST
 
CEC_ISR_ARBLST


	)

187 
	#HAL_CEC_ERROR_TXUDR
 
CEC_ISR_TXUDR


	)

188 
	#HAL_CEC_ERROR_TXERR
 
CEC_ISR_TXERR


	)

189 
	#HAL_CEC_ERROR_TXACKE
 
CEC_ISR_TXACKE


	)

197 
	#CEC_DEFAULT_SFT
 ((
uöt32_t
)0x00000000)

	)

198 
	#CEC_0_5_BITPERIOD_SFT
 ((
uöt32_t
)0x00000001)

	)

199 
	#CEC_1_5_BITPERIOD_SFT
 ((
uöt32_t
)0x00000002)

	)

200 
	#CEC_2_5_BITPERIOD_SFT
 ((
uöt32_t
)0x00000003)

	)

201 
	#CEC_3_5_BITPERIOD_SFT
 ((
uöt32_t
)0x00000004)

	)

202 
	#CEC_4_5_BITPERIOD_SFT
 ((
uöt32_t
)0x00000005)

	)

203 
	#CEC_5_5_BITPERIOD_SFT
 ((
uöt32_t
)0x00000006)

	)

204 
	#CEC_6_5_BITPERIOD_SFT
 ((
uöt32_t
)0x00000007)

	)

212 
	#CEC_STANDARD_TOLERANCE
 ((
uöt32_t
)0x00000000)

	)

213 
	#CEC_EXTENDED_TOLERANCE
 ((
uöt32_t
)
CEC_CFGR_RXTOL
)

	)

221 
	#CEC_NO_RX_STOP_ON_BRE
 ((
uöt32_t
)0x00000000)

	)

222 
	#CEC_RX_STOP_ON_BRE
 ((
uöt32_t
)
CEC_CFGR_BRESTP
)

	)

230 
	#CEC_BRE_ERRORBIT_NO_GENERATION
 ((
uöt32_t
)0x00000000)

	)

231 
	#CEC_BRE_ERRORBIT_GENERATION
 ((
uöt32_t
)
CEC_CFGR_BREGEN
)

	)

239 
	#CEC_LBPE_ERRORBIT_NO_GENERATION
 ((
uöt32_t
)0x00000000)

	)

240 
	#CEC_LBPE_ERRORBIT_GENERATION
 ((
uöt32_t
)
CEC_CFGR_LBPEGEN
)

	)

248 
	#CEC_BROADCASTERROR_ERRORBIT_GENERATION
 ((
uöt32_t
)0x00000000)

	)

249 
	#CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION
 ((
uöt32_t
)
CEC_CFGR_BRDNOGEN
)

	)

257 
	#CEC_SFT_START_ON_TXSOM
 ((
uöt32_t
)0x00000000)

	)

258 
	#CEC_SFT_START_ON_TX_RX_END
 ((
uöt32_t
)
CEC_CFGR_SFTOPT
)

	)

266 
	#CEC_REDUCED_LISTENING_MODE
 ((
uöt32_t
)0x00000000)

	)

267 
	#CEC_FULL_LISTENING_MODE
 ((
uöt32_t
)
CEC_CFGR_LSTN
)

	)

275 
	#CEC_CFGR_OAR_LSB_POS
 ((
uöt32_t
Ë16)

	)

283 
	#CEC_INITIATOR_LSB_POS
 ((
uöt32_t
Ë4)

	)

291 
	#CEC_IT_TXACKE
 
CEC_IER_TXACKEIE


	)

292 
	#CEC_IT_TXERR
 
CEC_IER_TXERRIE


	)

293 
	#CEC_IT_TXUDR
 
CEC_IER_TXUDRIE


	)

294 
	#CEC_IT_TXEND
 
CEC_IER_TXENDIE


	)

295 
	#CEC_IT_TXBR
 
CEC_IER_TXBRIE


	)

296 
	#CEC_IT_ARBLST
 
CEC_IER_ARBLSTIE


	)

297 
	#CEC_IT_RXACKE
 
CEC_IER_RXACKEIE


	)

298 
	#CEC_IT_LBPE
 
CEC_IER_LBPEIE


	)

299 
	#CEC_IT_SBPE
 
CEC_IER_SBPEIE


	)

300 
	#CEC_IT_BRE
 
CEC_IER_BREIE


	)

301 
	#CEC_IT_RXOVR
 
CEC_IER_RXOVRIE


	)

302 
	#CEC_IT_RXEND
 
CEC_IER_RXENDIE


	)

303 
	#CEC_IT_RXBR
 
CEC_IER_RXBRIE


	)

311 
	#CEC_FLAG_TXACKE
 
CEC_ISR_TXACKE


	)

312 
	#CEC_FLAG_TXERR
 
CEC_ISR_TXERR


	)

313 
	#CEC_FLAG_TXUDR
 
CEC_ISR_TXUDR


	)

314 
	#CEC_FLAG_TXEND
 
CEC_ISR_TXEND


	)

315 
	#CEC_FLAG_TXBR
 
CEC_ISR_TXBR


	)

316 
	#CEC_FLAG_ARBLST
 
CEC_ISR_ARBLST


	)

317 
	#CEC_FLAG_RXACKE
 
CEC_ISR_RXACKE


	)

318 
	#CEC_FLAG_LBPE
 
CEC_ISR_LBPE


	)

319 
	#CEC_FLAG_SBPE
 
CEC_ISR_SBPE


	)

320 
	#CEC_FLAG_BRE
 
CEC_ISR_BRE


	)

321 
	#CEC_FLAG_RXOVR
 
CEC_ISR_RXOVR


	)

322 
	#CEC_FLAG_RXEND
 
CEC_ISR_RXEND


	)

323 
	#CEC_FLAG_RXBR
 
CEC_ISR_RXBR


	)

331 
	#CEC_ISR_ALL_ERROR
 ((
uöt32_t
)
CEC_ISR_RXOVR
|
CEC_ISR_BRE
|
CEC_ISR_SBPE
|
CEC_ISR_LBPE
|
CEC_ISR_RXACKE
|\

332 
CEC_ISR_ARBLST
|
CEC_ISR_TXUDR
|
CEC_ISR_TXERR
|
CEC_ISR_TXACKE
)

	)

340 
	#CEC_IER_RX_ALL_ERR
 ((
uöt32_t
)
CEC_IER_RXACKEIE
|
CEC_IER_LBPEIE
|
CEC_IER_SBPEIE
|
CEC_IER_BREIE
|
CEC_IER_RXOVRIE
)

	)

348 
	#CEC_IER_TX_ALL_ERR
 ((
uöt32_t
)
CEC_IER_TXACKEIE
|
CEC_IER_TXERRIE
|
CEC_IER_TXUDRIE
|
CEC_IER_ARBLSTIE
)

	)

366 
	#__HAL_CEC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_CEC_STATE_RESET
)

	)

386 
	#__HAL_CEC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ISR
 & (__FLAG__))

	)

407 
	#__HAL_CEC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ISR
 |(__FLAG__))

	)

428 
	#__HAL_CEC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 |(__INTERRUPT__))

	)

449 
	#__HAL_CEC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 &(~(__INTERRUPT__)))

	)

470 
	#__HAL_CEC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 & (__INTERRUPT__))

	)

476 
	#__HAL_CEC_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
CEC_CR_CECEN
)

	)

482 
	#__HAL_CEC_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~
CEC_CR_CECEN
)

	)

488 
	#__HAL_CEC_FIRST_BYTE_TX_SET
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
CEC_CR_TXSOM
)

	)

495 
	#__HAL_CEC_LAST_BYTE_TX_SET
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
CEC_CR_TXEOM
)

	)

501 
	#__HAL_CEC_GET_TRANSMISSION_START_FLAG
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 & 
CEC_CR_TXSOM
)

	)

507 
	#__HAL_CEC_GET_TRANSMISSION_END_FLAG
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 & 
CEC_CR_TXEOM
)

	)

513 
	#__HAL_CEC_CLEAR_OAR
(
__HANDLE__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CFGR
, 
CEC_CFGR_OAR
)

	)

521 
	#__HAL_CEC_SET_OAR
(
__HANDLE__
,
__ADDRESS__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CFGR
, (__ADDRESS__)<< 
CEC_CFGR_OAR_LSB_POS
)

	)

536 
HAL_SètusTy≥Def
 
HAL_CEC_Inô
(
CEC_H™dÀTy≥Def
 *
h˚c
);

537 
HAL_SètusTy≥Def
 
HAL_CEC_DeInô
(
CEC_H™dÀTy≥Def
 *
h˚c
);

538 
HAL_CEC_M•Inô
(
CEC_H™dÀTy≥Def
 *
h˚c
);

539 
HAL_CEC_M•DeInô
(
CEC_H™dÀTy≥Def
 *
h˚c
);

548 
HAL_SètusTy≥Def
 
HAL_CEC_Tønsmô
(
CEC_H™dÀTy≥Def
 *
h˚c
, 
uöt8_t
 
De°ö©i⁄Addªss
, uöt8_à*
pD©a
, 
uöt32_t
 
Size
, uöt32_à
Timeout
);

549 
HAL_SètusTy≥Def
 
HAL_CEC_Re˚ive
(
CEC_H™dÀTy≥Def
 *
h˚c
, 
uöt8_t
 *
pD©a
, 
uöt32_t
 
Timeout
);

550 
HAL_SètusTy≥Def
 
HAL_CEC_Tønsmô_IT
(
CEC_H™dÀTy≥Def
 *
h˚c
, 
uöt8_t
 
De°ö©i⁄Addªss
, uöt8_à*
pD©a
, 
uöt32_t
 
Size
);

551 
HAL_SètusTy≥Def
 
HAL_CEC_Re˚ive_IT
(
CEC_H™dÀTy≥Def
 *
h˚c
, 
uöt8_t
 *
pD©a
);

552 
uöt32_t
 
HAL_CEC_GëRe˚ivedFømeSize
(
CEC_H™dÀTy≥Def
 *
h˚c
);

553 
HAL_CEC_IRQH™dÀr
(
CEC_H™dÀTy≥Def
 *
h˚c
);

554 
HAL_CEC_TxC∂tCÆlback
(
CEC_H™dÀTy≥Def
 *
h˚c
);

555 
HAL_CEC_RxC∂tCÆlback
(
CEC_H™dÀTy≥Def
 *
h˚c
);

556 
HAL_CEC_Eº‹CÆlback
(
CEC_H™dÀTy≥Def
 *
h˚c
);

565 
HAL_CEC_SèãTy≥Def
 
HAL_CEC_GëSèã
(
CEC_H™dÀTy≥Def
 *
h˚c
);

566 
uöt32_t
 
HAL_CEC_GëEº‹
(
CEC_H™dÀTy≥Def
 *
h˚c
);

607 
	#IS_CEC_SIGNALFREETIME
(
__SFT__
Ë((__SFT__Ë<
CEC_CFGR_SFT
)

	)

609 
	#IS_CEC_TOLERANCE
(
__RXTOL__
Ë(((__RXTOL__Ë=
CEC_STANDARD_TOLERANCE
) || \

610 ((
__RXTOL__
Ë=
CEC_EXTENDED_TOLERANCE
))

	)

612 
	#IS_CEC_BRERXSTOP
(
__BRERXSTOP__
Ë(((__BRERXSTOP__Ë=
CEC_NO_RX_STOP_ON_BRE
) || \

613 ((
__BRERXSTOP__
Ë=
CEC_RX_STOP_ON_BRE
))

	)

615 
	#IS_CEC_BREERRORBITGEN
(
__ERRORBITGEN__
Ë(((__ERRORBITGEN__Ë=
CEC_BRE_ERRORBIT_NO_GENERATION
) || \

616 ((
__ERRORBITGEN__
Ë=
CEC_BRE_ERRORBIT_GENERATION
))

	)

618 
	#IS_CEC_LBPEERRORBITGEN
(
__ERRORBITGEN__
Ë(((__ERRORBITGEN__Ë=
CEC_LBPE_ERRORBIT_NO_GENERATION
) || \

619 ((
__ERRORBITGEN__
Ë=
CEC_LBPE_ERRORBIT_GENERATION
))

	)

621 
	#IS_CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION
(
__ERRORBITGEN__
Ë(((__ERRORBITGEN__Ë=
CEC_BROADCASTERROR_ERRORBIT_GENERATION
) || \

622 ((
__ERRORBITGEN__
Ë=
CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION
))

	)

624 
	#IS_CEC_SFTOP
(
__SFTOP__
Ë(((__SFTOP__Ë=
CEC_SFT_START_ON_TXSOM
) || \

625 ((
__SFTOP__
Ë=
CEC_SFT_START_ON_TX_RX_END
))

	)

627 
	#IS_CEC_LISTENING_MODE
(
__MODE__
Ë(((__MODE__Ë=
CEC_REDUCED_LISTENING_MODE
) || \

628 ((
__MODE__
Ë=
CEC_FULL_LISTENING_MODE
))

	)

635 
	#IS_CEC_OAR_ADDRESS
(
__ADDRESS__
Ë((__ADDRESS__Ë<0x07FFF)

	)

642 
	#IS_CEC_ADDRESS
(
__ADDRESS__
Ë((__ADDRESS__Ë<0xF)

	)

651 
	#IS_CEC_MSGSIZE
(
__SIZE__
Ë((__SIZE__Ë<0xF)

	)

675 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_conf_template.h

41 #i‚de‡
__STM32F4xx_HAL_CONF_H


42 
	#__STM32F4xx_HAL_CONF_H


	)

44 #ifde‡
__˝lu•lus


55 
	#HAL_MODULE_ENABLED


	)

56 
	#HAL_ADC_MODULE_ENABLED


	)

57 
	#HAL_CAN_MODULE_ENABLED


	)

58 
	#HAL_CRC_MODULE_ENABLED


	)

59 
	#HAL_CEC_MODULE_ENABLED


	)

60 
	#HAL_CRYP_MODULE_ENABLED


	)

61 
	#HAL_DAC_MODULE_ENABLED


	)

62 
	#HAL_DCMI_MODULE_ENABLED


	)

63 
	#HAL_DMA_MODULE_ENABLED


	)

64 
	#HAL_DMA2D_MODULE_ENABLED


	)

65 
	#HAL_ETH_MODULE_ENABLED


	)

66 
	#HAL_FLASH_MODULE_ENABLED


	)

67 
	#HAL_NAND_MODULE_ENABLED


	)

68 
	#HAL_NOR_MODULE_ENABLED


	)

69 
	#HAL_PCCARD_MODULE_ENABLED


	)

70 
	#HAL_SRAM_MODULE_ENABLED


	)

71 
	#HAL_SDRAM_MODULE_ENABLED


	)

72 
	#HAL_HASH_MODULE_ENABLED


	)

73 
	#HAL_GPIO_MODULE_ENABLED


	)

74 
	#HAL_I2C_MODULE_ENABLED


	)

75 
	#HAL_I2S_MODULE_ENABLED


	)

76 
	#HAL_IWDG_MODULE_ENABLED


	)

77 
	#HAL_LTDC_MODULE_ENABLED


	)

78 
	#HAL_DSI_MODULE_ENABLED


	)

79 
	#HAL_PWR_MODULE_ENABLED


	)

80 
	#HAL_QSPI_MODULE_ENABLED


	)

81 
	#HAL_RCC_MODULE_ENABLED


	)

82 
	#HAL_RNG_MODULE_ENABLED


	)

83 
	#HAL_RTC_MODULE_ENABLED


	)

84 
	#HAL_SAI_MODULE_ENABLED


	)

85 
	#HAL_SD_MODULE_ENABLED


	)

86 
	#HAL_SPI_MODULE_ENABLED


	)

87 
	#HAL_TIM_MODULE_ENABLED


	)

88 
	#HAL_UART_MODULE_ENABLED


	)

89 
	#HAL_USART_MODULE_ENABLED


	)

90 
	#HAL_IRDA_MODULE_ENABLED


	)

91 
	#HAL_SMARTCARD_MODULE_ENABLED


	)

92 
	#HAL_WWDG_MODULE_ENABLED


	)

93 
	#HAL_CORTEX_MODULE_ENABLED


	)

94 
	#HAL_PCD_MODULE_ENABLED


	)

95 
	#HAL_HCD_MODULE_ENABLED


	)

96 
	#HAL_FMPI2C_MODULE_ENABLED


	)

97 
	#HAL_SPDIFRX_MODULE_ENABLED


	)

98 
	#HAL_LPTIM_MODULE_ENABLED


	)

106 #i‡!
deföed
 (
HSE_VALUE
)

107 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

110 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

111 
	#HSE_STARTUP_TIMEOUT
 ((
uöt32_t
)5000Ë

	)

119 #i‡!
deföed
 (
HSI_VALUE
)

120 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

126 #i‡!
deföed
 (
LSI_VALUE
)

127 
	#LSI_VALUE
 ((
uöt32_t
)32000Ë

	)

129 
The
 
ªÆ
 
vÆue
 
may
 
v¨y
 
dïídög
 
⁄
 
the
 
v¨üti⁄s


130 
ö
 
vﬁège
 
™d
 
ãm≥øtuª
.*/

134 #i‡!
deföed
 (
LSE_VALUE
)

135 
	#LSE_VALUE
 ((
uöt32_t
)32768Ë

	)

143 #i‡!
deföed
 (
EXTERNAL_CLOCK_VALUE
)

144 
	#EXTERNAL_CLOCK_VALUE
 ((
uöt32_t
)12288000Ë

	)

154 
	#VDD_VALUE
 ((
uöt32_t
)3300Ë

	)

155 
	#TICK_INT_PRIORITY
 ((
uöt32_t
)0x0FË

	)

156 
	#USE_RTOS
 0

	)

157 
	#PREFETCH_ENABLE
 1

	)

158 
	#INSTRUCTION_CACHE_ENABLE
 1

	)

159 
	#DATA_CACHE_ENABLE
 1

	)

173 
	#MAC_ADDR0
 2

	)

174 
	#MAC_ADDR1
 0

	)

175 
	#MAC_ADDR2
 0

	)

176 
	#MAC_ADDR3
 0

	)

177 
	#MAC_ADDR4
 0

	)

178 
	#MAC_ADDR5
 0

	)

181 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

182 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

183 
	#ETH_RXBUFNB
 ((
uöt32_t
)4Ë

	)

184 
	#ETH_TXBUFNB
 ((
uöt32_t
)4Ë

	)

189 
	#DP83848_PHY_ADDRESS
 0x01

	)

191 
	#PHY_RESET_DELAY
 ((
uöt32_t
)0x000000FF)

	)

193 
	#PHY_CONFIG_DELAY
 ((
uöt32_t
)0x00000FFF)

	)

195 
	#PHY_READ_TO
 ((
uöt32_t
)0x0000FFFF)

	)

196 
	#PHY_WRITE_TO
 ((
uöt32_t
)0x0000FFFF)

	)

200 
	#PHY_BCR
 ((
uöt16_t
)0x00Ë

	)

201 
	#PHY_BSR
 ((
uöt16_t
)0x01Ë

	)

203 
	#PHY_RESET
 ((
uöt16_t
)0x8000Ë

	)

204 
	#PHY_LOOPBACK
 ((
uöt16_t
)0x4000Ë

	)

205 
	#PHY_FULLDUPLEX_100M
 ((
uöt16_t
)0x2100Ë

	)

206 
	#PHY_HALFDUPLEX_100M
 ((
uöt16_t
)0x2000Ë

	)

207 
	#PHY_FULLDUPLEX_10M
 ((
uöt16_t
)0x0100Ë

	)

208 
	#PHY_HALFDUPLEX_10M
 ((
uöt16_t
)0x0000Ë

	)

209 
	#PHY_AUTONEGOTIATION
 ((
uöt16_t
)0x1000Ë

	)

210 
	#PHY_RESTART_AUTONEGOTIATION
 ((
uöt16_t
)0x0200Ë

	)

211 
	#PHY_POWERDOWN
 ((
uöt16_t
)0x0800Ë

	)

212 
	#PHY_ISOLATE
 ((
uöt16_t
)0x0400Ë

	)

214 
	#PHY_AUTONEGO_COMPLETE
 ((
uöt16_t
)0x0020Ë

	)

215 
	#PHY_LINKED_STATUS
 ((
uöt16_t
)0x0004Ë

	)

216 
	#PHY_JABBER_DETECTION
 ((
uöt16_t
)0x0002Ë

	)

220 
	#PHY_SR
 ((
uöt16_t
)0x10Ë

	)

221 
	#PHY_MICR
 ((
uöt16_t
)0x11Ë

	)

222 
	#PHY_MISR
 ((
uöt16_t
)0x12Ë

	)

224 
	#PHY_LINK_STATUS
 ((
uöt16_t
)0x0001Ë

	)

225 
	#PHY_SPEED_STATUS
 ((
uöt16_t
)0x0002Ë

	)

226 
	#PHY_DUPLEX_STATUS
 ((
uöt16_t
)0x0004Ë

	)

228 
	#PHY_MICR_INT_EN
 ((
uöt16_t
)0x0002Ë

	)

229 
	#PHY_MICR_INT_OE
 ((
uöt16_t
)0x0001Ë

	)

231 
	#PHY_MISR_LINK_INT_EN
 ((
uöt16_t
)0x0020Ë

	)

232 
	#PHY_LINK_INTERRUPT
 ((
uöt16_t
)0x2000Ë

	)

239 #ifde‡
HAL_RCC_MODULE_ENABLED


240 
	~"°m32f4xx_hÆ_rcc.h
"

243 #ifde‡
HAL_GPIO_MODULE_ENABLED


244 
	~"°m32f4xx_hÆ_gpio.h
"

247 #ifde‡
HAL_DMA_MODULE_ENABLED


248 
	~"°m32f4xx_hÆ_dma.h
"

251 #ifde‡
HAL_CORTEX_MODULE_ENABLED


252 
	~"°m32f4xx_hÆ_c‹ãx.h
"

255 #ifde‡
HAL_ADC_MODULE_ENABLED


256 
	~"°m32f4xx_hÆ_adc.h
"

259 #ifde‡
HAL_CAN_MODULE_ENABLED


260 
	~"°m32f4xx_hÆ_ˇn.h
"

263 #ifde‡
HAL_CRC_MODULE_ENABLED


264 
	~"°m32f4xx_hÆ_¸c.h
"

267 #ifde‡
HAL_CRYP_MODULE_ENABLED


268 
	~"°m32f4xx_hÆ_¸yp.h
"

271 #ifde‡
HAL_DMA2D_MODULE_ENABLED


272 
	~"°m32f4xx_hÆ_dma2d.h
"

275 #ifde‡
HAL_DAC_MODULE_ENABLED


276 
	~"°m32f4xx_hÆ_dac.h
"

279 #ifde‡
HAL_DCMI_MODULE_ENABLED


280 
	~"°m32f4xx_hÆ_dcmi.h
"

283 #ifde‡
HAL_ETH_MODULE_ENABLED


284 
	~"°m32f4xx_hÆ_ëh.h
"

287 #ifde‡
HAL_FLASH_MODULE_ENABLED


288 
	~"°m32f4xx_hÆ_Êash.h
"

291 #ifde‡
HAL_SRAM_MODULE_ENABLED


292 
	~"°m32f4xx_hÆ_§am.h
"

295 #ifde‡
HAL_NOR_MODULE_ENABLED


296 
	~"°m32f4xx_hÆ_n‹.h
"

299 #ifde‡
HAL_NAND_MODULE_ENABLED


300 
	~"°m32f4xx_hÆ_«nd.h
"

303 #ifde‡
HAL_PCCARD_MODULE_ENABLED


304 
	~"°m32f4xx_hÆ_pcˇrd.h
"

307 #ifde‡
HAL_SDRAM_MODULE_ENABLED


308 
	~"°m32f4xx_hÆ_sdøm.h
"

311 #ifde‡
HAL_HASH_MODULE_ENABLED


312 
	~"°m32f4xx_hÆ_hash.h
"

315 #ifde‡
HAL_I2C_MODULE_ENABLED


316 
	~"°m32f4xx_hÆ_i2c.h
"

319 #ifde‡
HAL_I2S_MODULE_ENABLED


320 
	~"°m32f4xx_hÆ_i2s.h
"

323 #ifde‡
HAL_IWDG_MODULE_ENABLED


324 
	~"°m32f4xx_hÆ_iwdg.h
"

327 #ifde‡
HAL_LTDC_MODULE_ENABLED


328 
	~"°m32f4xx_hÆ_…dc.h
"

331 #ifde‡
HAL_PWR_MODULE_ENABLED


332 
	~"°m32f4xx_hÆ_pwr.h
"

335 #ifde‡
HAL_RNG_MODULE_ENABLED


336 
	~"°m32f4xx_hÆ_∫g.h
"

339 #ifde‡
HAL_RTC_MODULE_ENABLED


340 
	~"°m32f4xx_hÆ_πc.h
"

343 #ifde‡
HAL_SAI_MODULE_ENABLED


344 
	~"°m32f4xx_hÆ_ßi.h
"

347 #ifde‡
HAL_SD_MODULE_ENABLED


348 
	~"°m32f4xx_hÆ_sd.h
"

351 #ifde‡
HAL_SPI_MODULE_ENABLED


352 
	~"°m32f4xx_hÆ_•i.h
"

355 #ifde‡
HAL_TIM_MODULE_ENABLED


356 
	~"°m32f4xx_hÆ_tim.h
"

359 #ifde‡
HAL_UART_MODULE_ENABLED


360 
	~"°m32f4xx_hÆ_u¨t.h
"

363 #ifde‡
HAL_USART_MODULE_ENABLED


364 
	~"°m32f4xx_hÆ_ußπ.h
"

367 #ifde‡
HAL_IRDA_MODULE_ENABLED


368 
	~"°m32f4xx_hÆ_úda.h
"

371 #ifde‡
HAL_SMARTCARD_MODULE_ENABLED


372 
	~"°m32f4xx_hÆ_sm¨tˇrd.h
"

375 #ifde‡
HAL_WWDG_MODULE_ENABLED


376 
	~"°m32f4xx_hÆ_wwdg.h
"

379 #ifde‡
HAL_PCD_MODULE_ENABLED


380 
	~"°m32f4xx_hÆ_pcd.h
"

383 #ifde‡
HAL_HCD_MODULE_ENABLED


384 
	~"°m32f4xx_hÆ_hcd.h
"

387 #ifde‡
HAL_DSI_MODULE_ENABLED


388 
	~"°m32f4xx_hÆ_dsi.h
"

391 #ifde‡
HAL_QSPI_MODULE_ENABLED


392 
	~"°m32f4xx_hÆ_q•i.h
"

395 #ifde‡
HAL_CEC_MODULE_ENABLED


396 
	~"°m32f4xx_hÆ_˚c.h
"

399 #ifde‡
HAL_FMPI2C_MODULE_ENABLED


400 
	~"°m32f4xx_hÆ_fmpi2c.h
"

403 #ifde‡
HAL_SPDIFRX_MODULE_ENABLED


404 
	~"°m32f4xx_hÆ_•di‰x.h
"

407 #ifde‡
HAL_LPTIM_MODULE_ENABLED


408 
	~"°m32f4xx_hÆ_Õtim.h
"

412 #ifde‡ 
USE_FULL_ASSERT


421 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

423 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

425 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

429 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_cortex.h

39 #i‚de‡
__STM32F4xx_HAL_CORTEX_H


40 
	#__STM32F4xx_HAL_CORTEX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

61 #i‡(
__MPU_PRESENT
 == 1)

68 
uöt8_t
 
E«bÀ
;

70 
uöt8_t
 
Numbî
;

72 
uöt32_t
 
Ba£Addªss
;

73 
uöt8_t
 
Size
;

75 
uöt8_t
 
SubRegi⁄DißbÀ
;

77 
uöt8_t
 
Ty≥ExtFõld
;

79 
uöt8_t
 
Ac˚ssPîmissi⁄
;

81 
uöt8_t
 
DißbÀExec
;

83 
uöt8_t
 
IsSh¨óbÀ
;

85 
uöt8_t
 
IsCachóbÀ
;

87 
uöt8_t
 
IsBuf„øbÀ
;

89 }
	tMPU_Regi⁄_InôTy≥Def
;

108 
	#NVIC_PRIORITYGROUP_0
 ((
uöt32_t
)0x00000007Ë

	)

110 
	#NVIC_PRIORITYGROUP_1
 ((
uöt32_t
)0x00000006Ë

	)

112 
	#NVIC_PRIORITYGROUP_2
 ((
uöt32_t
)0x00000005Ë

	)

114 
	#NVIC_PRIORITYGROUP_3
 ((
uöt32_t
)0x00000004Ë

	)

116 
	#NVIC_PRIORITYGROUP_4
 ((
uöt32_t
)0x00000003Ë

	)

125 
	#SYSTICK_CLKSOURCE_HCLK_DIV8
 ((
uöt32_t
)0x00000000)

	)

126 
	#SYSTICK_CLKSOURCE_HCLK
 ((
uöt32_t
)0x00000004)

	)

132 #i‡(
__MPU_PRESENT
 == 1)

136 
	#MPU_HFNMI_PRIVDEF_NONE
 ((
uöt32_t
)0x00000000)

	)

137 
	#MPU_HARDFAULT_NMI
 ((
uöt32_t
)0x00000002)

	)

138 
	#MPU_PRIVILEGED_DEFAULT
 ((
uöt32_t
)0x00000004)

	)

139 
	#MPU_HFNMI_PRIVDEF
 ((
uöt32_t
)0x00000006)

	)

147 
	#MPU_REGION_ENABLE
 ((
uöt8_t
)0x01)

	)

148 
	#MPU_REGION_DISABLE
 ((
uöt8_t
)0x00)

	)

156 
	#MPU_INSTRUCTION_ACCESS_ENABLE
 ((
uöt8_t
)0x00)

	)

157 
	#MPU_INSTRUCTION_ACCESS_DISABLE
 ((
uöt8_t
)0x01)

	)

165 
	#MPU_ACCESS_SHAREABLE
 ((
uöt8_t
)0x01)

	)

166 
	#MPU_ACCESS_NOT_SHAREABLE
 ((
uöt8_t
)0x00)

	)

174 
	#MPU_ACCESS_CACHEABLE
 ((
uöt8_t
)0x01)

	)

175 
	#MPU_ACCESS_NOT_CACHEABLE
 ((
uöt8_t
)0x00)

	)

183 
	#MPU_ACCESS_BUFFERABLE
 ((
uöt8_t
)0x01)

	)

184 
	#MPU_ACCESS_NOT_BUFFERABLE
 ((
uöt8_t
)0x00)

	)

192 
	#MPU_TEX_LEVEL0
 ((
uöt8_t
)0x00)

	)

193 
	#MPU_TEX_LEVEL1
 ((
uöt8_t
)0x01)

	)

194 
	#MPU_TEX_LEVEL2
 ((
uöt8_t
)0x02)

	)

202 
	#MPU_REGION_SIZE_32B
 ((
uöt8_t
)0x04)

	)

203 
	#MPU_REGION_SIZE_64B
 ((
uöt8_t
)0x05)

	)

204 
	#MPU_REGION_SIZE_128B
 ((
uöt8_t
)0x06)

	)

205 
	#MPU_REGION_SIZE_256B
 ((
uöt8_t
)0x07)

	)

206 
	#MPU_REGION_SIZE_512B
 ((
uöt8_t
)0x08)

	)

207 
	#MPU_REGION_SIZE_1KB
 ((
uöt8_t
)0x09)

	)

208 
	#MPU_REGION_SIZE_2KB
 ((
uöt8_t
)0x0A)

	)

209 
	#MPU_REGION_SIZE_4KB
 ((
uöt8_t
)0x0B)

	)

210 
	#MPU_REGION_SIZE_8KB
 ((
uöt8_t
)0x0C)

	)

211 
	#MPU_REGION_SIZE_16KB
 ((
uöt8_t
)0x0D)

	)

212 
	#MPU_REGION_SIZE_32KB
 ((
uöt8_t
)0x0E)

	)

213 
	#MPU_REGION_SIZE_64KB
 ((
uöt8_t
)0x0F)

	)

214 
	#MPU_REGION_SIZE_128KB
 ((
uöt8_t
)0x10)

	)

215 
	#MPU_REGION_SIZE_256KB
 ((
uöt8_t
)0x11)

	)

216 
	#MPU_REGION_SIZE_512KB
 ((
uöt8_t
)0x12)

	)

217 
	#MPU_REGION_SIZE_1MB
 ((
uöt8_t
)0x13)

	)

218 
	#MPU_REGION_SIZE_2MB
 ((
uöt8_t
)0x14)

	)

219 
	#MPU_REGION_SIZE_4MB
 ((
uöt8_t
)0x15)

	)

220 
	#MPU_REGION_SIZE_8MB
 ((
uöt8_t
)0x16)

	)

221 
	#MPU_REGION_SIZE_16MB
 ((
uöt8_t
)0x17)

	)

222 
	#MPU_REGION_SIZE_32MB
 ((
uöt8_t
)0x18)

	)

223 
	#MPU_REGION_SIZE_64MB
 ((
uöt8_t
)0x19)

	)

224 
	#MPU_REGION_SIZE_128MB
 ((
uöt8_t
)0x1A)

	)

225 
	#MPU_REGION_SIZE_256MB
 ((
uöt8_t
)0x1B)

	)

226 
	#MPU_REGION_SIZE_512MB
 ((
uöt8_t
)0x1C)

	)

227 
	#MPU_REGION_SIZE_1GB
 ((
uöt8_t
)0x1D)

	)

228 
	#MPU_REGION_SIZE_2GB
 ((
uöt8_t
)0x1E)

	)

229 
	#MPU_REGION_SIZE_4GB
 ((
uöt8_t
)0x1F)

	)

237 
	#MPU_REGION_NO_ACCESS
 ((
uöt8_t
)0x00)

	)

238 
	#MPU_REGION_PRIV_RW
 ((
uöt8_t
)0x01)

	)

239 
	#MPU_REGION_PRIV_RW_URO
 ((
uöt8_t
)0x02)

	)

240 
	#MPU_REGION_FULL_ACCESS
 ((
uöt8_t
)0x03)

	)

241 
	#MPU_REGION_PRIV_RO
 ((
uöt8_t
)0x05)

	)

242 
	#MPU_REGION_PRIV_RO_URO
 ((
uöt8_t
)0x06)

	)

250 
	#MPU_REGION_NUMBER0
 ((
uöt8_t
)0x00)

	)

251 
	#MPU_REGION_NUMBER1
 ((
uöt8_t
)0x01)

	)

252 
	#MPU_REGION_NUMBER2
 ((
uöt8_t
)0x02)

	)

253 
	#MPU_REGION_NUMBER3
 ((
uöt8_t
)0x03)

	)

254 
	#MPU_REGION_NUMBER4
 ((
uöt8_t
)0x04)

	)

255 
	#MPU_REGION_NUMBER5
 ((
uöt8_t
)0x05)

	)

256 
	#MPU_REGION_NUMBER6
 ((
uöt8_t
)0x06)

	)

257 
	#MPU_REGION_NUMBER7
 ((
uöt8_t
)0x07)

	)

280 
	#__HAL_CORTEX_SYSTICKCLK_CONFIG
(
__CLKSRC__
) \

282 i‡((
__CLKSRC__
Ë=
SYSTICK_CLKSOURCE_HCLK
) \

284 
SysTick
->
CTRL
 |
SYSTICK_CLKSOURCE_HCLK
; \

287 
SysTick
->
CTRL
 &~
SYSTICK_CLKSOURCE_HCLK
; \

288 } 0)

	)

302 
HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
);

303 
HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
);

304 
HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
);

305 
HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
);

306 
HAL_NVIC_Sy°emRe£t
();

307 
uöt32_t
 
HAL_SYSTICK_C⁄fig
(uöt32_à
TicksNumb
);

316 #i‡(
__MPU_PRESENT
 == 1)

317 
HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
);

319 
uöt32_t
 
HAL_NVIC_GëPri‹ôyGroupög
();

320 
HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
);

321 
uöt32_t
 
HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

322 
HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

323 
HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
);

324 
uöt32_t
 
HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
);

325 
HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
);

326 
HAL_SYSTICK_IRQH™dÀr
();

327 
HAL_SYSTICK_CÆlback
();

343 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_PRIORITYGROUP_0
) || \

344 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_1
) || \

345 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_2
) || \

346 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_3
) || \

347 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_4
))

	)

349 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

351 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

353 
	#IS_NVIC_DEVICE_IRQ
(
IRQ
Ë((IRQË>0x00)

	)

355 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SYSTICK_CLKSOURCE_HCLK
) || \

356 ((
SOURCE
Ë=
SYSTICK_CLKSOURCE_HCLK_DIV8
))

	)

358 #i‡(
__MPU_PRESENT
 == 1)

359 
	#IS_MPU_REGION_ENABLE
(
STATE
Ë(((STATEË=
MPU_REGION_ENABLE
) || \

360 ((
STATE
Ë=
MPU_REGION_DISABLE
))

	)

362 
	#IS_MPU_INSTRUCTION_ACCESS
(
STATE
Ë(((STATEË=
MPU_INSTRUCTION_ACCESS_ENABLE
) || \

363 ((
STATE
Ë=
MPU_INSTRUCTION_ACCESS_DISABLE
))

	)

365 
	#IS_MPU_ACCESS_SHAREABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_SHAREABLE
) || \

366 ((
STATE
Ë=
MPU_ACCESS_NOT_SHAREABLE
))

	)

368 
	#IS_MPU_ACCESS_CACHEABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_CACHEABLE
) || \

369 ((
STATE
Ë=
MPU_ACCESS_NOT_CACHEABLE
))

	)

371 
	#IS_MPU_ACCESS_BUFFERABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_BUFFERABLE
) || \

372 ((
STATE
Ë=
MPU_ACCESS_NOT_BUFFERABLE
))

	)

374 
	#IS_MPU_TEX_LEVEL
(
TYPE
Ë(((TYPEË=
MPU_TEX_LEVEL0
) || \

375 ((
TYPE
Ë=
MPU_TEX_LEVEL1
) || \

376 ((
TYPE
Ë=
MPU_TEX_LEVEL2
))

	)

378 
	#IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
TYPE
Ë(((TYPEË=
MPU_REGION_NO_ACCESS
) || \

379 ((
TYPE
Ë=
MPU_REGION_PRIV_RW
) || \

380 ((
TYPE
Ë=
MPU_REGION_PRIV_RW_URO
) || \

381 ((
TYPE
Ë=
MPU_REGION_FULL_ACCESS
) || \

382 ((
TYPE
Ë=
MPU_REGION_PRIV_RO
) || \

383 ((
TYPE
Ë=
MPU_REGION_PRIV_RO_URO
))

	)

385 
	#IS_MPU_REGION_NUMBER
(
NUMBER
Ë(((NUMBERË=
MPU_REGION_NUMBER0
) || \

386 ((
NUMBER
Ë=
MPU_REGION_NUMBER1
) || \

387 ((
NUMBER
Ë=
MPU_REGION_NUMBER2
) || \

388 ((
NUMBER
Ë=
MPU_REGION_NUMBER3
) || \

389 ((
NUMBER
Ë=
MPU_REGION_NUMBER4
) || \

390 ((
NUMBER
Ë=
MPU_REGION_NUMBER5
) || \

391 ((
NUMBER
Ë=
MPU_REGION_NUMBER6
) || \

392 ((
NUMBER
Ë=
MPU_REGION_NUMBER7
))

	)

394 
	#IS_MPU_REGION_SIZE
(
SIZE
Ë(((SIZEË=
MPU_REGION_SIZE_32B
) || \

395 ((
SIZE
Ë=
MPU_REGION_SIZE_64B
) || \

396 ((
SIZE
Ë=
MPU_REGION_SIZE_128B
) || \

397 ((
SIZE
Ë=
MPU_REGION_SIZE_256B
) || \

398 ((
SIZE
Ë=
MPU_REGION_SIZE_512B
) || \

399 ((
SIZE
Ë=
MPU_REGION_SIZE_1KB
) || \

400 ((
SIZE
Ë=
MPU_REGION_SIZE_2KB
) || \

401 ((
SIZE
Ë=
MPU_REGION_SIZE_4KB
) || \

402 ((
SIZE
Ë=
MPU_REGION_SIZE_8KB
) || \

403 ((
SIZE
Ë=
MPU_REGION_SIZE_16KB
) || \

404 ((
SIZE
Ë=
MPU_REGION_SIZE_32KB
) || \

405 ((
SIZE
Ë=
MPU_REGION_SIZE_64KB
) || \

406 ((
SIZE
Ë=
MPU_REGION_SIZE_128KB
) || \

407 ((
SIZE
Ë=
MPU_REGION_SIZE_256KB
) || \

408 ((
SIZE
Ë=
MPU_REGION_SIZE_512KB
) || \

409 ((
SIZE
Ë=
MPU_REGION_SIZE_1MB
) || \

410 ((
SIZE
Ë=
MPU_REGION_SIZE_2MB
) || \

411 ((
SIZE
Ë=
MPU_REGION_SIZE_4MB
) || \

412 ((
SIZE
Ë=
MPU_REGION_SIZE_8MB
) || \

413 ((
SIZE
Ë=
MPU_REGION_SIZE_16MB
) || \

414 ((
SIZE
Ë=
MPU_REGION_SIZE_32MB
) || \

415 ((
SIZE
Ë=
MPU_REGION_SIZE_64MB
) || \

416 ((
SIZE
Ë=
MPU_REGION_SIZE_128MB
) || \

417 ((
SIZE
Ë=
MPU_REGION_SIZE_256MB
) || \

418 ((
SIZE
Ë=
MPU_REGION_SIZE_512MB
) || \

419 ((
SIZE
Ë=
MPU_REGION_SIZE_1GB
) || \

420 ((
SIZE
Ë=
MPU_REGION_SIZE_2GB
) || \

421 ((
SIZE
Ë=
MPU_REGION_SIZE_4GB
))

	)

423 
	#IS_MPU_SUB_REGION_DISABLE
(
SUBREGION
Ë((SUBREGIONË< (
uöt16_t
)0x00FF)

	)

431 
	#__STATIC_INLINE


	)

439 #i‡(
__MPU_PRESENT
 == 1)

444 
__STATIC_INLINE
 
HAL_MPU_DißbÀ
()

447 
SCB
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

450 
MPU
->
CTRL
 &~
MPU_CTRL_ENABLE_Msk
;

464 
__STATIC_INLINE
 
HAL_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

467 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

470 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

486 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_crc.h

39 #i‚de‡
__STM32F4xx_HAL_CRC_H


40 
	#__STM32F4xx_HAL_CRC_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

68 
HAL_CRC_STATE_RESET
 = 0x00,

69 
HAL_CRC_STATE_READY
 = 0x01,

70 
HAL_CRC_STATE_BUSY
 = 0x02,

71 
HAL_CRC_STATE_TIMEOUT
 = 0x03,

72 
HAL_CRC_STATE_ERROR
 = 0x04

74 }
	tHAL_CRC_SèãTy≥Def
;

84 
CRC_Ty≥Def
 *
In°™˚
;

86 
HAL_LockTy≥Def
 
Lock
;

88 
__IO
 
HAL_CRC_SèãTy≥Def
 
Sèã
;

90 }
	tCRC_H™dÀTy≥Def
;

109 
	#__HAL_CRC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_CRC_STATE_RESET
)

	)

116 
	#__HAL_CRC_DR_RESET
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
CRC_CR_RESET
)

	)

124 
	#__HAL_CRC_SET_IDR
(
__HANDLE__
, 
__VALUE__
Ë(
	`WRITE_REG
((__HANDLE__)->
In°™˚
->
IDR
, (__VALUE__)))

	)

131 
	#__HAL_CRC_GET_IDR
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
IDR
Ë& 
CRC_IDR_IDR
)

	)

144 
HAL_SètusTy≥Def
 
HAL_CRC_Inô
(
CRC_H™dÀTy≥Def
 *
h¸c
);

145 
HAL_SètusTy≥Def
 
HAL_CRC_DeInô
 (
CRC_H™dÀTy≥Def
 *
h¸c
);

146 
HAL_CRC_M•Inô
(
CRC_H™dÀTy≥Def
 *
h¸c
);

147 
HAL_CRC_M•DeInô
(
CRC_H™dÀTy≥Def
 *
h¸c
);

155 
uöt32_t
 
HAL_CRC_Accumuœã
(
CRC_H™dÀTy≥Def
 *
h¸c
, uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

156 
uöt32_t
 
HAL_CRC_CÆcuœã
(
CRC_H™dÀTy≥Def
 *
h¸c
, uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

164 
HAL_CRC_SèãTy≥Def
 
HAL_CRC_GëSèã
(
CRC_H™dÀTy≥Def
 *
h¸c
);

243 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_cryp.h

39 #i‚de‡
__STM32F4xx_HAL_CRYP_H


40 
	#__STM32F4xx_HAL_CRYP_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F415xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

70 
uöt32_t
 
D©aTy≥
;

73 
uöt32_t
 
KeySize
;

76 
uöt8_t
* 
pKey
;

78 
uöt8_t
* 
pInôVe˘
;

81 
uöt8_t
 
IVSize
;

85 
uöt8_t
 
TagSize
;

89 
uöt8_t
* 
Hódî
;

91 
uöt32_t
 
HódîSize
;

93 
uöt8_t
* 
pS¸©ch
;

95 }
	tCRYP_InôTy≥Def
;

108 
	mHAL_CRYP_STATE_RESET
 = 0x00,

109 
	mHAL_CRYP_STATE_READY
 = 0x01,

110 
	mHAL_CRYP_STATE_BUSY
 = 0x02,

111 
	mHAL_CRYP_STATE_TIMEOUT
 = 0x03,

112 
	mHAL_CRYP_STATE_ERROR
 = 0x04

113 }
	tHAL_CRYP_STATETy≥Def
;

126 
	mHAL_CRYP_PHASE_READY
 = 0x01,

127 
	mHAL_CRYP_PHASE_PROCESS
 = 0x02,

128 
	mHAL_CRYP_PHASE_FINAL
 = 0x03

130 }
	tHAL_Pha£Ty≥Def
;

142 
CRYP_Ty≥Def
 *
	mIn°™˚
;

144 
CRYP_InôTy≥Def
 
	mInô
;

146 
uöt8_t
 *
	mpCrypInBuffPå
;

148 
uöt8_t
 *
	mpCrypOutBuffPå
;

150 
__IO
 
uöt16_t
 
	mCrypInCou¡
;

152 
__IO
 
uöt16_t
 
	mCrypOutCou¡
;

154 
HAL_SètusTy≥Def
 
	mSètus
;

156 
HAL_Pha£Ty≥Def
 
	mPha£
;

158 
DMA_H™dÀTy≥Def
 *
	mhdmaö
;

160 
DMA_H™dÀTy≥Def
 *
	mhdmaout
;

162 
HAL_LockTy≥Def
 
	mLock
;

164 
__IO
 
HAL_CRYP_STATETy≥Def
 
	mSèã
;

165 }
	tCRYP_H™dÀTy≥Def
;

183 
	#CRYP_KEYSIZE_128B
 ((
uöt32_t
)0x00000000)

	)

184 
	#CRYP_KEYSIZE_192B
 
CRYP_CR_KEYSIZE_0


	)

185 
	#CRYP_KEYSIZE_256B
 
CRYP_CR_KEYSIZE_1


	)

193 
	#CRYP_DATATYPE_32B
 ((
uöt32_t
)0x00000000)

	)

194 
	#CRYP_DATATYPE_16B
 
CRYP_CR_DATATYPE_0


	)

195 
	#CRYP_DATATYPE_8B
 
CRYP_CR_DATATYPE_1


	)

196 
	#CRYP_DATATYPE_1B
 
CRYP_CR_DATATYPE


	)

204 
	#CRYP_CR_ALGOMODE_DIRECTION
 ((
uöt32_t
)0x0008003C)

	)

205 
	#CRYP_CR_ALGOMODE_TDES_ECB_ENCRYPT
 ((
uöt32_t
)0x00000000)

	)

206 
	#CRYP_CR_ALGOMODE_TDES_ECB_DECRYPT
 ((
uöt32_t
)0x00000004)

	)

207 
	#CRYP_CR_ALGOMODE_TDES_CBC_ENCRYPT
 ((
uöt32_t
)0x00000008)

	)

208 
	#CRYP_CR_ALGOMODE_TDES_CBC_DECRYPT
 ((
uöt32_t
)0x0000000C)

	)

209 
	#CRYP_CR_ALGOMODE_DES_ECB_ENCRYPT
 ((
uöt32_t
)0x00000010)

	)

210 
	#CRYP_CR_ALGOMODE_DES_ECB_DECRYPT
 ((
uöt32_t
)0x00000014)

	)

211 
	#CRYP_CR_ALGOMODE_DES_CBC_ENCRYPT
 ((
uöt32_t
)0x00000018)

	)

212 
	#CRYP_CR_ALGOMODE_DES_CBC_DECRYPT
 ((
uöt32_t
)0x0000001C)

	)

213 
	#CRYP_CR_ALGOMODE_AES_ECB_ENCRYPT
 ((
uöt32_t
)0x00000020)

	)

214 
	#CRYP_CR_ALGOMODE_AES_ECB_DECRYPT
 ((
uöt32_t
)0x00000024)

	)

215 
	#CRYP_CR_ALGOMODE_AES_CBC_ENCRYPT
 ((
uöt32_t
)0x00000028)

	)

216 
	#CRYP_CR_ALGOMODE_AES_CBC_DECRYPT
 ((
uöt32_t
)0x0000002C)

	)

217 
	#CRYP_CR_ALGOMODE_AES_CTR_ENCRYPT
 ((
uöt32_t
)0x00000030)

	)

218 
	#CRYP_CR_ALGOMODE_AES_CTR_DECRYPT
 ((
uöt32_t
)0x00000034)

	)

226 
	#CRYP_IT_INI
 ((
uöt32_t
)
CRYP_IMSCR_INIM
Ë

	)

227 
	#CRYP_IT_OUTI
 ((
uöt32_t
)
CRYP_IMSCR_OUTIM
Ë

	)

235 
	#CRYP_FLAG_BUSY
 ((
uöt32_t
)0x00000010Ë

	)

239 
	#CRYP_FLAG_IFEM
 ((
uöt32_t
)0x00000001Ë

	)

240 
	#CRYP_FLAG_IFNF
 ((
uöt32_t
)0x00000002Ë

	)

241 
	#CRYP_FLAG_OFNE
 ((
uöt32_t
)0x00000004Ë

	)

242 
	#CRYP_FLAG_OFFU
 ((
uöt32_t
)0x00000008Ë

	)

243 
	#CRYP_FLAG_OUTRIS
 ((
uöt32_t
)0x01000002Ë

	)

245 
	#CRYP_FLAG_INRIS
 ((
uöt32_t
)0x01000001Ë

	)

264 
	#__HAL_CRYP_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_CRYP_STATE_RESET
)

	)

271 
	#__HAL_CRYP_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
CRYP_CR_CRYPEN
)

	)

272 
	#__HAL_CRYP_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~
CRYP_CR_CRYPEN
)

	)

279 
	#__HAL_CRYP_FIFO_FLUSH
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
CRYP_CR_FFLUSH
)

	)

287 
	#__HAL_CRYP_SET_MODE
(
__HANDLE__
, 
MODE
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
uöt32_t
)(MODE))

	)

304 
	#__HAL_CRYP_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((
uöt8_t
)((__FLAG__Ë>> 24)Ë=0x01)?((((__HANDLE__)->
In°™˚
->
RISR
Ë& ((__FLAG__Ë& 
CRYP_FLAG_MASK
)) == ((__FLAG__) & CRYP_FLAG_MASK)): \

305 ((((
__HANDLE__
)->
In°™˚
->
RISR
Ë& ((
__FLAG__
Ë& 
CRYP_FLAG_MASK
)Ë=((__FLAG__Ë& CRYP_FLAG_MASK)))

	)

315 
	#__HAL_CRYP_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
MISR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

323 
	#__HAL_CRYP_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
IMSCR
Ë|(__INTERRUPT__))

	)

331 
	#__HAL_CRYP_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
IMSCR
Ë&~(__INTERRUPT__))

	)

338 
	~"°m32f4xx_hÆ_¸yp_ex.h
"

348 
HAL_SètusTy≥Def
 
HAL_CRYP_Inô
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

349 
HAL_SètusTy≥Def
 
HAL_CRYP_DeInô
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

350 
HAL_CRYP_M•Inô
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

351 
HAL_CRYP_M•DeInô
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

360 
HAL_SètusTy≥Def
 
HAL_CRYP_AESECB_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

361 
HAL_SètusTy≥Def
 
HAL_CRYP_AESECB_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
);

362 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCBC_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

363 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCBC_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
);

364 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCTR_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

365 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCTR_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
);

368 
HAL_SètusTy≥Def
 
HAL_CRYP_AESECB_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

369 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCBC_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

370 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCTR_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

371 
HAL_SètusTy≥Def
 
HAL_CRYP_AESECB_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

372 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCTR_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

373 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCBC_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

376 
HAL_SètusTy≥Def
 
HAL_CRYP_AESECB_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

377 
HAL_SètusTy≥Def
 
HAL_CRYP_AESECB_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

378 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCBC_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

379 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCBC_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

380 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCTR_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

381 
HAL_SètusTy≥Def
 
HAL_CRYP_AESCTR_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

390 
HAL_SètusTy≥Def
 
HAL_CRYP_DESECB_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

391 
HAL_SètusTy≥Def
 
HAL_CRYP_DESCBC_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

392 
HAL_SètusTy≥Def
 
HAL_CRYP_DESECB_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

393 
HAL_SètusTy≥Def
 
HAL_CRYP_DESCBC_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

396 
HAL_SètusTy≥Def
 
HAL_CRYP_DESECB_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

397 
HAL_SètusTy≥Def
 
HAL_CRYP_DESECB_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

398 
HAL_SètusTy≥Def
 
HAL_CRYP_DESCBC_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

399 
HAL_SètusTy≥Def
 
HAL_CRYP_DESCBC_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

402 
HAL_SètusTy≥Def
 
HAL_CRYP_DESECB_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

403 
HAL_SètusTy≥Def
 
HAL_CRYP_DESECB_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

404 
HAL_SètusTy≥Def
 
HAL_CRYP_DESCBC_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

405 
HAL_SètusTy≥Def
 
HAL_CRYP_DESCBC_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

414 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESECB_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

415 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESCBC_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

416 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESECB_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
);

417 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESCBC_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
);

420 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESECB_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

421 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESECB_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

422 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESCBC_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

423 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESCBC_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

426 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESECB_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

427 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESECB_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

428 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESCBC_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

429 
HAL_SètusTy≥Def
 
HAL_CRYP_TDESCBC_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

437 
HAL_CRYP_InC∂tCÆlback
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

438 
HAL_CRYP_OutC∂tCÆlback
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

439 
HAL_CRYP_Eº‹CÆlback
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

447 
HAL_CRYP_IRQH™dÀr
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

455 
HAL_CRYP_STATETy≥Def
 
HAL_CRYP_GëSèã
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

486 
	#CRYP_FLAG_MASK
 ((
uöt32_t
)0x0000001F)

	)

496 
	#IS_CRYP_KEYSIZE
(
__KEYSIZE__
Ë(((__KEYSIZE__Ë=
CRYP_KEYSIZE_128B
) || \

497 ((
__KEYSIZE__
Ë=
CRYP_KEYSIZE_192B
) || \

498 ((
__KEYSIZE__
Ë=
CRYP_KEYSIZE_256B
))

	)

501 
	#IS_CRYP_DATATYPE
(
__DATATYPE__
Ë(((__DATATYPE__Ë=
CRYP_DATATYPE_32B
) || \

502 ((
__DATATYPE__
Ë=
CRYP_DATATYPE_16B
) || \

503 ((
__DATATYPE__
Ë=
CRYP_DATATYPE_8B
) || \

504 ((
__DATATYPE__
Ë=
CRYP_DATATYPE_1B
))

	)

530 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_cryp_ex.h

39 #i‚de‡
__STM32F4xx_HAL_CRYP_EX_H


40 
	#__STM32F4xx_HAL_CRYP_EX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F437xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

68 
	#CRYP_CR_ALGOMODE_AES_GCM_ENCRYPT
 ((
uöt32_t
)0x00080000)

	)

69 
	#CRYP_CR_ALGOMODE_AES_GCM_DECRYPT
 ((
uöt32_t
)0x00080004)

	)

70 
	#CRYP_CR_ALGOMODE_AES_CCM_ENCRYPT
 ((
uöt32_t
)0x00080008)

	)

71 
	#CRYP_CR_ALGOMODE_AES_CCM_DECRYPT
 ((
uöt32_t
)0x0008000C)

	)

81 
	#CRYP_PHASE_INIT
 ((
uöt32_t
)0x00000000)

	)

82 
	#CRYP_PHASE_HEADER
 
CRYP_CR_GCM_CCMPH_0


	)

83 
	#CRYP_PHASE_PAYLOAD
 
CRYP_CR_GCM_CCMPH_1


	)

84 
	#CRYP_PHASE_FINAL
 
CRYP_CR_GCM_CCMPH


	)

105 
	#__HAL_CRYP_SET_PHASE
(
__HANDLE__
, 
__PHASE__
Ëdo{(__HANDLE__)->
In°™˚
->
CR
 &(
uöt32_t
)(~
CRYP_CR_GCM_CCMPH
);\

106 (
__HANDLE__
)->
In°™˚
->
CR
 |(
uöt32_t
)(
__PHASE__
);\

107 }0)

	)

123 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESGCM_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

124 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESGCM_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
);

125 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESGCM_Föish
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Size
, 
uöt8_t
 *
AuthTag
, uöt32_à
Timeout
);

126 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESCCM_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
);

127 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESCCM_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
);

128 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESCCM_Föish
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
AuthTag
, 
uöt32_t
 
Timeout
);

131 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESGCM_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

132 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESGCM_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

133 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESCCM_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

134 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESCCM_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

137 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESGCM_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

138 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESGCM_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

139 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESCCM_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
);

140 
HAL_SètusTy≥Def
 
HAL_CRYPEx_AESCCM_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
);

150 
HAL_CRYPEx_GCMCCM_IRQH™dÀr
(
CRYP_H™dÀTy≥Def
 *
h¸yp
);

215 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dac.h

39 #i‚de‡
__STM32F4xx_HAL_DAC_H


40 
	#__STM32F4xx_HAL_DAC_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

47 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

48 
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
) ||\

49 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

52 
	~"°m32f4xx_hÆ_def.h
"

72 
HAL_DAC_STATE_RESET
 = 0x00,

73 
HAL_DAC_STATE_READY
 = 0x01,

74 
HAL_DAC_STATE_BUSY
 = 0x02,

75 
HAL_DAC_STATE_TIMEOUT
 = 0x03,

76 
HAL_DAC_STATE_ERROR
 = 0x04

77 }
	tHAL_DAC_SèãTy≥Def
;

84 
DAC_Ty≥Def
 *
In°™˚
;

86 
__IO
 
HAL_DAC_SèãTy≥Def
 
Sèã
;

88 
HAL_LockTy≥Def
 
Lock
;

90 
DMA_H™dÀTy≥Def
 *
DMA_H™dÀ1
;

92 
DMA_H™dÀTy≥Def
 *
DMA_H™dÀ2
;

94 
__IO
 
uöt32_t
 
Eº‹Code
;

96 }
	tDAC_H™dÀTy≥Def
;

103 
uöt32_t
 
DAC_Triggî
;

106 
uöt32_t
 
DAC_OuçutBuf„r
;

108 }
	tDAC_Ch™√lC⁄fTy≥Def
;

121 
	#HAL_DAC_ERROR_NONE
 0x00

	)

122 
	#HAL_DAC_ERROR_DMAUNDERRUNCH1
 0x01

	)

123 
	#HAL_DAC_ERROR_DMAUNDERRUNCH2
 0x02

	)

124 
	#HAL_DAC_ERROR_DMA
 0x04

	)

133 
	#DAC_TRIGGER_NONE
 ((
uöt32_t
)0x00000000Ë

	)

135 
	#DAC_TRIGGER_T2_TRGO
 ((
uöt32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TEN1
)Ë

	)

136 
	#DAC_TRIGGER_T4_TRGO
 ((
uöt32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)Ë

	)

137 
	#DAC_TRIGGER_T5_TRGO
 ((
uöt32_t
)(
DAC_CR_TSEL1_1
 | 
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)Ë

	)

138 
	#DAC_TRIGGER_T6_TRGO
 ((
uöt32_t
)
DAC_CR_TEN1
Ë

	)

139 
	#DAC_TRIGGER_T7_TRGO
 ((
uöt32_t
)(
DAC_CR_TSEL1_1
 | 
DAC_CR_TEN1
)Ë

	)

140 
	#DAC_TRIGGER_T8_TRGO
 ((
uöt32_t
)(
DAC_CR_TSEL1_0
 | 
DAC_CR_TEN1
)Ë

	)

142 
	#DAC_TRIGGER_EXT_IT9
 ((
uöt32_t
)(
DAC_CR_TSEL1_2
 | 
DAC_CR_TSEL1_1
 | 
DAC_CR_TEN1
)Ë

	)

143 
	#DAC_TRIGGER_SOFTWARE
 ((
uöt32_t
)(
DAC_CR_TSEL1
 | 
DAC_CR_TEN1
)Ë

	)

151 
	#DAC_OUTPUTBUFFER_ENABLE
 ((
uöt32_t
)0x00000000)

	)

152 
	#DAC_OUTPUTBUFFER_DISABLE
 ((
uöt32_t
)
DAC_CR_BOFF1
)

	)

160 
	#DAC_CHANNEL_1
 ((
uöt32_t
)0x00000000)

	)

161 
	#DAC_CHANNEL_2
 ((
uöt32_t
)0x00000010)

	)

169 
	#DAC_ALIGN_12B_R
 ((
uöt32_t
)0x00000000)

	)

170 
	#DAC_ALIGN_12B_L
 ((
uöt32_t
)0x00000004)

	)

171 
	#DAC_ALIGN_8B_R
 ((
uöt32_t
)0x00000008)

	)

179 
	#DAC_FLAG_DMAUDR1
 ((
uöt32_t
)
DAC_SR_DMAUDR1
)

	)

180 
	#DAC_FLAG_DMAUDR2
 ((
uöt32_t
)
DAC_SR_DMAUDR2
)

	)

188 
	#DAC_IT_DMAUDR1
 ((
uöt32_t
)
DAC_SR_DMAUDR1
)

	)

189 
	#DAC_IT_DMAUDR2
 ((
uöt32_t
)
DAC_SR_DMAUDR2
)

	)

207 
	#__HAL_DAC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_DAC_STATE_RESET
)

	)

214 
	#__HAL_DAC_ENABLE
(
__HANDLE__
, 
__DAC_Ch™√l__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
DAC_CR_EN1
 << (__DAC_Ch™√l__)))

	)

221 
	#__HAL_DAC_DISABLE
(
__HANDLE__
, 
__DAC_Ch™√l__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
DAC_CR_EN1
 << (__DAC_Ch™√l__)))

	)

228 
	#__HAL_DAC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
CR
Ë|(__INTERRUPT__))

	)

235 
	#__HAL_DAC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
CR
Ë&~(__INTERRUPT__))

	)

245 
	#__HAL_DAC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
CR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

255 
	#__HAL_DAC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((__HANDLE__)->
In°™˚
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

265 
	#__HAL_DAC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
Ë(__FLAG__))

	)

271 
	~"°m32f4xx_hÆ_dac_ex.h
"

282 
HAL_SètusTy≥Def
 
	`HAL_DAC_Inô
(
DAC_H™dÀTy≥Def
* 
hdac
);

283 
HAL_SètusTy≥Def
 
	`HAL_DAC_DeInô
(
DAC_H™dÀTy≥Def
* 
hdac
);

284 
	`HAL_DAC_M•Inô
(
DAC_H™dÀTy≥Def
* 
hdac
);

285 
	`HAL_DAC_M•DeInô
(
DAC_H™dÀTy≥Def
* 
hdac
);

294 
HAL_SètusTy≥Def
 
	`HAL_DAC_Sèπ
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
);

295 
HAL_SètusTy≥Def
 
	`HAL_DAC_St›
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
);

296 
HAL_SètusTy≥Def
 
	`HAL_DAC_Sèπ_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_t* 
pD©a
, uöt32_à
Lígth
, uöt32_à
Alignmít
);

297 
HAL_SètusTy≥Def
 
	`HAL_DAC_St›_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
);

298 
uöt32_t
 
	`HAL_DAC_GëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, uöt32_à
Ch™√l
);

307 
HAL_SètusTy≥Def
 
	`HAL_DAC_C⁄figCh™√l
(
DAC_H™dÀTy≥Def
* 
hdac
, 
DAC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

308 
HAL_SètusTy≥Def
 
	`HAL_DAC_SëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Alignmít
, uöt32_à
D©a
);

317 
HAL_DAC_SèãTy≥Def
 
	`HAL_DAC_GëSèã
(
DAC_H™dÀTy≥Def
* 
hdac
);

318 
	`HAL_DAC_IRQH™dÀr
(
DAC_H™dÀTy≥Def
* 
hdac
);

319 
uöt32_t
 
	`HAL_DAC_GëEº‹
(
DAC_H™dÀTy≥Def
 *
hdac
);

321 
	`HAL_DAC_C⁄vC∂tCÆlbackCh1
(
DAC_H™dÀTy≥Def
* 
hdac
);

322 
	`HAL_DAC_C⁄vHÆfC∂tCÆlbackCh1
(
DAC_H™dÀTy≥Def
* 
hdac
);

323 
	`HAL_DAC_Eº‹CÆlbackCh1
(
DAC_H™dÀTy≥Def
 *
hdac
);

324 
	`HAL_DAC_DMAUndîrunCÆlbackCh1
(
DAC_H™dÀTy≥Def
 *
hdac
);

347 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

348 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_ALIGN_12B_R
) || \

349 ((
ALIGN
Ë=
DAC_ALIGN_12B_L
) || \

350 ((
ALIGN
Ë=
DAC_ALIGN_8B_R
))

	)

351 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_CHANNEL_1
) || \

352 ((
CHANNEL
Ë=
DAC_CHANNEL_2
))

	)

353 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OUTPUTBUFFER_ENABLE
) || \

354 ((
STATE
Ë=
DAC_OUTPUTBUFFER_DISABLE
))

	)

356 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_TRIGGER_NONE
) || \

357 ((
TRIGGER
Ë=
DAC_TRIGGER_T2_TRGO
) || \

358 ((
TRIGGER
Ë=
DAC_TRIGGER_T8_TRGO
) || \

359 ((
TRIGGER
Ë=
DAC_TRIGGER_T7_TRGO
) || \

360 ((
TRIGGER
Ë=
DAC_TRIGGER_T5_TRGO
) || \

361 ((
TRIGGER
Ë=
DAC_TRIGGER_T6_TRGO
) || \

362 ((
TRIGGER
Ë=
DAC_TRIGGER_T4_TRGO
) || \

363 ((
TRIGGER
Ë=
DAC_TRIGGER_EXT_IT9
) || \

364 ((
TRIGGER
Ë=
DAC_TRIGGER_SOFTWARE
))

	)

370 
	#DAC_DHR12R1_ALIGNMENT
(
__ALIGNMENT__
Ë(((
uöt32_t
)0x00000008Ë+ (__ALIGNMENT__))

	)

376 
	#DAC_DHR12R2_ALIGNMENT
(
__ALIGNMENT__
Ë(((
uöt32_t
)0x00000014Ë+ (__ALIGNMENT__))

	)

382 
	#DAC_DHR12RD_ALIGNMENT
(
__ALIGNMENT__
Ë(((
uöt32_t
)0x00000020Ë+ (__ALIGNMENT__))

	)

396 
STM32F427xx
 || 
STM32F437xx
 || 
STM32F429xx
 || 
STM32F439xx
 ||\

397 
STM32F410xx
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

407 #ifde‡
__˝lu•lus


408 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dac_ex.h

39 #i‚de‡
__STM32F4xx_HAL_DAC_EX_H


40 
	#__STM32F4xx_HAL_DAC_EX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

47 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

48 
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
) ||\

49 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

52 
	~"°m32f4xx_hÆ_def.h
"

71 
	#DAC_LFSRUNMASK_BIT0
 ((
uöt32_t
)0x00000000Ë

	)

72 
	#DAC_LFSRUNMASK_BITS1_0
 ((
uöt32_t
)
DAC_CR_MAMP1_0
Ë

	)

73 
	#DAC_LFSRUNMASK_BITS2_0
 ((
uöt32_t
)
DAC_CR_MAMP1_1
Ë

	)

74 
	#DAC_LFSRUNMASK_BITS3_0
 ((
uöt32_t
)
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
)

	)

75 
	#DAC_LFSRUNMASK_BITS4_0
 ((
uöt32_t
)
DAC_CR_MAMP1_2
Ë

	)

76 
	#DAC_LFSRUNMASK_BITS5_0
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_0
Ë

	)

77 
	#DAC_LFSRUNMASK_BITS6_0
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
Ë

	)

78 
	#DAC_LFSRUNMASK_BITS7_0
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

79 
	#DAC_LFSRUNMASK_BITS8_0
 ((
uöt32_t
)
DAC_CR_MAMP1_3
Ë

	)

80 
	#DAC_LFSRUNMASK_BITS9_0
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_0
Ë

	)

81 
	#DAC_LFSRUNMASK_BITS10_0
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
Ë

	)

82 
	#DAC_LFSRUNMASK_BITS11_0
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

83 
	#DAC_TRIANGLEAMPLITUDE_1
 ((
uöt32_t
)0x00000000Ë

	)

84 
	#DAC_TRIANGLEAMPLITUDE_3
 ((
uöt32_t
)
DAC_CR_MAMP1_0
Ë

	)

85 
	#DAC_TRIANGLEAMPLITUDE_7
 ((
uöt32_t
)
DAC_CR_MAMP1_1
Ë

	)

86 
	#DAC_TRIANGLEAMPLITUDE_15
 ((
uöt32_t
)
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

87 
	#DAC_TRIANGLEAMPLITUDE_31
 ((
uöt32_t
)
DAC_CR_MAMP1_2
Ë

	)

88 
	#DAC_TRIANGLEAMPLITUDE_63
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_0
Ë

	)

89 
	#DAC_TRIANGLEAMPLITUDE_127
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
Ë

	)

90 
	#DAC_TRIANGLEAMPLITUDE_255
 ((
uöt32_t
)
DAC_CR_MAMP1_2
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

91 
	#DAC_TRIANGLEAMPLITUDE_511
 ((
uöt32_t
)
DAC_CR_MAMP1_3
Ë

	)

92 
	#DAC_TRIANGLEAMPLITUDE_1023
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_0
Ë

	)

93 
	#DAC_TRIANGLEAMPLITUDE_2047
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
Ë

	)

94 
	#DAC_TRIANGLEAMPLITUDE_4095
 ((
uöt32_t
)
DAC_CR_MAMP1_3
 | 
DAC_CR_MAMP1_1
 | 
DAC_CR_MAMP1_0
Ë

	)

113 
uöt32_t
 
	`HAL_DACEx_DuÆGëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
);

114 
HAL_SètusTy≥Def
 
	`HAL_DACEx_TrüngÀWaveGíî©e
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Am∂ôude
);

115 
HAL_SètusTy≥Def
 
	`HAL_DACEx_Noi£WaveGíî©e
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Am∂ôude
);

116 
HAL_SètusTy≥Def
 
	`HAL_DACEx_DuÆSëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Alignmít
, uöt32_à
D©a1
, uöt32_à
D©a2
);

118 
	`HAL_DACEx_C⁄vC∂tCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
);

119 
	`HAL_DACEx_C⁄vHÆfC∂tCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
);

120 
	`HAL_DACEx_Eº‹CÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
);

121 
	`HAL_DACEx_DMAUndîrunCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
);

144 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUNMASK_BIT0
) || \

145 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS1_0
) || \

146 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS2_0
) || \

147 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS3_0
) || \

148 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS4_0
) || \

149 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS5_0
) || \

150 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS6_0
) || \

151 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS7_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS8_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS9_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS10_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUNMASK_BITS11_0
) || \

156 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_1
) || \

157 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_3
) || \

158 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_7
) || \

159 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_15
) || \

160 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_31
) || \

161 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_63
) || \

162 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_127
) || \

163 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_255
) || \

164 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_511
) || \

165 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_1023
) || \

166 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_2047
) || \

167 ((
VALUE
Ë=
DAC_TRIANGLEAMPLITUDE_4095
))

	)

176 
	`DAC_DMAC⁄vC∂tCh2
(
DMA_H™dÀTy≥Def
 *
hdma
);

177 
	`DAC_DMAEº‹Ch2
(
DMA_H™dÀTy≥Def
 *
hdma
);

178 
	`DAC_DMAHÆfC⁄vC∂tCh2
(
DMA_H™dÀTy≥Def
 *
hdma
);

183 
STM32F427xx
 || 
STM32F437xx
 || 
STM32F429xx
 || 
STM32F439xx
 ||\

184 
STM32F410xx
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

194 #ifde‡
__˝lu•lus


195 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dcmi.h

39 #i‚de‡
__STM32F4xx_HAL_DCMI_H


40 
	#__STM32F4xx_HAL_DCMI_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F407xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) ||\

47 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

48 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_hÆ_def.h
"

54 
	~"°m32f4xx_hÆ_dcmi_ex.h
"

74 
DCMI_ERROR_SYNC
 = 1,

75 
DCMI_OVERRUN
 = 2,

76 }
	tDCMI_Eº‹Ty≥Def
;

84 
HAL_DCMI_STATE_RESET
 = 0x00,

85 
HAL_DCMI_STATE_READY
 = 0x01,

86 
HAL_DCMI_STATE_BUSY
 = 0x02,

87 
HAL_DCMI_STATE_TIMEOUT
 = 0x03,

88 
HAL_DCMI_STATE_ERROR
 = 0x04

89 }
	tHAL_DCMI_SèãTy≥Def
;

96 
DCMI_Ty≥Def
 *
In°™˚
;

98 
DCMI_InôTy≥Def
 
Inô
;

100 
HAL_LockTy≥Def
 
Lock
;

102 
__IO
 
HAL_DCMI_SèãTy≥Def
 
Sèã
;

104 
__IO
 
uöt32_t
 
X„rCou¡
;

106 
__IO
 
uöt32_t
 
X„rSize
;

108 
uöt32_t
 
X„rTøns„rNumbî
;

110 
uöt32_t
 
pBuffPå
;

112 
DMA_H™dÀTy≥Def
 *
DMA_H™dÀ
;

114 
__IO
 
uöt32_t
 
Eº‹Code
;

116 }
	tDCMI_H™dÀTy≥Def
;

129 
	#HAL_DCMI_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

130 
	#HAL_DCMI_ERROR_OVF
 ((
uöt32_t
)0x00000001Ë

	)

131 
	#HAL_DCMI_ERROR_SYNC
 ((
uöt32_t
)0x00000002Ë

	)

132 
	#HAL_DCMI_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000020Ë

	)

140 
	#DCMI_MODE_CONTINUOUS
 ((
uöt32_t
)0x00000000Ë

	)

142 
	#DCMI_MODE_SNAPSHOT
 ((
uöt32_t
)
DCMI_CR_CM
Ë

	)

151 
	#DCMI_SYNCHRO_HARDWARE
 ((
uöt32_t
)0x00000000Ë

	)

153 
	#DCMI_SYNCHRO_EMBEDDED
 ((
uöt32_t
)
DCMI_CR_ESS
Ë

	)

163 
	#DCMI_PCKPOLARITY_FALLING
 ((
uöt32_t
)0x00000000Ë

	)

164 
	#DCMI_PCKPOLARITY_RISING
 ((
uöt32_t
)
DCMI_CR_PCKPOL
Ë

	)

173 
	#DCMI_VSPOLARITY_LOW
 ((
uöt32_t
)0x00000000Ë

	)

174 
	#DCMI_VSPOLARITY_HIGH
 ((
uöt32_t
)
DCMI_CR_VSPOL
Ë

	)

183 
	#DCMI_HSPOLARITY_LOW
 ((
uöt32_t
)0x00000000Ë

	)

184 
	#DCMI_HSPOLARITY_HIGH
 ((
uöt32_t
)
DCMI_CR_HSPOL
Ë

	)

193 
	#DCMI_JPEG_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

194 
	#DCMI_JPEG_ENABLE
 ((
uöt32_t
)
DCMI_CR_JPEG
Ë

	)

203 
	#DCMI_CR_ALL_FRAME
 ((
uöt32_t
)0x00000000Ë

	)

204 
	#DCMI_CR_ALTERNATE_2_FRAME
 ((
uöt32_t
)
DCMI_CR_FCRC_0
Ë

	)

205 
	#DCMI_CR_ALTERNATE_4_FRAME
 ((
uöt32_t
)
DCMI_CR_FCRC_1
Ë

	)

214 
	#DCMI_EXTEND_DATA_8B
 ((
uöt32_t
)0x00000000Ë

	)

215 
	#DCMI_EXTEND_DATA_10B
 ((
uöt32_t
)
DCMI_CR_EDM_0
Ë

	)

216 
	#DCMI_EXTEND_DATA_12B
 ((
uöt32_t
)
DCMI_CR_EDM_1
Ë

	)

217 
	#DCMI_EXTEND_DATA_14B
 ((
uöt32_t
)(
DCMI_CR_EDM_0
 | 
DCMI_CR_EDM_1
)Ë

	)

226 
	#DCMI_WINDOW_COORDINATE
 ((
uöt32_t
)0x3FFFË

	)

235 
	#DCMI_WINDOW_HEIGHT
 ((
uöt32_t
)0x1FFFË

	)

244 
	#DCMI_IT_FRAME
 ((
uöt32_t
)
DCMI_IER_FRAME_IE
)

	)

245 
	#DCMI_IT_OVF
 ((
uöt32_t
)
DCMI_IER_OVF_IE
)

	)

246 
	#DCMI_IT_ERR
 ((
uöt32_t
)
DCMI_IER_ERR_IE
)

	)

247 
	#DCMI_IT_VSYNC
 ((
uöt32_t
)
DCMI_IER_VSYNC_IE
)

	)

248 
	#DCMI_IT_LINE
 ((
uöt32_t
)
DCMI_IER_LINE_IE
)

	)

260 
	#DCMI_FLAG_HSYNC
 ((
uöt32_t
)0x2001)

	)

261 
	#DCMI_FLAG_VSYNC
 ((
uöt32_t
)0x2002)

	)

262 
	#DCMI_FLAG_FNE
 ((
uöt32_t
)0x2004)

	)

266 
	#DCMI_FLAG_FRAMERI
 ((
uöt32_t
)
DCMI_RISR_FRAME_RIS
)

	)

267 
	#DCMI_FLAG_OVFRI
 ((
uöt32_t
)
DCMI_RISR_OVF_RIS
)

	)

268 
	#DCMI_FLAG_ERRRI
 ((
uöt32_t
)
DCMI_RISR_ERR_RIS
)

	)

269 
	#DCMI_FLAG_VSYNCRI
 ((
uöt32_t
)
DCMI_RISR_VSYNC_RIS
)

	)

270 
	#DCMI_FLAG_LINERI
 ((
uöt32_t
)
DCMI_RISR_LINE_RIS
)

	)

274 
	#DCMI_FLAG_FRAMEMI
 ((
uöt32_t
)0x1001)

	)

275 
	#DCMI_FLAG_OVFMI
 ((
uöt32_t
)0x1002)

	)

276 
	#DCMI_FLAG_ERRMI
 ((
uöt32_t
)0x1004)

	)

277 
	#DCMI_FLAG_VSYNCMI
 ((
uöt32_t
)0x1008)

	)

278 
	#DCMI_FLAG_LINEMI
 ((
uöt32_t
)0x1010)

	)

296 
	#__HAL_DCMI_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_DCMI_STATE_RESET
)

	)

303 
	#__HAL_DCMI_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
DCMI_CR_ENABLE
)

	)

310 
	#__HAL_DCMI_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
DCMI_CR_ENABLE
))

	)

325 
	#__HAL_DCMI_GET_FLAG
(
__HANDLE__
, 
__FLAG__
)\

326 ((((
__FLAG__
Ë& 0x3000Ë=0x0)? ((
__HANDLE__
)->
In°™˚
->
RISR
 & (__FLAG__)) :\

327 (((
__FLAG__
Ë& 0x2000Ë=0x0)? ((
__HANDLE__
)->
In°™˚
->
MISR
 & (__FLAG__)Ë: ((__HANDLE__)->In°™˚->
SR
 & (__FLAG__)))

	)

341 
	#__HAL_DCMI_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ICR
 = (__FLAG__))

	)

355 
	#__HAL_DCMI_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 |(__INTERRUPT__))

	)

369 
	#__HAL_DCMI_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 &~(__INTERRUPT__))

	)

383 
	#__HAL_DCMI_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
MISR
 & (__INTERRUPT__))

	)

399 
HAL_SètusTy≥Def
 
	`HAL_DCMI_Inô
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

400 
HAL_SètusTy≥Def
 
	`HAL_DCMI_DeInô
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

401 
	`HAL_DCMI_M•Inô
(
DCMI_H™dÀTy≥Def
* 
hdcmi
);

402 
	`HAL_DCMI_M•DeInô
(
DCMI_H™dÀTy≥Def
* 
hdcmi
);

412 
HAL_SètusTy≥Def
 
	`HAL_DCMI_Sèπ_DMA
(
DCMI_H™dÀTy≥Def
* 
hdcmi
, 
uöt32_t
 
DCMI_Mode
, uöt32_à
pD©a
, uöt32_à
Lígth
);

413 
HAL_SètusTy≥Def
 
	`HAL_DCMI_St›
(
DCMI_H™dÀTy≥Def
* 
hdcmi
);

414 
	`HAL_DCMI_Eº‹CÆlback
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

415 
	`HAL_DCMI_LöeEvítCÆlback
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

416 
	`HAL_DCMI_FømeEvítCÆlback
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

417 
	`HAL_DCMI_VsyncEvítCÆlback
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

418 
	`HAL_DCMI_IRQH™dÀr
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

427 
HAL_SètusTy≥Def
 
	`HAL_DCMI_C⁄figCROP
(
DCMI_H™dÀTy≥Def
 *
hdcmi
, 
uöt32_t
 
X0
, uöt32_à
Y0
, uöt32_à
XSize
, uöt32_à
YSize
);

428 
HAL_SètusTy≥Def
 
	`HAL_DCMI_E«bÀCROP
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

429 
HAL_SètusTy≥Def
 
	`HAL_DCMI_DißbÀCROP
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

438 
HAL_DCMI_SèãTy≥Def
 
	`HAL_DCMI_GëSèã
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

439 
uöt32_t
 
	`HAL_DCMI_GëEº‹
(
DCMI_H™dÀTy≥Def
 *
hdcmi
);

455 
	#IS_DCMI_CAPTURE_MODE
(
MODE
)(((MODEË=
DCMI_MODE_CONTINUOUS
) || \

456 ((
MODE
Ë=
DCMI_MODE_SNAPSHOT
))

	)

458 
	#IS_DCMI_SYNCHRO
(
MODE
)(((MODEË=
DCMI_SYNCHRO_HARDWARE
) || \

459 ((
MODE
Ë=
DCMI_SYNCHRO_EMBEDDED
))

	)

461 
	#IS_DCMI_PCKPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_PCKPOLARITY_FALLING
) || \

462 ((
POLARITY
Ë=
DCMI_PCKPOLARITY_RISING
))

	)

464 
	#IS_DCMI_VSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_VSPOLARITY_LOW
) || \

465 ((
POLARITY
Ë=
DCMI_VSPOLARITY_HIGH
))

	)

467 
	#IS_DCMI_HSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_HSPOLARITY_LOW
) || \

468 ((
POLARITY
Ë=
DCMI_HSPOLARITY_HIGH
))

	)

470 
	#IS_DCMI_MODE_JPEG
(
JPEG_MODE
)(((JPEG_MODEË=
DCMI_JPEG_DISABLE
) || \

471 ((
JPEG_MODE
Ë=
DCMI_JPEG_ENABLE
))

	)

473 
	#IS_DCMI_CAPTURE_RATE
(
RATE
Ë(((RATEË=
DCMI_CR_ALL_FRAME
) || \

474 ((
RATE
Ë=
DCMI_CR_ALTERNATE_2_FRAME
) || \

475 ((
RATE
Ë=
DCMI_CR_ALTERNATE_4_FRAME
))

	)

477 
	#IS_DCMI_EXTENDED_DATA
(
DATA
)(((DATAË=
DCMI_EXTEND_DATA_8B
) || \

478 ((
DATA
Ë=
DCMI_EXTEND_DATA_10B
) || \

479 ((
DATA
Ë=
DCMI_EXTEND_DATA_12B
) || \

480 ((
DATA
Ë=
DCMI_EXTEND_DATA_14B
))

	)

482 
	#IS_DCMI_WINDOW_COORDINATE
(
COORDINATE
Ë((COORDINATEË<
DCMI_WINDOW_COORDINATE
)

	)

484 
	#IS_DCMI_WINDOW_HEIGHT
(
HEIGHT
Ë((HEIGHTË<
DCMI_WINDOW_HEIGHT
)

	)

500 
STM32F429xx
 || 
STM32F439xx
 || 
STM32F446xx
 || 
STM32F469xx
 ||\

501 
STM32F479xx
 */

511 #ifde‡
__˝lu•lus


512 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dcmi_ex.h

39 #i‚de‡
__STM32F4xx_HAL_DCMI_EX_H


40 
	#__STM32F4xx_HAL_DCMI_EX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F407xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) ||\

47 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

48 
	$deföed
(
STM32F479xx
)

51 
	~"°m32f4xx_hÆ_def.h
"

72 
uöt8_t
 
FømeSèπCode
;

73 
uöt8_t
 
LöeSèπCode
;

74 
uöt8_t
 
LöeEndCode
;

75 
uöt8_t
 
FømeEndCode
;

76 }
	tDCMI_CodesInôTy≥Def
;

83 
uöt32_t
 
SynchroMode
;

86 
uöt32_t
 
PCKPﬁ¨ôy
;

89 
uöt32_t
 
VSPﬁ¨ôy
;

92 
uöt32_t
 
HSPﬁ¨ôy
;

95 
uöt32_t
 
C≠tuªR©e
;

98 
uöt32_t
 
ExãndedD©aMode
;

101 
DCMI_CodesInôTy≥Def
 
Syn¸oCode
;

103 
uöt32_t
 
JPEGMode
;

105 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

106 
uöt32_t
 
ByãSñe˘Mode
;

109 
uöt32_t
 
ByãSñe˘Sèπ
;

112 
uöt32_t
 
LöeSñe˘Mode
;

115 
uöt32_t
 
LöeSñe˘Sèπ
;

119 }
	tDCMI_InôTy≥Def
;

126 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

134 
	#DCMI_BSM_ALL
 ((
uöt32_t
)0x00000000Ë

	)

135 
	#DCMI_BSM_OTHER
 ((
uöt32_t
)
DCMI_CR_BSM_0
Ë

	)

136 
	#DCMI_BSM_ALTERNATE_4
 ((
uöt32_t
)
DCMI_CR_BSM_1
Ë

	)

137 
	#DCMI_BSM_ALTERNATE_2
 ((
uöt32_t
)(
DCMI_CR_BSM_0
 | 
DCMI_CR_BSM_1
)Ë

	)

146 
	#DCMI_OEBS_ODD
 ((
uöt32_t
)0x00000000Ë

	)

147 
	#DCMI_OEBS_EVEN
 ((
uöt32_t
)
DCMI_CR_OEBS
Ë

	)

156 
	#DCMI_LSM_ALL
 ((
uöt32_t
)0x00000000Ë

	)

157 
	#DCMI_LSM_ALTERNATE_2
 ((
uöt32_t
)
DCMI_CR_LSM
Ë

	)

166 
	#DCMI_OELS_ODD
 ((
uöt32_t
)0x00000000Ë

	)

167 
	#DCMI_OELS_EVEN
 ((
uöt32_t
)
DCMI_CR_OELS
Ë

	)

187 
	#IS_DCMI_BYTE_SELECT_MODE
(
MODE
)(((MODEË=
DCMI_BSM_ALL
) || \

188 ((
MODE
Ë=
DCMI_BSM_OTHER
) || \

189 ((
MODE
Ë=
DCMI_BSM_ALTERNATE_4
) || \

190 ((
MODE
Ë=
DCMI_BSM_ALTERNATE_2
))

	)

192 
	#IS_DCMI_BYTE_SELECT_START
(
POLARITY
)(((POLARITYË=
DCMI_OEBS_ODD
) || \

193 ((
POLARITY
Ë=
DCMI_OEBS_EVEN
))

	)

195 
	#IS_DCMI_LINE_SELECT_MODE
(
MODE
)(((MODEË=
DCMI_LSM_ALL
) || \

196 ((
MODE
Ë=
DCMI_LSM_ALTERNATE_2
))

	)

198 
	#IS_DCMI_LINE_SELECT_START
(
POLARITY
)(((POLARITYË=
DCMI_OELS_ODD
) || \

199 ((
POLARITY
Ë=
DCMI_OELS_EVEN
))

	)

207 
STM32F429xx
 || 
STM32F439xx
 || 
STM32F446xx
 || 
STM32F469xx
 ||\

208 
STM32F479xx
 */

217 #ifde‡
__˝lu•lus


218 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_def.h

40 #i‚de‡
__STM32F4xx_HAL_DEF


41 
	#__STM32F4xx_HAL_DEF


	)

43 #ifde‡
__˝lu•lus


48 
	~"°m32f4xx.h
"

49 
	~"Legacy/°m32_hÆ_Àgacy.h
"

50 
	~<°dio.h
>

59 
HAL_OK
 = 0x00,

60 
HAL_ERROR
 = 0x01,

61 
HAL_BUSY
 = 0x02,

62 
HAL_TIMEOUT
 = 0x03

63 } 
	tHAL_SètusTy≥Def
;

70 
HAL_UNLOCKED
 = 0x00,

71 
HAL_LOCKED
 = 0x01

72 } 
	tHAL_LockTy≥Def
;

75 
	#HAL_MAX_DELAY
 0xFFFFFFFF

	)

77 
	#HAL_IS_BIT_SET
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë!
RESET
)

	)

78 
	#HAL_IS_BIT_CLR
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë=
RESET
)

	)

80 
	#__HAL_LINKDMA
(
__HANDLE__
, 
__PPP_DMA_FIELD__
, 
__DMA_HANDLE__
) \

82 (
__HANDLE__
)->
__PPP_DMA_FIELD__
 = &(
__DMA_HANDLE__
); \

83 (
__DMA_HANDLE__
).
P¨ít
 = (
__HANDLE__
); \

84 } 0)

	)

86 
	#UNUSED
(
x
Ë(()(x))

	)

103 
	#__HAL_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 0)

	)

105 #i‡(
USE_RTOS
 == 1)

107 #îr‹ ì
USE_RTOS
 
should
 
be
 0 
ö
 
the
 
cuºít
 
HAL
 
ªÀa£
î

109 
	#__HAL_LOCK
(
__HANDLE__
) \

111 if((
__HANDLE__
)->
Lock
 =
HAL_LOCKED
) \

113  
HAL_BUSY
; \

117 (
__HANDLE__
)->
Lock
 = 
HAL_LOCKED
; \

119 }0)

	)

121 
	#__HAL_UNLOCK
(
__HANDLE__
) \

123 (
__HANDLE__
)->
Lock
 = 
HAL_UNLOCKED
; \

124 }0)

	)

127 #i‡ 
deföed
 ( 
__GNUC__
 )

128 #i‚de‡
__wók


129 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

131 #i‚de‡
__∑cked


132 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

138 #i‡
deföed
 (
__GNUC__
)

139 #i‚de‡
__ALIGN_END


140 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

142 #i‚de‡
__ALIGN_BEGIN


143 
	#__ALIGN_BEGIN


	)

146 #i‚de‡
__ALIGN_END


147 
	#__ALIGN_END


	)

149 #i‚de‡
__ALIGN_BEGIN


150 #i‡
deföed
 (
__CC_ARM
)

151 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

152 #ñi‡
deföed
 (
__ICCARM__
)

153 
	#__ALIGN_BEGIN


	)

162 #i‡
deföed
 ( 
__CC_ARM
 )

172 
	#__RAM_FUNC
 
HAL_SètusTy≥Def


	)

174 #ñi‡
deföed
 ( 
__ICCARM__
 )

179 
	#__RAM_FUNC
 
__ømfunc
 
HAL_SètusTy≥Def


	)

181 #ñi‡
deföed
 ( 
__GNUC__
 )

187 
	#__RAM_FUNC
 
HAL_SètusTy≥Def
 
	`__©åibuã__
((
	`£˘i⁄
(".RamFunc")))

	)

194 #i‡
deföed
 ( 
__CC_ARM
 ) || deföed ( 
__GNUC__
 )

198 
	#__NOINLINE
 
	`__©åibuã__
 ( (
noölöe
Ë)

	)

200 #ñi‡
deföed
 ( 
__ICCARM__
 )

204 
	#__NOINLINE
 
	`_Pøgma
("›timizêno_ölöe")

	)

208 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dma.h

39 #i‚de‡
__STM32F4xx_HAL_DMA_H


40 
	#__STM32F4xx_HAL_DMA_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

69 
uöt32_t
 
Ch™√l
;

72 
uöt32_t
 
Dúe˘i⁄
;

76 
uöt32_t
 
PîùhInc
;

79 
uöt32_t
 
MemInc
;

82 
uöt32_t
 
PîùhD©aAlignmít
;

85 
uöt32_t
 
MemD©aAlignmít
;

88 
uöt32_t
 
Mode
;

93 
uöt32_t
 
Pri‹ôy
;

96 
uöt32_t
 
FIFOMode
;

101 
uöt32_t
 
FIFOThªshﬁd
;

104 
uöt32_t
 
MemBur°
;

110 
uöt32_t
 
PîùhBur°
;

115 }
	tDMA_InôTy≥Def
;

123 
HAL_DMA_STATE_RESET
 = 0x00,

124 
HAL_DMA_STATE_READY
 = 0x01,

125 
HAL_DMA_STATE_READY_MEM0
 = 0x11,

126 
HAL_DMA_STATE_READY_MEM1
 = 0x21,

127 
HAL_DMA_STATE_READY_HALF_MEM0
 = 0x31,

128 
HAL_DMA_STATE_READY_HALF_MEM1
 = 0x41,

129 
HAL_DMA_STATE_BUSY
 = 0x02,

130 
HAL_DMA_STATE_BUSY_MEM0
 = 0x12,

131 
HAL_DMA_STATE_BUSY_MEM1
 = 0x22,

132 
HAL_DMA_STATE_TIMEOUT
 = 0x03,

133 
HAL_DMA_STATE_ERROR
 = 0x04,

134 }
	tHAL_DMA_SèãTy≥Def
;

141 
HAL_DMA_FULL_TRANSFER
 = 0x00,

142 
HAL_DMA_HALF_TRANSFER
 = 0x01,

143 }
	tHAL_DMA_LevñCom∂ëeTy≥Def
;

148 
	s__DMA_H™dÀTy≥Def


150 
DMA_Såóm_Ty≥Def
 *
In°™˚
;

152 
DMA_InôTy≥Def
 
Inô
;

154 
HAL_LockTy≥Def
 
Lock
;

156 
__IO
 
HAL_DMA_SèãTy≥Def
 
Sèã
;

158 *
P¨ít
;

160 (* 
X„rC∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

162 (* 
X„rHÆfC∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

164 (* 
X„rM1C∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

166 (* 
X„rEº‹CÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

168 
__IO
 
uöt32_t
 
Eº‹Code
;

170 
uöt32_t
 
SåómBa£Addªss
;

172 
uöt32_t
 
SåómIndex
;

173 }
	tDMA_H™dÀTy≥Def
;

190 
	#HAL_DMA_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

191 
	#HAL_DMA_ERROR_TE
 ((
uöt32_t
)0x00000001Ë

	)

192 
	#HAL_DMA_ERROR_FE
 ((
uöt32_t
)0x00000002Ë

	)

193 
	#HAL_DMA_ERROR_DME
 ((
uöt32_t
)0x00000004Ë

	)

194 
	#HAL_DMA_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000020Ë

	)

203 
	#DMA_CHANNEL_0
 ((
uöt32_t
)0x00000000Ë

	)

204 
	#DMA_CHANNEL_1
 ((
uöt32_t
)0x02000000Ë

	)

205 
	#DMA_CHANNEL_2
 ((
uöt32_t
)0x04000000Ë

	)

206 
	#DMA_CHANNEL_3
 ((
uöt32_t
)0x06000000Ë

	)

207 
	#DMA_CHANNEL_4
 ((
uöt32_t
)0x08000000Ë

	)

208 
	#DMA_CHANNEL_5
 ((
uöt32_t
)0x0A000000Ë

	)

209 
	#DMA_CHANNEL_6
 ((
uöt32_t
)0x0C000000Ë

	)

210 
	#DMA_CHANNEL_7
 ((
uöt32_t
)0x0E000000Ë

	)

219 
	#DMA_PERIPH_TO_MEMORY
 ((
uöt32_t
)0x00000000Ë

	)

220 
	#DMA_MEMORY_TO_PERIPH
 ((
uöt32_t
)
DMA_SxCR_DIR_0
Ë

	)

221 
	#DMA_MEMORY_TO_MEMORY
 ((
uöt32_t
)
DMA_SxCR_DIR_1
Ë

	)

230 
	#DMA_PINC_ENABLE
 ((
uöt32_t
)
DMA_SxCR_PINC
Ë

	)

231 
	#DMA_PINC_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

240 
	#DMA_MINC_ENABLE
 ((
uöt32_t
)
DMA_SxCR_MINC
Ë

	)

241 
	#DMA_MINC_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

250 
	#DMA_PDATAALIGN_BYTE
 ((
uöt32_t
)0x00000000Ë

	)

251 
	#DMA_PDATAALIGN_HALFWORD
 ((
uöt32_t
)
DMA_SxCR_PSIZE_0
Ë

	)

252 
	#DMA_PDATAALIGN_WORD
 ((
uöt32_t
)
DMA_SxCR_PSIZE_1
Ë

	)

261 
	#DMA_MDATAALIGN_BYTE
 ((
uöt32_t
)0x00000000Ë

	)

262 
	#DMA_MDATAALIGN_HALFWORD
 ((
uöt32_t
)
DMA_SxCR_MSIZE_0
Ë

	)

263 
	#DMA_MDATAALIGN_WORD
 ((
uöt32_t
)
DMA_SxCR_MSIZE_1
Ë

	)

272 
	#DMA_NORMAL
 ((
uöt32_t
)0x00000000Ë

	)

273 
	#DMA_CIRCULAR
 ((
uöt32_t
)
DMA_SxCR_CIRC
Ë

	)

274 
	#DMA_PFCTRL
 ((
uöt32_t
)
DMA_SxCR_PFCTRL
Ë

	)

283 
	#DMA_PRIORITY_LOW
 ((
uöt32_t
)0x00000000Ë

	)

284 
	#DMA_PRIORITY_MEDIUM
 ((
uöt32_t
)
DMA_SxCR_PL_0
Ë

	)

285 
	#DMA_PRIORITY_HIGH
 ((
uöt32_t
)
DMA_SxCR_PL_1
Ë

	)

286 
	#DMA_PRIORITY_VERY_HIGH
 ((
uöt32_t
)
DMA_SxCR_PL
Ë

	)

295 
	#DMA_FIFOMODE_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

296 
	#DMA_FIFOMODE_ENABLE
 ((
uöt32_t
)
DMA_SxFCR_DMDIS
Ë

	)

305 
	#DMA_FIFO_THRESHOLD_1QUARTERFULL
 ((
uöt32_t
)0x00000000Ë

	)

306 
	#DMA_FIFO_THRESHOLD_HALFFULL
 ((
uöt32_t
)
DMA_SxFCR_FTH_0
Ë

	)

307 
	#DMA_FIFO_THRESHOLD_3QUARTERSFULL
 ((
uöt32_t
)
DMA_SxFCR_FTH_1
Ë

	)

308 
	#DMA_FIFO_THRESHOLD_FULL
 ((
uöt32_t
)
DMA_SxFCR_FTH
Ë

	)

317 
	#DMA_MBURST_SINGLE
 ((
uöt32_t
)0x00000000)

	)

318 
	#DMA_MBURST_INC4
 ((
uöt32_t
)
DMA_SxCR_MBURST_0
)

	)

319 
	#DMA_MBURST_INC8
 ((
uöt32_t
)
DMA_SxCR_MBURST_1
)

	)

320 
	#DMA_MBURST_INC16
 ((
uöt32_t
)
DMA_SxCR_MBURST
)

	)

329 
	#DMA_PBURST_SINGLE
 ((
uöt32_t
)0x00000000)

	)

330 
	#DMA_PBURST_INC4
 ((
uöt32_t
)
DMA_SxCR_PBURST_0
)

	)

331 
	#DMA_PBURST_INC8
 ((
uöt32_t
)
DMA_SxCR_PBURST_1
)

	)

332 
	#DMA_PBURST_INC16
 ((
uöt32_t
)
DMA_SxCR_PBURST
)

	)

341 
	#DMA_IT_TC
 ((
uöt32_t
)
DMA_SxCR_TCIE
)

	)

342 
	#DMA_IT_HT
 ((
uöt32_t
)
DMA_SxCR_HTIE
)

	)

343 
	#DMA_IT_TE
 ((
uöt32_t
)
DMA_SxCR_TEIE
)

	)

344 
	#DMA_IT_DME
 ((
uöt32_t
)
DMA_SxCR_DMEIE
)

	)

345 
	#DMA_IT_FE
 ((
uöt32_t
)0x00000080)

	)

354 
	#DMA_FLAG_FEIF0_4
 ((
uöt32_t
)0x00800001)

	)

355 
	#DMA_FLAG_DMEIF0_4
 ((
uöt32_t
)0x00800004)

	)

356 
	#DMA_FLAG_TEIF0_4
 ((
uöt32_t
)0x00000008)

	)

357 
	#DMA_FLAG_HTIF0_4
 ((
uöt32_t
)0x00000010)

	)

358 
	#DMA_FLAG_TCIF0_4
 ((
uöt32_t
)0x00000020)

	)

359 
	#DMA_FLAG_FEIF1_5
 ((
uöt32_t
)0x00000040)

	)

360 
	#DMA_FLAG_DMEIF1_5
 ((
uöt32_t
)0x00000100)

	)

361 
	#DMA_FLAG_TEIF1_5
 ((
uöt32_t
)0x00000200)

	)

362 
	#DMA_FLAG_HTIF1_5
 ((
uöt32_t
)0x00000400)

	)

363 
	#DMA_FLAG_TCIF1_5
 ((
uöt32_t
)0x00000800)

	)

364 
	#DMA_FLAG_FEIF2_6
 ((
uöt32_t
)0x00010000)

	)

365 
	#DMA_FLAG_DMEIF2_6
 ((
uöt32_t
)0x00040000)

	)

366 
	#DMA_FLAG_TEIF2_6
 ((
uöt32_t
)0x00080000)

	)

367 
	#DMA_FLAG_HTIF2_6
 ((
uöt32_t
)0x00100000)

	)

368 
	#DMA_FLAG_TCIF2_6
 ((
uöt32_t
)0x00200000)

	)

369 
	#DMA_FLAG_FEIF3_7
 ((
uöt32_t
)0x00400000)

	)

370 
	#DMA_FLAG_DMEIF3_7
 ((
uöt32_t
)0x01000000)

	)

371 
	#DMA_FLAG_TEIF3_7
 ((
uöt32_t
)0x02000000)

	)

372 
	#DMA_FLAG_HTIF3_7
 ((
uöt32_t
)0x04000000)

	)

373 
	#DMA_FLAG_TCIF3_7
 ((
uöt32_t
)0x08000000)

	)

388 
	#__HAL_DMA_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_DMA_STATE_RESET
)

	)

402 
	#__HAL_DMA_GET_FS
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
FCR
 & (
DMA_SxFCR_FS
)))

	)

409 
	#__HAL_DMA_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
DMA_SxCR_EN
)

	)

416 
	#__HAL_DMA_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~
DMA_SxCR_EN
)

	)

425 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

426 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm0
))? 
DMA_FLAG_TCIF0_4
 :\

427 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm0
))? 
DMA_FLAG_TCIF0_4
 :\

428 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm4
))? 
DMA_FLAG_TCIF0_4
 :\

429 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm4
))? 
DMA_FLAG_TCIF0_4
 :\

430 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm1
))? 
DMA_FLAG_TCIF1_5
 :\

431 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm1
))? 
DMA_FLAG_TCIF1_5
 :\

432 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm5
))? 
DMA_FLAG_TCIF1_5
 :\

433 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm5
))? 
DMA_FLAG_TCIF1_5
 :\

434 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm2
))? 
DMA_FLAG_TCIF2_6
 :\

435 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm2
))? 
DMA_FLAG_TCIF2_6
 :\

436 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm6
))? 
DMA_FLAG_TCIF2_6
 :\

437 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm6
))? 
DMA_FLAG_TCIF2_6
 :\

438 
DMA_FLAG_TCIF3_7
)

	)

445 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

446 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm0
))? 
DMA_FLAG_HTIF0_4
 :\

447 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm0
))? 
DMA_FLAG_HTIF0_4
 :\

448 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm4
))? 
DMA_FLAG_HTIF0_4
 :\

449 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm4
))? 
DMA_FLAG_HTIF0_4
 :\

450 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm1
))? 
DMA_FLAG_HTIF1_5
 :\

451 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm1
))? 
DMA_FLAG_HTIF1_5
 :\

452 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm5
))? 
DMA_FLAG_HTIF1_5
 :\

453 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm5
))? 
DMA_FLAG_HTIF1_5
 :\

454 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm2
))? 
DMA_FLAG_HTIF2_6
 :\

455 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm2
))? 
DMA_FLAG_HTIF2_6
 :\

456 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm6
))? 
DMA_FLAG_HTIF2_6
 :\

457 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm6
))? 
DMA_FLAG_HTIF2_6
 :\

458 
DMA_FLAG_HTIF3_7
)

	)

465 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

466 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm0
))? 
DMA_FLAG_TEIF0_4
 :\

467 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm0
))? 
DMA_FLAG_TEIF0_4
 :\

468 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm4
))? 
DMA_FLAG_TEIF0_4
 :\

469 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm4
))? 
DMA_FLAG_TEIF0_4
 :\

470 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm1
))? 
DMA_FLAG_TEIF1_5
 :\

471 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm1
))? 
DMA_FLAG_TEIF1_5
 :\

472 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm5
))? 
DMA_FLAG_TEIF1_5
 :\

473 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm5
))? 
DMA_FLAG_TEIF1_5
 :\

474 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm2
))? 
DMA_FLAG_TEIF2_6
 :\

475 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm2
))? 
DMA_FLAG_TEIF2_6
 :\

476 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm6
))? 
DMA_FLAG_TEIF2_6
 :\

477 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm6
))? 
DMA_FLAG_TEIF2_6
 :\

478 
DMA_FLAG_TEIF3_7
)

	)

485 
	#__HAL_DMA_GET_FE_FLAG_INDEX
(
__HANDLE__
)\

486 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm0
))? 
DMA_FLAG_FEIF0_4
 :\

487 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm0
))? 
DMA_FLAG_FEIF0_4
 :\

488 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm4
))? 
DMA_FLAG_FEIF0_4
 :\

489 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm4
))? 
DMA_FLAG_FEIF0_4
 :\

490 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm1
))? 
DMA_FLAG_FEIF1_5
 :\

491 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm1
))? 
DMA_FLAG_FEIF1_5
 :\

492 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm5
))? 
DMA_FLAG_FEIF1_5
 :\

493 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm5
))? 
DMA_FLAG_FEIF1_5
 :\

494 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm2
))? 
DMA_FLAG_FEIF2_6
 :\

495 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm2
))? 
DMA_FLAG_FEIF2_6
 :\

496 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm6
))? 
DMA_FLAG_FEIF2_6
 :\

497 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm6
))? 
DMA_FLAG_FEIF2_6
 :\

498 
DMA_FLAG_FEIF3_7
)

	)

505 
	#__HAL_DMA_GET_DME_FLAG_INDEX
(
__HANDLE__
)\

506 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm0
))? 
DMA_FLAG_DMEIF0_4
 :\

507 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm0
))? 
DMA_FLAG_DMEIF0_4
 :\

508 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm4
))? 
DMA_FLAG_DMEIF0_4
 :\

509 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm4
))? 
DMA_FLAG_DMEIF0_4
 :\

510 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm1
))? 
DMA_FLAG_DMEIF1_5
 :\

511 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm1
))? 
DMA_FLAG_DMEIF1_5
 :\

512 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm5
))? 
DMA_FLAG_DMEIF1_5
 :\

513 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm5
))? 
DMA_FLAG_DMEIF1_5
 :\

514 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm2
))? 
DMA_FLAG_DMEIF2_6
 :\

515 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm2
))? 
DMA_FLAG_DMEIF2_6
 :\

516 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Såóm6
))? 
DMA_FLAG_DMEIF2_6
 :\

517 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Såóm6
))? 
DMA_FLAG_DMEIF2_6
 :\

518 
DMA_FLAG_DMEIF3_7
)

	)

533 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
)\

534 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA2_Såóm3
)? (
DMA2
->
HISR
 & (
__FLAG__
)) :\

535 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Såóm7
)? (
DMA2
->
LISR
 & (
__FLAG__
)) :\

536 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Såóm3
)? (
DMA1
->
HISR
 & (
__FLAG__
)Ë: (DMA1->
LISR
 & (__FLAG__)))

	)

551 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

552 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA2_Såóm3
)? (
DMA2
->
HIFCR
 = (
__FLAG__
)) :\

553 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Såóm7
)? (
DMA2
->
LIFCR
 = (
__FLAG__
)) :\

554 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Såóm3
)? (
DMA1
->
HIFCR
 = (
__FLAG__
)Ë: (DMA1->
LIFCR
 = (__FLAG__)))

	)

568 
	#__HAL_DMA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__INTERRUPT__Ë!
DMA_IT_FE
)? \

569 ((
__HANDLE__
)->
In°™˚
->
CR
 |(
__INTERRUPT__
)Ë: ((__HANDLE__)->In°™˚->
FCR
 |(__INTERRUPT__)))

	)

583 
	#__HAL_DMA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__INTERRUPT__Ë!
DMA_IT_FE
)? \

584 ((
__HANDLE__
)->
In°™˚
->
CR
 &~(
__INTERRUPT__
)Ë: ((__HANDLE__)->In°™˚->
FCR
 &~(__INTERRUPT__)))

	)

598 
	#__HAL_DMA_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__INTERRUPT__Ë!
DMA_IT_FE
)? \

599 ((
__HANDLE__
)->
In°™˚
->
CR
 & (
__INTERRUPT__
)) : \

600 ((
__HANDLE__
)->
In°™˚
->
FCR
 & (
__INTERRUPT__
)))

	)

619 
	#__HAL_DMA_SET_COUNTER
(
__HANDLE__
, 
__COUNTER__
Ë((__HANDLE__)->
In°™˚
->
NDTR
 = (
uöt16_t
)(__COUNTER__))

	)

627 
	#__HAL_DMA_GET_COUNTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
NDTR
)

	)

631 
	~"°m32f4xx_hÆ_dma_ex.h
"

644 
HAL_SètusTy≥Def
 
HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
);

645 
HAL_SètusTy≥Def
 
HAL_DMA_DeInô
(
DMA_H™dÀTy≥Def
 *
hdma
);

654 
HAL_SètusTy≥Def
 
HAL_DMA_Sèπ
 (
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

655 
HAL_SètusTy≥Def
 
HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

656 
HAL_SètusTy≥Def
 
HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
);

657 
HAL_SètusTy≥Def
 
HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
);

658 
HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
);

667 
HAL_DMA_SèãTy≥Def
 
HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
);

668 
uöt32_t
 
HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

689 
	#IS_DMA_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DMA_CHANNEL_0
) || \

690 ((
CHANNEL
Ë=
DMA_CHANNEL_1
) || \

691 ((
CHANNEL
Ë=
DMA_CHANNEL_2
) || \

692 ((
CHANNEL
Ë=
DMA_CHANNEL_3
) || \

693 ((
CHANNEL
Ë=
DMA_CHANNEL_4
) || \

694 ((
CHANNEL
Ë=
DMA_CHANNEL_5
) || \

695 ((
CHANNEL
Ë=
DMA_CHANNEL_6
) || \

696 ((
CHANNEL
Ë=
DMA_CHANNEL_7
))

	)

698 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_PERIPH_TO_MEMORY
 ) || \

699 ((
DIRECTION
Ë=
DMA_MEMORY_TO_PERIPH
) || \

700 ((
DIRECTION
Ë=
DMA_MEMORY_TO_MEMORY
))

	)

702 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

704 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PINC_ENABLE
) || \

705 ((
STATE
Ë=
DMA_PINC_DISABLE
))

	)

707 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_MINC_ENABLE
) || \

708 ((
STATE
Ë=
DMA_MINC_DISABLE
))

	)

710 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PDATAALIGN_BYTE
) || \

711 ((
SIZE
Ë=
DMA_PDATAALIGN_HALFWORD
) || \

712 ((
SIZE
Ë=
DMA_PDATAALIGN_WORD
))

	)

714 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_MDATAALIGN_BYTE
) || \

715 ((
SIZE
Ë=
DMA_MDATAALIGN_HALFWORD
) || \

716 ((
SIZE
Ë=
DMA_MDATAALIGN_WORD
 ))

	)

718 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_NORMAL
 ) || \

719 ((
MODE
Ë=
DMA_CIRCULAR
) || \

720 ((
MODE
Ë=
DMA_PFCTRL
))

	)

722 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_PRIORITY_LOW
 ) || \

723 ((
PRIORITY
Ë=
DMA_PRIORITY_MEDIUM
) || \

724 ((
PRIORITY
Ë=
DMA_PRIORITY_HIGH
) || \

725 ((
PRIORITY
Ë=
DMA_PRIORITY_VERY_HIGH
))

	)

727 
	#IS_DMA_FIFO_MODE_STATE
(
STATE
Ë(((STATEË=
DMA_FIFOMODE_DISABLE
 ) || \

728 ((
STATE
Ë=
DMA_FIFOMODE_ENABLE
))

	)

730 
	#IS_DMA_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
DMA_FIFO_THRESHOLD_1QUARTERFULL
 ) || \

731 ((
THRESHOLD
Ë=
DMA_FIFO_THRESHOLD_HALFFULL
) || \

732 ((
THRESHOLD
Ë=
DMA_FIFO_THRESHOLD_3QUARTERSFULL
) || \

733 ((
THRESHOLD
Ë=
DMA_FIFO_THRESHOLD_FULL
))

	)

735 
	#IS_DMA_MEMORY_BURST
(
BURST
Ë(((BURSTË=
DMA_MBURST_SINGLE
) || \

736 ((
BURST
Ë=
DMA_MBURST_INC4
) || \

737 ((
BURST
Ë=
DMA_MBURST_INC8
) || \

738 ((
BURST
Ë=
DMA_MBURST_INC16
))

	)

740 
	#IS_DMA_PERIPHERAL_BURST
(
BURST
Ë(((BURSTË=
DMA_PBURST_SINGLE
) || \

741 ((
BURST
Ë=
DMA_PBURST_INC4
) || \

742 ((
BURST
Ë=
DMA_PBURST_INC8
) || \

743 ((
BURST
Ë=
DMA_PBURST_INC16
))

	)

765 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dma2d.h

39 #i‚de‡
__STM32F4xx_HAL_DMA2D_H


40 
	#__STM32F4xx_HAL_DMA2D_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

47 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

49 
	~"°m32f4xx_hÆ_def.h
"

64 
	#MAX_DMA2D_LAYER
 2

	)

71 
uöt32_t
 
Blue
;

74 
uöt32_t
 
Gªí
;

77 
uöt32_t
 
Red
;

79 } 
	tDMA2D_Cﬁ‹Ty≥Def
;

86 
uöt32_t
 *
pCLUT
;

88 
uöt32_t
 
CLUTCﬁ‹Mode
;

91 
uöt32_t
 
Size
;

93 } 
	tDMA2D_CLUTCfgTy≥Def
;

100 
uöt32_t
 
Mode
;

103 
uöt32_t
 
Cﬁ‹Mode
;

106 
uöt32_t
 
OuçutOff£t
;

108 } 
	tDMA2D_InôTy≥Def
;

115 
uöt32_t
 
I≈utOff£t
;

118 
uöt32_t
 
I≈utCﬁ‹Mode
;

121 
uöt32_t
 
AÕhaMode
;

124 
uöt32_t
 
I≈utAÕha
;

129 } 
	tDMA2D_LayîCfgTy≥Def
;

136 
HAL_DMA2D_STATE_RESET
 = 0x00,

137 
HAL_DMA2D_STATE_READY
 = 0x01,

138 
HAL_DMA2D_STATE_BUSY
 = 0x02,

139 
HAL_DMA2D_STATE_TIMEOUT
 = 0x03,

140 
HAL_DMA2D_STATE_ERROR
 = 0x04,

141 
HAL_DMA2D_STATE_SUSPEND
 = 0x05

142 }
	tHAL_DMA2D_SèãTy≥Def
;

147 
	s__DMA2D_H™dÀTy≥Def


149 
DMA2D_Ty≥Def
 *
In°™˚
;

151 
DMA2D_InôTy≥Def
 
Inô
;

153 (* 
X„rC∂tCÆlback
)(
__DMA2D_H™dÀTy≥Def
 * 
hdma2d
);

155 (* 
X„rEº‹CÆlback
)(
__DMA2D_H™dÀTy≥Def
 * 
hdma2d
);

157 
DMA2D_LayîCfgTy≥Def
 
LayîCfg
[
MAX_DMA2D_LAYER
];

159 
HAL_LockTy≥Def
 
Lock
;

161 
__IO
 
HAL_DMA2D_SèãTy≥Def
 
Sèã
;

163 
__IO
 
uöt32_t
 
Eº‹Code
;

164 } 
	tDMA2D_H™dÀTy≥Def
;

177 
	#HAL_DMA2D_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

178 
	#HAL_DMA2D_ERROR_TE
 ((
uöt32_t
)0x00000001Ë

	)

179 
	#HAL_DMA2D_ERROR_CE
 ((
uöt32_t
)0x00000002Ë

	)

180 
	#HAL_DMA2D_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000020Ë

	)

188 
	#DMA2D_M2M
 ((
uöt32_t
)0x00000000Ë

	)

189 
	#DMA2D_M2M_PFC
 ((
uöt32_t
)0x00010000Ë

	)

190 
	#DMA2D_M2M_BLEND
 ((
uöt32_t
)0x00020000Ë

	)

191 
	#DMA2D_R2M
 ((
uöt32_t
)0x00030000Ë

	)

199 
	#DMA2D_ARGB8888
 ((
uöt32_t
)0x00000000Ë

	)

200 
	#DMA2D_RGB888
 ((
uöt32_t
)0x00000001Ë

	)

201 
	#DMA2D_RGB565
 ((
uöt32_t
)0x00000002Ë

	)

202 
	#DMA2D_ARGB1555
 ((
uöt32_t
)0x00000003Ë

	)

203 
	#DMA2D_ARGB4444
 ((
uöt32_t
)0x00000004Ë

	)

211 
	#COLOR_VALUE
 ((
uöt32_t
)0x000000FFË

	)

219 
	#DMA2D_PIXEL
 (
DMA2D_NLR_PL
 >> 16Ë

	)

220 
	#DMA2D_LINE
 
DMA2D_NLR_NL


	)

228 
	#DMA2D_OFFSET
 
DMA2D_FGOR_LO


	)

236 
	#CM_ARGB8888
 ((
uöt32_t
)0x00000000Ë

	)

237 
	#CM_RGB888
 ((
uöt32_t
)0x00000001Ë

	)

238 
	#CM_RGB565
 ((
uöt32_t
)0x00000002Ë

	)

239 
	#CM_ARGB1555
 ((
uöt32_t
)0x00000003Ë

	)

240 
	#CM_ARGB4444
 ((
uöt32_t
)0x00000004Ë

	)

241 
	#CM_L8
 ((
uöt32_t
)0x00000005Ë

	)

242 
	#CM_AL44
 ((
uöt32_t
)0x00000006Ë

	)

243 
	#CM_AL88
 ((
uöt32_t
)0x00000007Ë

	)

244 
	#CM_L4
 ((
uöt32_t
)0x00000008Ë

	)

245 
	#CM_A8
 ((
uöt32_t
)0x00000009Ë

	)

246 
	#CM_A4
 ((
uöt32_t
)0x0000000AË

	)

254 
	#DMA2D_NO_MODIF_ALPHA
 ((
uöt32_t
)0x00000000Ë

	)

255 
	#DMA2D_REPLACE_ALPHA
 ((
uöt32_t
)0x00000001Ë

	)

256 
	#DMA2D_COMBINE_ALPHA
 ((
uöt32_t
)0x00000002Ë

	)

265 
	#DMA2D_CCM_ARGB8888
 ((
uöt32_t
)0x00000000Ë

	)

266 
	#DMA2D_CCM_RGB888
 ((
uöt32_t
)0x00000001Ë

	)

274 
	#DMA2D_CLUT_SIZE
 (
DMA2D_FGPFCCR_CS
 >> 8Ë

	)

282 
	#LINE_WATERMARK
 
DMA2D_LWR_LW


	)

290 
	#DMA2D_IT_CE
 
DMA2D_CR_CEIE


	)

291 
	#DMA2D_IT_CTC
 
DMA2D_CR_CTCIE


	)

292 
	#DMA2D_IT_CAE
 
DMA2D_CR_CAEIE


	)

293 
	#DMA2D_IT_TW
 
DMA2D_CR_TWIE


	)

294 
	#DMA2D_IT_TC
 
DMA2D_CR_TCIE


	)

295 
	#DMA2D_IT_TE
 
DMA2D_CR_TEIE


	)

303 
	#DMA2D_FLAG_CE
 
DMA2D_ISR_CEIF


	)

304 
	#DMA2D_FLAG_CTC
 
DMA2D_ISR_CTCIF


	)

305 
	#DMA2D_FLAG_CAE
 
DMA2D_ISR_CAEIF


	)

306 
	#DMA2D_FLAG_TW
 
DMA2D_ISR_TWIF


	)

307 
	#DMA2D_FLAG_TC
 
DMA2D_ISR_TCIF


	)

308 
	#DMA2D_FLAG_TE
 
DMA2D_ISR_TEIF


	)

325 
	#__HAL_DMA2D_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_DMA2D_STATE_RESET
)

	)

332 
	#__HAL_DMA2D_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
DMA2D_CR_START
)

	)

339 
	#__HAL_DMA2D_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~
DMA2D_CR_START
)

	)

355 
	#__HAL_DMA2D_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ISR
 & (__FLAG__))

	)

370 
	#__HAL_DMA2D_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
IFCR
 = (__FLAG__))

	)

385 
	#__HAL_DMA2D_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(__INTERRUPT__))

	)

400 
	#__HAL_DMA2D_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(__INTERRUPT__))

	)

415 
	#__HAL_DMA2D_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 & (__INTERRUPT__))

	)

425 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_Inô
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
);

426 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_DeInô
 (
DMA2D_H™dÀTy≥Def
 *
hdma2d
);

427 
	`HAL_DMA2D_M•Inô
(
DMA2D_H™dÀTy≥Def
* 
hdma2d
);

428 
	`HAL_DMA2D_M•DeInô
(
DMA2D_H™dÀTy≥Def
* 
hdma2d
);

431 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_Sèπ
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
pd©a
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
);

432 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_BÀndögSèπ
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
SrcAddªss1
, uöt32_à
SrcAddªss2
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
);

433 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_Sèπ_IT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
pd©a
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
);

434 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_BÀndögSèπ_IT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
SrcAddªss1
, uöt32_à
SrcAddªss2
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
);

435 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_Su•íd
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
);

436 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_Resume
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
);

437 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_Ab‹t
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
);

438 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_PﬁlF‹Tøns„r
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
Timeout
);

439 
	`HAL_DMA2D_IRQH™dÀr
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
);

442 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_C⁄figLayî
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
LayîIdx
);

443 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_C⁄figCLUT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
DMA2D_CLUTCfgTy≥Def
 
CLUTCfg
, 
uöt32_t
 
LayîIdx
);

444 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_E«bÀCLUT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
LayîIdx
);

445 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_DißbÀCLUT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
LayîIdx
);

446 
HAL_SètusTy≥Def
 
	`HAL_DMA2D_ProgømLöeEvít
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
Löe
);

449 
HAL_DMA2D_SèãTy≥Def
 
	`HAL_DMA2D_GëSèã
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
);

450 
uöt32_t
 
	`HAL_DMA2D_GëEº‹
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
);

495 
	#IS_DMA2D_LAYER
(
LAYER
Ë((LAYERË<
MAX_DMA2D_LAYER
)

	)

496 
	#IS_DMA2D_MODE
(
MODE
Ë(((MODEË=
DMA2D_M2M
Ë|| ((MODEË=
DMA2D_M2M_PFC
) || \

497 ((
MODE
Ë=
DMA2D_M2M_BLEND
Ë|| ((MODEË=
DMA2D_R2M
))

	)

498 
	#IS_DMA2D_CMODE
(
MODE_ARGB
Ë(((MODE_ARGBË=
DMA2D_ARGB8888
Ë|| ((MODE_ARGBË=
DMA2D_RGB888
) || \

499 ((
MODE_ARGB
Ë=
DMA2D_RGB565
Ë|| ((MODE_ARGBË=
DMA2D_ARGB1555
) || \

500 ((
MODE_ARGB
Ë=
DMA2D_ARGB4444
))

	)

501 
	#IS_DMA2D_COLOR
(
COLOR
Ë((COLORË<
COLOR_VALUE
)

	)

502 
	#IS_DMA2D_LINE
(
LINE
Ë((LINEË<
DMA2D_LINE
)

	)

503 
	#IS_DMA2D_PIXEL
(
PIXEL
Ë((PIXELË<
DMA2D_PIXEL
)

	)

504 
	#IS_DMA2D_OFFSET
(
OOFFSET
Ë((OOFFSETË<
DMA2D_OFFSET
)

	)

505 
	#IS_DMA2D_INPUT_COLOR_MODE
(
INPUT_CM
Ë(((INPUT_CMË=
CM_ARGB8888
Ë|| ((INPUT_CMË=
CM_RGB888
) || \

506 ((
INPUT_CM
Ë=
CM_RGB565
Ë|| ((INPUT_CMË=
CM_ARGB1555
) || \

507 ((
INPUT_CM
Ë=
CM_ARGB4444
Ë|| ((INPUT_CMË=
CM_L8
) || \

508 ((
INPUT_CM
Ë=
CM_AL44
Ë|| ((INPUT_CMË=
CM_AL88
) || \

509 ((
INPUT_CM
Ë=
CM_L4
Ë|| ((INPUT_CMË=
CM_A8
) || \

510 ((
INPUT_CM
Ë=
CM_A4
))

	)

511 
	#IS_DMA2D_ALPHA_MODE
(
AÕhaMode
Ë(((AÕhaModeË=
DMA2D_NO_MODIF_ALPHA
) || \

512 ((
AÕhaMode
Ë=
DMA2D_REPLACE_ALPHA
) || \

513 ((
AÕhaMode
Ë=
DMA2D_COMBINE_ALPHA
))

	)

514 
	#IS_DMA2D_CLUT_CM
(
CLUT_CM
Ë(((CLUT_CMË=
DMA2D_CCM_ARGB8888
Ë|| ((CLUT_CMË=
DMA2D_CCM_RGB888
))

	)

515 
	#IS_DMA2D_CLUT_SIZE
(
CLUT_SIZE
Ë((CLUT_SIZEË<
DMA2D_CLUT_SIZE
)

	)

516 
	#IS_DMA2D_LöeW©îm¨k
(
LöeW©îm¨k
Ë((LöeW©îm¨kË<
LINE_WATERMARK
)

	)

549 #ifde‡
__˝lu•lus


550 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dma_ex.h

39 #i‚de‡
__STM32F4xx_HAL_DMA_EX_H


40 
	#__STM32F4xx_HAL_DMA_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

68 
MEMORY0
 = 0x00,

69 
MEMORY1
 = 0x01,

71 }
	tHAL_DMA_Mem‹yTy≥Def
;

89 
HAL_SètusTy≥Def
 
HAL_DMAEx_Mu…iBuf„rSèπ
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
Sec⁄dMemAddªss
, uöt32_à
D©aLígth
);

90 
HAL_SètusTy≥Def
 
HAL_DMAEx_Mu…iBuf„rSèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
Sec⁄dMemAddªss
, uöt32_à
D©aLígth
);

91 
HAL_SètusTy≥Def
 
HAL_DMAEx_Ch™geMem‹y
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Addªss
, 
HAL_DMA_Mem‹yTy≥Def
 
mem‹y
);

117 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dsi.h

39 #i‚de‡
__STM32F4xx_HAL_DSI_H


40 
	#__STM32F4xx_HAL_DSI_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

65 
uöt32_t
 
Autom©icClockL™eC⁄åﬁ
;

68 
uöt32_t
 
TXEsˇ≥Ckdiv
;

71 
uöt32_t
 
NumbîOfL™es
;

74 }
	tDSI_InôTy≥Def
;

81 
uöt32_t
 
	mPLLNDIV
;

84 
uöt32_t
 
	mPLLIDF
;

87 
uöt32_t
 
	mPLLODF
;

90 }
	tDSI_PLLInôTy≥Def
;

97 
uöt32_t
 
	mVútuÆCh™√lID
;

99 
uöt32_t
 
	mCﬁ‹Codög
;

102 
uöt32_t
 
	mLoo£lyPacked
;

106 
uöt32_t
 
	mMode
;

109 
uöt32_t
 
	mPackëSize
;

111 
uöt32_t
 
	mNumbîOfChunks
;

113 
uöt32_t
 
	mNuŒPackëSize
;

115 
uöt32_t
 
	mHSPﬁ¨ôy
;

118 
uöt32_t
 
	mVSPﬁ¨ôy
;

121 
uöt32_t
 
	mDEPﬁ¨ôy
;

124 
uöt32_t
 
	mH‹iz⁄èlSyncA˘ive
;

126 
uöt32_t
 
	mH‹iz⁄èlBackP‹ch
;

128 
uöt32_t
 
	mH‹iz⁄èlLöe
;

130 
uöt32_t
 
	mVîtiˇlSyncA˘ive
;

132 
uöt32_t
 
	mVîtiˇlBackP‹ch
;

134 
uöt32_t
 
	mVîtiˇlFr⁄tP‹ch
;

136 
uöt32_t
 
	mVîtiˇlA˘ive
;

138 
uöt32_t
 
	mLPComm™dE«bÀ
;

141 
uöt32_t
 
	mLPL¨ge°PackëSize
;

144 
uöt32_t
 
	mLPVACTL¨ge°PackëSize
;

147 
uöt32_t
 
	mLPH‹iz⁄èlFr⁄tP‹chE«bÀ
;

150 
uöt32_t
 
	mLPH‹iz⁄èlBackP‹chE«bÀ
;

153 
uöt32_t
 
	mLPVîtiˇlA˘iveE«bÀ
;

156 
uöt32_t
 
	mLPVîtiˇlFr⁄tP‹chE«bÀ
;

159 
uöt32_t
 
	mLPVîtiˇlBackP‹chE«bÀ
;

162 
uöt32_t
 
	mLPVîtiˇlSyncA˘iveE«bÀ
;

165 
uöt32_t
 
	mFømeBTAAcknowÀdgeE«bÀ
;

168 }
	tDSI_VidCfgTy≥Def
;

175 
uöt32_t
 
	mVútuÆCh™√lID
;

177 
uöt32_t
 
	mCﬁ‹Codög
;

180 
uöt32_t
 
	mComm™dSize
;

183 
uöt32_t
 
	mTórögEf„˘Sour˚
;

186 
uöt32_t
 
	mTórögEf„˘Pﬁ¨ôy
;

189 
uöt32_t
 
	mHSPﬁ¨ôy
;

192 
uöt32_t
 
	mVSPﬁ¨ôy
;

195 
uöt32_t
 
	mDEPﬁ¨ôy
;

198 
uöt32_t
 
	mVSyncPﬁ
;

201 
uöt32_t
 
	mAutom©icRe‰esh
;

204 
uöt32_t
 
	mTEAcknowÀdgeReque°
;

207 }
	tDSI_CmdCfgTy≥Def
;

214 
uöt32_t
 
	mLPGíSh‹tWrôeNoP
;

217 
uöt32_t
 
	mLPGíSh‹tWrôeO√P
;

220 
uöt32_t
 
	mLPGíSh‹tWrôeTwoP
;

223 
uöt32_t
 
	mLPGíSh‹tRódNoP
;

226 
uöt32_t
 
	mLPGíSh‹tRódO√P
;

229 
uöt32_t
 
	mLPGíSh‹tRódTwoP
;

232 
uöt32_t
 
	mLPGíL⁄gWrôe
;

235 
uöt32_t
 
	mLPDcsSh‹tWrôeNoP
;

238 
uöt32_t
 
	mLPDcsSh‹tWrôeO√P
;

241 
uöt32_t
 
	mLPDcsSh‹tRódNoP
;

244 
uöt32_t
 
	mLPDcsL⁄gWrôe
;

247 
uöt32_t
 
	mLPMaxRódPackë
;

250 
uöt32_t
 
	mAcknowÀdgeReque°
;

253 }
	tDSI_LPCmdTy≥Def
;

260 
uöt32_t
 
	mClockL™eHS2LPTime
;

263 
uöt32_t
 
	mClockL™eLP2HSTime
;

266 
uöt32_t
 
	mD©aL™eHS2LPTime
;

269 
uöt32_t
 
	mD©aL™eLP2HSTime
;

272 
uöt32_t
 
	mD©aL™eMaxRódTime
;

274 
uöt32_t
 
	mSt›WaôTime
;

277 }
	tDSI_PHY_TimîTy≥Def
;

284 
uöt32_t
 
	mTimeoutCkdiv
;

286 
uöt32_t
 
	mHighS≥edTønsmissi⁄Timeout
;

288 
uöt32_t
 
	mLowPowîRe˚±i⁄Timeout
;

290 
uöt32_t
 
	mHighS≥edRódTimeout
;

292 
uöt32_t
 
	mLowPowîRódTimeout
;

294 
uöt32_t
 
	mHighS≥edWrôeTimeout
;

296 
uöt32_t
 
	mHighS≥edWrôePª•Mode
;

299 
uöt32_t
 
	mLowPowîWrôeTimeout
;

301 
uöt32_t
 
	mBTATimeout
;

303 }
	tDSI_HOST_TimeoutTy≥Def
;

310 
	mHAL_DSI_STATE_RESET
 = 0x00,

311 
	mHAL_DSI_STATE_READY
 = 0x01,

312 
	mHAL_DSI_STATE_ERROR
 = 0x02,

313 
	mHAL_DSI_STATE_BUSY
 = 0x03,

314 
	mHAL_DSI_STATE_TIMEOUT
 = 0x04

315 }
	tHAL_DSI_SèãTy≥Def
;

322 
DSI_Ty≥Def
 *
	mIn°™˚
;

323 
DSI_InôTy≥Def
 
	mInô
;

324 
HAL_LockTy≥Def
 
	mLock
;

325 
__IO
 
HAL_DSI_SèãTy≥Def
 
	mSèã
;

326 
__IO
 
uöt32_t
 
	mEº‹Code
;

327 
uöt32_t
 
	mEº‹Msk
;

328 }
	tDSI_H™dÀTy≥Def
;

334 
	#DSI_ENTER_IDLE_MODE
 0x39

	)

335 
	#DSI_ENTER_INVERT_MODE
 0x21

	)

336 
	#DSI_ENTER_NORMAL_MODE
 0x13

	)

337 
	#DSI_ENTER_PARTIAL_MODE
 0x12

	)

338 
	#DSI_ENTER_SLEEP_MODE
 0x10

	)

339 
	#DSI_EXIT_IDLE_MODE
 0x38

	)

340 
	#DSI_EXIT_INVERT_MODE
 0x20

	)

341 
	#DSI_EXIT_SLEEP_MODE
 0x11

	)

342 
	#DSI_GET_3D_CONTROL
 0x3F

	)

343 
	#DSI_GET_ADDRESS_MODE
 0x0B

	)

344 
	#DSI_GET_BLUE_CHANNEL
 0x08

	)

345 
	#DSI_GET_DIAGNOSTIC_RESULT
 0x0F

	)

346 
	#DSI_GET_DISPLAY_MODE
 0x0D

	)

347 
	#DSI_GET_GREEN_CHANNEL
 0x07

	)

348 
	#DSI_GET_PIXEL_FORMAT
 0x0C

	)

349 
	#DSI_GET_POWER_MODE
 0x0A

	)

350 
	#DSI_GET_RED_CHANNEL
 0x06

	)

351 
	#DSI_GET_SCANLINE
 0x45

	)

352 
	#DSI_GET_SIGNAL_MODE
 0x0E

	)

353 
	#DSI_NOP
 0x00

	)

354 
	#DSI_READ_DDB_CONTINUE
 0xA8

	)

355 
	#DSI_READ_DDB_START
 0xA1

	)

356 
	#DSI_READ_MEMORY_CONTINUE
 0x3E

	)

357 
	#DSI_READ_MEMORY_START
 0x2E

	)

358 
	#DSI_SET_3D_CONTROL
 0x3D

	)

359 
	#DSI_SET_ADDRESS_MODE
 0x36

	)

360 
	#DSI_SET_COLUMN_ADDRESS
 0x2A

	)

361 
	#DSI_SET_DISPLAY_OFF
 0x28

	)

362 
	#DSI_SET_DISPLAY_ON
 0x29

	)

363 
	#DSI_SET_GAMMA_CURVE
 0x26

	)

364 
	#DSI_SET_PAGE_ADDRESS
 0x2B

	)

365 
	#DSI_SET_PARTIAL_COLUMNS
 0x31

	)

366 
	#DSI_SET_PARTIAL_ROWS
 0x30

	)

367 
	#DSI_SET_PIXEL_FORMAT
 0x3A

	)

368 
	#DSI_SET_SCROLL_AREA
 0x33

	)

369 
	#DSI_SET_SCROLL_START
 0x37

	)

370 
	#DSI_SET_TEAR_OFF
 0x34

	)

371 
	#DSI_SET_TEAR_ON
 0x35

	)

372 
	#DSI_SET_TEAR_SCANLINE
 0x44

	)

373 
	#DSI_SET_VSYNC_TIMING
 0x40

	)

374 
	#DSI_SOFT_RESET
 0x01

	)

375 
	#DSI_WRITE_LUT
 0x2D

	)

376 
	#DSI_WRITE_MEMORY_CONTINUE
 0x3C

	)

377 
	#DSI_WRITE_MEMORY_START
 0x2C

	)

385 
	#DSI_VID_MODE_NB_PULSES
 0

	)

386 
	#DSI_VID_MODE_NB_EVENTS
 1

	)

387 
	#DSI_VID_MODE_BURST
 2

	)

395 
	#DSI_COLOR_MODE_FULL
 0

	)

396 
	#DSI_COLOR_MODE_EIGHT
 
DSI_WCR_COLM


	)

404 
	#DSI_DISPLAY_ON
 0

	)

405 
	#DSI_DISPLAY_OFF
 
DSI_WCR_SHTDN


	)

413 
	#DSI_LP_COMMAND_DISABLE
 0

	)

414 
	#DSI_LP_COMMAND_ENABLE
 
DSI_VMCR_LPCE


	)

422 
	#DSI_LP_HFP_DISABLE
 0

	)

423 
	#DSI_LP_HFP_ENABLE
 
DSI_VMCR_LPHFPE


	)

431 
	#DSI_LP_HBP_DISABLE
 0

	)

432 
	#DSI_LP_HBP_ENABLE
 
DSI_VMCR_LPHBPE


	)

440 
	#DSI_LP_VACT_DISABLE
 0

	)

441 
	#DSI_LP_VACT_ENABLE
 
DSI_VMCR_LPVAE


	)

449 
	#DSI_LP_VFP_DISABLE
 0

	)

450 
	#DSI_LP_VFP_ENABLE
 
DSI_VMCR_LPVFPE


	)

458 
	#DSI_LP_VBP_DISABLE
 0

	)

459 
	#DSI_LP_VBP_ENABLE
 
DSI_VMCR_LPVBPE


	)

467 
	#DSI_LP_VSYNC_DISABLE
 0

	)

468 
	#DSI_LP_VSYNC_ENABLE
 
DSI_VMCR_LPVSAE


	)

476 
	#DSI_FBTAA_DISABLE
 0

	)

477 
	#DSI_FBTAA_ENABLE
 
DSI_VMCR_FBTAAE


	)

485 
	#DSI_TE_DSILINK
 0

	)

486 
	#DSI_TE_EXTERNAL
 
DSI_WCFGR_TESRC


	)

494 
	#DSI_TE_RISING_EDGE
 0

	)

495 
	#DSI_TE_FALLING_EDGE
 
DSI_WCFGR_TEPOL


	)

503 
	#DSI_VSYNC_FALLING
 0

	)

504 
	#DSI_VSYNC_RISING
 
DSI_WCFGR_VSPOL


	)

512 
	#DSI_AR_DISABLE
 0

	)

513 
	#DSI_AR_ENABLE
 
DSI_WCFGR_AR


	)

521 
	#DSI_TE_ACKNOWLEDGE_DISABLE
 0

	)

522 
	#DSI_TE_ACKNOWLEDGE_ENABLE
 
DSI_CMCR_TEARE


	)

530 
	#DSI_ACKNOWLEDGE_DISABLE
 0

	)

531 
	#DSI_ACKNOWLEDGE_ENABLE
 
DSI_CMCR_ARE


	)

539 
	#DSI_LP_GSW0P_DISABLE
 0

	)

540 
	#DSI_LP_GSW0P_ENABLE
 
DSI_CMCR_GSW0TX


	)

548 
	#DSI_LP_GSW1P_DISABLE
 0

	)

549 
	#DSI_LP_GSW1P_ENABLE
 
DSI_CMCR_GSW1TX


	)

557 
	#DSI_LP_GSW2P_DISABLE
 0

	)

558 
	#DSI_LP_GSW2P_ENABLE
 
DSI_CMCR_GSW2TX


	)

566 
	#DSI_LP_GSR0P_DISABLE
 0

	)

567 
	#DSI_LP_GSR0P_ENABLE
 
DSI_CMCR_GSR0TX


	)

575 
	#DSI_LP_GSR1P_DISABLE
 0

	)

576 
	#DSI_LP_GSR1P_ENABLE
 
DSI_CMCR_GSR1TX


	)

584 
	#DSI_LP_GSR2P_DISABLE
 0

	)

585 
	#DSI_LP_GSR2P_ENABLE
 
DSI_CMCR_GSR2TX


	)

593 
	#DSI_LP_GLW_DISABLE
 0

	)

594 
	#DSI_LP_GLW_ENABLE
 
DSI_CMCR_GLWTX


	)

602 
	#DSI_LP_DSW0P_DISABLE
 0

	)

603 
	#DSI_LP_DSW0P_ENABLE
 
DSI_CMCR_DSW0TX


	)

611 
	#DSI_LP_DSW1P_DISABLE
 0

	)

612 
	#DSI_LP_DSW1P_ENABLE
 
DSI_CMCR_DSW1TX


	)

620 
	#DSI_LP_DSR0P_DISABLE
 0

	)

621 
	#DSI_LP_DSR0P_ENABLE
 
DSI_CMCR_DSR0TX


	)

629 
	#DSI_LP_DLW_DISABLE
 0

	)

630 
	#DSI_LP_DLW_ENABLE
 
DSI_CMCR_DLWTX


	)

638 
	#DSI_LP_MRDP_DISABLE
 0

	)

639 
	#DSI_LP_MRDP_ENABLE
 
DSI_CMCR_MRDPS


	)

647 
	#DSI_HS_PM_DISABLE
 0

	)

648 
	#DSI_HS_PM_ENABLE
 
DSI_TCCR4_PM


	)

657 
	#DSI_AUTO_CLK_LANE_CTRL_DISABLE
 0

	)

658 
	#DSI_AUTO_CLK_LANE_CTRL_ENABLE
 
DSI_CLCR_ACR


	)

666 
	#DSI_ONE_DATA_LANE
 0

	)

667 
	#DSI_TWO_DATA_LANES
 1

	)

675 
	#DSI_FLOW_CONTROL_CRC_RX
 
DSI_PCR_CRCRXE


	)

676 
	#DSI_FLOW_CONTROL_ECC_RX
 
DSI_PCR_ECCRXE


	)

677 
	#DSI_FLOW_CONTROL_BTA
 
DSI_PCR_BTAE


	)

678 
	#DSI_FLOW_CONTROL_EOTP_RX
 
DSI_PCR_ETRXE


	)

679 
	#DSI_FLOW_CONTROL_EOTP_TX
 
DSI_PCR_ETTXE


	)

680 
	#DSI_FLOW_CONTROL_ALL
 (
DSI_FLOW_CONTROL_CRC_RX
 | 
DSI_FLOW_CONTROL_ECC_RX
 | \

681 
DSI_FLOW_CONTROL_BTA
 | 
DSI_FLOW_CONTROL_EOTP_RX
 | \

682 
DSI_FLOW_CONTROL_EOTP_TX
)

	)

690 
	#DSI_RGB565
 ((
uöt32_t
)0x00000000Ë

	)

691 
	#DSI_RGB666
 ((
uöt32_t
)0x00000003Ë

	)

692 
	#DSI_RGB888
 ((
uöt32_t
)0x00000005)

	)

700 
	#DSI_LOOSELY_PACKED_ENABLE
 
DSI_LCOLCR_LPE


	)

701 
	#DSI_LOOSELY_PACKED_DISABLE
 0

	)

709 
	#DSI_HSYNC_ACTIVE_HIGH
 0

	)

710 
	#DSI_HSYNC_ACTIVE_LOW
 
DSI_LPCR_HSP


	)

718 
	#DSI_VSYNC_ACTIVE_HIGH
 0

	)

719 
	#DSI_VSYNC_ACTIVE_LOW
 
DSI_LPCR_VSP


	)

727 
	#DSI_DATA_ENABLE_ACTIVE_HIGH
 0

	)

728 
	#DSI_DATA_ENABLE_ACTIVE_LOW
 
DSI_LPCR_DEP


	)

736 
	#DSI_PLL_IN_DIV1
 ((
uöt32_t
)0x00000001)

	)

737 
	#DSI_PLL_IN_DIV2
 ((
uöt32_t
)0x00000002)

	)

738 
	#DSI_PLL_IN_DIV3
 ((
uöt32_t
)0x00000003)

	)

739 
	#DSI_PLL_IN_DIV4
 ((
uöt32_t
)0x00000004)

	)

740 
	#DSI_PLL_IN_DIV5
 ((
uöt32_t
)0x00000005)

	)

741 
	#DSI_PLL_IN_DIV6
 ((
uöt32_t
)0x00000006)

	)

742 
	#DSI_PLL_IN_DIV7
 ((
uöt32_t
)0x00000007)

	)

750 
	#DSI_PLL_OUT_DIV1
 ((
uöt32_t
)0x00000000)

	)

751 
	#DSI_PLL_OUT_DIV2
 ((
uöt32_t
)0x00000001)

	)

752 
	#DSI_PLL_OUT_DIV4
 ((
uöt32_t
)0x00000002)

	)

753 
	#DSI_PLL_OUT_DIV8
 ((
uöt32_t
)0x00000003)

	)

761 
	#DSI_FLAG_TE
 
DSI_WISR_TEIF


	)

762 
	#DSI_FLAG_ER
 
DSI_WISR_ERIF


	)

763 
	#DSI_FLAG_BUSY
 
DSI_WISR_BUSY


	)

764 
	#DSI_FLAG_PLLLS
 
DSI_WISR_PLLLS


	)

765 
	#DSI_FLAG_PLLL
 
DSI_WISR_PLLLIF


	)

766 
	#DSI_FLAG_PLLU
 
DSI_WISR_PLLUIF


	)

767 
	#DSI_FLAG_RRS
 
DSI_WISR_RRS


	)

768 
	#DSI_FLAG_RR
 
DSI_WISR_RRIF


	)

776 
	#DSI_IT_TE
 
DSI_WIER_TEIE


	)

777 
	#DSI_IT_ER
 
DSI_WIER_ERIE


	)

778 
	#DSI_IT_PLLL
 
DSI_WIER_PLLLIE


	)

779 
	#DSI_IT_PLLU
 
DSI_WIER_PLLUIE


	)

780 
	#DSI_IT_RR
 
DSI_WIER_RRIE


	)

788 
	#DSI_DCS_SHORT_PKT_WRITE_P0
 ((
uöt32_t
)0x00000005Ë

	)

789 
	#DSI_DCS_SHORT_PKT_WRITE_P1
 ((
uöt32_t
)0x00000015Ë

	)

790 
	#DSI_GEN_SHORT_PKT_WRITE_P0
 ((
uöt32_t
)0x00000003Ë

	)

791 
	#DSI_GEN_SHORT_PKT_WRITE_P1
 ((
uöt32_t
)0x00000013Ë

	)

792 
	#DSI_GEN_SHORT_PKT_WRITE_P2
 ((
uöt32_t
)0x00000023Ë

	)

800 
	#DSI_DCS_LONG_PKT_WRITE
 ((
uöt32_t
)0x00000039Ë

	)

801 
	#DSI_GEN_LONG_PKT_WRITE
 ((
uöt32_t
)0x00000029Ë

	)

809 
	#DSI_DCS_SHORT_PKT_READ
 ((
uöt32_t
)0x00000006Ë

	)

810 
	#DSI_GEN_SHORT_PKT_READ_P0
 ((
uöt32_t
)0x00000004Ë

	)

811 
	#DSI_GEN_SHORT_PKT_READ_P1
 ((
uöt32_t
)0x00000014Ë

	)

812 
	#DSI_GEN_SHORT_PKT_READ_P2
 ((
uöt32_t
)0x00000024Ë

	)

820 
	#HAL_DSI_ERROR_NONE
 0

	)

821 
	#HAL_DSI_ERROR_ACK
 ((
uöt32_t
)0x00000001Ë

	)

822 
	#HAL_DSI_ERROR_PHY
 ((
uöt32_t
)0x00000002Ë

	)

823 
	#HAL_DSI_ERROR_TX
 ((
uöt32_t
)0x00000004Ë

	)

824 
	#HAL_DSI_ERROR_RX
 ((
uöt32_t
)0x00000008Ë

	)

825 
	#HAL_DSI_ERROR_ECC
 ((
uöt32_t
)0x00000010Ë

	)

826 
	#HAL_DSI_ERROR_CRC
 ((
uöt32_t
)0x00000020Ë

	)

827 
	#HAL_DSI_ERROR_PSE
 ((
uöt32_t
)0x00000040Ë

	)

828 
	#HAL_DSI_ERROR_EOT
 ((
uöt32_t
)0x00000080Ë

	)

829 
	#HAL_DSI_ERROR_OVF
 ((
uöt32_t
)0x00000100Ë

	)

830 
	#HAL_DSI_ERROR_GEN
 ((
uöt32_t
)0x00000200Ë

	)

838 
	#DSI_CLOCK_LANE
 ((
uöt32_t
)0x00000000)

	)

839 
	#DSI_DATA_LANES
 ((
uöt32_t
)0x00000001)

	)

847 
	#DSI_SLEW_RATE_HSTX
 ((
uöt32_t
)0x00000000)

	)

848 
	#DSI_SLEW_RATE_LPTX
 ((
uöt32_t
)0x00000001)

	)

849 
	#DSI_HS_DELAY
 ((
uöt32_t
)0x00000002)

	)

857 
	#DSI_SWAP_LANE_PINS
 ((
uöt32_t
)0x00000000)

	)

858 
	#DSI_INVERT_HS_SIGNAL
 ((
uöt32_t
)0x00000001)

	)

866 
	#DSI_CLOCK_LANE
 ((
uöt32_t
)0x00000000)

	)

867 
	#DSI_DATA_LANE0
 ((
uöt32_t
)0x00000001)

	)

868 
	#DSI_DATA_LANE1
 ((
uöt32_t
)0x00000002)

	)

876 
	#DSI_TCLK_POST
 ((
uöt32_t
)0x00000000)

	)

877 
	#DSI_TLPX_CLK
 ((
uöt32_t
)0x00000001)

	)

878 
	#DSI_THS_EXIT
 ((
uöt32_t
)0x00000002)

	)

879 
	#DSI_TLPX_DATA
 ((
uöt32_t
)0x00000003)

	)

880 
	#DSI_THS_ZERO
 ((
uöt32_t
)0x00000004)

	)

881 
	#DSI_THS_TRAIL
 ((
uöt32_t
)0x00000005)

	)

882 
	#DSI_THS_PREPARE
 ((
uöt32_t
)0x00000006)

	)

883 
	#DSI_TCLK_ZERO
 ((
uöt32_t
)0x00000007)

	)

884 
	#DSI_TCLK_PREPARE
 ((
uöt32_t
)0x00000008)

	)

895 
	#__HAL_DSI_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
DSI_CR_EN
)

	)

902 
	#__HAL_DSI_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~
DSI_CR_EN
)

	)

909 
	#__HAL_DSI_WRAPPER_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
WCR
 |
DSI_WCR_DSIEN
)

	)

916 
	#__HAL_DSI_WRAPPER_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
WCR
 &~
DSI_WCR_DSIEN
)

	)

923 
	#__HAL_DSI_PLL_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
WRPCR
 |
DSI_WRPCR_PLLEN
)

	)

930 
	#__HAL_DSI_PLL_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
WRPCR
 &~
DSI_WRPCR_PLLEN
)

	)

937 
	#__HAL_DSI_REG_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
WRPCR
 |
DSI_WRPCR_REGEN
)

	)

944 
	#__HAL_DSI_REG_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
WRPCR
 &~
DSI_WRPCR_REGEN
)

	)

961 
	#__HAL_DSI_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
WISR
 & (__FLAG__))

	)

975 
	#__HAL_DSI_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
WIFCR
 = (__FLAG__))

	)

989 
	#__HAL_DSI_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
WIER
 |(__INTERRUPT__))

	)

1003 
	#__HAL_DSI_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
WIER
 &~(__INTERRUPT__))

	)

1017 
	#__HAL_DSI_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
WISR
 & (__INTERRUPT__))

	)

1023 
HAL_SètusTy≥Def
 
HAL_DSI_Inô
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_PLLInôTy≥Def
 *
PLLInô
);

1024 
HAL_SètusTy≥Def
 
HAL_DSI_DeInô
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1025 
HAL_DSI_M•Inô
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1026 
HAL_DSI_M•DeInô
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1028 
HAL_DSI_IRQH™dÀr
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1029 
HAL_DSI_TórögEf„˘CÆlback
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1030 
HAL_DSI_EndOfRe‰eshCÆlback
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1031 
HAL_DSI_Eº‹CÆlback
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1033 
HAL_SètusTy≥Def
 
HAL_DSI_SëGíîicVCID
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
VútuÆCh™√lID
);

1034 
HAL_SètusTy≥Def
 
HAL_DSI_C⁄figVideoMode
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_VidCfgTy≥Def
 *
VidCfg
);

1035 
HAL_SètusTy≥Def
 
HAL_DSI_C⁄figAd≠ãdComm™dMode
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_CmdCfgTy≥Def
 *
CmdCfg
);

1036 
HAL_SètusTy≥Def
 
HAL_DSI_C⁄figComm™d
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_LPCmdTy≥Def
 *
LPCmd
);

1037 
HAL_SètusTy≥Def
 
HAL_DSI_C⁄figFlowC⁄åﬁ
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
FlowC⁄åﬁ
);

1038 
HAL_SètusTy≥Def
 
HAL_DSI_C⁄figPhyTimî
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_PHY_TimîTy≥Def
 *
PhyTimögs
);

1039 
HAL_SètusTy≥Def
 
HAL_DSI_C⁄figHo°Timeouts
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_HOST_TimeoutTy≥Def
 *
Ho°Timeouts
);

1040 
HAL_SètusTy≥Def
 
HAL_DSI_Sèπ
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1041 
HAL_SètusTy≥Def
 
HAL_DSI_St›
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1042 
HAL_SètusTy≥Def
 
HAL_DSI_Re‰esh
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1043 
HAL_SètusTy≥Def
 
HAL_DSI_Cﬁ‹Mode
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Cﬁ‹Mode
);

1044 
HAL_SètusTy≥Def
 
HAL_DSI_Shutdown
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Shutdown
);

1045 
HAL_SètusTy≥Def
 
HAL_DSI_Sh‹tWrôe
(
DSI_H™dÀTy≥Def
 *
hdsi
,

1046 
uöt32_t
 
Ch™√lID
,

1047 
uöt32_t
 
Mode
,

1048 
uöt32_t
 
P¨am1
,

1049 
uöt32_t
 
P¨am2
);

1050 
HAL_SètusTy≥Def
 
HAL_DSI_L⁄gWrôe
(
DSI_H™dÀTy≥Def
 *
hdsi
,

1051 
uöt32_t
 
Ch™√lID
,

1052 
uöt32_t
 
Mode
,

1053 
uöt32_t
 
Nb∑øms
,

1054 
uöt32_t
 
P¨am1
,

1055 
uöt8_t
* 
P¨amëîsTabÀ
);

1056 
HAL_SètusTy≥Def
 
HAL_DSI_Ród
(
DSI_H™dÀTy≥Def
 *
hdsi
,

1057 
uöt32_t
 
Ch™√lNbr
,

1058 
uöt8_t
* 
Aºay
,

1059 
uöt32_t
 
Size
,

1060 
uöt32_t
 
Mode
,

1061 
uöt32_t
 
DCSCmd
,

1062 
uöt8_t
* 
P¨amëîsTabÀ
);

1063 
HAL_SètusTy≥Def
 
HAL_DSI_E¡îULPMD©a
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1064 
HAL_SètusTy≥Def
 
HAL_DSI_ExôULPMD©a
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1065 
HAL_SètusTy≥Def
 
HAL_DSI_E¡îULPM
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1066 
HAL_SètusTy≥Def
 
HAL_DSI_ExôULPM
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1068 
HAL_SètusTy≥Def
 
HAL_DSI_P©ã∫Gíî©‹Sèπ
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Mode
, uöt32_à
Orõ¡©i⁄
);

1069 
HAL_SètusTy≥Def
 
HAL_DSI_P©ã∫Gíî©‹St›
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1071 
HAL_SètusTy≥Def
 
HAL_DSI_SëSÀwR©eAndDñayTunög
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
CommDñay
, uöt32_à
L™e
, uöt32_à
VÆue
);

1072 
HAL_SètusTy≥Def
 
HAL_DSI_SëLowPowîRXFûãr
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Fªquícy
);

1073 
HAL_SètusTy≥Def
 
HAL_DSI_SëSDD
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
);

1074 
HAL_SètusTy≥Def
 
HAL_DSI_SëL™ePösC⁄figuøti⁄
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Cu°omL™e
, uöt32_à
L™e
, 
Fun˘i⁄ÆSèã
 
Sèã
);

1075 
HAL_SètusTy≥Def
 
HAL_DSI_SëPHYTimögs
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Timög
, 
Fun˘i⁄ÆSèã
 
Sèã
, uöt32_à
VÆue
);

1076 
HAL_SètusTy≥Def
 
HAL_DSI_F‹˚TXSt›Mode
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
L™e
, 
Fun˘i⁄ÆSèã
 
Sèã
);

1077 
HAL_SètusTy≥Def
 
HAL_DSI_F‹˚RXLowPowî
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
);

1078 
HAL_SètusTy≥Def
 
HAL_DSI_F‹˚D©aL™esInRX
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
);

1079 
HAL_SètusTy≥Def
 
HAL_DSI_SëPuŒDown
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
);

1080 
HAL_SètusTy≥Def
 
HAL_DSI_SëC⁄ã¡i⁄Dëe˘i⁄Off
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
);

1082 
uöt32_t
 
HAL_DSI_GëEº‹
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1083 
HAL_SètusTy≥Def
 
HAL_DSI_C⁄figEº‹M⁄ô‹
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
A˘iveEº‹s
);

1084 
HAL_DSI_SèãTy≥Def
 
HAL_DSI_GëSèã
(
DSI_H™dÀTy≥Def
 *
hdsi
);

1120 
	#DSI_MAX_RETURN_PKT_SIZE
 ((
uöt32_t
)0x00000037Ë

	)

1129 
	#IS_DSI_PLL_NDIV
(
NDIV
Ë((10 <(NDIV)Ë&& ((NDIVË<125))

	)

1130 
	#IS_DSI_PLL_IDF
(
IDF
Ë(((IDFË=
DSI_PLL_IN_DIV1
) || \

1131 ((
IDF
Ë=
DSI_PLL_IN_DIV2
) || \

1132 ((
IDF
Ë=
DSI_PLL_IN_DIV3
) || \

1133 ((
IDF
Ë=
DSI_PLL_IN_DIV4
) || \

1134 ((
IDF
Ë=
DSI_PLL_IN_DIV5
) || \

1135 ((
IDF
Ë=
DSI_PLL_IN_DIV6
) || \

1136 ((
IDF
Ë=
DSI_PLL_IN_DIV7
))

	)

1137 
	#IS_DSI_PLL_ODF
(
ODF
Ë(((ODFË=
DSI_PLL_OUT_DIV1
) || \

1138 ((
ODF
Ë=
DSI_PLL_OUT_DIV2
) || \

1139 ((
ODF
Ë=
DSI_PLL_OUT_DIV4
) || \

1140 ((
ODF
Ë=
DSI_PLL_OUT_DIV8
))

	)

1141 
	#IS_DSI_AUTO_CLKLANE_CONTROL
(
AutoClkL™e
Ë(((AutoClkL™eË=
DSI_AUTO_CLK_LANE_CTRL_DISABLE
Ë|| ((AutoClkL™eË=
DSI_AUTO_CLK_LANE_CTRL_ENABLE
))

	)

1142 
	#IS_DSI_NUMBER_OF_LANES
(
NumbîOfL™es
Ë(((NumbîOfL™esË=
DSI_ONE_DATA_LANE
Ë|| ((NumbîOfL™esË=
DSI_TWO_DATA_LANES
))

	)

1143 
	#IS_DSI_FLOW_CONTROL
(
FlowC⁄åﬁ
Ë(((FlowC⁄åﬁË| 
DSI_FLOW_CONTROL_ALL
Ë=DSI_FLOW_CONTROL_ALL)

	)

1144 
	#IS_DSI_COLOR_CODING
(
Cﬁ‹Codög
Ë((Cﬁ‹CodögË<5)

	)

1145 
	#IS_DSI_LOOSELY_PACKED
(
Loo£lyPacked
Ë(((Loo£lyPackedË=
DSI_LOOSELY_PACKED_ENABLE
Ë|| ((Loo£lyPackedË=
DSI_LOOSELY_PACKED_DISABLE
))

	)

1146 
	#IS_DSI_DE_POLARITY
(
D©aE«bÀ
Ë(((D©aE«bÀË=
DSI_DATA_ENABLE_ACTIVE_HIGH
Ë|| ((D©aE«bÀË=
DSI_DATA_ENABLE_ACTIVE_LOW
))

	)

1147 
	#IS_DSI_VSYNC_POLARITY
(
VSYNC
Ë(((VSYNCË=
DSI_VSYNC_ACTIVE_HIGH
Ë|| ((VSYNCË=
DSI_VSYNC_ACTIVE_LOW
))

	)

1148 
	#IS_DSI_HSYNC_POLARITY
(
HSYNC
Ë(((HSYNCË=
DSI_HSYNC_ACTIVE_HIGH
Ë|| ((HSYNCË=
DSI_HSYNC_ACTIVE_LOW
))

	)

1149 
	#IS_DSI_VIDEO_MODE_TYPE
(
VideoModeTy≥
Ë(((VideoModeTy≥Ë=
DSI_VID_MODE_NB_PULSES
) || \

1150 ((
VideoModeTy≥
Ë=
DSI_VID_MODE_NB_EVENTS
) || \

1151 ((
VideoModeTy≥
Ë=
DSI_VID_MODE_BURST
))

	)

1152 
	#IS_DSI_COLOR_MODE
(
Cﬁ‹Mode
Ë(((Cﬁ‹ModeË=
DSI_COLOR_MODE_FULL
Ë|| ((Cﬁ‹ModeË=
DSI_COLOR_MODE_EIGHT
))

	)

1153 
	#IS_DSI_SHUT_DOWN
(
ShutDown
Ë(((ShutDownË=
DSI_DISPLAY_ON
Ë|| ((ShutDownË=
DSI_DISPLAY_OFF
))

	)

1154 
	#IS_DSI_LP_COMMAND
(
LPComm™d
Ë(((LPComm™dË=
DSI_LP_COMMAND_DISABLE
Ë|| ((LPComm™dË=
DSI_LP_COMMAND_ENABLE
))

	)

1155 
	#IS_DSI_LP_HFP
(
LPHFP
Ë(((LPHFPË=
DSI_LP_HFP_DISABLE
Ë|| ((LPHFPË=
DSI_LP_HFP_ENABLE
))

	)

1156 
	#IS_DSI_LP_HBP
(
LPHBP
Ë(((LPHBPË=
DSI_LP_HBP_DISABLE
Ë|| ((LPHBPË=
DSI_LP_HBP_ENABLE
))

	)

1157 
	#IS_DSI_LP_VACTIVE
(
LPVA˘ive
Ë(((LPVA˘iveË=
DSI_LP_VACT_DISABLE
Ë|| ((LPVA˘iveË=
DSI_LP_VACT_ENABLE
))

	)

1158 
	#IS_DSI_LP_VFP
(
LPVFP
Ë(((LPVFPË=
DSI_LP_VFP_DISABLE
Ë|| ((LPVFPË=
DSI_LP_VFP_ENABLE
))

	)

1159 
	#IS_DSI_LP_VBP
(
LPVBP
Ë(((LPVBPË=
DSI_LP_VBP_DISABLE
Ë|| ((LPVBPË=
DSI_LP_VBP_ENABLE
))

	)

1160 
	#IS_DSI_LP_VSYNC
(
LPVSYNC
Ë(((LPVSYNCË=
DSI_LP_VSYNC_DISABLE
Ë|| ((LPVSYNCË=
DSI_LP_VSYNC_ENABLE
))

	)

1161 
	#IS_DSI_FBTAA
(
FømeBTAAcknowÀdge
Ë(((FømeBTAAcknowÀdgeË=
DSI_FBTAA_DISABLE
Ë|| ((FømeBTAAcknowÀdgeË=
DSI_FBTAA_ENABLE
))

	)

1162 
	#IS_DSI_TE_SOURCE
(
TESour˚
Ë(((TESour˚Ë=
DSI_TE_DSILINK
Ë|| ((TESour˚Ë=
DSI_TE_EXTERNAL
))

	)

1163 
	#IS_DSI_TE_POLARITY
(
TEPﬁ¨ôy
Ë(((TEPﬁ¨ôyË=
DSI_TE_RISING_EDGE
Ë|| ((TEPﬁ¨ôyË=
DSI_TE_FALLING_EDGE
))

	)

1164 
	#IS_DSI_AUTOMATIC_REFRESH
(
Autom©icRe‰esh
Ë(((Autom©icRe‰eshË=
DSI_AR_DISABLE
Ë|| ((Autom©icRe‰eshË=
DSI_AR_ENABLE
))

	)

1165 
	#IS_DSI_VS_POLARITY
(
VSPﬁ¨ôy
Ë(((VSPﬁ¨ôyË=
DSI_VSYNC_FALLING
Ë|| ((VSPﬁ¨ôyË=
DSI_VSYNC_RISING
))

	)

1166 
	#IS_DSI_TE_ACK_REQUEST
(
TEAcknowÀdgeReque°
Ë(((TEAcknowÀdgeReque°Ë=
DSI_TE_ACKNOWLEDGE_DISABLE
Ë|| ((TEAcknowÀdgeReque°Ë=
DSI_TE_ACKNOWLEDGE_ENABLE
))

	)

1167 
	#IS_DSI_ACK_REQUEST
(
AcknowÀdgeReque°
Ë(((AcknowÀdgeReque°Ë=
DSI_ACKNOWLEDGE_DISABLE
Ë|| ((AcknowÀdgeReque°Ë=
DSI_ACKNOWLEDGE_ENABLE
))

	)

1168 
	#IS_DSI_LP_GSW0P
(
LP_GSW0P
Ë(((LP_GSW0PË=
DSI_LP_GSW0P_DISABLE
Ë|| ((LP_GSW0PË=
DSI_LP_GSW0P_ENABLE
))

	)

1169 
	#IS_DSI_LP_GSW1P
(
LP_GSW1P
Ë(((LP_GSW1PË=
DSI_LP_GSW1P_DISABLE
Ë|| ((LP_GSW1PË=
DSI_LP_GSW1P_ENABLE
))

	)

1170 
	#IS_DSI_LP_GSW2P
(
LP_GSW2P
Ë(((LP_GSW2PË=
DSI_LP_GSW2P_DISABLE
Ë|| ((LP_GSW2PË=
DSI_LP_GSW2P_ENABLE
))

	)

1171 
	#IS_DSI_LP_GSR0P
(
LP_GSR0P
Ë(((LP_GSR0PË=
DSI_LP_GSR0P_DISABLE
Ë|| ((LP_GSR0PË=
DSI_LP_GSR0P_ENABLE
))

	)

1172 
	#IS_DSI_LP_GSR1P
(
LP_GSR1P
Ë(((LP_GSR1PË=
DSI_LP_GSR1P_DISABLE
Ë|| ((LP_GSR1PË=
DSI_LP_GSR1P_ENABLE
))

	)

1173 
	#IS_DSI_LP_GSR2P
(
LP_GSR2P
Ë(((LP_GSR2PË=
DSI_LP_GSR2P_DISABLE
Ë|| ((LP_GSR2PË=
DSI_LP_GSR2P_ENABLE
))

	)

1174 
	#IS_DSI_LP_GLW
(
LP_GLW
Ë(((LP_GLWË=
DSI_LP_GLW_DISABLE
Ë|| ((LP_GLWË=
DSI_LP_GLW_ENABLE
))

	)

1175 
	#IS_DSI_LP_DSW0P
(
LP_DSW0P
Ë(((LP_DSW0PË=
DSI_LP_DSW0P_DISABLE
Ë|| ((LP_DSW0PË=
DSI_LP_DSW0P_ENABLE
))

	)

1176 
	#IS_DSI_LP_DSW1P
(
LP_DSW1P
Ë(((LP_DSW1PË=
DSI_LP_DSW1P_DISABLE
Ë|| ((LP_DSW1PË=
DSI_LP_DSW1P_ENABLE
))

	)

1177 
	#IS_DSI_LP_DSR0P
(
LP_DSR0P
Ë(((LP_DSR0PË=
DSI_LP_DSR0P_DISABLE
Ë|| ((LP_DSR0PË=
DSI_LP_DSR0P_ENABLE
))

	)

1178 
	#IS_DSI_LP_DLW
(
LP_DLW
Ë(((LP_DLWË=
DSI_LP_DLW_DISABLE
Ë|| ((LP_DLWË=
DSI_LP_DLW_ENABLE
))

	)

1179 
	#IS_DSI_LP_MRDP
(
LP_MRDP
Ë(((LP_MRDPË=
DSI_LP_MRDP_DISABLE
Ë|| ((LP_MRDPË=
DSI_LP_MRDP_ENABLE
))

	)

1180 
	#IS_DSI_SHORT_WRITE_PACKET_TYPE
(
MODE
Ë(((MODEË=
DSI_DCS_SHORT_PKT_WRITE_P0
) || \

1181 ((
MODE
Ë=
DSI_DCS_SHORT_PKT_WRITE_P1
) || \

1182 ((
MODE
Ë=
DSI_GEN_SHORT_PKT_WRITE_P0
) || \

1183 ((
MODE
Ë=
DSI_GEN_SHORT_PKT_WRITE_P1
) || \

1184 ((
MODE
Ë=
DSI_GEN_SHORT_PKT_WRITE_P2
))

	)

1185 
	#IS_DSI_LONG_WRITE_PACKET_TYPE
(
MODE
Ë(((MODEË=
DSI_DCS_LONG_PKT_WRITE
) || \

1186 ((
MODE
Ë=
DSI_GEN_LONG_PKT_WRITE
))

	)

1187 
	#IS_DSI_READ_PACKET_TYPE
(
MODE
Ë(((MODEË=
DSI_DCS_SHORT_PKT_READ
) || \

1188 ((
MODE
Ë=
DSI_GEN_SHORT_PKT_READ_P0
) || \

1189 ((
MODE
Ë=
DSI_GEN_SHORT_PKT_READ_P1
) || \

1190 ((
MODE
Ë=
DSI_GEN_SHORT_PKT_READ_P2
))

	)

1191 
	#IS_DSI_COMMUNICATION_DELAY
(
CommDñay
Ë(((CommDñayË=
DSI_SLEW_RATE_HSTX
Ë|| ((CommDñayË=
DSI_SLEW_RATE_LPTX
Ë|| ((CommDñayË=
DSI_HS_DELAY
))

	)

1192 
	#IS_DSI_LANE_GROUP
(
L™e
Ë(((L™eË=
DSI_CLOCK_LANE
Ë|| ((L™eË=
DSI_DATA_LANES
))

	)

1193 
	#IS_DSI_CUSTOM_LANE
(
Cu°omL™e
Ë(((Cu°omL™eË=
DSI_SWAP_LANE_PINS
Ë|| ((Cu°omL™eË=
DSI_INVERT_HS_SIGNAL
))

	)

1194 
	#IS_DSI_LANE
(
L™e
Ë(((L™eË=
DSI_CLOCK_LANE
Ë|| ((L™eË=
DSI_DATA_LANE0
Ë|| ((L™eË=
DSI_DATA_LANE1
))

	)

1195 
	#IS_DSI_PHY_TIMING
(
Timög
Ë(((TimögË=
DSI_TCLK_POST
 ) || \

1196 ((
Timög
Ë=
DSI_TLPX_CLK
 ) || \

1197 ((
Timög
Ë=
DSI_THS_EXIT
 ) || \

1198 ((
Timög
Ë=
DSI_TLPX_DATA
 ) || \

1199 ((
Timög
Ë=
DSI_THS_ZERO
 ) || \

1200 ((
Timög
Ë=
DSI_THS_TRAIL
 ) || \

1201 ((
Timög
Ë=
DSI_THS_PREPARE
 ) || \

1202 ((
Timög
Ë=
DSI_TCLK_ZERO
 ) || \

1203 ((
Timög
Ë=
DSI_TCLK_PREPARE
))

	)

1236 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_eth.h

39 #i‚de‡
__STM32F4xx_HAL_ETH_H


40 
	#__STM32F4xx_HAL_ETH_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F407xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) ||\

47 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

49 
	~"°m32f4xx_hÆ_def.h
"

62 
	#IS_ETH_PHY_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0x20)

	)

63 
	#IS_ETH_AUTONEGOTIATION
(
CMD
Ë(((CMDË=
ETH_AUTONEGOTIATION_ENABLE
) || \

64 ((
CMD
Ë=
ETH_AUTONEGOTIATION_DISABLE
))

	)

65 
	#IS_ETH_SPEED
(
SPEED
Ë(((SPEEDË=
ETH_SPEED_10M
) || \

66 ((
SPEED
Ë=
ETH_SPEED_100M
))

	)

67 
	#IS_ETH_DUPLEX_MODE
(
MODE
Ë(((MODEË=
ETH_MODE_FULLDUPLEX
) || \

68 ((
MODE
Ë=
ETH_MODE_HALFDUPLEX
))

	)

69 
	#IS_ETH_RX_MODE
(
MODE
Ë(((MODEË=
ETH_RXPOLLING_MODE
) || \

70 ((
MODE
Ë=
ETH_RXINTERRUPT_MODE
))

	)

71 
	#IS_ETH_CHECKSUM_MODE
(
MODE
Ë(((MODEË=
ETH_CHECKSUM_BY_HARDWARE
) || \

72 ((
MODE
Ë=
ETH_CHECKSUM_BY_SOFTWARE
))

	)

73 
	#IS_ETH_MEDIA_INTERFACE
(
MODE
Ë(((MODEË=
ETH_MEDIA_INTERFACE_MII
) || \

74 ((
MODE
Ë=
ETH_MEDIA_INTERFACE_RMII
))

	)

75 
	#IS_ETH_WATCHDOG
(
CMD
Ë(((CMDË=
ETH_WATCHDOG_ENABLE
) || \

76 ((
CMD
Ë=
ETH_WATCHDOG_DISABLE
))

	)

77 
	#IS_ETH_JABBER
(
CMD
Ë(((CMDË=
ETH_JABBER_ENABLE
) || \

78 ((
CMD
Ë=
ETH_JABBER_DISABLE
))

	)

79 
	#IS_ETH_INTER_FRAME_GAP
(
GAP
Ë(((GAPË=
ETH_INTERFRAMEGAP_96BIT
) || \

80 ((
GAP
Ë=
ETH_INTERFRAMEGAP_88BIT
) || \

81 ((
GAP
Ë=
ETH_INTERFRAMEGAP_80BIT
) || \

82 ((
GAP
Ë=
ETH_INTERFRAMEGAP_72BIT
) || \

83 ((
GAP
Ë=
ETH_INTERFRAMEGAP_64BIT
) || \

84 ((
GAP
Ë=
ETH_INTERFRAMEGAP_56BIT
) || \

85 ((
GAP
Ë=
ETH_INTERFRAMEGAP_48BIT
) || \

86 ((
GAP
Ë=
ETH_INTERFRAMEGAP_40BIT
))

	)

87 
	#IS_ETH_CARRIER_SENSE
(
CMD
Ë(((CMDË=
ETH_CARRIERSENCE_ENABLE
) || \

88 ((
CMD
Ë=
ETH_CARRIERSENCE_DISABLE
))

	)

89 
	#IS_ETH_RECEIVE_OWN
(
CMD
Ë(((CMDË=
ETH_RECEIVEOWN_ENABLE
) || \

90 ((
CMD
Ë=
ETH_RECEIVEOWN_DISABLE
))

	)

91 
	#IS_ETH_LOOPBACK_MODE
(
CMD
Ë(((CMDË=
ETH_LOOPBACKMODE_ENABLE
) || \

92 ((
CMD
Ë=
ETH_LOOPBACKMODE_DISABLE
))

	)

93 
	#IS_ETH_CHECKSUM_OFFLOAD
(
CMD
Ë(((CMDË=
ETH_CHECKSUMOFFLAOD_ENABLE
) || \

94 ((
CMD
Ë=
ETH_CHECKSUMOFFLAOD_DISABLE
))

	)

95 
	#IS_ETH_RETRY_TRANSMISSION
(
CMD
Ë(((CMDË=
ETH_RETRYTRANSMISSION_ENABLE
) || \

96 ((
CMD
Ë=
ETH_RETRYTRANSMISSION_DISABLE
))

	)

97 
	#IS_ETH_AUTOMATIC_PADCRC_STRIP
(
CMD
Ë(((CMDË=
ETH_AUTOMATICPADCRCSTRIP_ENABLE
) || \

98 ((
CMD
Ë=
ETH_AUTOMATICPADCRCSTRIP_DISABLE
))

	)

99 
	#IS_ETH_BACKOFF_LIMIT
(
LIMIT
Ë(((LIMITË=
ETH_BACKOFFLIMIT_10
) || \

100 ((
LIMIT
Ë=
ETH_BACKOFFLIMIT_8
) || \

101 ((
LIMIT
Ë=
ETH_BACKOFFLIMIT_4
) || \

102 ((
LIMIT
Ë=
ETH_BACKOFFLIMIT_1
))

	)

103 
	#IS_ETH_DEFERRAL_CHECK
(
CMD
Ë(((CMDË=
ETH_DEFFERRALCHECK_ENABLE
) || \

104 ((
CMD
Ë=
ETH_DEFFERRALCHECK_DISABLE
))

	)

105 
	#IS_ETH_RECEIVE_ALL
(
CMD
Ë(((CMDË=
ETH_RECEIVEALL_ENABLE
) || \

106 ((
CMD
Ë=
ETH_RECEIVEAŒ_DISABLE
))

	)

107 
	#IS_ETH_SOURCE_ADDR_FILTER
(
CMD
Ë(((CMDË=
ETH_SOURCEADDRFILTER_NORMAL_ENABLE
) || \

108 ((
CMD
Ë=
ETH_SOURCEADDRFILTER_INVERSE_ENABLE
) || \

109 ((
CMD
Ë=
ETH_SOURCEADDRFILTER_DISABLE
))

	)

110 
	#IS_ETH_CONTROL_FRAMES
(
PASS
Ë(((PASSË=
ETH_PASSCONTROLFRAMES_BLOCKALL
) || \

111 ((
PASS
Ë=
ETH_PASSCONTROLFRAMES_FORWARDALL
) || \

112 ((
PASS
Ë=
ETH_PASSCONTROLFRAMES_FORWARDPASSEDADDRFILTER
))

	)

113 
	#IS_ETH_BROADCAST_FRAMES_RECEPTION
(
CMD
Ë(((CMDË=
ETH_BROADCASTFRAMESRECEPTION_ENABLE
) || \

114 ((
CMD
Ë=
ETH_BROADCASTFRAMESRECEPTION_DISABLE
))

	)

115 
	#IS_ETH_DESTINATION_ADDR_FILTER
(
FILTER
Ë(((FILTERË=
ETH_DESTINATIONADDRFILTER_NORMAL
) || \

116 ((
FILTER
Ë=
ETH_DESTINATIONADDRFILTER_INVERSE
))

	)

117 
	#IS_ETH_PROMISCUOUS_MODE
(
CMD
Ë(((CMDË=
ETH_PROMISCUOUS_MODE_ENABLE
) || \

118 ((
CMD
Ë=
ETH_PROMISCUOUS_MODE_DISABLE
))

	)

119 
	#IS_ETH_MULTICAST_FRAMES_FILTER
(
FILTER
Ë(((FILTERË=
ETH_MULTICASTFRAMESFILTER_PERFECTHASHTABLE
) || \

120 ((
FILTER
Ë=
ETH_MULTICASTFRAMESFILTER_HASHTABLE
) || \

121 ((
FILTER
Ë=
ETH_MULTICASTFRAMESFILTER_PERFECT
) || \

122 ((
FILTER
Ë=
ETH_MULTICASTFRAMESFILTER_NONE
))

	)

123 
	#IS_ETH_UNICAST_FRAMES_FILTER
(
FILTER
Ë(((FILTERË=
ETH_UNICASTFRAMESFILTER_PERFECTHASHTABLE
) || \

124 ((
FILTER
Ë=
ETH_UNICASTFRAMESFILTER_HASHTABLE
) || \

125 ((
FILTER
Ë=
ETH_UNICASTFRAMESFILTER_PERFECT
))

	)

126 
	#IS_ETH_PAUSE_TIME
(
TIME
Ë((TIMEË<0xFFFF)

	)

127 
	#IS_ETH_ZEROQUANTA_PAUSE
(
CMD
Ë(((CMDË=
ETH_ZEROQUANTAPAUSE_ENABLE
) || \

128 ((
CMD
Ë=
ETH_ZEROQUANTAPAUSE_DISABLE
))

	)

129 
	#IS_ETH_PAUSE_LOW_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
ETH_PAUSELOWTHRESHOLD_MINUS4
) || \

130 ((
THRESHOLD
Ë=
ETH_PAUSELOWTHRESHOLD_MINUS28
) || \

131 ((
THRESHOLD
Ë=
ETH_PAUSELOWTHRESHOLD_MINUS144
) || \

132 ((
THRESHOLD
Ë=
ETH_PAUSELOWTHRESHOLD_MINUS256
))

	)

133 
	#IS_ETH_UNICAST_PAUSE_FRAME_DETECT
(
CMD
Ë(((CMDË=
ETH_UNICASTPAUSEFRAMEDETECT_ENABLE
) || \

134 ((
CMD
Ë=
ETH_UNICASTPAUSEFRAMEDETECT_DISABLE
))

	)

135 
	#IS_ETH_RECEIVE_FLOWCONTROL
(
CMD
Ë(((CMDË=
ETH_RECEIVEFLOWCONTROL_ENABLE
) || \

136 ((
CMD
Ë=
ETH_RECEIVEFLOWCONTROL_DISABLE
))

	)

137 
	#IS_ETH_TRANSMIT_FLOWCONTROL
(
CMD
Ë(((CMDË=
ETH_TRANSMITFLOWCONTROL_ENABLE
) || \

138 ((
CMD
Ë=
ETH_TRANSMITFLOWCONTROL_DISABLE
))

	)

139 
	#IS_ETH_VLAN_TAG_COMPARISON
(
COMPARISON
Ë(((COMPARISONË=
ETH_VLANTAGCOMPARISON_12BIT
) || \

140 ((
COMPARISON
Ë=
ETH_VLANTAGCOMPARISON_16BIT
))

	)

141 
	#IS_ETH_VLAN_TAG_IDENTIFIER
(
IDENTIFIER
Ë((IDENTIFIERË<0xFFFF)

	)

142 
	#IS_ETH_MAC_ADDRESS0123
(
ADDRESS
Ë(((ADDRESSË=
ETH_MAC_ADDRESS0
) || \

143 ((
ADDRESS
Ë=
ETH_MAC_ADDRESS1
) || \

144 ((
ADDRESS
Ë=
ETH_MAC_ADDRESS2
) || \

145 ((
ADDRESS
Ë=
ETH_MAC_ADDRESS3
))

	)

146 
	#IS_ETH_MAC_ADDRESS123
(
ADDRESS
Ë(((ADDRESSË=
ETH_MAC_ADDRESS1
) || \

147 ((
ADDRESS
Ë=
ETH_MAC_ADDRESS2
) || \

148 ((
ADDRESS
Ë=
ETH_MAC_ADDRESS3
))

	)

149 
	#IS_ETH_MAC_ADDRESS_FILTER
(
FILTER
Ë(((FILTERË=
ETH_MAC_ADDRESSFILTER_SA
) || \

150 ((
FILTER
Ë=
ETH_MAC_ADDRESSFILTER_DA
))

	)

151 
	#IS_ETH_MAC_ADDRESS_MASK
(
MASK
Ë(((MASKË=
ETH_MAC_ADDRESSMASK_BYTE6
) || \

152 ((
MASK
Ë=
ETH_MAC_ADDRESSMASK_BYTE5
) || \

153 ((
MASK
Ë=
ETH_MAC_ADDRESSMASK_BYTE4
) || \

154 ((
MASK
Ë=
ETH_MAC_ADDRESSMASK_BYTE3
) || \

155 ((
MASK
Ë=
ETH_MAC_ADDRESSMASK_BYTE2
) || \

156 ((
MASK
Ë=
ETH_MAC_ADDRESSMASK_BYTE1
))

	)

157 
	#IS_ETH_DROP_TCPIP_CHECKSUM_FRAME
(
CMD
Ë(((CMDË=
ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE
) || \

158 ((
CMD
Ë=
ETH_DROPTCPIPCHECKSUMERRORFRAME_DISABLE
))

	)

159 
	#IS_ETH_RECEIVE_STORE_FORWARD
(
CMD
Ë(((CMDË=
ETH_RECEIVESTOREFORWARD_ENABLE
) || \

160 ((
CMD
Ë=
ETH_RECEIVESTOREFORWARD_DISABLE
))

	)

161 
	#IS_ETH_FLUSH_RECEIVE_FRAME
(
CMD
Ë(((CMDË=
ETH_FLUSHRECEIVEDFRAME_ENABLE
) || \

162 ((
CMD
Ë=
ETH_FLUSHRECEIVEDFRAME_DISABLE
))

	)

163 
	#IS_ETH_TRANSMIT_STORE_FORWARD
(
CMD
Ë(((CMDË=
ETH_TRANSMITSTOREFORWARD_ENABLE
) || \

164 ((
CMD
Ë=
ETH_TRANSMITSTOREFORWARD_DISABLE
))

	)

165 
	#IS_ETH_TRANSMIT_THRESHOLD_CONTROL
(
THRESHOLD
Ë(((THRESHOLDË=
ETH_TRANSMITTHRESHOLDCONTROL_64BYTES
) || \

166 ((
THRESHOLD
Ë=
ETH_TRANSMITTHRESHOLDCONTROL_128BYTES
) || \

167 ((
THRESHOLD
Ë=
ETH_TRANSMITTHRESHOLDCONTROL_192BYTES
) || \

168 ((
THRESHOLD
Ë=
ETH_TRANSMITTHRESHOLDCONTROL_256BYTES
) || \

169 ((
THRESHOLD
Ë=
ETH_TRANSMITTHRESHOLDCONTROL_40BYTES
) || \

170 ((
THRESHOLD
Ë=
ETH_TRANSMITTHRESHOLDCONTROL_32BYTES
) || \

171 ((
THRESHOLD
Ë=
ETH_TRANSMITTHRESHOLDCONTROL_24BYTES
) || \

172 ((
THRESHOLD
Ë=
ETH_TRANSMITTHRESHOLDCONTROL_16BYTES
))

	)

173 
	#IS_ETH_FORWARD_ERROR_FRAMES
(
CMD
Ë(((CMDË=
ETH_FORWARDERRORFRAMES_ENABLE
) || \

174 ((
CMD
Ë=
ETH_FORWARDERRORFRAMES_DISABLE
))

	)

175 
	#IS_ETH_FORWARD_UNDERSIZED_GOOD_FRAMES
(
CMD
Ë(((CMDË=
ETH_FORWARDUNDERSIZEDGOODFRAMES_ENABLE
) || \

176 ((
CMD
Ë=
ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE
))

	)

177 
	#IS_ETH_RECEIVE_THRESHOLD_CONTROL
(
THRESHOLD
Ë(((THRESHOLDË=
ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES
) || \

178 ((
THRESHOLD
Ë=
ETH_RECEIVEDTHRESHOLDCONTROL_32BYTES
) || \

179 ((
THRESHOLD
Ë=
ETH_RECEIVEDTHRESHOLDCONTROL_96BYTES
) || \

180 ((
THRESHOLD
Ë=
ETH_RECEIVEDTHRESHOLDCONTROL_128BYTES
))

	)

181 
	#IS_ETH_SECOND_FRAME_OPERATE
(
CMD
Ë(((CMDË=
ETH_SECONDFRAMEOPERARTE_ENABLE
) || \

182 ((
CMD
Ë=
ETH_SECONDFRAMEOPERARTE_DISABLE
))

	)

183 
	#IS_ETH_ADDRESS_ALIGNED_BEATS
(
CMD
Ë(((CMDË=
ETH_ADDRESSALIGNEDBEATS_ENABLE
) || \

184 ((
CMD
Ë=
ETH_ADDRESSALIGNEDBEATS_DISABLE
))

	)

185 
	#IS_ETH_FIXED_BURST
(
CMD
Ë(((CMDË=
ETH_FIXEDBURST_ENABLE
) || \

186 ((
CMD
Ë=
ETH_FIXEDBURST_DISABLE
))

	)

187 
	#IS_ETH_RXDMA_BURST_LENGTH
(
LENGTH
Ë(((LENGTHË=
ETH_RXDMABURSTLENGTH_1BEAT
) || \

188 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_2BEAT
) || \

189 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_4BEAT
) || \

190 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_8BEAT
) || \

191 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_16BEAT
) || \

192 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_32BEAT
) || \

193 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_4XPBL_4BEAT
) || \

194 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_4XPBL_8BEAT
) || \

195 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_4XPBL_16BEAT
) || \

196 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_4XPBL_32BEAT
) || \

197 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_4XPBL_64BEAT
) || \

198 ((
LENGTH
Ë=
ETH_RXDMABURSTLENGTH_4XPBL_128BEAT
))

	)

199 
	#IS_ETH_TXDMA_BURST_LENGTH
(
LENGTH
Ë(((LENGTHË=
ETH_TXDMABURSTLENGTH_1BEAT
) || \

200 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_2BEAT
) || \

201 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_4BEAT
) || \

202 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_8BEAT
) || \

203 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_16BEAT
) || \

204 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_32BEAT
) || \

205 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_4XPBL_4BEAT
) || \

206 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_4XPBL_8BEAT
) || \

207 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_4XPBL_16BEAT
) || \

208 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_4XPBL_32BEAT
) || \

209 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_4XPBL_64BEAT
) || \

210 ((
LENGTH
Ë=
ETH_TXDMABURSTLENGTH_4XPBL_128BEAT
))

	)

211 
	#IS_ETH_DMA_DESC_SKIP_LENGTH
(
LENGTH
Ë((LENGTHË<0x1F)

	)

212 
	#IS_ETH_DMA_ARBITRATION_ROUNDROBIN_RXTX
(
RATIO
Ë(((RATIOË=
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1
) || \

213 ((
RATIO
Ë=
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_2_1
) || \

214 ((
RATIO
Ë=
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_3_1
) || \

215 ((
RATIO
Ë=
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_4_1
) || \

216 ((
RATIO
Ë=
ETH_DMAARBITRATION_RXPRIORTX
))

	)

217 
	#IS_ETH_DMATXDESC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ETH_DMATXDESC_OWN
) || \

218 ((
FLAG
Ë=
ETH_DMATXDESC_IC
) || \

219 ((
FLAG
Ë=
ETH_DMATXDESC_LS
) || \

220 ((
FLAG
Ë=
ETH_DMATXDESC_FS
) || \

221 ((
FLAG
Ë=
ETH_DMATXDESC_DC
) || \

222 ((
FLAG
Ë=
ETH_DMATXDESC_DP
) || \

223 ((
FLAG
Ë=
ETH_DMATXDESC_TTSE
) || \

224 ((
FLAG
Ë=
ETH_DMATXDESC_TER
) || \

225 ((
FLAG
Ë=
ETH_DMATXDESC_TCH
) || \

226 ((
FLAG
Ë=
ETH_DMATXDESC_TTSS
) || \

227 ((
FLAG
Ë=
ETH_DMATXDESC_IHE
) || \

228 ((
FLAG
Ë=
ETH_DMATXDESC_ES
) || \

229 ((
FLAG
Ë=
ETH_DMATXDESC_JT
) || \

230 ((
FLAG
Ë=
ETH_DMATXDESC_FF
) || \

231 ((
FLAG
Ë=
ETH_DMATXDESC_PCE
) || \

232 ((
FLAG
Ë=
ETH_DMATXDESC_LCA
) || \

233 ((
FLAG
Ë=
ETH_DMATXDESC_NC
) || \

234 ((
FLAG
Ë=
ETH_DMATXDESC_LCO
) || \

235 ((
FLAG
Ë=
ETH_DMATXDESC_EC
) || \

236 ((
FLAG
Ë=
ETH_DMATXDESC_VF
) || \

237 ((
FLAG
Ë=
ETH_DMATXDESC_CC
) || \

238 ((
FLAG
Ë=
ETH_DMATXDESC_ED
) || \

239 ((
FLAG
Ë=
ETH_DMATXDESC_UF
) || \

240 ((
FLAG
Ë=
ETH_DMATXDESC_DB
))

	)

241 
	#IS_ETH_DMA_TXDESC_SEGMENT
(
SEGMENT
Ë(((SEGMENTË=
ETH_DMATXDESC_LASTSEGMENTS
) || \

242 ((
SEGMENT
Ë=
ETH_DMATXDESC_FIRSTSEGMENT
))

	)

243 
	#IS_ETH_DMA_TXDESC_CHECKSUM
(
CHECKSUM
Ë(((CHECKSUMË=
ETH_DMATXDESC_CHECKSUMBYPASS
) || \

244 ((
CHECKSUM
Ë=
ETH_DMATXDESC_CHECKSUMIPV4HEADER
) || \

245 ((
CHECKSUM
Ë=
ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT
) || \

246 ((
CHECKSUM
Ë=
ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL
))

	)

247 
	#IS_ETH_DMATXDESC_BUFFER_SIZE
(
SIZE
Ë((SIZEË<0x1FFF)

	)

248 
	#IS_ETH_DMARXDESC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ETH_DMARXDESC_OWN
) || \

249 ((
FLAG
Ë=
ETH_DMARXDESC_AFM
) || \

250 ((
FLAG
Ë=
ETH_DMARXDESC_ES
) || \

251 ((
FLAG
Ë=
ETH_DMARXDESC_DE
) || \

252 ((
FLAG
Ë=
ETH_DMARXDESC_SAF
) || \

253 ((
FLAG
Ë=
ETH_DMARXDESC_LE
) || \

254 ((
FLAG
Ë=
ETH_DMARXDESC_OE
) || \

255 ((
FLAG
Ë=
ETH_DMARXDESC_VLAN
) || \

256 ((
FLAG
Ë=
ETH_DMARXDESC_FS
) || \

257 ((
FLAG
Ë=
ETH_DMARXDESC_LS
) || \

258 ((
FLAG
Ë=
ETH_DMARXDESC_IPV4HCE
) || \

259 ((
FLAG
Ë=
ETH_DMARXDESC_LC
) || \

260 ((
FLAG
Ë=
ETH_DMARXDESC_FT
) || \

261 ((
FLAG
Ë=
ETH_DMARXDESC_RWT
) || \

262 ((
FLAG
Ë=
ETH_DMARXDESC_RE
) || \

263 ((
FLAG
Ë=
ETH_DMARXDESC_DBE
) || \

264 ((
FLAG
Ë=
ETH_DMARXDESC_CE
) || \

265 ((
FLAG
Ë=
ETH_DMARXDESC_MAMPCE
))

	)

266 
	#IS_ETH_DMA_RXDESC_BUFFER
(
BUFFER
Ë(((BUFFERË=
ETH_DMARXDESC_BUFFER1
) || \

267 ((
BUFFER
Ë=
ETH_DMARXDESC_BUFFER2
))

	)

268 
	#IS_ETH_PMT_GET_FLAG
(
FLAG
Ë(((FLAGË=
ETH_PMT_FLAG_WUFR
) || \

269 ((
FLAG
Ë=
ETH_PMT_FLAG_MPR
))

	)

270 
	#IS_ETH_DMA_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xC7FE1800Ë=0x00Ë&& ((FLAGË!0x00))

	)

271 
	#IS_ETH_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
ETH_DMA_FLAG_TST
Ë|| ((FLAGË=
ETH_DMA_FLAG_PMT
) || \

272 ((
FLAG
Ë=
ETH_DMA_FLAG_MMC
Ë|| ((FLAGË=
ETH_DMA_FLAG_DATATRANSFERERROR
) || \

273 ((
FLAG
Ë=
ETH_DMA_FLAG_READWRITEERROR
Ë|| ((FLAGË=
ETH_DMA_FLAG_ACCESSERROR
) || \

274 ((
FLAG
Ë=
ETH_DMA_FLAG_NIS
Ë|| ((FLAGË=
ETH_DMA_FLAG_AIS
) || \

275 ((
FLAG
Ë=
ETH_DMA_FLAG_ER
Ë|| ((FLAGË=
ETH_DMA_FLAG_FBE
) || \

276 ((
FLAG
Ë=
ETH_DMA_FLAG_ET
Ë|| ((FLAGË=
ETH_DMA_FLAG_RWT
) || \

277 ((
FLAG
Ë=
ETH_DMA_FLAG_RPS
Ë|| ((FLAGË=
ETH_DMA_FLAG_RBU
) || \

278 ((
FLAG
Ë=
ETH_DMA_FLAG_R
Ë|| ((FLAGË=
ETH_DMA_FLAG_TU
) || \

279 ((
FLAG
Ë=
ETH_DMA_FLAG_RO
Ë|| ((FLAGË=
ETH_DMA_FLAG_TJT
) || \

280 ((
FLAG
Ë=
ETH_DMA_FLAG_TBU
Ë|| ((FLAGË=
ETH_DMA_FLAG_TPS
) || \

281 ((
FLAG
Ë=
ETH_DMA_FLAG_T
))

	)

282 
	#IS_ETH_MAC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFDF1Ë=0x00Ë&& ((ITË!0x00))

	)

283 
	#IS_ETH_MAC_GET_IT
(
IT
Ë(((ITË=
ETH_MAC_IT_TST
Ë|| ((ITË=
ETH_MAC_IT_MMCT
) || \

284 ((
IT
Ë=
ETH_MAC_IT_MMCR
Ë|| ((ITË=
ETH_MAC_IT_MMC
) || \

285 ((
IT
Ë=
ETH_MAC_IT_PMT
))

	)

286 
	#IS_ETH_MAC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ETH_MAC_FLAG_TST
Ë|| ((FLAGË=
ETH_MAC_FLAG_MMCT
) || \

287 ((
FLAG
Ë=
ETH_MAC_FLAG_MMCR
Ë|| ((FLAGË=
ETH_MAC_FLAG_MMC
) || \

288 ((
FLAG
Ë=
ETH_MAC_FLAG_PMT
))

	)

289 
	#IS_ETH_DMA_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xC7FE1800Ë=0x00Ë&& ((ITË!0x00))

	)

290 
	#IS_ETH_DMA_GET_IT
(
IT
Ë(((ITË=
ETH_DMA_IT_TST
Ë|| ((ITË=
ETH_DMA_IT_PMT
) || \

291 ((
IT
Ë=
ETH_DMA_IT_MMC
Ë|| ((ITË=
ETH_DMA_IT_NIS
) || \

292 ((
IT
Ë=
ETH_DMA_IT_AIS
Ë|| ((ITË=
ETH_DMA_IT_ER
) || \

293 ((
IT
Ë=
ETH_DMA_IT_FBE
Ë|| ((ITË=
ETH_DMA_IT_ET
) || \

294 ((
IT
Ë=
ETH_DMA_IT_RWT
Ë|| ((ITË=
ETH_DMA_IT_RPS
) || \

295 ((
IT
Ë=
ETH_DMA_IT_RBU
Ë|| ((ITË=
ETH_DMA_IT_R
) || \

296 ((
IT
Ë=
ETH_DMA_IT_TU
Ë|| ((ITË=
ETH_DMA_IT_RO
) || \

297 ((
IT
Ë=
ETH_DMA_IT_TJT
Ë|| ((ITË=
ETH_DMA_IT_TBU
) || \

298 ((
IT
Ë=
ETH_DMA_IT_TPS
Ë|| ((ITË=
ETH_DMA_IT_T
))

	)

299 
	#IS_ETH_DMA_GET_OVERFLOW
(
OVERFLOW
Ë(((OVERFLOWË=
ETH_DMA_OVERFLOW_RXFIFOCOUNTER
) || \

300 ((
OVERFLOW
Ë=
ETH_DMA_OVERFLOW_MISSEDFRAMECOUNTER
))

	)

301 
	#IS_ETH_MMC_IT
(
IT
Ë(((((ITË& (
uöt32_t
)0xFFDF3FFF) == 0x00) || (((IT) & (uint32_t)0xEFFDFF9F) == 0x00)) && \

302 ((
IT
Ë!0x00))

	)

303 
	#IS_ETH_MMC_GET_IT
(
IT
Ë(((ITË=
ETH_MMC_IT_TGF
Ë|| ((ITË=
ETH_MMC_IT_TGFMSC
) || \

304 ((
IT
Ë=
ETH_MMC_IT_TGFSC
Ë|| ((ITË=
ETH_MMC_IT_RGUF
) || \

305 ((
IT
Ë=
ETH_MMC_IT_RFAE
Ë|| ((ITË=
ETH_MMC_IT_RFCE
))

	)

306 
	#IS_ETH_ENHANCED_DESCRIPTOR_FORMAT
(
CMD
Ë(((CMDË=
ETH_DMAENHANCEDDESCRIPTOR_ENABLE
) || \

307 ((
CMD
Ë=
ETH_DMAENHANCEDDESCRIPTOR_DISABLE
))

	)

318 
	#ETH_REG_WRITE_DELAY
 ((
uöt32_t
)0x00000001)

	)

321 
	#ETH_SUCCESS
 ((
uöt32_t
)0)

	)

322 
	#ETH_ERROR
 ((
uöt32_t
)1)

	)

325 
	#ETH_DMATXDESC_COLLISION_COUNTSHIFT
 ((
uöt32_t
)3)

	)

328 
	#ETH_DMATXDESC_BUFFER2_SIZESHIFT
 ((
uöt32_t
)16)

	)

331 
	#ETH_DMARXDESC_FRAME_LENGTHSHIFT
 ((
uöt32_t
)16)

	)

334 
	#ETH_DMARXDESC_BUFFER2_SIZESHIFT
 ((
uöt32_t
)16)

	)

337 
	#ETH_DMARXDESC_FRAMELENGTHSHIFT
 ((
uöt32_t
)16)

	)

340 
	#ETH_MAC_ADDR_HBASE
 (
uöt32_t
)(
ETH_MAC_BASE
 + (uöt32_t)0x40Ë

	)

341 
	#ETH_MAC_ADDR_LBASE
 (
uöt32_t
)(
ETH_MAC_BASE
 + (uöt32_t)0x44Ë

	)

344 
	#ETH_MACMIIAR_CR_MASK
 ((
uöt32_t
)0xFFFFFFE3)

	)

347 
	#ETH_MACCR_CLEAR_MASK
 ((
uöt32_t
)0xFF20810F)

	)

350 
	#ETH_MACFCR_CLEAR_MASK
 ((
uöt32_t
)0x0000FF41)

	)

353 
	#ETH_DMAOMR_CLEAR_MASK
 ((
uöt32_t
)0xF8DE3F23)

	)

356 
	#ETH_WAKEUP_REGISTER_LENGTH
 8

	)

359 
	#ETH_DMA_RX_OVERFLOW_MISSEDFRAMES_COUNTERSHIFT
 17

	)

374 
HAL_ETH_STATE_RESET
 = 0x00,

375 
HAL_ETH_STATE_READY
 = 0x01,

376 
HAL_ETH_STATE_BUSY
 = 0x02,

377 
HAL_ETH_STATE_BUSY_TX
 = 0x12,

378 
HAL_ETH_STATE_BUSY_RX
 = 0x22,

379 
HAL_ETH_STATE_BUSY_TX_RX
 = 0x32,

380 
HAL_ETH_STATE_BUSY_WR
 = 0x42,

381 
HAL_ETH_STATE_BUSY_RD
 = 0x82,

382 
HAL_ETH_STATE_TIMEOUT
 = 0x03,

383 
HAL_ETH_STATE_ERROR
 = 0x04

384 }
	tHAL_ETH_SèãTy≥Def
;

392 
uöt32_t
 
AutoNegŸüti⁄
;

397 
uöt32_t
 
S≥ed
;

400 
uöt32_t
 
Du∂exMode
;

403 
uöt16_t
 
PhyAddªss
;

406 
uöt8_t
 *
MACAddr
;

408 
uöt32_t
 
RxMode
;

411 
uöt32_t
 
ChecksumMode
;

414 
uöt32_t
 
MedüI¡îÁ˚
 ;

417 } 
	tETH_InôTy≥Def
;

426 
uöt32_t
 
W©chdog
;

431 
uöt32_t
 
Jabbî
;

436 
uöt32_t
 
I¡îFømeG≠
;

439 
uöt32_t
 
C¨rõrSí£
;

442 
uöt32_t
 
Re˚iveOwn
;

447 
uöt32_t
 
Lo›backMode
;

450 
uöt32_t
 
ChecksumOfÊﬂd
;

453 
uöt32_t
 
RëryTønsmissi⁄
;

457 
uöt32_t
 
Autom©icPadCRCSåù
;

460 
uöt32_t
 
BackOffLimô
;

463 
uöt32_t
 
De„ºÆCheck
;

466 
uöt32_t
 
Re˚iveAŒ
;

469 
uöt32_t
 
Sour˚AddrFûãr
;

472 
uöt32_t
 
PassC⁄åﬁFømes
;

475 
uöt32_t
 
Brﬂdˇ°FømesRe˚±i⁄
;

478 
uöt32_t
 
De°ö©i⁄AddrFûãr
;

481 
uöt32_t
 
PromiscuousMode
;

484 
uöt32_t
 
Mu…iˇ°FømesFûãr
;

487 
uöt32_t
 
Uniˇ°FømesFûãr
;

490 
uöt32_t
 
HashTabÀHigh
;

493 
uöt32_t
 
HashTabÀLow
;

496 
uöt32_t
 
Pau£Time
;

499 
uöt32_t
 
ZîoQu™èPau£
;

502 
uöt32_t
 
Pau£LowThªshﬁd
;

506 
uöt32_t
 
Uniˇ°Pau£FømeDëe˘
;

510 
uöt32_t
 
Re˚iveFlowC⁄åﬁ
;

514 
uöt32_t
 
TønsmôFlowC⁄åﬁ
;

518 
uöt32_t
 
VLANTagCom∑ris⁄
;

522 
uöt32_t
 
VLANTagIdítifõr
;

524 } 
	tETH_MACInôTy≥Def
;

533 
uöt32_t
 
Dr›TCPIPChecksumEº‹Føme
;

536 
uöt32_t
 
Re˚iveSt‹eF‹w¨d
;

539 
uöt32_t
 
FlushRe˚ivedFøme
;

542 
uöt32_t
 
TønsmôSt‹eF‹w¨d
;

545 
uöt32_t
 
TønsmôThªshﬁdC⁄åﬁ
;

548 
uöt32_t
 
F‹w¨dEº‹Fømes
;

551 
uöt32_t
 
F‹w¨dUndîsizedGoodFømes
;

555 
uöt32_t
 
Re˚iveThªshﬁdC⁄åﬁ
;

558 
uöt32_t
 
Sec⁄dFømeO≥øã
;

562 
uöt32_t
 
AddªssAlig√dBóts
;

565 
uöt32_t
 
FixedBur°
;

568 
uöt32_t
 
RxDMABur°Lígth
;

571 
uöt32_t
 
TxDMABur°Lígth
;

574 
uöt32_t
 
Enh™˚dDes¸ùt‹F‹m©
;

577 
uöt32_t
 
Des¸ùt‹SkùLígth
;

580 
uöt32_t
 
DMAArbôøti⁄
;

582 } 
	tETH_DMAInôTy≥Def
;

591 
__IO
 
uöt32_t
 
Sètus
;

593 
uöt32_t
 
C⁄åﬁBuf„rSize
;

595 
uöt32_t
 
Buf„r1Addr
;

597 
uöt32_t
 
Buf„r2NextDescAddr
;

600 
uöt32_t
 
ExãndedSètus
;

602 
uöt32_t
 
Re£rved1
;

604 
uöt32_t
 
TimeSèmpLow
;

606 
uöt32_t
 
TimeSèmpHigh
;

608 } 
	tETH_DMADescTy≥Def
;

616 
ETH_DMADescTy≥Def
 *
FSRxDesc
;

618 
ETH_DMADescTy≥Def
 *
LSRxDesc
;

620 
uöt32_t
 
SegCou¡
;

622 
uöt32_t
 
Àngth
;

624 
uöt32_t
 
buf„r
;

626 } 
	tETH_DMARxFømeInfos
;

635 
ETH_Ty≥Def
 *
In°™˚
;

637 
ETH_InôTy≥Def
 
Inô
;

639 
uöt32_t
 
LökSètus
;

641 
ETH_DMADescTy≥Def
 *
RxDesc
;

643 
ETH_DMADescTy≥Def
 *
TxDesc
;

645 
ETH_DMARxFømeInfos
 
RxFømeInfos
;

647 
__IO
 
HAL_ETH_SèãTy≥Def
 
Sèã
;

649 
HAL_LockTy≥Def
 
Lock
;

651 } 
	tETH_H™dÀTy≥Def
;

665 
	#ETH_MAX_PACKET_SIZE
 ((
uöt32_t
)1524Ë

	)

666 
	#ETH_HEADER
 ((
uöt32_t
)14Ë

	)

667 
	#ETH_CRC
 ((
uöt32_t
)4Ë

	)

668 
	#ETH_EXTRA
 ((
uöt32_t
)2Ë

	)

669 
	#ETH_VLAN_TAG
 ((
uöt32_t
)4Ë

	)

670 
	#ETH_MIN_ETH_PAYLOAD
 ((
uöt32_t
)46Ë

	)

671 
	#ETH_MAX_ETH_PAYLOAD
 ((
uöt32_t
)1500Ë

	)

672 
	#ETH_JUMBO_FRAME_PAYLOAD
 ((
uöt32_t
)9000Ë

	)

691 #i‚de‡
ETH_RX_BUF_SIZE


692 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

696 #i‚de‡
ETH_RXBUFNB


697 
	#ETH_RXBUFNB
 ((
uöt32_t
)5

	)

718 #i‚de‡
ETH_TX_BUF_SIZE


719 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

723 #i‚de‡
ETH_TXBUFNB


724 
	#ETH_TXBUFNB
 ((
uöt32_t
)5

	)

751 
	#ETH_DMATXDESC_OWN
 ((
uöt32_t
)0x80000000Ë

	)

752 
	#ETH_DMATXDESC_IC
 ((
uöt32_t
)0x40000000Ë

	)

753 
	#ETH_DMATXDESC_LS
 ((
uöt32_t
)0x20000000Ë

	)

754 
	#ETH_DMATXDESC_FS
 ((
uöt32_t
)0x10000000Ë

	)

755 
	#ETH_DMATXDESC_DC
 ((
uöt32_t
)0x08000000Ë

	)

756 
	#ETH_DMATXDESC_DP
 ((
uöt32_t
)0x04000000Ë

	)

757 
	#ETH_DMATXDESC_TTSE
 ((
uöt32_t
)0x02000000Ë

	)

758 
	#ETH_DMATXDESC_CIC
 ((
uöt32_t
)0x00C00000Ë

	)

759 
	#ETH_DMATXDESC_CIC_BYPASS
 ((
uöt32_t
)0x00000000Ë

	)

760 
	#ETH_DMATXDESC_CIC_IPV4HEADER
 ((
uöt32_t
)0x00400000Ë

	)

761 
	#ETH_DMATXDESC_CIC_TCPUDPICMP_SEGMENT
 ((
uöt32_t
)0x00800000Ë

	)

762 
	#ETH_DMATXDESC_CIC_TCPUDPICMP_FULL
 ((
uöt32_t
)0x00C00000Ë

	)

763 
	#ETH_DMATXDESC_TER
 ((
uöt32_t
)0x00200000Ë

	)

764 
	#ETH_DMATXDESC_TCH
 ((
uöt32_t
)0x00100000Ë

	)

765 
	#ETH_DMATXDESC_TTSS
 ((
uöt32_t
)0x00020000Ë

	)

766 
	#ETH_DMATXDESC_IHE
 ((
uöt32_t
)0x00010000Ë

	)

767 
	#ETH_DMATXDESC_ES
 ((
uöt32_t
)0x00008000Ë

	)

768 
	#ETH_DMATXDESC_JT
 ((
uöt32_t
)0x00004000Ë

	)

769 
	#ETH_DMATXDESC_FF
 ((
uöt32_t
)0x00002000Ë

	)

770 
	#ETH_DMATXDESC_PCE
 ((
uöt32_t
)0x00001000Ë

	)

771 
	#ETH_DMATXDESC_LCA
 ((
uöt32_t
)0x00000800Ë

	)

772 
	#ETH_DMATXDESC_NC
 ((
uöt32_t
)0x00000400Ë

	)

773 
	#ETH_DMATXDESC_LCO
 ((
uöt32_t
)0x00000200Ë

	)

774 
	#ETH_DMATXDESC_EC
 ((
uöt32_t
)0x00000100Ë

	)

775 
	#ETH_DMATXDESC_VF
 ((
uöt32_t
)0x00000080Ë

	)

776 
	#ETH_DMATXDESC_CC
 ((
uöt32_t
)0x00000078Ë

	)

777 
	#ETH_DMATXDESC_ED
 ((
uöt32_t
)0x00000004Ë

	)

778 
	#ETH_DMATXDESC_UF
 ((
uöt32_t
)0x00000002Ë

	)

779 
	#ETH_DMATXDESC_DB
 ((
uöt32_t
)0x00000001Ë

	)

784 
	#ETH_DMATXDESC_TBS2
 ((
uöt32_t
)0x1FFF0000Ë

	)

785 
	#ETH_DMATXDESC_TBS1
 ((
uöt32_t
)0x00001FFFË

	)

790 
	#ETH_DMATXDESC_B1AP
 ((
uöt32_t
)0xFFFFFFFFË

	)

795 
	#ETH_DMATXDESC_B2AP
 ((
uöt32_t
)0xFFFFFFFFË

	)

804 
	#ETH_DMAPTPTXDESC_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

807 
	#ETH_DMAPTPTXDESC_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

832 
	#ETH_DMARXDESC_OWN
 ((
uöt32_t
)0x80000000Ë

	)

833 
	#ETH_DMARXDESC_AFM
 ((
uöt32_t
)0x40000000Ë

	)

834 
	#ETH_DMARXDESC_FL
 ((
uöt32_t
)0x3FFF0000Ë

	)

835 
	#ETH_DMARXDESC_ES
 ((
uöt32_t
)0x00008000Ë

	)

836 
	#ETH_DMARXDESC_DE
 ((
uöt32_t
)0x00004000Ë

	)

837 
	#ETH_DMARXDESC_SAF
 ((
uöt32_t
)0x00002000Ë

	)

838 
	#ETH_DMARXDESC_LE
 ((
uöt32_t
)0x00001000Ë

	)

839 
	#ETH_DMARXDESC_OE
 ((
uöt32_t
)0x00000800Ë

	)

840 
	#ETH_DMARXDESC_VLAN
 ((
uöt32_t
)0x00000400Ë

	)

841 
	#ETH_DMARXDESC_FS
 ((
uöt32_t
)0x00000200Ë

	)

842 
	#ETH_DMARXDESC_LS
 ((
uöt32_t
)0x00000100Ë

	)

843 
	#ETH_DMARXDESC_IPV4HCE
 ((
uöt32_t
)0x00000080Ë

	)

844 
	#ETH_DMARXDESC_LC
 ((
uöt32_t
)0x00000040Ë

	)

845 
	#ETH_DMARXDESC_FT
 ((
uöt32_t
)0x00000020Ë

	)

846 
	#ETH_DMARXDESC_RWT
 ((
uöt32_t
)0x00000010Ë

	)

847 
	#ETH_DMARXDESC_RE
 ((
uöt32_t
)0x00000008Ë

	)

848 
	#ETH_DMARXDESC_DBE
 ((
uöt32_t
)0x00000004Ë

	)

849 
	#ETH_DMARXDESC_CE
 ((
uöt32_t
)0x00000002Ë

	)

850 
	#ETH_DMARXDESC_MAMPCE
 ((
uöt32_t
)0x00000001Ë

	)

855 
	#ETH_DMARXDESC_DIC
 ((
uöt32_t
)0x80000000Ë

	)

856 
	#ETH_DMARXDESC_RBS2
 ((
uöt32_t
)0x1FFF0000Ë

	)

857 
	#ETH_DMARXDESC_RER
 ((
uöt32_t
)0x00008000Ë

	)

858 
	#ETH_DMARXDESC_RCH
 ((
uöt32_t
)0x00004000Ë

	)

859 
	#ETH_DMARXDESC_RBS1
 ((
uöt32_t
)0x00001FFFË

	)

864 
	#ETH_DMARXDESC_B1AP
 ((
uöt32_t
)0xFFFFFFFFË

	)

869 
	#ETH_DMARXDESC_B2AP
 ((
uöt32_t
)0xFFFFFFFFË

	)

882 
	#ETH_DMAPTPRXDESC_PTPV
 ((
uöt32_t
)0x00002000Ë

	)

883 
	#ETH_DMAPTPRXDESC_PTPFT
 ((
uöt32_t
)0x00001000Ë

	)

884 
	#ETH_DMAPTPRXDESC_PTPMT
 ((
uöt32_t
)0x00000F00Ë

	)

885 
	#ETH_DMAPTPRXDESC_PTPMT_SYNC
 ((
uöt32_t
)0x00000100Ë

	)

886 
	#ETH_DMAPTPRXDESC_PTPMT_FOLLOWUP
 ((
uöt32_t
)0x00000200Ë

	)

887 
	#ETH_DMAPTPRXDESC_PTPMT_DELAYREQ
 ((
uöt32_t
)0x00000300Ë

	)

888 
	#ETH_DMAPTPRXDESC_PTPMT_DELAYRESP
 ((
uöt32_t
)0x00000400Ë

	)

889 
	#ETH_DMAPTPRXDESC_PTPMT_PDELAYREQ_ANNOUNCE
 ((
uöt32_t
)0x00000500Ë

	)

890 
	#ETH_DMAPTPRXDESC_PTPMT_PDELAYRESP_MANAG
 ((
uöt32_t
)0x00000600Ë

	)

891 
	#ETH_DMAPTPRXDESC_PTPMT_PDELAYRESPFOLLOWUP_SIGNAL
 ((
uöt32_t
)0x00000700Ë

	)

892 
	#ETH_DMAPTPRXDESC_IPV6PR
 ((
uöt32_t
)0x00000080Ë

	)

893 
	#ETH_DMAPTPRXDESC_IPV4PR
 ((
uöt32_t
)0x00000040Ë

	)

894 
	#ETH_DMAPTPRXDESC_IPCB
 ((
uöt32_t
)0x00000020Ë

	)

895 
	#ETH_DMAPTPRXDESC_IPPE
 ((
uöt32_t
)0x00000010Ë

	)

896 
	#ETH_DMAPTPRXDESC_IPHE
 ((
uöt32_t
)0x00000008Ë

	)

897 
	#ETH_DMAPTPRXDESC_IPPT
 ((
uöt32_t
)0x00000007Ë

	)

898 
	#ETH_DMAPTPRXDESC_IPPT_UDP
 ((
uöt32_t
)0x00000001Ë

	)

899 
	#ETH_DMAPTPRXDESC_IPPT_TCP
 ((
uöt32_t
)0x00000002Ë

	)

900 
	#ETH_DMAPTPRXDESC_IPPT_ICMP
 ((
uöt32_t
)0x00000003Ë

	)

903 
	#ETH_DMAPTPRXDESC_RTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

906 
	#ETH_DMAPTPRXDESC_RTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

913 
	#ETH_AUTONEGOTIATION_ENABLE
 ((
uöt32_t
)0x00000001)

	)

914 
	#ETH_AUTONEGOTIATION_DISABLE
 ((
uöt32_t
)0x00000000)

	)

922 
	#ETH_SPEED_10M
 ((
uöt32_t
)0x00000000)

	)

923 
	#ETH_SPEED_100M
 ((
uöt32_t
)0x00004000)

	)

931 
	#ETH_MODE_FULLDUPLEX
 ((
uöt32_t
)0x00000800)

	)

932 
	#ETH_MODE_HALFDUPLEX
 ((
uöt32_t
)0x00000000)

	)

939 
	#ETH_RXPOLLING_MODE
 ((
uöt32_t
)0x00000000)

	)

940 
	#ETH_RXINTERRUPT_MODE
 ((
uöt32_t
)0x00000001)

	)

948 
	#ETH_CHECKSUM_BY_HARDWARE
 ((
uöt32_t
)0x00000000)

	)

949 
	#ETH_CHECKSUM_BY_SOFTWARE
 ((
uöt32_t
)0x00000001)

	)

957 
	#ETH_MEDIA_INTERFACE_MII
 ((
uöt32_t
)0x00000000)

	)

958 
	#ETH_MEDIA_INTERFACE_RMII
 ((
uöt32_t
)
SYSCFG_PMC_MII_RMII_SEL
)

	)

966 
	#ETH_WATCHDOG_ENABLE
 ((
uöt32_t
)0x00000000)

	)

967 
	#ETH_WATCHDOG_DISABLE
 ((
uöt32_t
)0x00800000)

	)

975 
	#ETH_JABBER_ENABLE
 ((
uöt32_t
)0x00000000)

	)

976 
	#ETH_JABBER_DISABLE
 ((
uöt32_t
)0x00400000)

	)

984 
	#ETH_INTERFRAMEGAP_96BIT
 ((
uöt32_t
)0x00000000Ë

	)

985 
	#ETH_INTERFRAMEGAP_88BIT
 ((
uöt32_t
)0x00020000Ë

	)

986 
	#ETH_INTERFRAMEGAP_80BIT
 ((
uöt32_t
)0x00040000Ë

	)

987 
	#ETH_INTERFRAMEGAP_72BIT
 ((
uöt32_t
)0x00060000Ë

	)

988 
	#ETH_INTERFRAMEGAP_64BIT
 ((
uöt32_t
)0x00080000Ë

	)

989 
	#ETH_INTERFRAMEGAP_56BIT
 ((
uöt32_t
)0x000A0000Ë

	)

990 
	#ETH_INTERFRAMEGAP_48BIT
 ((
uöt32_t
)0x000C0000Ë

	)

991 
	#ETH_INTERFRAMEGAP_40BIT
 ((
uöt32_t
)0x000E0000Ë

	)

999 
	#ETH_CARRIERSENCE_ENABLE
 ((
uöt32_t
)0x00000000)

	)

1000 
	#ETH_CARRIERSENCE_DISABLE
 ((
uöt32_t
)0x00010000)

	)

1008 
	#ETH_RECEIVEOWN_ENABLE
 ((
uöt32_t
)0x00000000)

	)

1009 
	#ETH_RECEIVEOWN_DISABLE
 ((
uöt32_t
)0x00002000)

	)

1017 
	#ETH_LOOPBACKMODE_ENABLE
 ((
uöt32_t
)0x00001000)

	)

1018 
	#ETH_LOOPBACKMODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1026 
	#ETH_CHECKSUMOFFLAOD_ENABLE
 ((
uöt32_t
)0x00000400)

	)

1027 
	#ETH_CHECKSUMOFFLAOD_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1035 
	#ETH_RETRYTRANSMISSION_ENABLE
 ((
uöt32_t
)0x00000000)

	)

1036 
	#ETH_RETRYTRANSMISSION_DISABLE
 ((
uöt32_t
)0x00000200)

	)

1044 
	#ETH_AUTOMATICPADCRCSTRIP_ENABLE
 ((
uöt32_t
)0x00000080)

	)

1045 
	#ETH_AUTOMATICPADCRCSTRIP_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1053 
	#ETH_BACKOFFLIMIT_10
 ((
uöt32_t
)0x00000000)

	)

1054 
	#ETH_BACKOFFLIMIT_8
 ((
uöt32_t
)0x00000020)

	)

1055 
	#ETH_BACKOFFLIMIT_4
 ((
uöt32_t
)0x00000040)

	)

1056 
	#ETH_BACKOFFLIMIT_1
 ((
uöt32_t
)0x00000060)

	)

1064 
	#ETH_DEFFERRALCHECK_ENABLE
 ((
uöt32_t
)0x00000010)

	)

1065 
	#ETH_DEFFERRALCHECK_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1073 
	#ETH_RECEIVEALL_ENABLE
 ((
uöt32_t
)0x80000000)

	)

1074 
	#ETH_RECEIVEAŒ_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1082 
	#ETH_SOURCEADDRFILTER_NORMAL_ENABLE
 ((
uöt32_t
)0x00000200)

	)

1083 
	#ETH_SOURCEADDRFILTER_INVERSE_ENABLE
 ((
uöt32_t
)0x00000300)

	)

1084 
	#ETH_SOURCEADDRFILTER_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1092 
	#ETH_PASSCONTROLFRAMES_BLOCKALL
 ((
uöt32_t
)0x00000040Ë

	)

1093 
	#ETH_PASSCONTROLFRAMES_FORWARDALL
 ((
uöt32_t
)0x00000080Ë

	)

1094 
	#ETH_PASSCONTROLFRAMES_FORWARDPASSEDADDRFILTER
 ((
uöt32_t
)0x000000C0Ë

	)

1102 
	#ETH_BROADCASTFRAMESRECEPTION_ENABLE
 ((
uöt32_t
)0x00000000)

	)

1103 
	#ETH_BROADCASTFRAMESRECEPTION_DISABLE
 ((
uöt32_t
)0x00000020)

	)

1111 
	#ETH_DESTINATIONADDRFILTER_NORMAL
 ((
uöt32_t
)0x00000000)

	)

1112 
	#ETH_DESTINATIONADDRFILTER_INVERSE
 ((
uöt32_t
)0x00000008)

	)

1120 
	#ETH_PROMISCUOUS_MODE_ENABLE
 ((
uöt32_t
)0x00000001)

	)

1121 
	#ETH_PROMISCUOUS_MODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1129 
	#ETH_MULTICASTFRAMESFILTER_PERFECTHASHTABLE
 ((
uöt32_t
)0x00000404)

	)

1130 
	#ETH_MULTICASTFRAMESFILTER_HASHTABLE
 ((
uöt32_t
)0x00000004)

	)

1131 
	#ETH_MULTICASTFRAMESFILTER_PERFECT
 ((
uöt32_t
)0x00000000)

	)

1132 
	#ETH_MULTICASTFRAMESFILTER_NONE
 ((
uöt32_t
)0x00000010)

	)

1140 
	#ETH_UNICASTFRAMESFILTER_PERFECTHASHTABLE
 ((
uöt32_t
)0x00000402)

	)

1141 
	#ETH_UNICASTFRAMESFILTER_HASHTABLE
 ((
uöt32_t
)0x00000002)

	)

1142 
	#ETH_UNICASTFRAMESFILTER_PERFECT
 ((
uöt32_t
)0x00000000)

	)

1150 
	#ETH_ZEROQUANTAPAUSE_ENABLE
 ((
uöt32_t
)0x00000000)

	)

1151 
	#ETH_ZEROQUANTAPAUSE_DISABLE
 ((
uöt32_t
)0x00000080)

	)

1159 
	#ETH_PAUSELOWTHRESHOLD_MINUS4
 ((
uöt32_t
)0x00000000Ë

	)

1160 
	#ETH_PAUSELOWTHRESHOLD_MINUS28
 ((
uöt32_t
)0x00000010Ë

	)

1161 
	#ETH_PAUSELOWTHRESHOLD_MINUS144
 ((
uöt32_t
)0x00000020Ë

	)

1162 
	#ETH_PAUSELOWTHRESHOLD_MINUS256
 ((
uöt32_t
)0x00000030Ë

	)

1170 
	#ETH_UNICASTPAUSEFRAMEDETECT_ENABLE
 ((
uöt32_t
)0x00000008)

	)

1171 
	#ETH_UNICASTPAUSEFRAMEDETECT_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1179 
	#ETH_RECEIVEFLOWCONTROL_ENABLE
 ((
uöt32_t
)0x00000004)

	)

1180 
	#ETH_RECEIVEFLOWCONTROL_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1188 
	#ETH_TRANSMITFLOWCONTROL_ENABLE
 ((
uöt32_t
)0x00000002)

	)

1189 
	#ETH_TRANSMITFLOWCONTROL_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1197 
	#ETH_VLANTAGCOMPARISON_12BIT
 ((
uöt32_t
)0x00010000)

	)

1198 
	#ETH_VLANTAGCOMPARISON_16BIT
 ((
uöt32_t
)0x00000000)

	)

1206 
	#ETH_MAC_ADDRESS0
 ((
uöt32_t
)0x00000000)

	)

1207 
	#ETH_MAC_ADDRESS1
 ((
uöt32_t
)0x00000008)

	)

1208 
	#ETH_MAC_ADDRESS2
 ((
uöt32_t
)0x00000010)

	)

1209 
	#ETH_MAC_ADDRESS3
 ((
uöt32_t
)0x00000018)

	)

1217 
	#ETH_MAC_ADDRESSFILTER_SA
 ((
uöt32_t
)0x00000000)

	)

1218 
	#ETH_MAC_ADDRESSFILTER_DA
 ((
uöt32_t
)0x00000008)

	)

1226 
	#ETH_MAC_ADDRESSMASK_BYTE6
 ((
uöt32_t
)0x20000000Ë

	)

1227 
	#ETH_MAC_ADDRESSMASK_BYTE5
 ((
uöt32_t
)0x10000000Ë

	)

1228 
	#ETH_MAC_ADDRESSMASK_BYTE4
 ((
uöt32_t
)0x08000000Ë

	)

1229 
	#ETH_MAC_ADDRESSMASK_BYTE3
 ((
uöt32_t
)0x04000000Ë

	)

1230 
	#ETH_MAC_ADDRESSMASK_BYTE2
 ((
uöt32_t
)0x02000000Ë

	)

1231 
	#ETH_MAC_ADDRESSMASK_BYTE1
 ((
uöt32_t
)0x01000000Ë

	)

1239 
	#ETH_MAC_TXFIFO_FULL
 ((
uöt32_t
)0x02000000Ë

	)

1240 
	#ETH_MAC_TXFIFONOT_EMPTY
 ((
uöt32_t
)0x01000000Ë

	)

1241 
	#ETH_MAC_TXFIFO_WRITE_ACTIVE
 ((
uöt32_t
)0x00400000Ë

	)

1242 
	#ETH_MAC_TXFIFO_IDLE
 ((
uöt32_t
)0x00000000Ë

	)

1243 
	#ETH_MAC_TXFIFO_READ
 ((
uöt32_t
)0x00100000Ë

	)

1244 
	#ETH_MAC_TXFIFO_WAITING
 ((
uöt32_t
)0x00200000Ë

	)

1245 
	#ETH_MAC_TXFIFO_WRITING
 ((
uöt32_t
)0x00300000Ë

	)

1246 
	#ETH_MAC_TRANSMISSION_PAUSE
 ((
uöt32_t
)0x00080000Ë

	)

1247 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_IDLE
 ((
uöt32_t
)0x00000000Ë

	)

1248 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING
 ((
uöt32_t
)0x00020000Ë

	)

1249 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_GENRATING_PCF
 ((
uöt32_t
)0x00040000Ë

	)

1250 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_TRANSFERRING
 ((
uöt32_t
)0x00060000Ë

	)

1251 
	#ETH_MAC_MII_TRANSMIT_ACTIVE
 ((
uöt32_t
)0x00010000Ë

	)

1252 
	#ETH_MAC_RXFIFO_EMPTY
 ((
uöt32_t
)0x00000000Ë

	)

1253 
	#ETH_MAC_RXFIFO_BELOW_THRESHOLD
 ((
uöt32_t
)0x00000100Ë

	)

1254 
	#ETH_MAC_RXFIFO_ABOVE_THRESHOLD
 ((
uöt32_t
)0x00000200Ë

	)

1255 
	#ETH_MAC_RXFIFO_FULL
 ((
uöt32_t
)0x00000300Ë

	)

1256 
	#ETH_MAC_READCONTROLLER_IDLE
 ((
uöt32_t
)0x00000000Ë

	)

1257 
	#ETH_MAC_READCONTROLLER_READING_DATA
 ((
uöt32_t
)0x00000020Ë

	)

1258 
	#ETH_MAC_READCONTROLLER_READING_STATUS
 ((
uöt32_t
)0x00000040Ë

	)

1259 
	#ETH_MAC_READCONTROLLER_FLUSHING
 ((
uöt32_t
)0x00000060Ë

	)

1260 
	#ETH_MAC_RXFIFO_WRITE_ACTIVE
 ((
uöt32_t
)0x00000010Ë

	)

1261 
	#ETH_MAC_SMALL_FIFO_NOTACTIVE
 ((
uöt32_t
)0x00000000Ë

	)

1262 
	#ETH_MAC_SMALL_FIFO_READ_ACTIVE
 ((
uöt32_t
)0x00000002Ë

	)

1263 
	#ETH_MAC_SMALL_FIFO_WRITE_ACTIVE
 ((
uöt32_t
)0x00000004Ë

	)

1264 
	#ETH_MAC_SMALL_FIFO_RW_ACTIVE
 ((
uöt32_t
)0x00000006Ë

	)

1265 
	#ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE
 ((
uöt32_t
)0x00000001Ë

	)

1273 
	#ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE
 ((
uöt32_t
)0x00000000)

	)

1274 
	#ETH_DROPTCPIPCHECKSUMERRORFRAME_DISABLE
 ((
uöt32_t
)0x04000000)

	)

1282 
	#ETH_RECEIVESTOREFORWARD_ENABLE
 ((
uöt32_t
)0x02000000)

	)

1283 
	#ETH_RECEIVESTOREFORWARD_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1291 
	#ETH_FLUSHRECEIVEDFRAME_ENABLE
 ((
uöt32_t
)0x00000000)

	)

1292 
	#ETH_FLUSHRECEIVEDFRAME_DISABLE
 ((
uöt32_t
)0x01000000)

	)

1300 
	#ETH_TRANSMITSTOREFORWARD_ENABLE
 ((
uöt32_t
)0x00200000)

	)

1301 
	#ETH_TRANSMITSTOREFORWARD_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1309 
	#ETH_TRANSMITTHRESHOLDCONTROL_64BYTES
 ((
uöt32_t
)0x00000000Ë

	)

1310 
	#ETH_TRANSMITTHRESHOLDCONTROL_128BYTES
 ((
uöt32_t
)0x00004000Ë

	)

1311 
	#ETH_TRANSMITTHRESHOLDCONTROL_192BYTES
 ((
uöt32_t
)0x00008000Ë

	)

1312 
	#ETH_TRANSMITTHRESHOLDCONTROL_256BYTES
 ((
uöt32_t
)0x0000C000Ë

	)

1313 
	#ETH_TRANSMITTHRESHOLDCONTROL_40BYTES
 ((
uöt32_t
)0x00010000Ë

	)

1314 
	#ETH_TRANSMITTHRESHOLDCONTROL_32BYTES
 ((
uöt32_t
)0x00014000Ë

	)

1315 
	#ETH_TRANSMITTHRESHOLDCONTROL_24BYTES
 ((
uöt32_t
)0x00018000Ë

	)

1316 
	#ETH_TRANSMITTHRESHOLDCONTROL_16BYTES
 ((
uöt32_t
)0x0001C000Ë

	)

1324 
	#ETH_FORWARDERRORFRAMES_ENABLE
 ((
uöt32_t
)0x00000080)

	)

1325 
	#ETH_FORWARDERRORFRAMES_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1333 
	#ETH_FORWARDUNDERSIZEDGOODFRAMES_ENABLE
 ((
uöt32_t
)0x00000040)

	)

1334 
	#ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1342 
	#ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES
 ((
uöt32_t
)0x00000000Ë

	)

1343 
	#ETH_RECEIVEDTHRESHOLDCONTROL_32BYTES
 ((
uöt32_t
)0x00000008Ë

	)

1344 
	#ETH_RECEIVEDTHRESHOLDCONTROL_96BYTES
 ((
uöt32_t
)0x00000010Ë

	)

1345 
	#ETH_RECEIVEDTHRESHOLDCONTROL_128BYTES
 ((
uöt32_t
)0x00000018Ë

	)

1353 
	#ETH_SECONDFRAMEOPERARTE_ENABLE
 ((
uöt32_t
)0x00000004)

	)

1354 
	#ETH_SECONDFRAMEOPERARTE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1362 
	#ETH_ADDRESSALIGNEDBEATS_ENABLE
 ((
uöt32_t
)0x02000000)

	)

1363 
	#ETH_ADDRESSALIGNEDBEATS_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1371 
	#ETH_FIXEDBURST_ENABLE
 ((
uöt32_t
)0x00010000)

	)

1372 
	#ETH_FIXEDBURST_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1380 
	#ETH_RXDMABURSTLENGTH_1BEAT
 ((
uöt32_t
)0x00020000Ë

	)

1381 
	#ETH_RXDMABURSTLENGTH_2BEAT
 ((
uöt32_t
)0x00040000Ë

	)

1382 
	#ETH_RXDMABURSTLENGTH_4BEAT
 ((
uöt32_t
)0x00080000Ë

	)

1383 
	#ETH_RXDMABURSTLENGTH_8BEAT
 ((
uöt32_t
)0x00100000Ë

	)

1384 
	#ETH_RXDMABURSTLENGTH_16BEAT
 ((
uöt32_t
)0x00200000Ë

	)

1385 
	#ETH_RXDMABURSTLENGTH_32BEAT
 ((
uöt32_t
)0x00400000Ë

	)

1386 
	#ETH_RXDMABURSTLENGTH_4XPBL_4BEAT
 ((
uöt32_t
)0x01020000Ë

	)

1387 
	#ETH_RXDMABURSTLENGTH_4XPBL_8BEAT
 ((
uöt32_t
)0x01040000Ë

	)

1388 
	#ETH_RXDMABURSTLENGTH_4XPBL_16BEAT
 ((
uöt32_t
)0x01080000Ë

	)

1389 
	#ETH_RXDMABURSTLENGTH_4XPBL_32BEAT
 ((
uöt32_t
)0x01100000Ë

	)

1390 
	#ETH_RXDMABURSTLENGTH_4XPBL_64BEAT
 ((
uöt32_t
)0x01200000Ë

	)

1391 
	#ETH_RXDMABURSTLENGTH_4XPBL_128BEAT
 ((
uöt32_t
)0x01400000Ë

	)

1399 
	#ETH_TXDMABURSTLENGTH_1BEAT
 ((
uöt32_t
)0x00000100Ë

	)

1400 
	#ETH_TXDMABURSTLENGTH_2BEAT
 ((
uöt32_t
)0x00000200Ë

	)

1401 
	#ETH_TXDMABURSTLENGTH_4BEAT
 ((
uöt32_t
)0x00000400Ë

	)

1402 
	#ETH_TXDMABURSTLENGTH_8BEAT
 ((
uöt32_t
)0x00000800Ë

	)

1403 
	#ETH_TXDMABURSTLENGTH_16BEAT
 ((
uöt32_t
)0x00001000Ë

	)

1404 
	#ETH_TXDMABURSTLENGTH_32BEAT
 ((
uöt32_t
)0x00002000Ë

	)

1405 
	#ETH_TXDMABURSTLENGTH_4XPBL_4BEAT
 ((
uöt32_t
)0x01000100Ë

	)

1406 
	#ETH_TXDMABURSTLENGTH_4XPBL_8BEAT
 ((
uöt32_t
)0x01000200Ë

	)

1407 
	#ETH_TXDMABURSTLENGTH_4XPBL_16BEAT
 ((
uöt32_t
)0x01000400Ë

	)

1408 
	#ETH_TXDMABURSTLENGTH_4XPBL_32BEAT
 ((
uöt32_t
)0x01000800Ë

	)

1409 
	#ETH_TXDMABURSTLENGTH_4XPBL_64BEAT
 ((
uöt32_t
)0x01001000Ë

	)

1410 
	#ETH_TXDMABURSTLENGTH_4XPBL_128BEAT
 ((
uöt32_t
)0x01002000Ë

	)

1418 
	#ETH_DMAENHANCEDDESCRIPTOR_ENABLE
 ((
uöt32_t
)0x00000080)

	)

1419 
	#ETH_DMAENHANCEDDESCRIPTOR_DISABLE
 ((
uöt32_t
)0x00000000)

	)

1427 
	#ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1
 ((
uöt32_t
)0x00000000)

	)

1428 
	#ETH_DMAARBITRATION_ROUNDROBIN_RXTX_2_1
 ((
uöt32_t
)0x00004000)

	)

1429 
	#ETH_DMAARBITRATION_ROUNDROBIN_RXTX_3_1
 ((
uöt32_t
)0x00008000)

	)

1430 
	#ETH_DMAARBITRATION_ROUNDROBIN_RXTX_4_1
 ((
uöt32_t
)0x0000C000)

	)

1431 
	#ETH_DMAARBITRATION_RXPRIORTX
 ((
uöt32_t
)0x00000002)

	)

1439 
	#ETH_DMATXDESC_LASTSEGMENTS
 ((
uöt32_t
)0x40000000Ë

	)

1440 
	#ETH_DMATXDESC_FIRSTSEGMENT
 ((
uöt32_t
)0x20000000Ë

	)

1448 
	#ETH_DMATXDESC_CHECKSUMBYPASS
 ((
uöt32_t
)0x00000000Ë

	)

1449 
	#ETH_DMATXDESC_CHECKSUMIPV4HEADER
 ((
uöt32_t
)0x00400000Ë

	)

1450 
	#ETH_DMATXDESC_CHECKSUMTCPUDPICMPSEGMENT
 ((
uöt32_t
)0x00800000Ë

	)

1451 
	#ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL
 ((
uöt32_t
)0x00C00000Ë

	)

1459 
	#ETH_DMARXDESC_BUFFER1
 ((
uöt32_t
)0x00000000Ë

	)

1460 
	#ETH_DMARXDESC_BUFFER2
 ((
uöt32_t
)0x00000001Ë

	)

1468 
	#ETH_PMT_FLAG_WUFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

1469 
	#ETH_PMT_FLAG_WUFR
 ((
uöt32_t
)0x00000040Ë

	)

1470 
	#ETH_PMT_FLAG_MPR
 ((
uöt32_t
)0x00000020Ë

	)

1478 
	#ETH_MMC_IT_TGF
 ((
uöt32_t
)0x00200000Ë

	)

1479 
	#ETH_MMC_IT_TGFMSC
 ((
uöt32_t
)0x00008000Ë

	)

1480 
	#ETH_MMC_IT_TGFSC
 ((
uöt32_t
)0x00004000Ë

	)

1488 
	#ETH_MMC_IT_RGUF
 ((
uöt32_t
)0x10020000Ë

	)

1489 
	#ETH_MMC_IT_RFAE
 ((
uöt32_t
)0x10000040Ë

	)

1490 
	#ETH_MMC_IT_RFCE
 ((
uöt32_t
)0x10000020Ë

	)

1498 
	#ETH_MAC_FLAG_TST
 ((
uöt32_t
)0x00000200Ë

	)

1499 
	#ETH_MAC_FLAG_MMCT
 ((
uöt32_t
)0x00000040Ë

	)

1500 
	#ETH_MAC_FLAG_MMCR
 ((
uöt32_t
)0x00000020Ë

	)

1501 
	#ETH_MAC_FLAG_MMC
 ((
uöt32_t
)0x00000010Ë

	)

1502 
	#ETH_MAC_FLAG_PMT
 ((
uöt32_t
)0x00000008Ë

	)

1510 
	#ETH_DMA_FLAG_TST
 ((
uöt32_t
)0x20000000Ë

	)

1511 
	#ETH_DMA_FLAG_PMT
 ((
uöt32_t
)0x10000000Ë

	)

1512 
	#ETH_DMA_FLAG_MMC
 ((
uöt32_t
)0x08000000Ë

	)

1513 
	#ETH_DMA_FLAG_DATATRANSFERERROR
 ((
uöt32_t
)0x00800000Ë

	)

1514 
	#ETH_DMA_FLAG_READWRITEERROR
 ((
uöt32_t
)0x01000000Ë

	)

1515 
	#ETH_DMA_FLAG_ACCESSERROR
 ((
uöt32_t
)0x02000000Ë

	)

1516 
	#ETH_DMA_FLAG_NIS
 ((
uöt32_t
)0x00010000Ë

	)

1517 
	#ETH_DMA_FLAG_AIS
 ((
uöt32_t
)0x00008000Ë

	)

1518 
	#ETH_DMA_FLAG_ER
 ((
uöt32_t
)0x00004000Ë

	)

1519 
	#ETH_DMA_FLAG_FBE
 ((
uöt32_t
)0x00002000Ë

	)

1520 
	#ETH_DMA_FLAG_ET
 ((
uöt32_t
)0x00000400Ë

	)

1521 
	#ETH_DMA_FLAG_RWT
 ((
uöt32_t
)0x00000200Ë

	)

1522 
	#ETH_DMA_FLAG_RPS
 ((
uöt32_t
)0x00000100Ë

	)

1523 
	#ETH_DMA_FLAG_RBU
 ((
uöt32_t
)0x00000080Ë

	)

1524 
	#ETH_DMA_FLAG_R
 ((
uöt32_t
)0x00000040Ë

	)

1525 
	#ETH_DMA_FLAG_TU
 ((
uöt32_t
)0x00000020Ë

	)

1526 
	#ETH_DMA_FLAG_RO
 ((
uöt32_t
)0x00000010Ë

	)

1527 
	#ETH_DMA_FLAG_TJT
 ((
uöt32_t
)0x00000008Ë

	)

1528 
	#ETH_DMA_FLAG_TBU
 ((
uöt32_t
)0x00000004Ë

	)

1529 
	#ETH_DMA_FLAG_TPS
 ((
uöt32_t
)0x00000002Ë

	)

1530 
	#ETH_DMA_FLAG_T
 ((
uöt32_t
)0x00000001Ë

	)

1538 
	#ETH_MAC_IT_TST
 ((
uöt32_t
)0x00000200Ë

	)

1539 
	#ETH_MAC_IT_MMCT
 ((
uöt32_t
)0x00000040Ë

	)

1540 
	#ETH_MAC_IT_MMCR
 ((
uöt32_t
)0x00000020Ë

	)

1541 
	#ETH_MAC_IT_MMC
 ((
uöt32_t
)0x00000010Ë

	)

1542 
	#ETH_MAC_IT_PMT
 ((
uöt32_t
)0x00000008Ë

	)

1550 
	#ETH_DMA_IT_TST
 ((
uöt32_t
)0x20000000Ë

	)

1551 
	#ETH_DMA_IT_PMT
 ((
uöt32_t
)0x10000000Ë

	)

1552 
	#ETH_DMA_IT_MMC
 ((
uöt32_t
)0x08000000Ë

	)

1553 
	#ETH_DMA_IT_NIS
 ((
uöt32_t
)0x00010000Ë

	)

1554 
	#ETH_DMA_IT_AIS
 ((
uöt32_t
)0x00008000Ë

	)

1555 
	#ETH_DMA_IT_ER
 ((
uöt32_t
)0x00004000Ë

	)

1556 
	#ETH_DMA_IT_FBE
 ((
uöt32_t
)0x00002000Ë

	)

1557 
	#ETH_DMA_IT_ET
 ((
uöt32_t
)0x00000400Ë

	)

1558 
	#ETH_DMA_IT_RWT
 ((
uöt32_t
)0x00000200Ë

	)

1559 
	#ETH_DMA_IT_RPS
 ((
uöt32_t
)0x00000100Ë

	)

1560 
	#ETH_DMA_IT_RBU
 ((
uöt32_t
)0x00000080Ë

	)

1561 
	#ETH_DMA_IT_R
 ((
uöt32_t
)0x00000040Ë

	)

1562 
	#ETH_DMA_IT_TU
 ((
uöt32_t
)0x00000020Ë

	)

1563 
	#ETH_DMA_IT_RO
 ((
uöt32_t
)0x00000010Ë

	)

1564 
	#ETH_DMA_IT_TJT
 ((
uöt32_t
)0x00000008Ë

	)

1565 
	#ETH_DMA_IT_TBU
 ((
uöt32_t
)0x00000004Ë

	)

1566 
	#ETH_DMA_IT_TPS
 ((
uöt32_t
)0x00000002Ë

	)

1567 
	#ETH_DMA_IT_T
 ((
uöt32_t
)0x00000001Ë

	)

1575 
	#ETH_DMA_TRANSMITPROCESS_STOPPED
 ((
uöt32_t
)0x00000000Ë

	)

1576 
	#ETH_DMA_TRANSMITPROCESS_FETCHING
 ((
uöt32_t
)0x00100000Ë

	)

1577 
	#ETH_DMA_TRANSMITPROCESS_WAITING
 ((
uöt32_t
)0x00200000Ë

	)

1578 
	#ETH_DMA_TRANSMITPROCESS_READING
 ((
uöt32_t
)0x00300000Ë

	)

1579 
	#ETH_DMA_TRANSMITPROCESS_SUSPENDED
 ((
uöt32_t
)0x00600000Ë

	)

1580 
	#ETH_DMA_TRANSMITPROCESS_CLOSING
 ((
uöt32_t
)0x00700000Ë

	)

1590 
	#ETH_DMA_RECEIVEPROCESS_STOPPED
 ((
uöt32_t
)0x00000000Ë

	)

1591 
	#ETH_DMA_RECEIVEPROCESS_FETCHING
 ((
uöt32_t
)0x00020000Ë

	)

1592 
	#ETH_DMA_RECEIVEPROCESS_WAITING
 ((
uöt32_t
)0x00060000Ë

	)

1593 
	#ETH_DMA_RECEIVEPROCESS_SUSPENDED
 ((
uöt32_t
)0x00080000Ë

	)

1594 
	#ETH_DMA_RECEIVEPROCESS_CLOSING
 ((
uöt32_t
)0x000A0000Ë

	)

1595 
	#ETH_DMA_RECEIVEPROCESS_QUEUING
 ((
uöt32_t
)0x000E0000Ë

	)

1604 
	#ETH_DMA_OVERFLOW_RXFIFOCOUNTER
 ((
uöt32_t
)0x10000000Ë

	)

1605 
	#ETH_DMA_OVERFLOW_MISSEDFRAMECOUNTER
 ((
uöt32_t
)0x00010000Ë

	)

1613 
	#ETH_EXTI_LINE_WAKEUP
 ((
uöt32_t
)0x00080000Ë

	)

1633 
	#__HAL_ETH_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_ETH_STATE_RESET
)

	)

1641 
	#__HAL_ETH_DMATXDESC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 & (__FLAG__Ë=(__FLAG__))

	)

1649 
	#__HAL_ETH_DMARXDESC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
RxDesc
->
Sètus
 & (__FLAG__Ë=(__FLAG__))

	)

1656 
	#__HAL_ETH_DMARXDESC_ENABLE_IT
(
__HANDLE__
Ë((__HANDLE__)->
RxDesc
->
C⁄åﬁBuf„rSize
 &=(~(
uöt32_t
)
ETH_DMARXDESC_DIC
))

	)

1663 
	#__HAL_ETH_DMARXDESC_DISABLE_IT
(
__HANDLE__
Ë((__HANDLE__)->
RxDesc
->
C⁄åﬁBuf„rSize
 |
ETH_DMARXDESC_DIC
)

	)

1670 
	#__HAL_ETH_DMARXDESC_SET_OWN_BIT
(
__HANDLE__
Ë((__HANDLE__)->
RxDesc
->
Sètus
 |
ETH_DMARXDESC_OWN
)

	)

1677 
	#__HAL_ETH_DMATXDESC_GET_COLLISION_COUNT
(
__HANDLE__
Ë(((__HANDLE__)->
TxDesc
->
Sètus
 & 
ETH_DMATXDESC_CC
Ë>> 
ETH_DMATXDESC_COLLISION_COUNTSHIFT
)

	)

1684 
	#__HAL_ETH_DMATXDESC_SET_OWN_BIT
(
__HANDLE__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 |
ETH_DMATXDESC_OWN
)

	)

1691 
	#__HAL_ETH_DMATXDESC_ENABLE_IT
(
__HANDLE__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 |
ETH_DMATXDESC_IC
)

	)

1698 
	#__HAL_ETH_DMATXDESC_DISABLE_IT
(
__HANDLE__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 &~
ETH_DMATXDESC_IC
)

	)

1711 
	#__HAL_ETH_DMATXDESC_CHECKSUM_INSERTION
(
__HANDLE__
, 
__CHECKSUM__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 |(__CHECKSUM__))

	)

1718 
	#__HAL_ETH_DMATXDESC_CRC_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 &~
ETH_DMATXDESC_DC
)

	)

1725 
	#__HAL_ETH_DMATXDESC_CRC_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 |
ETH_DMATXDESC_DC
)

	)

1732 
	#__HAL_ETH_DMATXDESC_SHORT_FRAME_PADDING_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 &~
ETH_DMATXDESC_DP
)

	)

1739 
	#__HAL_ETH_DMATXDESC_SHORT_FRAME_PADDING_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
TxDesc
->
Sètus
 |
ETH_DMATXDESC_DP
)

	)

1751 
	#__HAL_ETH_MAC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
MACIMR
 |(__INTERRUPT__))

	)

1763 
	#__HAL_ETH_MAC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
MACIMR
 &~(__INTERRUPT__))

	)

1770 
	#__HAL_ETH_INITIATE_PAUSE_CONTROL_FRAME
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACFCR
 |
ETH_MACFCR_FCBBPA
)

	)

1777 
	#__HAL_ETH_GET_FLOW_CONTROL_BUSY_STATUS
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
MACFCR
 & 
ETH_MACFCR_FCBBPA
Ë=ETH_MACFCR_FCBBPA)

	)

1784 
	#__HAL_ETH_BACK_PRESSURE_ACTIVATION_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACFCR
 |
ETH_MACFCR_FCBBPA
)

	)

1791 
	#__HAL_ETH_BACK_PRESSURE_ACTIVATION_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACFCR
 &~
ETH_MACFCR_FCBBPA
)

	)

1805 
	#__HAL_ETH_MAC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
MACSR
 &–__FLAG__)Ë=–__FLAG__))

	)

1814 
	#__HAL_ETH_DMA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DMAIER
 |(__INTERRUPT__))

	)

1823 
	#__HAL_ETH_DMA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DMAIER
 &~(__INTERRUPT__))

	)

1831 
	#__HAL_ETH_DMA_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DMASR
 =(__INTERRUPT__))

	)

1839 
	#__HAL_ETH_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
DMASR
 &–__FLAG__)Ë=–__FLAG__))

	)

1847 
	#__HAL_ETH_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
DMASR
 = (__FLAG__))

	)

1858 
	#__HAL_ETH_GET_DMA_OVERFLOW_STATUS
(
__HANDLE__
, 
__OVERFLOW__
Ë(((__HANDLE__)->
In°™˚
->
DMAMFBOCR
 & (__OVERFLOW__)Ë=(__OVERFLOW__))

	)

1866 
	#__HAL_ETH_SET_RECEIVE_WATCHDOG_TIMER
(
__HANDLE__
, 
__VALUE__
Ë((__HANDLE__)->
In°™˚
->
DMARSWTR
 = (__VALUE__))

	)

1874 
	#__HAL_ETH_GLOBAL_UNICAST_WAKEUP_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACPMTCSR
 |
ETH_MACPMTCSR_GU
)

	)

1882 
	#__HAL_ETH_GLOBAL_UNICAST_WAKEUP_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACPMTCSR
 &~
ETH_MACPMTCSR_GU
)

	)

1889 
	#__HAL_ETH_WAKEUP_FRAME_DETECTION_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACPMTCSR
 |
ETH_MACPMTCSR_WFE
)

	)

1896 
	#__HAL_ETH_WAKEUP_FRAME_DETECTION_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACPMTCSR
 &~
ETH_MACPMTCSR_WFE
)

	)

1903 
	#__HAL_ETH_MAGIC_PACKET_DETECTION_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACPMTCSR
 |
ETH_MACPMTCSR_MPE
)

	)

1910 
	#__HAL_ETH_MAGIC_PACKET_DETECTION_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACPMTCSR
 &~
ETH_MACPMTCSR_WFE
)

	)

1917 
	#__HAL_ETH_POWER_DOWN_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACPMTCSR
 |
ETH_MACPMTCSR_PD
)

	)

1924 
	#__HAL_ETH_POWER_DOWN_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MACPMTCSR
 &~
ETH_MACPMTCSR_PD
)

	)

1936 
	#__HAL_ETH_GET_PMT_FLAG_STATUS
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
MACPMTCSR
 &–__FLAG__)Ë=–__FLAG__))

	)

1943 
	#__HAL_ETH_MMC_COUNTER_FULL_PRESET
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MMCCR
 |(
ETH_MMCCR_MCFHP
 | 
ETH_MMCCR_MCP
))

	)

1950 
	#__HAL_ETH_MMC_COUNTER_HALF_PRESET
(
__HANDLE__
Ëdo{(__HANDLE__)->
In°™˚
->
MMCCR
 &~
ETH_MMCCR_MCFHP
;\

1951 (
__HANDLE__
)->
In°™˚
->
MMCCR
 |
ETH_MMCCR_MCP
;
	}
} 0)

	)

1958 
	#__HAL_ETH_MMC_COUNTER_FREEZE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MMCCR
 |
ETH_MMCCR_MCF
)

	)

1965 
	#__HAL_ETH_MMC_COUNTER_FREEZE_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MMCCR
 &~
ETH_MMCCR_MCF
)

	)

1972 
	#__HAL_ETH_ETH_MMC_RESET_ONREAD_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MMCCR
 |
ETH_MMCCR_ROR
)

	)

1979 
	#__HAL_ETH_ETH_MMC_RESET_ONREAD_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MMCCR
 &~
ETH_MMCCR_ROR
)

	)

1986 
	#__HAL_ETH_ETH_MMC_COUNTER_ROLLOVER_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MMCCR
 &~
ETH_MMCCR_CSR
)

	)

1993 
	#__HAL_ETH_ETH_MMC_COUNTER_ROLLOVER_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MMCCR
 |
ETH_MMCCR_CSR
)

	)

2000 
	#__HAL_ETH_MMC_COUNTERS_RESET
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
MMCCR
 |
ETH_MMCCR_CR
)

	)

2012 
	#__HAL_ETH_MMC_RX_IT_ENABLE
(
__HANDLE__
, 
__INTERRUPT__
Ë(__HANDLE__)->
In°™˚
->
MMCRIMR
 &~((__INTERRUPT__Ë& 0xEFFFFFFF)

	)

2023 
	#__HAL_ETH_MMC_RX_IT_DISABLE
(
__HANDLE__
, 
__INTERRUPT__
Ë(__HANDLE__)->
In°™˚
->
MMCRIMR
 |((__INTERRUPT__Ë& 0xEFFFFFFF)

	)

2034 
	#__HAL_ETH_MMC_TX_IT_ENABLE
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
MMCRIMR
 &~ (__INTERRUPT__))

	)

2046 
	#__HAL_ETH_MMC_TX_IT_DISABLE
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
MMCRIMR
 |(__INTERRUPT__))

	)

2052 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_IT
(Ë
EXTI
->
IMR
 |(
ETH_EXTI_LINE_WAKEUP
)

	)

2058 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_IT
(Ë
EXTI
->
IMR
 &~(
ETH_EXTI_LINE_WAKEUP
)

	)

2064 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_EVENT
(Ë
EXTI
->
EMR
 |(
ETH_EXTI_LINE_WAKEUP
)

	)

2070 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_EVENT
(Ë
EXTI
->
EMR
 &~(
ETH_EXTI_LINE_WAKEUP
)

	)

2076 
	#__HAL_ETH_WAKEUP_EXTI_GET_FLAG
(Ë
EXTI
->
PR
 & (
ETH_EXTI_LINE_WAKEUP
)

	)

2082 
	#__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG
(Ë
EXTI
->
PR
 = (
ETH_EXTI_LINE_WAKEUP
)

	)

2088 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER
(Ë
EXTI
->
RTSR
 |
ETH_EXTI_LINE_WAKEUP


	)

2094 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_RISING_EDGE_TRIGGER
(Ë
EXTI
->
RTSR
 &~(
ETH_EXTI_LINE_WAKEUP
)

	)

2100 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER
(Ë
EXTI
->
FTSR
 |(
ETH_EXTI_LINE_WAKEUP
)

	)

2106 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_FALLING_EDGE_TRIGGER
(Ë
EXTI
->
FTSR
 &~(
ETH_EXTI_LINE_WAKEUP
)

	)

2112 
	#__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER
(Ë
EXTI
->
RTSR
 |
ETH_EXTI_LINE_WAKEUP
;\

2113 
EXTI
->
FTSR
 |
ETH_EXTI_LINE_WAKEUP


	)

2119 
	#__HAL_ETH_WAKEUP_EXTI_DISABLE_FALLINGRISING_TRIGGER
(Ë
EXTI
->
RTSR
 &~(
ETH_EXTI_LINE_WAKEUP
);\

2120 
EXTI
->
FTSR
 &~(
ETH_EXTI_LINE_WAKEUP
)

	)

2126 
	#__HAL_ETH_WAKEUP_EXTI_GENERATE_SWIT
(Ë
EXTI
->
SWIER
|
ETH_EXTI_LINE_WAKEUP


	)

2142 
HAL_SètusTy≥Def
 
HAL_ETH_Inô
(
ETH_H™dÀTy≥Def
 *
hëh
);

2143 
HAL_SètusTy≥Def
 
HAL_ETH_DeInô
(
ETH_H™dÀTy≥Def
 *
hëh
);

2144 
HAL_ETH_M•Inô
(
ETH_H™dÀTy≥Def
 *
hëh
);

2145 
HAL_ETH_M•DeInô
(
ETH_H™dÀTy≥Def
 *
hëh
);

2146 
HAL_SètusTy≥Def
 
HAL_ETH_DMATxDescLi°Inô
(
ETH_H™dÀTy≥Def
 *
hëh
, 
ETH_DMADescTy≥Def
 *
DMATxDescTab
, 
uöt8_t
* 
TxBuff
, 
uöt32_t
 
TxBuffCou¡
);

2147 
HAL_SètusTy≥Def
 
HAL_ETH_DMARxDescLi°Inô
(
ETH_H™dÀTy≥Def
 *
hëh
, 
ETH_DMADescTy≥Def
 *
DMARxDescTab
, 
uöt8_t
 *
RxBuff
, 
uöt32_t
 
RxBuffCou¡
);

2157 
HAL_SètusTy≥Def
 
HAL_ETH_TønsmôFøme
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt32_t
 
FømeLígth
);

2158 
HAL_SètusTy≥Def
 
HAL_ETH_GëRe˚ivedFøme
(
ETH_H™dÀTy≥Def
 *
hëh
);

2160 
HAL_SètusTy≥Def
 
HAL_ETH_RódPHYRegi°î
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt16_t
 
PHYReg
, 
uöt32_t
 *
RegVÆue
);

2161 
HAL_SètusTy≥Def
 
HAL_ETH_WrôePHYRegi°î
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt16_t
 
PHYReg
, 
uöt32_t
 
RegVÆue
);

2163 
HAL_SètusTy≥Def
 
HAL_ETH_GëRe˚ivedFøme_IT
(
ETH_H™dÀTy≥Def
 *
hëh
);

2164 
HAL_ETH_IRQH™dÀr
(
ETH_H™dÀTy≥Def
 *
hëh
);

2166 
HAL_ETH_TxC∂tCÆlback
(
ETH_H™dÀTy≥Def
 *
hëh
);

2167 
HAL_ETH_RxC∂tCÆlback
(
ETH_H™dÀTy≥Def
 *
hëh
);

2168 
HAL_ETH_Eº‹CÆlback
(
ETH_H™dÀTy≥Def
 *
hëh
);

2179 
HAL_SètusTy≥Def
 
HAL_ETH_Sèπ
(
ETH_H™dÀTy≥Def
 *
hëh
);

2180 
HAL_SètusTy≥Def
 
HAL_ETH_St›
(
ETH_H™dÀTy≥Def
 *
hëh
);

2181 
HAL_SètusTy≥Def
 
HAL_ETH_C⁄figMAC
(
ETH_H™dÀTy≥Def
 *
hëh
, 
ETH_MACInôTy≥Def
 *
macc⁄f
);

2182 
HAL_SètusTy≥Def
 
HAL_ETH_C⁄figDMA
(
ETH_H™dÀTy≥Def
 *
hëh
, 
ETH_DMAInôTy≥Def
 *
dmac⁄f
);

2192 
HAL_ETH_SèãTy≥Def
 
HAL_ETH_GëSèã
(
ETH_H™dÀTy≥Def
 *
hëh
);

2210 
	gSTM32F437xx
 || 
	gSTM32F429xx
 || 
	gSTM32F439xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

2212 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_flash.h

39 #i‚de‡
__STM32F4xx_HAL_FLASH_H


40 
	#__STM32F4xx_HAL_FLASH_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
FLASH_PROC_NONE
 = 0,

68 
FLASH_PROC_SECTERASE
,

69 
FLASH_PROC_MASSERASE
,

70 
FLASH_PROC_PROGRAM


71 } 
	tFLASH_Pro˚duªTy≥Def
;

78 
__IO
 
FLASH_Pro˚duªTy≥Def
 
Pro˚duªOnGoög
;

80 
__IO
 
uöt32_t
 
NbSe˘‹sToEø£
;

82 
__IO
 
uöt8_t
 
VﬁègeF‹Eø£
;

84 
__IO
 
uöt32_t
 
Se˘‹
;

86 
__IO
 
uöt32_t
 
B™k
;

88 
__IO
 
uöt32_t
 
Addªss
;

90 
HAL_LockTy≥Def
 
Lock
;

92 
__IO
 
uöt32_t
 
Eº‹Code
;

94 }
	tFLASH_Pro˚ssTy≥Def
;

108 
	#HAL_FLASH_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

109 
	#HAL_FLASH_ERROR_RD
 ((
uöt32_t
)0x00000001Ë

	)

110 
	#HAL_FLASH_ERROR_PGS
 ((
uöt32_t
)0x00000002Ë

	)

111 
	#HAL_FLASH_ERROR_PGP
 ((
uöt32_t
)0x00000004Ë

	)

112 
	#HAL_FLASH_ERROR_PGA
 ((
uöt32_t
)0x00000008Ë

	)

113 
	#HAL_FLASH_ERROR_WRP
 ((
uöt32_t
)0x00000010Ë

	)

114 
	#HAL_FLASH_ERROR_OPERATION
 ((
uöt32_t
)0x00000020Ë

	)

122 
	#FLASH_TYPEPROGRAM_BYTE
 ((
uöt32_t
)0x00Ë

	)

123 
	#FLASH_TYPEPROGRAM_HALFWORD
 ((
uöt32_t
)0x01Ë

	)

124 
	#FLASH_TYPEPROGRAM_WORD
 ((
uöt32_t
)0x02Ë

	)

125 
	#FLASH_TYPEPROGRAM_DOUBLEWORD
 ((
uöt32_t
)0x03Ë

	)

134 
	#FLASH_FLAG_EOP
 
FLASH_SR_EOP


	)

135 
	#FLASH_FLAG_OPERR
 
FLASH_SR_SOP


	)

136 
	#FLASH_FLAG_WRPERR
 
FLASH_SR_WRPERR


	)

137 
	#FLASH_FLAG_PGAERR
 
FLASH_SR_PGAERR


	)

138 
	#FLASH_FLAG_PGPERR
 
FLASH_SR_PGPERR


	)

139 
	#FLASH_FLAG_PGSERR
 
FLASH_SR_PGSERR


	)

140 
	#FLASH_FLAG_RDERR
 ((
uöt32_t
)0x00000100Ë

	)

141 
	#FLASH_FLAG_BSY
 
FLASH_SR_BSY


	)

150 
	#FLASH_IT_EOP
 
FLASH_CR_EOPIE


	)

151 
	#FLASH_IT_ERR
 ((
uöt32_t
)0x02000000Ë

	)

159 
	#FLASH_PSIZE_BYTE
 ((
uöt32_t
)0x00000000)

	)

160 
	#FLASH_PSIZE_HALF_WORD
 ((
uöt32_t
)0x00000100)

	)

161 
	#FLASH_PSIZE_WORD
 ((
uöt32_t
)0x00000200)

	)

162 
	#FLASH_PSIZE_DOUBLE_WORD
 ((
uöt32_t
)0x00000300)

	)

163 
	#CR_PSIZE_MASK
 ((
uöt32_t
)0xFFFFFCFF)

	)

171 
	#RDP_KEY
 ((
uöt16_t
)0x00A5)

	)

172 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

173 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

174 
	#FLASH_OPT_KEY1
 ((
uöt32_t
)0x08192A3B)

	)

175 
	#FLASH_OPT_KEY2
 ((
uöt32_t
)0x4C5D6E7F)

	)

194 
	#__HAL_FLASH_SET_LATENCY
(
__LATENCY__
Ë(*(
__IO
 
uöt8_t
 *)
ACR_BYTE0_ADDRESS
 = (uöt8_t)(__LATENCY__))

	)

201 
	#__HAL_FLASH_GET_LATENCY
(Ë(
	`READ_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_LATENCY
))

	)

207 
	#__HAL_FLASH_PREFETCH_BUFFER_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
)

	)

213 
	#__HAL_FLASH_PREFETCH_BUFFER_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTEN
))

	)

219 
	#__HAL_FLASH_INSTRUCTION_CACHE_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_ICEN
)

	)

225 
	#__HAL_FLASH_INSTRUCTION_CACHE_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_ICEN
))

	)

231 
	#__HAL_FLASH_DATA_CACHE_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_DCEN
)

	)

237 
	#__HAL_FLASH_DATA_CACHE_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_DCEN
))

	)

244 
	#__HAL_FLASH_INSTRUCTION_CACHE_RESET
(Ëdÿ{
FLASH
->
ACR
 |
FLASH_ACR_ICRST
; \

245 
FLASH
->
ACR
 &~
FLASH_ACR_ICRST
; \

246 }0)

	)

253 
	#__HAL_FLASH_DATA_CACHE_RESET
(Ëdÿ{
FLASH
->
ACR
 |
FLASH_ACR_DCRST
; \

254 
FLASH
->
ACR
 &~
FLASH_ACR_DCRST
; \

255 }0)

	)

264 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
Ë(
FLASH
->
CR
 |(__INTERRUPT__))

	)

274 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
Ë(
FLASH
->
CR
 &~(
uöt32_t
)(__INTERRUPT__))

	)

290 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
Ë((
FLASH
->
SR
 & (__FLAG__)))

	)

305 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
Ë(
FLASH
->
SR
 = (__FLAG__))

	)

311 
	~"°m32f4xx_hÆ_Êash_ex.h
"

312 
	~"°m32f4xx_hÆ_Êash_ømfunc.h
"

322 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
);

323 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
);

325 
HAL_FLASH_IRQH™dÀr
();

327 
HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

328 
HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

337 
HAL_SètusTy≥Def
 
HAL_FLASH_U∆ock
();

338 
HAL_SètusTy≥Def
 
HAL_FLASH_Lock
();

339 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_U∆ock
();

340 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_Lock
();

342 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_Launch
();

351 
uöt32_t
 
HAL_FLASH_GëEº‹
();

352 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

377 
	#ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

381 
	#OPTCR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C14)

	)

385 
	#OPTCR_BYTE1_ADDRESS
 ((
uöt32_t
)0x40023C15)

	)

389 
	#OPTCR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C16)

	)

393 
	#OPTCR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023C17)

	)

407 
	#IS_FLASH_TYPEPROGRAM
(
VALUE
)(((VALUEË=
FLASH_TYPEPROGRAM_BYTE
) || \

408 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_HALFWORD
) || \

409 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_WORD
) || \

410 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_DOUBLEWORD
))

	)

436 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_flash_ex.h

39 #i‚de‡
__STM32F4xx_HAL_FLASH_EX_H


40 
	#__STM32F4xx_HAL_FLASH_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
Ty≥Eø£
;

70 
uöt32_t
 
B™ks
;

73 
uöt32_t
 
Se˘‹
;

76 
uöt32_t
 
NbSe˘‹s
;

79 
uöt32_t
 
VﬁègeR™ge
;

82 } 
	tFLASH_Eø£InôTy≥Def
;

89 
uöt32_t
 
O±i⁄Ty≥
;

92 
uöt32_t
 
WRPSèã
;

95 
uöt32_t
 
WRPSe˘‹
;

98 
uöt32_t
 
B™ks
;

101 
uöt32_t
 
RDPLevñ
;

104 
uöt32_t
 
BORLevñ
;

107 
uöt8_t
 
USERC⁄fig
;

109 } 
	tFLASH_OBProgømInôTy≥Def
;

114 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

115 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

116 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

117 
deföed
(
STM32F479xx
)

120 
uöt32_t
 
O±i⁄Ty≥
;

123 
uöt32_t
 
PCROPSèã
;

126 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

127 
uöt16_t
 
Se˘‹s
;

131 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

132 
uöt32_t
 
B™ks
;

135 
uöt16_t
 
Se˘‹sB™k1
;

138 
uöt16_t
 
Se˘‹sB™k2
;

141 
uöt8_t
 
BoŸC⁄fig
;

145 } 
	tFLASH_AdvOBProgømInôTy≥Def
;

160 
	#FLASH_TYPEERASE_SECTORS
 ((
uöt32_t
)0x00Ë

	)

161 
	#FLASH_TYPEERASE_MASSERASE
 ((
uöt32_t
)0x01Ë

	)

169 
	#FLASH_VOLTAGE_RANGE_1
 ((
uöt32_t
)0x00Ë

	)

170 
	#FLASH_VOLTAGE_RANGE_2
 ((
uöt32_t
)0x01Ë

	)

171 
	#FLASH_VOLTAGE_RANGE_3
 ((
uöt32_t
)0x02Ë

	)

172 
	#FLASH_VOLTAGE_RANGE_4
 ((
uöt32_t
)0x03Ë

	)

180 
	#OB_WRPSTATE_DISABLE
 ((
uöt32_t
)0x00Ë

	)

181 
	#OB_WRPSTATE_ENABLE
 ((
uöt32_t
)0x01Ë

	)

189 
	#OPTIONBYTE_WRP
 ((
uöt32_t
)0x01Ë

	)

190 
	#OPTIONBYTE_RDP
 ((
uöt32_t
)0x02Ë

	)

191 
	#OPTIONBYTE_USER
 ((
uöt32_t
)0x04Ë

	)

192 
	#OPTIONBYTE_BOR
 ((
uöt32_t
)0x08Ë

	)

200 
	#OB_RDP_LEVEL_0
 ((
uöt8_t
)0xAA)

	)

201 
	#OB_RDP_LEVEL_1
 ((
uöt8_t
)0x55)

	)

202 
	#OB_RDP_LEVEL_2
 ((
uöt8_t
)0xCCË

	)

211 
	#OB_IWDG_SW
 ((
uöt8_t
)0x20Ë

	)

212 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

220 
	#OB_STOP_NO_RST
 ((
uöt8_t
)0x40Ë

	)

221 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

230 
	#OB_STDBY_NO_RST
 ((
uöt8_t
)0x80Ë

	)

231 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

239 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x00Ë

	)

240 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x04Ë

	)

241 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

242 
	#OB_BOR_OFF
 ((
uöt8_t
)0x0CË

	)

247 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

248 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

249 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

250 
deföed
(
STM32F479xx
)

254 
	#OB_PCROP_STATE_DISABLE
 ((
uöt32_t
)0x00Ë

	)

255 
	#OB_PCROP_STATE_ENABLE
 ((
uöt32_t
)0x01Ë

	)

260 
STM32F410xx
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

265 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

266 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

267 
	#OPTIONBYTE_PCROP
 ((
uöt32_t
)0x01Ë

	)

268 
	#OPTIONBYTE_BOOTCONFIG
 ((
uöt32_t
)0x02Ë

	)

271 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

272 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

273 
	#OPTIONBYTE_PCROP
 ((
uöt32_t
)0x01Ë

	)

283 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

284 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

285 
	#FLASH_LATENCY_0
 
FLASH_ACR_LATENCY_0WS


	)

286 
	#FLASH_LATENCY_1
 
FLASH_ACR_LATENCY_1WS


	)

287 
	#FLASH_LATENCY_2
 
FLASH_ACR_LATENCY_2WS


	)

288 
	#FLASH_LATENCY_3
 
FLASH_ACR_LATENCY_3WS


	)

289 
	#FLASH_LATENCY_4
 
FLASH_ACR_LATENCY_4WS


	)

290 
	#FLASH_LATENCY_5
 
FLASH_ACR_LATENCY_5WS


	)

291 
	#FLASH_LATENCY_6
 
FLASH_ACR_LATENCY_6WS


	)

292 
	#FLASH_LATENCY_7
 
FLASH_ACR_LATENCY_7WS


	)

293 
	#FLASH_LATENCY_8
 
FLASH_ACR_LATENCY_8WS


	)

294 
	#FLASH_LATENCY_9
 
FLASH_ACR_LATENCY_9WS


	)

295 
	#FLASH_LATENCY_10
 
FLASH_ACR_LATENCY_10WS


	)

296 
	#FLASH_LATENCY_11
 
FLASH_ACR_LATENCY_11WS


	)

297 
	#FLASH_LATENCY_12
 
FLASH_ACR_LATENCY_12WS


	)

298 
	#FLASH_LATENCY_13
 
FLASH_ACR_LATENCY_13WS


	)

299 
	#FLASH_LATENCY_14
 
FLASH_ACR_LATENCY_14WS


	)

300 
	#FLASH_LATENCY_15
 
FLASH_ACR_LATENCY_15WS


	)

305 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

306 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

307 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

309 
	#FLASH_LATENCY_0
 
FLASH_ACR_LATENCY_0WS


	)

310 
	#FLASH_LATENCY_1
 
FLASH_ACR_LATENCY_1WS


	)

311 
	#FLASH_LATENCY_2
 
FLASH_ACR_LATENCY_2WS


	)

312 
	#FLASH_LATENCY_3
 
FLASH_ACR_LATENCY_3WS


	)

313 
	#FLASH_LATENCY_4
 
FLASH_ACR_LATENCY_4WS


	)

314 
	#FLASH_LATENCY_5
 
FLASH_ACR_LATENCY_5WS


	)

315 
	#FLASH_LATENCY_6
 
FLASH_ACR_LATENCY_6WS


	)

316 
	#FLASH_LATENCY_7
 
FLASH_ACR_LATENCY_7WS


	)

328 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

329 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

330 
	#FLASH_BANK_1
 ((
uöt32_t
)1Ë

	)

331 
	#FLASH_BANK_2
 ((
uöt32_t
)2Ë

	)

332 
	#FLASH_BANK_BOTH
 ((
uöt32_t
)
FLASH_BANK_1
 | 
FLASH_BANK_2
Ë

	)

335 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

336 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

337 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

338 
	#FLASH_BANK_1
 ((
uöt32_t
)1Ë

	)

347 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

348 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

349 
	#FLASH_MER_BIT
 (
FLASH_CR_MER1
 | 
FLASH_CR_MER2
Ë

	)

352 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

353 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

354 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

355 
	#FLASH_MER_BIT
 (
FLASH_CR_MER
Ë

	)

365 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

366 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

367 
	#FLASH_SECTOR_0
 ((
uöt32_t
)0Ë

	)

368 
	#FLASH_SECTOR_1
 ((
uöt32_t
)1Ë

	)

369 
	#FLASH_SECTOR_2
 ((
uöt32_t
)2Ë

	)

370 
	#FLASH_SECTOR_3
 ((
uöt32_t
)3Ë

	)

371 
	#FLASH_SECTOR_4
 ((
uöt32_t
)4Ë

	)

372 
	#FLASH_SECTOR_5
 ((
uöt32_t
)5Ë

	)

373 
	#FLASH_SECTOR_6
 ((
uöt32_t
)6Ë

	)

374 
	#FLASH_SECTOR_7
 ((
uöt32_t
)7Ë

	)

375 
	#FLASH_SECTOR_8
 ((
uöt32_t
)8Ë

	)

376 
	#FLASH_SECTOR_9
 ((
uöt32_t
)9Ë

	)

377 
	#FLASH_SECTOR_10
 ((
uöt32_t
)10Ë

	)

378 
	#FLASH_SECTOR_11
 ((
uöt32_t
)11Ë

	)

379 
	#FLASH_SECTOR_12
 ((
uöt32_t
)12Ë

	)

380 
	#FLASH_SECTOR_13
 ((
uöt32_t
)13Ë

	)

381 
	#FLASH_SECTOR_14
 ((
uöt32_t
)14Ë

	)

382 
	#FLASH_SECTOR_15
 ((
uöt32_t
)15Ë

	)

383 
	#FLASH_SECTOR_16
 ((
uöt32_t
)16Ë

	)

384 
	#FLASH_SECTOR_17
 ((
uöt32_t
)17Ë

	)

385 
	#FLASH_SECTOR_18
 ((
uöt32_t
)18Ë

	)

386 
	#FLASH_SECTOR_19
 ((
uöt32_t
)19Ë

	)

387 
	#FLASH_SECTOR_20
 ((
uöt32_t
)20Ë

	)

388 
	#FLASH_SECTOR_21
 ((
uöt32_t
)21Ë

	)

389 
	#FLASH_SECTOR_22
 ((
uöt32_t
)22Ë

	)

390 
	#FLASH_SECTOR_23
 ((
uöt32_t
)23Ë

	)

395 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

396 
	#FLASH_SECTOR_0
 ((
uöt32_t
)0Ë

	)

397 
	#FLASH_SECTOR_1
 ((
uöt32_t
)1Ë

	)

398 
	#FLASH_SECTOR_2
 ((
uöt32_t
)2Ë

	)

399 
	#FLASH_SECTOR_3
 ((
uöt32_t
)3Ë

	)

400 
	#FLASH_SECTOR_4
 ((
uöt32_t
)4Ë

	)

401 
	#FLASH_SECTOR_5
 ((
uöt32_t
)5Ë

	)

402 
	#FLASH_SECTOR_6
 ((
uöt32_t
)6Ë

	)

403 
	#FLASH_SECTOR_7
 ((
uöt32_t
)7Ë

	)

404 
	#FLASH_SECTOR_8
 ((
uöt32_t
)8Ë

	)

405 
	#FLASH_SECTOR_9
 ((
uöt32_t
)9Ë

	)

406 
	#FLASH_SECTOR_10
 ((
uöt32_t
)10Ë

	)

407 
	#FLASH_SECTOR_11
 ((
uöt32_t
)11Ë

	)

412 #i‡
deföed
(
STM32F401xC
)

413 
	#FLASH_SECTOR_0
 ((
uöt32_t
)0Ë

	)

414 
	#FLASH_SECTOR_1
 ((
uöt32_t
)1Ë

	)

415 
	#FLASH_SECTOR_2
 ((
uöt32_t
)2Ë

	)

416 
	#FLASH_SECTOR_3
 ((
uöt32_t
)3Ë

	)

417 
	#FLASH_SECTOR_4
 ((
uöt32_t
)4Ë

	)

418 
	#FLASH_SECTOR_5
 ((
uöt32_t
)5Ë

	)

423 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

424 
	#FLASH_SECTOR_0
 ((
uöt32_t
)0Ë

	)

425 
	#FLASH_SECTOR_1
 ((
uöt32_t
)1Ë

	)

426 
	#FLASH_SECTOR_2
 ((
uöt32_t
)2Ë

	)

427 
	#FLASH_SECTOR_3
 ((
uöt32_t
)3Ë

	)

428 
	#FLASH_SECTOR_4
 ((
uöt32_t
)4Ë

	)

433 #i‡
deföed
(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

434 
	#FLASH_SECTOR_0
 ((
uöt32_t
)0Ë

	)

435 
	#FLASH_SECTOR_1
 ((
uöt32_t
)1Ë

	)

436 
	#FLASH_SECTOR_2
 ((
uöt32_t
)2Ë

	)

437 
	#FLASH_SECTOR_3
 ((
uöt32_t
)3Ë

	)

438 
	#FLASH_SECTOR_4
 ((
uöt32_t
)4Ë

	)

439 
	#FLASH_SECTOR_5
 ((
uöt32_t
)5Ë

	)

440 
	#FLASH_SECTOR_6
 ((
uöt32_t
)6Ë

	)

441 
	#FLASH_SECTOR_7
 ((
uöt32_t
)7Ë

	)

453 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

454 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

455 
	#OB_WRP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

456 
	#OB_WRP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

457 
	#OB_WRP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

458 
	#OB_WRP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

459 
	#OB_WRP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

460 
	#OB_WRP_SECTOR_5
 ((
uöt32_t
)0x00000020Ë

	)

461 
	#OB_WRP_SECTOR_6
 ((
uöt32_t
)0x00000040Ë

	)

462 
	#OB_WRP_SECTOR_7
 ((
uöt32_t
)0x00000080Ë

	)

463 
	#OB_WRP_SECTOR_8
 ((
uöt32_t
)0x00000100Ë

	)

464 
	#OB_WRP_SECTOR_9
 ((
uöt32_t
)0x00000200Ë

	)

465 
	#OB_WRP_SECTOR_10
 ((
uöt32_t
)0x00000400Ë

	)

466 
	#OB_WRP_SECTOR_11
 ((
uöt32_t
)0x00000800Ë

	)

467 
	#OB_WRP_SECTOR_12
 ((
uöt32_t
)0x00000001 << 12Ë

	)

468 
	#OB_WRP_SECTOR_13
 ((
uöt32_t
)0x00000002 << 12Ë

	)

469 
	#OB_WRP_SECTOR_14
 ((
uöt32_t
)0x00000004 << 12Ë

	)

470 
	#OB_WRP_SECTOR_15
 ((
uöt32_t
)0x00000008 << 12Ë

	)

471 
	#OB_WRP_SECTOR_16
 ((
uöt32_t
)0x00000010 << 12Ë

	)

472 
	#OB_WRP_SECTOR_17
 ((
uöt32_t
)0x00000020 << 12Ë

	)

473 
	#OB_WRP_SECTOR_18
 ((
uöt32_t
)0x00000040 << 12Ë

	)

474 
	#OB_WRP_SECTOR_19
 ((
uöt32_t
)0x00000080 << 12Ë

	)

475 
	#OB_WRP_SECTOR_20
 ((
uöt32_t
)0x00000100 << 12Ë

	)

476 
	#OB_WRP_SECTOR_21
 ((
uöt32_t
)0x00000200 << 12Ë

	)

477 
	#OB_WRP_SECTOR_22
 ((
uöt32_t
)0x00000400 << 12Ë

	)

478 
	#OB_WRP_SECTOR_23
 ((
uöt32_t
)0x00000800 << 12Ë

	)

479 
	#OB_WRP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFF << 12Ë

	)

484 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

485 
	#OB_WRP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

486 
	#OB_WRP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

487 
	#OB_WRP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

488 
	#OB_WRP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

489 
	#OB_WRP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

490 
	#OB_WRP_SECTOR_5
 ((
uöt32_t
)0x00000020Ë

	)

491 
	#OB_WRP_SECTOR_6
 ((
uöt32_t
)0x00000040Ë

	)

492 
	#OB_WRP_SECTOR_7
 ((
uöt32_t
)0x00000080Ë

	)

493 
	#OB_WRP_SECTOR_8
 ((
uöt32_t
)0x00000100Ë

	)

494 
	#OB_WRP_SECTOR_9
 ((
uöt32_t
)0x00000200Ë

	)

495 
	#OB_WRP_SECTOR_10
 ((
uöt32_t
)0x00000400Ë

	)

496 
	#OB_WRP_SECTOR_11
 ((
uöt32_t
)0x00000800Ë

	)

497 
	#OB_WRP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

502 #i‡
deföed
(
STM32F401xC
)

503 
	#OB_WRP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

504 
	#OB_WRP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

505 
	#OB_WRP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

506 
	#OB_WRP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

507 
	#OB_WRP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

508 
	#OB_WRP_SECTOR_5
 ((
uöt32_t
)0x00000020Ë

	)

509 
	#OB_WRP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

514 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

515 
	#OB_WRP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

516 
	#OB_WRP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

517 
	#OB_WRP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

518 
	#OB_WRP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

519 
	#OB_WRP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

520 
	#OB_WRP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

525 #i‡
deföed
(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

526 
	#OB_WRP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

527 
	#OB_WRP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

528 
	#OB_WRP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

529 
	#OB_WRP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

530 
	#OB_WRP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

531 
	#OB_WRP_SECTOR_5
 ((
uöt32_t
)0x00000020Ë

	)

532 
	#OB_WRP_SECTOR_6
 ((
uöt32_t
)0x00000040Ë

	)

533 
	#OB_WRP_SECTOR_7
 ((
uöt32_t
)0x00000080Ë

	)

534 
	#OB_WRP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

545 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

546 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

547 
	#OB_PCROP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

548 
	#OB_PCROP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

549 
	#OB_PCROP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

550 
	#OB_PCROP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

551 
	#OB_PCROP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

552 
	#OB_PCROP_SECTOR_5
 ((
uöt32_t
)0x00000020Ë

	)

553 
	#OB_PCROP_SECTOR_6
 ((
uöt32_t
)0x00000040Ë

	)

554 
	#OB_PCROP_SECTOR_7
 ((
uöt32_t
)0x00000080Ë

	)

555 
	#OB_PCROP_SECTOR_8
 ((
uöt32_t
)0x00000100Ë

	)

556 
	#OB_PCROP_SECTOR_9
 ((
uöt32_t
)0x00000200Ë

	)

557 
	#OB_PCROP_SECTOR_10
 ((
uöt32_t
)0x00000400Ë

	)

558 
	#OB_PCROP_SECTOR_11
 ((
uöt32_t
)0x00000800Ë

	)

559 
	#OB_PCROP_SECTOR_12
 ((
uöt32_t
)0x00000001Ë

	)

560 
	#OB_PCROP_SECTOR_13
 ((
uöt32_t
)0x00000002Ë

	)

561 
	#OB_PCROP_SECTOR_14
 ((
uöt32_t
)0x00000004Ë

	)

562 
	#OB_PCROP_SECTOR_15
 ((
uöt32_t
)0x00000008Ë

	)

563 
	#OB_PCROP_SECTOR_16
 ((
uöt32_t
)0x00000010Ë

	)

564 
	#OB_PCROP_SECTOR_17
 ((
uöt32_t
)0x00000020Ë

	)

565 
	#OB_PCROP_SECTOR_18
 ((
uöt32_t
)0x00000040Ë

	)

566 
	#OB_PCROP_SECTOR_19
 ((
uöt32_t
)0x00000080Ë

	)

567 
	#OB_PCROP_SECTOR_20
 ((
uöt32_t
)0x00000100Ë

	)

568 
	#OB_PCROP_SECTOR_21
 ((
uöt32_t
)0x00000200Ë

	)

569 
	#OB_PCROP_SECTOR_22
 ((
uöt32_t
)0x00000400Ë

	)

570 
	#OB_PCROP_SECTOR_23
 ((
uöt32_t
)0x00000800Ë

	)

571 
	#OB_PCROP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

576 #i‡
deföed
(
STM32F401xC
)

577 
	#OB_PCROP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

578 
	#OB_PCROP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

579 
	#OB_PCROP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

580 
	#OB_PCROP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

581 
	#OB_PCROP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

582 
	#OB_PCROP_SECTOR_5
 ((
uöt32_t
)0x00000020Ë

	)

583 
	#OB_PCROP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

588 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

589 
	#OB_PCROP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

590 
	#OB_PCROP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

591 
	#OB_PCROP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

592 
	#OB_PCROP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

593 
	#OB_PCROP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

594 
	#OB_PCROP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

599 #i‡
deföed
(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

600 
	#OB_PCROP_SECTOR_0
 ((
uöt32_t
)0x00000001Ë

	)

601 
	#OB_PCROP_SECTOR_1
 ((
uöt32_t
)0x00000002Ë

	)

602 
	#OB_PCROP_SECTOR_2
 ((
uöt32_t
)0x00000004Ë

	)

603 
	#OB_PCROP_SECTOR_3
 ((
uöt32_t
)0x00000008Ë

	)

604 
	#OB_PCROP_SECTOR_4
 ((
uöt32_t
)0x00000010Ë

	)

605 
	#OB_PCROP_SECTOR_5
 ((
uöt32_t
)0x00000020Ë

	)

606 
	#OB_PCROP_SECTOR_6
 ((
uöt32_t
)0x00000040Ë

	)

607 
	#OB_PCROP_SECTOR_7
 ((
uöt32_t
)0x00000080Ë

	)

608 
	#OB_PCROP_SECTOR_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

619 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

620 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

621 
	#OB_DUAL_BOOT_ENABLE
 ((
uöt8_t
)0x10Ë

	)

622 
	#OB_DUAL_BOOT_DISABLE
 ((
uöt8_t
)0x00Ë

	)

631 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

632 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

633 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

634 
deföed
(
STM32F479xx
)

635 
	#OB_PCROP_DESELECTED
 ((
uöt8_t
)0x00Ë

	)

636 
	#OB_PCROP_SELECTED
 ((
uöt8_t
)0x80Ë

	)

638 
STM32F410xx
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

658 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
Se˘‹Eº‹
);

659 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
);

660 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

661 
HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

663 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

664 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

665 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

666 
deföed
(
STM32F479xx
)

667 
HAL_SètusTy≥Def
 
HAL_FLASHEx_AdvOBProgøm
 (
FLASH_AdvOBProgømInôTy≥Def
 *
pAdvOBInô
);

668 
HAL_FLASHEx_AdvOBGëC⁄fig
(
FLASH_AdvOBProgømInôTy≥Def
 *
pAdvOBInô
);

669 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OB_Sñe˘PCROP
();

670 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OB_DeSñe˘PCROP
();

672 
STM32F410xx
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

674 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

675 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

676 
uöt16_t
 
HAL_FLASHEx_OB_GëB™k2WRP
();

692 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

693 
	#FLASH_SECTOR_TOTAL
 24

	)

697 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

698 
	#FLASH_SECTOR_TOTAL
 12

	)

702 #i‡
deföed
(
STM32F401xC
)

703 
	#FLASH_SECTOR_TOTAL
 6

	)

707 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

708 
	#FLASH_SECTOR_TOTAL
 5

	)

712 #i‡
deföed
(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

713 
	#FLASH_SECTOR_TOTAL
 8

	)

719 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

720 
	#OPTCR1_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C1A)

	)

736 
	#IS_FLASH_TYPEERASE
(
VALUE
)(((VALUEË=
FLASH_TYPEERASE_SECTORS
) || \

737 ((
VALUE
Ë=
FLASH_TYPEERASE_MASSERASE
))

	)

739 
	#IS_VOLTAGERANGE
(
RANGE
)(((RANGEË=
FLASH_VOLTAGE_RANGE_1
) || \

740 ((
RANGE
Ë=
FLASH_VOLTAGE_RANGE_2
) || \

741 ((
RANGE
Ë=
FLASH_VOLTAGE_RANGE_3
) || \

742 ((
RANGE
Ë=
FLASH_VOLTAGE_RANGE_4
))

	)

744 
	#IS_WRPSTATE
(
VALUE
)(((VALUEË=
OB_WRPSTATE_DISABLE
) || \

745 ((
VALUE
Ë=
OB_WRPSTATE_ENABLE
))

	)

747 
	#IS_OPTIONBYTE
(
VALUE
)(((VALUEË<(
OPTIONBYTE_WRP
|
OPTIONBYTE_RDP
|
OPTIONBYTE_USER
|
OPTIONBYTE_BOR
)))

	)

749 
	#IS_OB_RDP_LEVEL
(
LEVEL
Ë(((LEVELË=
OB_RDP_LEVEL_0
) ||\

750 ((
LEVEL
Ë=
OB_RDP_LEVEL_1
) ||\

751 ((
LEVEL
Ë=
OB_RDP_LEVEL_2
))

	)

753 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

755 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NO_RST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

757 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NO_RST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

759 
	#IS_OB_BOR_LEVEL
(
LEVEL
Ë(((LEVELË=
OB_BOR_LEVEL1
Ë|| ((LEVELË=
OB_BOR_LEVEL2
) ||\

760 ((
LEVEL
Ë=
OB_BOR_LEVEL3
Ë|| ((LEVELË=
OB_BOR_OFF
))

	)

762 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

763 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

764 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

765 
deföed
(
STM32F479xx
)

766 
	#IS_PCROPSTATE
(
VALUE
)(((VALUEË=
OB_PCROP_STATE_DISABLE
) || \

767 ((
VALUE
Ë=
OB_PCROP_STATE_ENABLE
))

	)

769 
STM32F410xx
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

771 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

772 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

773 
	#IS_OBEX
(
VALUE
)(((VALUEË=
OPTIONBYTE_PCROP
) || \

774 ((
VALUE
Ë=
OPTIONBYTE_BOOTCONFIG
))

	)

777 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

778 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

779 
	#IS_OBEX
(
VALUE
)(((VALUEË=
OPTIONBYTE_PCROP
))

	)

782 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

783 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

784 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_LATENCY_0
) || \

785 ((
LATENCY
Ë=
FLASH_LATENCY_1
) || \

786 ((
LATENCY
Ë=
FLASH_LATENCY_2
) || \

787 ((
LATENCY
Ë=
FLASH_LATENCY_3
) || \

788 ((
LATENCY
Ë=
FLASH_LATENCY_4
) || \

789 ((
LATENCY
Ë=
FLASH_LATENCY_5
) || \

790 ((
LATENCY
Ë=
FLASH_LATENCY_6
) || \

791 ((
LATENCY
Ë=
FLASH_LATENCY_7
) || \

792 ((
LATENCY
Ë=
FLASH_LATENCY_8
) || \

793 ((
LATENCY
Ë=
FLASH_LATENCY_9
) || \

794 ((
LATENCY
Ë=
FLASH_LATENCY_10
) || \

795 ((
LATENCY
Ë=
FLASH_LATENCY_11
) || \

796 ((
LATENCY
Ë=
FLASH_LATENCY_12
) || \

797 ((
LATENCY
Ë=
FLASH_LATENCY_13
) || \

798 ((
LATENCY
Ë=
FLASH_LATENCY_14
) || \

799 ((
LATENCY
Ë=
FLASH_LATENCY_15
))

	)

802 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

803 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

804 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

805 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_LATENCY_0
) || \

806 ((
LATENCY
Ë=
FLASH_LATENCY_1
) || \

807 ((
LATENCY
Ë=
FLASH_LATENCY_2
) || \

808 ((
LATENCY
Ë=
FLASH_LATENCY_3
) || \

809 ((
LATENCY
Ë=
FLASH_LATENCY_4
) || \

810 ((
LATENCY
Ë=
FLASH_LATENCY_5
) || \

811 ((
LATENCY
Ë=
FLASH_LATENCY_6
) || \

812 ((
LATENCY
Ë=
FLASH_LATENCY_7
))

	)

815 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

816 
	#IS_FLASH_BANK
(
BANK
Ë(((BANKË=
FLASH_BANK_1
) || \

817 ((
BANK
Ë=
FLASH_BANK_2
) || \

818 ((
BANK
Ë=
FLASH_BANK_BOTH
))

	)

821 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

822 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

823 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

824 
	#IS_FLASH_BANK
(
BANK
Ë(((BANKË=
FLASH_BANK_1
))

	)

828 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

829 
	#IS_FLASH_SECTOR
(
SECTOR
Ë–((SECTORË=
FLASH_SECTOR_0
Ë|| ((SECTORË=
FLASH_SECTOR_1
) ||\

830 ((
SECTOR
Ë=
FLASH_SECTOR_2
Ë|| ((SECTORË=
FLASH_SECTOR_3
) ||\

831 ((
SECTOR
Ë=
FLASH_SECTOR_4
Ë|| ((SECTORË=
FLASH_SECTOR_5
) ||\

832 ((
SECTOR
Ë=
FLASH_SECTOR_6
Ë|| ((SECTORË=
FLASH_SECTOR_7
) ||\

833 ((
SECTOR
Ë=
FLASH_SECTOR_8
Ë|| ((SECTORË=
FLASH_SECTOR_9
) ||\

834 ((
SECTOR
Ë=
FLASH_SECTOR_10
Ë|| ((SECTORË=
FLASH_SECTOR_11
) ||\

835 ((
SECTOR
Ë=
FLASH_SECTOR_12
Ë|| ((SECTORË=
FLASH_SECTOR_13
) ||\

836 ((
SECTOR
Ë=
FLASH_SECTOR_14
Ë|| ((SECTORË=
FLASH_SECTOR_15
) ||\

837 ((
SECTOR
Ë=
FLASH_SECTOR_16
Ë|| ((SECTORË=
FLASH_SECTOR_17
) ||\

838 ((
SECTOR
Ë=
FLASH_SECTOR_18
Ë|| ((SECTORË=
FLASH_SECTOR_19
) ||\

839 ((
SECTOR
Ë=
FLASH_SECTOR_20
Ë|| ((SECTORË=
FLASH_SECTOR_21
) ||\

840 ((
SECTOR
Ë=
FLASH_SECTOR_22
Ë|| ((SECTORË=
FLASH_SECTOR_23
))

	)

843 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

844 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_SECTOR_0
Ë|| ((SECTORË=
FLASH_SECTOR_1
) ||\

845 ((
SECTOR
Ë=
FLASH_SECTOR_2
Ë|| ((SECTORË=
FLASH_SECTOR_3
) ||\

846 ((
SECTOR
Ë=
FLASH_SECTOR_4
Ë|| ((SECTORË=
FLASH_SECTOR_5
) ||\

847 ((
SECTOR
Ë=
FLASH_SECTOR_6
Ë|| ((SECTORË=
FLASH_SECTOR_7
) ||\

848 ((
SECTOR
Ë=
FLASH_SECTOR_8
Ë|| ((SECTORË=
FLASH_SECTOR_9
) ||\

849 ((
SECTOR
Ë=
FLASH_SECTOR_10
Ë|| ((SECTORË=
FLASH_SECTOR_11
))

	)

852 #i‡
deföed
(
STM32F401xC
)

853 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_SECTOR_0
Ë|| ((SECTORË=
FLASH_SECTOR_1
) ||\

854 ((
SECTOR
Ë=
FLASH_SECTOR_2
Ë|| ((SECTORË=
FLASH_SECTOR_3
) ||\

855 ((
SECTOR
Ë=
FLASH_SECTOR_4
Ë|| ((SECTORË=
FLASH_SECTOR_5
))

	)

858 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

859 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_SECTOR_0
Ë|| ((SECTORË=
FLASH_SECTOR_1
) ||\

860 ((
SECTOR
Ë=
FLASH_SECTOR_2
Ë|| ((SECTORË=
FLASH_SECTOR_3
) ||\

861 ((
SECTOR
Ë=
FLASH_SECTOR_4
))

	)

864 #i‡
deföed
(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

865 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_SECTOR_0
Ë|| ((SECTORË=
FLASH_SECTOR_1
) ||\

866 ((
SECTOR
Ë=
FLASH_SECTOR_2
Ë|| ((SECTORË=
FLASH_SECTOR_3
) ||\

867 ((
SECTOR
Ë=
FLASH_SECTOR_4
Ë|| ((SECTORË=
FLASH_SECTOR_5
) ||\

868 ((
SECTOR
Ë=
FLASH_SECTOR_6
Ë|| ((SECTORË=
FLASH_SECTOR_7
))

	)

871 
	#IS_FLASH_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& ((ADDRESSË<
FLASH_END
))

	)

872 
	#IS_FLASH_NBSECTORS
(
NBSECTORS
Ë(((NBSECTORSË!0Ë&& ((NBSECTORSË<
FLASH_SECTOR_TOTAL
))

	)

874 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

875 
	#IS_OB_WRP_SECTOR
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFF000000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

878 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

879 
	#IS_OB_WRP_SECTOR
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

882 #i‡
deföed
(
STM32F401xC
)

883 
	#IS_OB_WRP_SECTOR
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

886 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

887 
	#IS_OB_WRP_SECTOR
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

890 #i‡
deföed
(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

891 
	#IS_OB_WRP_SECTOR
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

894 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

895 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

898 #i‡
deföed
(
STM32F401xC
)

899 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

902 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

903 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

906 #i‡
deföed
(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

907 
	#IS_OB_PCROP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

910 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

911 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

912 
	#IS_OB_BOOT
(
BOOT
Ë(((BOOTË=
OB_DUAL_BOOT_ENABLE
Ë|| ((BOOTË=
OB_DUAL_BOOT_DISABLE
))

	)

915 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

916 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

917 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

918 
deföed
(
STM32F479xx
)

919 
	#IS_OB_PCROP_SELECT
(
PCROP
Ë(((PCROPË=
OB_PCROP_SELECTED
Ë|| ((PCROPË=
OB_PCROP_DESELECTED
))

	)

921 
STM32F410xx
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

934 
FLASH_Eø£_Se˘‹
(
uöt32_t
 
Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
);

947 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_flash_ramfunc.h

39 #i‚de‡
__STM32F4xx_FLASH_RAMFUNC_H


40 
	#__STM32F4xx_FLASH_RAMFUNC_H


	)

42 #ifde‡
__˝lu•lus


45 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

68 
__RAM_FUNC
 
HAL_FLASHEx_St›FœshI¡îÁ˚Clk
();

69 
__RAM_FUNC
 
HAL_FLASHEx_SèπFœshI¡îÁ˚Clk
();

70 
__RAM_FUNC
 
HAL_FLASHEx_E«bÀFœshSÀïMode
();

71 
__RAM_FUNC
 
HAL_FLASHEx_DißbÀFœshSÀïMode
();

89 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_fmpi2c.h

39 #i‚de‡
__STM32F4xx_HAL_FMPI2C_H


40 
	#__STM32F4xx_HAL_FMPI2C_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
)

49 
	~"°m32f4xx_hÆ_def.h
"

69 
uöt32_t
 
Timög
;

73 
uöt32_t
 
OwnAddªss1
;

76 
uöt32_t
 
AddªssögMode
;

79 
uöt32_t
 
DuÆAddªssMode
;

82 
uöt32_t
 
OwnAddªss2
;

85 
uöt32_t
 
OwnAddªss2Masks
;

88 
uöt32_t
 
GíîÆCÆlMode
;

91 
uöt32_t
 
NoSåëchMode
;

94 }
	tFMPI2C_InôTy≥Def
;

101 
	mHAL_FMPI2C_STATE_RESET
 = 0x00,

102 
	mHAL_FMPI2C_STATE_READY
 = 0x01,

103 
	mHAL_FMPI2C_STATE_BUSY
 = 0x02,

104 
	mHAL_FMPI2C_STATE_MASTER_BUSY_TX
 = 0x12,

105 
	mHAL_FMPI2C_STATE_MASTER_BUSY_RX
 = 0x22,

106 
	mHAL_FMPI2C_STATE_SLAVE_BUSY_TX
 = 0x32,

107 
	mHAL_FMPI2C_STATE_SLAVE_BUSY_RX
 = 0x42,

108 
	mHAL_FMPI2C_STATE_MEM_BUSY_TX
 = 0x52,

109 
	mHAL_FMPI2C_STATE_MEM_BUSY_RX
 = 0x62,

110 
	mHAL_FMPI2C_STATE_TIMEOUT
 = 0x03,

111 
	mHAL_FMPI2C_STATE_ERROR
 = 0x04

112 }
	tHAL_FMPI2C_SèãTy≥Def
;

119 
	mHAL_FMPI2C_ERROR_NONE
 = 0x00,

120 
	mHAL_FMPI2C_ERROR_BERR
 = 0x01,

121 
	mHAL_FMPI2C_ERROR_ARLO
 = 0x02,

122 
	mHAL_FMPI2C_ERROR_AF
 = 0x04,

123 
	mHAL_FMPI2C_ERROR_OVR
 = 0x08,

124 
	mHAL_FMPI2C_ERROR_DMA
 = 0x10,

125 
	mHAL_FMPI2C_ERROR_TIMEOUT
 = 0x20,

126 
	mHAL_FMPI2C_ERROR_SIZE
 = 0x40

127 }
	tHAL_FMPI2C_Eº‹Ty≥Def
;

134 
FMPI2C_Ty≥Def
 *
	mIn°™˚
;

136 
FMPI2C_InôTy≥Def
 
	mInô
;

138 
uöt8_t
 *
	mpBuffPå
;

140 
uöt16_t
 
	mX„rSize
;

142 
__IO
 
uöt16_t
 
	mX„rCou¡
;

144 
DMA_H™dÀTy≥Def
 *
	mhdm©x
;

146 
DMA_H™dÀTy≥Def
 *
	mhdm¨x
;

148 
HAL_LockTy≥Def
 
	mLock
;

150 
__IO
 
HAL_FMPI2C_SèãTy≥Def
 
	mSèã
;

152 
__IO
 
HAL_FMPI2C_Eº‹Ty≥Def
 
	mEº‹Code
;

154 }
	tFMPI2C_H™dÀTy≥Def
;

168 
	#FMPI2C_ADDRESSINGMODE_7BIT
 ((
uöt32_t
)0x00000001)

	)

169 
	#FMPI2C_ADDRESSINGMODE_10BIT
 ((
uöt32_t
)0x00000002)

	)

179 
	#FMPI2C_DUALADDRESS_DISABLE
 ((
uöt32_t
)0x00000000)

	)

180 
	#FMPI2C_DUALADDRESS_ENABLE
 
FMPI2C_OAR2_OA2EN


	)

190 
	#FMPI2C_OA2_NOMASK
 ((
uöt8_t
)0x00)

	)

191 
	#FMPI2C_OA2_MASK01
 ((
uöt8_t
)0x01)

	)

192 
	#FMPI2C_OA2_MASK02
 ((
uöt8_t
)0x02)

	)

193 
	#FMPI2C_OA2_MASK03
 ((
uöt8_t
)0x03)

	)

194 
	#FMPI2C_OA2_MASK04
 ((
uöt8_t
)0x04)

	)

195 
	#FMPI2C_OA2_MASK05
 ((
uöt8_t
)0x05)

	)

196 
	#FMPI2C_OA2_MASK06
 ((
uöt8_t
)0x06)

	)

197 
	#FMPI2C_OA2_MASK07
 ((
uöt8_t
)0x07)

	)

206 
	#FMPI2C_GENERALCALL_DISABLE
 ((
uöt32_t
)0x00000000)

	)

207 
	#FMPI2C_GENERALCALL_ENABLE
 
FMPI2C_CR1_GCEN


	)

216 
	#FMPI2C_NOSTRETCH_DISABLE
 ((
uöt32_t
)0x00000000)

	)

217 
	#FMPI2C_NOSTRETCH_ENABLE
 
FMPI2C_CR1_NOSTRETCH


	)

226 
	#FMPI2C_MEMADD_SIZE_8BIT
 ((
uöt32_t
)0x00000001)

	)

227 
	#FMPI2C_MEMADD_SIZE_16BIT
 ((
uöt32_t
)0x00000002)

	)

237 
	#FMPI2C_RELOAD_MODE
 
FMPI2C_CR2_RELOAD


	)

238 
	#FMPI2C_AUTOEND_MODE
 
FMPI2C_CR2_AUTOEND


	)

239 
	#FMPI2C_SOFTEND_MODE
 ((
uöt32_t
)0x00000000)

	)

249 
	#FMPI2C_NO_STARTSTOP
 ((
uöt32_t
)0x00000000)

	)

250 
	#FMPI2C_GENERATE_STOP
 
FMPI2C_CR2_STOP


	)

251 
	#FMPI2C_GENERATE_START_READ
 (
uöt32_t
)(
FMPI2C_CR2_START
 | 
FMPI2C_CR2_RD_WRN
)

	)

252 
	#FMPI2C_GENERATE_START_WRITE
 
FMPI2C_CR2_START


	)

264 
	#FMPI2C_IT_ERRI
 
FMPI2C_CR1_ERRIE


	)

265 
	#FMPI2C_IT_TCI
 
FMPI2C_CR1_TCIE


	)

266 
	#FMPI2C_IT_STOPI
 
FMPI2C_CR1_STOPIE


	)

267 
	#FMPI2C_IT_NACKI
 
FMPI2C_CR1_NACKIE


	)

268 
	#FMPI2C_IT_ADDRI
 
FMPI2C_CR1_ADDRIE


	)

269 
	#FMPI2C_IT_RXI
 
FMPI2C_CR1_RXIE


	)

270 
	#FMPI2C_IT_TXI
 
FMPI2C_CR1_TXIE


	)

281 
	#FMPI2C_FLAG_TXE
 
FMPI2C_ISR_TXE


	)

282 
	#FMPI2C_FLAG_TXIS
 
FMPI2C_ISR_TXIS


	)

283 
	#FMPI2C_FLAG_RXNE
 
FMPI2C_ISR_RXNE


	)

284 
	#FMPI2C_FLAG_ADDR
 
FMPI2C_ISR_ADDR


	)

285 
	#FMPI2C_FLAG_AF
 
FMPI2C_ISR_NACKF


	)

286 
	#FMPI2C_FLAG_STOPF
 
FMPI2C_ISR_STOPF


	)

287 
	#FMPI2C_FLAG_TC
 
FMPI2C_ISR_TC


	)

288 
	#FMPI2C_FLAG_TCR
 
FMPI2C_ISR_TCR


	)

289 
	#FMPI2C_FLAG_BERR
 
FMPI2C_ISR_BERR


	)

290 
	#FMPI2C_FLAG_ARLO
 
FMPI2C_ISR_ARLO


	)

291 
	#FMPI2C_FLAG_OVR
 
FMPI2C_ISR_OVR


	)

292 
	#FMPI2C_FLAG_PECERR
 
FMPI2C_ISR_PECERR


	)

293 
	#FMPI2C_FLAG_TIMEOUT
 
FMPI2C_ISR_TIMEOUT


	)

294 
	#FMPI2C_FLAG_ALERT
 
FMPI2C_ISR_ALERT


	)

295 
	#FMPI2C_FLAG_BUSY
 
FMPI2C_ISR_BUSY


	)

296 
	#FMPI2C_FLAG_DIR
 
FMPI2C_ISR_DIR


	)

316 
	#__HAL_FMPI2C_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_FMPI2C_STATE_RESET
)

	)

334 
	#__HAL_FMPI2C_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |(__INTERRUPT__))

	)

335 
	#__HAL_FMPI2C_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &(~(__INTERRUPT__)))

	)

352 
	#__HAL_FMPI2C_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CR1
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

378 
	#__HAL_FMPI2C_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& ((__FLAG__Ë& 
FMPI2C_FLAG_MASK
)Ë=((__FLAG__Ë& FMPI2C_FLAG_MASK)))

	)

397 
	#__HAL_FMPI2C_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ICR
 = ((__FLAG__Ë& 
FMPI2C_FLAG_MASK
))

	)

400 
	#__HAL_FMPI2C_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
FMPI2C_CR1_PE
)

	)

401 
	#__HAL_FMPI2C_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
FMPI2C_CR1_PE
)

	)

403 
	#__HAL_FMPI2C_RESET_CR2
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR2
 &(
uöt32_t
)~((uöt32_t)(
FMPI2C_CR2_SADD
 | 
FMPI2C_CR2_HEAD10R
 | 
FMPI2C_CR2_NBYTES
 | 
FMPI2C_CR2_RELOAD
 | 
FMPI2C_CR2_RD_WRN
)))

	)

405 
	#__HAL_FMPI2C_MEM_ADD_MSB
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)(0xFF00))Ë>> 8)))

	)

406 
	#__HAL_FMPI2C_MEM_ADD_LSB
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((__ADDRESS__Ë& (uöt16_t)(0x00FF))))

	)

408 
	#__HAL_FMPI2C_GENERATE_START
(
__ADDMODE__
,
__ADDRESS__
Ë(((__ADDMODE__Ë=
FMPI2C_ADDRESSINGMODE_7BIT
Ë? (
uöt32_t
)((((uöt32_t)(__ADDRESS__Ë& (
FMPI2C_CR2_SADD
)Ë| (
FMPI2C_CR2_START
Ë| (
FMPI2C_CR2_AUTOEND
)Ë& (~
FMPI2C_CR2_RD_WRN
)) : \

409 (
uöt32_t
)((((uöt32_t)(
__ADDRESS__
Ë& (
FMPI2C_CR2_SADD
)Ë| (
FMPI2C_CR2_ADD10
Ë| (
FMPI2C_CR2_START
)Ë& (~
FMPI2C_CR2_RD_WRN
)))

	)

411 
	#IS_FMPI2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<(
uöt32_t
)0x000003FF)

	)

412 
	#IS_FMPI2C_OWN_ADDRESS2
(
ADDRESS2
Ë((ADDRESS2Ë<(
uöt16_t
)0x00FF)

	)

419 
	~"°m32f4xx_hÆ_fmpi2c_ex.h
"

431 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Inô
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

432 
HAL_SètusTy≥Def
 
HAL_FMPI2C_DeInô
 (
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

433 
HAL_FMPI2C_M•Inô
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

434 
HAL_FMPI2C_M•DeInô
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

446 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Ma°î_Tønsmô
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

447 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Ma°î_Re˚ive
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

448 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Sœve_Tønsmô
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

449 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Sœve_Re˚ive
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

450 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Mem_Wrôe
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

451 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Mem_Ród
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

452 
HAL_SètusTy≥Def
 
HAL_FMPI2C_IsDevi˚Ródy
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
);

455 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Ma°î_Tønsmô_IT
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

456 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Ma°î_Re˚ive_IT
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

457 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Sœve_Tønsmô_IT
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

458 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Sœve_Re˚ive_IT
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

459 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Mem_Wrôe_IT
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

460 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Mem_Ród_IT
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

463 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Ma°î_Tønsmô_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

464 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Ma°î_Re˚ive_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

465 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Sœve_Tønsmô_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

466 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Sœve_Re˚ive_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

467 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Mem_Wrôe_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

468 
HAL_SètusTy≥Def
 
HAL_FMPI2C_Mem_Ród_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

471 
HAL_FMPI2C_EV_IRQH™dÀr
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

472 
HAL_FMPI2C_ER_IRQH™dÀr
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

473 
HAL_FMPI2C_Ma°îTxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

474 
HAL_FMPI2C_Ma°îRxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

475 
HAL_FMPI2C_SœveTxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

476 
HAL_FMPI2C_SœveRxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

477 
HAL_FMPI2C_MemTxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

478 
HAL_FMPI2C_MemRxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

479 
HAL_FMPI2C_Eº‹CÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

489 
HAL_FMPI2C_SèãTy≥Def
 
HAL_FMPI2C_GëSèã
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

490 
uöt32_t
 
HAL_FMPI2C_GëEº‹
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

507 
	#FMPI2C_FLAG_MASK
 ((
uöt32_t
)0x0001FFFF)

	)

517 
	#IS_FMPI2C_ADDRESSING_MODE
(
MODE
Ë(((MODEË=
FMPI2C_ADDRESSINGMODE_7BIT
) || \

518 ((
MODE
Ë=
FMPI2C_ADDRESSINGMODE_10BIT
))

	)

520 
	#IS_FMPI2C_DUAL_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
FMPI2C_DUALADDRESS_DISABLE
) || \

521 ((
ADDRESS
Ë=
FMPI2C_DUALADDRESS_ENABLE
))

	)

523 
	#IS_FMPI2C_OWN_ADDRESS2_MASK
(
MASK
Ë(((MASKË=
FMPI2C_OA2_NOMASK
) || \

524 ((
MASK
Ë=
FMPI2C_OA2_MASK01
) || \

525 ((
MASK
Ë=
FMPI2C_OA2_MASK02
) || \

526 ((
MASK
Ë=
FMPI2C_OA2_MASK03
) || \

527 ((
MASK
Ë=
FMPI2C_OA2_MASK04
) || \

528 ((
MASK
Ë=
FMPI2C_OA2_MASK05
) || \

529 ((
MASK
Ë=
FMPI2C_OA2_MASK06
) || \

530 ((
MASK
Ë=
FMPI2C_OA2_MASK07
))

	)

532 
	#IS_FMPI2C_GENERAL_CALL
(
CALL
Ë(((CALLË=
FMPI2C_GENERALCALL_DISABLE
) || \

533 ((
CALL
Ë=
FMPI2C_GENERALCALL_ENABLE
))

	)

535 
	#IS_FMPI2C_NO_STRETCH
(
STRETCH
Ë(((STRETCHË=
FMPI2C_NOSTRETCH_DISABLE
) || \

536 ((
STRETCH
Ë=
FMPI2C_NOSTRETCH_ENABLE
))

	)

538 
	#IS_FMPI2C_MEMADD_SIZE
(
SIZE
Ë(((SIZEË=
FMPI2C_MEMADD_SIZE_8BIT
) || \

539 ((
SIZE
Ë=
FMPI2C_MEMADD_SIZE_16BIT
))

	)

541 
	#IS_TRANSFER_MODE
(
MODE
Ë(((MODEË=
FMPI2C_RELOAD_MODE
) || \

542 ((
MODE
Ë=
FMPI2C_AUTOEND_MODE
) || \

543 ((
MODE
Ë=
FMPI2C_SOFTEND_MODE
))

	)

545 
	#IS_TRANSFER_REQUEST
(
REQUEST
Ë(((REQUESTË=
FMPI2C_GENERATE_STOP
) || \

546 ((
REQUEST
Ë=
FMPI2C_GENERATE_START_READ
) || \

547 ((
REQUEST
Ë=
FMPI2C_GENERATE_START_WRITE
) || \

548 ((
REQUEST
Ë=
FMPI2C_NO_STARTSTOP
))

	)

570 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_fmpi2c_ex.h

39 #i‚de‡
__STM32F4xx_HAL_FMPI2C_EX_H


40 
	#__STM32F4xx_HAL_FMPI2C_EX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
)

49 
	~"°m32f4xx_hÆ_def.h
"

68 
	#FMPI2C_ANALOGFILTER_ENABLE
 ((
uöt32_t
)0x00000000)

	)

69 
	#FMPI2C_ANALOGFILTER_DISABLE
 
FMPI2C_CR1_ANFOFF


	)

77 
	#FMPI2C_FASTMODEPLUS_SCL
 
SYSCFG_CFGR_FMPI2C1_SCL


	)

78 
	#FMPI2C_FASTMODEPLUS_SDA
 
SYSCFG_CFGR_FMPI2C1_SDA


	)

97 
HAL_SètusTy≥Def
 
HAL_FMPI2CEx_A«logFûãr_C⁄fig
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt32_t
 
A«logFûãr
);

98 
HAL_SètusTy≥Def
 
HAL_FMPI2CEx_DigôÆFûãr_C⁄fig
(
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
, 
uöt32_t
 
DigôÆFûãr
);

99 
HAL_SètusTy≥Def
 
HAL_FMPI2CEx_E«bÀWakeUp
 (
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

100 
HAL_SètusTy≥Def
 
HAL_FMPI2CEx_DißbÀWakeUp
 (
FMPI2C_H™dÀTy≥Def
 *
hFMPI2C
);

101 
HAL_FMPI2CEx_E«bÀFa°ModePlus
(
uöt32_t
 
C⁄figFa°ModePlus
);

102 
HAL_FMPI2CEx_DißbÀFa°ModePlus
(
uöt32_t
 
C⁄figFa°ModePlus
);

125 
	#IS_FMPI2C_ANALOG_FILTER
(
FILTER
Ë(((FILTERË=
FMPI2C_ANALOGFILTER_ENABLE
) || \

126 ((
FILTER
Ë=
FMPI2C_ANALOGFILTER_DISABLE
))

	)

128 
	#IS_FMPI2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000F)

	)

130 
	#IS_FMPI2C_FASTMODEPLUS
(
__CONFIG__
Ë((((__CONFIG__Ë& (
FMPI2C_FASTMODEPLUS_SCL
)) == FMPI2C_FASTMODEPLUS_SCL) || \

131 (((
__CONFIG__
Ë& (
FMPI2C_FASTMODEPLUS_SDA
)Ë=FMPI2C_FASTMODEPLUS_SDA))

	)

144 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_gpio.h

39 #i‚de‡
__STM32F4xx_HAL_GPIO_H


40 
	#__STM32F4xx_HAL_GPIO_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
Pö
;

70 
uöt32_t
 
Mode
;

73 
uöt32_t
 
PuŒ
;

76 
uöt32_t
 
S≥ed
;

79 
uöt32_t
 
A…î«ã
;

81 }
	tGPIO_InôTy≥Def
;

88 
GPIO_PIN_RESET
 = 0,

89 
GPIO_PIN_SET


90 }
	tGPIO_PöSèã
;

104 
	#GPIO_PIN_0
 ((
uöt16_t
)0x0001Ë

	)

105 
	#GPIO_PIN_1
 ((
uöt16_t
)0x0002Ë

	)

106 
	#GPIO_PIN_2
 ((
uöt16_t
)0x0004Ë

	)

107 
	#GPIO_PIN_3
 ((
uöt16_t
)0x0008Ë

	)

108 
	#GPIO_PIN_4
 ((
uöt16_t
)0x0010Ë

	)

109 
	#GPIO_PIN_5
 ((
uöt16_t
)0x0020Ë

	)

110 
	#GPIO_PIN_6
 ((
uöt16_t
)0x0040Ë

	)

111 
	#GPIO_PIN_7
 ((
uöt16_t
)0x0080Ë

	)

112 
	#GPIO_PIN_8
 ((
uöt16_t
)0x0100Ë

	)

113 
	#GPIO_PIN_9
 ((
uöt16_t
)0x0200Ë

	)

114 
	#GPIO_PIN_10
 ((
uöt16_t
)0x0400Ë

	)

115 
	#GPIO_PIN_11
 ((
uöt16_t
)0x0800Ë

	)

116 
	#GPIO_PIN_12
 ((
uöt16_t
)0x1000Ë

	)

117 
	#GPIO_PIN_13
 ((
uöt16_t
)0x2000Ë

	)

118 
	#GPIO_PIN_14
 ((
uöt16_t
)0x4000Ë

	)

119 
	#GPIO_PIN_15
 ((
uöt16_t
)0x8000Ë

	)

120 
	#GPIO_PIN_AŒ
 ((
uöt16_t
)0xFFFFË

	)

122 
	#GPIO_PIN_MASK
 ((
uöt32_t
)0x0000FFFFË

	)

137 
	#GPIO_MODE_INPUT
 ((
uöt32_t
)0x00000000Ë

	)

138 
	#GPIO_MODE_OUTPUT_PP
 ((
uöt32_t
)0x00000001Ë

	)

139 
	#GPIO_MODE_OUTPUT_OD
 ((
uöt32_t
)0x00000011Ë

	)

140 
	#GPIO_MODE_AF_PP
 ((
uöt32_t
)0x00000002Ë

	)

141 
	#GPIO_MODE_AF_OD
 ((
uöt32_t
)0x00000012Ë

	)

143 
	#GPIO_MODE_ANALOG
 ((
uöt32_t
)0x00000003Ë

	)

145 
	#GPIO_MODE_IT_RISING
 ((
uöt32_t
)0x10110000Ë

	)

146 
	#GPIO_MODE_IT_FALLING
 ((
uöt32_t
)0x10210000Ë

	)

147 
	#GPIO_MODE_IT_RISING_FALLING
 ((
uöt32_t
)0x10310000Ë

	)

149 
	#GPIO_MODE_EVT_RISING
 ((
uöt32_t
)0x10120000Ë

	)

150 
	#GPIO_MODE_EVT_FALLING
 ((
uöt32_t
)0x10220000Ë

	)

151 
	#GPIO_MODE_EVT_RISING_FALLING
 ((
uöt32_t
)0x10320000Ë

	)

160 
	#GPIO_SPEED_FREQ_LOW
 ((
uöt32_t
)0x00000000Ë

	)

161 
	#GPIO_SPEED_FREQ_MEDIUM
 ((
uöt32_t
)0x00000001Ë

	)

162 
	#GPIO_SPEED_FREQ_HIGH
 ((
uöt32_t
)0x00000002Ë

	)

163 
	#GPIO_SPEED_FREQ_VERY_HIGH
 ((
uöt32_t
)0x00000003Ë

	)

172 
	#GPIO_NOPULL
 ((
uöt32_t
)0x00000000Ë

	)

173 
	#GPIO_PULLUP
 ((
uöt32_t
)0x00000001Ë

	)

174 
	#GPIO_PULLDOWN
 ((
uöt32_t
)0x00000002Ë

	)

194 
	#__HAL_GPIO_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

202 
	#__HAL_GPIO_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

210 
	#__HAL_GPIO_EXTI_GET_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

218 
	#__HAL_GPIO_EXTI_CLEAR_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

226 
	#__HAL_GPIO_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(
EXTI
->
SWIER
 |(__EXTI_LINE__))

	)

232 
	~"°m32f4xx_hÆ_gpio_ex.h
"

243 
HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
);

244 
HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
);

253 
GPIO_PöSèã
 
HAL_GPIO_RódPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

254 
HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
);

255 
HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

256 
HAL_SètusTy≥Def
 
HAL_GPIO_LockPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

257 
HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
);

258 
HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
);

282 
	#IS_GPIO_PIN_ACTION
(
ACTION
Ë(((ACTIONË=
GPIO_PIN_RESET
Ë|| ((ACTIONË=
GPIO_PIN_SET
))

	)

283 
	#IS_GPIO_PIN
(
PIN
Ë(((PINË& 
GPIO_PIN_MASK
 ) !(
uöt32_t
)0x00)

	)

284 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_MODE_INPUT
) ||\

285 ((
MODE
Ë=
GPIO_MODE_OUTPUT_PP
) ||\

286 ((
MODE
Ë=
GPIO_MODE_OUTPUT_OD
) ||\

287 ((
MODE
Ë=
GPIO_MODE_AF_PP
) ||\

288 ((
MODE
Ë=
GPIO_MODE_AF_OD
) ||\

289 ((
MODE
Ë=
GPIO_MODE_IT_RISING
) ||\

290 ((
MODE
Ë=
GPIO_MODE_IT_FALLING
) ||\

291 ((
MODE
Ë=
GPIO_MODE_IT_RISING_FALLING
) ||\

292 ((
MODE
Ë=
GPIO_MODE_EVT_RISING
) ||\

293 ((
MODE
Ë=
GPIO_MODE_EVT_FALLING
) ||\

294 ((
MODE
Ë=
GPIO_MODE_EVT_RISING_FALLING
) ||\

295 ((
MODE
Ë=
GPIO_MODE_ANALOG
))

	)

296 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_SPEED_FREQ_LOW
Ë|| ((SPEEDË=
GPIO_SPEED_FREQ_MEDIUM
) || \

297 ((
SPEED
Ë=
GPIO_SPEED_FREQ_HIGH
Ë|| ((SPEEDË=
GPIO_SPEED_FREQ_VERY_HIGH
))

	)

298 
	#IS_GPIO_PULL
(
PULL
Ë(((PULLË=
GPIO_NOPULL
Ë|| ((PULLË=
GPIO_PULLUP
) || \

299 ((
PULL
Ë=
GPIO_PULLDOWN
))

	)

321 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_gpio_ex.h

39 #i‚de‡
__STM32F4xx_HAL_GPIO_EX_H


40 
	#__STM32F4xx_HAL_GPIO_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

68 #i‡
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

72 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

73 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

74 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

75 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

76 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

81 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

82 
	#GPIO_AF1_TIM2
 ((
uöt8_t
)0x01Ë

	)

87 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02Ë

	)

88 
	#GPIO_AF2_TIM4
 ((
uöt8_t
)0x02Ë

	)

89 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

94 
	#GPIO_AF3_TIM8
 ((
uöt8_t
)0x03Ë

	)

95 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

96 
	#GPIO_AF3_TIM10
 ((
uöt8_t
)0x03Ë

	)

97 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

102 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

103 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

104 
	#GPIO_AF4_I2C3
 ((
uöt8_t
)0x04Ë

	)

109 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

110 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

111 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

112 
	#GPIO_AF5_SPI4
 ((
uöt8_t
)0x05Ë

	)

113 
	#GPIO_AF5_SPI5
 ((
uöt8_t
)0x05Ë

	)

114 
	#GPIO_AF5_SPI6
 ((
uöt8_t
)0x05Ë

	)

115 
	#GPIO_AF5_I2S3ext
 ((
uöt8_t
)0x05Ë

	)

120 
	#GPIO_AF6_SPI3
 ((
uöt8_t
)0x06Ë

	)

121 
	#GPIO_AF6_I2S2ext
 ((
uöt8_t
)0x06Ë

	)

122 
	#GPIO_AF6_SAI1
 ((
uöt8_t
)0x06Ë

	)

127 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

128 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

129 
	#GPIO_AF7_USART3
 ((
uöt8_t
)0x07Ë

	)

130 
	#GPIO_AF7_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

135 
	#GPIO_AF8_UART4
 ((
uöt8_t
)0x08Ë

	)

136 
	#GPIO_AF8_UART5
 ((
uöt8_t
)0x08Ë

	)

137 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

138 
	#GPIO_AF8_UART7
 ((
uöt8_t
)0x08Ë

	)

139 
	#GPIO_AF8_UART8
 ((
uöt8_t
)0x08Ë

	)

144 
	#GPIO_AF9_CAN1
 ((
uöt8_t
)0x09Ë

	)

145 
	#GPIO_AF9_CAN2
 ((
uöt8_t
)0x09Ë

	)

146 
	#GPIO_AF9_TIM12
 ((
uöt8_t
)0x09Ë

	)

147 
	#GPIO_AF9_TIM13
 ((
uöt8_t
)0x09Ë

	)

148 
	#GPIO_AF9_TIM14
 ((
uöt8_t
)0x09Ë

	)

149 
	#GPIO_AF9_LTDC
 ((
uöt8_t
)0x09Ë

	)

154 
	#GPIO_AF10_OTG_FS
 ((
uöt8_t
)0xAË

	)

155 
	#GPIO_AF10_OTG_HS
 ((
uöt8_t
)0xAË

	)

160 
	#GPIO_AF11_ETH
 ((
uöt8_t
)0x0BË

	)

165 
	#GPIO_AF12_FMC
 ((
uöt8_t
)0xCË

	)

166 
	#GPIO_AF12_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

167 
	#GPIO_AF12_SDIO
 ((
uöt8_t
)0xCË

	)

172 
	#GPIO_AF13_DCMI
 ((
uöt8_t
)0x0DË

	)

177 
	#GPIO_AF14_LTDC
 ((
uöt8_t
)0x0EË

	)

182 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

187 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
)

191 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

192 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

193 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

194 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

195 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

200 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

201 
	#GPIO_AF1_TIM2
 ((
uöt8_t
)0x01Ë

	)

206 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02Ë

	)

207 
	#GPIO_AF2_TIM4
 ((
uöt8_t
)0x02Ë

	)

208 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

213 
	#GPIO_AF3_TIM8
 ((
uöt8_t
)0x03Ë

	)

214 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

215 
	#GPIO_AF3_TIM10
 ((
uöt8_t
)0x03Ë

	)

216 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

221 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

222 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

223 
	#GPIO_AF4_I2C3
 ((
uöt8_t
)0x04Ë

	)

228 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

229 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

230 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

231 
	#GPIO_AF5_SPI4
 ((
uöt8_t
)0x05Ë

	)

232 
	#GPIO_AF5_SPI5
 ((
uöt8_t
)0x05Ë

	)

233 
	#GPIO_AF5_SPI6
 ((
uöt8_t
)0x05Ë

	)

236 
	#GPIO_AF5_I2S3ext
 
GPIO_AF5_SPI3


	)

241 
	#GPIO_AF6_SPI3
 ((
uöt8_t
)0x06Ë

	)

242 
	#GPIO_AF6_I2S2ext
 ((
uöt8_t
)0x06Ë

	)

243 
	#GPIO_AF6_SAI1
 ((
uöt8_t
)0x06Ë

	)

248 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

249 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

250 
	#GPIO_AF7_USART3
 ((
uöt8_t
)0x07Ë

	)

251 
	#GPIO_AF7_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

256 
	#GPIO_AF8_UART4
 ((
uöt8_t
)0x08Ë

	)

257 
	#GPIO_AF8_UART5
 ((
uöt8_t
)0x08Ë

	)

258 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

259 
	#GPIO_AF8_UART7
 ((
uöt8_t
)0x08Ë

	)

260 
	#GPIO_AF8_UART8
 ((
uöt8_t
)0x08Ë

	)

265 
	#GPIO_AF9_CAN1
 ((
uöt8_t
)0x09Ë

	)

266 
	#GPIO_AF9_CAN2
 ((
uöt8_t
)0x09Ë

	)

267 
	#GPIO_AF9_TIM12
 ((
uöt8_t
)0x09Ë

	)

268 
	#GPIO_AF9_TIM13
 ((
uöt8_t
)0x09Ë

	)

269 
	#GPIO_AF9_TIM14
 ((
uöt8_t
)0x09Ë

	)

274 
	#GPIO_AF10_OTG_FS
 ((
uöt8_t
)0xAË

	)

275 
	#GPIO_AF10_OTG_HS
 ((
uöt8_t
)0xAË

	)

280 
	#GPIO_AF11_ETH
 ((
uöt8_t
)0x0BË

	)

285 
	#GPIO_AF12_FMC
 ((
uöt8_t
)0xCË

	)

286 
	#GPIO_AF12_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

287 
	#GPIO_AF12_SDIO
 ((
uöt8_t
)0xCË

	)

292 
	#GPIO_AF13_DCMI
 ((
uöt8_t
)0x0DË

	)

297 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

302 #i‡
deföed
(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

306 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

307 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

308 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

309 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

310 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

315 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

316 
	#GPIO_AF1_TIM2
 ((
uöt8_t
)0x01Ë

	)

321 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02Ë

	)

322 
	#GPIO_AF2_TIM4
 ((
uöt8_t
)0x02Ë

	)

323 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

328 
	#GPIO_AF3_TIM8
 ((
uöt8_t
)0x03Ë

	)

329 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

330 
	#GPIO_AF3_TIM10
 ((
uöt8_t
)0x03Ë

	)

331 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

336 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

337 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

338 
	#GPIO_AF4_I2C3
 ((
uöt8_t
)0x04Ë

	)

343 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

344 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

345 
	#GPIO_AF5_I2S3ext
 ((
uöt8_t
)0x05Ë

	)

350 
	#GPIO_AF6_SPI3
 ((
uöt8_t
)0x06Ë

	)

351 
	#GPIO_AF6_I2S2ext
 ((
uöt8_t
)0x06Ë

	)

356 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

357 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

358 
	#GPIO_AF7_USART3
 ((
uöt8_t
)0x07Ë

	)

359 
	#GPIO_AF7_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

364 
	#GPIO_AF8_UART4
 ((
uöt8_t
)0x08Ë

	)

365 
	#GPIO_AF8_UART5
 ((
uöt8_t
)0x08Ë

	)

366 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

371 
	#GPIO_AF9_CAN1
 ((
uöt8_t
)0x09Ë

	)

372 
	#GPIO_AF9_CAN2
 ((
uöt8_t
)0x09Ë

	)

373 
	#GPIO_AF9_TIM12
 ((
uöt8_t
)0x09Ë

	)

374 
	#GPIO_AF9_TIM13
 ((
uöt8_t
)0x09Ë

	)

375 
	#GPIO_AF9_TIM14
 ((
uöt8_t
)0x09Ë

	)

380 
	#GPIO_AF10_OTG_FS
 ((
uöt8_t
)0xAË

	)

381 
	#GPIO_AF10_OTG_HS
 ((
uöt8_t
)0xAË

	)

386 
	#GPIO_AF11_ETH
 ((
uöt8_t
)0x0BË

	)

391 
	#GPIO_AF12_FSMC
 ((
uöt8_t
)0xCË

	)

392 
	#GPIO_AF12_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

393 
	#GPIO_AF12_SDIO
 ((
uöt8_t
)0xCË

	)

398 
	#GPIO_AF13_DCMI
 ((
uöt8_t
)0x0DË

	)

403 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

408 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
)

412 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

413 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

414 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

415 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

416 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

421 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

422 
	#GPIO_AF1_TIM2
 ((
uöt8_t
)0x01Ë

	)

427 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02Ë

	)

428 
	#GPIO_AF2_TIM4
 ((
uöt8_t
)0x02Ë

	)

429 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

434 
	#GPIO_AF3_TIM8
 ((
uöt8_t
)0x03Ë

	)

435 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

436 
	#GPIO_AF3_TIM10
 ((
uöt8_t
)0x03Ë

	)

437 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

442 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

443 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

444 
	#GPIO_AF4_I2C3
 ((
uöt8_t
)0x04Ë

	)

449 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

450 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

451 
	#GPIO_AF5_I2S3ext
 ((
uöt8_t
)0x05Ë

	)

456 
	#GPIO_AF6_SPI3
 ((
uöt8_t
)0x06Ë

	)

457 
	#GPIO_AF6_I2S2ext
 ((
uöt8_t
)0x06Ë

	)

462 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

463 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

464 
	#GPIO_AF7_USART3
 ((
uöt8_t
)0x07Ë

	)

465 
	#GPIO_AF7_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

470 
	#GPIO_AF8_UART4
 ((
uöt8_t
)0x08Ë

	)

471 
	#GPIO_AF8_UART5
 ((
uöt8_t
)0x08Ë

	)

472 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

477 
	#GPIO_AF9_CAN1
 ((
uöt8_t
)0x09Ë

	)

478 
	#GPIO_AF9_CAN2
 ((
uöt8_t
)0x09Ë

	)

479 
	#GPIO_AF9_TIM12
 ((
uöt8_t
)0x09Ë

	)

480 
	#GPIO_AF9_TIM13
 ((
uöt8_t
)0x09Ë

	)

481 
	#GPIO_AF9_TIM14
 ((
uöt8_t
)0x09Ë

	)

486 
	#GPIO_AF10_OTG_FS
 ((
uöt8_t
)0xAË

	)

487 
	#GPIO_AF10_OTG_HS
 ((
uöt8_t
)0xAË

	)

492 
	#GPIO_AF12_FSMC
 ((
uöt8_t
)0xCË

	)

493 
	#GPIO_AF12_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

494 
	#GPIO_AF12_SDIO
 ((
uöt8_t
)0xCË

	)

499 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

505 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
)

509 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

510 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

511 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

512 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

513 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

518 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

519 
	#GPIO_AF1_TIM2
 ((
uöt8_t
)0x01Ë

	)

524 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02Ë

	)

525 
	#GPIO_AF2_TIM4
 ((
uöt8_t
)0x02Ë

	)

526 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

531 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

532 
	#GPIO_AF3_TIM10
 ((
uöt8_t
)0x03Ë

	)

533 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

538 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

539 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

540 
	#GPIO_AF4_I2C3
 ((
uöt8_t
)0x04Ë

	)

545 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

546 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

547 
	#GPIO_AF5_SPI4
 ((
uöt8_t
)0x05Ë

	)

548 
	#GPIO_AF5_I2S3ext
 ((
uöt8_t
)0x05Ë

	)

553 
	#GPIO_AF6_SPI3
 ((
uöt8_t
)0x06Ë

	)

554 
	#GPIO_AF6_I2S2ext
 ((
uöt8_t
)0x06Ë

	)

559 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

560 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

561 
	#GPIO_AF7_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

566 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

571 
	#GPIO_AF9_TIM14
 ((
uöt8_t
)0x09Ë

	)

572 
	#GPIO_AF9_I2C2
 ((
uöt8_t
)0x09Ë

	)

573 
	#GPIO_AF9_I2C3
 ((
uöt8_t
)0x09Ë

	)

579 
	#GPIO_AF10_OTG_FS
 ((
uöt8_t
)0xAË

	)

584 
	#GPIO_AF12_SDIO
 ((
uöt8_t
)0xCË

	)

589 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

593 #i‡
deföed
(
STM32F411xE
)

597 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

598 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

599 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

600 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

601 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

606 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

607 
	#GPIO_AF1_TIM2
 ((
uöt8_t
)0x01Ë

	)

612 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02Ë

	)

613 
	#GPIO_AF2_TIM4
 ((
uöt8_t
)0x02Ë

	)

614 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

619 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

620 
	#GPIO_AF3_TIM10
 ((
uöt8_t
)0x03Ë

	)

621 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

626 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

627 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

628 
	#GPIO_AF4_I2C3
 ((
uöt8_t
)0x04Ë

	)

633 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

634 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

635 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

636 
	#GPIO_AF5_SPI4
 ((
uöt8_t
)0x05Ë

	)

637 
	#GPIO_AF5_I2S3ext
 ((
uöt8_t
)0x05Ë

	)

642 
	#GPIO_AF6_SPI2
 ((
uöt8_t
)0x06Ë

	)

643 
	#GPIO_AF6_SPI3
 ((
uöt8_t
)0x06Ë

	)

644 
	#GPIO_AF6_SPI4
 ((
uöt8_t
)0x06Ë

	)

645 
	#GPIO_AF6_SPI5
 ((
uöt8_t
)0x06Ë

	)

646 
	#GPIO_AF6_I2S2ext
 ((
uöt8_t
)0x06Ë

	)

651 
	#GPIO_AF7_SPI3
 ((
uöt8_t
)0x07Ë

	)

652 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

653 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

654 
	#GPIO_AF7_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

659 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

664 
	#GPIO_AF9_TIM14
 ((
uöt8_t
)0x09Ë

	)

665 
	#GPIO_AF9_I2C2
 ((
uöt8_t
)0x09Ë

	)

666 
	#GPIO_AF9_I2C3
 ((
uöt8_t
)0x09Ë

	)

671 
	#GPIO_AF10_OTG_FS
 ((
uöt8_t
)0xAË

	)

676 
	#GPIO_AF12_SDIO
 ((
uöt8_t
)0xCË

	)

681 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

685 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

689 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

690 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

691 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

692 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

693 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

698 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

699 
	#GPIO_AF1_LPTIM1
 ((
uöt8_t
)0x01Ë

	)

704 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

709 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

710 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

715 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

716 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

717 
	#GPIO_AF4_FMPI2C1
 ((
uöt8_t
)0x04Ë

	)

722 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

723 #i‡
deföed
(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

724 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

730 
	#GPIO_AF6_SPI1
 ((
uöt8_t
)0x06Ë

	)

731 #i‡
deföed
(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

732 
	#GPIO_AF6_SPI2
 ((
uöt8_t
)0x06Ë

	)

734 
	#GPIO_AF6_SPI5
 ((
uöt8_t
)0x06Ë

	)

738 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

739 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

744 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

749 
	#GPIO_AF9_I2C2
 ((
uöt8_t
)0x09Ë

	)

750 
	#GPIO_AF9_FMPI2C1
 ((
uöt8_t
)0x09Ë

	)

755 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

759 #i‡
deföed
(
STM32F446xx
)

763 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

764 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

765 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

766 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

767 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

772 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

773 
	#GPIO_AF1_TIM2
 ((
uöt8_t
)0x01Ë

	)

778 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02Ë

	)

779 
	#GPIO_AF2_TIM4
 ((
uöt8_t
)0x02Ë

	)

780 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

785 
	#GPIO_AF3_TIM8
 ((
uöt8_t
)0x03Ë

	)

786 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

787 
	#GPIO_AF3_TIM10
 ((
uöt8_t
)0x03Ë

	)

788 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

789 
	#GPIO_AF3_CEC
 ((
uöt8_t
)0x03Ë

	)

794 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

795 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

796 
	#GPIO_AF4_I2C3
 ((
uöt8_t
)0x04Ë

	)

797 
	#GPIO_AF4_FMPI2C1
 ((
uöt8_t
)0x04Ë

	)

798 
	#GPIO_AF4_CEC
 ((
uöt8_t
)0x04Ë

	)

803 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

804 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

805 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

806 
	#GPIO_AF5_SPI4
 ((
uöt8_t
)0x05Ë

	)

811 
	#GPIO_AF6_SPI2
 ((
uöt8_t
)0x06Ë

	)

812 
	#GPIO_AF6_SPI3
 ((
uöt8_t
)0x06Ë

	)

813 
	#GPIO_AF6_SPI4
 ((
uöt8_t
)0x06Ë

	)

814 
	#GPIO_AF6_SAI1
 ((
uöt8_t
)0x06Ë

	)

819 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

820 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

821 
	#GPIO_AF7_USART3
 ((
uöt8_t
)0x07Ë

	)

822 
	#GPIO_AF7_UART5
 ((
uöt8_t
)0x07Ë

	)

823 
	#GPIO_AF7_SPI2
 ((
uöt8_t
)0x07Ë

	)

824 
	#GPIO_AF7_SPI3
 ((
uöt8_t
)0x07Ë

	)

825 
	#GPIO_AF7_SPDIFRX
 ((
uöt8_t
)0x07Ë

	)

830 
	#GPIO_AF8_UART4
 ((
uöt8_t
)0x08Ë

	)

831 
	#GPIO_AF8_UART5
 ((
uöt8_t
)0x08Ë

	)

832 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

833 
	#GPIO_AF8_SPDIFRX
 ((
uöt8_t
)0x08Ë

	)

834 
	#GPIO_AF8_SAI2
 ((
uöt8_t
)0x08Ë

	)

839 
	#GPIO_AF9_CAN1
 ((
uöt8_t
)0x09Ë

	)

840 
	#GPIO_AF9_CAN2
 ((
uöt8_t
)0x09Ë

	)

841 
	#GPIO_AF9_TIM12
 ((
uöt8_t
)0x09Ë

	)

842 
	#GPIO_AF9_TIM13
 ((
uöt8_t
)0x09Ë

	)

843 
	#GPIO_AF9_TIM14
 ((
uöt8_t
)0x09Ë

	)

844 
	#GPIO_AF9_QSPI
 ((
uöt8_t
)0x09Ë

	)

849 
	#GPIO_AF10_OTG_FS
 ((
uöt8_t
)0xAË

	)

850 
	#GPIO_AF10_OTG_HS
 ((
uöt8_t
)0xAË

	)

851 
	#GPIO_AF10_SAI2
 ((
uöt8_t
)0xAË

	)

852 
	#GPIO_AF10_QSPI
 ((
uöt8_t
)0xAË

	)

857 
	#GPIO_AF11_ETH
 ((
uöt8_t
)0x0BË

	)

862 
	#GPIO_AF12_FMC
 ((
uöt8_t
)0xCË

	)

863 
	#GPIO_AF12_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

864 
	#GPIO_AF12_SDIO
 ((
uöt8_t
)0xCË

	)

869 
	#GPIO_AF13_DCMI
 ((
uöt8_t
)0x0DË

	)

874 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

880 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

884 
	#GPIO_AF0_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

885 
	#GPIO_AF0_MCO
 ((
uöt8_t
)0x00Ë

	)

886 
	#GPIO_AF0_TAMPER
 ((
uöt8_t
)0x00Ë

	)

887 
	#GPIO_AF0_SWJ
 ((
uöt8_t
)0x00Ë

	)

888 
	#GPIO_AF0_TRACE
 ((
uöt8_t
)0x00Ë

	)

893 
	#GPIO_AF1_TIM1
 ((
uöt8_t
)0x01Ë

	)

894 
	#GPIO_AF1_TIM2
 ((
uöt8_t
)0x01Ë

	)

899 
	#GPIO_AF2_TIM3
 ((
uöt8_t
)0x02Ë

	)

900 
	#GPIO_AF2_TIM4
 ((
uöt8_t
)0x02Ë

	)

901 
	#GPIO_AF2_TIM5
 ((
uöt8_t
)0x02Ë

	)

906 
	#GPIO_AF3_TIM8
 ((
uöt8_t
)0x03Ë

	)

907 
	#GPIO_AF3_TIM9
 ((
uöt8_t
)0x03Ë

	)

908 
	#GPIO_AF3_TIM10
 ((
uöt8_t
)0x03Ë

	)

909 
	#GPIO_AF3_TIM11
 ((
uöt8_t
)0x03Ë

	)

914 
	#GPIO_AF4_I2C1
 ((
uöt8_t
)0x04Ë

	)

915 
	#GPIO_AF4_I2C2
 ((
uöt8_t
)0x04Ë

	)

916 
	#GPIO_AF4_I2C3
 ((
uöt8_t
)0x04Ë

	)

921 
	#GPIO_AF5_SPI1
 ((
uöt8_t
)0x05Ë

	)

922 
	#GPIO_AF5_SPI2
 ((
uöt8_t
)0x05Ë

	)

923 
	#GPIO_AF5_SPI3
 ((
uöt8_t
)0x05Ë

	)

924 
	#GPIO_AF5_SPI4
 ((
uöt8_t
)0x05Ë

	)

925 
	#GPIO_AF5_SPI5
 ((
uöt8_t
)0x05Ë

	)

926 
	#GPIO_AF5_SPI6
 ((
uöt8_t
)0x05Ë

	)

927 
	#GPIO_AF5_I2S3ext
 ((
uöt8_t
)0x05Ë

	)

932 
	#GPIO_AF6_SPI3
 ((
uöt8_t
)0x06Ë

	)

933 
	#GPIO_AF6_I2S2ext
 ((
uöt8_t
)0x06Ë

	)

934 
	#GPIO_AF6_SAI1
 ((
uöt8_t
)0x06Ë

	)

939 
	#GPIO_AF7_USART1
 ((
uöt8_t
)0x07Ë

	)

940 
	#GPIO_AF7_USART2
 ((
uöt8_t
)0x07Ë

	)

941 
	#GPIO_AF7_USART3
 ((
uöt8_t
)0x07Ë

	)

942 
	#GPIO_AF7_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

947 
	#GPIO_AF8_UART4
 ((
uöt8_t
)0x08Ë

	)

948 
	#GPIO_AF8_UART5
 ((
uöt8_t
)0x08Ë

	)

949 
	#GPIO_AF8_USART6
 ((
uöt8_t
)0x08Ë

	)

950 
	#GPIO_AF8_UART7
 ((
uöt8_t
)0x08Ë

	)

951 
	#GPIO_AF8_UART8
 ((
uöt8_t
)0x08Ë

	)

956 
	#GPIO_AF9_CAN1
 ((
uöt8_t
)0x09Ë

	)

957 
	#GPIO_AF9_CAN2
 ((
uöt8_t
)0x09Ë

	)

958 
	#GPIO_AF9_TIM12
 ((
uöt8_t
)0x09Ë

	)

959 
	#GPIO_AF9_TIM13
 ((
uöt8_t
)0x09Ë

	)

960 
	#GPIO_AF9_TIM14
 ((
uöt8_t
)0x09Ë

	)

961 
	#GPIO_AF9_LTDC
 ((
uöt8_t
)0x09Ë

	)

962 
	#GPIO_AF9_QSPI
 ((
uöt8_t
)0x09Ë

	)

968 
	#GPIO_AF10_OTG_FS
 ((
uöt8_t
)0xAË

	)

969 
	#GPIO_AF10_OTG_HS
 ((
uöt8_t
)0xAË

	)

970 
	#GPIO_AF10_QSPI
 ((
uöt8_t
)0xAË

	)

976 
	#GPIO_AF11_ETH
 ((
uöt8_t
)0x0BË

	)

981 
	#GPIO_AF12_FMC
 ((
uöt8_t
)0xCË

	)

982 
	#GPIO_AF12_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

983 
	#GPIO_AF12_SDIO
 ((
uöt8_t
)0xCË

	)

988 
	#GPIO_AF13_DCMI
 ((
uöt8_t
)0x0DË

	)

989 
	#GPIO_AF13_DSI
 ((
uöt8_t
)0x0DË

	)

994 
	#GPIO_AF14_LTDC
 ((
uöt8_t
)0x0EË

	)

999 
	#GPIO_AF15_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

1044 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

1045 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(
uöt8_t
)(((__GPIOx__Ë=(
GPIOA
))? 0U :\

1046 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

1047 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

1048 ((
__GPIOx__
Ë=(
GPIOD
))? 3U :\

1049 ((
__GPIOx__
Ë=(
GPIOE
))? 4U :\

1050 ((
__GPIOx__
Ë=(
GPIOF
))? 5U :\

1051 ((
__GPIOx__
Ë=(
GPIOG
))? 6U :\

1052 ((
__GPIOx__
Ë=(
GPIOH
))? 7U :\

1053 ((
__GPIOx__
Ë=(
GPIOI
))? 8U : 9U)

	)

1056 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

1057 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1058 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(
uöt8_t
)(((__GPIOx__Ë=(
GPIOA
))? 0U :\

1059 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

1060 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

1061 ((
__GPIOx__
Ë=(
GPIOD
))? 3U :\

1062 ((
__GPIOx__
Ë=(
GPIOE
))? 4U :\

1063 ((
__GPIOx__
Ë=(
GPIOF
))? 5U :\

1064 ((
__GPIOx__
Ë=(
GPIOG
))? 6U :\

1065 ((
__GPIOx__
Ë=(
GPIOH
))? 7U :\

1066 ((
__GPIOx__
Ë=(
GPIOI
))? 8U :\

1067 ((
__GPIOx__
Ë=(
GPIOJ
))? 9U : 10U)

	)

1070 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

1071 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(
uöt8_t
)(((__GPIOx__Ë=(
GPIOA
))? 0U :\

1072 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

1073 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

1074 ((
__GPIOx__
Ë=(
GPIOH
))? 7U : 8U)

	)

1077 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
)

1078 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(
uöt8_t
)(((__GPIOx__Ë=(
GPIOA
))? 0U :\

1079 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

1080 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

1081 ((
__GPIOx__
Ë=(
GPIOD
))? 3U :\

1082 ((
__GPIOx__
Ë=(
GPIOE
))? 4U : 5U)

	)

1085 #i‡
deföed
(
STM32F446xx
)

1086 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(
uöt8_t
)(((__GPIOx__Ë=(
GPIOA
))? 0U :\

1087 ((
__GPIOx__
Ë=(
GPIOB
))? 1U :\

1088 ((
__GPIOx__
Ë=(
GPIOC
))? 2U :\

1089 ((
__GPIOx__
Ë=(
GPIOD
))? 3U :\

1090 ((
__GPIOx__
Ë=(
GPIOE
))? 4U :\

1091 ((
__GPIOx__
Ë=(
GPIOF
))? 5U :\

1092 ((
__GPIOx__
Ë=(
GPIOG
))? 6U : 8U)

	)

1103 #i‡
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

1104 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF0_RTC_50Hz
Ë|| ((AFË=
GPIO_AF9_TIM14
) || \

1105 ((
AF
Ë=
GPIO_AF0_MCO
Ë|| ((AFË=
GPIO_AF0_TAMPER
) || \

1106 ((
AF
Ë=
GPIO_AF0_SWJ
Ë|| ((AFË=
GPIO_AF0_TRACE
) || \

1107 ((
AF
Ë=
GPIO_AF1_TIM1
Ë|| ((AFË=
GPIO_AF1_TIM2
) || \

1108 ((
AF
Ë=
GPIO_AF2_TIM3
Ë|| ((AFË=
GPIO_AF2_TIM4
) || \

1109 ((
AF
Ë=
GPIO_AF2_TIM5
Ë|| ((AFË=
GPIO_AF3_TIM8
) || \

1110 ((
AF
Ë=
GPIO_AF4_I2C1
Ë|| ((AFË=
GPIO_AF4_I2C2
) || \

1111 ((
AF
Ë=
GPIO_AF4_I2C3
Ë|| ((AFË=
GPIO_AF5_SPI1
) || \

1112 ((
AF
Ë=
GPIO_AF5_SPI2
Ë|| ((AFË=
GPIO_AF9_TIM13
) || \

1113 ((
AF
Ë=
GPIO_AF6_SPI3
Ë|| ((AFË=
GPIO_AF9_TIM12
) || \

1114 ((
AF
Ë=
GPIO_AF7_USART1
Ë|| ((AFË=
GPIO_AF7_USART2
) || \

1115 ((
AF
Ë=
GPIO_AF7_USART3
Ë|| ((AFË=
GPIO_AF8_UART4
) || \

1116 ((
AF
Ë=
GPIO_AF8_UART5
Ë|| ((AFË=
GPIO_AF8_USART6
) || \

1117 ((
AF
Ë=
GPIO_AF9_CAN1
Ë|| ((AFË=
GPIO_AF9_CAN2
) || \

1118 ((
AF
Ë=
GPIO_AF10_OTG_FS
Ë|| ((AFË=
GPIO_AF10_OTG_HS
) || \

1119 ((
AF
Ë=
GPIO_AF11_ETH
Ë|| ((AFË=
GPIO_AF12_OTG_HS_FS
) || \

1120 ((
AF
Ë=
GPIO_AF12_SDIO
Ë|| ((AFË=
GPIO_AF13_DCMI
) || \

1121 ((
AF
Ë=
GPIO_AF15_EVENTOUT
Ë|| ((AFË=
GPIO_AF5_SPI4
) || \

1122 ((
AF
Ë=
GPIO_AF5_SPI5
Ë|| ((AFË=
GPIO_AF5_SPI6
) || \

1123 ((
AF
Ë=
GPIO_AF8_UART7
Ë|| ((AFË=
GPIO_AF8_UART8
) || \

1124 ((
AF
Ë=
GPIO_AF12_FMC
Ë|| ((AFË=
GPIO_AF6_SAI1
) || \

1125 ((
AF
Ë=
GPIO_AF14_LTDC
))

	)

1131 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
)

1132 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF0_RTC_50Hz
Ë|| ((AFË=
GPIO_AF9_TIM14
) || \

1133 ((
AF
Ë=
GPIO_AF0_MCO
Ë|| ((AFË=
GPIO_AF0_TAMPER
) || \

1134 ((
AF
Ë=
GPIO_AF0_SWJ
Ë|| ((AFË=
GPIO_AF0_TRACE
) || \

1135 ((
AF
Ë=
GPIO_AF1_TIM1
Ë|| ((AFË=
GPIO_AF1_TIM2
) || \

1136 ((
AF
Ë=
GPIO_AF2_TIM3
Ë|| ((AFË=
GPIO_AF2_TIM4
) || \

1137 ((
AF
Ë=
GPIO_AF2_TIM5
Ë|| ((AFË=
GPIO_AF3_TIM8
) || \

1138 ((
AF
Ë=
GPIO_AF4_I2C1
Ë|| ((AFË=
GPIO_AF4_I2C2
) || \

1139 ((
AF
Ë=
GPIO_AF4_I2C3
Ë|| ((AFË=
GPIO_AF5_SPI1
) || \

1140 ((
AF
Ë=
GPIO_AF5_SPI2
Ë|| ((AFË=
GPIO_AF9_TIM13
) || \

1141 ((
AF
Ë=
GPIO_AF6_SPI3
Ë|| ((AFË=
GPIO_AF9_TIM12
) || \

1142 ((
AF
Ë=
GPIO_AF7_USART1
Ë|| ((AFË=
GPIO_AF7_USART2
) || \

1143 ((
AF
Ë=
GPIO_AF7_USART3
Ë|| ((AFË=
GPIO_AF8_UART4
) || \

1144 ((
AF
Ë=
GPIO_AF8_UART5
Ë|| ((AFË=
GPIO_AF8_USART6
) || \

1145 ((
AF
Ë=
GPIO_AF9_CAN1
Ë|| ((AFË=
GPIO_AF9_CAN2
) || \

1146 ((
AF
Ë=
GPIO_AF10_OTG_FS
Ë|| ((AFË=
GPIO_AF10_OTG_HS
) || \

1147 ((
AF
Ë=
GPIO_AF11_ETH
Ë|| ((AFË=
GPIO_AF12_OTG_HS_FS
) || \

1148 ((
AF
Ë=
GPIO_AF12_SDIO
Ë|| ((AFË=
GPIO_AF13_DCMI
) || \

1149 ((
AF
Ë=
GPIO_AF15_EVENTOUT
Ë|| ((AFË=
GPIO_AF5_SPI4
) || \

1150 ((
AF
Ë=
GPIO_AF5_SPI5
Ë|| ((AFË=
GPIO_AF5_SPI6
) || \

1151 ((
AF
Ë=
GPIO_AF8_UART7
Ë|| ((AFË=
GPIO_AF8_UART8
) || \

1152 ((
AF
Ë=
GPIO_AF12_FMC
Ë|| ((AFË=
GPIO_AF6_SAI1
))

	)

1158 #i‡
deföed
(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

1159 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF0_RTC_50Hz
Ë|| ((AFË=
GPIO_AF9_TIM14
) || \

1160 ((
AF
Ë=
GPIO_AF0_MCO
Ë|| ((AFË=
GPIO_AF0_TAMPER
) || \

1161 ((
AF
Ë=
GPIO_AF0_SWJ
Ë|| ((AFË=
GPIO_AF0_TRACE
) || \

1162 ((
AF
Ë=
GPIO_AF1_TIM1
Ë|| ((AFË=
GPIO_AF1_TIM2
) || \

1163 ((
AF
Ë=
GPIO_AF2_TIM3
Ë|| ((AFË=
GPIO_AF2_TIM4
) || \

1164 ((
AF
Ë=
GPIO_AF2_TIM5
Ë|| ((AFË=
GPIO_AF3_TIM8
) || \

1165 ((
AF
Ë=
GPIO_AF4_I2C1
Ë|| ((AFË=
GPIO_AF4_I2C2
) || \

1166 ((
AF
Ë=
GPIO_AF4_I2C3
Ë|| ((AFË=
GPIO_AF5_SPI1
) || \

1167 ((
AF
Ë=
GPIO_AF5_SPI2
Ë|| ((AFË=
GPIO_AF9_TIM13
) || \

1168 ((
AF
Ë=
GPIO_AF6_SPI3
Ë|| ((AFË=
GPIO_AF9_TIM12
) || \

1169 ((
AF
Ë=
GPIO_AF7_USART1
Ë|| ((AFË=
GPIO_AF7_USART2
) || \

1170 ((
AF
Ë=
GPIO_AF7_USART3
Ë|| ((AFË=
GPIO_AF8_UART4
) || \

1171 ((
AF
Ë=
GPIO_AF8_UART5
Ë|| ((AFË=
GPIO_AF8_USART6
) || \

1172 ((
AF
Ë=
GPIO_AF9_CAN1
Ë|| ((AFË=
GPIO_AF9_CAN2
) || \

1173 ((
AF
Ë=
GPIO_AF10_OTG_FS
Ë|| ((AFË=
GPIO_AF10_OTG_HS
) || \

1174 ((
AF
Ë=
GPIO_AF11_ETH
Ë|| ((AFË=
GPIO_AF12_OTG_HS_FS
) || \

1175 ((
AF
Ë=
GPIO_AF12_SDIO
Ë|| ((AFË=
GPIO_AF13_DCMI
) || \

1176 ((
AF
Ë=
GPIO_AF12_FSMC
Ë|| ((AFË=
GPIO_AF15_EVENTOUT
))

	)

1182 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
)

1183 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF0_RTC_50Hz
Ë|| ((AFË=
GPIO_AF9_TIM14
) || \

1184 ((
AF
Ë=
GPIO_AF0_MCO
Ë|| ((AFË=
GPIO_AF0_TAMPER
) || \

1185 ((
AF
Ë=
GPIO_AF0_SWJ
Ë|| ((AFË=
GPIO_AF0_TRACE
) || \

1186 ((
AF
Ë=
GPIO_AF1_TIM1
Ë|| ((AFË=
GPIO_AF1_TIM2
) || \

1187 ((
AF
Ë=
GPIO_AF2_TIM3
Ë|| ((AFË=
GPIO_AF2_TIM4
) || \

1188 ((
AF
Ë=
GPIO_AF2_TIM5
Ë|| ((AFË=
GPIO_AF3_TIM8
) || \

1189 ((
AF
Ë=
GPIO_AF4_I2C1
Ë|| ((AFË=
GPIO_AF4_I2C2
) || \

1190 ((
AF
Ë=
GPIO_AF4_I2C3
Ë|| ((AFË=
GPIO_AF5_SPI1
) || \

1191 ((
AF
Ë=
GPIO_AF5_SPI2
Ë|| ((AFË=
GPIO_AF9_TIM13
) || \

1192 ((
AF
Ë=
GPIO_AF6_SPI3
Ë|| ((AFË=
GPIO_AF9_TIM12
) || \

1193 ((
AF
Ë=
GPIO_AF7_USART1
Ë|| ((AFË=
GPIO_AF7_USART2
) || \

1194 ((
AF
Ë=
GPIO_AF7_USART3
Ë|| ((AFË=
GPIO_AF8_UART4
) || \

1195 ((
AF
Ë=
GPIO_AF8_UART5
Ë|| ((AFË=
GPIO_AF8_USART6
) || \

1196 ((
AF
Ë=
GPIO_AF9_CAN1
Ë|| ((AFË=
GPIO_AF9_CAN2
) || \

1197 ((
AF
Ë=
GPIO_AF10_OTG_FS
Ë|| ((AFË=
GPIO_AF10_OTG_HS
) || \

1198 ((
AF
Ë=
GPIO_AF12_OTG_HS_FS
Ë|| ((AFË=
GPIO_AF12_SDIO
) || \

1199 ((
AF
Ë=
GPIO_AF12_FSMC
Ë|| ((AFË=
GPIO_AF15_EVENTOUT
))

	)

1206 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
)

1207 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF0_RTC_50Hz
Ë|| ((AFË=
GPIO_AF9_TIM14
) || \

1208 ((
AF
Ë=
GPIO_AF0_MCO
Ë|| ((AFË=
GPIO_AF0_TAMPER
) || \

1209 ((
AF
Ë=
GPIO_AF0_SWJ
Ë|| ((AFË=
GPIO_AF0_TRACE
) || \

1210 ((
AF
Ë=
GPIO_AF1_TIM1
Ë|| ((AFË=
GPIO_AF1_TIM2
) || \

1211 ((
AF
Ë=
GPIO_AF2_TIM3
Ë|| ((AFË=
GPIO_AF2_TIM4
) || \

1212 ((
AF
Ë=
GPIO_AF2_TIM5
Ë|| ((AFË=
GPIO_AF4_I2C1
) || \

1213 ((
AF
Ë=
GPIO_AF4_I2C2
Ë|| ((AFË=
GPIO_AF4_I2C3
) || \

1214 ((
AF
Ë=
GPIO_AF5_SPI1
Ë|| ((AFË=
GPIO_AF5_SPI2
) || \

1215 ((
AF
Ë=
GPIO_AF6_SPI3
Ë|| ((AFË=
GPIO_AF5_SPI4
) || \

1216 ((
AF
Ë=
GPIO_AF7_USART1
Ë|| ((AFË=
GPIO_AF7_USART2
) || \

1217 ((
AF
Ë=
GPIO_AF8_USART6
Ë|| ((AFË=
GPIO_AF10_OTG_FS
) || \

1218 ((
AF
Ë=
GPIO_AF9_I2C2
Ë|| ((AFË=
GPIO_AF9_I2C3
) || \

1219 ((
AF
Ë=
GPIO_AF12_SDIO
Ë|| ((AFË=
GPIO_AF15_EVENTOUT
))

	)

1224 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

1225 
	#IS_GPIO_AF
(
AF
Ë(((AFË< 10Ë|| ((AFË=15))

	)

1229 #i‡
deföed
(
STM32F411xE
)

1230 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF0_RTC_50Hz
Ë|| ((AFË=
GPIO_AF9_TIM14
) || \

1231 ((
AF
Ë=
GPIO_AF0_MCO
Ë|| ((AFË=
GPIO_AF0_TAMPER
) || \

1232 ((
AF
Ë=
GPIO_AF0_SWJ
Ë|| ((AFË=
GPIO_AF0_TRACE
) || \

1233 ((
AF
Ë=
GPIO_AF1_TIM1
Ë|| ((AFË=
GPIO_AF1_TIM2
) || \

1234 ((
AF
Ë=
GPIO_AF2_TIM3
Ë|| ((AFË=
GPIO_AF2_TIM4
) || \

1235 ((
AF
Ë=
GPIO_AF2_TIM5
Ë|| ((AFË=
GPIO_AF4_I2C1
) || \

1236 ((
AF
Ë=
GPIO_AF4_I2C2
Ë|| ((AFË=
GPIO_AF4_I2C3
) || \

1237 ((
AF
Ë=
GPIO_AF5_SPI1
Ë|| ((AFË=
GPIO_AF5_SPI2
) || \

1238 ((
AF
Ë=
GPIO_AF5_SPI3
Ë|| ((AFË=
GPIO_AF6_SPI4
) || \

1239 ((
AF
Ë=
GPIO_AF6_SPI3
Ë|| ((AFË=
GPIO_AF5_SPI4
) || \

1240 ((
AF
Ë=
GPIO_AF6_SPI5
Ë|| ((AFË=
GPIO_AF7_SPI3
) || \

1241 ((
AF
Ë=
GPIO_AF7_USART1
Ë|| ((AFË=
GPIO_AF7_USART2
) || \

1242 ((
AF
Ë=
GPIO_AF8_USART6
Ë|| ((AFË=
GPIO_AF10_OTG_FS
) || \

1243 ((
AF
Ë=
GPIO_AF9_I2C2
Ë|| ((AFË=
GPIO_AF9_I2C3
) || \

1244 ((
AF
Ë=
GPIO_AF12_SDIO
Ë|| ((AFË=
GPIO_AF15_EVENTOUT
))

	)

1250 #i‡
deföed
(
STM32F446xx
)

1251 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF0_RTC_50Hz
Ë|| ((AFË=
GPIO_AF9_TIM14
) || \

1252 ((
AF
Ë=
GPIO_AF0_MCO
Ë|| ((AFË=
GPIO_AF0_TAMPER
) || \

1253 ((
AF
Ë=
GPIO_AF0_SWJ
Ë|| ((AFË=
GPIO_AF0_TRACE
) || \

1254 ((
AF
Ë=
GPIO_AF1_TIM1
Ë|| ((AFË=
GPIO_AF1_TIM2
) || \

1255 ((
AF
Ë=
GPIO_AF2_TIM3
Ë|| ((AFË=
GPIO_AF2_TIM4
) || \

1256 ((
AF
Ë=
GPIO_AF2_TIM5
Ë|| ((AFË=
GPIO_AF3_TIM8
) || \

1257 ((
AF
Ë=
GPIO_AF4_I2C1
Ë|| ((AFË=
GPIO_AF4_I2C2
) || \

1258 ((
AF
Ë=
GPIO_AF4_I2C3
Ë|| ((AFË=
GPIO_AF5_SPI1
) || \

1259 ((
AF
Ë=
GPIO_AF5_SPI2
Ë|| ((AFË=
GPIO_AF9_TIM13
) || \

1260 ((
AF
Ë=
GPIO_AF6_SPI3
Ë|| ((AFË=
GPIO_AF9_TIM12
) || \

1261 ((
AF
Ë=
GPIO_AF7_USART1
Ë|| ((AFË=
GPIO_AF7_USART2
) || \

1262 ((
AF
Ë=
GPIO_AF7_USART3
Ë|| ((AFË=
GPIO_AF8_UART4
) || \

1263 ((
AF
Ë=
GPIO_AF8_UART5
Ë|| ((AFË=
GPIO_AF8_USART6
) || \

1264 ((
AF
Ë=
GPIO_AF9_CAN1
Ë|| ((AFË=
GPIO_AF9_CAN2
) || \

1265 ((
AF
Ë=
GPIO_AF10_OTG_FS
Ë|| ((AFË=
GPIO_AF10_OTG_HS
) || \

1266 ((
AF
Ë=
GPIO_AF11_ETH
Ë|| ((AFË=
GPIO_AF12_OTG_HS_FS
) || \

1267 ((
AF
Ë=
GPIO_AF12_SDIO
Ë|| ((AFË=
GPIO_AF13_DCMI
) || \

1268 ((
AF
Ë=
GPIO_AF15_EVENTOUT
Ë|| ((AFË=
GPIO_AF5_SPI4
) || \

1269 ((
AF
Ë=
GPIO_AF12_FMC
Ë|| ((AFË=
GPIO_AF6_SAI1
) || \

1270 ((
AF
Ë=
GPIO_AF3_CEC
Ë|| ((AFË=
GPIO_AF4_CEC
) || \

1271 ((
AF
Ë=
GPIO_AF5_SPI3
Ë|| ((AFË=
GPIO_AF6_SPI2
) || \

1272 ((
AF
Ë=
GPIO_AF6_SPI4
Ë|| ((AFË=
GPIO_AF7_UART5
) || \

1273 ((
AF
Ë=
GPIO_AF7_SPI2
Ë|| ((AFË=
GPIO_AF7_SPI3
) || \

1274 ((
AF
Ë=
GPIO_AF7_SPDIFRX
Ë|| ((AFË=
GPIO_AF8_SPDIFRX
) || \

1275 ((
AF
Ë=
GPIO_AF8_SAI2
Ë|| ((AFË=
GPIO_AF9_QSPI
) || \

1276 ((
AF
Ë=
GPIO_AF10_SAI2
Ë|| ((AFË=
GPIO_AF10_QSPI
))

	)

1282 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1283 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF0_RTC_50Hz
Ë|| ((AFË=
GPIO_AF9_TIM14
) || \

1284 ((
AF
Ë=
GPIO_AF0_MCO
Ë|| ((AFË=
GPIO_AF0_TAMPER
) || \

1285 ((
AF
Ë=
GPIO_AF0_SWJ
Ë|| ((AFË=
GPIO_AF0_TRACE
) || \

1286 ((
AF
Ë=
GPIO_AF1_TIM1
Ë|| ((AFË=
GPIO_AF1_TIM2
) || \

1287 ((
AF
Ë=
GPIO_AF2_TIM3
Ë|| ((AFË=
GPIO_AF2_TIM4
) || \

1288 ((
AF
Ë=
GPIO_AF2_TIM5
Ë|| ((AFË=
GPIO_AF3_TIM8
) || \

1289 ((
AF
Ë=
GPIO_AF4_I2C1
Ë|| ((AFË=
GPIO_AF4_I2C2
) || \

1290 ((
AF
Ë=
GPIO_AF4_I2C3
Ë|| ((AFË=
GPIO_AF5_SPI1
) || \

1291 ((
AF
Ë=
GPIO_AF5_SPI2
Ë|| ((AFË=
GPIO_AF9_TIM13
) || \

1292 ((
AF
Ë=
GPIO_AF6_SPI3
Ë|| ((AFË=
GPIO_AF9_TIM12
) || \

1293 ((
AF
Ë=
GPIO_AF7_USART1
Ë|| ((AFË=
GPIO_AF7_USART2
) || \

1294 ((
AF
Ë=
GPIO_AF7_USART3
Ë|| ((AFË=
GPIO_AF8_UART4
) || \

1295 ((
AF
Ë=
GPIO_AF8_UART5
Ë|| ((AFË=
GPIO_AF8_USART6
) || \

1296 ((
AF
Ë=
GPIO_AF9_CAN1
Ë|| ((AFË=
GPIO_AF9_CAN2
) || \

1297 ((
AF
Ë=
GPIO_AF10_OTG_FS
Ë|| ((AFË=
GPIO_AF10_OTG_HS
) || \

1298 ((
AF
Ë=
GPIO_AF11_ETH
Ë|| ((AFË=
GPIO_AF12_OTG_HS_FS
) || \

1299 ((
AF
Ë=
GPIO_AF12_SDIO
Ë|| ((AFË=
GPIO_AF13_DCMI
) || \

1300 ((
AF
Ë=
GPIO_AF15_EVENTOUT
Ë|| ((AFË=
GPIO_AF5_SPI4
) || \

1301 ((
AF
Ë=
GPIO_AF5_SPI5
Ë|| ((AFË=
GPIO_AF5_SPI6
) || \

1302 ((
AF
Ë=
GPIO_AF8_UART7
Ë|| ((AFË=
GPIO_AF8_UART8
) || \

1303 ((
AF
Ë=
GPIO_AF12_FMC
Ë|| ((AFË=
GPIO_AF6_SAI1
) || \

1304 ((
AF
Ë=
GPIO_AF14_LTDC
Ë|| ((AFË=
GPIO_AF13_DSI
) || \

1305 ((
AF
Ë=
GPIO_AF9_QSPI
Ë|| ((AFË=
GPIO_AF10_QSPI
))

	)

1335 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_hash.h

39 #i‚de‡
__STM32F4xx_HAL_HASH_H


40 
	#__STM32F4xx_HAL_HASH_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F415xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

49 
	~"°m32f4xx_hÆ_def.h
"

71 
uöt32_t
 
D©aTy≥
;

74 
uöt32_t
 
KeySize
;

76 
uöt8_t
* 
pKey
;

77 }
	tHASH_InôTy≥Def
;

89 
	mHAL_HASH_STATE_RESET
 = 0x00,

90 
	mHAL_HASH_STATE_READY
 = 0x01,

91 
	mHAL_HASH_STATE_BUSY
 = 0x02,

92 
	mHAL_HASH_STATE_TIMEOUT
 = 0x03,

93 
	mHAL_HASH_STATE_ERROR
 = 0x04

94 }
	tHAL_HASH_STATETy≥Def
;

106 
	mHAL_HASH_PHASE_READY
 = 0x01,

107 
	mHAL_HASH_PHASE_PROCESS
 = 0x02,

108 }
	tHAL_HASHPha£Ty≥Def
;

120 
HASH_InôTy≥Def
 
	mInô
;

122 
uöt8_t
 *
	mpHashInBuffPå
;

124 
uöt8_t
 *
	mpHashOutBuffPå
;

126 
__IO
 
uöt32_t
 
	mHashBuffSize
;

128 
__IO
 
uöt32_t
 
	mHashInCou¡
;

130 
__IO
 
uöt32_t
 
	mHashITCou¡î
;

132 
HAL_SètusTy≥Def
 
	mSètus
;

134 
HAL_HASHPha£Ty≥Def
 
	mPha£
;

136 
DMA_H™dÀTy≥Def
 *
	mhdmaö
;

138 
HAL_LockTy≥Def
 
	mLock
;

140 
__IO
 
HAL_HASH_STATETy≥Def
 
	mSèã
;

141 } 
	tHASH_H™dÀTy≥Def
;

160 
	#HASH_ALGOSELECTION_SHA1
 ((
uöt32_t
)0x0000Ë

	)

161 
	#HASH_ALGOSELECTION_SHA224
 
HASH_CR_ALGO_1


	)

162 
	#HASH_ALGOSELECTION_SHA256
 
HASH_CR_ALGO


	)

163 
	#HASH_ALGOSELECTION_MD5
 
HASH_CR_ALGO_0


	)

171 
	#HASH_ALGOMODE_HASH
 ((
uöt32_t
)0x00000000Ë

	)

172 
	#HASH_ALGOMODE_HMAC
 
HASH_CR_MODE


	)

180 
	#HASH_DATATYPE_32B
 ((
uöt32_t
)0x0000Ë

	)

181 
	#HASH_DATATYPE_16B
 
HASH_CR_DATATYPE_0


	)

182 
	#HASH_DATATYPE_8B
 
HASH_CR_DATATYPE_1


	)

183 
	#HASH_DATATYPE_1B
 
HASH_CR_DATATYPE


	)

192 
	#HASH_HMAC_KEYTYPE_SHORTKEY
 ((
uöt32_t
)0x00000000Ë

	)

193 
	#HASH_HMAC_KEYTYPE_LONGKEY
 
HASH_CR_LKEY


	)

201 
	#HASH_FLAG_DINIS
 
HASH_SR_DINIS


	)

202 
	#HASH_FLAG_DCIS
 
HASH_SR_DCIS


	)

203 
	#HASH_FLAG_DMAS
 
HASH_SR_DMAS


	)

204 
	#HASH_FLAG_BUSY
 
HASH_SR_BUSY


	)

205 
	#HASH_FLAG_DINNE
 
HASH_CR_DINNE


	)

213 
	#HASH_IT_DINI
 
HASH_IMR_DINIE


	)

214 
	#HASH_IT_DCI
 
HASH_IMR_DCIE


	)

232 
	#__HAL_HASH_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_HASH_STATE_RESET
)

	)

244 
	#__HAL_HASH_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë> 8UË? ((
HASH
->
CR
 & (__FLAG__)) == (__FLAG__)) :\

245 ((
HASH
->
SR
 & (
__FLAG__
)Ë=(__FLAG__)))

	)

252 
	#__HAL_HASH_SET_MDMAT
(Ë
HASH
->
CR
 |
HASH_CR_MDMAT


	)

258 
	#__HAL_HASH_RESET_MDMAT
(Ë
HASH
->
CR
 &(
uöt32_t
)(~
HASH_CR_MDMAT
)

	)

264 
	#__HAL_HASH_START_DIGEST
(Ë
HASH
->
STR
 |
HASH_STR_DCAL


	)

271 
	#__HAL_HASH_SET_NBVALIDBITS
(
SIZE
Ëdo{
HASH
->
STR
 &~(
HASH_STR_NBLW
);\

272 
HASH
->
STR
 |8 * ((
SIZE
) % 4);\

273 }0)

	)

280 
	~"°m32f4xx_hÆ_hash_ex.h
"

290 
HAL_SètusTy≥Def
 
HAL_HASH_Inô
(
HASH_H™dÀTy≥Def
 *
hhash
);

291 
HAL_SètusTy≥Def
 
HAL_HASH_DeInô
(
HASH_H™dÀTy≥Def
 *
hhash
);

299 
HAL_SètusTy≥Def
 
HAL_HASH_SHA1_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
);

300 
HAL_SètusTy≥Def
 
HAL_HASH_MD5_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
);

301 
HAL_SètusTy≥Def
 
HAL_HASH_MD5_Accumuœã
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

302 
HAL_SètusTy≥Def
 
HAL_HASH_SHA1_Accumuœã
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

310 
HAL_SètusTy≥Def
 
HAL_HMAC_SHA1_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
);

311 
HAL_SètusTy≥Def
 
HAL_HMAC_MD5_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
);

319 
HAL_SètusTy≥Def
 
HAL_HASH_SHA1_Sèπ_IT
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
);

320 
HAL_SètusTy≥Def
 
HAL_HASH_MD5_Sèπ_IT
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
);

328 
HAL_SètusTy≥Def
 
HAL_HASH_SHA1_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

329 
HAL_SètusTy≥Def
 
HAL_HASH_SHA1_Föish
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
* 
pOutBuf„r
, 
uöt32_t
 
Timeout
);

330 
HAL_SètusTy≥Def
 
HAL_HASH_MD5_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

331 
HAL_SètusTy≥Def
 
HAL_HASH_MD5_Föish
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
* 
pOutBuf„r
, 
uöt32_t
 
Timeout
);

339 
HAL_SètusTy≥Def
 
HAL_HMAC_SHA1_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

340 
HAL_SètusTy≥Def
 
HAL_HMAC_MD5_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

348 
HAL_HASH_IRQH™dÀr
(
HASH_H™dÀTy≥Def
 *
hhash
);

356 
HAL_HASH_STATETy≥Def
 
HAL_HASH_GëSèã
(
HASH_H™dÀTy≥Def
 *
hhash
);

357 
HAL_HASH_M•Inô
(
HASH_H™dÀTy≥Def
 *
hhash
);

358 
HAL_HASH_M•DeInô
(
HASH_H™dÀTy≥Def
 *
hhash
);

359 
HAL_HASH_InC∂tCÆlback
(
HASH_H™dÀTy≥Def
 *
hhash
);

360 
HAL_HASH_Dg°C∂tCÆlback
(
HASH_H™dÀTy≥Def
 *
hhash
);

361 
HAL_HASH_Eº‹CÆlback
(
HASH_H™dÀTy≥Def
 *
hhash
);

401 
	#IS_HASH_ALGOSELECTION
(
__ALGOSELECTION__
Ë(((__ALGOSELECTION__Ë=
HASH_ALGOSELECTION_SHA1
) || \

402 ((
__ALGOSELECTION__
Ë=
HASH_ALGOSELECTION_SHA224
) || \

403 ((
__ALGOSELECTION__
Ë=
HASH_ALGOSELECTION_SHA256
) || \

404 ((
__ALGOSELECTION__
Ë=
HASH_ALGOSELECTION_MD5
))

	)

407 
	#IS_HASH_ALGOMODE
(
__ALGOMODE__
Ë(((__ALGOMODE__Ë=
HASH_ALGOMODE_HASH
) || \

408 ((
__ALGOMODE__
Ë=
HASH_ALGOMODE_HMAC
))

	)

411 
	#IS_HASH_DATATYPE
(
__DATATYPE__
Ë(((__DATATYPE__Ë=
HASH_DATATYPE_32B
)|| \

412 ((
__DATATYPE__
Ë=
HASH_DATATYPE_16B
)|| \

413 ((
__DATATYPE__
Ë=
HASH_DATATYPE_8B
) || \

414 ((
__DATATYPE__
Ë=
HASH_DATATYPE_1B
))

	)

417 
	#IS_HASH_HMAC_KEYTYPE
(
__KEYTYPE__
Ë(((__KEYTYPE__Ë=
HASH_HMAC_KEYTYPE_SHORTKEY
) || \

418 ((
__KEYTYPE__
Ë=
HASH_HMAC_KEYTYPE_LONGKEY
))

	)

420 
	#IS_HASH_SHA1_BUFFER_SIZE
(
__SIZE__
Ë((((__SIZE__)%4Ë!0)? 0U: 1U)

	)

444 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_hash_ex.h

39 #i‚de‡
__STM32F4xx_HAL_HASH_EX_H


40 
	#__STM32F4xx_HAL_HASH_EX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F437xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

72 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA224_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
);

73 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA256_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
);

74 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA224_Accumuœã
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

75 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA256_Accumuœã
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

85 
HAL_SètusTy≥Def
 
HAL_HMACEx_SHA224_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
);

86 
HAL_SètusTy≥Def
 
HAL_HMACEx_SHA256_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
);

96 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA224_Sèπ_IT
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
);

97 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA256_Sèπ_IT
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
);

107 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA224_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

108 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA224_Föish
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
* 
pOutBuf„r
, 
uöt32_t
 
Timeout
);

109 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA256_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

110 
HAL_SètusTy≥Def
 
HAL_HASHEx_SHA256_Föish
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
* 
pOutBuf„r
, 
uöt32_t
 
Timeout
);

120 
HAL_SètusTy≥Def
 
HAL_HMACEx_SHA224_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

121 
HAL_SètusTy≥Def
 
HAL_HMACEx_SHA256_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

130 
HAL_HASHEx_IRQH™dÀr
(
HASH_H™dÀTy≥Def
 *
hhash
);

194 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_hcd.h

39 #i‚de‡
__STM32F4xx_HAL_HCD_H


40 
	#__STM32F4xx_HAL_HCD_H


	)

42 #ifde‡
__˝lu•lus


45 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

46 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

47 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

48 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_Œ_usb.h
"

70 
HAL_HCD_STATE_RESET
 = 0x00,

71 
HAL_HCD_STATE_READY
 = 0x01,

72 
HAL_HCD_STATE_ERROR
 = 0x02,

73 
HAL_HCD_STATE_BUSY
 = 0x03,

74 
HAL_HCD_STATE_TIMEOUT
 = 0x04

75 } 
	tHCD_SèãTy≥Def
;

77 
USB_OTG_GlobÆTy≥Def
 
	tHCD_Ty≥Def
;

78 
USB_OTG_CfgTy≥Def
 
	tHCD_InôTy≥Def
;

79 
USB_OTG_HCTy≥Def
 
	tHCD_HCTy≥Def
 ;

80 
USB_OTG_URBSèãTy≥Def
 
	tHCD_URBSèãTy≥Def
 ;

81 
USB_OTG_HCSèãTy≥Def
 
	tHCD_HCSèãTy≥Def
 ;

91 
HCD_Ty≥Def
 *
In°™˚
;

92 
HCD_InôTy≥Def
 
Inô
;

93 
HCD_HCTy≥Def
 
hc
[15];

94 
HAL_LockTy≥Def
 
Lock
;

95 
__IO
 
HCD_SèãTy≥Def
 
Sèã
;

96 *
pD©a
;

97 } 
	tHCD_H™dÀTy≥Def
;

114 
	#HCD_SPEED_HIGH
 0

	)

115 
	#HCD_SPEED_LOW
 2

	)

116 
	#HCD_SPEED_FULL
 3

	)

124 
	#HCD_PHY_ULPI
 1

	)

125 
	#HCD_PHY_EMBEDDED
 2

	)

139 
	#__HAL_HCD_ENABLE
(
__HANDLE__
Ë
	`USB_E«bÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

140 
	#__HAL_HCD_DISABLE
(
__HANDLE__
Ë
	`USB_DißbÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

142 
	#__HAL_HCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë((
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë& (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

143 
	#__HAL_HCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
GINTSTS
Ë(__INTERRUPT__))

	)

144 
	#__HAL_HCD_IS_INVALID_INTERRUPT
(
__HANDLE__
Ë(
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë=0)

	)

146 
	#__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
__INTERRUPT__
Ë(
	`USBx_HC
(chnum)->
HCINT
 = (__INTERRUPT__))

	)

147 
	#__HAL_HCD_MASK_HALT_HC_INT
(
chnum
Ë(
	`USBx_HC
(chnum)->
HCINTMSK
 &~
USB_OTG_HCINTMSK_CHHM
)

	)

148 
	#__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
Ë(
	`USBx_HC
(chnum)->
HCINTMSK
 |
USB_OTG_HCINTMSK_CHHM
)

	)

149 
	#__HAL_HCD_MASK_ACK_HC_INT
(
chnum
Ë(
	`USBx_HC
(chnum)->
HCINTMSK
 &~
USB_OTG_HCINTMSK_ACKM
)

	)

150 
	#__HAL_HCD_UNMASK_ACK_HC_INT
(
chnum
Ë(
	`USBx_HC
(chnum)->
HCINTMSK
 |
USB_OTG_HCINTMSK_ACKM
)

	)

164 
HAL_SètusTy≥Def
 
	`HAL_HCD_Inô
(
HCD_H™dÀTy≥Def
 *
hhcd
);

165 
HAL_SètusTy≥Def
 
	`HAL_HCD_DeInô
(
HCD_H™dÀTy≥Def
 *
hhcd
);

166 
HAL_SètusTy≥Def
 
	`HAL_HCD_HC_Inô
(
HCD_H™dÀTy≥Def
 *
hhcd
,

167 
uöt8_t
 
ch_num
,

168 
uöt8_t
 
ïnum
,

169 
uöt8_t
 
dev_addªss
,

170 
uöt8_t
 
•ìd
,

171 
uöt8_t
 
ï_ty≥
,

172 
uöt16_t
 
mps
);

174 
HAL_SètusTy≥Def
 
	`HAL_HCD_HC_HÆt
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
ch_num
);

176 
	`HAL_HCD_M•Inô
(
HCD_H™dÀTy≥Def
 *
hhcd
);

177 
	`HAL_HCD_M•DeInô
(
HCD_H™dÀTy≥Def
 *
hhcd
);

186 
HAL_SètusTy≥Def
 
	`HAL_HCD_HC_SubmôReque°
(
HCD_H™dÀTy≥Def
 *
hhcd
,

187 
uöt8_t
 
pùe
,

188 
uöt8_t
 
dúe˘i⁄
,

189 
uöt8_t
 
ï_ty≥
,

190 
uöt8_t
 
tokí
,

191 
uöt8_t
* 
pbuff
,

192 
uöt16_t
 
Àngth
,

193 
uöt8_t
 
do_pög
);

196 
	`HAL_HCD_IRQH™dÀr
(
HCD_H™dÀTy≥Def
 *
hhcd
);

197 
	`HAL_HCD_SOF_CÆlback
(
HCD_H™dÀTy≥Def
 *
hhcd
);

198 
	`HAL_HCD_C⁄√˘_CÆlback
(
HCD_H™dÀTy≥Def
 *
hhcd
);

199 
	`HAL_HCD_Disc⁄√˘_CÆlback
(
HCD_H™dÀTy≥Def
 *
hhcd
);

200 
	`HAL_HCD_HC_NŸifyURBCh™ge_CÆlback
(
HCD_H™dÀTy≥Def
 *
hhcd
,

201 
uöt8_t
 
chnum
,

202 
HCD_URBSèãTy≥Def
 
urb_°©e
);

211 
HAL_SètusTy≥Def
 
	`HAL_HCD_Re£tP‹t
(
HCD_H™dÀTy≥Def
 *
hhcd
);

212 
HAL_SètusTy≥Def
 
	`HAL_HCD_Sèπ
(
HCD_H™dÀTy≥Def
 *
hhcd
);

213 
HAL_SètusTy≥Def
 
	`HAL_HCD_St›
(
HCD_H™dÀTy≥Def
 *
hhcd
);

222 
HCD_SèãTy≥Def
 
	`HAL_HCD_GëSèã
(
HCD_H™dÀTy≥Def
 *
hhcd
);

223 
HCD_URBSèãTy≥Def
 
	`HAL_HCD_HC_GëURBSèã
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
);

224 
uöt32_t
 
	`HAL_HCD_HC_GëX„rCou¡
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
);

225 
HCD_HCSèãTy≥Def
 
	`HAL_HCD_HC_GëSèã
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
);

226 
uöt32_t
 
	`HAL_HCD_GëCuºítFøme
(
HCD_H™dÀTy≥Def
 *
hhcd
);

227 
uöt32_t
 
	`HAL_HCD_GëCuºítS≥ed
(
HCD_H™dÀTy≥Def
 *
hhcd
);

243 #i‡
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F427xx
) ||\

244 
	`deföed
(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

245 
	$deföed
(
STM32F479xx
)

246 
	#IS_HCD_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USB_OTG_FS
) || \

247 ((
INSTANCE
Ë=
USB_OTG_HS
))

	)

248 #ñi‡
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
)

249 
	#IS_HCD_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USB_OTG_FS
))

	)

267 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

268 #ifde‡
__˝lu•lus


269 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h

39 #i‚de‡
__STM32F4xx_HAL_I2C_H


40 
	#__STM32F4xx_HAL_I2C_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
ClockS≥ed
;

70 
uöt32_t
 
DutyCy˛e
;

73 
uöt32_t
 
OwnAddªss1
;

76 
uöt32_t
 
AddªssögMode
;

79 
uöt32_t
 
DuÆAddªssMode
;

82 
uöt32_t
 
OwnAddªss2
;

85 
uöt32_t
 
GíîÆCÆlMode
;

88 
uöt32_t
 
NoSåëchMode
;

91 }
	tI2C_InôTy≥Def
;

98 
HAL_I2C_STATE_RESET
 = 0x00,

99 
HAL_I2C_STATE_READY
 = 0x01,

100 
HAL_I2C_STATE_BUSY
 = 0x02,

101 
HAL_I2C_STATE_BUSY_TX
 = 0x12,

102 
HAL_I2C_STATE_BUSY_RX
 = 0x22,

103 
HAL_I2C_STATE_MEM_BUSY_TX
 = 0x32,

104 
HAL_I2C_STATE_MEM_BUSY_RX
 = 0x42,

105 
HAL_I2C_STATE_TIMEOUT
 = 0x03,

106 
HAL_I2C_STATE_ERROR
 = 0x04

108 }
	tHAL_I2C_SèãTy≥Def
;

115 
I2C_Ty≥Def
 *
In°™˚
;

117 
I2C_InôTy≥Def
 
Inô
;

119 
uöt8_t
 *
pBuffPå
;

121 
uöt16_t
 
X„rSize
;

123 
__IO
 
uöt16_t
 
X„rCou¡
;

125 
DMA_H™dÀTy≥Def
 *
hdm©x
;

127 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

129 
HAL_LockTy≥Def
 
Lock
;

131 
__IO
 
HAL_I2C_SèãTy≥Def
 
Sèã
;

133 
__IO
 
uöt32_t
 
Eº‹Code
;

135 }
	tI2C_H™dÀTy≥Def
;

149 
	#HAL_I2C_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

150 
	#HAL_I2C_ERROR_BERR
 ((
uöt32_t
)0x00000001Ë

	)

151 
	#HAL_I2C_ERROR_ARLO
 ((
uöt32_t
)0x00000002Ë

	)

152 
	#HAL_I2C_ERROR_AF
 ((
uöt32_t
)0x00000004Ë

	)

153 
	#HAL_I2C_ERROR_OVR
 ((
uöt32_t
)0x00000008Ë

	)

154 
	#HAL_I2C_ERROR_DMA
 ((
uöt32_t
)0x00000010Ë

	)

155 
	#HAL_I2C_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000020Ë

	)

163 
	#I2C_DUTYCYCLE_2
 ((
uöt32_t
)0x00000000)

	)

164 
	#I2C_DUTYCYCLE_16_9
 
I2C_CCR_DUTY


	)

172 
	#I2C_ADDRESSINGMODE_7BIT
 ((
uöt32_t
)0x00004000)

	)

173 
	#I2C_ADDRESSINGMODE_10BIT
 (
I2C_OAR1_ADDMODE
 | ((
uöt32_t
)0x00004000))

	)

181 
	#I2C_DUALADDRESS_DISABLE
 ((
uöt32_t
)0x00000000)

	)

182 
	#I2C_DUALADDRESS_ENABLE
 
I2C_OAR2_ENDUAL


	)

190 
	#I2C_GENERALCALL_DISABLE
 ((
uöt32_t
)0x00000000)

	)

191 
	#I2C_GENERALCALL_ENABLE
 
I2C_CR1_ENGC


	)

199 
	#I2C_NOSTRETCH_DISABLE
 ((
uöt32_t
)0x00000000)

	)

200 
	#I2C_NOSTRETCH_ENABLE
 
I2C_CR1_NOSTRETCH


	)

208 
	#I2C_MEMADD_SIZE_8BIT
 ((
uöt32_t
)0x00000001)

	)

209 
	#I2C_MEMADD_SIZE_16BIT
 ((
uöt32_t
)0x00000010)

	)

217 
	#I2C_IT_BUF
 
I2C_CR2_ITBUFEN


	)

218 
	#I2C_IT_EVT
 
I2C_CR2_ITEVTEN


	)

219 
	#I2C_IT_ERR
 
I2C_CR2_ITERREN


	)

227 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x00018000)

	)

228 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x00014000)

	)

229 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x00011000)

	)

230 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x00010800)

	)

231 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x00010400)

	)

232 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x00010200)

	)

233 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x00010100)

	)

234 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x00010080)

	)

235 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x00010040)

	)

236 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x00010010)

	)

237 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x00010008)

	)

238 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x00010004)

	)

239 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x00010002)

	)

240 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x00010001)

	)

241 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00100080)

	)

242 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00100040)

	)

243 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00100020)

	)

244 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100010)

	)

245 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00100004)

	)

246 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00100002)

	)

247 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00100001)

	)

266 
	#__HAL_I2C_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_I2C_STATE_RESET
)

	)

278 
	#__HAL_I2C_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR2
 |(__INTERRUPT__))

	)

279 
	#__HAL_I2C_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR2
 &(~(__INTERRUPT__)))

	)

291 
	#__HAL_I2C_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CR2
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

322 
	#__HAL_I2C_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((
uöt8_t
)((__FLAG__Ë>> 16)Ë=0x01)?((((__HANDLE__)->
In°™˚
->
SR1
Ë& ((__FLAG__Ë& 
I2C_FLAG_MASK
)) == ((__FLAG__) & I2C_FLAG_MASK)): \

323 ((((
__HANDLE__
)->
In°™˚
->
SR2
Ë& ((
__FLAG__
Ë& 
I2C_FLAG_MASK
)Ë=((__FLAG__Ë& I2C_FLAG_MASK)))

	)

339 
	#__HAL_I2C_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR1
 = ~((__FLAG__Ë& 
I2C_FLAG_MASK
))

	)

346 
	#__HAL_I2C_CLEAR_ADDRFLAG
(
__HANDLE__
) \

348 
__IO
 
uöt32_t
 
tm¥eg
; \

349 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR1
; \

350 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR2
; \

351 
	`UNUSED
(
tm¥eg
); \

352 } 0)

	)

359 
	#__HAL_I2C_CLEAR_STOPFLAG
(
__HANDLE__
) \

361 
__IO
 
uöt32_t
 
tm¥eg
; \

362 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR1
; \

363 (
__HANDLE__
)->
In°™˚
->
CR1
 |
I2C_CR1_PE
; \

364 
	`UNUSED
(
tm¥eg
); \

365 } 0)

	)

367 
	#__HAL_I2C_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
I2C_CR1_PE
)

	)

368 
	#__HAL_I2C_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
I2C_CR1_PE
)

	)

375 
	~"°m32f4xx_hÆ_i2c_ex.h
"

386 
HAL_SètusTy≥Def
 
HAL_I2C_Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

387 
HAL_SètusTy≥Def
 
HAL_I2C_DeInô
 (
I2C_H™dÀTy≥Def
 *
hi2c
);

388 
HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

389 
HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
);

399 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

400 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

401 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

402 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

403 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

404 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

405 
HAL_SètusTy≥Def
 
HAL_I2C_IsDevi˚Ródy
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
);

408 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

409 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

410 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

411 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

412 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

413 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

416 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

417 
HAL_SètusTy≥Def
 
HAL_I2C_Ma°î_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

418 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

419 
HAL_SètusTy≥Def
 
HAL_I2C_Sœve_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

420 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Wrôe_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

421 
HAL_SètusTy≥Def
 
HAL_I2C_Mem_Ród_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
);

424 
HAL_I2C_EV_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
);

425 
HAL_I2C_ER_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
);

426 
HAL_I2C_Ma°îTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

427 
HAL_I2C_Ma°îRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

428 
HAL_I2C_SœveTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

429 
HAL_I2C_SœveRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

430 
HAL_I2C_MemTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

431 
HAL_I2C_MemRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

432 
HAL_I2C_Eº‹CÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
);

441 
HAL_I2C_SèãTy≥Def
 
HAL_I2C_GëSèã
(
I2C_H™dÀTy≥Def
 *
hi2c
);

442 
uöt32_t
 
HAL_I2C_GëEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
);

457 
	#I2C_FLAG_MASK
 ((
uöt32_t
)0x0000FFFF)

	)

467 
	#I2C_FREQRANGE
(
__PCLK__
Ë((__PCLK__)/1000000)

	)

468 
	#I2C_RISE_TIME
(
__FREQRANGE__
, 
__SPEED__
Ë(((__SPEED__Ë<100000Ë? ((__FREQRANGE__Ë+ 1Ë: ((((__FREQRANGE__Ë* 300Ë/ 1000Ë+ 1))

	)

469 
	#I2C_SPEED_STANDARD
(
__PCLK__
, 
__SPEED__
Ë(((((__PCLK__)/((__SPEED__Ë<< 1)Ë& 
I2C_CCR_CCR
Ë< 4)? 4:((__PCLK__Ë/ ((__SPEED__Ë<< 1)))

	)

470 
	#I2C_SPEED_FAST
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
Ë(((__DUTYCYCLE__Ë=
I2C_DUTYCYCLE_2
)? ((__PCLK__Ë/ ((__SPEED__Ë* 3)Ë: (((__PCLK__Ë/ ((__SPEED__Ë* 25)Ë| 
I2C_DUTYCYCLE_16_9
))

	)

471 
	#I2C_SPEED
(
__PCLK__
, 
__SPEED__
, 
__DUTYCYCLE__
Ë(((__SPEED__Ë<100000)? (
	`I2C_SPEED_STANDARD
((__PCLK__), (__SPEED__))) : \

472 ((
	`I2C_SPEED_FAST
((
__PCLK__
), (
__SPEED__
), (
__DUTYCYCLE__
)Ë& 
I2C_CCR_CCR
) == 0)? 1 : \

473 ((
	`I2C_SPEED_FAST
((
__PCLK__
), (
__SPEED__
), (
__DUTYCYCLE__
))Ë| 
I2C_CCR_FS
))

	)

475 
	#I2C_7BIT_ADD_WRITE
(
__ADDRESS__
Ë((
uöt8_t
)((__ADDRESS__Ë& (~
I2C_OAR1_ADD0
)))

	)

476 
	#I2C_7BIT_ADD_READ
(
__ADDRESS__
Ë((
uöt8_t
)((__ADDRESS__Ë| 
I2C_OAR1_ADD0
))

	)

478 
	#I2C_10BIT_ADDRESS
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((__ADDRESS__Ë& (uöt16_t)(0x00FF))))

	)

479 
	#I2C_10BIT_HEADER_WRITE
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((uöt16_t)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)(0x0300))Ë>> 7Ë| (uöt16_t)(0xF0))))

	)

480 
	#I2C_10BIT_HEADER_READ
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((uöt16_t)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)(0x0300))Ë>> 7Ë| (uöt16_t)(0xF1))))

	)

482 
	#I2C_MEM_ADD_MSB
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)(((uöt16_t)((__ADDRESS__Ë& (uöt16_t)(0xFF00))Ë>> 8)))

	)

483 
	#I2C_MEM_ADD_LSB
(
__ADDRESS__
Ë((
uöt8_t
)((
uöt16_t
)((__ADDRESS__Ë& (uöt16_t)(0x00FF))))

	)

488 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DUTYCYCLE_2
) || \

489 ((
CYCLE
Ë=
I2C_DUTYCYCLE_16_9
))

	)

490 
	#IS_I2C_ADDRESSING_MODE
(
ADDRESS
Ë(((ADDRESSË=
I2C_ADDRESSINGMODE_7BIT
) || \

491 ((
ADDRESS
Ë=
I2C_ADDRESSINGMODE_10BIT
))

	)

492 
	#IS_I2C_DUAL_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_DUALADDRESS_DISABLE
) || \

493 ((
ADDRESS
Ë=
I2C_DUALADDRESS_ENABLE
))

	)

494 
	#IS_I2C_GENERAL_CALL
(
CALL
Ë(((CALLË=
I2C_GENERALCALL_DISABLE
) || \

495 ((
CALL
Ë=
I2C_GENERALCALL_ENABLE
))

	)

496 
	#IS_I2C_NO_STRETCH
(
STRETCH
Ë(((STRETCHË=
I2C_NOSTRETCH_DISABLE
) || \

497 ((
STRETCH
Ë=
I2C_NOSTRETCH_ENABLE
))

	)

498 
	#IS_I2C_MEMADD_SIZE
(
SIZE
Ë(((SIZEË=
I2C_MEMADD_SIZE_8BIT
) || \

499 ((
SIZE
Ë=
I2C_MEMADD_SIZE_16BIT
))

	)

500 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË> 0Ë&& ((SPEEDË<400000))

	)

501 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë(((ADDRESS1Ë& (
uöt32_t
)(0xFFFFFC00)Ë=0)

	)

502 
	#IS_I2C_OWN_ADDRESS2
(
ADDRESS2
Ë(((ADDRESS2Ë& (
uöt32_t
)(0xFFFFFF01)Ë=0)

	)

528 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c_ex.h

39 #i‚de‡
__STM32F4xx_HAL_I2C_EX_H


40 
	#__STM32F4xx_HAL_I2C_EX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

47 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) ||\

48 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_hÆ_def.h
"

69 
	#I2C_ANALOGFILTER_ENABLE
 ((
uöt32_t
)0x00000000)

	)

70 
	#I2C_ANALOGFILTER_DISABLE
 
I2C_FLTR_ANOFF


	)

89 
HAL_SètusTy≥Def
 
	`HAL_I2CEx_C⁄figA«logFûãr
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
A«logFûãr
);

90 
HAL_SètusTy≥Def
 
	`HAL_I2CEx_C⁄figDigôÆFûãr
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
DigôÆFûãr
);

113 
	#IS_I2C_ANALOG_FILTER
(
FILTER
Ë(((FILTERË=
I2C_ANALOGFILTER_ENABLE
) || \

114 ((
FILTER
Ë=
I2C_ANALOGFILTER_DISABLE
))

	)

115 
	#IS_I2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000F)

	)

129 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

131 #ifde‡
__˝lu•lus


132 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2s.h

39 #i‚de‡
__STM32F4xx_HAL_I2S_H


40 
	#__STM32F4xx_HAL_I2S_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
Mode
;

70 
uöt32_t
 
Sènd¨d
;

73 
uöt32_t
 
D©aF‹m©
;

76 
uöt32_t
 
MCLKOuçut
;

79 
uöt32_t
 
AudioFªq
;

82 
uöt32_t
 
CPOL
;

85 
uöt32_t
 
ClockSour˚
;

88 
uöt32_t
 
FuŒDu∂exMode
;

91 }
	tI2S_InôTy≥Def
;

98 
HAL_I2S_STATE_RESET
 = 0x00,

99 
HAL_I2S_STATE_READY
 = 0x01,

100 
HAL_I2S_STATE_BUSY
 = 0x02,

101 
HAL_I2S_STATE_BUSY_TX
 = 0x12,

102 
HAL_I2S_STATE_BUSY_RX
 = 0x22,

103 
HAL_I2S_STATE_BUSY_TX_RX
 = 0x32,

104 
HAL_I2S_STATE_TIMEOUT
 = 0x03,

105 
HAL_I2S_STATE_ERROR
 = 0x04

107 }
	tHAL_I2S_SèãTy≥Def
;

114 
SPI_Ty≥Def
 *
In°™˚
;

116 
I2S_InôTy≥Def
 
Inô
;

118 
uöt16_t
 *
pTxBuffPå
;

120 
__IO
 
uöt16_t
 
TxX„rSize
;

122 
__IO
 
uöt16_t
 
TxX„rCou¡
;

124 
uöt16_t
 *
pRxBuffPå
;

126 
__IO
 
uöt16_t
 
RxX„rSize
;

128 
__IO
 
uöt16_t
 
RxX„rCou¡
;

130 
DMA_H™dÀTy≥Def
 *
hdm©x
;

132 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

134 
__IO
 
HAL_LockTy≥Def
 
Lock
;

136 
__IO
 
HAL_I2S_SèãTy≥Def
 
Sèã
;

138 
__IO
 
uöt32_t
 
Eº‹Code
;

140 }
	tI2S_H™dÀTy≥Def
;

154 
	#HAL_I2S_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

155 
	#HAL_I2S_ERROR_UDR
 ((
uöt32_t
)0x00000001Ë

	)

156 
	#HAL_I2S_ERROR_OVR
 ((
uöt32_t
)0x00000002Ë

	)

157 
	#HAL_I2SEX_ERROR_UDR
 ((
uöt32_t
)0x00000004Ë

	)

158 
	#HAL_I2SEX_ERROR_OVR
 ((
uöt32_t
)0x00000008Ë

	)

159 
	#HAL_I2S_ERROR_FRE
 ((
uöt32_t
)0x00000010Ë

	)

160 
	#HAL_I2S_ERROR_DMA
 ((
uöt32_t
)0x00000020Ë

	)

168 
	#I2S_MODE_SLAVE_TX
 ((
uöt32_t
)0x00000000)

	)

169 
	#I2S_MODE_SLAVE_RX
 ((
uöt32_t
)0x00000100)

	)

170 
	#I2S_MODE_MASTER_TX
 ((
uöt32_t
)0x00000200)

	)

171 
	#I2S_MODE_MASTER_RX
 ((
uöt32_t
)0x00000300)

	)

179 
	#I2S_STANDARD_PHILIPS
 ((
uöt32_t
)0x00000000)

	)

180 
	#I2S_STANDARD_MSB
 ((
uöt32_t
)0x00000010)

	)

181 
	#I2S_STANDARD_LSB
 ((
uöt32_t
)0x00000020)

	)

182 
	#I2S_STANDARD_PCM_SHORT
 ((
uöt32_t
)0x00000030)

	)

183 
	#I2S_STANDARD_PCM_LONG
 ((
uöt32_t
)0x000000B0)

	)

191 
	#I2S_DATAFORMAT_16B
 ((
uöt32_t
)0x00000000)

	)

192 
	#I2S_DATAFORMAT_16B_EXTENDED
 ((
uöt32_t
)0x00000001)

	)

193 
	#I2S_DATAFORMAT_24B
 ((
uöt32_t
)0x00000003)

	)

194 
	#I2S_DATAFORMAT_32B
 ((
uöt32_t
)0x00000005)

	)

202 
	#I2S_MCLKOUTPUT_ENABLE
 ((
uöt32_t
)
SPI_I2SPR_MCKOE
)

	)

203 
	#I2S_MCLKOUTPUT_DISABLE
 ((
uöt32_t
)0x00000000)

	)

211 
	#I2S_AUDIOFREQ_192K
 ((
uöt32_t
)192000)

	)

212 
	#I2S_AUDIOFREQ_96K
 ((
uöt32_t
)96000)

	)

213 
	#I2S_AUDIOFREQ_48K
 ((
uöt32_t
)48000)

	)

214 
	#I2S_AUDIOFREQ_44K
 ((
uöt32_t
)44100)

	)

215 
	#I2S_AUDIOFREQ_32K
 ((
uöt32_t
)32000)

	)

216 
	#I2S_AUDIOFREQ_22K
 ((
uöt32_t
)22050)

	)

217 
	#I2S_AUDIOFREQ_16K
 ((
uöt32_t
)16000)

	)

218 
	#I2S_AUDIOFREQ_11K
 ((
uöt32_t
)11025)

	)

219 
	#I2S_AUDIOFREQ_8K
 ((
uöt32_t
)8000)

	)

220 
	#I2S_AUDIOFREQ_DEFAULT
 ((
uöt32_t
)2)

	)

228 
	#I2S_FULLDUPLEXMODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

229 
	#I2S_FULLDUPLEXMODE_ENABLE
 ((
uöt32_t
)0x00000001)

	)

237 
	#I2S_CPOL_LOW
 ((
uöt32_t
)0x00000000)

	)

238 
	#I2S_CPOL_HIGH
 ((
uöt32_t
)
SPI_I2SCFGR_CKPOL
)

	)

246 
	#I2S_IT_TXE
 
SPI_CR2_TXEIE


	)

247 
	#I2S_IT_RXNE
 
SPI_CR2_RXNEIE


	)

248 
	#I2S_IT_ERR
 
SPI_CR2_ERRIE


	)

256 
	#I2S_FLAG_TXE
 
SPI_SR_TXE


	)

257 
	#I2S_FLAG_RXNE
 
SPI_SR_RXNE


	)

259 
	#I2S_FLAG_UDR
 
SPI_SR_UDR


	)

260 
	#I2S_FLAG_OVR
 
SPI_SR_OVR


	)

261 
	#I2S_FLAG_FRE
 
SPI_SR_FRE


	)

263 
	#I2S_FLAG_CHSIDE
 
SPI_SR_CHSIDE


	)

264 
	#I2S_FLAG_BSY
 
SPI_SR_BSY


	)

282 
	#__HAL_I2S_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_I2S_STATE_RESET
)

	)

288 
	#__HAL_I2S_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
)

	)

289 
	#__HAL_I2S_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
I2SCFGR
 &~
SPI_I2SCFGR_I2SE
)

	)

300 
	#__HAL_I2S_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR2
 |(__INTERRUPT__))

	)

301 
	#__HAL_I2S_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR2
 &~(__INTERRUPT__))

	)

313 
	#__HAL_I2S_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CR2
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

328 
	#__HAL_I2S_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((__HANDLE__)->
In°™˚
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

334 
	#__HAL_I2S_CLEAR_OVRFLAG
(
__HANDLE__
) \

336 
__IO
 
uöt32_t
 
tm¥eg
; \

337 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
DR
; \

338 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

339 
	`UNUSED
(
tm¥eg
); \

340 } 0)

	)

346 
	#__HAL_I2S_CLEAR_UDRFLAG
(
__HANDLE__
) \

348 
__IO
 
uöt32_t
 
tm¥eg
; \

349 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

350 
	`UNUSED
(
tm¥eg
); \

351 } 0)

	)

357 
	~"°m32f4xx_hÆ_i2s_ex.h
"

368 
HAL_SètusTy≥Def
 
HAL_I2S_Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
);

369 
HAL_SètusTy≥Def
 
HAL_I2S_DeInô
 (
I2S_H™dÀTy≥Def
 *
hi2s
);

370 
HAL_I2S_M•Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
);

371 
HAL_I2S_M•DeInô
(
I2S_H™dÀTy≥Def
 *
hi2s
);

381 
HAL_SètusTy≥Def
 
HAL_I2S_Tønsmô
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

382 
HAL_SètusTy≥Def
 
HAL_I2S_Re˚ive
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

385 
HAL_SètusTy≥Def
 
HAL_I2S_Tønsmô_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
);

386 
HAL_SètusTy≥Def
 
HAL_I2S_Re˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
);

387 
HAL_I2S_IRQH™dÀr
(
I2S_H™dÀTy≥Def
 *
hi2s
);

390 
HAL_SètusTy≥Def
 
HAL_I2S_Tønsmô_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
);

391 
HAL_SètusTy≥Def
 
HAL_I2S_Re˚ive_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
);

393 
HAL_SètusTy≥Def
 
HAL_I2S_DMAPau£
(
I2S_H™dÀTy≥Def
 *
hi2s
);

394 
HAL_SètusTy≥Def
 
HAL_I2S_DMAResume
(
I2S_H™dÀTy≥Def
 *
hi2s
);

395 
HAL_SètusTy≥Def
 
HAL_I2S_DMASt›
(
I2S_H™dÀTy≥Def
 *
hi2s
);

398 
HAL_I2S_SèãTy≥Def
 
HAL_I2S_GëSèã
(
I2S_H™dÀTy≥Def
 *
hi2s
);

399 
uöt32_t
 
HAL_I2S_GëEº‹
(
I2S_H™dÀTy≥Def
 *
hi2s
);

402 
HAL_I2S_TxHÆfC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

403 
HAL_I2S_TxC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

404 
HAL_I2S_RxHÆfC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

405 
HAL_I2S_RxC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

406 
HAL_I2S_Eº‹CÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
);

430 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_MODE_SLAVE_TX
) || \

431 ((
MODE
Ë=
I2S_MODE_SLAVE_RX
) || \

432 ((
MODE
Ë=
I2S_MODE_MASTER_TX
) || \

433 ((
MODE
Ë=
I2S_MODE_MASTER_RX
))

	)

435 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_STANDARD_PHILIPS
) || \

436 ((
STANDARD
Ë=
I2S_STANDARD_MSB
) || \

437 ((
STANDARD
Ë=
I2S_STANDARD_LSB
) || \

438 ((
STANDARD
Ë=
I2S_STANDARD_PCM_SHORT
) || \

439 ((
STANDARD
Ë=
I2S_STANDARD_PCM_LONG
))

	)

441 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_DATAFORMAT_16B
) || \

442 ((
FORMAT
Ë=
I2S_DATAFORMAT_16B_EXTENDED
) || \

443 ((
FORMAT
Ë=
I2S_DATAFORMAT_24B
) || \

444 ((
FORMAT
Ë=
I2S_DATAFORMAT_32B
))

	)

446 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOUTPUT_ENABLE
) || \

447 ((
OUTPUT
Ë=
I2S_MCLKOUTPUT_DISABLE
))

	)

449 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AUDIOFREQ_8K
) && \

450 ((
FREQ
Ë<
I2S_AUDIOFREQ_192K
)) || \

451 ((
FREQ
Ë=
I2S_AUDIOFREQ_DEFAULT
))

	)

453 
	#IS_I2S_FULLDUPLEX_MODE
(
MODE
Ë(((MODEË=
I2S_FULLDUPLEXMODE_DISABLE
) || \

454 ((
MODE
Ë=
I2S_FULLDUPLEXMODE_ENABLE
))

	)

456 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_LOW
) || \

457 ((
CPOL
Ë=
I2S_CPOL_HIGH
))

	)

467 
I2S_DMATxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

468 
I2S_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

469 
I2S_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

470 
I2S_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

471 
I2S_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

472 
HAL_SètusTy≥Def
 
I2S_WaôFœgSèãU¡ûTimeout
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt32_t
 
Fœg
, uöt32_à
Sètus
, uöt32_à
Timeout
);

473 
HAL_SètusTy≥Def
 
I2S_Tønsmô_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
);

474 
HAL_SètusTy≥Def
 
I2S_Re˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
);

487 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2s_ex.h

39 #i‚de‡
__STM32F4xx_HAL_I2S_EX_H


40 
	#__STM32F4xx_HAL_I2S_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

74 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

75 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

76 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469xx
) || \

77 
deföed
(
STM32F479xx
)

78 
	#I2S_CLOCK_PLL
 ((
uöt32_t
)0x00000000)

	)

79 
	#I2S_CLOCK_EXTERNAL
 ((
uöt32_t
)0x00000001)

	)

81 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F469xx
 || 
STM32F479xx
 */

83 #i‡
deföed
(
STM32F446xx
)

84 
	#I2S_CLOCK_PLL
 ((
uöt32_t
)0x00000000)

	)

85 
	#I2S_CLOCK_EXTERNAL
 ((
uöt32_t
)0x00000001)

	)

86 
	#I2S_CLOCK_PLLR
 ((
uöt32_t
)0x00000002)

	)

87 
	#I2S_CLOCK_PLLSRC
 ((
uöt32_t
)0x00000003)

	)

90 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

91 
	#I2S_CLOCK_PLLSRC
 ((
uöt32_t
)0x00000000)

	)

92 
	#I2S_CLOCK_EXTERNAL
 ((
uöt32_t
)0x00000001)

	)

93 
	#I2S_CLOCK_PLLR
 ((
uöt32_t
)0x00000002)

	)

123 
HAL_SètusTy≥Def
 
HAL_I2SEx_TønsmôRe˚ive
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pTxD©a
, uöt16_à*
pRxD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
);

125 
HAL_SètusTy≥Def
 
HAL_I2SEx_TønsmôRe˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pTxD©a
, uöt16_à*
pRxD©a
, uöt16_à
Size
);

127 
HAL_SètusTy≥Def
 
HAL_I2SEx_TønsmôRe˚ive_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pTxD©a
, uöt16_à*
pRxD©a
, uöt16_à
Size
);

149 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

150 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

151 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469xx
) || \

152 
deföed
(
STM32F479xx
)

153 
	#IS_I2S_CLOCKSOURCE
(
CLOCK
Ë(((CLOCKË=
I2S_CLOCK_EXTERNAL
) ||\

154 ((
CLOCK
Ë=
I2S_CLOCK_PLL
))

	)

156 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F469xx
 || 
STM32F479xx
 */

158 #i‡
deföed
(
STM32F446xx
)

159 
	#IS_I2S_CLOCKSOURCE
(
CLOCK
Ë(((CLOCKË=
I2S_CLOCK_EXTERNAL
) ||\

160 ((
CLOCK
Ë=
I2S_CLOCK_PLL
) ||\

161 ((
CLOCK
Ë=
I2S_CLOCK_PLLSRC
) ||\

162 ((
CLOCK
Ë=
I2S_CLOCK_PLLR
))

	)

165 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

166 
	#IS_I2S_CLOCKSOURCE
(
CLOCK
Ë(((CLOCKË=
I2S_CLOCK_EXTERNAL
) ||\

167 ((
CLOCK
Ë=
I2S_CLOCK_PLLSRC
) ||\

168 ((
CLOCK
Ë=
I2S_CLOCK_PLLR
))

	)

171 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

172 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

173 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
) || \

174 
deföed
(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

175 
	#I2SxEXT
(
__INSTANCE__
Ë((__INSTANCE__Ë=(
SPI2
)? (
SPI_Ty≥Def
 *)(
I2S2ext_BASE
): (SPI_Ty≥De‡*)(
I2S3ext_BASE
))

	)

177 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F410Cx
 || 
STM32F410Rx
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

187 
HAL_SètusTy≥Def
 
I2SEx_TønsmôRe˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
);

188 
uöt32_t
 
I2S_GëI≈utClock
(
I2S_H™dÀTy≥Def
 *
hi2s
);

201 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_irda.h

39 #i‚de‡
__STM32F4xx_HAL_IRDA_H


40 
	#__STM32F4xx_HAL_IRDA_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

66 
uöt32_t
 
BaudR©e
;

71 
uöt32_t
 
W‹dLígth
;

75 
uöt32_t
 
P¨ôy
;

82 
uöt32_t
 
Mode
;

85 
uöt8_t
 
PªsˇÀr
;

87 
uöt32_t
 
IrDAMode
;

89 }
	tIRDA_InôTy≥Def
;

96 
HAL_IRDA_STATE_RESET
 = 0x00,

97 
HAL_IRDA_STATE_READY
 = 0x01,

98 
HAL_IRDA_STATE_BUSY
 = 0x02,

99 
HAL_IRDA_STATE_BUSY_TX
 = 0x12,

100 
HAL_IRDA_STATE_BUSY_RX
 = 0x22,

101 
HAL_IRDA_STATE_BUSY_TX_RX
 = 0x32,

102 
HAL_IRDA_STATE_TIMEOUT
 = 0x03,

103 
HAL_IRDA_STATE_ERROR
 = 0x04

104 }
	tHAL_IRDA_SèãTy≥Def
;

111 
USART_Ty≥Def
 *
In°™˚
;

113 
IRDA_InôTy≥Def
 
Inô
;

115 
uöt8_t
 *
pTxBuffPå
;

117 
uöt16_t
 
TxX„rSize
;

119 
uöt16_t
 
TxX„rCou¡
;

121 
uöt8_t
 *
pRxBuffPå
;

123 
uöt16_t
 
RxX„rSize
;

125 
uöt16_t
 
RxX„rCou¡
;

127 
DMA_H™dÀTy≥Def
 *
hdm©x
;

129 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

131 
HAL_LockTy≥Def
 
Lock
;

133 
__IO
 
HAL_IRDA_SèãTy≥Def
 
Sèã
;

135 
__IO
 
uöt32_t
 
Eº‹Code
;

137 }
	tIRDA_H™dÀTy≥Def
;

150 
	#HAL_IRDA_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

151 
	#HAL_IRDA_ERROR_PE
 ((
uöt32_t
)0x00000001Ë

	)

152 
	#HAL_IRDA_ERROR_NE
 ((
uöt32_t
)0x00000002Ë

	)

153 
	#HAL_IRDA_ERROR_FE
 ((
uöt32_t
)0x00000004Ë

	)

154 
	#HAL_IRDA_ERROR_ORE
 ((
uöt32_t
)0x00000008Ë

	)

155 
	#HAL_IRDA_ERROR_DMA
 ((
uöt32_t
)0x00000010Ë

	)

163 
	#IRDA_WORDLENGTH_8B
 ((
uöt32_t
)0x00000000)

	)

164 
	#IRDA_WORDLENGTH_9B
 ((
uöt32_t
)
USART_CR1_M
)

	)

172 
	#IRDA_PARITY_NONE
 ((
uöt32_t
)0x00000000)

	)

173 
	#IRDA_PARITY_EVEN
 ((
uöt32_t
)
USART_CR1_PCE
)

	)

174 
	#IRDA_PARITY_ODD
 ((
uöt32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

182 
	#IRDA_MODE_RX
 ((
uöt32_t
)
USART_CR1_RE
)

	)

183 
	#IRDA_MODE_TX
 ((
uöt32_t
)
USART_CR1_TE
)

	)

184 
	#IRDA_MODE_TX_RX
 ((
uöt32_t
)(
USART_CR1_TE
 |
USART_CR1_RE
))

	)

192 
	#IRDA_POWERMODE_LOWPOWER
 ((
uöt32_t
)
USART_CR3_IRLP
)

	)

193 
	#IRDA_POWERMODE_NORMAL
 ((
uöt32_t
)0x00000000)

	)

203 
	#IRDA_FLAG_TXE
 ((
uöt32_t
)0x00000080)

	)

204 
	#IRDA_FLAG_TC
 ((
uöt32_t
)0x00000040)

	)

205 
	#IRDA_FLAG_RXNE
 ((
uöt32_t
)0x00000020)

	)

206 
	#IRDA_FLAG_IDLE
 ((
uöt32_t
)0x00000010)

	)

207 
	#IRDA_FLAG_ORE
 ((
uöt32_t
)0x00000008)

	)

208 
	#IRDA_FLAG_NE
 ((
uöt32_t
)0x00000004)

	)

209 
	#IRDA_FLAG_FE
 ((
uöt32_t
)0x00000002)

	)

210 
	#IRDA_FLAG_PE
 ((
uöt32_t
)0x00000001)

	)

224 
	#IRDA_IT_PE
 ((
uöt32_t
)(
IRDA_CR1_REG_INDEX
 << 28 | 
USART_CR1_PEIE
))

	)

225 
	#IRDA_IT_TXE
 ((
uöt32_t
)(
IRDA_CR1_REG_INDEX
 << 28 | 
USART_CR1_TXEIE
))

	)

226 
	#IRDA_IT_TC
 ((
uöt32_t
)(
IRDA_CR1_REG_INDEX
 << 28 | 
USART_CR1_TCIE
))

	)

227 
	#IRDA_IT_RXNE
 ((
uöt32_t
)(
IRDA_CR1_REG_INDEX
 << 28 | 
USART_CR1_RXNEIE
))

	)

228 
	#IRDA_IT_IDLE
 ((
uöt32_t
)(
IRDA_CR1_REG_INDEX
 << 28 | 
USART_CR1_IDLEIE
))

	)

230 
	#IRDA_IT_LBD
 ((
uöt32_t
)(
IRDA_CR2_REG_INDEX
 << 28 | 
USART_CR2_LBDIE
))

	)

232 
	#IRDA_IT_CTS
 ((
uöt32_t
)(
IRDA_CR3_REG_INDEX
 << 28 | 
USART_CR3_CTSIE
))

	)

233 
	#IRDA_IT_ERR
 ((
uöt32_t
)(
IRDA_CR3_REG_INDEX
 << 28 | 
USART_CR3_EIE
))

	)

253 
	#__HAL_IRDA_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_IRDA_STATE_RESET
)

	)

260 
	#__HAL_IRDA_FLUSH_DRREGISTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
DR
)

	)

278 
	#__HAL_IRDA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__FLAG__)Ë=(__FLAG__))

	)

300 
	#__HAL_IRDA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__FLAG__))

	)

308 
	#__HAL_IRDA_CLEAR_PEFLAG
(
__HANDLE__
) \

310 
__IO
 
uöt32_t
 
tm¥eg
; \

311 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

312 
	`UNUSED
(
tm¥eg
); \

313 } 0)

	)

321 
	#__HAL_IRDA_CLEAR_FEFLAG
(
__HANDLE__
Ë
	`__HAL_IRDA_CLEAR_PEFLAG
(__HANDLE__)

	)

329 
	#__HAL_IRDA_CLEAR_NEFLAG
(
__HANDLE__
Ë
	`__HAL_IRDA_CLEAR_PEFLAG
(__HANDLE__)

	)

337 
	#__HAL_IRDA_CLEAR_OREFLAG
(
__HANDLE__
Ë
	`__HAL_IRDA_CLEAR_PEFLAG
(__HANDLE__)

	)

345 
	#__HAL_IRDA_CLEAR_IDLEFLAG
(
__HANDLE__
Ë
	`__HAL_IRDA_CLEAR_PEFLAG
(__HANDLE__)

	)

361 
	#__HAL_IRDA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28Ë=1)? ((__HANDLE__)->
In°™˚
->
CR1
 |((__INTERRUPT__Ë& 
IRDA_IT_MASK
)): \

362 (((
__INTERRUPT__
Ë>> 28Ë=2)? ((
__HANDLE__
)->
In°™˚
->
CR2
 |((__INTERRUPT__Ë& 
IRDA_IT_MASK
)): \

363 ((
__HANDLE__
)->
In°™˚
->
CR3
 |((
__INTERRUPT__
Ë& 
IRDA_IT_MASK
)))

	)

364 
	#__HAL_IRDA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28Ë=1)? ((__HANDLE__)->
In°™˚
->
CR1
 &~((__INTERRUPT__Ë& 
IRDA_IT_MASK
)): \

365 (((
__INTERRUPT__
Ë>> 28Ë=2)? ((
__HANDLE__
)->
In°™˚
->
CR2
 &~((__INTERRUPT__Ë& 
IRDA_IT_MASK
)): \

366 ((
__HANDLE__
)->
In°™˚
->
CR3
 &~ ((
__INTERRUPT__
Ë& 
IRDA_IT_MASK
)))

	)

382 
	#__HAL_IRDA_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
Ë(((((__IT__Ë>> 28Ë=1)? (__HANDLE__)->
In°™˚
->
CR1
:(((((
uöt32_t
)(__IT__)) >> 28) == 2)? \

383 (
__HANDLE__
)->
In°™˚
->
CR2
 : (__HANDLE__)->In°™˚->
CR3
)Ë& (((
uöt32_t
)(
__IT__
)Ë& 
IRDA_IT_MASK
))

	)

389 
	#__HAL_IRDA_ONE_BIT_SAMPLE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
|
USART_CR3_ONEBIT
)

	)

395 
	#__HAL_IRDA_ONE_BIT_SAMPLE_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
))

	)

403 
	#__HAL_IRDA_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
USART_CR1_UE
)

	)

411 
	#__HAL_IRDA_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
USART_CR1_UE
)

	)

426 
HAL_SètusTy≥Def
 
HAL_IRDA_Inô
(
IRDA_H™dÀTy≥Def
 *
húda
);

427 
HAL_SètusTy≥Def
 
HAL_IRDA_DeInô
(
IRDA_H™dÀTy≥Def
 *
húda
);

428 
HAL_IRDA_M•Inô
(
IRDA_H™dÀTy≥Def
 *
húda
);

429 
HAL_IRDA_M•DeInô
(
IRDA_H™dÀTy≥Def
 *
húda
);

438 
HAL_SètusTy≥Def
 
HAL_IRDA_Tønsmô
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

439 
HAL_SètusTy≥Def
 
HAL_IRDA_Re˚ive
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

440 
HAL_SètusTy≥Def
 
HAL_IRDA_Tønsmô_IT
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

441 
HAL_SètusTy≥Def
 
HAL_IRDA_Re˚ive_IT
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

442 
HAL_SètusTy≥Def
 
HAL_IRDA_Tønsmô_DMA
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

443 
HAL_SètusTy≥Def
 
HAL_IRDA_Re˚ive_DMA
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

444 
HAL_SètusTy≥Def
 
HAL_IRDA_DMAPau£
(
IRDA_H™dÀTy≥Def
 *
húda
);

445 
HAL_SètusTy≥Def
 
HAL_IRDA_DMAResume
(
IRDA_H™dÀTy≥Def
 *
húda
);

446 
HAL_SètusTy≥Def
 
HAL_IRDA_DMASt›
(
IRDA_H™dÀTy≥Def
 *
húda
);

447 
HAL_IRDA_IRQH™dÀr
(
IRDA_H™dÀTy≥Def
 *
húda
);

448 
HAL_IRDA_TxC∂tCÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
);

449 
HAL_IRDA_RxC∂tCÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
);

450 
HAL_IRDA_TxHÆfC∂tCÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
);

451 
HAL_IRDA_RxHÆfC∂tCÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
);

452 
HAL_IRDA_Eº‹CÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
);

461 
HAL_IRDA_SèãTy≥Def
 
HAL_IRDA_GëSèã
(
IRDA_H™dÀTy≥Def
 *
húda
);

462 
uöt32_t
 
HAL_IRDA_GëEº‹
(
IRDA_H™dÀTy≥Def
 *
húda
);

481 
	#IRDA_IT_MASK
 ((
uöt32_t
Ë
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
 | 
USART_CR1_RXNEIE
 | \

482 
USART_CR1_IDLEIE
 | 
USART_CR2_LBDIE
 | 
USART_CR3_CTSIE
 | 
USART_CR3_EIE
 )

	)

485 
	#IRDA_CR1_REG_INDEX
 1

	)

486 
	#IRDA_CR2_REG_INDEX
 2

	)

487 
	#IRDA_CR3_REG_INDEX
 3

	)

496 
	#IS_IRDA_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
IRDA_WORDLENGTH_8B
) || \

497 ((
LENGTH
Ë=
IRDA_WORDLENGTH_9B
))

	)

498 
	#IS_IRDA_PARITY
(
PARITY
Ë(((PARITYË=
IRDA_PARITY_NONE
) || \

499 ((
PARITY
Ë=
IRDA_PARITY_EVEN
) || \

500 ((
PARITY
Ë=
IRDA_PARITY_ODD
))

	)

501 
	#IS_IRDA_MODE
(
MODE
Ë((((MODEË& (
uöt32_t
)0x0000FFF3Ë=0x00Ë&& ((MODEË!(uöt32_t)0x000000))

	)

502 
	#IS_IRDA_POWERMODE
(
MODE
Ë(((MODEË=
IRDA_POWERMODE_LOWPOWER
) || \

503 ((
MODE
Ë=
IRDA_POWERMODE_NORMAL
))

	)

504 
	#IS_IRDA_BAUDRATE
(
BAUDRATE
Ë((BAUDRATEË< 115201)

	)

506 
	#IRDA_DIV
(
_PCLK_
, 
_BAUD_
Ë(((_PCLK_)*25)/(4*(_BAUD_)))

	)

507 
	#IRDA_DIVMANT
(
_PCLK_
, 
_BAUD_
Ë(
	`IRDA_DIV
((_PCLK_), (_BAUD_))/100)

	)

508 
	#IRDA_DIVFRAQ
(
_PCLK_
, 
_BAUD_
Ë(((
	`IRDA_DIV
((_PCLK_), (_BAUD_)Ë- (
	`IRDA_DIVMANT
((_PCLK_), (_BAUD_)Ë* 100)Ë* 16 + 50Ë/ 100)

	)

509 
	#IRDA_BRR
(
_PCLK_
, 
_BAUD_
Ë((
	`IRDA_DIVMANT
((_PCLK_), (_BAUD_)Ë<< 4)|(
	`IRDA_DIVFRAQ
((_PCLK_), (_BAUD_)Ë& 0x0F))

	)

532 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_iwdg.h

39 #i‚de‡
__STM32F4xx_HAL_IWDG_H


40 
	#__STM32F4xx_HAL_IWDG_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
HAL_IWDG_STATE_RESET
 = 0x00,

68 
HAL_IWDG_STATE_READY
 = 0x01,

69 
HAL_IWDG_STATE_BUSY
 = 0x02,

70 
HAL_IWDG_STATE_TIMEOUT
 = 0x03,

71 
HAL_IWDG_STATE_ERROR
 = 0x04

72 }
	tHAL_IWDG_SèãTy≥Def
;

79 
uöt32_t
 
PªsˇÀr
;

82 
uöt32_t
 
Rñﬂd
;

84 }
	tIWDG_InôTy≥Def
;

91 
IWDG_Ty≥Def
 *
In°™˚
;

93 
IWDG_InôTy≥Def
 
Inô
;

95 
HAL_LockTy≥Def
 
Lock
;

97 
__IO
 
HAL_IWDG_SèãTy≥Def
 
Sèã
;

98 }
	tIWDG_H™dÀTy≥Def
;

115 
	#IWDG_KEY_RELOAD
 ((
uöt32_t
)0xAAAAË

	)

116 
	#IWDG_KEY_ENABLE
 ((
uöt32_t
)0xCCCCË

	)

117 
	#IWDG_KEY_WRITE_ACCESS_ENABLE
 ((
uöt32_t
)0x5555Ë

	)

118 
	#IWDG_KEY_WRITE_ACCESS_DISABLE
 ((
uöt32_t
)0x0000Ë

	)

126 
	#IWDG_FLAG_PVU
 ((
uöt32_t
)
IWDG_SR_PVU
Ë

	)

127 
	#IWDG_FLAG_RVU
 ((
uöt32_t
)
IWDG_SR_RVU
Ë

	)

135 
	#IWDG_PRESCALER_4
 ((
uöt8_t
)0x00Ë

	)

136 
	#IWDG_PRESCALER_8
 ((
uöt8_t
)(
IWDG_PR_PR_0
)Ë

	)

137 
	#IWDG_PRESCALER_16
 ((
uöt8_t
)(
IWDG_PR_PR_1
)Ë

	)

138 
	#IWDG_PRESCALER_32
 ((
uöt8_t
)(
IWDG_PR_PR_1
 | 
IWDG_PR_PR_0
)Ë

	)

139 
	#IWDG_PRESCALER_64
 ((
uöt8_t
)(
IWDG_PR_PR_2
)Ë

	)

140 
	#IWDG_PRESCALER_128
 ((
uöt8_t
)(
IWDG_PR_PR_2
 | 
IWDG_PR_PR_0
)Ë

	)

141 
	#IWDG_PRESCALER_256
 ((
uöt8_t
)(
IWDG_PR_PR_2
 | 
IWDG_PR_PR_1
)Ë

	)

159 
	#__HAL_IWDG_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_IWDG_STATE_RESET
)

	)

166 
	#__HAL_IWDG_START
(
__HANDLE__
Ë
	`WRITE_REG
((__HANDLE__)->
In°™˚
->
KR
, 
IWDG_KEY_ENABLE
)

	)

174 
	#__HAL_IWDG_RELOAD_COUNTER
(
__HANDLE__
Ë
	`WRITE_REG
((__HANDLE__)->
In°™˚
->
KR
, 
IWDG_KEY_RELOAD
)

	)

185 
	#__HAL_IWDG_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__FLAG__)Ë=(__FLAG__))

	)

200 
HAL_SètusTy≥Def
 
HAL_IWDG_Inô
(
IWDG_H™dÀTy≥Def
 *
hiwdg
);

201 
HAL_IWDG_M•Inô
(
IWDG_H™dÀTy≥Def
 *
hiwdg
);

210 
HAL_SètusTy≥Def
 
HAL_IWDG_Sèπ
(
IWDG_H™dÀTy≥Def
 *
hiwdg
);

211 
HAL_SètusTy≥Def
 
HAL_IWDG_Re‰esh
(
IWDG_H™dÀTy≥Def
 *
hiwdg
);

220 
HAL_IWDG_SèãTy≥Def
 
HAL_IWDG_GëSèã
(
IWDG_H™dÀTy≥Def
 *
hiwdg
);

240 
	#IWDG_ENABLE_WRITE_ACCESS
(
__HANDLE__
Ë
	`WRITE_REG
((__HANDLE__)->
In°™˚
->
KR
, 
IWDG_KEY_WRITE_ACCESS_ENABLE
)

	)

247 
	#IWDG_DISABLE_WRITE_ACCESS
(
__HANDLE__
Ë
	`WRITE_REG
((__HANDLE__)->
In°™˚
->
KR
, 
IWDG_KEY_WRITE_ACCESS_DISABLE
)

	)

250 
	#IS_IWDG_PRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
IWDG_PRESCALER_4
) || \

251 ((
__PRESCALER__
Ë=
IWDG_PRESCALER_8
) || \

252 ((
__PRESCALER__
Ë=
IWDG_PRESCALER_16
) || \

253 ((
__PRESCALER__
Ë=
IWDG_PRESCALER_32
) || \

254 ((
__PRESCALER__
Ë=
IWDG_PRESCALER_64
) || \

255 ((
__PRESCALER__
Ë=
IWDG_PRESCALER_128
)|| \

256 ((
__PRESCALER__
Ë=
IWDG_PRESCALER_256
))

	)

259 
	#IS_IWDG_RELOAD
(
__RELOAD__
Ë((__RELOAD__Ë<0xFFF)

	)

282 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_lptim.h

39 #i‚de‡
__STM32F4xx_HAL_LPTIM_H


40 
	#__STM32F4xx_HAL_LPTIM_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

48 
	~"°m32f4xx_hÆ_def.h
"

67 
	#LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
 ((
uöt32_t
)
EXTI_IMR_MR23
Ë

	)

77 
uöt32_t
 
Sour˚
;

80 
uöt32_t
 
PªsˇÀr
;

83 }
	tLPTIM_ClockC⁄figTy≥Def
;

90 
uöt32_t
 
	mPﬁ¨ôy
;

97 
uöt32_t
 
	mSam∂eTime
;

101 }
	tLPTIM_ULPClockC⁄figTy≥Def
;

108 
uöt32_t
 
	mSour˚
;

111 
uöt32_t
 
	mA˘iveEdge
;

115 
uöt32_t
 
	mSam∂eTime
;

118 }
	tLPTIM_TriggîC⁄figTy≥Def
;

125 
LPTIM_ClockC⁄figTy≥Def
 
	mClock
;

127 
LPTIM_ULPClockC⁄figTy≥Def
 
	mU…øLowPowîClock
;

129 
LPTIM_TriggîC⁄figTy≥Def
 
	mTriggî
;

131 
uöt32_t
 
	mOuçutPﬁ¨ôy
;

134 
uöt32_t
 
	mUpd©eMode
;

138 
uöt32_t
 
	mCou¡îSour˚
;

142 }
	tLPTIM_InôTy≥Def
;

147 
	e__HAL_LPTIM_SèãTy≥Def


149 
	mHAL_LPTIM_STATE_RESET
 = 0x00,

150 
	mHAL_LPTIM_STATE_READY
 = 0x01,

151 
	mHAL_LPTIM_STATE_BUSY
 = 0x02,

152 
	mHAL_LPTIM_STATE_TIMEOUT
 = 0x03,

153 
	mHAL_LPTIM_STATE_ERROR
 = 0x04

154 }
	tHAL_LPTIM_SèãTy≥Def
;

161 
LPTIM_Ty≥Def
 *
	mIn°™˚
;

163 
LPTIM_InôTy≥Def
 
	mInô
;

165 
HAL_SètusTy≥Def
 
	mSètus
;

167 
HAL_LockTy≥Def
 
	mLock
;

169 
__IO
 
HAL_LPTIM_SèãTy≥Def
 
	mSèã
;

171 }
	tLPTIM_H™dÀTy≥Def
;

185 
	#LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC
 ((
uöt32_t
)0x00)

	)

186 
	#LPTIM_CLOCKSOURCE_ULPTIM
 
LPTIM_CFGR_CKSEL


	)

194 
	#LPTIM_PRESCALER_DIV1
 ((
uöt32_t
)0x000000)

	)

195 
	#LPTIM_PRESCALER_DIV2
 
LPTIM_CFGR_PRESC_0


	)

196 
	#LPTIM_PRESCALER_DIV4
 
LPTIM_CFGR_PRESC_1


	)

197 
	#LPTIM_PRESCALER_DIV8
 ((
uöt32_t
)(
LPTIM_CFGR_PRESC_0
 | 
LPTIM_CFGR_PRESC_1
))

	)

198 
	#LPTIM_PRESCALER_DIV16
 
LPTIM_CFGR_PRESC_2


	)

199 
	#LPTIM_PRESCALER_DIV32
 ((
uöt32_t
)(
LPTIM_CFGR_PRESC_0
 | 
LPTIM_CFGR_PRESC_2
))

	)

200 
	#LPTIM_PRESCALER_DIV64
 ((
uöt32_t
)(
LPTIM_CFGR_PRESC_1
 | 
LPTIM_CFGR_PRESC_2
))

	)

201 
	#LPTIM_PRESCALER_DIV128
 ((
uöt32_t
)
LPTIM_CFGR_PRESC
)

	)

210 
	#LPTIM_OUTPUTPOLARITY_HIGH
 ((
uöt32_t
)0x00000000)

	)

211 
	#LPTIM_OUTPUTPOLARITY_LOW
 (
LPTIM_CFGR_WAVPOL
)

	)

219 
	#LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION
 ((
uöt32_t
)0x00000000)

	)

220 
	#LPTIM_CLOCKSAMPLETIME_2TRANSITIONS
 
LPTIM_CFGR_CKFLT_0


	)

221 
	#LPTIM_CLOCKSAMPLETIME_4TRANSITIONS
 
LPTIM_CFGR_CKFLT_1


	)

222 
	#LPTIM_CLOCKSAMPLETIME_8TRANSITIONS
 
LPTIM_CFGR_CKFLT


	)

231 
	#LPTIM_CLOCKPOLARITY_RISING
 ((
uöt32_t
)0x00000000)

	)

232 
	#LPTIM_CLOCKPOLARITY_FALLING
 
LPTIM_CFGR_CKPOL_0


	)

233 
	#LPTIM_CLOCKPOLARITY_RISING_FALLING
 
LPTIM_CFGR_CKPOL_1


	)

241 
	#LPTIM_TRIGSOURCE_SOFTWARE
 ((
uöt32_t
)0x0000FFFF)

	)

242 
	#LPTIM_TRIGSOURCE_0
 ((
uöt32_t
)0x00000000)

	)

243 
	#LPTIM_TRIGSOURCE_1
 ((
uöt32_t
)
LPTIM_CFGR_TRIGSEL_0
)

	)

244 
	#LPTIM_TRIGSOURCE_2
 
LPTIM_CFGR_TRIGSEL_1


	)

245 
	#LPTIM_TRIGSOURCE_3
 ((
uöt32_t
)
LPTIM_CFGR_TRIGSEL_0
 | 
LPTIM_CFGR_TRIGSEL_1
)

	)

246 
	#LPTIM_TRIGSOURCE_4
 
LPTIM_CFGR_TRIGSEL_2


	)

247 
	#LPTIM_TRIGSOURCE_5
 ((
uöt32_t
)
LPTIM_CFGR_TRIGSEL_0
 | 
LPTIM_CFGR_TRIGSEL_2
)

	)

255 
	#LPTIM_ACTIVEEDGE_RISING
 
LPTIM_CFGR_TRIGEN_0


	)

256 
	#LPTIM_ACTIVEEDGE_FALLING
 
LPTIM_CFGR_TRIGEN_1


	)

257 
	#LPTIM_ACTIVEEDGE_RISING_FALLING
 
LPTIM_CFGR_TRIGEN


	)

265 
	#LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION
 ((
uöt32_t
)0x00000000)

	)

266 
	#LPTIM_TRIGSAMPLETIME_2TRANSITIONS
 
LPTIM_CFGR_TRGFLT_0


	)

267 
	#LPTIM_TRIGSAMPLETIME_4TRANSITIONS
 
LPTIM_CFGR_TRGFLT_1


	)

268 
	#LPTIM_TRIGSAMPLETIME_8TRANSITIONS
 
LPTIM_CFGR_TRGFLT


	)

277 
	#LPTIM_UPDATE_IMMEDIATE
 ((
uöt32_t
)0x00000000)

	)

278 
	#LPTIM_UPDATE_ENDOFPERIOD
 
LPTIM_CFGR_PRELOAD


	)

287 
	#LPTIM_COUNTERSOURCE_INTERNAL
 ((
uöt32_t
)0x00000000)

	)

288 
	#LPTIM_COUNTERSOURCE_EXTERNAL
 
LPTIM_CFGR_COUNTMODE


	)

297 
	#LPTIM_FLAG_DOWN
 
LPTIM_ISR_DOWN


	)

298 
	#LPTIM_FLAG_UP
 
LPTIM_ISR_UP


	)

299 
	#LPTIM_FLAG_ARROK
 
LPTIM_ISR_ARROK


	)

300 
	#LPTIM_FLAG_CMPOK
 
LPTIM_ISR_CMPOK


	)

301 
	#LPTIM_FLAG_EXTTRIG
 
LPTIM_ISR_EXTTRIG


	)

302 
	#LPTIM_FLAG_ARRM
 
LPTIM_ISR_ARRM


	)

303 
	#LPTIM_FLAG_CMPM
 
LPTIM_ISR_CMPM


	)

312 
	#LPTIM_IT_DOWN
 
LPTIM_IER_DOWNIE


	)

313 
	#LPTIM_IT_UP
 
LPTIM_IER_UPIE


	)

314 
	#LPTIM_IT_ARROK
 
LPTIM_IER_ARROKIE


	)

315 
	#LPTIM_IT_CMPOK
 
LPTIM_IER_CMPOKIE


	)

316 
	#LPTIM_IT_EXTTRIG
 
LPTIM_IER_EXTTRIGIE


	)

317 
	#LPTIM_IT_ARRM
 
LPTIM_IER_ARRMIE


	)

318 
	#LPTIM_IT_CMPM
 
LPTIM_IER_CMPMIE


	)

326 
	#LPTIM_OP_PAD_AF
 ((
uöt32_t
)0x00000000)

	)

327 
	#LPTIM_OP_PAD_PA4
 
LPTIM_OR_OR_0


	)

328 
	#LPTIM_OP_PAD_PB9
 
LPTIM_OR_OR_1


	)

329 
	#LPTIM_OP_TIM_DAC
 
LPTIM_OR_OR


	)

348 
	#__HAL_LPTIM_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_LPTIM_STATE_RESET
)

	)

355 
	#__HAL_LPTIM_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
LPTIM_CR_ENABLE
))

	)

356 
	#__HAL_LPTIM_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
LPTIM_CR_ENABLE
))

	)

363 
	#__HAL_LPTIM_START_CONTINUOUS
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
LPTIM_CR_CNTSTRT
)

	)

364 
	#__HAL_LPTIM_START_SINGLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
LPTIM_CR_SNGSTRT
)

	)

373 
	#__HAL_LPTIM_AUTORELOAD_SET
(
__HANDLE__
 , 
__VALUE__
Ë((__HANDLE__)->
In°™˚
->
ARR
 = (__VALUE__))

	)

381 
	#__HAL_LPTIM_COMPARE_SET
(
__HANDLE__
 , 
__VALUE__
Ë((__HANDLE__)->
In°™˚
->
CMP
 = (__VALUE__))

	)

397 
	#__HAL_LPTIM_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
ISR
 &(__FLAG__)Ë=(__FLAG__))

	)

413 
	#__HAL_LPTIM_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ICR
 = (__FLAG__))

	)

429 
	#__HAL_LPTIM_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 |(__INTERRUPT__))

	)

445 
	#__HAL_LPTIM_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 &(~(__INTERRUPT__)))

	)

462 
	#__HAL_LPTIM_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
IER
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

473 
	#__HAL_LPTIM_OPTR_CONFIG
(
__HANDLE__
 , 
__VALUE__
Ë((__HANDLE__)->
In°™˚
->
OR
 = (__VALUE__))

	)

479 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT
(Ë(
EXTI
->
IMR
 |
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

485 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT
(Ë(
EXTI
->
IMR
 &~(
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
))

	)

491 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_EVENT
(Ë(
EXTI
->
EMR
 |
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

497 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_EVENT
(Ë(
EXTI
->
EMR
 &~(
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
))

	)

503 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_FALLING_EDGE
(Ë(
EXTI
->
FTSR
 |
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

509 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_FALLING_EDGE
(Ë(
EXTI
->
FTSR
 &~(
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
))

	)

515 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE
(Ë(
EXTI
->
RTSR
 |
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

521 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_RISING_EDGE
(Ë(
EXTI
->
RTSR
 &~(
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
))

	)

527 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_FALLING_EDGE
();

	)

534 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_FALLING_EDGE
();

	)

540 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & 
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

546 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = 
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

552 
	#__HAL_LPTIM_WAKEUPTIMER_EXTI_GENERATE_SWIT
(Ë(
EXTI
->
SWIER
 |
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

563 
HAL_SètusTy≥Def
 
HAL_LPTIM_Inô
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

564 
HAL_SètusTy≥Def
 
HAL_LPTIM_DeInô
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

567 
HAL_LPTIM_M•Inô
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

568 
HAL_LPTIM_M•DeInô
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

573 
HAL_SètusTy≥Def
 
HAL_LPTIM_PWM_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
);

574 
HAL_SètusTy≥Def
 
HAL_LPTIM_PWM_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

576 
HAL_SètusTy≥Def
 
HAL_LPTIM_PWM_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
);

577 
HAL_SètusTy≥Def
 
HAL_LPTIM_PWM_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

581 
HAL_SètusTy≥Def
 
HAL_LPTIM_O√Pul£_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
);

582 
HAL_SètusTy≥Def
 
HAL_LPTIM_O√Pul£_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

584 
HAL_SètusTy≥Def
 
HAL_LPTIM_O√Pul£_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
);

585 
HAL_SètusTy≥Def
 
HAL_LPTIM_O√Pul£_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

589 
HAL_SètusTy≥Def
 
HAL_LPTIM_SëOn˚_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
);

590 
HAL_SètusTy≥Def
 
HAL_LPTIM_SëOn˚_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

592 
HAL_SètusTy≥Def
 
HAL_LPTIM_SëOn˚_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
);

593 
HAL_SètusTy≥Def
 
HAL_LPTIM_SëOn˚_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

597 
HAL_SètusTy≥Def
 
HAL_LPTIM_Encodî_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
);

598 
HAL_SètusTy≥Def
 
HAL_LPTIM_Encodî_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

600 
HAL_SètusTy≥Def
 
HAL_LPTIM_Encodî_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
);

601 
HAL_SètusTy≥Def
 
HAL_LPTIM_Encodî_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

605 
HAL_SètusTy≥Def
 
HAL_LPTIM_TimeOut_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Timeout
);

606 
HAL_SètusTy≥Def
 
HAL_LPTIM_TimeOut_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

608 
HAL_SètusTy≥Def
 
HAL_LPTIM_TimeOut_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Timeout
);

609 
HAL_SètusTy≥Def
 
HAL_LPTIM_TimeOut_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

613 
HAL_SètusTy≥Def
 
HAL_LPTIM_Cou¡î_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
);

614 
HAL_SètusTy≥Def
 
HAL_LPTIM_Cou¡î_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

616 
HAL_SètusTy≥Def
 
HAL_LPTIM_Cou¡î_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
);

617 
HAL_SètusTy≥Def
 
HAL_LPTIM_Cou¡î_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

620 
uöt32_t
 
HAL_LPTIM_RódCou¡î
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

621 
uöt32_t
 
HAL_LPTIM_RódAutoRñﬂd
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

622 
uöt32_t
 
HAL_LPTIM_RódCom∑ª
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

625 
HAL_LPTIM_IRQH™dÀr
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

628 
HAL_LPTIM_Com∑ªM©chCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

629 
HAL_LPTIM_AutoRñﬂdM©chCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

630 
HAL_LPTIM_TriggîCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

631 
HAL_LPTIM_Com∑ªWrôeCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

632 
HAL_LPTIM_AutoRñﬂdWrôeCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

633 
HAL_LPTIM_Dúe˘i⁄UpCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

634 
HAL_LPTIM_Dúe˘i⁄DownCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

637 
HAL_LPTIM_SèãTy≥Def
 
HAL_LPTIM_GëSèã
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
);

675 
	#IS_LPTIM_CLOCK_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
LPTIM_CLOCKSOURCE_ULPTIM
) || \

676 ((
__SOURCE__
Ë=
LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC
))

	)

678 
	#IS_LPTIM_CLOCK_PRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
LPTIM_PRESCALER_DIV1
 ) || \

679 ((
__PRESCALER__
Ë=
LPTIM_PRESCALER_DIV2
 ) || \

680 ((
__PRESCALER__
Ë=
LPTIM_PRESCALER_DIV4
 ) || \

681 ((
__PRESCALER__
Ë=
LPTIM_PRESCALER_DIV8
 ) || \

682 ((
__PRESCALER__
Ë=
LPTIM_PRESCALER_DIV16
 ) || \

683 ((
__PRESCALER__
Ë=
LPTIM_PRESCALER_DIV32
 ) || \

684 ((
__PRESCALER__
Ë=
LPTIM_PRESCALER_DIV64
 ) || \

685 ((
__PRESCALER__
Ë=
LPTIM_PRESCALER_DIV128
))

	)

686 
	#IS_LPTIM_CLOCK_PRESCALERDIV1
(
__PRESCALER__
Ë((__PRESCALER__Ë=
LPTIM_PRESCALER_DIV1
)

	)

688 
	#IS_LPTIM_OUTPUT_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
LPTIM_OUTPUTPOLARITY_LOW
 ) || \

689 ((
__POLARITY__
Ë=
LPTIM_OUTPUTPOLARITY_HIGH
))

	)

691 
	#IS_LPTIM_CLOCK_SAMPLE_TIME
(
__SAMPLETIME__
Ë(((__SAMPLETIME__Ë=
LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION
) || \

692 ((
__SAMPLETIME__
Ë=
LPTIM_CLOCKSAMPLETIME_2TRANSITIONS
) || \

693 ((
__SAMPLETIME__
Ë=
LPTIM_CLOCKSAMPLETIME_4TRANSITIONS
) || \

694 ((
__SAMPLETIME__
Ë=
LPTIM_CLOCKSAMPLETIME_8TRANSITIONS
))

	)

696 
	#IS_LPTIM_CLOCK_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
LPTIM_CLOCKPOLARITY_RISING
) || \

697 ((
__POLARITY__
Ë=
LPTIM_CLOCKPOLARITY_FALLING
) || \

698 ((
__POLARITY__
Ë=
LPTIM_CLOCKPOLARITY_RISING_FALLING
))

	)

700 
	#IS_LPTIM_TRG_SOURCE
(
__TRIG__
Ë(((__TRIG__Ë=
LPTIM_TRIGSOURCE_SOFTWARE
) || \

701 ((
__TRIG__
Ë=
LPTIM_TRIGSOURCE_0
) || \

702 ((
__TRIG__
Ë=
LPTIM_TRIGSOURCE_1
) || \

703 ((
__TRIG__
Ë=
LPTIM_TRIGSOURCE_2
) || \

704 ((
__TRIG__
Ë=
LPTIM_TRIGSOURCE_3
) || \

705 ((
__TRIG__
Ë=
LPTIM_TRIGSOURCE_4
) || \

706 ((
__TRIG__
Ë=
LPTIM_TRIGSOURCE_5
))

	)

708 
	#IS_LPTIM_EXT_TRG_POLARITY
(
__POLAR__
Ë(((__POLAR__Ë=
LPTIM_ACTIVEEDGE_RISING
 ) || \

709 ((
__POLAR__
Ë=
LPTIM_ACTIVEEDGE_FALLING
 ) || \

710 ((
__POLAR__
Ë=
LPTIM_ACTIVEEDGE_RISING_FALLING
 ))

	)

712 
	#IS_LPTIM_TRIG_SAMPLE_TIME
(
__SAMPLETIME__
Ë(((__SAMPLETIME__Ë=
LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION
) || \

713 ((
__SAMPLETIME__
Ë=
LPTIM_TRIGSAMPLETIME_2TRANSITIONS
 ) || \

714 ((
__SAMPLETIME__
Ë=
LPTIM_TRIGSAMPLETIME_4TRANSITIONS
 ) || \

715 ((
__SAMPLETIME__
Ë=
LPTIM_TRIGSAMPLETIME_8TRANSITIONS
 ))

	)

717 
	#IS_LPTIM_UPDATE_MODE
(
__MODE__
Ë(((__MODE__Ë=
LPTIM_UPDATE_IMMEDIATE
) || \

718 ((
__MODE__
Ë=
LPTIM_UPDATE_ENDOFPERIOD
))

	)

720 
	#IS_LPTIM_COUNTER_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
LPTIM_COUNTERSOURCE_INTERNAL
) || \

721 ((
__SOURCE__
Ë=
LPTIM_COUNTERSOURCE_EXTERNAL
))

	)

723 
	#IS_LPTIM_AUTORELOAD
(
__AUTORELOAD__
Ë((__AUTORELOAD__Ë<0x0000FFFF)

	)

725 
	#IS_LPTIM_COMPARE
(
__COMPARE__
Ë((__COMPARE__Ë<0x0000FFFF)

	)

727 
	#IS_LPTIM_PERIOD
(
PERIOD
Ë((PERIODË<0x0000FFFF)

	)

729 
	#IS_LPTIM_PULSE
(
PULSE
Ë((PULSEË<0x0000FFFF)

	)

753 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_ltdc.h

39 #i‚de‡
__STM32F4xx_HAL_LTDC_H


40 
	#__STM32F4xx_HAL_LTDC_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

63 
	#MAX_LAYER
 2

	)

70 
uöt8_t
 
Blue
;

73 
uöt8_t
 
Gªí
;

76 
uöt8_t
 
Red
;

79 
uöt8_t
 
Re£rved
;

80 } 
	tLTDC_Cﬁ‹Ty≥Def
;

87 
uöt32_t
 
	mHSPﬁ¨ôy
;

90 
uöt32_t
 
	mVSPﬁ¨ôy
;

93 
uöt32_t
 
	mDEPﬁ¨ôy
;

96 
uöt32_t
 
	mPCPﬁ¨ôy
;

99 
uöt32_t
 
	mH‹iz⁄èlSync
;

102 
uöt32_t
 
	mVîtiˇlSync
;

105 
uöt32_t
 
	mAccumuœãdHBP
;

108 
uöt32_t
 
	mAccumuœãdVBP
;

111 
uöt32_t
 
	mAccumuœãdA˘iveW
;

114 
uöt32_t
 
	mAccumuœãdA˘iveH
;

117 
uöt32_t
 
	mTŸÆWidth
;

120 
uöt32_t
 
	mTŸÆHeigh
;

123 
LTDC_Cﬁ‹Ty≥Def
 
	mBackcﬁ‹
;

124 } 
	tLTDC_InôTy≥Def
;

131 
uöt32_t
 
	mWödowX0
;

134 
uöt32_t
 
	mWödowX1
;

137 
uöt32_t
 
	mWödowY0
;

140 
uöt32_t
 
	mWödowY1
;

143 
uöt32_t
 
	mPixñF‹m©
;

146 
uöt32_t
 
	mAÕha
;

149 
uöt32_t
 
	mAÕha0
;

152 
uöt32_t
 
	mBÀndögFa˘‹1
;

155 
uöt32_t
 
	mBÀndögFa˘‹2
;

158 
uöt32_t
 
	mFBSèπAdªss
;

160 
uöt32_t
 
	mImageWidth
;

163 
uöt32_t
 
	mImageHeight
;

166 
LTDC_Cﬁ‹Ty≥Def
 
	mBackcﬁ‹
;

167 } 
	tLTDC_LayîCfgTy≥Def
;

174 
	mHAL_LTDC_STATE_RESET
 = 0x00,

175 
	mHAL_LTDC_STATE_READY
 = 0x01,

176 
	mHAL_LTDC_STATE_BUSY
 = 0x02,

177 
	mHAL_LTDC_STATE_TIMEOUT
 = 0x03,

178 
	mHAL_LTDC_STATE_ERROR
 = 0x04

179 }
	tHAL_LTDC_SèãTy≥Def
;

186 
LTDC_Ty≥Def
 *
	mIn°™˚
;

188 
LTDC_InôTy≥Def
 
	mInô
;

190 
LTDC_LayîCfgTy≥Def
 
	mLayîCfg
[
MAX_LAYER
];

192 
HAL_LockTy≥Def
 
	mLock
;

194 
__IO
 
HAL_LTDC_SèãTy≥Def
 
	mSèã
;

196 
__IO
 
uöt32_t
 
	mEº‹Code
;

198 } 
	tLTDC_H™dÀTy≥Def
;

211 
	#HAL_LTDC_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

212 
	#HAL_LTDC_ERROR_TE
 ((
uöt32_t
)0x00000001Ë

	)

213 
	#HAL_LTDC_ERROR_FU
 ((
uöt32_t
)0x00000002Ë

	)

214 
	#HAL_LTDC_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000020Ë

	)

222 
	#LTDC_HSPOLARITY_AL
 ((
uöt32_t
)0x00000000Ë

	)

223 
	#LTDC_HSPOLARITY_AH
 
LTDC_GCR_HSPOL


	)

231 
	#LTDC_VSPOLARITY_AL
 ((
uöt32_t
)0x00000000Ë

	)

232 
	#LTDC_VSPOLARITY_AH
 
LTDC_GCR_VSPOL


	)

240 
	#LTDC_DEPOLARITY_AL
 ((
uöt32_t
)0x00000000Ë

	)

241 
	#LTDC_DEPOLARITY_AH
 
LTDC_GCR_DEPOL


	)

249 
	#LTDC_PCPOLARITY_IPC
 ((
uöt32_t
)0x00000000Ë

	)

250 
	#LTDC_PCPOLARITY_IIPC
 
LTDC_GCR_PCPOL


	)

258 
	#LTDC_HORIZONTALSYNC
 (
LTDC_SSCR_HSW
 >> 16Ë

	)

259 
	#LTDC_VERTICALSYNC
 
LTDC_SSCR_VSH


	)

267 
	#LTDC_COLOR
 ((
uöt32_t
)0x000000FFË

	)

275 
	#LTDC_BLENDING_FACTOR1_CA
 ((
uöt32_t
)0x00000400Ë

	)

276 
	#LTDC_BLENDING_FACTOR1_PAxCA
 ((
uöt32_t
)0x00000600Ë

	)

284 
	#LTDC_BLENDING_FACTOR2_CA
 ((
uöt32_t
)0x00000005Ë

	)

285 
	#LTDC_BLENDING_FACTOR2_PAxCA
 ((
uöt32_t
)0x00000007Ë

	)

293 
	#LTDC_PIXEL_FORMAT_ARGB8888
 ((
uöt32_t
)0x00000000Ë

	)

294 
	#LTDC_PIXEL_FORMAT_RGB888
 ((
uöt32_t
)0x00000001Ë

	)

295 
	#LTDC_PIXEL_FORMAT_RGB565
 ((
uöt32_t
)0x00000002Ë

	)

296 
	#LTDC_PIXEL_FORMAT_ARGB1555
 ((
uöt32_t
)0x00000003Ë

	)

297 
	#LTDC_PIXEL_FORMAT_ARGB4444
 ((
uöt32_t
)0x00000004Ë

	)

298 
	#LTDC_PIXEL_FORMAT_L8
 ((
uöt32_t
)0x00000005Ë

	)

299 
	#LTDC_PIXEL_FORMAT_AL44
 ((
uöt32_t
)0x00000006Ë

	)

300 
	#LTDC_PIXEL_FORMAT_AL88
 ((
uöt32_t
)0x00000007Ë

	)

308 
	#LTDC_ALPHA
 
LTDC_LxCACR_CONSTA


	)

316 
	#LTDC_STOPPOSITION
 (
LTDC_LxWHPCR_WHSPPOS
 >> 16Ë

	)

317 
	#LTDC_STARTPOSITION
 
LTDC_LxWHPCR_WHSTPOS


	)

319 
	#LTDC_COLOR_FRAME_BUFFER
 
LTDC_LxCFBLR_CFBLL


	)

320 
	#LTDC_LINE_NUMBER
 
LTDC_LxCFBLNR_CFBLNBR


	)

328 
	#LTDC_IT_LI
 
LTDC_IER_LIE


	)

329 
	#LTDC_IT_FU
 
LTDC_IER_FUIE


	)

330 
	#LTDC_IT_TE
 
LTDC_IER_TERRIE


	)

331 
	#LTDC_IT_RR
 
LTDC_IER_RRIE


	)

339 
	#LTDC_FLAG_LI
 
LTDC_ISR_LIF


	)

340 
	#LTDC_FLAG_FU
 
LTDC_ISR_FUIF


	)

341 
	#LTDC_FLAG_TE
 
LTDC_ISR_TERRIF


	)

342 
	#LTDC_FLAG_RR
 
LTDC_ISR_RRIF


	)

360 
	#__HAL_LTDC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_LTDC_STATE_RESET
)

	)

367 
	#__HAL_LTDC_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
GCR
 |
LTDC_GCR_LTDCEN
)

	)

374 
	#__HAL_LTDC_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
GCR
 &~(
LTDC_GCR_LTDCEN
))

	)

383 
	#__HAL_LTDC_LAYER_ENABLE
(
__HANDLE__
, 
__LAYER__
Ë((
	`LTDC_LAYER
((__HANDLE__), (__LAYER__)))->
CR
 |(
uöt32_t
)
LTDC_LxCR_LEN
)

	)

392 
	#__HAL_LTDC_LAYER_DISABLE
(
__HANDLE__
, 
__LAYER__
Ë((
	`LTDC_LAYER
((__HANDLE__), (__LAYER__)))->
CR
 &~(
uöt32_t
)
LTDC_LxCR_LEN
)

	)

399 
	#__HAL_LTDC_RELOAD_CONFIG
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
SRCR
 |
LTDC_SRCR_IMR
)

	)

413 
	#__HAL_LTDC_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ISR
 & (__FLAG__))

	)

426 
	#__HAL_LTDC_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ICR
 = (__FLAG__))

	)

439 
	#__HAL_LTDC_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 |(__INTERRUPT__))

	)

452 
	#__HAL_LTDC_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IER
 &~(__INTERRUPT__))

	)

465 
	#__HAL_LTDC_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
ISR
 & (__INTERRUPT__))

	)

471 
	~"°m32f4xx_hÆ_…dc_ex.h
"

481 
HAL_SètusTy≥Def
 
HAL_LTDC_Inô
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

482 
HAL_SètusTy≥Def
 
HAL_LTDC_DeInô
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

483 
HAL_LTDC_M•Inô
(
LTDC_H™dÀTy≥Def
* 
h…dc
);

484 
HAL_LTDC_M•DeInô
(
LTDC_H™dÀTy≥Def
* 
h…dc
);

485 
HAL_LTDC_Eº‹CÆlback
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

486 
HAL_LTDC_LöeEvítCÆlback
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

495 
HAL_LTDC_IRQH™dÀr
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

504 
HAL_SètusTy≥Def
 
HAL_LTDC_C⁄figLayî
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
, 
uöt32_t
 
LayîIdx
);

505 
HAL_SètusTy≥Def
 
HAL_LTDC_SëWödowSize
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
XSize
, uöt32_à
YSize
, uöt32_à
LayîIdx
);

506 
HAL_SètusTy≥Def
 
HAL_LTDC_SëWödowPosôi⁄
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
X0
, uöt32_à
Y0
, uöt32_à
LayîIdx
);

507 
HAL_SètusTy≥Def
 
HAL_LTDC_SëPixñF‹m©
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
Pixñf‹m©
, uöt32_à
LayîIdx
);

508 
HAL_SètusTy≥Def
 
HAL_LTDC_SëAÕha
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
AÕha
, uöt32_à
LayîIdx
);

509 
HAL_SètusTy≥Def
 
HAL_LTDC_SëAddªss
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
Addªss
, uöt32_à
LayîIdx
);

510 
HAL_SètusTy≥Def
 
HAL_LTDC_SëPôch
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LöePôchInPixñs
, uöt32_à
LayîIdx
);

511 
HAL_SètusTy≥Def
 
HAL_LTDC_C⁄figCﬁ‹Keyög
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
RGBVÆue
, uöt32_à
LayîIdx
);

512 
HAL_SètusTy≥Def
 
HAL_LTDC_C⁄figCLUT
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 *
pCLUT
, uöt32_à
CLUTSize
, uöt32_à
LayîIdx
);

513 
HAL_SètusTy≥Def
 
HAL_LTDC_E«bÀCﬁ‹Keyög
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LayîIdx
);

514 
HAL_SètusTy≥Def
 
HAL_LTDC_DißbÀCﬁ‹Keyög
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LayîIdx
);

515 
HAL_SètusTy≥Def
 
HAL_LTDC_E«bÀCLUT
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LayîIdx
);

516 
HAL_SètusTy≥Def
 
HAL_LTDC_DißbÀCLUT
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LayîIdx
);

517 
HAL_SètusTy≥Def
 
HAL_LTDC_ProgømLöeEvít
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
Löe
);

518 
HAL_SètusTy≥Def
 
HAL_LTDC_E«bÀDôhî
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

519 
HAL_SètusTy≥Def
 
HAL_LTDC_DißbÀDôhî
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

528 
HAL_LTDC_SèãTy≥Def
 
HAL_LTDC_GëSèã
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

529 
uöt32_t
 
HAL_LTDC_GëEº‹
(
LTDC_H™dÀTy≥Def
 *
h…dc
);

568 
	#LTDC_LAYER
(
__HANDLE__
, 
__LAYER__
Ë((
LTDC_Layî_Ty≥Def
 *)((
uöt32_t
)(((uöt32_t)((__HANDLE__)->
In°™˚
)Ë+ 0x84 + (0x80*(__LAYER__)))))

	)

569 
	#IS_LTDC_LAYER
(
LAYER
Ë((LAYERË<
MAX_LAYER
)

	)

570 
	#IS_LTDC_HSPOL
(
HSPOL
Ë(((HSPOLË=
LTDC_HSPOLARITY_AL
) || \

571 ((
HSPOL
Ë=
LTDC_HSPOLARITY_AH
))

	)

572 
	#IS_LTDC_VSPOL
(
VSPOL
Ë(((VSPOLË=
LTDC_VSPOLARITY_AL
) || \

573 ((
VSPOL
Ë=
LTDC_VSPOLARITY_AH
))

	)

574 
	#IS_LTDC_DEPOL
(
DEPOL
Ë(((DEPOLË=
LTDC_DEPOLARITY_AL
) || \

575 ((
DEPOL
Ë=
LTDC_DEPOLARITY_AH
))

	)

576 
	#IS_LTDC_PCPOL
(
PCPOL
Ë(((PCPOLË=
LTDC_PCPOLARITY_IPC
) || \

577 ((
PCPOL
Ë=
LTDC_PCPOLARITY_IIPC
))

	)

578 
	#IS_LTDC_HSYNC
(
HSYNC
Ë((HSYNCË<
LTDC_HORIZONTALSYNC
)

	)

579 
	#IS_LTDC_VSYNC
(
VSYNC
Ë((VSYNCË<
LTDC_VERTICALSYNC
)

	)

580 
	#IS_LTDC_AHBP
(
AHBP
Ë((AHBPË<
LTDC_HORIZONTALSYNC
)

	)

581 
	#IS_LTDC_AVBP
(
AVBP
Ë((AVBPË<
LTDC_VERTICALSYNC
)

	)

582 
	#IS_LTDC_AAW
(
AAW
Ë((AAWË<
LTDC_HORIZONTALSYNC
)

	)

583 
	#IS_LTDC_AAH
(
AAH
Ë((AAHË<
LTDC_VERTICALSYNC
)

	)

584 
	#IS_LTDC_TOTALW
(
TOTALW
Ë((TOTALWË<
LTDC_HORIZONTALSYNC
)

	)

585 
	#IS_LTDC_TOTALH
(
TOTALH
Ë((TOTALHË<
LTDC_VERTICALSYNC
)

	)

586 
	#IS_LTDC_BLUEVALUE
(
BBLUE
Ë((BBLUEË<
LTDC_COLOR
)

	)

587 
	#IS_LTDC_GREENVALUE
(
BGREEN
Ë((BGREENË<
LTDC_COLOR
)

	)

588 
	#IS_LTDC_REDVALUE
(
BRED
Ë((BREDË<
LTDC_COLOR
)

	)

589 
	#IS_LTDC_BLENDING_FACTOR1
(
BÀndögFa˘‹1
Ë(((BÀndögFa˘‹1Ë=
LTDC_BLENDING_FACTOR1_CA
) || \

590 ((
BÀndögFa˘‹1
Ë=
LTDC_BLENDING_FACTOR1_PAxCA
))

	)

591 
	#IS_LTDC_BLENDING_FACTOR2
(
BÀndögFa˘‹2
Ë(((BÀndögFa˘‹2Ë=
LTDC_BLENDING_FACTOR2_CA
) || \

592 ((
BÀndögFa˘‹2
Ë=
LTDC_BLENDING_FACTOR2_PAxCA
))

	)

593 
	#IS_LTDC_PIXEL_FORMAT
(
Pixñf‹m©
Ë(((Pixñf‹m©Ë=
LTDC_PIXEL_FORMAT_ARGB8888
Ë|| ((Pixñf‹m©Ë=
LTDC_PIXEL_FORMAT_RGB888
) || \

594 ((
Pixñf‹m©
Ë=
LTDC_PIXEL_FORMAT_RGB565
Ë|| ((Pixñf‹m©Ë=
LTDC_PIXEL_FORMAT_ARGB1555
) || \

595 ((
Pixñf‹m©
Ë=
LTDC_PIXEL_FORMAT_ARGB4444
Ë|| ((Pixñf‹m©Ë=
LTDC_PIXEL_FORMAT_L8
) || \

596 ((
Pixñf‹m©
Ë=
LTDC_PIXEL_FORMAT_AL44
Ë|| ((Pixñf‹m©Ë=
LTDC_PIXEL_FORMAT_AL88
))

	)

597 
	#IS_LTDC_ALPHA
(
ALPHA
Ë((ALPHAË<
LTDC_ALPHA
)

	)

598 
	#IS_LTDC_HCONFIGST
(
HCONFIGST
Ë((HCONFIGSTË<
LTDC_STARTPOSITION
)

	)

599 
	#IS_LTDC_HCONFIGSP
(
HCONFIGSP
Ë((HCONFIGSPË<
LTDC_STOPPOSITION
)

	)

600 
	#IS_LTDC_VCONFIGST
(
VCONFIGST
Ë((VCONFIGSTË<
LTDC_STARTPOSITION
)

	)

601 
	#IS_LTDC_VCONFIGSP
(
VCONFIGSP
Ë((VCONFIGSPË<
LTDC_STOPPOSITION
)

	)

602 
	#IS_LTDC_CFBP
(
CFBP
Ë((CFBPË<
LTDC_COLOR_FRAME_BUFFER
)

	)

603 
	#IS_LTDC_CFBLL
(
CFBLL
Ë((CFBLLË<
LTDC_COLOR_FRAME_BUFFER
)

	)

604 
	#IS_LTDC_CFBLNBR
(
CFBLNBR
Ë((CFBLNBRË<
LTDC_LINE_NUMBER
)

	)

605 
	#IS_LTDC_LIPOS
(
LIPOS
Ë((LIPOSË<0x7FF)

	)

629 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_ltdc_ex.h

39 #i‚de‡
__STM32F4xx_HAL_LTDC_EX_H


40 
	#__STM32F4xx_HAL_LTDC_EX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

49 
	~"°m32f4xx_hÆ_dsi.h
"

83 
HAL_SètusTy≥Def
 
HAL_LTDC_Såu˘InôFromVideoC⁄fig
(
LTDC_H™dÀTy≥Def
* 
h…dc
, 
DSI_VidCfgTy≥Def
 *
VidCfg
);

84 
HAL_SètusTy≥Def
 
HAL_LTDC_Såu˘InôFromAd≠ãdComm™dC⁄fig
(
LTDC_H™dÀTy≥Def
* 
h…dc
, 
DSI_CmdCfgTy≥Def
 *
CmdCfg
);

145 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_nand.h

39 #i‚de‡
__STM32F4xx_HAL_NAND_H


40 
	#__STM32F4xx_HAL_NAND_H


	)

42 #ifde‡
__˝lu•lus


47 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

48 
	~"°m32f4xx_Œ_fsmc.h
"

51 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

52 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

53 
	~"°m32f4xx_Œ_fmc.h
"

55 
STM32F479xx
 */

65 #i‡
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

66 
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

67 
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

80 
HAL_NAND_STATE_RESET
 = 0x00,

81 
HAL_NAND_STATE_READY
 = 0x01,

82 
HAL_NAND_STATE_BUSY
 = 0x02,

83 
HAL_NAND_STATE_ERROR
 = 0x03

84 }
	tHAL_NAND_SèãTy≥Def
;

93 
uöt8_t
 
Makî_Id
;

95 
uöt8_t
 
Devi˚_Id
;

97 
uöt8_t
 
Thúd_Id
;

99 
uöt8_t
 
Fouπh_Id
;

100 }
	tNAND_IDTy≥Def
;

107 
uöt16_t
 
Page
;

109 
uöt16_t
 
Z⁄e
;

111 
uöt16_t
 
Block
;

113 }
	tNAND_AddªssTy≥Def
;

120 
uöt32_t
 
PageSize
;

122 
uöt32_t
 
S∑ªAªaSize
;

124 
uöt32_t
 
BlockSize
;

126 
uöt32_t
 
BlockNbr
;

128 
uöt32_t
 
Z⁄eSize
;

129 }
	tNAND_InfoTy≥Def
;

136 
FMC_NAND_Ty≥Def
 *
In°™˚
;

138 
FMC_NAND_InôTy≥Def
 
Inô
;

140 
HAL_LockTy≥Def
 
Lock
;

142 
__IO
 
HAL_NAND_SèãTy≥Def
 
Sèã
;

144 
NAND_InfoTy≥Def
 
Info
;

145 }
	tNAND_H™dÀTy≥Def
;

160 
	#__HAL_NAND_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_NAND_STATE_RESET
)

	)

176 
HAL_SètusTy≥Def
 
	`HAL_NAND_Inô
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
FMC_NAND_PCC_TimögTy≥Def
 *
ComS∑˚_Timög
, FMC_NAND_PCC_TimögTy≥De‡*
AâS∑˚_Timög
);

177 
HAL_SètusTy≥Def
 
	`HAL_NAND_DeInô
(
NAND_H™dÀTy≥Def
 *
h«nd
);

178 
	`HAL_NAND_M•Inô
(
NAND_H™dÀTy≥Def
 *
h«nd
);

179 
	`HAL_NAND_M•DeInô
(
NAND_H™dÀTy≥Def
 *
h«nd
);

180 
	`HAL_NAND_IRQH™dÀr
(
NAND_H™dÀTy≥Def
 *
h«nd
);

181 
	`HAL_NAND_ITCÆlback
(
NAND_H™dÀTy≥Def
 *
h«nd
);

192 
HAL_SètusTy≥Def
 
	`HAL_NAND_Ród_ID
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_IDTy≥Def
 *
pNAND_ID
);

193 
HAL_SètusTy≥Def
 
	`HAL_NAND_Re£t
(
NAND_H™dÀTy≥Def
 *
h«nd
);

194 
HAL_SètusTy≥Def
 
	`HAL_NAND_Ród_Page
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
NumPageToRód
);

195 
HAL_SètusTy≥Def
 
	`HAL_NAND_Wrôe_Page
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
NumPageToWrôe
);

196 
HAL_SètusTy≥Def
 
	`HAL_NAND_Ród_S∑ªAªa
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
NumS∑ªAªaToRód
);

197 
HAL_SètusTy≥Def
 
	`HAL_NAND_Wrôe_S∑ªAªa
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
NumS∑ªAªaTowrôe
);

198 
HAL_SètusTy≥Def
 
	`HAL_NAND_Eø£_Block
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
);

199 
uöt32_t
 
	`HAL_NAND_Ród_Sètus
(
NAND_H™dÀTy≥Def
 *
h«nd
);

200 
uöt32_t
 
	`HAL_NAND_Addªss_Inc
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
);

211 
HAL_SètusTy≥Def
 
	`HAL_NAND_ECC_E«bÀ
(
NAND_H™dÀTy≥Def
 *
h«nd
);

212 
HAL_SètusTy≥Def
 
	`HAL_NAND_ECC_DißbÀ
(
NAND_H™dÀTy≥Def
 *
h«nd
);

213 
HAL_SètusTy≥Def
 
	`HAL_NAND_GëECC
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
uöt32_t
 *
ECCvÆ
, uöt32_à
Timeout
);

223 
HAL_NAND_SèãTy≥Def
 
	`HAL_NAND_GëSèã
(
NAND_H™dÀTy≥Def
 *
h«nd
);

224 
uöt32_t
 
	`HAL_NAND_Ród_Sètus
(
NAND_H™dÀTy≥Def
 *
h«nd
);

239 
	#NAND_DEVICE1
 ((
uöt32_t
)0x70000000)

	)

240 
	#NAND_DEVICE2
 ((
uöt32_t
)0x80000000)

	)

241 
	#NAND_WRITE_TIMEOUT
 ((
uöt32_t
)0x01000000)

	)

243 
	#CMD_AREA
 ((
uöt32_t
)(1<<16)Ë

	)

244 
	#ADDR_AREA
 ((
uöt32_t
)(1<<17)Ë

	)

246 
	#NAND_CMD_AREA_A
 ((
uöt8_t
)0x00)

	)

247 
	#NAND_CMD_AREA_B
 ((
uöt8_t
)0x01)

	)

248 
	#NAND_CMD_AREA_C
 ((
uöt8_t
)0x50)

	)

249 
	#NAND_CMD_AREA_TRUE1
 ((
uöt8_t
)0x30)

	)

251 
	#NAND_CMD_WRITE0
 ((
uöt8_t
)0x80)

	)

252 
	#NAND_CMD_WRITE_TRUE1
 ((
uöt8_t
)0x10)

	)

253 
	#NAND_CMD_ERASE0
 ((
uöt8_t
)0x60)

	)

254 
	#NAND_CMD_ERASE1
 ((
uöt8_t
)0xD0)

	)

255 
	#NAND_CMD_READID
 ((
uöt8_t
)0x90)

	)

256 
	#NAND_CMD_STATUS
 ((
uöt8_t
)0x70)

	)

257 
	#NAND_CMD_LOCK_STATUS
 ((
uöt8_t
)0x7A)

	)

258 
	#NAND_CMD_RESET
 ((
uöt8_t
)0xFF)

	)

261 
	#NAND_VALID_ADDRESS
 ((
uöt32_t
)0x00000100)

	)

262 
	#NAND_INVALID_ADDRESS
 ((
uöt32_t
)0x00000200)

	)

263 
	#NAND_TIMEOUT_ERROR
 ((
uöt32_t
)0x00000400)

	)

264 
	#NAND_BUSY
 ((
uöt32_t
)0x00000000)

	)

265 
	#NAND_ERROR
 ((
uöt32_t
)0x00000001)

	)

266 
	#NAND_READY
 ((
uöt32_t
)0x00000040)

	)

282 
	#ARRAY_ADDRESS
(
__ADDRESS__
 , 
__HANDLE__
Ë((__ADDRESS__)->
Page
 + \

283 (((
__ADDRESS__
)->
Block
 + (((__ADDRESS__)->
Z⁄e
Ë* ((
__HANDLE__
)->
Info
.
Z⁄eSize
)))* ((__HANDLE__)->Info.
BlockSize
)))

	)

290 
	#ADDR_1ST_CYCLE
(
__ADDRESS__
Ë(
uöt8_t
)(__ADDRESS__Ë

	)

291 
	#ADDR_2ND_CYCLE
(
__ADDRESS__
Ë(
uöt8_t
)((__ADDRESS__Ë>> 8Ë

	)

292 
	#ADDR_3RD_CYCLE
(
__ADDRESS__
Ë(
uöt8_t
)((__ADDRESS__Ë>> 16Ë

	)

293 
	#ADDR_4TH_CYCLE
(
__ADDRESS__
Ë(
uöt8_t
)((__ADDRESS__Ë>> 24Ë

	)

298 
STM32F427xx
 || 
STM32F437xx
 || 
STM32F429xx
 || 
STM32F439xx
 ||\

299 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

312 #ifde‡
__˝lu•lus


313 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_nor.h

39 #i‚de‡
__STM32F4xx_HAL_NOR_H


40 
	#__STM32F4xx_HAL_NOR_H


	)

42 #ifde‡
__˝lu•lus


47 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

48 
	~"°m32f4xx_Œ_fsmc.h
"

51 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

52 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

53 
	~"°m32f4xx_Œ_fmc.h
"

64 #i‡
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

65 
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

66 
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

78 
HAL_NOR_STATE_RESET
 = 0x00,

79 
HAL_NOR_STATE_READY
 = 0x01,

80 
HAL_NOR_STATE_BUSY
 = 0x02,

81 
HAL_NOR_STATE_ERROR
 = 0x03,

82 
HAL_NOR_STATE_PROTECTED
 = 0x04

83 }
	tHAL_NOR_SèãTy≥Def
;

90 
HAL_NOR_STATUS_SUCCESS
 = 0,

91 
HAL_NOR_STATUS_ONGOING
,

92 
HAL_NOR_STATUS_ERROR
,

93 
HAL_NOR_STATUS_TIMEOUT


94 }
	tHAL_NOR_SètusTy≥Def
;

101 
uöt16_t
 
M™uÁ˘uªr_Code
;

103 
uöt16_t
 
Devi˚_Code1
;

105 
uöt16_t
 
Devi˚_Code2
;

107 
uöt16_t
 
Devi˚_Code3
;

111 }
	tNOR_IDTy≥Def
;

122 
uöt16_t
 
CFI_1
;

124 
uöt16_t
 
CFI_2
;

126 
uöt16_t
 
CFI_3
;

128 
uöt16_t
 
CFI_4
;

129 }
	tNOR_CFITy≥Def
;

136 
FMC_NORSRAM_Ty≥Def
 *
In°™˚
;

138 
FMC_NORSRAM_EXTENDED_Ty≥Def
 *
Exãnded
;

140 
FMC_NORSRAM_InôTy≥Def
 
Inô
;

142 
HAL_LockTy≥Def
 
Lock
;

144 
__IO
 
HAL_NOR_SèãTy≥Def
 
Sèã
;

146 }
	tNOR_H™dÀTy≥Def
;

160 
	#__HAL_NOR_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_NOR_STATE_RESET
)

	)

174 
HAL_SètusTy≥Def
 
	`HAL_NOR_Inô
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
FMC_NORSRAM_TimögTy≥Def
 *
Timög
, FMC_NORSRAM_TimögTy≥De‡*
ExtTimög
);

175 
HAL_SètusTy≥Def
 
	`HAL_NOR_DeInô
(
NOR_H™dÀTy≥Def
 *
hn‹
);

176 
	`HAL_NOR_M•Inô
(
NOR_H™dÀTy≥Def
 *
hn‹
);

177 
	`HAL_NOR_M•DeInô
(
NOR_H™dÀTy≥Def
 *
hn‹
);

178 
	`HAL_NOR_M•Waô
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
Timeout
);

187 
HAL_SètusTy≥Def
 
	`HAL_NOR_Ród_ID
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
NOR_IDTy≥Def
 *
pNOR_ID
);

188 
HAL_SètusTy≥Def
 
	`HAL_NOR_Rëu∫ToRódMode
(
NOR_H™dÀTy≥Def
 *
hn‹
);

189 
HAL_SètusTy≥Def
 
	`HAL_NOR_Ród
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pD©a
);

190 
HAL_SètusTy≥Def
 
	`HAL_NOR_Progøm
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pD©a
);

192 
HAL_SètusTy≥Def
 
	`HAL_NOR_RódBuf„r
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
uwAddªss
, 
uöt16_t
 *
pD©a
, uöt32_à
uwBuf„rSize
);

193 
HAL_SètusTy≥Def
 
	`HAL_NOR_ProgømBuf„r
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
uwAddªss
, 
uöt16_t
 *
pD©a
, uöt32_à
uwBuf„rSize
);

195 
HAL_SètusTy≥Def
 
	`HAL_NOR_Eø£_Block
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
BlockAddªss
, uöt32_à
Addªss
);

196 
HAL_SètusTy≥Def
 
	`HAL_NOR_Eø£_Chù
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
Addªss
);

197 
HAL_SètusTy≥Def
 
	`HAL_NOR_Ród_CFI
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
NOR_CFITy≥Def
 *
pNOR_CFI
);

206 
HAL_SètusTy≥Def
 
	`HAL_NOR_WrôeO≥øti⁄_E«bÀ
(
NOR_H™dÀTy≥Def
 *
hn‹
);

207 
HAL_SètusTy≥Def
 
	`HAL_NOR_WrôeO≥øti⁄_DißbÀ
(
NOR_H™dÀTy≥Def
 *
hn‹
);

216 
HAL_NOR_SèãTy≥Def
 
	`HAL_NOR_GëSèã
(
NOR_H™dÀTy≥Def
 *
hn‹
);

217 
HAL_NOR_SètusTy≥Def
 
	`HAL_NOR_GëSètus
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
Addªss
, uöt32_à
Timeout
);

233 
	#MC_ADDRESS
 ((
uöt16_t
)0x0000)

	)

234 
	#DEVICE_CODE1_ADDR
 ((
uöt16_t
)0x0001)

	)

235 
	#DEVICE_CODE2_ADDR
 ((
uöt16_t
)0x000E)

	)

236 
	#DEVICE_CODE3_ADDR
 ((
uöt16_t
)0x000F)

	)

239 
	#CFI1_ADDRESS
 ((
uöt16_t
)0x61)

	)

240 
	#CFI2_ADDRESS
 ((
uöt16_t
)0x62)

	)

241 
	#CFI3_ADDRESS
 ((
uöt16_t
)0x63)

	)

242 
	#CFI4_ADDRESS
 ((
uöt16_t
)0x64)

	)

245 
	#NOR_TMEOUT
 ((
uöt16_t
)0xFFFF)

	)

248 
	#NOR_MEMORY_8B
 ((
uöt8_t
)0x0)

	)

249 
	#NOR_MEMORY_16B
 ((
uöt8_t
)0x1)

	)

252 
	#NOR_MEMORY_ADRESS1
 ((
uöt32_t
)0x60000000)

	)

253 
	#NOR_MEMORY_ADRESS2
 ((
uöt32_t
)0x64000000)

	)

254 
	#NOR_MEMORY_ADRESS3
 ((
uöt32_t
)0x68000000)

	)

255 
	#NOR_MEMORY_ADRESS4
 ((
uöt32_t
)0x6C000000)

	)

271 
	#NOR_ADDR_SHIFT
(
__NOR_ADDRESS__
, 
NOR_MEMORY_WIDTH
, 
ADDRESS
Ë(
uöt32_t
)(((NOR_MEMORY_WIDTHË=
NOR_MEMORY_8B
)? ((uint32_t)((__NOR_ADDRESS__) + (2 * (ADDRESS)))):\

272 ((
uöt32_t
)((
__NOR_ADDRESS__
Ë+ (
ADDRESS
))))

	)

280 
	#NOR_WRITE
(
ADDRESS
, 
DATA
Ë(*(
__IO
 
uöt16_t
 *)((
uöt32_t
)(ADDRESS)Ë(DATA))

	)

286 
STM32F427xx
 || 
STM32F437xx
 || 
STM32F429xx
 || 
STM32F439xx
 ||\

287 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

296 #ifde‡
__˝lu•lus


297 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pccard.h

39 #i‚de‡
__STM32F4xx_HAL_PCCARD_H


40 
	#__STM32F4xx_HAL_PCCARD_H


	)

42 #ifde‡
__˝lu•lus


47 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

48 
	~"°m32f4xx_Œ_fsmc.h
"

51 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

52 
	~"°m32f4xx_Œ_fmc.h
"

59 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

60 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| 
	$deföed
(
STM32F439xx
)

76 
HAL_PCCARD_STATE_RESET
 = 0x00,

77 
HAL_PCCARD_STATE_READY
 = 0x01,

78 
HAL_PCCARD_STATE_BUSY
 = 0x02,

79 
HAL_PCCARD_STATE_ERROR
 = 0x04

80 }
	tHAL_PCCARD_SèãTy≥Def
;

84 
HAL_PCCARD_STATUS_SUCCESS
 = 0,

85 
HAL_PCCARD_STATUS_ONGOING
,

86 
HAL_PCCARD_STATUS_ERROR
,

87 
HAL_PCCARD_STATUS_TIMEOUT


88 }
	tHAL_PCCARD_SètusTy≥Def
;

95 
FMC_PCCARD_Ty≥Def
 *
In°™˚
;

97 
FMC_PCCARD_InôTy≥Def
 
Inô
;

99 
__IO
 
HAL_PCCARD_SèãTy≥Def
 
Sèã
;

101 
HAL_LockTy≥Def
 
Lock
;

103 }
	tPCCARD_H™dÀTy≥Def
;

117 
	#__HAL_PCCARD_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_PCCARD_STATE_RESET
)

	)

131 
HAL_SètusTy≥Def
 
	`HAL_PCCARD_Inô
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
FMC_NAND_PCC_TimögTy≥Def
 *
ComS∑˚Timög
, FMC_NAND_PCC_TimögTy≥De‡*
AâS∑˚Timög
, FMC_NAND_PCC_TimögTy≥De‡*
IOS∑˚Timög
);

132 
HAL_SètusTy≥Def
 
	`HAL_PCCARD_DeInô
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

133 
	`HAL_PCCARD_M•Inô
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

134 
	`HAL_PCCARD_M•DeInô
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

143 
HAL_SètusTy≥Def
 
	`HAL_PCCARD_Ród_ID
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
uöt8_t
 
Com∑˘Fœsh_ID
[], uöt8_à*
pSètus
);

144 
HAL_SètusTy≥Def
 
	`HAL_PCCARD_Wrôe_Se˘‹
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
uöt16_t
 *
pBuf„r
, uöt16_à
Se˘‹Addªss
, 
uöt8_t
 *
pSètus
);

145 
HAL_SètusTy≥Def
 
	`HAL_PCCARD_Ród_Se˘‹
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
uöt16_t
 *
pBuf„r
, uöt16_à
Se˘‹Addªss
, 
uöt8_t
 *
pSètus
);

146 
HAL_SètusTy≥Def
 
	`HAL_PCCARD_Eø£_Se˘‹
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
uöt16_t
 
Se˘‹Addªss
, 
uöt8_t
 *
pSètus
);

147 
HAL_SètusTy≥Def
 
	`HAL_PCCARD_Re£t
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

148 
	`HAL_PCCARD_IRQH™dÀr
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

149 
	`HAL_PCCARD_ITCÆlback
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

159 
HAL_PCCARD_SèãTy≥Def
 
	`HAL_PCCARD_GëSèã
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

160 
HAL_PCCARD_SètusTy≥Def
 
	`HAL_PCCARD_GëSètus
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

161 
HAL_PCCARD_SètusTy≥Def
 
	`HAL_PCCARD_RódSètus
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
);

175 
	#PCCARD_DEVICE_ADDRESS
 ((
uöt32_t
)0x90000000)

	)

176 
	#PCCARD_ATTRIBUTE_SPACE_ADDRESS
 ((
uöt32_t
)0x98000000Ë

	)

177 
	#PCCARD_COMMON_SPACE_ADDRESS
 
PCCARD_DEVICE_ADDRESS


	)

178 
	#PCCARD_IO_SPACE_ADDRESS
 ((
uöt32_t
)0x9C000000Ë

	)

179 
	#PCCARD_IO_SPACE_PRIMARY_ADDR
 ((
uöt32_t
)0x9C0001F0Ë

	)

182 
	#ATA_DATA
 ((
uöt8_t
)0x00Ë

	)

183 
	#ATA_SECTOR_COUNT
 ((
uöt8_t
)0x02Ë

	)

184 
	#ATA_SECTOR_NUMBER
 ((
uöt8_t
)0x03Ë

	)

185 
	#ATA_CYLINDER_LOW
 ((
uöt8_t
)0x04Ë

	)

186 
	#ATA_CYLINDER_HIGH
 ((
uöt8_t
)0x05Ë

	)

187 
	#ATA_CARD_HEAD
 ((
uöt8_t
)0x06Ë

	)

188 
	#ATA_STATUS_CMD
 ((
uöt8_t
)0x07Ë

	)

189 
	#ATA_STATUS_CMD_ALTERNATE
 ((
uöt8_t
)0x0EË

	)

190 
	#ATA_COMMON_DATA_AREA
 ((
uöt16_t
)0x0400Ë

	)

191 
	#ATA_CARD_CONFIGURATION
 ((
uöt16_t
)0x0202Ë

	)

194 
	#ATA_READ_SECTOR_CMD
 ((
uöt8_t
)0x20)

	)

195 
	#ATA_WRITE_SECTOR_CMD
 ((
uöt8_t
)0x30)

	)

196 
	#ATA_ERASE_SECTOR_CMD
 ((
uöt8_t
)0xC0)

	)

197 
	#ATA_IDENTIFY_CMD
 ((
uöt8_t
)0xEC)

	)

200 
	#PCCARD_TIMEOUT_ERROR
 ((
uöt8_t
)0x60)

	)

201 
	#PCCARD_BUSY
 ((
uöt8_t
)0x80)

	)

202 
	#PCCARD_PROGR
 ((
uöt8_t
)0x01)

	)

203 
	#PCCARD_READY
 ((
uöt8_t
)0x40)

	)

205 
	#PCCARD_SECTOR_SIZE
 ((
uöt32_t
)255Ë

	)

211 
	#HAL_CF_Inô
 
HAL_PCCARD_Inô


	)

212 
	#HAL_CF_DeInô
 
HAL_PCCARD_DeInô


	)

213 
	#HAL_CF_M•Inô
 
HAL_PCCARD_M•Inô


	)

214 
	#HAL_CF_M•DeInô
 
HAL_PCCARD_M•DeInô


	)

216 
	#HAL_CF_Ród_ID
 
HAL_PCCARD_Ród_ID


	)

217 
	#HAL_CF_Wrôe_Se˘‹
 
HAL_PCCARD_Wrôe_Se˘‹


	)

218 
	#HAL_CF_Ród_Se˘‹
 
HAL_PCCARD_Ród_Se˘‹


	)

219 
	#HAL_CF_Eø£_Se˘‹
 
HAL_PCCARD_Eø£_Se˘‹


	)

220 
	#HAL_CF_Re£t
 
HAL_PCCARD_Re£t


	)

221 
	#HAL_CF_IRQH™dÀr
 
HAL_PCCARD_IRQH™dÀr


	)

222 
	#HAL_CF_ITCÆlback
 
HAL_PCCARD_ITCÆlback


	)

224 
	#HAL_CF_GëSèã
 
HAL_PCCARD_GëSèã


	)

225 
	#HAL_CF_GëSètus
 
HAL_PCCARD_GëSètus


	)

226 
	#HAL_CF_RódSètus
 
HAL_PCCARD_RódSètus


	)

228 
	#HAL_CF_STATUS_SUCCESS
 
HAL_PCCARD_STATUS_SUCCESS


	)

229 
	#HAL_CF_STATUS_ONGOING
 
HAL_PCCARD_STATUS_ONGOING


	)

230 
	#HAL_CF_STATUS_ERROR
 
HAL_PCCARD_STATUS_ERROR


	)

231 
	#HAL_CF_STATUS_TIMEOUT
 
HAL_PCCARD_STATUS_TIMEOUT


	)

232 
	#HAL_CF_SètusTy≥Def
 
HAL_PCCARD_SètusTy≥Def


	)

235 
	#CF_DEVICE_ADDRESS
 
PCCARD_DEVICE_ADDRESS


	)

236 
	#CF_ATTRIBUTE_SPACE_ADDRESS
 
PCCARD_ATTRIBUTE_SPACE_ADDRESS


	)

237 
	#CF_COMMON_SPACE_ADDRESS
 
PCCARD_COMMON_SPACE_ADDRESS


	)

238 
	#CF_IO_SPACE_ADDRESS
 
PCCARD_IO_SPACE_ADDRESS


	)

239 
	#CF_IO_SPACE_PRIMARY_ADDR
 
PCCARD_IO_SPACE_PRIMARY_ADDR


	)

241 
	#CF_TIMEOUT_ERROR
 
PCCARD_TIMEOUT_ERROR


	)

242 
	#CF_BUSY
 
PCCARD_BUSY


	)

243 
	#CF_PROGR
 
PCCARD_PROGR


	)

244 
	#CF_READY
 
PCCARD_READY


	)

246 
	#CF_SECTOR_SIZE
 
PCCARD_SECTOR_SIZE


	)

254 
STM32F427xx
 || 
STM32F437xx
 || 
STM32F429xx
 || 
STM32F439xx
 */

261 #ifde‡
__˝lu•lus


262 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pcd.h

39 #i‚de‡
__STM32F4xx_HAL_PCD_H


40 
	#__STM32F4xx_HAL_PCD_H


	)

42 #ifde‡
__˝lu•lus


45 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

46 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

47 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

48 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_Œ_usb.h
"

70 
HAL_PCD_STATE_RESET
 = 0x00,

71 
HAL_PCD_STATE_READY
 = 0x01,

72 
HAL_PCD_STATE_ERROR
 = 0x02,

73 
HAL_PCD_STATE_BUSY
 = 0x03,

74 
HAL_PCD_STATE_TIMEOUT
 = 0x04

75 } 
	tPCD_SèãTy≥Def
;

77 #ifde‡
USB_OTG_GLPMCFG_LPMEN


81 
LPM_L0
 = 0x00,

82 
LPM_L1
 = 0x01,

83 
LPM_L2
 = 0x02,

84 
LPM_L3
 = 0x03,

85 }
	tPCD_LPM_SèãTy≥Def
;

88 
USB_OTG_GlobÆTy≥Def
 
	tPCD_Ty≥Def
;

89 
USB_OTG_CfgTy≥Def
 
	tPCD_InôTy≥Def
;

90 
USB_OTG_EPTy≥Def
 
	tPCD_EPTy≥Def
 ;

97 
PCD_Ty≥Def
 *
In°™˚
;

98 
PCD_InôTy≥Def
 
Inô
;

99 
PCD_EPTy≥Def
 
IN_ï
[15];

100 
PCD_EPTy≥Def
 
OUT_ï
[15];

101 
HAL_LockTy≥Def
 
Lock
;

102 
__IO
 
PCD_SèãTy≥Def
 
Sèã
;

103 
uöt32_t
 
Sëup
[12];

104 #ifde‡
USB_OTG_GLPMCFG_LPMEN


105 
PCD_LPM_SèãTy≥Def
 
LPM_Sèã
;

106 
uöt32_t
 
BESL
;

107 
uöt32_t
 
Õm_a˘ive
;

110 #ifde‡
USB_OTG_GCCFG_BCDEN


111 
uöt32_t
 
b©ãry_ch¨gög_a˘ive
;

114 *
pD©a
;

115 } 
	tPCD_H™dÀTy≥Def
;

122 
	~"°m32f4xx_hÆ_pcd_ex.h
"

132 
	#PCD_SPEED_HIGH
 0

	)

133 
	#PCD_SPEED_HIGH_IN_FULL
 1

	)

134 
	#PCD_SPEED_FULL
 2

	)

142 
	#PCD_PHY_ULPI
 1

	)

143 
	#PCD_PHY_EMBEDDED
 2

	)

151 #i‚de‡
USBD_HS_TRDT_VALUE


152 
	#USBD_HS_TRDT_VALUE
 9

	)

154 #i‚de‡
USBD_FS_TRDT_VALUE


155 
	#USBD_FS_TRDT_VALUE
 5

	)

170 
	#__HAL_PCD_ENABLE
(
__HANDLE__
Ë
	`USB_E«bÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

171 
	#__HAL_PCD_DISABLE
(
__HANDLE__
Ë
	`USB_DißbÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

173 
	#__HAL_PCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë((
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë& (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

174 
	#__HAL_PCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
GINTSTS
Ë&(__INTERRUPT__))

	)

175 
	#__HAL_PCD_IS_INVALID_INTERRUPT
(
__HANDLE__
Ë(
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë=0)

	)

178 
	#__HAL_PCD_UNGATE_PHYCLOCK
(
__HANDLE__
Ë*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
) &= \

179 ~(
USB_OTG_PCGCCTL_STOPCLK
)

	)

181 
	#__HAL_PCD_GATE_PHYCLOCK
(
__HANDLE__
Ë*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
Ë|
USB_OTG_PCGCCTL_STOPCLK


	)

183 
	#__HAL_PCD_IS_PHY_SUSPENDED
(
__HANDLE__
Ë((*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
))&0x10)

	)

185 
	#USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE
 ((
uöt32_t
)0x08)

	)

186 
	#USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE
 ((
uöt32_t
)0x0C)

	)

187 
	#USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE
 ((
uöt32_t
)0x10)

	)

189 
	#USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE
 ((
uöt32_t
)0x08)

	)

190 
	#USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE
 ((
uöt32_t
)0x0C)

	)

191 
	#USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE
 ((
uöt32_t
)0x10)

	)

193 
	#USB_OTG_HS_WAKEUP_EXTI_LINE
 ((
uöt32_t
)0x00100000Ë

	)

194 
	#USB_OTG_FS_WAKEUP_EXTI_LINE
 ((
uöt32_t
)0x00040000Ë

	)

196 
	#__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT
(Ë
EXTI
->
IMR
 |(
USB_OTG_HS_WAKEUP_EXTI_LINE
)

	)

197 
	#__HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT
(Ë
EXTI
->
IMR
 &~(
USB_OTG_HS_WAKEUP_EXTI_LINE
)

	)

198 
	#__HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG
(Ë
EXTI
->
PR
 & (
USB_OTG_HS_WAKEUP_EXTI_LINE
)

	)

199 
	#__HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG
(Ë
EXTI
->
PR
 = (
USB_OTG_HS_WAKEUP_EXTI_LINE
)

	)

201 
	#__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE
(Ë
EXTI
->
FTSR
 &~(
USB_OTG_HS_WAKEUP_EXTI_LINE
);\

202 
EXTI
->
RTSR
 |
USB_OTG_HS_WAKEUP_EXTI_LINE


	)

204 
	#__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE
(Ë
EXTI
->
FTSR
 |(
USB_OTG_HS_WAKEUP_EXTI_LINE
);\

205 
EXTI
->
RTSR
 &~(
USB_OTG_HS_WAKEUP_EXTI_LINE
)

	)

207 
	#__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
EXTI
->
RTSR
 &~(
USB_OTG_HS_WAKEUP_EXTI_LINE
);\

208 
EXTI
->
FTSR
 &~(
USB_OTG_HS_WAKEUP_EXTI_LINE
;)\

209 
EXTI
->
RTSR
 |
USB_OTG_HS_WAKEUP_EXTI_LINE
;\

210 
EXTI
->
FTSR
 |
USB_OTG_HS_WAKEUP_EXTI_LINE


	)

212 
	#__HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT
(Ë(
EXTI
->
SWIER
 |
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

214 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT
(Ë
EXTI
->
IMR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

215 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT
(Ë
EXTI
->
IMR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

216 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG
(Ë
EXTI
->
PR
 & (
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

217 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG
(Ë
EXTI
->
PR
 = 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

219 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE
(Ë
EXTI
->
FTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
);\

220 
EXTI
->
RTSR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

223 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE
(Ë
EXTI
->
FTSR
 |(
USB_OTG_FS_WAKEUP_EXTI_LINE
);\

224 
EXTI
->
RTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

226 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
EXTI
->
RTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
);\

227 
EXTI
->
FTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
);\

228 
EXTI
->
RTSR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE
;\

229 
EXTI
->
FTSR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

231 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT
(Ë(
EXTI
->
SWIER
 |
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

245 
HAL_SètusTy≥Def
 
	`HAL_PCD_Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

246 
HAL_SètusTy≥Def
 
	`HAL_PCD_DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

247 
	`HAL_PCD_M•Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

248 
	`HAL_PCD_M•DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

259 
HAL_SètusTy≥Def
 
	`HAL_PCD_Sèπ
(
PCD_H™dÀTy≥Def
 *
hpcd
);

260 
HAL_SètusTy≥Def
 
	`HAL_PCD_St›
(
PCD_H™dÀTy≥Def
 *
hpcd
);

261 
	`HAL_PCD_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
);

263 
	`HAL_PCD_D©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

264 
	`HAL_PCD_D©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

265 
	`HAL_PCD_SëupSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

266 
	`HAL_PCD_SOFCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

267 
	`HAL_PCD_Re£tCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

268 
	`HAL_PCD_Su•ídCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

269 
	`HAL_PCD_ResumeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

270 
	`HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

271 
	`HAL_PCD_ISOINIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

272 
	`HAL_PCD_C⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

273 
	`HAL_PCD_Disc⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

282 
HAL_SètusTy≥Def
 
	`HAL_PCD_DevC⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
);

283 
HAL_SètusTy≥Def
 
	`HAL_PCD_DevDisc⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
);

284 
HAL_SètusTy≥Def
 
	`HAL_PCD_SëAddªss
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
addªss
);

285 
HAL_SètusTy≥Def
 
	`HAL_PCD_EP_O≥n
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, 
uöt16_t
 
ï_mps
, uöt8_à
ï_ty≥
);

286 
HAL_SètusTy≥Def
 
	`HAL_PCD_EP_Clo£
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

287 
HAL_SètusTy≥Def
 
	`HAL_PCD_EP_Re˚ive
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
);

288 
HAL_SètusTy≥Def
 
	`HAL_PCD_EP_Tønsmô
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
);

289 
uöt16_t
 
	`HAL_PCD_EP_GëRxCou¡
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

290 
HAL_SètusTy≥Def
 
	`HAL_PCD_EP_SëSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

291 
HAL_SètusTy≥Def
 
	`HAL_PCD_EP_CÃSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

292 
HAL_SètusTy≥Def
 
	`HAL_PCD_EP_Flush
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

293 
HAL_SètusTy≥Def
 
	`HAL_PCD_A˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
);

294 
HAL_SètusTy≥Def
 
	`HAL_PCD_DeA˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
);

303 
PCD_SèãTy≥Def
 
	`HAL_PCD_GëSèã
(
PCD_H™dÀTy≥Def
 *
hpcd
);

319 #i‡
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) ||\

320 
	`deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

321 
	#IS_PCD_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USB_OTG_FS
) || \

322 ((
INSTANCE
Ë=
USB_OTG_HS
))

	)

323 #ñi‡
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
)

324 
	#IS_PCD_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USB_OTG_FS
))

	)

342 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

343 #ifde‡
__˝lu•lus


344 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pcd_ex.h

39 #i‚de‡
__STM32F4xx_HAL_PCD_EX_H


40 
	#__STM32F4xx_HAL_PCD_EX_H


	)

42 #ifde‡
__˝lu•lus


45 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

46 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

47 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

48 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_hÆ_def.h
"

60 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

63 
PCD_LPM_L0_ACTIVE
 = 0x00,

64 
PCD_LPM_L1_ACTIVE
 = 0x01,

65 }
	tPCD_LPM_MsgTy≥Def
;

77 
HAL_SètusTy≥Def
 
	`HAL_PCDEx_SëTxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
fifo
, 
uöt16_t
 
size
);

78 
HAL_SètusTy≥Def
 
	`HAL_PCDEx_SëRxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt16_t
 
size
);

79 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

80 
HAL_SètusTy≥Def
 
	`HAL_PCDEx_A˘iv©eLPM
(
PCD_H™dÀTy≥Def
 *
hpcd
);

81 
HAL_SètusTy≥Def
 
	`HAL_PCDEx_DeA˘iv©eLPM
(
PCD_H™dÀTy≥Def
 *
hpcd
);

82 
	`HAL_PCDEx_LPM_CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
PCD_LPM_MsgTy≥Def
 
msg
);

101 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

102 #ifde‡
__˝lu•lus


103 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pwr.h

39 #i‚de‡
__STM32F4xx_HAL_PWR_H


40 
	#__STM32F4xx_HAL_PWR_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

68 
uöt32_t
 
PVDLevñ
;

71 
uöt32_t
 
Mode
;

73 }
	tPWR_PVDTy≥Def
;

87 
	#PWR_WAKEUP_PIN1
 ((
uöt32_t
)0x00000100)

	)

95 
	#PWR_PVDLEVEL_0
 
PWR_CR_PLS_LEV0


	)

96 
	#PWR_PVDLEVEL_1
 
PWR_CR_PLS_LEV1


	)

97 
	#PWR_PVDLEVEL_2
 
PWR_CR_PLS_LEV2


	)

98 
	#PWR_PVDLEVEL_3
 
PWR_CR_PLS_LEV3


	)

99 
	#PWR_PVDLEVEL_4
 
PWR_CR_PLS_LEV4


	)

100 
	#PWR_PVDLEVEL_5
 
PWR_CR_PLS_LEV5


	)

101 
	#PWR_PVDLEVEL_6
 
PWR_CR_PLS_LEV6


	)

102 
	#PWR_PVDLEVEL_7
 
PWR_CR_PLS_LEV7


	)

111 
	#PWR_PVD_MODE_NORMAL
 ((
uöt32_t
)0x00000000Ë

	)

112 
	#PWR_PVD_MODE_IT_RISING
 ((
uöt32_t
)0x00010001Ë

	)

113 
	#PWR_PVD_MODE_IT_FALLING
 ((
uöt32_t
)0x00010002Ë

	)

114 
	#PWR_PVD_MODE_IT_RISING_FALLING
 ((
uöt32_t
)0x00010003Ë

	)

115 
	#PWR_PVD_MODE_EVENT_RISING
 ((
uöt32_t
)0x00020001Ë

	)

116 
	#PWR_PVD_MODE_EVENT_FALLING
 ((
uöt32_t
)0x00020002Ë

	)

117 
	#PWR_PVD_MODE_EVENT_RISING_FALLING
 ((
uöt32_t
)0x00020003Ë

	)

126 
	#PWR_MAINREGULATOR_ON
 ((
uöt32_t
)0x00000000)

	)

127 
	#PWR_LOWPOWERREGULATOR_ON
 
PWR_CR_LPDS


	)

135 
	#PWR_SLEEPENTRY_WFI
 ((
uöt8_t
)0x01)

	)

136 
	#PWR_SLEEPENTRY_WFE
 ((
uöt8_t
)0x02)

	)

144 
	#PWR_STOPENTRY_WFI
 ((
uöt8_t
)0x01)

	)

145 
	#PWR_STOPENTRY_WFE
 ((
uöt8_t
)0x02)

	)

153 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

154 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

155 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

156 
	#PWR_FLAG_BRR
 
PWR_CSR_BRR


	)

157 
	#PWR_FLAG_VOSRDY
 
PWR_CSR_VOSRDY


	)

192 
	#__HAL_PWR_GET_FLAG
(
__FLAG__
Ë((
PWR
->
CSR
 & (__FLAG__)Ë=(__FLAG__))

	)

200 
	#__HAL_PWR_CLEAR_FLAG
(
__FLAG__
Ë(
PWR
->
CR
 |(__FLAG__Ë<< 2)

	)

206 
	#__HAL_PWR_PVD_EXTI_ENABLE_IT
(Ë(
EXTI
->
IMR
 |(
PWR_EXTI_LINE_PVD
))

	)

212 
	#__HAL_PWR_PVD_EXTI_DISABLE_IT
(Ë(
EXTI
->
IMR
 &~(
PWR_EXTI_LINE_PVD
))

	)

218 
	#__HAL_PWR_PVD_EXTI_ENABLE_EVENT
(Ë(
EXTI
->
EMR
 |(
PWR_EXTI_LINE_PVD
))

	)

224 
	#__HAL_PWR_PVD_EXTI_DISABLE_EVENT
(Ë(
EXTI
->
EMR
 &~(
PWR_EXTI_LINE_PVD
))

	)

230 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

236 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

242 
	#__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

249 
	#__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

256 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

	)

263 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

	)

269 
	#__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & (
PWR_EXTI_LINE_PVD
))

	)

275 
	#__HAL_PWR_PVD_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = (
PWR_EXTI_LINE_PVD
))

	)

281 
	#__HAL_PWR_PVD_EXTI_GENERATE_SWIT
(Ë(
EXTI
->
SWIER
 |(
PWR_EXTI_LINE_PVD
))

	)

288 
	~"°m32f4xx_hÆ_pwr_ex.h
"

299 
HAL_PWR_DeInô
();

300 
HAL_PWR_E«bÀBkUpAc˚ss
();

301 
HAL_PWR_DißbÀBkUpAc˚ss
();

311 
HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
);

312 
HAL_PWR_E«bÀPVD
();

313 
HAL_PWR_DißbÀPVD
();

316 
HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

317 
HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

320 
HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
);

321 
HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
);

322 
HAL_PWR_E¡îSTANDBYMode
();

325 
HAL_PWR_PVD_IRQH™dÀr
();

326 
HAL_PWR_PVDCÆlback
();

329 
HAL_PWR_E«bÀSÀïOnExô
();

330 
HAL_PWR_DißbÀSÀïOnExô
();

331 
HAL_PWR_E«bÀSEVOnPíd
();

332 
HAL_PWR_DißbÀSEVOnPíd
();

351 
	#PWR_EXTI_LINE_PVD
 ((
uöt32_t
)
EXTI_IMR_MR16
Ë

	)

360 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

361 
	#PWR_CR_OFFSET
 0x00

	)

362 
	#PWR_CSR_OFFSET
 0x04

	)

363 
	#PWR_CR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CR_OFFSET
)

	)

364 
	#PWR_CSR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CSR_OFFSET
)

	)

374 
	#DBP_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_DBP
)

	)

375 
	#CR_DBP_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
DBP_BIT_NUMBER
 * 4))

	)

378 
	#PVDE_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_PVDE
)

	)

379 
	#CR_PVDE_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
PVDE_BIT_NUMBER
 * 4))

	)

382 
	#PMODE_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_PMODE
)

	)

383 
	#CR_PMODE_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
PMODE_BIT_NUMBER
 * 4))

	)

393 
	#EWUP_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CSR_EWUP
)

	)

394 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
PWR_CSR_OFFSET_BB
 * 32Ë+ (
EWUP_BIT_NUMBER
 * 4))

	)

410 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLEVEL_0
Ë|| ((LEVELË=
PWR_PVDLEVEL_1
)|| \

411 ((
LEVEL
Ë=
PWR_PVDLEVEL_2
Ë|| ((LEVELË=
PWR_PVDLEVEL_3
)|| \

412 ((
LEVEL
Ë=
PWR_PVDLEVEL_4
Ë|| ((LEVELË=
PWR_PVDLEVEL_5
)|| \

413 ((
LEVEL
Ë=
PWR_PVDLEVEL_6
Ë|| ((LEVELË=
PWR_PVDLEVEL_7
))

	)

414 
	#IS_PWR_PVD_MODE
(
MODE
Ë(((MODEË=
PWR_PVD_MODE_IT_RISING
)|| ((MODEË=
PWR_PVD_MODE_IT_FALLING
) || \

415 ((
MODE
Ë=
PWR_PVD_MODE_IT_RISING_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING
) || \

416 ((
MODE
Ë=
PWR_PVD_MODE_EVENT_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING_FALLING
) || \

417 ((
MODE
Ë=
PWR_PVD_MODE_NORMAL
))

	)

418 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MAINREGULATOR_ON
) || \

419 ((
REGULATOR
Ë=
PWR_LOWPOWERREGULATOR_ON
))

	)

420 
	#IS_PWR_SLEEP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_SLEEPENTRY_WFI
Ë|| ((ENTRYË=
PWR_SLEEPENTRY_WFE
))

	)

421 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPENTRY_WFI
Ë|| ((ENTRYË=
PWR_STOPENTRY_WFE
))

	)

438 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pwr_ex.h

39 #i‚de‡
__STM32F4xx_HAL_PWR_EX_H


40 
	#__STM32F4xx_HAL_PWR_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

62 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

63 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

68 
	#PWR_MAINREGULATOR_UNDERDRIVE_ON
 
PWR_CR_MRUDS


	)

69 
	#PWR_LOWPOWERREGULATOR_UNDERDRIVE_ON
 ((
uöt32_t
)(
PWR_CR_LPDS
 | 
PWR_CR_LPUDS
))

	)

77 
	#PWR_FLAG_ODRDY
 
PWR_CSR_ODRDY


	)

78 
	#PWR_FLAG_ODSWRDY
 
PWR_CSR_ODSWRDY


	)

79 
	#PWR_FLAG_UDRDY
 
PWR_CSR_UDSWRDY


	)

88 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F417xx
)

89 
	#PWR_REGULATOR_VOLTAGE_SCALE1
 
PWR_CR_VOS


	)

90 
	#PWR_REGULATOR_VOLTAGE_SCALE2
 ((
uöt32_t
)0x00000000Ë

	)

92 
	#PWR_REGULATOR_VOLTAGE_SCALE1
 
PWR_CR_VOS


	)

94 
	#PWR_REGULATOR_VOLTAGE_SCALE2
 
PWR_CR_VOS_1


	)

96 
	#PWR_REGULATOR_VOLTAGE_SCALE3
 
PWR_CR_VOS_0


	)

101 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
)

105 
	#PWR_WAKEUP_PIN2
 ((
uöt32_t
)0x00000080)

	)

106 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

107 
	#PWR_WAKEUP_PIN3
 ((
uöt32_t
)0x00000040)

	)

123 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F417xx
)

133 
	#__HAL_PWR_VOLTAGESCALING_CONFIG
(
__REGULATOR__
) do { \

134 
__IO
 
uöt32_t
 
tm¥eg
; \

135 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_VOS
, (
__REGULATOR__
)); \

137 
tm¥eg
 = 
	`READ_BIT
(
PWR
->
CR
, 
PWR_CR_VOS
); \

138 
	`UNUSED
(
tm¥eg
); \

139 } 0)

	)

151 
	#__HAL_PWR_VOLTAGESCALING_CONFIG
(
__REGULATOR__
) do { \

152 
__IO
 
uöt32_t
 
tm¥eg
; \

153 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_VOS
, (
__REGULATOR__
)); \

155 
tm¥eg
 = 
	`READ_BIT
(
PWR
->
CR
, 
PWR_CR_VOS
); \

156 
	`UNUSED
(
tm¥eg
); \

157 } 0)

	)

160 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

161 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

165 
	#__HAL_PWR_OVERDRIVE_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CR_ODEN_BB
 = 
ENABLE
)

	)

166 
	#__HAL_PWR_OVERDRIVE_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CR_ODEN_BB
 = 
DISABLE
)

	)

171 
	#__HAL_PWR_OVERDRIVESWITCHING_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CR_ODSWEN_BB
 = 
ENABLE
)

	)

172 
	#__HAL_PWR_OVERDRIVESWITCHING_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CR_ODSWEN_BB
 = 
DISABLE
)

	)

184 
	#__HAL_PWR_UNDERDRIVE_ENABLE
(Ë(
PWR
->
CR
 |(
uöt32_t
)
PWR_CR_UDEN
)

	)

185 
	#__HAL_PWR_UNDERDRIVE_DISABLE
(Ë(
PWR
->
CR
 &(
uöt32_t
)(~
PWR_CR_UDEN
))

	)

199 
	#__HAL_PWR_GET_ODRUDR_FLAG
(
__FLAG__
Ë((
PWR
->
CSR
 & (__FLAG__)Ë=(__FLAG__))

	)

204 
	#__HAL_PWR_CLEAR_ODRUDR_FLAG
(Ë(
PWR
->
CSR
 |
PWR_FLAG_UDRDY
)

	)

219 
HAL_PWREx_E«bÀFœshPowîDown
();

220 
HAL_PWREx_DißbÀFœshPowîDown
();

221 
HAL_SètusTy≥Def
 
HAL_PWREx_E«bÀBkUpReg
();

222 
HAL_SètusTy≥Def
 
HAL_PWREx_DißbÀBkUpReg
();

223 
uöt32_t
 
HAL_PWREx_GëVﬁègeR™ge
();

224 
HAL_SètusTy≥Def
 
HAL_PWREx_C⁄åﬁVﬁègeSˇlög
(
uöt32_t
 
VﬁègeSˇlög
);

226 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

227 
HAL_PWREx_E«bÀWakeUpPöPﬁ¨ôyRisögEdge
();

228 
HAL_PWREx_E«bÀWakeUpPöPﬁ¨ôyFÆlögEdge
();

231 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F401xC
) ||\

232 
deföed
(
STM32F401xE
Ë|| deföed(
STM32F411xE
)

233 
HAL_PWREx_E«bÀMaöReguœt‹LowVﬁège
();

234 
HAL_PWREx_DißbÀMaöReguœt‹LowVﬁège
();

235 
HAL_PWREx_E«bÀLowReguœt‹LowVﬁège
();

236 
HAL_PWREx_DißbÀLowReguœt‹LowVﬁège
();

239 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
) ||\

240 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

241 
HAL_SètusTy≥Def
 
HAL_PWREx_E«bÀOvîDrive
();

242 
HAL_SètusTy≥Def
 
HAL_PWREx_DißbÀOvîDrive
();

243 
HAL_SètusTy≥Def
 
HAL_PWREx_E¡îUndîDriveSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
);

266 
	#FPDS_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_FPDS
)

	)

267 
	#CR_FPDS_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
FPDS_BIT_NUMBER
 * 4))

	)

270 
	#ODEN_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_ODEN
)

	)

271 
	#CR_ODEN_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
ODEN_BIT_NUMBER
 * 4))

	)

274 
	#ODSWEN_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_ODSWEN
)

	)

275 
	#CR_ODSWEN_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
ODSWEN_BIT_NUMBER
 * 4))

	)

278 
	#MRLVDS_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_MRLVDS
)

	)

279 
	#CR_MRLVDS_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
MRLVDS_BIT_NUMBER
 * 4))

	)

282 
	#LPLVDS_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CR_LPLVDS
)

	)

283 
	#CR_LPLVDS_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32Ë+ (
LPLVDS_BIT_NUMBER
 * 4))

	)

294 
	#BRE_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CSR_BRE
)

	)

295 
	#CSR_BRE_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CSR_OFFSET_BB
 * 32Ë+ (
BRE_BIT_NUMBER
 * 4))

	)

297 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

299 
	#WUPP_BIT_NUMBER
 
	`POSITION_VAL
(
PWR_CSR_WUPP
)

	)

300 
	#CSR_WUPP_BB
 (
PERIPH_BB_BASE
 + (
PWR_CSR_OFFSET_BB
 * 32Ë+ (
WUPP_BIT_NUMBER
 * 4))

	)

318 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

319 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

320 
	#IS_PWR_REGULATOR_UNDERDRIVE
(
REGULATOR
Ë(((REGULATORË=
PWR_MAINREGULATOR_UNDERDRIVE_ON
) || \

321 ((
REGULATOR
Ë=
PWR_LOWPOWERREGULATOR_UNDERDRIVE_ON
))

	)

324 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F417xx
)

325 
	#IS_PWR_VOLTAGE_SCALING_RANGE
(
VOLTAGE
Ë(((VOLTAGEË=
PWR_REGULATOR_VOLTAGE_SCALE1
) || \

326 ((
VOLTAGE
Ë=
PWR_REGULATOR_VOLTAGE_SCALE2
))

	)

328 
	#IS_PWR_VOLTAGE_SCALING_RANGE
(
VOLTAGE
Ë(((VOLTAGEË=
PWR_REGULATOR_VOLTAGE_SCALE1
) || \

329 ((
VOLTAGE
Ë=
PWR_REGULATOR_VOLTAGE_SCALE2
) || \

330 ((
VOLTAGE
Ë=
PWR_REGULATOR_VOLTAGE_SCALE3
))

	)

333 #i‡
deföed
(
STM32F446xx
)

334 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
Ë|| ((PINË=
PWR_WAKEUP_PIN2
))

	)

335 #ñi‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

336 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
Ë|| ((PINË=
PWR_WAKEUP_PIN2
) || \

337 ((
PIN
Ë=
PWR_WAKEUP_PIN3
))

	)

339 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë((PINË=
PWR_WAKEUP_PIN1
)

	)

357 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_qspi.h

39 #i‚de‡
__STM32F4xx_HAL_QSPI_H


40 
	#__STM32F4xx_HAL_QSPI_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

48 
	~"°m32f4xx_hÆ_def.h
"

69 
uöt32_t
 
ClockPªsˇÀr
;

72 
uöt32_t
 
FifoThªshﬁd
;

75 
uöt32_t
 
Sam∂eShi·ög
;

79 
uöt32_t
 
FœshSize
;

85 
uöt32_t
 
ChùSñe˘HighTime
;

89 
uöt32_t
 
ClockMode
;

92 
uöt32_t
 
FœshID
;

95 
uöt32_t
 
DuÆFœsh
;

97 }
	tQSPI_InôTy≥Def
;

104 
	mHAL_QSPI_STATE_RESET
 = 0x00,

105 
	mHAL_QSPI_STATE_READY
 = 0x01,

106 
	mHAL_QSPI_STATE_BUSY
 = 0x02,

107 
	mHAL_QSPI_STATE_BUSY_INDIRECT_TX
 = 0x12,

108 
	mHAL_QSPI_STATE_BUSY_INDIRECT_RX
 = 0x22,

109 
	mHAL_QSPI_STATE_BUSY_AUTO_POLLING
 = 0x42,

110 
	mHAL_QSPI_STATE_BUSY_MEM_MAPPED
 = 0x82,

111 
	mHAL_QSPI_STATE_ERROR
 = 0x04

112 }
	tHAL_QSPI_SèãTy≥Def
;

119 
QUADSPI_Ty≥Def
 *
	mIn°™˚
;

120 
QSPI_InôTy≥Def
 
	mInô
;

121 
uöt8_t
 *
	mpTxBuffPå
;

122 
__IO
 
uöt16_t
 
	mTxX„rSize
;

123 
__IO
 
uöt16_t
 
	mTxX„rCou¡
;

124 
uöt8_t
 *
	mpRxBuffPå
;

125 
__IO
 
uöt16_t
 
	mRxX„rSize
;

126 
__IO
 
uöt16_t
 
	mRxX„rCou¡
;

127 
DMA_H™dÀTy≥Def
 *
	mhdma
;

128 
__IO
 
HAL_LockTy≥Def
 
	mLock
;

129 
__IO
 
HAL_QSPI_SèãTy≥Def
 
	mSèã
;

130 
__IO
 
uöt32_t
 
	mEº‹Code
;

131 
uöt32_t
 
	mTimeout
;

132 }
	tQSPI_H™dÀTy≥Def
;

139 
uöt32_t
 
	mIn°ru˘i⁄
;

141 
uöt32_t
 
	mAddªss
;

143 
uöt32_t
 
	mA…î«ãByãs
;

145 
uöt32_t
 
	mAddªssSize
;

147 
uöt32_t
 
	mA…î«ãByãsSize
;

149 
uöt32_t
 
	mDummyCy˛es
;

151 
uöt32_t
 
	mIn°ru˘i⁄Mode
;

153 
uöt32_t
 
	mAddªssMode
;

155 
uöt32_t
 
	mA…î«ãByãMode
;

157 
uöt32_t
 
	mD©aMode
;

159 
uöt32_t
 
	mNbD©a
;

162 
uöt32_t
 
	mDdrMode
;

164 
uöt32_t
 
	mDdrHﬁdHÆfCy˛e
;

167 
uöt32_t
 
	mSIOOMode
;

169 }
	tQSPI_Comm™dTy≥Def
;

176 
uöt32_t
 
	mM©ch
;

178 
uöt32_t
 
	mMask
;

180 
uöt32_t
 
	mI¡îvÆ
;

182 
uöt32_t
 
	mSètusByãsSize
;

184 
uöt32_t
 
	mM©chMode
;

186 
uöt32_t
 
	mAutom©icSt›
;

188 }
	tQSPI_AutoPﬁlögTy≥Def
;

195 
uöt32_t
 
	mTimeOutPîiod
;

197 
uöt32_t
 
	mTimeOutA˘iv©i⁄
;

199 }
	tQSPI_Mem‹yM≠≥dTy≥Def
;

211 
	#HAL_QSPI_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

212 
	#HAL_QSPI_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000001Ë

	)

213 
	#HAL_QSPI_ERROR_TRANSFER
 ((
uöt32_t
)0x00000002Ë

	)

214 
	#HAL_QSPI_ERROR_DMA
 ((
uöt32_t
)0x00000004Ë

	)

222 
	#QSPI_SAMPLE_SHIFTING_NONE
 ((
uöt32_t
)0x00000000Ë

	)

223 
	#QSPI_SAMPLE_SHIFTING_HALFCYCLE
 ((
uöt32_t
)
QUADSPI_CR_SSHIFT
Ë

	)

231 
	#QSPI_CS_HIGH_TIME_1_CYCLE
 ((
uöt32_t
)0x00000000Ë

	)

232 
	#QSPI_CS_HIGH_TIME_2_CYCLE
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_0
Ë

	)

233 
	#QSPI_CS_HIGH_TIME_3_CYCLE
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_1
Ë

	)

234 
	#QSPI_CS_HIGH_TIME_4_CYCLE
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_0
 | 
QUADSPI_DCR_CSHT_1
Ë

	)

235 
	#QSPI_CS_HIGH_TIME_5_CYCLE
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_2
Ë

	)

236 
	#QSPI_CS_HIGH_TIME_6_CYCLE
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_2
 | 
QUADSPI_DCR_CSHT_0
Ë

	)

237 
	#QSPI_CS_HIGH_TIME_7_CYCLE
 ((
uöt32_t
)
QUADSPI_DCR_CSHT_2
 | 
QUADSPI_DCR_CSHT_1
Ë

	)

238 
	#QSPI_CS_HIGH_TIME_8_CYCLE
 ((
uöt32_t
)
QUADSPI_DCR_CSHT
Ë

	)

246 
	#QSPI_CLOCK_MODE_0
 ((
uöt32_t
)0x00000000Ë

	)

247 
	#QSPI_CLOCK_MODE_3
 ((
uöt32_t
)
QUADSPI_DCR_CKMODE
Ë

	)

255 
	#QSPI_FLASH_ID_1
 ((
uöt32_t
)0x00000000)

	)

256 
	#QSPI_FLASH_ID_2
 ((
uöt32_t
)
QUADSPI_CR_FSEL
)

	)

264 
	#QSPI_DUALFLASH_ENABLE
 ((
uöt32_t
)
QUADSPI_CR_DFM
)

	)

265 
	#QSPI_DUALFLASH_DISABLE
 ((
uöt32_t
)0x00000000)

	)

273 
	#QSPI_ADDRESS_8_BITS
 ((
uöt32_t
)0x00000000Ë

	)

274 
	#QSPI_ADDRESS_16_BITS
 ((
uöt32_t
)
QUADSPI_CCR_ADSIZE_0
Ë

	)

275 
	#QSPI_ADDRESS_24_BITS
 ((
uöt32_t
)
QUADSPI_CCR_ADSIZE_1
Ë

	)

276 
	#QSPI_ADDRESS_32_BITS
 ((
uöt32_t
)
QUADSPI_CCR_ADSIZE
Ë

	)

284 
	#QSPI_ALTERNATE_BYTES_8_BITS
 ((
uöt32_t
)0x00000000Ë

	)

285 
	#QSPI_ALTERNATE_BYTES_16_BITS
 ((
uöt32_t
)
QUADSPI_CCR_ABSIZE_0
Ë

	)

286 
	#QSPI_ALTERNATE_BYTES_24_BITS
 ((
uöt32_t
)
QUADSPI_CCR_ABSIZE_1
Ë

	)

287 
	#QSPI_ALTERNATE_BYTES_32_BITS
 ((
uöt32_t
)
QUADSPI_CCR_ABSIZE
Ë

	)

295 
	#QSPI_INSTRUCTION_NONE
 ((
uöt32_t
)0x00000000Ë

	)

296 
	#QSPI_INSTRUCTION_1_LINE
 ((
uöt32_t
)
QUADSPI_CCR_IMODE_0
Ë

	)

297 
	#QSPI_INSTRUCTION_2_LINES
 ((
uöt32_t
)
QUADSPI_CCR_IMODE_1
Ë

	)

298 
	#QSPI_INSTRUCTION_4_LINES
 ((
uöt32_t
)
QUADSPI_CCR_IMODE
Ë

	)

306 
	#QSPI_ADDRESS_NONE
 ((
uöt32_t
)0x00000000Ë

	)

307 
	#QSPI_ADDRESS_1_LINE
 ((
uöt32_t
)
QUADSPI_CCR_ADMODE_0
Ë

	)

308 
	#QSPI_ADDRESS_2_LINES
 ((
uöt32_t
)
QUADSPI_CCR_ADMODE_1
Ë

	)

309 
	#QSPI_ADDRESS_4_LINES
 ((
uöt32_t
)
QUADSPI_CCR_ADMODE
Ë

	)

317 
	#QSPI_ALTERNATE_BYTES_NONE
 ((
uöt32_t
)0x00000000Ë

	)

318 
	#QSPI_ALTERNATE_BYTES_1_LINE
 ((
uöt32_t
)
QUADSPI_CCR_ABMODE_0
Ë

	)

319 
	#QSPI_ALTERNATE_BYTES_2_LINES
 ((
uöt32_t
)
QUADSPI_CCR_ABMODE_1
Ë

	)

320 
	#QSPI_ALTERNATE_BYTES_4_LINES
 ((
uöt32_t
)
QUADSPI_CCR_ABMODE
Ë

	)

328 
	#QSPI_DATA_NONE
 ((
uöt32_t
)0X00000000Ë

	)

329 
	#QSPI_DATA_1_LINE
 ((
uöt32_t
)
QUADSPI_CCR_DMODE_0
Ë

	)

330 
	#QSPI_DATA_2_LINES
 ((
uöt32_t
)
QUADSPI_CCR_DMODE_1
Ë

	)

331 
	#QSPI_DATA_4_LINES
 ((
uöt32_t
)
QUADSPI_CCR_DMODE
Ë

	)

339 
	#QSPI_DDR_MODE_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

340 
	#QSPI_DDR_MODE_ENABLE
 ((
uöt32_t
)
QUADSPI_CCR_DDRM
Ë

	)

348 
	#QSPI_DDR_HHC_ANALOG_DELAY
 ((
uöt32_t
)0x00000000Ë

	)

349 
	#QSPI_DDR_HHC_HALF_CLK_DELAY
 ((
uöt32_t
)
QUADSPI_CCR_DHHC
Ë

	)

357 
	#QSPI_SIOO_INST_EVERY_CMD
 ((
uöt32_t
)0x00000000Ë

	)

358 
	#QSPI_SIOO_INST_ONLY_FIRST_CMD
 ((
uöt32_t
)
QUADSPI_CCR_SIOO
Ë

	)

366 
	#QSPI_MATCH_MODE_AND
 ((
uöt32_t
)0x00000000Ë

	)

367 
	#QSPI_MATCH_MODE_OR
 ((
uöt32_t
)
QUADSPI_CR_PMM
Ë

	)

375 
	#QSPI_AUTOMATIC_STOP_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

376 
	#QSPI_AUTOMATIC_STOP_ENABLE
 ((
uöt32_t
)
QUADSPI_CR_APMS
Ë

	)

384 
	#QSPI_TIMEOUT_COUNTER_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

385 
	#QSPI_TIMEOUT_COUNTER_ENABLE
 ((
uöt32_t
)
QUADSPI_CR_TCEN
Ë

	)

393 
	#QSPI_FLAG_BUSY
 
QUADSPI_SR_BUSY


	)

394 
	#QSPI_FLAG_TO
 
QUADSPI_SR_TOF


	)

395 
	#QSPI_FLAG_SM
 
QUADSPI_SR_SMF


	)

396 
	#QSPI_FLAG_FT
 
QUADSPI_SR_FTF


	)

397 
	#QSPI_FLAG_TC
 
QUADSPI_SR_TCF


	)

398 
	#QSPI_FLAG_TE
 
QUADSPI_SR_TEF


	)

406 
	#QSPI_IT_TO
 
QUADSPI_CR_TOIE


	)

407 
	#QSPI_IT_SM
 
QUADSPI_CR_SMIE


	)

408 
	#QSPI_IT_FT
 
QUADSPI_CR_FTIE


	)

409 
	#QSPI_IT_TC
 
QUADSPI_CR_TCIE


	)

410 
	#QSPI_IT_TE
 
QUADSPI_CR_TEIE


	)

418 
	#HAL_QPSI_TIMEOUT_DEFAULT_VALUE
 ((
uöt32_t
)5000)

	)

436 
	#__HAL_QSPI_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_QSPI_STATE_RESET
)

	)

442 
	#__HAL_QSPI_ENABLE
(
__HANDLE__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR
, 
QUADSPI_CR_EN
)

	)

448 
	#__HAL_QSPI_DISABLE
(
__HANDLE__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR
, 
QUADSPI_CR_EN
)

	)

461 
	#__HAL_QSPI_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR
, (__INTERRUPT__))

	)

475 
	#__HAL_QSPI_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CR
, (__INTERRUPT__))

	)

488 
	#__HAL_QSPI_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(
	`READ_BIT
((__HANDLE__)->
In°™˚
->
CR
, (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

503 
	#__HAL_QSPI_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
	`READ_BIT
((__HANDLE__)->
In°™˚
->
SR
, (__FLAG__)Ë!0)

	)

515 
	#__HAL_QSPI_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë
	`WRITE_REG
((__HANDLE__)->
In°™˚
->
FCR
, (__FLAG__))

	)

529 
HAL_SètusTy≥Def
 
HAL_QSPI_Inô
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

530 
HAL_SètusTy≥Def
 
HAL_QSPI_DeInô
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

531 
HAL_QSPI_M•Inô
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

532 
HAL_QSPI_M•DeInô
(
QSPI_H™dÀTy≥Def
 *
hq•i
);

542 
HAL_QSPI_IRQH™dÀr
(
QSPI_H™dÀTy≥Def
 *
hq•i
);

545 
HAL_SètusTy≥Def
 
HAL_QSPI_Comm™d
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
uöt32_t
 
Timeout
);

546 
HAL_SètusTy≥Def
 
HAL_QSPI_Tønsmô
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
, 
uöt32_t
 
Timeout
);

547 
HAL_SètusTy≥Def
 
HAL_QSPI_Re˚ive
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
, 
uöt32_t
 
Timeout
);

548 
HAL_SètusTy≥Def
 
HAL_QSPI_Comm™d_IT
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
);

549 
HAL_SètusTy≥Def
 
HAL_QSPI_Tønsmô_IT
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
);

550 
HAL_SètusTy≥Def
 
HAL_QSPI_Re˚ive_IT
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
);

551 
HAL_SètusTy≥Def
 
HAL_QSPI_Tønsmô_DMA
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
);

552 
HAL_SètusTy≥Def
 
HAL_QSPI_Re˚ive_DMA
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
);

555 
HAL_SètusTy≥Def
 
HAL_QSPI_AutoPﬁlög
 (
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
QSPI_AutoPﬁlögTy≥Def
 *
cfg
, 
uöt32_t
 
Timeout
);

556 
HAL_SètusTy≥Def
 
HAL_QSPI_AutoPﬁlög_IT
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
QSPI_AutoPﬁlögTy≥Def
 *
cfg
);

559 
HAL_SètusTy≥Def
 
HAL_QSPI_Mem‹yM≠≥d
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
QSPI_Mem‹yM≠≥dTy≥Def
 *
cfg
);

568 
HAL_QSPI_Eº‹CÆlback
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

569 
HAL_QSPI_FifoThªshﬁdCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
);

572 
HAL_QSPI_CmdC∂tCÆlback
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

573 
HAL_QSPI_RxC∂tCÆlback
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

574 
HAL_QSPI_TxC∂tCÆlback
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

575 
HAL_QSPI_RxHÆfC∂tCÆlback
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

576 
HAL_QSPI_TxHÆfC∂tCÆlback
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

579 
HAL_QSPI_SètusM©chCÆlback
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

582 
HAL_QSPI_TimeOutCÆlback
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

591 
HAL_QSPI_SèãTy≥Def
 
HAL_QSPI_GëSèã
(
QSPI_H™dÀTy≥Def
 *
hq•i
);

592 
uöt32_t
 
HAL_QSPI_GëEº‹
(
QSPI_H™dÀTy≥Def
 *
hq•i
);

593 
HAL_SètusTy≥Def
 
HAL_QSPI_Ab‹t
 (
QSPI_H™dÀTy≥Def
 *
hq•i
);

594 
HAL_QSPI_SëTimeout
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt32_t
 
Timeout
);

621 
	#IS_QSPI_CLOCK_PRESCALER
(
PRESCALER
Ë((PRESCALERË<0xFF)

	)

629 
	#IS_QSPI_FIFO_THRESHOLD
(
THR
Ë(((THRË> 0Ë&& ((THRË<32))

	)

634 
	#IS_QSPI_SSHIFT
(
SSHIFT
Ë(((SSHIFTË=
QSPI_SAMPLE_SHIFTING_NONE
) || \

635 ((
SSHIFT
Ë=
QSPI_SAMPLE_SHIFTING_HALFCYCLE
))

	)

640 
	#IS_QSPI_FLASH_SIZE
(
FSIZE
Ë(((FSIZEË<31))

	)

645 
	#IS_QSPI_CS_HIGH_TIME
(
CSHTIME
Ë(((CSHTIMEË=
QSPI_CS_HIGH_TIME_1_CYCLE
) || \

646 ((
CSHTIME
Ë=
QSPI_CS_HIGH_TIME_2_CYCLE
) || \

647 ((
CSHTIME
Ë=
QSPI_CS_HIGH_TIME_3_CYCLE
) || \

648 ((
CSHTIME
Ë=
QSPI_CS_HIGH_TIME_4_CYCLE
) || \

649 ((
CSHTIME
Ë=
QSPI_CS_HIGH_TIME_5_CYCLE
) || \

650 ((
CSHTIME
Ë=
QSPI_CS_HIGH_TIME_6_CYCLE
) || \

651 ((
CSHTIME
Ë=
QSPI_CS_HIGH_TIME_7_CYCLE
) || \

652 ((
CSHTIME
Ë=
QSPI_CS_HIGH_TIME_8_CYCLE
))

	)

654 
	#IS_QSPI_CLOCK_MODE
(
CLKMODE
Ë(((CLKMODEË=
QSPI_CLOCK_MODE_0
) || \

655 ((
CLKMODE
Ë=
QSPI_CLOCK_MODE_3
))

	)

657 
	#IS_QSPI_FLASH_ID
(
FLA
Ë(((FLAË=
QSPI_FLASH_ID_1
) || \

658 ((
FLA
Ë=
QSPI_FLASH_ID_2
))

	)

660 
	#IS_QSPI_DUAL_FLASH_MODE
(
MODE
Ë(((MODEË=
QSPI_DUALFLASH_ENABLE
) || \

661 ((
MODE
Ë=
QSPI_DUALFLASH_DISABLE
))

	)

667 
	#IS_QSPI_INSTRUCTION
(
INSTRUCTION
Ë((INSTRUCTIONË<0xFF)

	)

672 
	#IS_QSPI_ADDRESS_SIZE
(
ADDR_SIZE
Ë(((ADDR_SIZEË=
QSPI_ADDRESS_8_BITS
) || \

673 ((
ADDR_SIZE
Ë=
QSPI_ADDRESS_16_BITS
) || \

674 ((
ADDR_SIZE
Ë=
QSPI_ADDRESS_24_BITS
) || \

675 ((
ADDR_SIZE
Ë=
QSPI_ADDRESS_32_BITS
))

	)

677 
	#IS_QSPI_ALTERNATE_BYTES_SIZE
(
SIZE
Ë(((SIZEË=
QSPI_ALTERNATE_BYTES_8_BITS
) || \

678 ((
SIZE
Ë=
QSPI_ALTERNATE_BYTES_16_BITS
) || \

679 ((
SIZE
Ë=
QSPI_ALTERNATE_BYTES_24_BITS
) || \

680 ((
SIZE
Ë=
QSPI_ALTERNATE_BYTES_32_BITS
))

	)

686 
	#IS_QSPI_DUMMY_CYCLES
(
DCY
Ë((DCYË<31)

	)

691 
	#IS_QSPI_INSTRUCTION_MODE
(
MODE
Ë(((MODEË=
QSPI_INSTRUCTION_NONE
) || \

692 ((
MODE
Ë=
QSPI_INSTRUCTION_1_LINE
) || \

693 ((
MODE
Ë=
QSPI_INSTRUCTION_2_LINES
) || \

694 ((
MODE
Ë=
QSPI_INSTRUCTION_4_LINES
))

	)

696 
	#IS_QSPI_ADDRESS_MODE
(
MODE
Ë(((MODEË=
QSPI_ADDRESS_NONE
) || \

697 ((
MODE
Ë=
QSPI_ADDRESS_1_LINE
) || \

698 ((
MODE
Ë=
QSPI_ADDRESS_2_LINES
) || \

699 ((
MODE
Ë=
QSPI_ADDRESS_4_LINES
))

	)

701 
	#IS_QSPI_ALTERNATE_BYTES_MODE
(
MODE
Ë(((MODEË=
QSPI_ALTERNATE_BYTES_NONE
) || \

702 ((
MODE
Ë=
QSPI_ALTERNATE_BYTES_1_LINE
) || \

703 ((
MODE
Ë=
QSPI_ALTERNATE_BYTES_2_LINES
) || \

704 ((
MODE
Ë=
QSPI_ALTERNATE_BYTES_4_LINES
))

	)

706 
	#IS_QSPI_DATA_MODE
(
MODE
Ë(((MODEË=
QSPI_DATA_NONE
) || \

707 ((
MODE
Ë=
QSPI_DATA_1_LINE
) || \

708 ((
MODE
Ë=
QSPI_DATA_2_LINES
) || \

709 ((
MODE
Ë=
QSPI_DATA_4_LINES
))

	)

711 
	#IS_QSPI_DDR_MODE
(
DDR_MODE
Ë(((DDR_MODEË=
QSPI_DDR_MODE_DISABLE
) || \

712 ((
DDR_MODE
Ë=
QSPI_DDR_MODE_ENABLE
))

	)

714 
	#IS_QSPI_DDR_HHC
(
DDR_HHC
Ë(((DDR_HHCË=
QSPI_DDR_HHC_ANALOG_DELAY
) || \

715 ((
DDR_HHC
Ë=
QSPI_DDR_HHC_HALF_CLK_DELAY
))

	)

717 
	#IS_QSPI_SIOO_MODE
(
SIOO_MODE
Ë(((SIOO_MODEË=
QSPI_SIOO_INST_EVERY_CMD
) || \

718 ((
SIOO_MODE
Ë=
QSPI_SIOO_INST_ONLY_FIRST_CMD
))

	)

723 
	#IS_QSPI_INTERVAL
(
INTERVAL
Ë((INTERVALË<
QUADSPI_PIR_INTERVAL
)

	)

731 
	#IS_QSPI_STATUS_BYTES_SIZE
(
SIZE
Ë(((SIZEË>1Ë&& ((SIZEË<4))

	)

735 
	#IS_QSPI_MATCH_MODE
(
MODE
Ë(((MODEË=
QSPI_MATCH_MODE_AND
) || \

736 ((
MODE
Ë=
QSPI_MATCH_MODE_OR
))

	)

738 
	#IS_QSPI_AUTOMATIC_STOP
(
APMS
Ë(((APMSË=
QSPI_AUTOMATIC_STOP_DISABLE
) || \

739 ((
APMS
Ë=
QSPI_AUTOMATIC_STOP_ENABLE
))

	)

741 
	#IS_QSPI_TIMEOUT_ACTIVATION
(
TCEN
Ë(((TCENË=
QSPI_TIMEOUT_COUNTER_DISABLE
) || \

742 ((
TCEN
Ë=
QSPI_TIMEOUT_COUNTER_ENABLE
))

	)

747 
	#IS_QSPI_TIMEOUT_PERIOD
(
PERIOD
Ë((PERIODË<0xFFFF)

	)

752 
	#IS_QSPI_GET_FLAG
(
FLAG
Ë(((FLAGË=
QSPI_FLAG_BUSY
) || \

753 ((
FLAG
Ë=
QSPI_FLAG_TO
) || \

754 ((
FLAG
Ë=
QSPI_FLAG_SM
) || \

755 ((
FLAG
Ë=
QSPI_FLAG_FT
) || \

756 ((
FLAG
Ë=
QSPI_FLAG_TC
) || \

757 ((
FLAG
Ë=
QSPI_FLAG_TE
))

	)

759 
	#IS_QSPI_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFE0FFFFË=0x00000000Ë&& ((ITË!0x00000000))

	)

782 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rcc.h

39 #i‚de‡
__STM32F4xx_HAL_RCC_H


40 
	#__STM32F4xx_HAL_RCC_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

51 
	~"°m32f4xx_hÆ_rcc_ex.h
"

71 
uöt32_t
 
Oscûœt‹Ty≥
;

74 
uöt32_t
 
HSESèã
;

77 
uöt32_t
 
LSESèã
;

80 
uöt32_t
 
HSISèã
;

83 
uöt32_t
 
HSICÆibøti⁄VÆue
;

86 
uöt32_t
 
LSISèã
;

89 
RCC_PLLInôTy≥Def
 
PLL
;

91 }
	tRCC_OscInôTy≥Def
;

98 
uöt32_t
 
ClockTy≥
;

101 
uöt32_t
 
SYSCLKSour˚
;

104 
uöt32_t
 
AHBCLKDividî
;

107 
uöt32_t
 
APB1CLKDividî
;

110 
uöt32_t
 
APB2CLKDividî
;

113 }
	tRCC_ClkInôTy≥Def
;

127 
	#RCC_OSCILLATORTYPE_NONE
 ((
uöt32_t
)0x00000000)

	)

128 
	#RCC_OSCILLATORTYPE_HSE
 ((
uöt32_t
)0x00000001)

	)

129 
	#RCC_OSCILLATORTYPE_HSI
 ((
uöt32_t
)0x00000002)

	)

130 
	#RCC_OSCILLATORTYPE_LSE
 ((
uöt32_t
)0x00000004)

	)

131 
	#RCC_OSCILLATORTYPE_LSI
 ((
uöt32_t
)0x00000008)

	)

139 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

140 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

141 
	#RCC_HSE_BYPASS
 ((
uöt8_t
)0x05)

	)

149 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

150 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

151 
	#RCC_LSE_BYPASS
 ((
uöt8_t
)0x05)

	)

159 
	#RCC_HSI_OFF
 ((
uöt8_t
)0x00)

	)

160 
	#RCC_HSI_ON
 ((
uöt8_t
)0x01)

	)

168 
	#RCC_LSI_OFF
 ((
uöt8_t
)0x00)

	)

169 
	#RCC_LSI_ON
 ((
uöt8_t
)0x01)

	)

177 
	#RCC_PLL_NONE
 ((
uöt8_t
)0x00)

	)

178 
	#RCC_PLL_OFF
 ((
uöt8_t
)0x01)

	)

179 
	#RCC_PLL_ON
 ((
uöt8_t
)0x02)

	)

187 
	#RCC_PLLP_DIV2
 ((
uöt32_t
)0x00000002)

	)

188 
	#RCC_PLLP_DIV4
 ((
uöt32_t
)0x00000004)

	)

189 
	#RCC_PLLP_DIV6
 ((
uöt32_t
)0x00000006)

	)

190 
	#RCC_PLLP_DIV8
 ((
uöt32_t
)0x00000008)

	)

198 
	#RCC_PLLSOURCE_HSI
 
RCC_PLLCFGR_PLLSRC_HSI


	)

199 
	#RCC_PLLSOURCE_HSE
 
RCC_PLLCFGR_PLLSRC_HSE


	)

207 
	#RCC_CLOCKTYPE_SYSCLK
 ((
uöt32_t
)0x00000001)

	)

208 
	#RCC_CLOCKTYPE_HCLK
 ((
uöt32_t
)0x00000002)

	)

209 
	#RCC_CLOCKTYPE_PCLK1
 ((
uöt32_t
)0x00000004)

	)

210 
	#RCC_CLOCKTYPE_PCLK2
 ((
uöt32_t
)0x00000008)

	)

218 
	#RCC_SYSCLKSOURCE_HSI
 
RCC_CFGR_SW_HSI


	)

219 
	#RCC_SYSCLKSOURCE_HSE
 
RCC_CFGR_SW_HSE


	)

220 
	#RCC_SYSCLKSOURCE_PLLCLK
 
RCC_CFGR_SW_PLL


	)

221 
	#RCC_SYSCLKSOURCE_PLLRCLK
 ((
uöt32_t
)(
RCC_CFGR_SW_0
 | 
RCC_CFGR_SW_1
))

	)

229 
	#RCC_SYSCLKSOURCE_STATUS_HSI
 
RCC_CFGR_SWS_HSI


	)

230 
	#RCC_SYSCLKSOURCE_STATUS_HSE
 
RCC_CFGR_SWS_HSE


	)

231 
	#RCC_SYSCLKSOURCE_STATUS_PLLCLK
 
RCC_CFGR_SWS_PLL


	)

232 
	#RCC_SYSCLKSOURCE_STATUS_PLLRCLK
 ((
uöt32_t
)(
RCC_CFGR_SW_0
 | 
RCC_CFGR_SW_1
)Ë

	)

240 
	#RCC_SYSCLK_DIV1
 
RCC_CFGR_HPRE_DIV1


	)

241 
	#RCC_SYSCLK_DIV2
 
RCC_CFGR_HPRE_DIV2


	)

242 
	#RCC_SYSCLK_DIV4
 
RCC_CFGR_HPRE_DIV4


	)

243 
	#RCC_SYSCLK_DIV8
 
RCC_CFGR_HPRE_DIV8


	)

244 
	#RCC_SYSCLK_DIV16
 
RCC_CFGR_HPRE_DIV16


	)

245 
	#RCC_SYSCLK_DIV64
 
RCC_CFGR_HPRE_DIV64


	)

246 
	#RCC_SYSCLK_DIV128
 
RCC_CFGR_HPRE_DIV128


	)

247 
	#RCC_SYSCLK_DIV256
 
RCC_CFGR_HPRE_DIV256


	)

248 
	#RCC_SYSCLK_DIV512
 
RCC_CFGR_HPRE_DIV512


	)

256 
	#RCC_HCLK_DIV1
 
RCC_CFGR_PPRE1_DIV1


	)

257 
	#RCC_HCLK_DIV2
 
RCC_CFGR_PPRE1_DIV2


	)

258 
	#RCC_HCLK_DIV4
 
RCC_CFGR_PPRE1_DIV4


	)

259 
	#RCC_HCLK_DIV8
 
RCC_CFGR_PPRE1_DIV8


	)

260 
	#RCC_HCLK_DIV16
 
RCC_CFGR_PPRE1_DIV16


	)

268 
	#RCC_RTCCLKSOURCE_LSE
 ((
uöt32_t
)0x00000100)

	)

269 
	#RCC_RTCCLKSOURCE_LSI
 ((
uöt32_t
)0x00000200)

	)

270 
	#RCC_RTCCLKSOURCE_HSE_DIV2
 ((
uöt32_t
)0x00020300)

	)

271 
	#RCC_RTCCLKSOURCE_HSE_DIV3
 ((
uöt32_t
)0x00030300)

	)

272 
	#RCC_RTCCLKSOURCE_HSE_DIV4
 ((
uöt32_t
)0x00040300)

	)

273 
	#RCC_RTCCLKSOURCE_HSE_DIV5
 ((
uöt32_t
)0x00050300)

	)

274 
	#RCC_RTCCLKSOURCE_HSE_DIV6
 ((
uöt32_t
)0x00060300)

	)

275 
	#RCC_RTCCLKSOURCE_HSE_DIV7
 ((
uöt32_t
)0x00070300)

	)

276 
	#RCC_RTCCLKSOURCE_HSE_DIV8
 ((
uöt32_t
)0x00080300)

	)

277 
	#RCC_RTCCLKSOURCE_HSE_DIV9
 ((
uöt32_t
)0x00090300)

	)

278 
	#RCC_RTCCLKSOURCE_HSE_DIV10
 ((
uöt32_t
)0x000A0300)

	)

279 
	#RCC_RTCCLKSOURCE_HSE_DIV11
 ((
uöt32_t
)0x000B0300)

	)

280 
	#RCC_RTCCLKSOURCE_HSE_DIV12
 ((
uöt32_t
)0x000C0300)

	)

281 
	#RCC_RTCCLKSOURCE_HSE_DIV13
 ((
uöt32_t
)0x000D0300)

	)

282 
	#RCC_RTCCLKSOURCE_HSE_DIV14
 ((
uöt32_t
)0x000E0300)

	)

283 
	#RCC_RTCCLKSOURCE_HSE_DIV15
 ((
uöt32_t
)0x000F0300)

	)

284 
	#RCC_RTCCLKSOURCE_HSE_DIV16
 ((
uöt32_t
)0x00100300)

	)

285 
	#RCC_RTCCLKSOURCE_HSE_DIV17
 ((
uöt32_t
)0x00110300)

	)

286 
	#RCC_RTCCLKSOURCE_HSE_DIV18
 ((
uöt32_t
)0x00120300)

	)

287 
	#RCC_RTCCLKSOURCE_HSE_DIV19
 ((
uöt32_t
)0x00130300)

	)

288 
	#RCC_RTCCLKSOURCE_HSE_DIV20
 ((
uöt32_t
)0x00140300)

	)

289 
	#RCC_RTCCLKSOURCE_HSE_DIV21
 ((
uöt32_t
)0x00150300)

	)

290 
	#RCC_RTCCLKSOURCE_HSE_DIV22
 ((
uöt32_t
)0x00160300)

	)

291 
	#RCC_RTCCLKSOURCE_HSE_DIV23
 ((
uöt32_t
)0x00170300)

	)

292 
	#RCC_RTCCLKSOURCE_HSE_DIV24
 ((
uöt32_t
)0x00180300)

	)

293 
	#RCC_RTCCLKSOURCE_HSE_DIV25
 ((
uöt32_t
)0x00190300)

	)

294 
	#RCC_RTCCLKSOURCE_HSE_DIV26
 ((
uöt32_t
)0x001A0300)

	)

295 
	#RCC_RTCCLKSOURCE_HSE_DIV27
 ((
uöt32_t
)0x001B0300)

	)

296 
	#RCC_RTCCLKSOURCE_HSE_DIV28
 ((
uöt32_t
)0x001C0300)

	)

297 
	#RCC_RTCCLKSOURCE_HSE_DIV29
 ((
uöt32_t
)0x001D0300)

	)

298 
	#RCC_RTCCLKSOURCE_HSE_DIV30
 ((
uöt32_t
)0x001E0300)

	)

299 
	#RCC_RTCCLKSOURCE_HSE_DIV31
 ((
uöt32_t
)0x001F0300)

	)

307 
	#RCC_MCO1
 ((
uöt32_t
)0x00000000)

	)

308 
	#RCC_MCO2
 ((
uöt32_t
)0x00000001)

	)

316 
	#RCC_MCO1SOURCE_HSI
 ((
uöt32_t
)0x00000000)

	)

317 
	#RCC_MCO1SOURCE_LSE
 
RCC_CFGR_MCO1_0


	)

318 
	#RCC_MCO1SOURCE_HSE
 
RCC_CFGR_MCO1_1


	)

319 
	#RCC_MCO1SOURCE_PLLCLK
 
RCC_CFGR_MCO1


	)

327 
	#RCC_MCODIV_1
 ((
uöt32_t
)0x00000000)

	)

328 
	#RCC_MCODIV_2
 
RCC_CFGR_MCO1PRE_2


	)

329 
	#RCC_MCODIV_3
 ((
uöt32_t
)
RCC_CFGR_MCO1PRE_0
 | 
RCC_CFGR_MCO1PRE_2
)

	)

330 
	#RCC_MCODIV_4
 ((
uöt32_t
)
RCC_CFGR_MCO1PRE_1
 | 
RCC_CFGR_MCO1PRE_2
)

	)

331 
	#RCC_MCODIV_5
 
RCC_CFGR_MCO1PRE


	)

339 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

340 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

341 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

342 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

343 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

344 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)0x20)

	)

345 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

360 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

361 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

362 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

363 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)0x3B)

	)

366 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

369 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

370 
	#RCC_FLAG_BORRST
 ((
uöt8_t
)0x79)

	)

371 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

372 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

373 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

374 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

375 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

376 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

397 
	#__HAL_RCC_GPIOA_CLK_ENABLE
() do { \

398 
__IO
 
uöt32_t
 
tm¥eg
; \

399 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOAEN
);\

401 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOAEN
);\

402 
	`UNUSED
(
tm¥eg
); \

403 } 0)

	)

404 
	#__HAL_RCC_GPIOB_CLK_ENABLE
() do { \

405 
__IO
 
uöt32_t
 
tm¥eg
; \

406 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOBEN
);\

408 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOBEN
);\

409 
	`UNUSED
(
tm¥eg
); \

410 } 0)

	)

411 
	#__HAL_RCC_GPIOC_CLK_ENABLE
() do { \

412 
__IO
 
uöt32_t
 
tm¥eg
; \

413 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOCEN
);\

415 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOCEN
);\

416 
	`UNUSED
(
tm¥eg
); \

417 } 0)

	)

418 
	#__HAL_RCC_GPIOH_CLK_ENABLE
() do { \

419 
__IO
 
uöt32_t
 
tm¥eg
; \

420 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOHEN
);\

422 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOHEN
);\

423 
	`UNUSED
(
tm¥eg
); \

424 } 0)

	)

425 
	#__HAL_RCC_DMA1_CLK_ENABLE
() do { \

426 
__IO
 
uöt32_t
 
tm¥eg
; \

427 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_DMA1EN
);\

429 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_DMA1EN
);\

430 
	`UNUSED
(
tm¥eg
); \

431 } 0)

	)

432 
	#__HAL_RCC_DMA2_CLK_ENABLE
() do { \

433 
__IO
 
uöt32_t
 
tm¥eg
; \

434 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_DMA2EN
);\

436 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_DMA2EN
);\

437 
	`UNUSED
(
tm¥eg
); \

438 } 0)

	)

440 
	#__HAL_RCC_GPIOA_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOAEN
))

	)

441 
	#__HAL_RCC_GPIOB_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOBEN
))

	)

442 
	#__HAL_RCC_GPIOC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOCEN
))

	)

443 
	#__HAL_RCC_GPIOH_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOHEN
))

	)

444 
	#__HAL_RCC_DMA1_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_DMA1EN
))

	)

445 
	#__HAL_RCC_DMA2_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_DMA2EN
))

	)

458 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

459 
__IO
 
uöt32_t
 
tm¥eg
; \

460 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

462 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

463 
	`UNUSED
(
tm¥eg
); \

464 } 0)

	)

465 
	#__HAL_RCC_WWDG_CLK_ENABLE
() do { \

466 
__IO
 
uöt32_t
 
tm¥eg
; \

467 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

469 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

470 
	`UNUSED
(
tm¥eg
); \

471 } 0)

	)

472 
	#__HAL_RCC_SPI2_CLK_ENABLE
() do { \

473 
__IO
 
uöt32_t
 
tm¥eg
; \

474 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

476 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

477 
	`UNUSED
(
tm¥eg
); \

478 } 0)

	)

479 
	#__HAL_RCC_USART2_CLK_ENABLE
() do { \

480 
__IO
 
uöt32_t
 
tm¥eg
; \

481 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

483 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

484 
	`UNUSED
(
tm¥eg
); \

485 } 0)

	)

486 
	#__HAL_RCC_I2C1_CLK_ENABLE
() do { \

487 
__IO
 
uöt32_t
 
tm¥eg
; \

488 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

490 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

491 
	`UNUSED
(
tm¥eg
); \

492 } 0)

	)

493 
	#__HAL_RCC_I2C2_CLK_ENABLE
() do { \

494 
__IO
 
uöt32_t
 
tm¥eg
; \

495 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

497 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

498 
	`UNUSED
(
tm¥eg
); \

499 } 0)

	)

500 
	#__HAL_RCC_PWR_CLK_ENABLE
() do { \

501 
__IO
 
uöt32_t
 
tm¥eg
; \

502 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

504 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

505 
	`UNUSED
(
tm¥eg
); \

506 } 0)

	)

508 
	#__HAL_RCC_TIM5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM5EN
))

	)

509 
	#__HAL_RCC_WWDG_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_WWDGEN
))

	)

510 
	#__HAL_RCC_SPI2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI2EN
))

	)

511 
	#__HAL_RCC_USART2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART2EN
))

	)

512 
	#__HAL_RCC_I2C1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C1EN
))

	)

513 
	#__HAL_RCC_I2C2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C2EN
))

	)

514 
	#__HAL_RCC_PWR_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_PWREN
))

	)

526 
	#__HAL_RCC_TIM1_CLK_ENABLE
() do { \

527 
__IO
 
uöt32_t
 
tm¥eg
; \

528 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

530 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

531 
	`UNUSED
(
tm¥eg
); \

532 } 0)

	)

533 
	#__HAL_RCC_USART1_CLK_ENABLE
() do { \

534 
__IO
 
uöt32_t
 
tm¥eg
; \

535 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

537 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

538 
	`UNUSED
(
tm¥eg
); \

539 } 0)

	)

540 
	#__HAL_RCC_USART6_CLK_ENABLE
() do { \

541 
__IO
 
uöt32_t
 
tm¥eg
; \

542 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART6EN
);\

544 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART6EN
);\

545 
	`UNUSED
(
tm¥eg
); \

546 } 0)

	)

547 
	#__HAL_RCC_ADC1_CLK_ENABLE
() do { \

548 
__IO
 
uöt32_t
 
tm¥eg
; \

549 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

551 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

552 
	`UNUSED
(
tm¥eg
); \

553 } 0)

	)

554 
	#__HAL_RCC_SPI1_CLK_ENABLE
() do { \

555 
__IO
 
uöt32_t
 
tm¥eg
; \

556 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

558 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

559 
	`UNUSED
(
tm¥eg
); \

560 } 0)

	)

561 
	#__HAL_RCC_SYSCFG_CLK_ENABLE
() do { \

562 
__IO
 
uöt32_t
 
tm¥eg
; \

563 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SYSCFGEN
);\

565 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SYSCFGEN
);\

566 
	`UNUSED
(
tm¥eg
); \

567 } 0)

	)

568 
	#__HAL_RCC_TIM9_CLK_ENABLE
() do { \

569 
__IO
 
uöt32_t
 
tm¥eg
; \

570 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

572 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

573 
	`UNUSED
(
tm¥eg
); \

574 } 0)

	)

575 
	#__HAL_RCC_TIM11_CLK_ENABLE
() do { \

576 
__IO
 
uöt32_t
 
tm¥eg
; \

577 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

579 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

580 
	`UNUSED
(
tm¥eg
); \

581 } 0)

	)

583 
	#__HAL_RCC_TIM1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM1EN
))

	)

584 
	#__HAL_RCC_USART1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_USART1EN
))

	)

585 
	#__HAL_RCC_USART6_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_USART6EN
))

	)

586 
	#__HAL_RCC_ADC1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC1EN
))

	)

587 
	#__HAL_RCC_SPI1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI1EN
))

	)

588 
	#__HAL_RCC_SYSCFG_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SYSCFGEN
))

	)

589 
	#__HAL_RCC_TIM9_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM9EN
))

	)

590 
	#__HAL_RCC_TIM11_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM11EN
))

	)

599 
	#__HAL_RCC_AHB1_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 = 0xFFFFFFFF)

	)

600 
	#__HAL_RCC_GPIOA_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOARST
))

	)

601 
	#__HAL_RCC_GPIOB_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOBRST
))

	)

602 
	#__HAL_RCC_GPIOC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOCRST
))

	)

603 
	#__HAL_RCC_GPIOH_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOHRST
))

	)

604 
	#__HAL_RCC_DMA1_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_DMA1RST
))

	)

605 
	#__HAL_RCC_DMA2_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_DMA2RST
))

	)

607 
	#__HAL_RCC_AHB1_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 = 0x00)

	)

608 
	#__HAL_RCC_GPIOA_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOARST
))

	)

609 
	#__HAL_RCC_GPIOB_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOBRST
))

	)

610 
	#__HAL_RCC_GPIOC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOCRST
))

	)

611 
	#__HAL_RCC_GPIOH_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOHRST
))

	)

612 
	#__HAL_RCC_DMA1_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_DMA1RST
))

	)

613 
	#__HAL_RCC_DMA2_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_DMA2RST
))

	)

622 
	#__HAL_RCC_APB1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0xFFFFFFFF)

	)

623 
	#__HAL_RCC_TIM5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM5RST
))

	)

624 
	#__HAL_RCC_WWDG_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_WWDGRST
))

	)

625 
	#__HAL_RCC_SPI2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI2RST
))

	)

626 
	#__HAL_RCC_USART2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART2RST
))

	)

627 
	#__HAL_RCC_I2C1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C1RST
))

	)

628 
	#__HAL_RCC_I2C2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C2RST
))

	)

629 
	#__HAL_RCC_PWR_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_PWRRST
))

	)

631 
	#__HAL_RCC_APB1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0x00)

	)

632 
	#__HAL_RCC_TIM5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM5RST
))

	)

633 
	#__HAL_RCC_WWDG_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_WWDGRST
))

	)

634 
	#__HAL_RCC_SPI2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI2RST
))

	)

635 
	#__HAL_RCC_USART2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART2RST
))

	)

636 
	#__HAL_RCC_I2C1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C1RST
))

	)

637 
	#__HAL_RCC_I2C2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C2RST
))

	)

638 
	#__HAL_RCC_PWR_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_PWRRST
))

	)

647 
	#__HAL_RCC_APB2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0xFFFFFFFF)

	)

648 
	#__HAL_RCC_TIM1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM1RST
))

	)

649 
	#__HAL_RCC_USART1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_USART1RST
))

	)

650 
	#__HAL_RCC_USART6_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_USART6RST
))

	)

651 
	#__HAL_RCC_ADC_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADCRST
))

	)

652 
	#__HAL_RCC_SPI1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI1RST
))

	)

653 
	#__HAL_RCC_SYSCFG_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SYSCFGRST
))

	)

654 
	#__HAL_RCC_TIM9_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM9RST
))

	)

655 
	#__HAL_RCC_TIM11_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM11RST
))

	)

657 
	#__HAL_RCC_APB2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0x00)

	)

658 
	#__HAL_RCC_TIM1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM1RST
))

	)

659 
	#__HAL_RCC_USART1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_USART1RST
))

	)

660 
	#__HAL_RCC_USART6_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_USART6RST
))

	)

661 
	#__HAL_RCC_ADC_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADCRST
))

	)

662 
	#__HAL_RCC_SPI1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI1RST
))

	)

663 
	#__HAL_RCC_SYSCFG_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SYSCFGRST
))

	)

664 
	#__HAL_RCC_TIM9_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM9RST
))

	)

665 
	#__HAL_RCC_TIM11_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM11RST
))

	)

678 
	#__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOALPEN
))

	)

679 
	#__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOBLPEN
))

	)

680 
	#__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOCLPEN
))

	)

681 
	#__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOHLPEN
))

	)

682 
	#__HAL_RCC_DMA1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_DMA1LPEN
))

	)

683 
	#__HAL_RCC_DMA2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_DMA2LPEN
))

	)

685 
	#__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOALPEN
))

	)

686 
	#__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOBLPEN
))

	)

687 
	#__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOCLPEN
))

	)

688 
	#__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOHLPEN
))

	)

689 
	#__HAL_RCC_DMA1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_DMA1LPEN
))

	)

690 
	#__HAL_RCC_DMA2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_DMA2LPEN
))

	)

703 
	#__HAL_RCC_TIM5_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM5LPEN
))

	)

704 
	#__HAL_RCC_WWDG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_WWDGLPEN
))

	)

705 
	#__HAL_RCC_SPI2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_SPI2LPEN
))

	)

706 
	#__HAL_RCC_USART2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_USART2LPEN
))

	)

707 
	#__HAL_RCC_I2C1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_I2C1LPEN
))

	)

708 
	#__HAL_RCC_I2C2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_I2C2LPEN
))

	)

709 
	#__HAL_RCC_PWR_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_PWRLPEN
))

	)

711 
	#__HAL_RCC_TIM5_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM5LPEN
))

	)

712 
	#__HAL_RCC_WWDG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_WWDGLPEN
))

	)

713 
	#__HAL_RCC_SPI2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_SPI2LPEN
))

	)

714 
	#__HAL_RCC_USART2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_USART2LPEN
))

	)

715 
	#__HAL_RCC_I2C1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_I2C1LPEN
))

	)

716 
	#__HAL_RCC_I2C2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_I2C2LPEN
))

	)

717 
	#__HAL_RCC_PWR_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_PWRLPEN
))

	)

730 
	#__HAL_RCC_TIM1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM1LPEN
))

	)

731 
	#__HAL_RCC_USART1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_USART1LPEN
))

	)

732 
	#__HAL_RCC_USART6_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_USART6LPEN
))

	)

733 
	#__HAL_RCC_ADC1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_ADC1LPEN
))

	)

734 
	#__HAL_RCC_SPI1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI1LPEN
))

	)

735 
	#__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SYSCFGLPEN
))

	)

736 
	#__HAL_RCC_TIM9_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM9LPEN
))

	)

737 
	#__HAL_RCC_TIM11_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM11LPEN
))

	)

739 
	#__HAL_RCC_TIM1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM1LPEN
))

	)

740 
	#__HAL_RCC_USART1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_USART1LPEN
))

	)

741 
	#__HAL_RCC_USART6_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_USART6LPEN
))

	)

742 
	#__HAL_RCC_ADC1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_ADC1LPEN
))

	)

743 
	#__HAL_RCC_SPI1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI1LPEN
))

	)

744 
	#__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SYSCFGLPEN
))

	)

745 
	#__HAL_RCC_TIM9_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM9LPEN
))

	)

746 
	#__HAL_RCC_TIM11_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM11LPEN
))

	)

770 
	#__HAL_RCC_HSI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_HSION_BB
 = 
ENABLE
)

	)

771 
	#__HAL_RCC_HSI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_HSION_BB
 = 
DISABLE
)

	)

779 
	#__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
__HSICÆibøti⁄VÆue__
Ë(
	`MODIFY_REG
(
RCC
->
CR
,\

780 
RCC_CR_HSITRIM
, (
uöt32_t
)(
__HSICÆibøti⁄VÆue__
Ë<< 
	`POSITION_VAL
(RCC_CR_HSITRIM)))

	)

797 
	#__HAL_RCC_LSI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CSR_LSION_BB
 = 
ENABLE
)

	)

798 
	#__HAL_RCC_LSI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CSR_LSION_BB
 = 
DISABLE
)

	)

828 
	#__HAL_RCC_HSE_CONFIG
(
__STATE__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CR_BYTE2_ADDRESS
 = (__STATE__))

	)

855 
	#__HAL_RCC_LSE_CONFIG
(
__STATE__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_BDCR_BYTE0_ADDRESS
 = (__STATE__))

	)

868 
	#__HAL_RCC_RTC_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_RTCEN_BB
 = 
ENABLE
)

	)

869 
	#__HAL_RCC_RTC_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_RTCEN_BB
 = 
DISABLE
)

	)

892 
	#__HAL_RCC_RTC_CLKPRESCALER
(
__RTCCLKSour˚__
Ë(((__RTCCLKSour˚__Ë& 
RCC_BDCR_RTCSEL
) == RCC_BDCR_RTCSEL) ? \

893 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_RTCPRE
, ((
__RTCCLKSour˚__
Ë& 0xFFFFCFF)Ë: 
	`CLEAR_BIT
(RCC->CFGR, RCC_CFGR_RTCPRE)

	)

895 
	#__HAL_RCC_RTC_CONFIG
(
__RTCCLKSour˚__
Ëdÿ{ 
	`__HAL_RCC_RTC_CLKPRESCALER
(__RTCCLKSource__); \

896 
RCC
->
BDCR
 |((
__RTCCLKSour˚__
) & 0x00000FFF); \

897 } 0)

	)

904 
	#__HAL_RCC_BACKUPRESET_FORCE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_BDRST_BB
 = 
ENABLE
)

	)

905 
	#__HAL_RCC_BACKUPRESET_RELEASE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_BDRST_BB
 = 
DISABLE
)

	)

921 
	#__HAL_RCC_PLL_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLON_BB
 = 
ENABLE
)

	)

922 
	#__HAL_RCC_PLL_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLON_BB
 = 
DISABLE
)

	)

932 
	#__HAL_RCC_PLL_PLLSOURCE_CONFIG
(
__PLLSOURCE__
Ë
	`MODIFY_REG
(
RCC
->
PLLCFGR
, 
RCC_PLLCFGR_PLLSRC
, (__PLLSOURCE__))

	)

943 
	#__HAL_RCC_PLL_PLLM_CONFIG
(
__PLLM__
Ë
	`MODIFY_REG
(
RCC
->
PLLCFGR
, 
RCC_PLLCFGR_PLLM
, (__PLLM__))

	)

960 
	#__HAL_RCC_SYSCLK_CONFIG
(
__RCC_SYSCLKSOURCE__
Ë
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_SW
, (__RCC_SYSCLKSOURCE__))

	)

970 
	#__HAL_RCC_GET_SYSCLK_SOURCE
(Ë((
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
))

	)

978 
	#__HAL_RCC_GET_PLL_OSCSOURCE
(Ë((
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
))

	)

1003 
	#__HAL_RCC_MCO1_CONFIG
(
__MCOCLKSOURCE__
, 
__MCODIV__
) \

1004 
	`MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_MCO1
 | 
RCC_CFGR_MCO1PRE
), ((
__MCOCLKSOURCE__
Ë| (
__MCODIV__
)))

	)

1025 
	#__HAL_RCC_MCO2_CONFIG
(
__MCOCLKSOURCE__
, 
__MCODIV__
) \

1026 
	`MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_MCO2
 | 
RCC_CFGR_MCO2PRE
), (
__MCOCLKSOURCE__
 | (
__MCODIV__
 << 3)));

	)

1047 
	#__HAL_RCC_ENABLE_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE1_ADDRESS
 |(__INTERRUPT__))

	)

1060 
	#__HAL_RCC_DISABLE_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE1_ADDRESS
 &~(__INTERRUPT__))

	)

1074 
	#__HAL_RCC_CLEAR_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE2_ADDRESS
 = (__INTERRUPT__))

	)

1088 
	#__HAL_RCC_GET_IT
(
__INTERRUPT__
Ë((
RCC
->
CIR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

1093 
	#__HAL_RCC_CLEAR_RESET_FLAGS
(Ë(
RCC
->
CSR
 |
RCC_CSR_RMVF
)

	)

1113 
	#RCC_FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

1114 
	#__HAL_RCC_GET_FLAG
(
__FLAG__
Ë(((((((__FLAG__Ë>> 5Ë=1)? 
RCC
->
CR
 :((((__FLAG__Ë>> 5Ë=2Ë? RCC->
BDCR
 :((((__FLAG__Ë>> 5Ë=3)? RCC->
CSR
 :RCC->
CIR
))Ë& ((
uöt32_t
)1 << ((__FLAG__Ë& 
RCC_FLAG_MASK
)))!0)? 1 : 0)

	)

1133 
HAL_RCC_DeInô
();

1134 
HAL_SètusTy≥Def
 
HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1135 
HAL_SètusTy≥Def
 
HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
);

1144 
HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
);

1145 
HAL_RCC_E«bÀCSS
();

1146 
HAL_RCC_DißbÀCSS
();

1147 
uöt32_t
 
HAL_RCC_GëSysClockFªq
();

1148 
uöt32_t
 
HAL_RCC_GëHCLKFªq
();

1149 
uöt32_t
 
HAL_RCC_GëPCLK1Fªq
();

1150 
uöt32_t
 
HAL_RCC_GëPCLK2Fªq
();

1151 
HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1152 
HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
);

1155 
HAL_RCC_NMI_IRQH™dÀr
();

1158 
HAL_RCC_CSSCÆlback
();

1179 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

1182 
	#RCC_CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

1183 
	#RCC_HSION_BIT_NUMBER
 0x00

	)

1184 
	#RCC_CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET
 * 32Ë+ (
RCC_HSION_BIT_NUMBER
 * 4))

	)

1186 
	#RCC_CSSON_BIT_NUMBER
 0x13

	)

1187 
	#RCC_CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET
 * 32Ë+ (
RCC_CSSON_BIT_NUMBER
 * 4))

	)

1189 
	#RCC_PLLON_BIT_NUMBER
 0x18

	)

1190 
	#RCC_CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET
 * 32Ë+ (
RCC_PLLON_BIT_NUMBER
 * 4))

	)

1194 
	#RCC_BDCR_OFFSET
 (
RCC_OFFSET
 + 0x70)

	)

1195 
	#RCC_RTCEN_BIT_NUMBER
 0x0F

	)

1196 
	#RCC_BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET
 * 32Ë+ (
RCC_RTCEN_BIT_NUMBER
 * 4))

	)

1198 
	#RCC_BDRST_BIT_NUMBER
 0x10

	)

1199 
	#RCC_BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET
 * 32Ë+ (
RCC_BDRST_BIT_NUMBER
 * 4))

	)

1203 
	#RCC_CSR_OFFSET
 (
RCC_OFFSET
 + 0x74)

	)

1204 
	#RCC_LSION_BIT_NUMBER
 0x00

	)

1205 
	#RCC_CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET
 * 32Ë+ (
RCC_LSION_BIT_NUMBER
 * 4))

	)

1208 
	#RCC_CR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023802)

	)

1211 
	#RCC_CIR_BYTE1_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x01))

	)

1214 
	#RCC_CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x02))

	)

1217 
	#RCC_BDCR_BYTE0_ADDRESS
 (
PERIPH_BASE
 + 
RCC_BDCR_OFFSET
)

	)

1219 
	#RCC_DBP_TIMEOUT_VALUE
 ((
uöt32_t
)100)

	)

1220 
	#RCC_LSE_TIMEOUT_VALUE
 ((
uöt32_t
)5000)

	)

1222 
	#HSE_TIMEOUT_VALUE
 
HSE_STARTUP_TIMEOUT


	)

1223 
	#HSI_TIMEOUT_VALUE
 ((
uöt32_t
)100Ë

	)

1224 
	#LSI_TIMEOUT_VALUE
 ((
uöt32_t
)100Ë

	)

1242 
	#IS_RCC_OSCILLATORTYPE
(
OSCILLATOR
Ë((OSCILLATORË<15)

	)

1244 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

1245 ((
HSE
Ë=
RCC_HSE_BYPASS
))

	)

1247 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

1248 ((
LSE
Ë=
RCC_LSE_BYPASS
))

	)

1250 
	#IS_RCC_HSI
(
HSI
Ë(((HSIË=
RCC_HSI_OFF
Ë|| ((HSIË=
RCC_HSI_ON
))

	)

1252 
	#IS_RCC_LSI
(
LSI
Ë(((LSIË=
RCC_LSI_OFF
Ë|| ((LSIË=
RCC_LSI_ON
))

	)

1254 
	#IS_RCC_PLL
(
PLL
Ë(((PLLË=
RCC_PLL_NONE
Ë||((PLLË=
RCC_PLL_OFF
Ë|| ((PLLË=
RCC_PLL_ON
))

	)

1256 
	#IS_RCC_PLLSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSOURCE_HSI
) || \

1257 ((
SOURCE
Ë=
RCC_PLLSOURCE_HSE
))

	)

1259 
	#IS_RCC_SYSCLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSOURCE_HSI
) || \

1260 ((
SOURCE
Ë=
RCC_SYSCLKSOURCE_HSE
) || \

1261 ((
SOURCE
Ë=
RCC_SYSCLKSOURCE_PLLCLK
) || \

1262 ((
SOURCE
Ë=
RCC_SYSCLKSOURCE_PLLRCLK
))

	)

1264 
	#IS_RCC_PLLM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

1266 
	#IS_RCC_PLLN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

1268 
	#IS_RCC_PLLP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

1270 
	#IS_RCC_PLLQ_VALUE
(
VALUE
Ë((4 <(VALUE)Ë&& ((VALUEË<15))

	)

1272 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_DIV1
Ë|| ((HCLKË=
RCC_SYSCLK_DIV2
) || \

1273 ((
HCLK
Ë=
RCC_SYSCLK_DIV4
Ë|| ((HCLKË=
RCC_SYSCLK_DIV8
) || \

1274 ((
HCLK
Ë=
RCC_SYSCLK_DIV16
Ë|| ((HCLKË=
RCC_SYSCLK_DIV64
) || \

1275 ((
HCLK
Ë=
RCC_SYSCLK_DIV128
Ë|| ((HCLKË=
RCC_SYSCLK_DIV256
) || \

1276 ((
HCLK
Ë=
RCC_SYSCLK_DIV512
))

	)

1278 
	#IS_RCC_CLOCKTYPE
(
CLK
Ë((1 <(CLK)Ë&& ((CLKË<15))

	)

1280 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_DIV1
Ë|| ((PCLKË=
RCC_HCLK_DIV2
) || \

1281 ((
PCLK
Ë=
RCC_HCLK_DIV4
Ë|| ((PCLKË=
RCC_HCLK_DIV8
) || \

1282 ((
PCLK
Ë=
RCC_HCLK_DIV16
))

	)

1284 
	#IS_RCC_MCO
(
MCOx
Ë(((MCOxË=
RCC_MCO1
Ë|| ((MCOxË=
RCC_MCO2
))

	)

1286 
	#IS_RCC_MCO1SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO1SOURCE_HSI
Ë|| ((SOURCEË=
RCC_MCO1SOURCE_LSE
) || \

1287 ((
SOURCE
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((SOURCEË=
RCC_MCO1SOURCE_PLLCLK
))

	)

1289 
	#IS_RCC_MCODIV
(
DIV
Ë(((DIVË=
RCC_MCODIV_1
Ë|| ((DIVË=
RCC_MCODIV_2
) || \

1290 ((
DIV
Ë=
RCC_MCODIV_3
Ë|| ((DIVË=
RCC_MCODIV_4
) || \

1291 ((
DIV
Ë=
RCC_MCODIV_5
))

	)

1292 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

1310 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rcc_ex.h

39 #i‚de‡
__STM32F4xx_HAL_RCC_EX_H


40 
	#__STM32F4xx_HAL_RCC_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
PLLSèã
;

70 
uöt32_t
 
PLLSour˚
;

73 
uöt32_t
 
PLLM
;

76 
uöt32_t
 
PLLN
;

79 
uöt32_t
 
PLLP
;

82 
uöt32_t
 
PLLQ
;

84 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

85 
deföed
(
STM32F479xx
)

86 
uöt32_t
 
PLLR
;

91 }
	tRCC_PLLInôTy≥Def
;

93 #i‡
deföed
(
STM32F446xx
)

99 
uöt32_t
 
PLLI2SM
;

102 
uöt32_t
 
PLLI2SN
;

105 
uöt32_t
 
PLLI2SP
;

108 
uöt32_t
 
PLLI2SQ
;

112 
uöt32_t
 
PLLI2SR
;

115 }
	tRCC_PLLI2SInôTy≥Def
;

122 
uöt32_t
 
PLLSAIM
;

125 
uöt32_t
 
PLLSAIN
;

128 
uöt32_t
 
PLLSAIP
;

131 
uöt32_t
 
PLLSAIQ
;

134 }
	tRCC_PLLSAIInôTy≥Def
;

140 
uöt32_t
 
PîùhClockSñe˘i⁄
;

143 
RCC_PLLI2SInôTy≥Def
 
PLLI2S
;

146 
RCC_PLLSAIInôTy≥Def
 
PLLSAI
;

149 
uöt32_t
 
PLLI2SDivQ
;

153 
uöt32_t
 
PLLSAIDivQ
;

157 
uöt32_t
 
Sai1ClockSñe˘i⁄
;

160 
uöt32_t
 
Sai2ClockSñe˘i⁄
;

163 
uöt32_t
 
I2sApb1ClockSñe˘i⁄
;

166 
uöt32_t
 
I2sApb2ClockSñe˘i⁄
;

169 
uöt32_t
 
RTCClockSñe˘i⁄
;

172 
uöt32_t
 
SdioClockSñe˘i⁄
;

175 
uöt32_t
 
CecClockSñe˘i⁄
;

178 
uöt32_t
 
Fmpi2c1ClockSñe˘i⁄
;

181 
uöt32_t
 
SpdifClockSñe˘i⁄
;

184 
uöt32_t
 
Clk48ClockSñe˘i⁄
;

187 
uöt8_t
 
TIMPªsSñe˘i⁄
;

189 }
	tRCC_PîùhCLKInôTy≥Def
;

192 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

198 
uöt32_t
 
PîùhClockSñe˘i⁄
;

201 
uöt32_t
 
I2SClockSñe˘i⁄
;

204 
uöt32_t
 
RTCClockSñe˘i⁄
;

207 
uöt32_t
 
L±im1ClockSñe˘i⁄
;

210 
uöt32_t
 
Fmpi2c1ClockSñe˘i⁄
;

212 
uöt8_t
 
TIMPªsSñe˘i⁄
;

214 }
	tRCC_PîùhCLKInôTy≥Def
;

217 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

224 
uöt32_t
 
PLLI2SN
;

228 
uöt32_t
 
PLLI2SR
;

232 
uöt32_t
 
PLLI2SQ
;

235 }
	tRCC_PLLI2SInôTy≥Def
;

242 
uöt32_t
 
PLLSAIN
;

245 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

246 
uöt32_t
 
PLLSAIP
;

251 
uöt32_t
 
PLLSAIQ
;

255 
uöt32_t
 
PLLSAIR
;

259 }
	tRCC_PLLSAIInôTy≥Def
;

265 
uöt32_t
 
PîùhClockSñe˘i⁄
;

268 
RCC_PLLI2SInôTy≥Def
 
PLLI2S
;

271 
RCC_PLLSAIInôTy≥Def
 
PLLSAI
;

274 
uöt32_t
 
PLLI2SDivQ
;

278 
uöt32_t
 
PLLSAIDivQ
;

282 
uöt32_t
 
PLLSAIDivR
;

285 
uöt32_t
 
RTCClockSñe˘i⁄
;

288 
uöt8_t
 
TIMPªsSñe˘i⁄
;

290 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

291 
uöt32_t
 
Clk48ClockSñe˘i⁄
;

294 
uöt32_t
 
SdioClockSñe˘i⁄
;

297 }
	tRCC_PîùhCLKInôTy≥Def
;

300 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

301 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
)

307 #i‡
deföed
(
STM32F411xE
)

308 
uöt32_t
 
PLLI2SM
;

312 
uöt32_t
 
PLLI2SN
;

316 
uöt32_t
 
PLLI2SR
;

320 }
	tRCC_PLLI2SInôTy≥Def
;

328 
uöt32_t
 
PîùhClockSñe˘i⁄
;

331 
RCC_PLLI2SInôTy≥Def
 
PLLI2S
;

334 
uöt32_t
 
RTCClockSñe˘i⁄
;

337 }
	tRCC_PîùhCLKInôTy≥Def
;

352 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

353 
	#RCC_PERIPHCLK_I2S
 ((
uöt32_t
)0x00000001)

	)

354 
	#RCC_PERIPHCLK_TIM
 ((
uöt32_t
)0x00000002)

	)

355 
	#RCC_PERIPHCLK_RTC
 ((
uöt32_t
)0x00000004)

	)

356 
	#RCC_PERIPHCLK_FMPI2C1
 ((
uöt32_t
)0x00000008)

	)

357 
	#RCC_PERIPHCLK_LPTIM1
 ((
uöt32_t
)0x00000010)

	)

362 #i‡
deföed
(
STM32F446xx
)

363 
	#RCC_PERIPHCLK_I2S_APB1
 ((
uöt32_t
)0x00000001)

	)

364 
	#RCC_PERIPHCLK_I2S_APB2
 ((
uöt32_t
)0x00000002)

	)

365 
	#RCC_PERIPHCLK_SAI1
 ((
uöt32_t
)0x00000004)

	)

366 
	#RCC_PERIPHCLK_SAI2
 ((
uöt32_t
)0x00000008)

	)

367 
	#RCC_PERIPHCLK_TIM
 ((
uöt32_t
)0x00000010)

	)

368 
	#RCC_PERIPHCLK_RTC
 ((
uöt32_t
)0x00000020)

	)

369 
	#RCC_PERIPHCLK_CEC
 ((
uöt32_t
)0x00000040)

	)

370 
	#RCC_PERIPHCLK_FMPI2C1
 ((
uöt32_t
)0x00000080)

	)

371 
	#RCC_PERIPHCLK_CK48
 ((
uöt32_t
)0x00000100)

	)

372 
	#RCC_PERIPHCLK_SDIO
 ((
uöt32_t
)0x00000200)

	)

373 
	#RCC_PERIPHCLK_SPDIFRX
 ((
uöt32_t
)0x00000400)

	)

374 
	#RCC_PERIPHCLK_PLLI2S
 ((
uöt32_t
)0x00000800)

	)

379 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

380 
	#RCC_PERIPHCLK_I2S
 ((
uöt32_t
)0x00000001)

	)

381 
	#RCC_PERIPHCLK_SAI_PLLI2S
 ((
uöt32_t
)0x00000002)

	)

382 
	#RCC_PERIPHCLK_SAI_PLLSAI
 ((
uöt32_t
)0x00000004)

	)

383 
	#RCC_PERIPHCLK_LTDC
 ((
uöt32_t
)0x00000008)

	)

384 
	#RCC_PERIPHCLK_TIM
 ((
uöt32_t
)0x00000010)

	)

385 
	#RCC_PERIPHCLK_RTC
 ((
uöt32_t
)0x00000020)

	)

386 
	#RCC_PERIPHCLK_PLLI2S
 ((
uöt32_t
)0x00000040)

	)

387 
	#RCC_PERIPHCLK_CK48
 ((
uöt32_t
)0x00000080)

	)

388 
	#RCC_PERIPHCLK_SDIO
 ((
uöt32_t
)0x00000100)

	)

393 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

394 
	#RCC_PERIPHCLK_I2S
 ((
uöt32_t
)0x00000001)

	)

395 
	#RCC_PERIPHCLK_SAI_PLLI2S
 ((
uöt32_t
)0x00000002)

	)

396 
	#RCC_PERIPHCLK_SAI_PLLSAI
 ((
uöt32_t
)0x00000004)

	)

397 
	#RCC_PERIPHCLK_LTDC
 ((
uöt32_t
)0x00000008)

	)

398 
	#RCC_PERIPHCLK_TIM
 ((
uöt32_t
)0x00000010)

	)

399 
	#RCC_PERIPHCLK_RTC
 ((
uöt32_t
)0x00000020)

	)

400 
	#RCC_PERIPHCLK_PLLI2S
 ((
uöt32_t
)0x00000040)

	)

405 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
)|| deföed(
STM32F417xx
) ||\

406 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
)

407 
	#RCC_PERIPHCLK_I2S
 ((
uöt32_t
)0x00000001)

	)

408 
	#RCC_PERIPHCLK_RTC
 ((
uöt32_t
)0x00000002)

	)

409 
	#RCC_PERIPHCLK_PLLI2S
 ((
uöt32_t
)0x00000004)

	)

415 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

416 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

417 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

418 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

422 
	#RCC_I2SCLKSOURCE_PLLI2S
 ((
uöt32_t
)0x00000000)

	)

423 
	#RCC_I2SCLKSOURCE_EXT
 ((
uöt32_t
)0x00000001)

	)

428 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

433 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
) ||\

434 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

435 
	#RCC_PLLSAIDIVR_2
 ((
uöt32_t
)0x00000000)

	)

436 
	#RCC_PLLSAIDIVR_4
 ((
uöt32_t
)0x00010000)

	)

437 
	#RCC_PLLSAIDIVR_8
 ((
uöt32_t
)0x00020000)

	)

438 
	#RCC_PLLSAIDIVR_16
 ((
uöt32_t
)0x00030000)

	)

447 #i‡
deföed
(
STM32F446xx
)

448 
	#RCC_PLLI2SP_DIV2
 ((
uöt32_t
)0x00000002)

	)

449 
	#RCC_PLLI2SP_DIV4
 ((
uöt32_t
)0x00000004)

	)

450 
	#RCC_PLLI2SP_DIV6
 ((
uöt32_t
)0x00000006)

	)

451 
	#RCC_PLLI2SP_DIV8
 ((
uöt32_t
)0x00000008)

	)

460 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

461 
	#RCC_PLLSAIP_DIV2
 ((
uöt32_t
)0x00000002)

	)

462 
	#RCC_PLLSAIP_DIV4
 ((
uöt32_t
)0x00000004)

	)

463 
	#RCC_PLLSAIP_DIV6
 ((
uöt32_t
)0x00000006)

	)

464 
	#RCC_PLLSAIP_DIV8
 ((
uöt32_t
)0x00000008)

	)

470 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

474 
	#RCC_SAIACLKSOURCE_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

475 
	#RCC_SAIACLKSOURCE_PLLI2S
 ((
uöt32_t
)0x00100000)

	)

476 
	#RCC_SAIACLKSOURCE_EXT
 ((
uöt32_t
)0x00200000)

	)

484 
	#RCC_SAIBCLKSOURCE_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

485 
	#RCC_SAIBCLKSOURCE_PLLI2S
 ((
uöt32_t
)0x00400000)

	)

486 
	#RCC_SAIBCLKSOURCE_EXT
 ((
uöt32_t
)0x00800000)

	)

492 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

496 
	#RCC_CK48CLKSOURCE_PLLQ
 ((
uöt32_t
)0x00000000)

	)

497 
	#RCC_CK48CLKSOURCE_PLLSAIP
 ((
uöt32_t
)
RCC_DCKCFGR_CK48MSEL
)

	)

505 
	#RCC_SDIOCLKSOURCE_CK48
 ((
uöt32_t
)0x00000000)

	)

506 
	#RCC_SDIOCLKSOURCE_SYSCLK
 ((
uöt32_t
)
RCC_DCKCFGR_SDIOSEL
)

	)

514 
	#RCC_DSICLKSOURCE_DSIPHY
 ((
uöt32_t
)0x00000000)

	)

515 
	#RCC_DSICLKSOURCE_PLLR
 ((
uöt32_t
)
RCC_DCKCFGR_DSISEL
)

	)

521 #i‡
deföed
(
STM32F446xx
)

525 
	#RCC_SAI1CLKSOURCE_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

526 
	#RCC_SAI1CLKSOURCE_PLLI2S
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC_0
)

	)

527 
	#RCC_SAI1CLKSOURCE_PLLR
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC_1
)

	)

528 
	#RCC_SAI1CLKSOURCE_EXT
 ((
uöt32_t
)
RCC_DCKCFGR_SAI1SRC
)

	)

536 
	#RCC_SAI2CLKSOURCE_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

537 
	#RCC_SAI2CLKSOURCE_PLLI2S
 ((
uöt32_t
)
RCC_DCKCFGR_SAI2SRC_0
)

	)

538 
	#RCC_SAI2CLKSOURCE_PLLR
 ((
uöt32_t
)
RCC_DCKCFGR_SAI2SRC_1
)

	)

539 
	#RCC_SAI2CLKSOURCE_PLLSRC
 ((
uöt32_t
)
RCC_DCKCFGR_SAI2SRC
)

	)

547 
	#RCC_I2SAPB1CLKSOURCE_PLLI2S
 ((
uöt32_t
)0x00000000)

	)

548 
	#RCC_I2SAPB1CLKSOURCE_EXT
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC_0
)

	)

549 
	#RCC_I2SAPB1CLKSOURCE_PLLR
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC_1
)

	)

550 
	#RCC_I2SAPB1CLKSOURCE_PLLSRC
 ((
uöt32_t
)
RCC_DCKCFGR_I2S1SRC
)

	)

558 
	#RCC_I2SAPB2CLKSOURCE_PLLI2S
 ((
uöt32_t
)0x00000000)

	)

559 
	#RCC_I2SAPB2CLKSOURCE_EXT
 ((
uöt32_t
)
RCC_DCKCFGR_I2S2SRC_0
)

	)

560 
	#RCC_I2SAPB2CLKSOURCE_PLLR
 ((
uöt32_t
)
RCC_DCKCFGR_I2S2SRC_1
)

	)

561 
	#RCC_I2SAPB2CLKSOURCE_PLLSRC
 ((
uöt32_t
)
RCC_DCKCFGR_I2S2SRC
)

	)

569 
	#RCC_FMPI2C1CLKSOURCE_APB
 ((
uöt32_t
)0x00000000)

	)

570 
	#RCC_FMPI2C1CLKSOURCE_SYSCLK
 ((
uöt32_t
)
RCC_DCKCFGR2_FMPI2C1SEL_0
)

	)

571 
	#RCC_FMPI2C1CLKSOURCE_HSI
 ((
uöt32_t
)
RCC_DCKCFGR2_FMPI2C1SEL_1
)

	)

579 
	#RCC_CECCLKSOURCE_HSI
 ((
uöt32_t
)0x00000000)

	)

580 
	#RCC_CECCLKSOURCE_LSE
 ((
uöt32_t
)
RCC_DCKCFGR2_CECSEL
)

	)

588 
	#RCC_CK48CLKSOURCE_PLLQ
 ((
uöt32_t
)0x00000000)

	)

589 
	#RCC_CK48CLKSOURCE_PLLSAIP
 ((
uöt32_t
)
RCC_DCKCFGR2_CK48MSEL
)

	)

597 
	#RCC_SDIOCLKSOURCE_CK48
 ((
uöt32_t
)0x00000000)

	)

598 
	#RCC_SDIOCLKSOURCE_SYSCLK
 ((
uöt32_t
)
RCC_DCKCFGR2_SDIOSEL
)

	)

606 
	#RCC_SPDIFRXCLKSOURCE_PLLR
 ((
uöt32_t
)0x00000000)

	)

607 
	#RCC_SPDIFRXCLKSOURCE_PLLI2SP
 ((
uöt32_t
)
RCC_DCKCFGR2_SPDIFRXSEL
)

	)

614 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

619 
	#RCC_I2SAPBCLKSOURCE_PLLR
 ((
uöt32_t
)0x00000000)

	)

620 
	#RCC_I2SAPBCLKSOURCE_EXT
 ((
uöt32_t
)
RCC_DCKCFGR_I2SSRC_0
)

	)

621 
	#RCC_I2SAPBCLKSOURCE_PLLSRC
 ((
uöt32_t
)
RCC_DCKCFGR_I2SSRC_1
)

	)

629 
	#RCC_FMPI2C1CLKSOURCE_APB
 ((
uöt32_t
)0x00000000)

	)

630 
	#RCC_FMPI2C1CLKSOURCE_SYSCLK
 ((
uöt32_t
)
RCC_DCKCFGR2_FMPI2C1SEL_0
)

	)

631 
	#RCC_FMPI2C1CLKSOURCE_HSI
 ((
uöt32_t
)
RCC_DCKCFGR2_FMPI2C1SEL_1
)

	)

639 
	#RCC_LPTIM1CLKSOURCE_PCLK
 ((
uöt32_t
)0x00000000)

	)

640 
	#RCC_LPTIM1CLKSOURCE_HSI
 ((
uöt32_t
)
RCC_DCKCFGR2_LPTIM1SEL_0
)

	)

641 
	#RCC_LPTIM1CLKSOURCE_LSI
 ((
uöt32_t
)
RCC_DCKCFGR2_LPTIM1SEL_1
)

	)

642 
	#RCC_LPTIM1CLKSOURCE_LSE
 ((
uöt32_t
)
RCC_DCKCFGR2_LPTIM1SEL_0
 | 
RCC_DCKCFGR2_LPTIM1SEL_1
)

	)

650 
	#RCC_TIMPRES_DESACTIVATED
 ((
uöt8_t
)0x00)

	)

651 
	#RCC_TIMPRES_ACTIVATED
 ((
uöt8_t
)0x01)

	)

657 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

658 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) ||\

659 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

663 
	#RCC_TIMPRES_DESACTIVATED
 ((
uöt8_t
)0x00)

	)

664 
	#RCC_TIMPRES_ACTIVATED
 ((
uöt8_t
)0x01)

	)

669 
STM32F410xx
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

671 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F411xE
) ||\

672 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

676 
	#RCC_LSE_LOWPOWER_MODE
 ((
uöt8_t
)0x00)

	)

677 
	#RCC_LSE_HIGHDRIVE_MODE
 ((
uöt8_t
)0x01)

	)

684 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

685 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

686 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

687 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

691 
	#RCC_MCO2SOURCE_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

692 
	#RCC_MCO2SOURCE_PLLI2SCLK
 
RCC_CFGR_MCO2_0


	)

693 
	#RCC_MCO2SOURCE_HSE
 
RCC_CFGR_MCO2_1


	)

694 
	#RCC_MCO2SOURCE_PLLCLK
 
RCC_CFGR_MCO2


	)

699 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

701 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

705 
	#RCC_MCO2SOURCE_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

706 
	#RCC_MCO2SOURCE_I2SCLK
 
RCC_CFGR_MCO2_0


	)

707 
	#RCC_MCO2SOURCE_HSE
 
RCC_CFGR_MCO2_1


	)

708 
	#RCC_MCO2SOURCE_PLLCLK
 
RCC_CFGR_MCO2


	)

723 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

730 
	#__HAL_RCC_BKPSRAM_CLK_ENABLE
() do { \

731 
__IO
 
uöt32_t
 
tm¥eg
; \

732 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

734 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

735 
	`UNUSED
(
tm¥eg
); \

736 } 0)

	)

737 
	#__HAL_RCC_CCMDATARAMEN_CLK_ENABLE
() do { \

738 
__IO
 
uöt32_t
 
tm¥eg
; \

739 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

741 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

742 
	`UNUSED
(
tm¥eg
); \

743 } 0)

	)

744 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

745 
__IO
 
uöt32_t
 
tm¥eg
; \

746 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

748 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

749 
	`UNUSED
(
tm¥eg
); \

750 } 0)

	)

751 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

752 
__IO
 
uöt32_t
 
tm¥eg
; \

753 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

755 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

756 
	`UNUSED
(
tm¥eg
); \

757 } 0)

	)

758 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

759 
__IO
 
uöt32_t
 
tm¥eg
; \

760 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

762 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

763 
	`UNUSED
(
tm¥eg
); \

764 } 0)

	)

765 
	#__HAL_RCC_GPIOI_CLK_ENABLE
() do { \

766 
__IO
 
uöt32_t
 
tm¥eg
; \

767 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOIEN
);\

769 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOIEN
);\

770 
	`UNUSED
(
tm¥eg
); \

771 } 0)

	)

772 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

773 
__IO
 
uöt32_t
 
tm¥eg
; \

774 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOFEN
);\

776 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOFEN
);\

777 
	`UNUSED
(
tm¥eg
); \

778 } 0)

	)

779 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

780 
__IO
 
uöt32_t
 
tm¥eg
; \

781 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOGEN
);\

783 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOGEN
);\

784 
	`UNUSED
(
tm¥eg
); \

785 } 0)

	)

786 
	#__HAL_RCC_GPIOJ_CLK_ENABLE
() do { \

787 
__IO
 
uöt32_t
 
tm¥eg
; \

788 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOJEN
);\

790 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOJEN
);\

791 
	`UNUSED
(
tm¥eg
); \

792 } 0)

	)

793 
	#__HAL_RCC_GPIOK_CLK_ENABLE
() do { \

794 
__IO
 
uöt32_t
 
tm¥eg
; \

795 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOKEN
);\

797 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOKEN
);\

798 
	`UNUSED
(
tm¥eg
); \

799 } 0)

	)

800 
	#__HAL_RCC_DMA2D_CLK_ENABLE
() do { \

801 
__IO
 
uöt32_t
 
tm¥eg
; \

802 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_DMA2DEN
);\

804 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_DMA2DEN
);\

805 
	`UNUSED
(
tm¥eg
); \

806 } 0)

	)

807 
	#__HAL_RCC_ETHMAC_CLK_ENABLE
() do { \

808 
__IO
 
uöt32_t
 
tm¥eg
; \

809 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACEN
);\

811 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACEN
);\

812 
	`UNUSED
(
tm¥eg
); \

813 } 0)

	)

814 
	#__HAL_RCC_ETHMACTX_CLK_ENABLE
() do { \

815 
__IO
 
uöt32_t
 
tm¥eg
; \

816 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACTXEN
);\

818 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACTXEN
);\

819 
	`UNUSED
(
tm¥eg
); \

820 } 0)

	)

821 
	#__HAL_RCC_ETHMACRX_CLK_ENABLE
() do { \

822 
__IO
 
uöt32_t
 
tm¥eg
; \

823 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACRXEN
);\

825 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACRXEN
);\

826 
	`UNUSED
(
tm¥eg
); \

827 } 0)

	)

828 
	#__HAL_RCC_ETHMACPTP_CLK_ENABLE
() do { \

829 
__IO
 
uöt32_t
 
tm¥eg
; \

830 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACPTPEN
);\

832 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACPTPEN
);\

833 
	`UNUSED
(
tm¥eg
); \

834 } 0)

	)

835 
	#__HAL_RCC_USB_OTG_HS_CLK_ENABLE
() do { \

836 
__IO
 
uöt32_t
 
tm¥eg
; \

837 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSEN
);\

839 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSEN
);\

840 
	`UNUSED
(
tm¥eg
); \

841 } 0)

	)

842 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE
() do { \

843 
__IO
 
uöt32_t
 
tm¥eg
; \

844 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSULPIEN
);\

846 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSULPIEN
);\

847 
	`UNUSED
(
tm¥eg
); \

848 } 0)

	)

849 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIODEN
))

	)

850 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOEEN
))

	)

851 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOFEN
))

	)

852 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOGEN
))

	)

853 
	#__HAL_RCC_GPIOI_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOIEN
))

	)

854 
	#__HAL_RCC_GPIOJ_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOJEN
))

	)

855 
	#__HAL_RCC_GPIOK_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOKEN
))

	)

856 
	#__HAL_RCC_DMA2D_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_DMA2DEN
))

	)

857 
	#__HAL_RCC_ETHMAC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_ETHMACEN
))

	)

858 
	#__HAL_RCC_ETHMACTX_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_ETHMACTXEN
))

	)

859 
	#__HAL_RCC_ETHMACRX_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_ETHMACRXEN
))

	)

860 
	#__HAL_RCC_ETHMACPTP_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_ETHMACPTPEN
))

	)

861 
	#__HAL_RCC_USB_OTG_HS_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_OTGHSEN
))

	)

862 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_OTGHSULPIEN
))

	)

863 
	#__HAL_RCC_BKPSRAM_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_BKPSRAMEN
))

	)

864 
	#__HAL_RCC_CCMDATARAMEN_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CCMDATARAMEN
))

	)

865 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CRCEN
))

	)

870 
	#__HAL_RCC_ETH_CLK_ENABLE
() do { \

871 
	`__HAL_RCC_ETHMAC_CLK_ENABLE
(); \

872 
	`__HAL_RCC_ETHMACTX_CLK_ENABLE
(); \

873 
	`__HAL_RCC_ETHMACRX_CLK_ENABLE
(); \

874 } 0)

	)

878 
	#__HAL_RCC_ETH_CLK_DISABLE
() do { \

879 
	`__HAL_RCC_ETHMACTX_CLK_DISABLE
(); \

880 
	`__HAL_RCC_ETHMACRX_CLK_DISABLE
(); \

881 
	`__HAL_RCC_ETHMAC_CLK_DISABLE
(); \

882 } 0)

	)

893 
	#__HAL_RCC_DCMI_CLK_ENABLE
() do { \

894 
__IO
 
uöt32_t
 
tm¥eg
; \

895 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_DCMIEN
);\

897 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_DCMIEN
);\

898 
	`UNUSED
(
tm¥eg
); \

899 } 0)

	)

900 
	#__HAL_RCC_DCMI_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_DCMIEN
))

	)

902 #i‡
deföed
(
STM32F437xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

903 
	#__HAL_RCC_CRYP_CLK_ENABLE
() do { \

904 
__IO
 
uöt32_t
 
tm¥eg
; \

905 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_CRYPEN
);\

907 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_CRYPEN
);\

908 
	`UNUSED
(
tm¥eg
); \

909 } 0)

	)

910 
	#__HAL_RCC_HASH_CLK_ENABLE
() do { \

911 
__IO
 
uöt32_t
 
tm¥eg
; \

912 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_HASHEN
);\

914 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_HASHEN
);\

915 
	`UNUSED
(
tm¥eg
); \

916 } 0)

	)

918 
	#__HAL_RCC_CRYP_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_CRYPEN
))

	)

919 
	#__HAL_RCC_HASH_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_HASHEN
))

	)

932 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
(Ëdÿ{(
RCC
->
AHB2ENR
 |(
RCC_AHB2ENR_OTGFSEN
));\

933 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();\

934 }0)

	)

936 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ëdÿ{ (
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_OTGFSEN
));\

937 
	`__HAL_RCC_SYSCFG_CLK_DISABLE
();\

938 }0)

	)

940 
	#__HAL_RCC_RNG_CLK_ENABLE
() do { \

941 
__IO
 
uöt32_t
 
tm¥eg
; \

942 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_RNGEN
);\

944 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_RNGEN
);\

945 
	`UNUSED
(
tm¥eg
); \

946 } 0)

	)

947 
	#__HAL_RCC_RNG_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_RNGEN
))

	)

958 
	#__HAL_RCC_FMC_CLK_ENABLE
() do { \

959 
__IO
 
uöt32_t
 
tm¥eg
; \

960 
	`SET_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_FMCEN
);\

962 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_FMCEN
);\

963 
	`UNUSED
(
tm¥eg
); \

964 } 0)

	)

965 
	#__HAL_RCC_FMC_CLK_DISABLE
(Ë(
RCC
->
AHB3ENR
 &~(
RCC_AHB3ENR_FMCEN
))

	)

966 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

967 
	#__HAL_RCC_QSPI_CLK_ENABLE
() do { \

968 
__IO
 
uöt32_t
 
tm¥eg
; \

969 
	`SET_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_QSPIEN
);\

971 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_QSPIEN
);\

972 
	`UNUSED
(
tm¥eg
); \

973 } 0)

	)

974 
	#__HAL_RCC_QSPI_CLK_DISABLE
(Ë(
RCC
->
AHB3ENR
 &~(
RCC_AHB3ENR_QSPIEN
))

	)

986 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

987 
__IO
 
uöt32_t
 
tm¥eg
; \

988 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

990 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

991 
	`UNUSED
(
tm¥eg
); \

992 } 0)

	)

993 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

994 
__IO
 
uöt32_t
 
tm¥eg
; \

995 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

997 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

998 
	`UNUSED
(
tm¥eg
); \

999 } 0)

	)

1000 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

1001 
__IO
 
uöt32_t
 
tm¥eg
; \

1002 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1004 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1005 
	`UNUSED
(
tm¥eg
); \

1006 } 0)

	)

1007 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

1008 
__IO
 
uöt32_t
 
tm¥eg
; \

1009 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1011 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1012 
	`UNUSED
(
tm¥eg
); \

1013 } 0)

	)

1014 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

1015 
__IO
 
uöt32_t
 
tm¥eg
; \

1016 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1018 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1019 
	`UNUSED
(
tm¥eg
); \

1020 } 0)

	)

1021 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

1022 
__IO
 
uöt32_t
 
tm¥eg
; \

1023 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1025 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1026 
	`UNUSED
(
tm¥eg
); \

1027 } 0)

	)

1028 
	#__HAL_RCC_USART3_CLK_ENABLE
() do { \

1029 
__IO
 
uöt32_t
 
tm¥eg
; \

1030 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

1032 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

1033 
	`UNUSED
(
tm¥eg
); \

1034 } 0)

	)

1035 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

1036 
__IO
 
uöt32_t
 
tm¥eg
; \

1037 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

1039 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

1040 
	`UNUSED
(
tm¥eg
); \

1041 } 0)

	)

1042 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

1043 
__IO
 
uöt32_t
 
tm¥eg
; \

1044 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1046 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1047 
	`UNUSED
(
tm¥eg
); \

1048 } 0)

	)

1049 
	#__HAL_RCC_CAN1_CLK_ENABLE
() do { \

1050 
__IO
 
uöt32_t
 
tm¥eg
; \

1051 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

1053 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

1054 
	`UNUSED
(
tm¥eg
); \

1055 } 0)

	)

1056 
	#__HAL_RCC_CAN2_CLK_ENABLE
() do { \

1057 
__IO
 
uöt32_t
 
tm¥eg
; \

1058 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1060 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1061 
	`UNUSED
(
tm¥eg
); \

1062 } 0)

	)

1063 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

1064 
__IO
 
uöt32_t
 
tm¥eg
; \

1065 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

1067 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

1068 
	`UNUSED
(
tm¥eg
); \

1069 } 0)

	)

1070 
	#__HAL_RCC_UART7_CLK_ENABLE
() do { \

1071 
__IO
 
uöt32_t
 
tm¥eg
; \

1072 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART7EN
);\

1074 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART7EN
);\

1075 
	`UNUSED
(
tm¥eg
); \

1076 } 0)

	)

1077 
	#__HAL_RCC_UART8_CLK_ENABLE
() do { \

1078 
__IO
 
uöt32_t
 
tm¥eg
; \

1079 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART8EN
);\

1081 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART8EN
);\

1082 
	`UNUSED
(
tm¥eg
); \

1083 } 0)

	)

1084 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

1085 
__IO
 
uöt32_t
 
tm¥eg
; \

1086 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

1088 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

1089 
	`UNUSED
(
tm¥eg
); \

1090 } 0)

	)

1091 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

1092 
__IO
 
uöt32_t
 
tm¥eg
; \

1093 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

1095 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

1096 
	`UNUSED
(
tm¥eg
); \

1097 } 0)

	)

1098 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

1099 
__IO
 
uöt32_t
 
tm¥eg
; \

1100 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

1102 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

1103 
	`UNUSED
(
tm¥eg
); \

1104 } 0)

	)

1105 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

1106 
__IO
 
uöt32_t
 
tm¥eg
; \

1107 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

1109 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

1110 
	`UNUSED
(
tm¥eg
); \

1111 } 0)

	)

1112 
	#__HAL_RCC_I2C3_CLK_ENABLE
() do { \

1113 
__IO
 
uöt32_t
 
tm¥eg
; \

1114 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

1116 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

1117 
	`UNUSED
(
tm¥eg
); \

1118 } 0)

	)

1119 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM2EN
))

	)

1120 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM3EN
))

	)

1121 
	#__HAL_RCC_TIM4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM4EN
))

	)

1122 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

1123 
	#__HAL_RCC_I2C3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C3EN
))

	)

1124 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

1125 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

1126 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

1127 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

1128 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

1129 
	#__HAL_RCC_USART3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART3EN
))

	)

1130 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

1131 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

1132 
	#__HAL_RCC_CAN1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN1EN
))

	)

1133 
	#__HAL_RCC_CAN2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN2EN
))

	)

1134 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

1135 
	#__HAL_RCC_UART7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART7EN
))

	)

1136 
	#__HAL_RCC_UART8_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART8EN
))

	)

1147 
	#__HAL_RCC_TIM8_CLK_ENABLE
() do { \

1148 
__IO
 
uöt32_t
 
tm¥eg
; \

1149 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1151 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1152 
	`UNUSED
(
tm¥eg
); \

1153 } 0)

	)

1154 
	#__HAL_RCC_ADC2_CLK_ENABLE
() do { \

1155 
__IO
 
uöt32_t
 
tm¥eg
; \

1156 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1158 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1159 
	`UNUSED
(
tm¥eg
); \

1160 } 0)

	)

1161 
	#__HAL_RCC_ADC3_CLK_ENABLE
() do { \

1162 
__IO
 
uöt32_t
 
tm¥eg
; \

1163 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1165 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1166 
	`UNUSED
(
tm¥eg
); \

1167 } 0)

	)

1168 
	#__HAL_RCC_SPI5_CLK_ENABLE
() do { \

1169 
__IO
 
uöt32_t
 
tm¥eg
; \

1170 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI5EN
);\

1172 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI5EN
);\

1173 
	`UNUSED
(
tm¥eg
); \

1174 } 0)

	)

1175 
	#__HAL_RCC_SPI6_CLK_ENABLE
() do { \

1176 
__IO
 
uöt32_t
 
tm¥eg
; \

1177 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI6EN
);\

1179 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI6EN
);\

1180 
	`UNUSED
(
tm¥eg
); \

1181 } 0)

	)

1182 
	#__HAL_RCC_SAI1_CLK_ENABLE
() do { \

1183 
__IO
 
uöt32_t
 
tm¥eg
; \

1184 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SAI1EN
);\

1186 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SAI1EN
);\

1187 
	`UNUSED
(
tm¥eg
); \

1188 } 0)

	)

1189 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

1190 
__IO
 
uöt32_t
 
tm¥eg
; \

1191 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

1193 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

1194 
	`UNUSED
(
tm¥eg
); \

1195 } 0)

	)

1196 
	#__HAL_RCC_SPI4_CLK_ENABLE
() do { \

1197 
__IO
 
uöt32_t
 
tm¥eg
; \

1198 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

1200 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

1201 
	`UNUSED
(
tm¥eg
); \

1202 } 0)

	)

1203 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

1204 
__IO
 
uöt32_t
 
tm¥eg
; \

1205 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1207 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1208 
	`UNUSED
(
tm¥eg
); \

1209 } 0)

	)

1210 
	#__HAL_RCC_SDIO_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SDIOEN
))

	)

1211 
	#__HAL_RCC_SPI4_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI4EN
))

	)

1212 
	#__HAL_RCC_TIM10_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM10EN
))

	)

1213 
	#__HAL_RCC_TIM8_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM8EN
))

	)

1214 
	#__HAL_RCC_ADC2_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC2EN
))

	)

1215 
	#__HAL_RCC_ADC3_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC3EN
))

	)

1216 
	#__HAL_RCC_SPI5_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI5EN
))

	)

1217 
	#__HAL_RCC_SPI6_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI6EN
))

	)

1218 
	#__HAL_RCC_SAI1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SAI1EN
))

	)

1220 #i‡
deföed
(
STM32F429xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1221 
	#__HAL_RCC_LTDC_CLK_ENABLE
() do { \

1222 
__IO
 
uöt32_t
 
tm¥eg
; \

1223 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_LTDCEN
);\

1225 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_LTDCEN
);\

1226 
	`UNUSED
(
tm¥eg
); \

1227 } 0)

	)

1229 
	#__HAL_RCC_LTDC_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_LTDCEN
))

	)

1232 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1233 
	#__HAL_RCC_DSI_CLK_ENABLE
() do { \

1234 
__IO
 
uöt32_t
 
tm¥eg
; \

1235 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_DSIEN
);\

1237 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_DSIEN
);\

1238 
	`UNUSED
(
tm¥eg
); \

1239 } 0)

	)

1241 
	#__HAL_RCC_DSI_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_DSIEN
))

	)

1250 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIODRST
))

	)

1251 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOERST
))

	)

1252 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOFRST
))

	)

1253 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOGRST
))

	)

1254 
	#__HAL_RCC_GPIOI_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOIRST
))

	)

1255 
	#__HAL_RCC_ETHMAC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_ETHMACRST
))

	)

1256 
	#__HAL_RCC_USB_OTG_HS_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_OTGHRST
))

	)

1257 
	#__HAL_RCC_GPIOJ_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOJRST
))

	)

1258 
	#__HAL_RCC_GPIOK_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOKRST
))

	)

1259 
	#__HAL_RCC_DMA2D_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_DMA2DRST
))

	)

1260 
	#__HAL_RCC_CRC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_CRCRST
))

	)

1262 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIODRST
))

	)

1263 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOERST
))

	)

1264 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOFRST
))

	)

1265 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOGRST
))

	)

1266 
	#__HAL_RCC_GPIOI_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOIRST
))

	)

1267 
	#__HAL_RCC_ETHMAC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_ETHMACRST
))

	)

1268 
	#__HAL_RCC_USB_OTG_HS_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_OTGHRST
))

	)

1269 
	#__HAL_RCC_GPIOJ_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOJRST
))

	)

1270 
	#__HAL_RCC_GPIOK_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOKRST
))

	)

1271 
	#__HAL_RCC_DMA2D_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_DMA2DRST
))

	)

1272 
	#__HAL_RCC_CRC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_CRCRST
))

	)

1281 
	#__HAL_RCC_AHB2_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0xFFFFFFFF)

	)

1282 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_OTGFSRST
))

	)

1283 
	#__HAL_RCC_RNG_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_RNGRST
))

	)

1284 
	#__HAL_RCC_DCMI_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_DCMIRST
))

	)

1286 
	#__HAL_RCC_AHB2_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0x00)

	)

1287 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_OTGFSRST
))

	)

1288 
	#__HAL_RCC_RNG_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_RNGRST
))

	)

1289 
	#__HAL_RCC_DCMI_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_DCMIRST
))

	)

1291 #i‡
deföed
(
STM32F437xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

1292 
	#__HAL_RCC_CRYP_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_CRYPRST
))

	)

1293 
	#__HAL_RCC_HASH_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_HASHRST
))

	)

1295 
	#__HAL_RCC_CRYP_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_CRYPRST
))

	)

1296 
	#__HAL_RCC_HASH_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_HASHRST
))

	)

1306 
	#__HAL_RCC_AHB3_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0xFFFFFFFF)

	)

1307 
	#__HAL_RCC_AHB3_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0x00)

	)

1308 
	#__HAL_RCC_FMC_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 |(
RCC_AHB3RSTR_FMCRST
))

	)

1309 
	#__HAL_RCC_FMC_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 &~(
RCC_AHB3RSTR_FMCRST
))

	)

1311 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1312 
	#__HAL_RCC_QSPI_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 |(
RCC_AHB3RSTR_QSPIRST
))

	)

1313 
	#__HAL_RCC_QSPI_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 &~(
RCC_AHB3RSTR_QSPIRST
))

	)

1322 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

1323 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

1324 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

1325 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

1326 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

1327 
	#__HAL_RCC_USART3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART3RST
))

	)

1328 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

1329 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

1330 
	#__HAL_RCC_CAN1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN1RST
))

	)

1331 
	#__HAL_RCC_CAN2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN2RST
))

	)

1332 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

1333 
	#__HAL_RCC_UART7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART7RST
))

	)

1334 
	#__HAL_RCC_UART8_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART8RST
))

	)

1335 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM2RST
))

	)

1336 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM3RST
))

	)

1337 
	#__HAL_RCC_TIM4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM4RST
))

	)

1338 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

1339 
	#__HAL_RCC_I2C3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C3RST
))

	)

1341 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM2RST
))

	)

1342 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM3RST
))

	)

1343 
	#__HAL_RCC_TIM4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM4RST
))

	)

1344 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

1345 
	#__HAL_RCC_I2C3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C3RST
))

	)

1346 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

1347 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

1348 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

1349 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

1350 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

1351 
	#__HAL_RCC_USART3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART3RST
))

	)

1352 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

1353 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

1354 
	#__HAL_RCC_CAN1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN1RST
))

	)

1355 
	#__HAL_RCC_CAN2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN2RST
))

	)

1356 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

1357 
	#__HAL_RCC_UART7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART7RST
))

	)

1358 
	#__HAL_RCC_UART8_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART8RST
))

	)

1366 
	#__HAL_RCC_TIM8_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM8RST
))

	)

1367 
	#__HAL_RCC_SPI5_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI5RST
))

	)

1368 
	#__HAL_RCC_SPI6_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI6RST
))

	)

1369 
	#__HAL_RCC_SAI1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SAI1RST
))

	)

1370 
	#__HAL_RCC_SDIO_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SDIORST
))

	)

1371 
	#__HAL_RCC_SPI4_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI4RST
))

	)

1372 
	#__HAL_RCC_TIM10_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM10RST
))

	)

1374 
	#__HAL_RCC_SDIO_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SDIORST
))

	)

1375 
	#__HAL_RCC_SPI4_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI4RST
))

	)

1376 
	#__HAL_RCC_TIM10_RELEASE_RESET
()(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM10RST
))

	)

1377 
	#__HAL_RCC_TIM8_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM8RST
))

	)

1378 
	#__HAL_RCC_SPI5_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI5RST
))

	)

1379 
	#__HAL_RCC_SPI6_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI6RST
))

	)

1380 
	#__HAL_RCC_SAI1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SAI1RST
))

	)

1382 #i‡
deföed
(
STM32F429xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1383 
	#__HAL_RCC_LTDC_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_LTDCRST
))

	)

1384 
	#__HAL_RCC_LTDC_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_LTDCRST
))

	)

1387 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1388 
	#__HAL_RCC_DSI_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_DSIRST
))

	)

1389 
	#__HAL_RCC_DSI_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_DSIRST
))

	)

1402 
	#__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIODLPEN
))

	)

1403 
	#__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOELPEN
))

	)

1404 
	#__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOFLPEN
))

	)

1405 
	#__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOGLPEN
))

	)

1406 
	#__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOILPEN
))

	)

1407 
	#__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM2LPEN
))

	)

1408 
	#__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_ETHMACLPEN
))

	)

1409 
	#__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_ETHMACTXLPEN
))

	)

1410 
	#__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_ETHMACRXLPEN
))

	)

1411 
	#__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_ETHMACPTPLPEN
))

	)

1412 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_OTGHSLPEN
))

	)

1413 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_OTGHSULPILPEN
))

	)

1414 
	#__HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOJLPEN
))

	)

1415 
	#__HAL_RCC_GPIOK_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOKLPEN
))

	)

1416 
	#__HAL_RCC_SRAM3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM3LPEN
))

	)

1417 
	#__HAL_RCC_DMA2D_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_DMA2DLPEN
))

	)

1418 
	#__HAL_RCC_CRC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_CRCLPEN
))

	)

1419 
	#__HAL_RCC_FLITF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_FLITFLPEN
))

	)

1420 
	#__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

1421 
	#__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_BKPSRAMLPEN
))

	)

1423 
	#__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIODLPEN
))

	)

1424 
	#__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOELPEN
))

	)

1425 
	#__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOFLPEN
))

	)

1426 
	#__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOGLPEN
))

	)

1427 
	#__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOILPEN
))

	)

1428 
	#__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM2LPEN
))

	)

1429 
	#__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_ETHMACLPEN
))

	)

1430 
	#__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_ETHMACTXLPEN
))

	)

1431 
	#__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_ETHMACRXLPEN
))

	)

1432 
	#__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_ETHMACPTPLPEN
))

	)

1433 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_OTGHSLPEN
))

	)

1434 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_OTGHSULPILPEN
))

	)

1435 
	#__HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOJLPEN
))

	)

1436 
	#__HAL_RCC_GPIOK_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOKLPEN
))

	)

1437 
	#__HAL_RCC_DMA2D_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_DMA2DLPEN
))

	)

1438 
	#__HAL_RCC_CRC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_CRCLPEN
))

	)

1439 
	#__HAL_RCC_FLITF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_FLITFLPEN
))

	)

1440 
	#__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

1441 
	#__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_BKPSRAMLPEN
))

	)

1454 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

1455 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

1457 
	#__HAL_RCC_RNG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_RNGLPEN
))

	)

1458 
	#__HAL_RCC_RNG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_RNGLPEN
))

	)

1460 
	#__HAL_RCC_DCMI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_DCMILPEN
))

	)

1461 
	#__HAL_RCC_DCMI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_DCMILPEN
))

	)

1463 #i‡
deföed
(
STM32F437xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

1464 
	#__HAL_RCC_CRYP_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_CRYPLPEN
))

	)

1465 
	#__HAL_RCC_HASH_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_HASHLPEN
))

	)

1467 
	#__HAL_RCC_CRYP_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_CRYPLPEN
))

	)

1468 
	#__HAL_RCC_HASH_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_HASHLPEN
))

	)

1481 
	#__HAL_RCC_FMC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB3LPENR
 |(
RCC_AHB3LPENR_FMCLPEN
))

	)

1482 
	#__HAL_RCC_FMC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB3LPENR
 &~(
RCC_AHB3LPENR_FMCLPEN
))

	)

1484 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1485 
	#__HAL_RCC_QSPI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB3LPENR
 |(
RCC_AHB3LPENR_QSPILPEN
))

	)

1486 
	#__HAL_RCC_QSPI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB3LPENR
 &~(
RCC_AHB3LPENR_QSPILPEN
))

	)

1499 
	#__HAL_RCC_TIM6_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM6LPEN
))

	)

1500 
	#__HAL_RCC_TIM7_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM7LPEN
))

	)

1501 
	#__HAL_RCC_TIM12_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM12LPEN
))

	)

1502 
	#__HAL_RCC_TIM13_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM13LPEN
))

	)

1503 
	#__HAL_RCC_TIM14_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM14LPEN
))

	)

1504 
	#__HAL_RCC_USART3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_USART3LPEN
))

	)

1505 
	#__HAL_RCC_UART4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_UART4LPEN
))

	)

1506 
	#__HAL_RCC_UART5_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_UART5LPEN
))

	)

1507 
	#__HAL_RCC_CAN1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_CAN1LPEN
))

	)

1508 
	#__HAL_RCC_CAN2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_CAN2LPEN
))

	)

1509 
	#__HAL_RCC_DAC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_DACLPEN
))

	)

1510 
	#__HAL_RCC_UART7_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_UART7LPEN
))

	)

1511 
	#__HAL_RCC_UART8_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_UART8LPEN
))

	)

1512 
	#__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM2LPEN
))

	)

1513 
	#__HAL_RCC_TIM3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM3LPEN
))

	)

1514 
	#__HAL_RCC_TIM4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM4LPEN
))

	)

1515 
	#__HAL_RCC_SPI3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_SPI3LPEN
))

	)

1516 
	#__HAL_RCC_I2C3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_I2C3LPEN
))

	)

1518 
	#__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM2LPEN
))

	)

1519 
	#__HAL_RCC_TIM3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM3LPEN
))

	)

1520 
	#__HAL_RCC_TIM4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM4LPEN
))

	)

1521 
	#__HAL_RCC_SPI3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_SPI3LPEN
))

	)

1522 
	#__HAL_RCC_I2C3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_I2C3LPEN
))

	)

1523 
	#__HAL_RCC_TIM6_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM6LPEN
))

	)

1524 
	#__HAL_RCC_TIM7_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM7LPEN
))

	)

1525 
	#__HAL_RCC_TIM12_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM12LPEN
))

	)

1526 
	#__HAL_RCC_TIM13_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM13LPEN
))

	)

1527 
	#__HAL_RCC_TIM14_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM14LPEN
))

	)

1528 
	#__HAL_RCC_USART3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_USART3LPEN
))

	)

1529 
	#__HAL_RCC_UART4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_UART4LPEN
))

	)

1530 
	#__HAL_RCC_UART5_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_UART5LPEN
))

	)

1531 
	#__HAL_RCC_CAN1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_CAN1LPEN
))

	)

1532 
	#__HAL_RCC_CAN2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_CAN2LPEN
))

	)

1533 
	#__HAL_RCC_DAC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_DACLPEN
))

	)

1534 
	#__HAL_RCC_UART7_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_UART7LPEN
))

	)

1535 
	#__HAL_RCC_UART8_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_UART8LPEN
))

	)

1547 
	#__HAL_RCC_TIM8_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM8LPEN
))

	)

1548 
	#__HAL_RCC_ADC2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_ADC2LPEN
))

	)

1549 
	#__HAL_RCC_ADC3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_ADC3LPEN
))

	)

1550 
	#__HAL_RCC_SPI5_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI5LPEN
))

	)

1551 
	#__HAL_RCC_SPI6_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI6LPEN
))

	)

1552 
	#__HAL_RCC_SAI1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SAI1LPEN
))

	)

1553 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SDIOLPEN
))

	)

1554 
	#__HAL_RCC_SPI4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI4LPEN
))

	)

1555 
	#__HAL_RCC_TIM10_CLK_SLEEP_ENABLE
()(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM10LPEN
))

	)

1557 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SDIOLPEN
))

	)

1558 
	#__HAL_RCC_SPI4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI4LPEN
))

	)

1559 
	#__HAL_RCC_TIM10_CLK_SLEEP_DISABLE
()(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM10LPEN
))

	)

1560 
	#__HAL_RCC_TIM8_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM8LPEN
))

	)

1561 
	#__HAL_RCC_ADC2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_ADC2LPEN
))

	)

1562 
	#__HAL_RCC_ADC3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_ADC3LPEN
))

	)

1563 
	#__HAL_RCC_SPI5_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI5LPEN
))

	)

1564 
	#__HAL_RCC_SPI6_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI6LPEN
))

	)

1565 
	#__HAL_RCC_SAI1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SAI1LPEN
))

	)

1567 #i‡
deföed
(
STM32F429xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1568 
	#__HAL_RCC_LTDC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_LTDCLPEN
))

	)

1570 
	#__HAL_RCC_LTDC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_LTDCLPEN
))

	)

1573 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1574 
	#__HAL_RCC_DSI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_DSILPEN
))

	)

1575 
	#__HAL_RCC_DSI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_DSILPEN
))

	)

1584 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
)|| deföed(
STM32F417xx
)

1591 
	#__HAL_RCC_BKPSRAM_CLK_ENABLE
() do { \

1592 
__IO
 
uöt32_t
 
tm¥eg
; \

1593 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

1595 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

1596 
	`UNUSED
(
tm¥eg
); \

1597 } 0)

	)

1598 
	#__HAL_RCC_CCMDATARAMEN_CLK_ENABLE
() do { \

1599 
__IO
 
uöt32_t
 
tm¥eg
; \

1600 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

1602 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

1603 
	`UNUSED
(
tm¥eg
); \

1604 } 0)

	)

1605 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

1606 
__IO
 
uöt32_t
 
tm¥eg
; \

1607 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

1609 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

1610 
	`UNUSED
(
tm¥eg
); \

1611 } 0)

	)

1612 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

1613 
__IO
 
uöt32_t
 
tm¥eg
; \

1614 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

1616 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

1617 
	`UNUSED
(
tm¥eg
); \

1618 } 0)

	)

1619 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

1620 
__IO
 
uöt32_t
 
tm¥eg
; \

1621 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

1623 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

1624 
	`UNUSED
(
tm¥eg
); \

1625 } 0)

	)

1626 
	#__HAL_RCC_GPIOI_CLK_ENABLE
() do { \

1627 
__IO
 
uöt32_t
 
tm¥eg
; \

1628 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOIEN
);\

1630 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOIEN
);\

1631 
	`UNUSED
(
tm¥eg
); \

1632 } 0)

	)

1633 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1634 
__IO
 
uöt32_t
 
tm¥eg
; \

1635 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOFEN
);\

1637 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOFEN
);\

1638 
	`UNUSED
(
tm¥eg
); \

1639 } 0)

	)

1640 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1641 
__IO
 
uöt32_t
 
tm¥eg
; \

1642 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOGEN
);\

1644 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOGEN
);\

1645 
	`UNUSED
(
tm¥eg
); \

1646 } 0)

	)

1647 
	#__HAL_RCC_USB_OTG_HS_CLK_ENABLE
() do { \

1648 
__IO
 
uöt32_t
 
tm¥eg
; \

1649 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSEN
);\

1651 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSEN
);\

1652 
	`UNUSED
(
tm¥eg
); \

1653 } 0)

	)

1654 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE
() do { \

1655 
__IO
 
uöt32_t
 
tm¥eg
; \

1656 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSULPIEN
);\

1658 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSULPIEN
);\

1659 
	`UNUSED
(
tm¥eg
); \

1660 } 0)

	)

1661 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIODEN
))

	)

1662 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOEEN
))

	)

1663 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOFEN
))

	)

1664 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOGEN
))

	)

1665 
	#__HAL_RCC_GPIOI_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOIEN
))

	)

1666 
	#__HAL_RCC_USB_OTG_HS_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_OTGHSEN
))

	)

1667 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_OTGHSULPIEN
))

	)

1668 
	#__HAL_RCC_BKPSRAM_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_BKPSRAMEN
))

	)

1669 
	#__HAL_RCC_CCMDATARAMEN_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CCMDATARAMEN
))

	)

1670 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CRCEN
))

	)

1671 #i‡
deföed
(
STM32F407xx
)|| deföed(
STM32F417xx
)

1675 
	#__HAL_RCC_ETHMAC_CLK_ENABLE
() do { \

1676 
__IO
 
uöt32_t
 
tm¥eg
; \

1677 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACEN
);\

1679 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACEN
);\

1680 
	`UNUSED
(
tm¥eg
); \

1681 } 0)

	)

1682 
	#__HAL_RCC_ETHMACTX_CLK_ENABLE
() do { \

1683 
__IO
 
uöt32_t
 
tm¥eg
; \

1684 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACTXEN
);\

1686 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACTXEN
);\

1687 
	`UNUSED
(
tm¥eg
); \

1688 } 0)

	)

1689 
	#__HAL_RCC_ETHMACRX_CLK_ENABLE
() do { \

1690 
__IO
 
uöt32_t
 
tm¥eg
; \

1691 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACRXEN
);\

1693 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACRXEN
);\

1694 
	`UNUSED
(
tm¥eg
); \

1695 } 0)

	)

1696 
	#__HAL_RCC_ETHMACPTP_CLK_ENABLE
() do { \

1697 
__IO
 
uöt32_t
 
tm¥eg
; \

1698 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACPTPEN
);\

1700 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_ETHMACPTPEN
);\

1701 
	`UNUSED
(
tm¥eg
); \

1702 } 0)

	)

1703 
	#__HAL_RCC_ETH_CLK_ENABLE
() do { \

1704 
	`__HAL_RCC_ETHMAC_CLK_ENABLE
(); \

1705 
	`__HAL_RCC_ETHMACTX_CLK_ENABLE
(); \

1706 
	`__HAL_RCC_ETHMACRX_CLK_ENABLE
(); \

1707 } 0)

	)

1712 
	#__HAL_RCC_ETHMAC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_ETHMACEN
))

	)

1713 
	#__HAL_RCC_ETHMACTX_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_ETHMACTXEN
))

	)

1714 
	#__HAL_RCC_ETHMACRX_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_ETHMACRXEN
))

	)

1715 
	#__HAL_RCC_ETHMACPTP_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_ETHMACPTPEN
))

	)

1716 
	#__HAL_RCC_ETH_CLK_DISABLE
() do { \

1717 
	`__HAL_RCC_ETHMACTX_CLK_DISABLE
(); \

1718 
	`__HAL_RCC_ETHMACRX_CLK_DISABLE
(); \

1719 
	`__HAL_RCC_ETHMAC_CLK_DISABLE
(); \

1720 } 0)

	)

1732 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
(Ëdÿ{(
RCC
->
AHB2ENR
 |(
RCC_AHB2ENR_OTGFSEN
));\

1733 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();\

1734 }0)

	)

1736 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ëdÿ{ (
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_OTGFSEN
));\

1737 
	`__HAL_RCC_SYSCFG_CLK_DISABLE
();\

1738 }0)

	)

1740 
	#__HAL_RCC_RNG_CLK_ENABLE
() do { \

1741 
__IO
 
uöt32_t
 
tm¥eg
; \

1742 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_RNGEN
);\

1744 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_RNGEN
);\

1745 
	`UNUSED
(
tm¥eg
); \

1746 } 0)

	)

1747 
	#__HAL_RCC_RNG_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_RNGEN
))

	)

1749 #i‡
deföed
(
STM32F407xx
)|| deföed(
STM32F417xx
)

1750 
	#__HAL_RCC_DCMI_CLK_ENABLE
() do { \

1751 
__IO
 
uöt32_t
 
tm¥eg
; \

1752 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_DCMIEN
);\

1754 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_DCMIEN
);\

1755 
	`UNUSED
(
tm¥eg
); \

1756 } 0)

	)

1757 
	#__HAL_RCC_DCMI_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_DCMIEN
))

	)

1760 #i‡
deföed
(
STM32F415xx
Ë|| deföed(
STM32F417xx
)

1761 
	#__HAL_RCC_CRYP_CLK_ENABLE
() do { \

1762 
__IO
 
uöt32_t
 
tm¥eg
; \

1763 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_CRYPEN
);\

1765 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_CRYPEN
);\

1766 
	`UNUSED
(
tm¥eg
); \

1767 } 0)

	)

1768 
	#__HAL_RCC_HASH_CLK_ENABLE
() do { \

1769 
__IO
 
uöt32_t
 
tm¥eg
; \

1770 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_HASHEN
);\

1772 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_HASHEN
);\

1773 
	`UNUSED
(
tm¥eg
); \

1774 } 0)

	)

1775 
	#__HAL_RCC_CRYP_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_CRYPEN
))

	)

1776 
	#__HAL_RCC_HASH_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_HASHEN
))

	)

1788 
	#__HAL_RCC_FSMC_CLK_ENABLE
() do { \

1789 
__IO
 
uöt32_t
 
tm¥eg
; \

1790 
	`SET_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_FSMCEN
);\

1792 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_FSMCEN
);\

1793 
	`UNUSED
(
tm¥eg
); \

1794 } 0)

	)

1795 
	#__HAL_RCC_FSMC_CLK_DISABLE
(Ë(
RCC
->
AHB3ENR
 &~(
RCC_AHB3ENR_FSMCEN
))

	)

1806 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

1807 
__IO
 
uöt32_t
 
tm¥eg
; \

1808 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

1810 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

1811 
	`UNUSED
(
tm¥eg
); \

1812 } 0)

	)

1813 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

1814 
__IO
 
uöt32_t
 
tm¥eg
; \

1815 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

1817 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

1818 
	`UNUSED
(
tm¥eg
); \

1819 } 0)

	)

1820 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

1821 
__IO
 
uöt32_t
 
tm¥eg
; \

1822 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1824 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1825 
	`UNUSED
(
tm¥eg
); \

1826 } 0)

	)

1827 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

1828 
__IO
 
uöt32_t
 
tm¥eg
; \

1829 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1831 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1832 
	`UNUSED
(
tm¥eg
); \

1833 } 0)

	)

1834 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

1835 
__IO
 
uöt32_t
 
tm¥eg
; \

1836 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1838 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1839 
	`UNUSED
(
tm¥eg
); \

1840 } 0)

	)

1841 
	#__HAL_RCC_USART3_CLK_ENABLE
() do { \

1842 
__IO
 
uöt32_t
 
tm¥eg
; \

1843 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

1845 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

1846 
	`UNUSED
(
tm¥eg
); \

1847 } 0)

	)

1848 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

1849 
__IO
 
uöt32_t
 
tm¥eg
; \

1850 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

1852 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

1853 
	`UNUSED
(
tm¥eg
); \

1854 } 0)

	)

1855 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

1856 
__IO
 
uöt32_t
 
tm¥eg
; \

1857 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1859 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1860 
	`UNUSED
(
tm¥eg
); \

1861 } 0)

	)

1862 
	#__HAL_RCC_CAN1_CLK_ENABLE
() do { \

1863 
__IO
 
uöt32_t
 
tm¥eg
; \

1864 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

1866 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

1867 
	`UNUSED
(
tm¥eg
); \

1868 } 0)

	)

1869 
	#__HAL_RCC_CAN2_CLK_ENABLE
() do { \

1870 
__IO
 
uöt32_t
 
tm¥eg
; \

1871 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1873 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1874 
	`UNUSED
(
tm¥eg
); \

1875 } 0)

	)

1876 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

1877 
__IO
 
uöt32_t
 
tm¥eg
; \

1878 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

1880 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

1881 
	`UNUSED
(
tm¥eg
); \

1882 } 0)

	)

1883 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

1884 
__IO
 
uöt32_t
 
tm¥eg
; \

1885 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

1887 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

1888 
	`UNUSED
(
tm¥eg
); \

1889 } 0)

	)

1890 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

1891 
__IO
 
uöt32_t
 
tm¥eg
; \

1892 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

1894 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

1895 
	`UNUSED
(
tm¥eg
); \

1896 } 0)

	)

1897 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

1898 
__IO
 
uöt32_t
 
tm¥eg
; \

1899 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

1901 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

1902 
	`UNUSED
(
tm¥eg
); \

1903 } 0)

	)

1904 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

1905 
__IO
 
uöt32_t
 
tm¥eg
; \

1906 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

1908 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

1909 
	`UNUSED
(
tm¥eg
); \

1910 } 0)

	)

1911 
	#__HAL_RCC_I2C3_CLK_ENABLE
() do { \

1912 
__IO
 
uöt32_t
 
tm¥eg
; \

1913 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

1915 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

1916 
	`UNUSED
(
tm¥eg
); \

1917 } 0)

	)

1918 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM2EN
))

	)

1919 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM3EN
))

	)

1920 
	#__HAL_RCC_TIM4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM4EN
))

	)

1921 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

1922 
	#__HAL_RCC_I2C3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C3EN
))

	)

1923 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

1924 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

1925 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

1926 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

1927 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

1928 
	#__HAL_RCC_USART3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART3EN
))

	)

1929 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

1930 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

1931 
	#__HAL_RCC_CAN1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN1EN
))

	)

1932 
	#__HAL_RCC_CAN2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN2EN
))

	)

1933 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

1944 
	#__HAL_RCC_TIM8_CLK_ENABLE
() do { \

1945 
__IO
 
uöt32_t
 
tm¥eg
; \

1946 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1948 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1949 
	`UNUSED
(
tm¥eg
); \

1950 } 0)

	)

1951 
	#__HAL_RCC_ADC2_CLK_ENABLE
() do { \

1952 
__IO
 
uöt32_t
 
tm¥eg
; \

1953 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1955 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1956 
	`UNUSED
(
tm¥eg
); \

1957 } 0)

	)

1958 
	#__HAL_RCC_ADC3_CLK_ENABLE
() do { \

1959 
__IO
 
uöt32_t
 
tm¥eg
; \

1960 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1962 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1963 
	`UNUSED
(
tm¥eg
); \

1964 } 0)

	)

1965 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

1966 
__IO
 
uöt32_t
 
tm¥eg
; \

1967 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

1969 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

1970 
	`UNUSED
(
tm¥eg
); \

1971 } 0)

	)

1972 
	#__HAL_RCC_SPI4_CLK_ENABLE
() do { \

1973 
__IO
 
uöt32_t
 
tm¥eg
; \

1974 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

1976 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

1977 
	`UNUSED
(
tm¥eg
); \

1978 } 0)

	)

1979 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

1980 
__IO
 
uöt32_t
 
tm¥eg
; \

1981 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1983 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1984 
	`UNUSED
(
tm¥eg
); \

1985 } 0)

	)

1987 
	#__HAL_RCC_SDIO_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SDIOEN
))

	)

1988 
	#__HAL_RCC_SPI4_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI4EN
))

	)

1989 
	#__HAL_RCC_TIM10_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM10EN
))

	)

1990 
	#__HAL_RCC_TIM8_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM8EN
))

	)

1991 
	#__HAL_RCC_ADC2_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC2EN
))

	)

1992 
	#__HAL_RCC_ADC3_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC3EN
))

	)

2000 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIODRST
))

	)

2001 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOERST
))

	)

2002 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOFRST
))

	)

2003 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOGRST
))

	)

2004 
	#__HAL_RCC_GPIOI_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOIRST
))

	)

2005 
	#__HAL_RCC_ETHMAC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_ETHMACRST
))

	)

2006 
	#__HAL_RCC_USB_OTG_HS_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_OTGHRST
))

	)

2007 
	#__HAL_RCC_CRC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_CRCRST
))

	)

2009 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIODRST
))

	)

2010 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOERST
))

	)

2011 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOFRST
))

	)

2012 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOGRST
))

	)

2013 
	#__HAL_RCC_GPIOI_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOIRST
))

	)

2014 
	#__HAL_RCC_ETHMAC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_ETHMACRST
))

	)

2015 
	#__HAL_RCC_USB_OTG_HS_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_OTGHRST
))

	)

2016 
	#__HAL_RCC_CRC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_CRCRST
))

	)

2024 
	#__HAL_RCC_AHB2_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0xFFFFFFFF)

	)

2025 
	#__HAL_RCC_AHB2_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0x00)

	)

2027 #i‡
deföed
(
STM32F407xx
)|| deföed(
STM32F417xx
)

2028 
	#__HAL_RCC_DCMI_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_DCMIRST
))

	)

2029 
	#__HAL_RCC_DCMI_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_DCMIRST
))

	)

2032 #i‡
deföed
(
STM32F415xx
Ë|| deföed(
STM32F417xx
)

2033 
	#__HAL_RCC_CRYP_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_CRYPRST
))

	)

2034 
	#__HAL_RCC_HASH_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_HASHRST
))

	)

2036 
	#__HAL_RCC_CRYP_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_CRYPRST
))

	)

2037 
	#__HAL_RCC_HASH_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_HASHRST
))

	)

2040 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_OTGFSRST
))

	)

2041 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_OTGFSRST
))

	)

2043 
	#__HAL_RCC_RNG_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_RNGRST
))

	)

2044 
	#__HAL_RCC_RNG_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_RNGRST
))

	)

2053 
	#__HAL_RCC_AHB3_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0xFFFFFFFF)

	)

2054 
	#__HAL_RCC_AHB3_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0x00)

	)

2056 
	#__HAL_RCC_FSMC_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 |(
RCC_AHB3RSTR_FSMCRST
))

	)

2057 
	#__HAL_RCC_FSMC_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 &~(
RCC_AHB3RSTR_FSMCRST
))

	)

2065 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

2066 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

2067 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

2068 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

2069 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

2070 
	#__HAL_RCC_USART3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART3RST
))

	)

2071 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

2072 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

2073 
	#__HAL_RCC_CAN1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN1RST
))

	)

2074 
	#__HAL_RCC_CAN2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN2RST
))

	)

2075 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

2076 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM2RST
))

	)

2077 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM3RST
))

	)

2078 
	#__HAL_RCC_TIM4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM4RST
))

	)

2079 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

2080 
	#__HAL_RCC_I2C3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C3RST
))

	)

2082 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM2RST
))

	)

2083 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM3RST
))

	)

2084 
	#__HAL_RCC_TIM4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM4RST
))

	)

2085 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

2086 
	#__HAL_RCC_I2C3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C3RST
))

	)

2087 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

2088 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

2089 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

2090 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

2091 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

2092 
	#__HAL_RCC_USART3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART3RST
))

	)

2093 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

2094 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

2095 
	#__HAL_RCC_CAN1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN1RST
))

	)

2096 
	#__HAL_RCC_CAN2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN2RST
))

	)

2097 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

2105 
	#__HAL_RCC_TIM8_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM8RST
))

	)

2106 
	#__HAL_RCC_SDIO_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SDIORST
))

	)

2107 
	#__HAL_RCC_SPI4_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI4RST
))

	)

2108 
	#__HAL_RCC_TIM10_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM10RST
))

	)

2110 
	#__HAL_RCC_SDIO_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SDIORST
))

	)

2111 
	#__HAL_RCC_SPI4_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI4RST
))

	)

2112 
	#__HAL_RCC_TIM10_RELEASE_RESET
()(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM10RST
))

	)

2113 
	#__HAL_RCC_TIM8_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM8RST
))

	)

2125 
	#__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIODLPEN
))

	)

2126 
	#__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOELPEN
))

	)

2127 
	#__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOFLPEN
))

	)

2128 
	#__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOGLPEN
))

	)

2129 
	#__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOILPEN
))

	)

2130 
	#__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM2LPEN
))

	)

2131 
	#__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_ETHMACLPEN
))

	)

2132 
	#__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_ETHMACTXLPEN
))

	)

2133 
	#__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_ETHMACRXLPEN
))

	)

2134 
	#__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_ETHMACPTPLPEN
))

	)

2135 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_OTGHSLPEN
))

	)

2136 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_OTGHSULPILPEN
))

	)

2137 
	#__HAL_RCC_CRC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_CRCLPEN
))

	)

2138 
	#__HAL_RCC_FLITF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_FLITFLPEN
))

	)

2139 
	#__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

2140 
	#__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_BKPSRAMLPEN
))

	)

2142 
	#__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIODLPEN
))

	)

2143 
	#__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOELPEN
))

	)

2144 
	#__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOFLPEN
))

	)

2145 
	#__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOGLPEN
))

	)

2146 
	#__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOILPEN
))

	)

2147 
	#__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM2LPEN
))

	)

2148 
	#__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_ETHMACLPEN
))

	)

2149 
	#__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_ETHMACTXLPEN
))

	)

2150 
	#__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_ETHMACRXLPEN
))

	)

2151 
	#__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_ETHMACPTPLPEN
))

	)

2152 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_OTGHSLPEN
))

	)

2153 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_OTGHSULPILPEN
))

	)

2154 
	#__HAL_RCC_CRC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_CRCLPEN
))

	)

2155 
	#__HAL_RCC_FLITF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_FLITFLPEN
))

	)

2156 
	#__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

2157 
	#__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_BKPSRAMLPEN
))

	)

2170 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

2171 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

2173 
	#__HAL_RCC_RNG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_RNGLPEN
))

	)

2174 
	#__HAL_RCC_RNG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_RNGLPEN
))

	)

2176 #i‡
deföed
(
STM32F407xx
)|| deföed(
STM32F417xx
)

2177 
	#__HAL_RCC_DCMI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_DCMILPEN
))

	)

2178 
	#__HAL_RCC_DCMI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_DCMILPEN
))

	)

2181 #i‡
deföed
(
STM32F415xx
Ë|| deföed(
STM32F417xx
)

2182 
	#__HAL_RCC_CRYP_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_CRYPLPEN
))

	)

2183 
	#__HAL_RCC_HASH_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_HASHLPEN
))

	)

2185 
	#__HAL_RCC_CRYP_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_CRYPLPEN
))

	)

2186 
	#__HAL_RCC_HASH_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_HASHLPEN
))

	)

2199 
	#__HAL_RCC_FSMC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB3LPENR
 |(
RCC_AHB3LPENR_FSMCLPEN
))

	)

2200 
	#__HAL_RCC_FSMC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB3LPENR
 &~(
RCC_AHB3LPENR_FSMCLPEN
))

	)

2212 
	#__HAL_RCC_TIM6_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM6LPEN
))

	)

2213 
	#__HAL_RCC_TIM7_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM7LPEN
))

	)

2214 
	#__HAL_RCC_TIM12_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM12LPEN
))

	)

2215 
	#__HAL_RCC_TIM13_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM13LPEN
))

	)

2216 
	#__HAL_RCC_TIM14_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM14LPEN
))

	)

2217 
	#__HAL_RCC_USART3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_USART3LPEN
))

	)

2218 
	#__HAL_RCC_UART4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_UART4LPEN
))

	)

2219 
	#__HAL_RCC_UART5_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_UART5LPEN
))

	)

2220 
	#__HAL_RCC_CAN1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_CAN1LPEN
))

	)

2221 
	#__HAL_RCC_CAN2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_CAN2LPEN
))

	)

2222 
	#__HAL_RCC_DAC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_DACLPEN
))

	)

2223 
	#__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM2LPEN
))

	)

2224 
	#__HAL_RCC_TIM3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM3LPEN
))

	)

2225 
	#__HAL_RCC_TIM4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM4LPEN
))

	)

2226 
	#__HAL_RCC_SPI3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_SPI3LPEN
))

	)

2227 
	#__HAL_RCC_I2C3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_I2C3LPEN
))

	)

2229 
	#__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM2LPEN
))

	)

2230 
	#__HAL_RCC_TIM3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM3LPEN
))

	)

2231 
	#__HAL_RCC_TIM4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM4LPEN
))

	)

2232 
	#__HAL_RCC_SPI3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_SPI3LPEN
))

	)

2233 
	#__HAL_RCC_I2C3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_I2C3LPEN
))

	)

2234 
	#__HAL_RCC_TIM6_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM6LPEN
))

	)

2235 
	#__HAL_RCC_TIM7_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM7LPEN
))

	)

2236 
	#__HAL_RCC_TIM12_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM12LPEN
))

	)

2237 
	#__HAL_RCC_TIM13_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM13LPEN
))

	)

2238 
	#__HAL_RCC_TIM14_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM14LPEN
))

	)

2239 
	#__HAL_RCC_USART3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_USART3LPEN
))

	)

2240 
	#__HAL_RCC_UART4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_UART4LPEN
))

	)

2241 
	#__HAL_RCC_UART5_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_UART5LPEN
))

	)

2242 
	#__HAL_RCC_CAN1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_CAN1LPEN
))

	)

2243 
	#__HAL_RCC_CAN2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_CAN2LPEN
))

	)

2244 
	#__HAL_RCC_DAC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_DACLPEN
))

	)

2256 
	#__HAL_RCC_TIM8_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM8LPEN
))

	)

2257 
	#__HAL_RCC_ADC2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_ADC2LPEN
))

	)

2258 
	#__HAL_RCC_ADC3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_ADC3LPEN
))

	)

2259 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SDIOLPEN
))

	)

2260 
	#__HAL_RCC_SPI4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI4LPEN
))

	)

2261 
	#__HAL_RCC_TIM10_CLK_SLEEP_ENABLE
()(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM10LPEN
))

	)

2263 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SDIOLPEN
))

	)

2264 
	#__HAL_RCC_SPI4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI4LPEN
))

	)

2265 
	#__HAL_RCC_TIM10_CLK_SLEEP_DISABLE
()(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM10LPEN
))

	)

2266 
	#__HAL_RCC_TIM8_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM8LPEN
))

	)

2267 
	#__HAL_RCC_ADC2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_ADC2LPEN
))

	)

2268 
	#__HAL_RCC_ADC3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_ADC3LPEN
))

	)

2276 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
)

2284 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

2285 
__IO
 
uöt32_t
 
tm¥eg
; \

2286 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

2288 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

2289 
	`UNUSED
(
tm¥eg
); \

2290 } 0)

	)

2291 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

2292 
__IO
 
uöt32_t
 
tm¥eg
; \

2293 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

2295 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

2296 
	`UNUSED
(
tm¥eg
); \

2297 } 0)

	)

2298 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

2299 
__IO
 
uöt32_t
 
tm¥eg
; \

2300 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

2302 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

2303 
	`UNUSED
(
tm¥eg
); \

2304 } 0)

	)

2305 
	#__HAL_RCC_BKPSRAM_CLK_ENABLE
() do { \

2306 
__IO
 
uöt32_t
 
tm¥eg
; \

2307 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

2309 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

2310 
	`UNUSED
(
tm¥eg
); \

2311 } 0)

	)

2312 
	#__HAL_RCC_CCMDATARAMEN_CLK_ENABLE
() do { \

2313 
__IO
 
uöt32_t
 
tm¥eg
; \

2314 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

2316 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

2317 
	`UNUSED
(
tm¥eg
); \

2318 } 0)

	)

2320 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIODEN
))

	)

2321 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOEEN
))

	)

2322 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CRCEN
))

	)

2323 
	#__HAL_RCC_BKPSRAM_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_BKPSRAMEN
))

	)

2324 
	#__HAL_RCC_CCMDATARAMEN_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CCMDATARAMEN
))

	)

2336 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
(Ëdÿ{(
RCC
->
AHB2ENR
 |(
RCC_AHB2ENR_OTGFSEN
));\

2337 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();\

2338 }0)

	)

2340 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ëdÿ{ (
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_OTGFSEN
));\

2341 
	`__HAL_RCC_SYSCFG_CLK_DISABLE
();\

2342 }0)

	)

2354 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

2355 
__IO
 
uöt32_t
 
tm¥eg
; \

2356 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

2358 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

2359 
	`UNUSED
(
tm¥eg
); \

2360 } 0)

	)

2361 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

2362 
__IO
 
uöt32_t
 
tm¥eg
; \

2363 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

2365 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

2366 
	`UNUSED
(
tm¥eg
); \

2367 } 0)

	)

2368 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

2369 
__IO
 
uöt32_t
 
tm¥eg
; \

2370 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

2372 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

2373 
	`UNUSED
(
tm¥eg
); \

2374 } 0)

	)

2375 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

2376 
__IO
 
uöt32_t
 
tm¥eg
; \

2377 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

2379 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

2380 
	`UNUSED
(
tm¥eg
); \

2381 } 0)

	)

2382 
	#__HAL_RCC_I2C3_CLK_ENABLE
() do { \

2383 
__IO
 
uöt32_t
 
tm¥eg
; \

2384 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

2386 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

2387 
	`UNUSED
(
tm¥eg
); \

2388 } 0)

	)

2389 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM2EN
))

	)

2390 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM3EN
))

	)

2391 
	#__HAL_RCC_TIM4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM4EN
))

	)

2392 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

2393 
	#__HAL_RCC_I2C3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C3EN
))

	)

2405 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

2406 
__IO
 
uöt32_t
 
tm¥eg
; \

2407 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

2409 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

2410 
	`UNUSED
(
tm¥eg
); \

2411 } 0)

	)

2412 
	#__HAL_RCC_SPI4_CLK_ENABLE
() do { \

2413 
__IO
 
uöt32_t
 
tm¥eg
; \

2414 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

2416 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

2417 
	`UNUSED
(
tm¥eg
); \

2418 } 0)

	)

2419 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

2420 
__IO
 
uöt32_t
 
tm¥eg
; \

2421 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

2423 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

2424 
	`UNUSED
(
tm¥eg
); \

2425 } 0)

	)

2427 
	#__HAL_RCC_SDIO_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SDIOEN
))

	)

2428 
	#__HAL_RCC_SPI4_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI4EN
))

	)

2429 
	#__HAL_RCC_TIM10_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM10EN
))

	)

2438 
	#__HAL_RCC_AHB1_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 = 0xFFFFFFFF)

	)

2439 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIODRST
))

	)

2440 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOERST
))

	)

2441 
	#__HAL_RCC_CRC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_CRCRST
))

	)

2443 
	#__HAL_RCC_AHB1_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 = 0x00)

	)

2444 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIODRST
))

	)

2445 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOERST
))

	)

2446 
	#__HAL_RCC_CRC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_CRCRST
))

	)

2455 
	#__HAL_RCC_AHB2_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0xFFFFFFFF)

	)

2456 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_OTGFSRST
))

	)

2458 
	#__HAL_RCC_AHB2_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0x00)

	)

2459 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_OTGFSRST
))

	)

2468 
	#__HAL_RCC_APB1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0xFFFFFFFF)

	)

2469 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM2RST
))

	)

2470 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM3RST
))

	)

2471 
	#__HAL_RCC_TIM4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM4RST
))

	)

2472 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

2473 
	#__HAL_RCC_I2C3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C3RST
))

	)

2475 
	#__HAL_RCC_APB1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0x00)

	)

2476 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM2RST
))

	)

2477 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM3RST
))

	)

2478 
	#__HAL_RCC_TIM4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM4RST
))

	)

2479 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

2480 
	#__HAL_RCC_I2C3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C3RST
))

	)

2489 
	#__HAL_RCC_APB2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0xFFFFFFFF)

	)

2490 
	#__HAL_RCC_SDIO_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SDIORST
))

	)

2491 
	#__HAL_RCC_SPI4_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI4RST
))

	)

2492 
	#__HAL_RCC_TIM10_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM10RST
))

	)

2494 
	#__HAL_RCC_APB2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0x00)

	)

2495 
	#__HAL_RCC_SDIO_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SDIORST
))

	)

2496 
	#__HAL_RCC_SPI4_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI4RST
))

	)

2497 
	#__HAL_RCC_TIM10_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM10RST
))

	)

2506 
	#__HAL_RCC_AHB3_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0xFFFFFFFF)

	)

2507 
	#__HAL_RCC_AHB3_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0x00)

	)

2520 
	#__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIODLPEN
))

	)

2521 
	#__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOELPEN
))

	)

2522 
	#__HAL_RCC_CRC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_CRCLPEN
))

	)

2523 
	#__HAL_RCC_FLITF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_FLITFLPEN
))

	)

2524 
	#__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

2525 
	#__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_BKPSRAMLPEN
))

	)

2527 
	#__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIODLPEN
))

	)

2528 
	#__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOELPEN
))

	)

2529 
	#__HAL_RCC_CRC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_CRCLPEN
))

	)

2530 
	#__HAL_RCC_FLITF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_FLITFLPEN
))

	)

2531 
	#__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

2532 
	#__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_BKPSRAMLPEN
))

	)

2545 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

2547 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

2560 
	#__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM2LPEN
))

	)

2561 
	#__HAL_RCC_TIM3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM3LPEN
))

	)

2562 
	#__HAL_RCC_TIM4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM4LPEN
))

	)

2563 
	#__HAL_RCC_SPI3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_SPI3LPEN
))

	)

2564 
	#__HAL_RCC_I2C3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_I2C3LPEN
))

	)

2566 
	#__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM2LPEN
))

	)

2567 
	#__HAL_RCC_TIM3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM3LPEN
))

	)

2568 
	#__HAL_RCC_TIM4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM4LPEN
))

	)

2569 
	#__HAL_RCC_SPI3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_SPI3LPEN
))

	)

2570 
	#__HAL_RCC_I2C3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_I2C3LPEN
))

	)

2583 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SDIOLPEN
))

	)

2584 
	#__HAL_RCC_SPI4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI4LPEN
))

	)

2585 
	#__HAL_RCC_TIM10_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM10LPEN
))

	)

2587 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SDIOLPEN
))

	)

2588 
	#__HAL_RCC_SPI4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI4LPEN
))

	)

2589 
	#__HAL_RCC_TIM10_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM10LPEN
))

	)

2597 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

2604 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

2605 
__IO
 
uöt32_t
 
tm¥eg
; \

2606 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

2608 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

2609 
	`UNUSED
(
tm¥eg
); \

2610 } 0)

	)

2611 
	#__HAL_RCC_RNG_CLK_ENABLE
() do { \

2612 
__IO
 
uöt32_t
 
tm¥eg
; \

2613 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_RNGEN
);\

2615 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_RNGEN
);\

2616 
	`UNUSED
(
tm¥eg
); \

2617 } 0)

	)

2618 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CRCEN
))

	)

2619 
	#__HAL_RCC_RNG_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_RNGEN
))

	)

2627 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

2628 
__IO
 
uöt32_t
 
tm¥eg
; \

2629 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

2631 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

2632 
	`UNUSED
(
tm¥eg
); \

2633 } 0)

	)

2634 
	#__HAL_RCC_LPTIM1_CLK_ENABLE
() do { \

2635 
__IO
 
uöt32_t
 
tm¥eg
; \

2636 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPTIM1EN
);\

2638 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_LPTIM1EN
);\

2639 
	`UNUSED
(
tm¥eg
); \

2640 } 0)

	)

2641 
	#__HAL_RCC_RTCAPB_CLK_ENABLE
() do { \

2642 
__IO
 
uöt32_t
 
tm¥eg
; \

2643 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_RTCAPBEN
);\

2645 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_RTCAPBEN
);\

2646 
	`UNUSED
(
tm¥eg
); \

2647 } 0)

	)

2648 
	#__HAL_RCC_FMPI2C1_CLK_ENABLE
() do { \

2649 
__IO
 
uöt32_t
 
tm¥eg
; \

2650 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_FMPI2C1EN
);\

2652 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_FMPI2C1EN
);\

2653 
	`UNUSED
(
tm¥eg
); \

2654 } 0)

	)

2655 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

2656 
__IO
 
uöt32_t
 
tm¥eg
; \

2657 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

2659 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

2660 
	`UNUSED
(
tm¥eg
); \

2661 } 0)

	)

2663 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

2664 
	#__HAL_RCC_RTCAPB_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_RTCAPBEN
))

	)

2665 
	#__HAL_RCC_LPTIM1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_LPTIM1EN
))

	)

2666 
	#__HAL_RCC_FMPI2C1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_FMPI2C1EN
))

	)

2667 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

2675 
	#__HAL_RCC_SPI5_CLK_ENABLE
() do { \

2676 
__IO
 
uöt32_t
 
tm¥eg
; \

2677 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI5EN
);\

2679 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI5EN
);\

2680 
	`UNUSED
(
tm¥eg
); \

2681 } 0)

	)

2682 
	#__HAL_RCC_EXTIT_CLK_ENABLE
() do { \

2683 
__IO
 
uöt32_t
 
tm¥eg
; \

2684 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_EXTITEN
);\

2686 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_EXTITEN
);\

2687 
	`UNUSED
(
tm¥eg
); \

2688 } 0)

	)

2689 
	#__HAL_RCC_SPI5_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI5EN
))

	)

2690 
	#__HAL_RCC_EXTIT_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_EXTITEN
))

	)

2698 
	#__HAL_RCC_CRC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_CRCRST
))

	)

2699 
	#__HAL_RCC_RNG_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_RNGRST
))

	)

2700 
	#__HAL_RCC_CRC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_CRCRST
))

	)

2701 
	#__HAL_RCC_RNG_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_RNGRST
))

	)

2710 
	#__HAL_RCC_AHB2_FORCE_RESET
()

	)

2711 
	#__HAL_RCC_AHB2_RELEASE_RESET
()

	)

2720 
	#__HAL_RCC_AHB3_FORCE_RESET
()

	)

2721 
	#__HAL_RCC_AHB3_RELEASE_RESET
()

	)

2729 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

2730 
	#__HAL_RCC_LPTIM1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_LPTIM1RST
))

	)

2731 
	#__HAL_RCC_FMPI2C1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_FMPI2C1RST
))

	)

2732 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

2734 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

2735 
	#__HAL_RCC_LPTIM1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_LPTIM1RST
))

	)

2736 
	#__HAL_RCC_FMPI2C1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_FMPI2C1RST
))

	)

2737 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

2745 
	#__HAL_RCC_SPI5_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI5RST
))

	)

2746 
	#__HAL_RCC_SPI5_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI5RST
))

	)

2758 
	#__HAL_RCC_RNG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_RNGLPEN
))

	)

2759 
	#__HAL_RCC_CRC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_CRCLPEN
))

	)

2760 
	#__HAL_RCC_FLITF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_FLITFLPEN
))

	)

2761 
	#__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

2763 
	#__HAL_RCC_RNG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_RNGLPEN
))

	)

2764 
	#__HAL_RCC_CRC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_CRCLPEN
))

	)

2765 
	#__HAL_RCC_FLITF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_FLITFLPEN
))

	)

2766 
	#__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

2774 
	#__HAL_RCC_TIM6_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM6LPEN
))

	)

2775 
	#__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_LPTIM1LPEN
))

	)

2776 
	#__HAL_RCC_RTCAPB_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_RTCAPBLPEN
))

	)

2777 
	#__HAL_RCC_FMPI2C1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_FMPI2C1LPEN
))

	)

2778 
	#__HAL_RCC_DAC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_DACLPEN
))

	)

2780 
	#__HAL_RCC_TIM6_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM6LPEN
))

	)

2781 
	#__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_LPTIM1LPEN
))

	)

2782 
	#__HAL_RCC_RTCAPB_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_RTCAPBLPEN
))

	)

2783 
	#__HAL_RCC_FMPI2C1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_FMPI2C1LPEN
))

	)

2784 
	#__HAL_RCC_DAC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_DACLPEN
))

	)

2792 
	#__HAL_RCC_SPI5_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI5LPEN
))

	)

2793 
	#__HAL_RCC_EXTIT_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_EXTITLPEN
))

	)

2794 
	#__HAL_RCC_SPI5_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI5LPEN
))

	)

2795 
	#__HAL_RCC_EXTIT_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_EXTITLPEN
))

	)

2804 #i‡
deföed
(
STM32F411xE
)

2811 
	#__HAL_RCC_BKPSRAM_CLK_ENABLE
() do { \

2812 
__IO
 
uöt32_t
 
tm¥eg
; \

2813 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

2815 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

2816 
	`UNUSED
(
tm¥eg
); \

2817 } 0)

	)

2818 
	#__HAL_RCC_CCMDATARAMEN_CLK_ENABLE
() do { \

2819 
__IO
 
uöt32_t
 
tm¥eg
; \

2820 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

2822 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

2823 
	`UNUSED
(
tm¥eg
); \

2824 } 0)

	)

2825 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

2826 
__IO
 
uöt32_t
 
tm¥eg
; \

2827 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

2829 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

2830 
	`UNUSED
(
tm¥eg
); \

2831 } 0)

	)

2832 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

2833 
__IO
 
uöt32_t
 
tm¥eg
; \

2834 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

2836 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

2837 
	`UNUSED
(
tm¥eg
); \

2838 } 0)

	)

2839 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

2840 
__IO
 
uöt32_t
 
tm¥eg
; \

2841 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

2843 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

2844 
	`UNUSED
(
tm¥eg
); \

2845 } 0)

	)

2846 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIODEN
))

	)

2847 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOEEN
))

	)

2848 
	#__HAL_RCC_BKPSRAM_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_BKPSRAMEN
))

	)

2849 
	#__HAL_RCC_CCMDATARAMEN_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CCMDATARAMEN
))

	)

2850 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CRCEN
))

	)

2862 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
(Ëdÿ{(
RCC
->
AHB2ENR
 |(
RCC_AHB2ENR_OTGFSEN
));\

2863 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();\

2864 }0)

	)

2866 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ëdÿ{ (
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_OTGFSEN
));\

2867 
	`__HAL_RCC_SYSCFG_CLK_DISABLE
();\

2868 }0)

	)

2879 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

2880 
__IO
 
uöt32_t
 
tm¥eg
; \

2881 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

2883 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

2884 
	`UNUSED
(
tm¥eg
); \

2885 } 0)

	)

2886 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

2887 
__IO
 
uöt32_t
 
tm¥eg
; \

2888 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

2890 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

2891 
	`UNUSED
(
tm¥eg
); \

2892 } 0)

	)

2893 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

2894 
__IO
 
uöt32_t
 
tm¥eg
; \

2895 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

2897 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

2898 
	`UNUSED
(
tm¥eg
); \

2899 } 0)

	)

2900 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

2901 
__IO
 
uöt32_t
 
tm¥eg
; \

2902 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

2904 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

2905 
	`UNUSED
(
tm¥eg
); \

2906 } 0)

	)

2907 
	#__HAL_RCC_I2C3_CLK_ENABLE
() do { \

2908 
__IO
 
uöt32_t
 
tm¥eg
; \

2909 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

2911 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

2912 
	`UNUSED
(
tm¥eg
); \

2913 } 0)

	)

2914 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM2EN
))

	)

2915 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM3EN
))

	)

2916 
	#__HAL_RCC_TIM4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM4EN
))

	)

2917 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

2918 
	#__HAL_RCC_I2C3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C3EN
))

	)

2925 
	#__HAL_RCC_SPI5_CLK_ENABLE
() do { \

2926 
__IO
 
uöt32_t
 
tm¥eg
; \

2927 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI5EN
);\

2929 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI5EN
);\

2930 
	`UNUSED
(
tm¥eg
); \

2931 } 0)

	)

2932 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

2933 
__IO
 
uöt32_t
 
tm¥eg
; \

2934 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

2936 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

2937 
	`UNUSED
(
tm¥eg
); \

2938 } 0)

	)

2939 
	#__HAL_RCC_SPI4_CLK_ENABLE
() do { \

2940 
__IO
 
uöt32_t
 
tm¥eg
; \

2941 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

2943 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

2944 
	`UNUSED
(
tm¥eg
); \

2945 } 0)

	)

2946 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

2947 
__IO
 
uöt32_t
 
tm¥eg
; \

2948 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

2950 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

2951 
	`UNUSED
(
tm¥eg
); \

2952 } 0)

	)

2953 
	#__HAL_RCC_SDIO_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SDIOEN
))

	)

2954 
	#__HAL_RCC_SPI4_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI4EN
))

	)

2955 
	#__HAL_RCC_TIM10_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM10EN
))

	)

2956 
	#__HAL_RCC_SPI5_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI5EN
))

	)

2964 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIODRST
))

	)

2965 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOERST
))

	)

2966 
	#__HAL_RCC_CRC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_CRCRST
))

	)

2968 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIODRST
))

	)

2969 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOERST
))

	)

2970 
	#__HAL_RCC_CRC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_CRCRST
))

	)

2979 
	#__HAL_RCC_AHB2_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0xFFFFFFFF)

	)

2980 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_OTGFSRST
))

	)

2982 
	#__HAL_RCC_AHB2_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0x00)

	)

2983 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_OTGFSRST
))

	)

2992 
	#__HAL_RCC_AHB3_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0xFFFFFFFF)

	)

2993 
	#__HAL_RCC_AHB3_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0x00)

	)

3001 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM2RST
))

	)

3002 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM3RST
))

	)

3003 
	#__HAL_RCC_TIM4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM4RST
))

	)

3004 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

3005 
	#__HAL_RCC_I2C3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C3RST
))

	)

3007 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM2RST
))

	)

3008 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM3RST
))

	)

3009 
	#__HAL_RCC_TIM4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM4RST
))

	)

3010 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

3011 
	#__HAL_RCC_I2C3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C3RST
))

	)

3019 
	#__HAL_RCC_SPI5_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI5RST
))

	)

3020 
	#__HAL_RCC_SDIO_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SDIORST
))

	)

3021 
	#__HAL_RCC_SPI4_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI4RST
))

	)

3022 
	#__HAL_RCC_TIM10_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM10RST
))

	)

3024 
	#__HAL_RCC_SDIO_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SDIORST
))

	)

3025 
	#__HAL_RCC_SPI4_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI4RST
))

	)

3026 
	#__HAL_RCC_TIM10_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM10RST
))

	)

3027 
	#__HAL_RCC_SPI5_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI5RST
))

	)

3039 
	#__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIODLPEN
))

	)

3040 
	#__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOELPEN
))

	)

3041 
	#__HAL_RCC_CRC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_CRCLPEN
))

	)

3042 
	#__HAL_RCC_FLITF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_FLITFLPEN
))

	)

3043 
	#__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

3045 
	#__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIODLPEN
))

	)

3046 
	#__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOELPEN
))

	)

3047 
	#__HAL_RCC_CRC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_CRCLPEN
))

	)

3048 
	#__HAL_RCC_FLITF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_FLITFLPEN
))

	)

3049 
	#__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

3062 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

3063 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

3071 
	#__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM2LPEN
))

	)

3072 
	#__HAL_RCC_TIM3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM3LPEN
))

	)

3073 
	#__HAL_RCC_TIM4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM4LPEN
))

	)

3074 
	#__HAL_RCC_SPI3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_SPI3LPEN
))

	)

3075 
	#__HAL_RCC_I2C3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_I2C3LPEN
))

	)

3077 
	#__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM2LPEN
))

	)

3078 
	#__HAL_RCC_TIM3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM3LPEN
))

	)

3079 
	#__HAL_RCC_TIM4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM4LPEN
))

	)

3080 
	#__HAL_RCC_SPI3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_SPI3LPEN
))

	)

3081 
	#__HAL_RCC_I2C3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_I2C3LPEN
))

	)

3089 
	#__HAL_RCC_SPI5_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI5LPEN
))

	)

3090 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SDIOLPEN
))

	)

3091 
	#__HAL_RCC_SPI4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI4LPEN
))

	)

3092 
	#__HAL_RCC_TIM10_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM10LPEN
))

	)

3094 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SDIOLPEN
))

	)

3095 
	#__HAL_RCC_SPI4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI4LPEN
))

	)

3096 
	#__HAL_RCC_TIM10_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM10LPEN
))

	)

3097 
	#__HAL_RCC_SPI5_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI5LPEN
))

	)

3105 #i‡
deföed
(
STM32F446xx
)

3112 
	#__HAL_RCC_BKPSRAM_CLK_ENABLE
() do { \

3113 
__IO
 
uöt32_t
 
tm¥eg
; \

3114 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

3116 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_BKPSRAMEN
);\

3117 
	`UNUSED
(
tm¥eg
); \

3118 } 0)

	)

3119 
	#__HAL_RCC_CCMDATARAMEN_CLK_ENABLE
() do { \

3120 
__IO
 
uöt32_t
 
tm¥eg
; \

3121 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

3123 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CCMDATARAMEN
);\

3124 
	`UNUSED
(
tm¥eg
); \

3125 } 0)

	)

3126 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

3127 
__IO
 
uöt32_t
 
tm¥eg
; \

3128 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

3130 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_CRCEN
);\

3131 
	`UNUSED
(
tm¥eg
); \

3132 } 0)

	)

3133 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

3134 
__IO
 
uöt32_t
 
tm¥eg
; \

3135 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

3137 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIODEN
);\

3138 
	`UNUSED
(
tm¥eg
); \

3139 } 0)

	)

3140 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

3141 
__IO
 
uöt32_t
 
tm¥eg
; \

3142 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

3144 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOEEN
);\

3145 
	`UNUSED
(
tm¥eg
); \

3146 } 0)

	)

3147 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

3148 
__IO
 
uöt32_t
 
tm¥eg
; \

3149 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOFEN
);\

3151 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOFEN
);\

3152 
	`UNUSED
(
tm¥eg
); \

3153 } 0)

	)

3154 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

3155 
__IO
 
uöt32_t
 
tm¥eg
; \

3156 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOGEN
);\

3158 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_GPIOGEN
);\

3159 
	`UNUSED
(
tm¥eg
); \

3160 } 0)

	)

3161 
	#__HAL_RCC_USB_OTG_HS_CLK_ENABLE
() do { \

3162 
__IO
 
uöt32_t
 
tm¥eg
; \

3163 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSEN
);\

3165 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSEN
);\

3166 
	`UNUSED
(
tm¥eg
); \

3167 } 0)

	)

3168 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE
() do { \

3169 
__IO
 
uöt32_t
 
tm¥eg
; \

3170 
	`SET_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSULPIEN
);\

3172 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB1ENR
, 
RCC_AHB1ENR_OTGHSULPIEN
);\

3173 
	`UNUSED
(
tm¥eg
); \

3174 } 0)

	)

3175 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIODEN
))

	)

3176 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOEEN
))

	)

3177 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOFEN
))

	)

3178 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_GPIOGEN
))

	)

3179 
	#__HAL_RCC_USB_OTG_HS_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_OTGHSEN
))

	)

3180 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_OTGHSULPIEN
))

	)

3181 
	#__HAL_RCC_BKPSRAM_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_BKPSRAMEN
))

	)

3182 
	#__HAL_RCC_CCMDATARAMEN_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CCMDATARAMEN
))

	)

3183 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHB1ENR
 &~(
RCC_AHB1ENR_CRCEN
))

	)

3194 
	#__HAL_RCC_DCMI_CLK_ENABLE
() do { \

3195 
__IO
 
uöt32_t
 
tm¥eg
; \

3196 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_DCMIEN
);\

3198 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_DCMIEN
);\

3199 
	`UNUSED
(
tm¥eg
); \

3200 } 0)

	)

3201 
	#__HAL_RCC_DCMI_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_DCMIEN
))

	)

3202 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
(Ëdÿ{(
RCC
->
AHB2ENR
 |(
RCC_AHB2ENR_OTGFSEN
));\

3203 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();\

3204 }0)

	)

3206 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ëdÿ{ (
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_OTGFSEN
));\

3207 
	`__HAL_RCC_SYSCFG_CLK_DISABLE
();\

3208 }0)

	)

3210 
	#__HAL_RCC_RNG_CLK_ENABLE
() do { \

3211 
__IO
 
uöt32_t
 
tm¥eg
; \

3212 
	`SET_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_RNGEN
);\

3214 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB2ENR
, 
RCC_AHB2ENR_RNGEN
);\

3215 
	`UNUSED
(
tm¥eg
); \

3216 } 0)

	)

3217 
	#__HAL_RCC_RNG_CLK_DISABLE
(Ë(
RCC
->
AHB2ENR
 &~(
RCC_AHB2ENR_RNGEN
))

	)

3228 
	#__HAL_RCC_FMC_CLK_ENABLE
() do { \

3229 
__IO
 
uöt32_t
 
tm¥eg
; \

3230 
	`SET_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_FMCEN
);\

3232 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_FMCEN
);\

3233 
	`UNUSED
(
tm¥eg
); \

3234 } 0)

	)

3235 
	#__HAL_RCC_QSPI_CLK_ENABLE
() do { \

3236 
__IO
 
uöt32_t
 
tm¥eg
; \

3237 
	`SET_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_QSPIEN
);\

3239 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHB3ENR
, 
RCC_AHB3ENR_QSPIEN
);\

3240 
	`UNUSED
(
tm¥eg
); \

3241 } 0)

	)

3243 
	#__HAL_RCC_FMC_CLK_DISABLE
(Ë(
RCC
->
AHB3ENR
 &~(
RCC_AHB3ENR_FMCEN
))

	)

3244 
	#__HAL_RCC_QSPI_CLK_DISABLE
(Ë(
RCC
->
AHB3ENR
 &~(
RCC_AHB3ENR_QSPIEN
))

	)

3255 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

3256 
__IO
 
uöt32_t
 
tm¥eg
; \

3257 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

3259 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

3260 
	`UNUSED
(
tm¥eg
); \

3261 } 0)

	)

3262 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

3263 
__IO
 
uöt32_t
 
tm¥eg
; \

3264 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

3266 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

3267 
	`UNUSED
(
tm¥eg
); \

3268 } 0)

	)

3269 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

3270 
__IO
 
uöt32_t
 
tm¥eg
; \

3271 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

3273 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

3274 
	`UNUSED
(
tm¥eg
); \

3275 } 0)

	)

3276 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

3277 
__IO
 
uöt32_t
 
tm¥eg
; \

3278 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

3280 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

3281 
	`UNUSED
(
tm¥eg
); \

3282 } 0)

	)

3283 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

3284 
__IO
 
uöt32_t
 
tm¥eg
; \

3285 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

3287 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

3288 
	`UNUSED
(
tm¥eg
); \

3289 } 0)

	)

3290 
	#__HAL_RCC_SPDIFRX_CLK_ENABLE
() do { \

3291 
__IO
 
uöt32_t
 
tm¥eg
; \

3292 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPDIFRXEN
);\

3294 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPDIFRXEN
);\

3295 
	`UNUSED
(
tm¥eg
); \

3296 } 0)

	)

3297 
	#__HAL_RCC_USART3_CLK_ENABLE
() do { \

3298 
__IO
 
uöt32_t
 
tm¥eg
; \

3299 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

3301 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

3302 
	`UNUSED
(
tm¥eg
); \

3303 } 0)

	)

3304 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

3305 
__IO
 
uöt32_t
 
tm¥eg
; \

3306 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

3308 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

3309 
	`UNUSED
(
tm¥eg
); \

3310 } 0)

	)

3311 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

3312 
__IO
 
uöt32_t
 
tm¥eg
; \

3313 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

3315 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

3316 
	`UNUSED
(
tm¥eg
); \

3317 } 0)

	)

3318 
	#__HAL_RCC_FMPI2C1_CLK_ENABLE
() do { \

3319 
__IO
 
uöt32_t
 
tm¥eg
; \

3320 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_FMPI2C1EN
);\

3322 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_FMPI2C1EN
);\

3323 
	`UNUSED
(
tm¥eg
); \

3324 } 0)

	)

3325 
	#__HAL_RCC_CAN1_CLK_ENABLE
() do { \

3326 
__IO
 
uöt32_t
 
tm¥eg
; \

3327 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

3329 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

3330 
	`UNUSED
(
tm¥eg
); \

3331 } 0)

	)

3332 
	#__HAL_RCC_CAN2_CLK_ENABLE
() do { \

3333 
__IO
 
uöt32_t
 
tm¥eg
; \

3334 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

3336 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

3337 
	`UNUSED
(
tm¥eg
); \

3338 } 0)

	)

3339 
	#__HAL_RCC_CEC_CLK_ENABLE
() do { \

3340 
__IO
 
uöt32_t
 
tm¥eg
; \

3341 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

3343 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

3344 
	`UNUSED
(
tm¥eg
); \

3345 } 0)

	)

3346 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

3347 
__IO
 
uöt32_t
 
tm¥eg
; \

3348 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

3350 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

3351 
	`UNUSED
(
tm¥eg
); \

3352 } 0)

	)

3353 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

3354 
__IO
 
uöt32_t
 
tm¥eg
; \

3355 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

3357 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

3358 
	`UNUSED
(
tm¥eg
); \

3359 } 0)

	)

3360 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

3361 
__IO
 
uöt32_t
 
tm¥eg
; \

3362 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

3364 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

3365 
	`UNUSED
(
tm¥eg
); \

3366 } 0)

	)

3367 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

3368 
__IO
 
uöt32_t
 
tm¥eg
; \

3369 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

3371 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

3372 
	`UNUSED
(
tm¥eg
); \

3373 } 0)

	)

3374 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

3375 
__IO
 
uöt32_t
 
tm¥eg
; \

3376 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

3378 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

3379 
	`UNUSED
(
tm¥eg
); \

3380 } 0)

	)

3381 
	#__HAL_RCC_I2C3_CLK_ENABLE
() do { \

3382 
__IO
 
uöt32_t
 
tm¥eg
; \

3383 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

3385 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C3EN
);\

3386 
	`UNUSED
(
tm¥eg
); \

3387 } 0)

	)

3388 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM2EN
))

	)

3389 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM3EN
))

	)

3390 
	#__HAL_RCC_TIM4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM4EN
))

	)

3391 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

3392 
	#__HAL_RCC_I2C3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C3EN
))

	)

3393 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

3394 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

3395 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

3396 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

3397 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

3398 
	#__HAL_RCC_SPDIFRX_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPDIFRXEN
))

	)

3399 
	#__HAL_RCC_USART3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART3EN
))

	)

3400 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

3401 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

3402 
	#__HAL_RCC_FMPI2C1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_FMPI2C1EN
))

	)

3403 
	#__HAL_RCC_CAN1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN1EN
))

	)

3404 
	#__HAL_RCC_CAN2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN2EN
))

	)

3405 
	#__HAL_RCC_CEC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CECEN
))

	)

3406 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

3417 
	#__HAL_RCC_TIM8_CLK_ENABLE
() do { \

3418 
__IO
 
uöt32_t
 
tm¥eg
; \

3419 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

3421 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

3422 
	`UNUSED
(
tm¥eg
); \

3423 } 0)

	)

3424 
	#__HAL_RCC_ADC2_CLK_ENABLE
() do { \

3425 
__IO
 
uöt32_t
 
tm¥eg
; \

3426 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

3428 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

3429 
	`UNUSED
(
tm¥eg
); \

3430 } 0)

	)

3431 
	#__HAL_RCC_ADC3_CLK_ENABLE
() do { \

3432 
__IO
 
uöt32_t
 
tm¥eg
; \

3433 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

3435 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

3436 
	`UNUSED
(
tm¥eg
); \

3437 } 0)

	)

3438 
	#__HAL_RCC_SAI1_CLK_ENABLE
() do { \

3439 
__IO
 
uöt32_t
 
tm¥eg
; \

3440 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SAI1EN
);\

3442 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SAI1EN
);\

3443 
	`UNUSED
(
tm¥eg
); \

3444 } 0)

	)

3445 
	#__HAL_RCC_SAI2_CLK_ENABLE
() do { \

3446 
__IO
 
uöt32_t
 
tm¥eg
; \

3447 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SAI2EN
);\

3449 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SAI2EN
);\

3450 
	`UNUSED
(
tm¥eg
); \

3451 } 0)

	)

3452 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

3453 
__IO
 
uöt32_t
 
tm¥eg
; \

3454 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

3456 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SDIOEN
);\

3457 
	`UNUSED
(
tm¥eg
); \

3458 } 0)

	)

3459 
	#__HAL_RCC_SPI4_CLK_ENABLE
() do { \

3460 
__IO
 
uöt32_t
 
tm¥eg
; \

3461 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

3463 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI4EN
);\

3464 
	`UNUSED
(
tm¥eg
); \

3465 } 0)

	)

3466 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

3467 
__IO
 
uöt32_t
 
tm¥eg
; \

3468 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

3470 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

3471 
	`UNUSED
(
tm¥eg
); \

3472 } 0)

	)

3473 
	#__HAL_RCC_SDIO_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SDIOEN
))

	)

3474 
	#__HAL_RCC_SPI4_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI4EN
))

	)

3475 
	#__HAL_RCC_TIM10_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM10EN
))

	)

3476 
	#__HAL_RCC_TIM8_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM8EN
))

	)

3477 
	#__HAL_RCC_ADC2_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC2EN
))

	)

3478 
	#__HAL_RCC_ADC3_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC3EN
))

	)

3479 
	#__HAL_RCC_SAI1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SAI1EN
))

	)

3480 
	#__HAL_RCC_SAI2_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SAI2EN
))

	)

3488 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIODRST
))

	)

3489 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOERST
))

	)

3490 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOFRST
))

	)

3491 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_GPIOGRST
))

	)

3492 
	#__HAL_RCC_USB_OTG_HS_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_OTGHRST
))

	)

3493 
	#__HAL_RCC_CRC_FORCE_RESET
(Ë(
RCC
->
AHB1RSTR
 |(
RCC_AHB1RSTR_CRCRST
))

	)

3495 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIODRST
))

	)

3496 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOERST
))

	)

3497 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOFRST
))

	)

3498 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_GPIOGRST
))

	)

3499 
	#__HAL_RCC_USB_OTG_HS_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_OTGHRST
))

	)

3500 
	#__HAL_RCC_CRC_RELEASE_RESET
(Ë(
RCC
->
AHB1RSTR
 &~(
RCC_AHB1RSTR_CRCRST
))

	)

3509 
	#__HAL_RCC_AHB2_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0xFFFFFFFF)

	)

3510 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_OTGFSRST
))

	)

3511 
	#__HAL_RCC_RNG_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_RNGRST
))

	)

3512 
	#__HAL_RCC_DCMI_FORCE_RESET
(Ë(
RCC
->
AHB2RSTR
 |(
RCC_AHB2RSTR_DCMIRST
))

	)

3514 
	#__HAL_RCC_AHB2_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 = 0x00)

	)

3515 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_OTGFSRST
))

	)

3516 
	#__HAL_RCC_RNG_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_RNGRST
))

	)

3517 
	#__HAL_RCC_DCMI_RELEASE_RESET
(Ë(
RCC
->
AHB2RSTR
 &~(
RCC_AHB2RSTR_DCMIRST
))

	)

3526 
	#__HAL_RCC_AHB3_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0xFFFFFFFF)

	)

3527 
	#__HAL_RCC_AHB3_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 = 0x00)

	)

3529 
	#__HAL_RCC_FMC_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 |(
RCC_AHB3RSTR_FMCRST
))

	)

3530 
	#__HAL_RCC_QSPI_FORCE_RESET
(Ë(
RCC
->
AHB3RSTR
 |(
RCC_AHB3RSTR_QSPIRST
))

	)

3532 
	#__HAL_RCC_FMC_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 &~(
RCC_AHB3RSTR_FMCRST
))

	)

3533 
	#__HAL_RCC_QSPI_RELEASE_RESET
(Ë(
RCC
->
AHB3RSTR
 &~(
RCC_AHB3RSTR_QSPIRST
))

	)

3541 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

3542 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

3543 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

3544 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

3545 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

3546 
	#__HAL_RCC_SPDIFRX_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPDIFRXRST
))

	)

3547 
	#__HAL_RCC_USART3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART3RST
))

	)

3548 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

3549 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

3550 
	#__HAL_RCC_FMPI2C1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_FMPI2C1RST
))

	)

3551 
	#__HAL_RCC_CAN1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN1RST
))

	)

3552 
	#__HAL_RCC_CAN2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN2RST
))

	)

3553 
	#__HAL_RCC_CEC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CECRST
))

	)

3554 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

3555 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM2RST
))

	)

3556 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM3RST
))

	)

3557 
	#__HAL_RCC_TIM4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM4RST
))

	)

3558 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

3559 
	#__HAL_RCC_I2C3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C3RST
))

	)

3561 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM2RST
))

	)

3562 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM3RST
))

	)

3563 
	#__HAL_RCC_TIM4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM4RST
))

	)

3564 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

3565 
	#__HAL_RCC_I2C3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C3RST
))

	)

3566 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

3567 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

3568 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

3569 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

3570 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

3571 
	#__HAL_RCC_SPDIFRX_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPDIFRXRST
))

	)

3572 
	#__HAL_RCC_USART3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART3RST
))

	)

3573 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

3574 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

3575 
	#__HAL_RCC_FMPI2C1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_FMPI2C1RST
))

	)

3576 
	#__HAL_RCC_CAN1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN1RST
))

	)

3577 
	#__HAL_RCC_CAN2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN2RST
))

	)

3578 
	#__HAL_RCC_CEC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CECRST
))

	)

3579 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

3587 
	#__HAL_RCC_TIM8_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM8RST
))

	)

3588 
	#__HAL_RCC_SAI1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SAI1RST
))

	)

3589 
	#__HAL_RCC_SAI2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SAI2RST
))

	)

3590 
	#__HAL_RCC_SDIO_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SDIORST
))

	)

3591 
	#__HAL_RCC_SPI4_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI4RST
))

	)

3592 
	#__HAL_RCC_TIM10_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM10RST
))

	)

3594 
	#__HAL_RCC_SDIO_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SDIORST
))

	)

3595 
	#__HAL_RCC_SPI4_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI4RST
))

	)

3596 
	#__HAL_RCC_TIM10_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM10RST
))

	)

3597 
	#__HAL_RCC_TIM8_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM8RST
))

	)

3598 
	#__HAL_RCC_SAI1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SAI1RST
))

	)

3599 
	#__HAL_RCC_SAI2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SAI2RST
))

	)

3611 
	#__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIODLPEN
))

	)

3612 
	#__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOELPEN
))

	)

3613 
	#__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOFLPEN
))

	)

3614 
	#__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_GPIOGLPEN
))

	)

3615 
	#__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM2LPEN
))

	)

3616 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_OTGHSLPEN
))

	)

3617 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_OTGHSULPILPEN
))

	)

3618 
	#__HAL_RCC_CRC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_CRCLPEN
))

	)

3619 
	#__HAL_RCC_FLITF_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_FLITFLPEN
))

	)

3620 
	#__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

3621 
	#__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB1LPENR
 |(
RCC_AHB1LPENR_BKPSRAMLPEN
))

	)

3623 
	#__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIODLPEN
))

	)

3624 
	#__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOELPEN
))

	)

3625 
	#__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOFLPEN
))

	)

3626 
	#__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_GPIOGLPEN
))

	)

3627 
	#__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM2LPEN
))

	)

3628 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_OTGHSLPEN
))

	)

3629 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_OTGHSULPILPEN
))

	)

3630 
	#__HAL_RCC_CRC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_CRCLPEN
))

	)

3631 
	#__HAL_RCC_FLITF_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_FLITFLPEN
))

	)

3632 
	#__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_SRAM1LPEN
))

	)

3633 
	#__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB1LPENR
 &~(
RCC_AHB1LPENR_BKPSRAMLPEN
))

	)

3646 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

3647 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_OTGFSLPEN
))

	)

3649 
	#__HAL_RCC_RNG_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_RNGLPEN
))

	)

3650 
	#__HAL_RCC_RNG_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_RNGLPEN
))

	)

3652 
	#__HAL_RCC_DCMI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB2LPENR
 |(
RCC_AHB2LPENR_DCMILPEN
))

	)

3653 
	#__HAL_RCC_DCMI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB2LPENR
 &~(
RCC_AHB2LPENR_DCMILPEN
))

	)

3665 
	#__HAL_RCC_FMC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB3LPENR
 |(
RCC_AHB3LPENR_FMCLPEN
))

	)

3666 
	#__HAL_RCC_QSPI_CLK_SLEEP_ENABLE
(Ë(
RCC
->
AHB3LPENR
 |(
RCC_AHB3LPENR_QSPILPEN
))

	)

3668 
	#__HAL_RCC_FMC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB3LPENR
 &~(
RCC_AHB3LPENR_FMCLPEN
))

	)

3669 
	#__HAL_RCC_QSPI_CLK_SLEEP_DISABLE
(Ë(
RCC
->
AHB3LPENR
 &~(
RCC_AHB3LPENR_QSPILPEN
))

	)

3681 
	#__HAL_RCC_TIM6_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM6LPEN
))

	)

3682 
	#__HAL_RCC_TIM7_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM7LPEN
))

	)

3683 
	#__HAL_RCC_TIM12_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM12LPEN
))

	)

3684 
	#__HAL_RCC_TIM13_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM13LPEN
))

	)

3685 
	#__HAL_RCC_TIM14_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM14LPEN
))

	)

3686 
	#__HAL_RCC_SPDIFRX_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_SPDIFRXLPEN
))

	)

3687 
	#__HAL_RCC_USART3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_USART3LPEN
))

	)

3688 
	#__HAL_RCC_UART4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_UART4LPEN
))

	)

3689 
	#__HAL_RCC_UART5_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_UART5LPEN
))

	)

3690 
	#__HAL_RCC_FMPI2C1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_FMPI2C1LPEN
))

	)

3691 
	#__HAL_RCC_CAN1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_CAN1LPEN
))

	)

3692 
	#__HAL_RCC_CAN2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_CAN2LPEN
))

	)

3693 
	#__HAL_RCC_CEC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_CECLPEN
))

	)

3694 
	#__HAL_RCC_DAC_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_DACLPEN
))

	)

3695 
	#__HAL_RCC_TIM2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM2LPEN
))

	)

3696 
	#__HAL_RCC_TIM3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM3LPEN
))

	)

3697 
	#__HAL_RCC_TIM4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_TIM4LPEN
))

	)

3698 
	#__HAL_RCC_SPI3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_SPI3LPEN
))

	)

3699 
	#__HAL_RCC_I2C3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB1LPENR
 |(
RCC_APB1LPENR_I2C3LPEN
))

	)

3701 
	#__HAL_RCC_TIM2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM2LPEN
))

	)

3702 
	#__HAL_RCC_TIM3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM3LPEN
))

	)

3703 
	#__HAL_RCC_TIM4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM4LPEN
))

	)

3704 
	#__HAL_RCC_SPI3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_SPI3LPEN
))

	)

3705 
	#__HAL_RCC_I2C3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_I2C3LPEN
))

	)

3706 
	#__HAL_RCC_TIM6_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM6LPEN
))

	)

3707 
	#__HAL_RCC_TIM7_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM7LPEN
))

	)

3708 
	#__HAL_RCC_TIM12_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM12LPEN
))

	)

3709 
	#__HAL_RCC_TIM13_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM13LPEN
))

	)

3710 
	#__HAL_RCC_TIM14_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_TIM14LPEN
))

	)

3711 
	#__HAL_RCC_SPDIFRX_CLK_SLEEP_DISABLE
()(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_SPDIFRXLPEN
))

	)

3712 
	#__HAL_RCC_USART3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_USART3LPEN
))

	)

3713 
	#__HAL_RCC_UART4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_UART4LPEN
))

	)

3714 
	#__HAL_RCC_UART5_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_UART5LPEN
))

	)

3715 
	#__HAL_RCC_FMPI2C1_CLK_SLEEP_DISABLE
()(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_FMPI2C1LPEN
))

	)

3716 
	#__HAL_RCC_CAN1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_CAN1LPEN
))

	)

3717 
	#__HAL_RCC_CAN2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_CAN2LPEN
))

	)

3718 
	#__HAL_RCC_CEC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_CECLPEN
))

	)

3719 
	#__HAL_RCC_DAC_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB1LPENR
 &~(
RCC_APB1LPENR_DACLPEN
))

	)

3731 
	#__HAL_RCC_TIM8_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM8LPEN
))

	)

3732 
	#__HAL_RCC_ADC2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_ADC2LPEN
))

	)

3733 
	#__HAL_RCC_ADC3_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_ADC3LPEN
))

	)

3734 
	#__HAL_RCC_SAI1_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SAI1LPEN
))

	)

3735 
	#__HAL_RCC_SAI2_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SAI2LPEN
))

	)

3736 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SDIOLPEN
))

	)

3737 
	#__HAL_RCC_SPI4_CLK_SLEEP_ENABLE
(Ë(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_SPI4LPEN
))

	)

3738 
	#__HAL_RCC_TIM10_CLK_SLEEP_ENABLE
()(
RCC
->
APB2LPENR
 |(
RCC_APB2LPENR_TIM10LPEN
))

	)

3740 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SDIOLPEN
))

	)

3741 
	#__HAL_RCC_SPI4_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SPI4LPEN
))

	)

3742 
	#__HAL_RCC_TIM10_CLK_SLEEP_DISABLE
()(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM10LPEN
))

	)

3743 
	#__HAL_RCC_TIM8_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_TIM8LPEN
))

	)

3744 
	#__HAL_RCC_ADC2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_ADC2LPEN
))

	)

3745 
	#__HAL_RCC_ADC3_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_ADC3LPEN
))

	)

3746 
	#__HAL_RCC_SAI1_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SAI1LPEN
))

	)

3747 
	#__HAL_RCC_SAI2_CLK_SLEEP_DISABLE
(Ë(
RCC
->
APB2LPENR
 &~(
RCC_APB2LPENR_SAI2LPEN
))

	)

3755 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
) ||\

3756 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

3789 
	#__HAL_RCC_PLL_CONFIG
(
__RCC_PLLSour˚__
, 
__PLLM__
, 
__PLLN__
, 
__PLLP__
, 
__PLLQ__
,
__PLLR__
) \

3790 (
RCC
->
PLLCFGR
 = ((
__RCC_PLLSour˚__
Ë| (
__PLLM__
) | \

3791 ((
__PLLN__
Ë<< 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLN
)) | \

3792 ((((
__PLLP__
Ë>> 1Ë-1Ë<< 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLP
)) | \

3793 ((
__PLLQ__
Ë<< 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLQ
)) | \

3794 ((
__PLLR__
Ë<< 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLR
))))

	)

3824 
	#__HAL_RCC_PLL_CONFIG
(
__RCC_PLLSour˚__
, 
__PLLM__
, 
__PLLN__
, 
__PLLP__
, 
__PLLQ__
) \

3825 (
RCC
->
PLLCFGR
 = (0x20000000 | (
__RCC_PLLSour˚__
Ë| (
__PLLM__
)| \

3826 ((
__PLLN__
Ë<< 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLN
)) | \

3827 ((((
__PLLP__
Ë>> 1Ë-1Ë<< 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLP
)) | \

3828 ((
__PLLQ__
Ë<< 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLQ
))))

	)

3833 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

3834 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

3835 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

3836 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

3841 
	#__HAL_RCC_PLLI2S_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLI2SON_BB
 = 
ENABLE
)

	)

3842 
	#__HAL_RCC_PLLI2S_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLI2SON_BB
 = 
DISABLE
)

	)

3845 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

3846 #i‡
deföed
(
STM32F446xx
)

3874 
	#__HAL_RCC_PLLI2S_CONFIG
(
__PLLI2SM__
, 
__PLLI2SN__
, 
__PLLI2SP__
, 
__PLLI2SQ__
, 
__PLLI2SR__
) \

3875 (
RCC
->
PLLI2SCFGR
 = ((
__PLLI2SM__
) |\

3876 ((
__PLLI2SN__
Ë<< 
	`POSITION_VAL
(
RCC_PLLI2SCFGR_PLLI2SN
)) |\

3877 ((((
__PLLI2SP__
Ë>> 1Ë-1Ë<< 
	`POSITION_VAL
(
RCC_PLLI2SCFGR_PLLI2SP
)) |\

3878 ((
__PLLI2SQ__
Ë<< 
	`POSITION_VAL
(
RCC_PLLI2SCFGR_PLLI2SQ
)) |\

3879 ((
__PLLI2SR__
Ë<< 
	`POSITION_VAL
(
RCC_PLLI2SCFGR_PLLI2SR
))))

	)

3896 
	#__HAL_RCC_PLLI2S_CONFIG
(
__PLLI2SN__
, 
__PLLI2SR__
) \

3897 (
RCC
->
PLLI2SCFGR
 = (((
__PLLI2SN__
Ë<< 
	`POSITION_VAL
(
RCC_PLLI2SCFGR_PLLI2SN
)) |\

3898 ((
__PLLI2SR__
Ë<< 
	`POSITION_VAL
(
RCC_PLLI2SCFGR_PLLI2SR
))))

	)

3901 #i‡
deföed
(
STM32F411xE
)

3922 
	#__HAL_RCC_PLLI2S_I2SCLK_CONFIG
(
__PLLI2SM__
, 
__PLLI2SN__
, 
__PLLI2SR__
Ë(
RCC
->
PLLI2SCFGR
 = ((__PLLI2SM__) |\

3923 ((
__PLLI2SN__
Ë<< 
	`POSITION_VAL
(
RCC_PLLI2SCFGR_PLLI2SN
)) |\

3924 ((
__PLLI2SR__
Ë<< 
	`POSITION_VAL
(
RCC_PLLI2SCFGR_PLLI2SR
))))

	)

3927 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

3945 
	#__HAL_RCC_PLLI2S_SAICLK_CONFIG
(
__PLLI2SN__
, 
__PLLI2SQ__
, 
__PLLI2SR__
Ë(
RCC
->
PLLI2SCFGR
 = ((__PLLI2SN__) << 6) |\

3946 ((
__PLLI2SQ__
) << 24) |\

3947 ((
__PLLI2SR__
Ë<< 28))

	)

3952 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

3957 
	#__HAL_RCC_PLLSAI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLSAION_BB
 = 
ENABLE
)

	)

3958 
	#__HAL_RCC_PLLSAI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLSAION_BB
 = 
DISABLE
)

	)

3960 #i‡
deföed
(
STM32F446xx
)

3986 
	#__HAL_RCC_PLLSAI_CONFIG
(
__PLLSAIM__
, 
__PLLSAIN__
, 
__PLLSAIP__
, 
__PLLSAIQ__
, 
__PLLSAIR__
) \

3987 (
RCC
->
PLLSAICFGR
 = ((
__PLLSAIM__
) | \

3988 ((
__PLLSAIN__
Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIN
)) | \

3989 ((((
__PLLSAIP__
Ë>> 1Ë-1Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIP
)) | \

3990 ((
__PLLSAIQ__
Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIQ
))))

	)

3993 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4010 
	#__HAL_RCC_PLLSAI_CONFIG
(
__PLLSAIN__
, 
__PLLSAIP__
, 
__PLLSAIQ__
, 
__PLLSAIR__
) \

4011 (
RCC
->
PLLSAICFGR
 = (((
__PLLSAIN__
Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIN
)) |\

4012 ((((
__PLLSAIP__
Ë>> 1Ë-1Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIP
)) |\

4013 ((
__PLLSAIQ__
Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIQ
)) |\

4014 ((
__PLLSAIR__
Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIR
))))

	)

4017 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

4032 
	#__HAL_RCC_PLLSAI_CONFIG
(
__PLLSAIN__
, 
__PLLSAIQ__
, 
__PLLSAIR__
) \

4033 (
RCC
->
PLLSAICFGR
 = (((
__PLLSAIN__
Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIN
)) | \

4034 ((
__PLLSAIQ__
Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIQ
)) | \

4035 ((
__PLLSAIR__
Ë<< 
	`POSITION_VAL
(
RCC_PLLSAICFGR_PLLSAIR
))))

	)

4042 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
) ||\

4043 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4050 
	#__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG
(
__PLLI2SDivQ__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_PLLI2SDIVQ
, (__PLLI2SDivQ__)-1))

	)

4058 
	#__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG
(
__PLLSAIDivQ__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_PLLSAIDIVQ
, ((__PLLSAIDivQ__)-1)<<8))

	)

4061 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4070 
	#__HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG
(
__PLLSAIDivR__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_PLLSAIDIVR
, (__PLLSAIDivR__)))

	)

4075 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

4076 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

4077 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469xx
) ||\

4078 
deföed
(
STM32F479xx
)

4087 
	#__HAL_RCC_I2S_CONFIG
(
__SOURCE__
Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CFGR_I2SSRC_BB
 = (__SOURCE__))

	)

4090 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4105 
	#__HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SAI1ASRC
, (__SOURCE__)))

	)

4120 
	#__HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SAI1BSRC
, (__SOURCE__)))

	)

4123 #i‡
deföed
(
STM32F446xx
)

4135 
	#__HAL_RCC_SAI1_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SAI1SRC
, (__SOURCE__)))

	)

4145 
	#__HAL_RCC_GET_SAI1_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SAI1SRC
))

	)

4158 
	#__HAL_RCC_SAI2_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SAI2SRC
, (__SOURCE__)))

	)

4168 
	#__HAL_RCC_GET_SAI2_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SAI2SRC
))

	)

4179 
	#__HAL_RCC_I2S_APB1_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_I2S1SRC
, (__SOURCE__)))

	)

4188 
	#__HAL_RCC_GET_I2S_APB1_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_I2S1SRC
))

	)

4199 
	#__HAL_RCC_I2S_APB2_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_I2S2SRC
, (__SOURCE__)))

	)

4208 
	#__HAL_RCC_GET_I2S_APB2_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_I2S2SRC
))

	)

4216 
	#__HAL_RCC_CEC_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CECSEL
, (
uöt32_t
)(__SOURCE__)))

	)

4223 
	#__HAL_RCC_GET_CEC_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CECSEL
))

	)

4232 
	#__HAL_RCC_FMPI2C1_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_FMPI2C1SEL
, (
uöt32_t
)(__SOURCE__)))

	)

4240 
	#__HAL_RCC_GET_FMPI2C1_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_FMPI2C1SEL
))

	)

4248 
	#__HAL_RCC_CLK48_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CK48MSEL
, (
uöt32_t
)(__SOURCE__)))

	)

4255 
	#__HAL_RCC_GET_CLK48_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_CK48MSEL
))

	)

4263 
	#__HAL_RCC_SDIO_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SDIOSEL
, (
uöt32_t
)(__SOURCE__)))

	)

4270 
	#__HAL_RCC_GET_SDIO_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SDIOSEL
))

	)

4278 
	#__HAL_RCC_SPDIFRX_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SPDIFRXSEL
, (
uöt32_t
)(__SOURCE__)))

	)

4285 
	#__HAL_RCC_GET_SPDIFRX_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_SPDIFRXSEL
))

	)

4288 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4296 
	#__HAL_RCC_CLK48_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_CK48MSEL
, (
uöt32_t
)(__SOURCE__)))

	)

4303 
	#__HAL_RCC_GET_CLK48_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_CK48MSEL
))

	)

4311 
	#__HAL_RCC_SDIO_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SDIOSEL
, (
uöt32_t
)(__SOURCE__)))

	)

4318 
	#__HAL_RCC_GET_SDIO_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_SDIOSEL
))

	)

4326 
	#__HAL_RCC_DSI_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_DSISEL
, (
uöt32_t
)(__SOURCE__)))

	)

4333 
	#__HAL_RCC_GET_DSI_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_DSISEL
))

	)

4337 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

4345 
	#__HAL_RCC_I2S_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_I2SSRC
, (__SOURCE__)))

	)

4353 
	#__HAL_RCC_GET_I2S_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR
, 
RCC_DCKCFGR_I2SSRC
))

	)

4362 
	#__HAL_RCC_FMPI2C1_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_FMPI2C1SEL
, (
uöt32_t
)(__SOURCE__)))

	)

4370 
	#__HAL_RCC_GET_FMPI2C1_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_FMPI2C1SEL
))

	)

4380 
	#__HAL_RCC_LPTIM1_CONFIG
(
__SOURCE__
Ë(
	`MODIFY_REG
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_LPTIM1SEL
, (
uöt32_t
)(__SOURCE__)))

	)

4389 
	#__HAL_RCC_GET_LPTIM1_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
DCKCFGR2
, 
RCC_DCKCFGR2_LPTIM1SEL
))

	)

4392 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

4393 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

4394 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

4395 
deföed
(
STM32F479xx
)

4409 
	#__HAL_RCC_TIMCLKPRESCALER
(
__PRESC__
Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_DCKCFGR_TIMPRE_BB
 = (__PRESC__))

	)

4412 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

4416 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4419 
	#__HAL_RCC_PLLSAI_ENABLE_IT
(Ë(
RCC
->
CIR
 |(
RCC_CIR_PLLSAIRDYIE
))

	)

4423 
	#__HAL_RCC_PLLSAI_DISABLE_IT
(Ë(
RCC
->
CIR
 &~(
RCC_CIR_PLLSAIRDYIE
))

	)

4427 
	#__HAL_RCC_PLLSAI_CLEAR_IT
(Ë(
RCC
->
CIR
 |(
RCC_CIR_PLLSAIRDYF
))

	)

4432 
	#__HAL_RCC_PLLSAI_GET_IT
(Ë((
RCC
->
CIR
 & (
RCC_CIR_PLLSAIRDYIE
)Ë=(RCC_CIR_PLLSAIRDYIE))

	)

4437 
	#__HAL_RCC_PLLSAI_GET_FLAG
(Ë((
RCC
->
CR
 & (
RCC_CR_PLLSAIRDY
)Ë=(RCC_CR_PLLSAIRDY))

	)

4441 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

4445 
	#__HAL_RCC_MCO1_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CFGR_MCO1EN_BB
 = 
ENABLE
)

	)

4446 
	#__HAL_RCC_MCO1_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CFGR_MCO1EN_BB
 = 
DISABLE
)

	)

4454 
	#__HAL_RCC_MCO2_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CFGR_MCO2EN_BB
 = 
ENABLE
)

	)

4455 
	#__HAL_RCC_MCO2_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CFGR_MCO2EN_BB
 = 
DISABLE
)

	)

4473 
HAL_SètusTy≥Def
 
HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

4474 
HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

4476 #i‡
deföed
(
STM32F446xx
)

4477 
uöt32_t
 
HAL_RCCEx_GëPîùhCLKFªq
(uöt32_à
PîùhClk
);

4480 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F411xE
) ||\

4481 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4482 
HAL_RCCEx_Sñe˘LSEMode
(
uöt8_t
 
Mode
);

4503 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

4504 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4506 
	#RCC_PLLSAION_BIT_NUMBER
 0x1C

	)

4507 
	#RCC_CR_PLLSAION_BB
 (
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET
 * 32Ë+ (
RCC_PLLSAION_BIT_NUMBER
 * 4))

	)

4509 
	#PLLSAI_TIMEOUT_VALUE
 ((
uöt32_t
)100Ë

	)

4512 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

4513 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

4514 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

4515 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4517 
	#RCC_PLLI2SON_BIT_NUMBER
 0x1A

	)

4518 
	#RCC_CR_PLLI2SON_BB
 (
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET
 * 32Ë+ (
RCC_PLLI2SON_BIT_NUMBER
 * 4))

	)

4520 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

4523 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

4524 
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
) ||\

4525 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4527 
	#RCC_DCKCFGR_OFFSET
 (
RCC_OFFSET
 + 0x8C)

	)

4528 
	#RCC_TIMPRE_BIT_NUMBER
 0x18

	)

4529 
	#RCC_DCKCFGR_TIMPRE_BB
 (
PERIPH_BB_BASE
 + (
RCC_DCKCFGR_OFFSET
 * 32Ë+ (
RCC_TIMPRE_BIT_NUMBER
 * 4))

	)

4533 
	#RCC_CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08)

	)

4534 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

4535 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

4536 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

4537 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4539 
	#RCC_I2SSRC_BIT_NUMBER
 0x17

	)

4540 
	#RCC_CFGR_I2SSRC_BB
 (
PERIPH_BB_BASE
 + (
RCC_CFGR_OFFSET
 * 32Ë+ (
RCC_I2SSRC_BIT_NUMBER
 * 4))

	)

4542 
	#PLLI2S_TIMEOUT_VALUE
 ((
uöt32_t
)100Ë

	)

4544 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

4546 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

4548 
	#RCC_MCO1EN_BIT_NUMBER
 0x8

	)

4549 
	#RCC_CFGR_MCO1EN_BB
 (
PERIPH_BB_BASE
 + (
RCC_CFGR_OFFSET
 * 32Ë+ (
RCC_MCO1EN_BIT_NUMBER
 * 4))

	)

4552 
	#RCC_MCO2EN_BIT_NUMBER
 0x9

	)

4553 
	#RCC_CFGR_MCO2EN_BB
 (
PERIPH_BB_BASE
 + (
RCC_CFGR_OFFSET
 * 32Ë+ (
RCC_MCO2EN_BIT_NUMBER
 * 4))

	)

4556 
	#PLL_TIMEOUT_VALUE
 ((
uöt32_t
)100Ë

	)

4573 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
)

4574 
	#IS_RCC_PERIPHCLOCK
(
SELECTION
Ë((1 <(SELECTION)Ë&& ((SELECTIONË<0x0000007F))

	)

4577 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
)|| deföed(
STM32F417xx
) ||\

4578 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
)

4579 
	#IS_RCC_PERIPHCLOCK
(
SELECTION
Ë((1 <(SELECTION)Ë&& ((SELECTIONË<0x00000007))

	)

4582 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

4583 
	#IS_RCC_PERIPHCLOCK
(
SELECTION
Ë((1 <(SELECTION)Ë&& ((SELECTIONË<0x0000001F))

	)

4586 #i‡
deföed
(
STM32F446xx
)

4587 
	#IS_RCC_PERIPHCLOCK
(
SELECTION
Ë((1 <(SELECTION)Ë&& ((SELECTIONË<0x00000FFF))

	)

4590 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4591 
	#IS_RCC_PERIPHCLOCK
(
SELECTION
Ë((1 <(SELECTION)Ë&& ((SELECTIONË<0x000001FF))

	)

4594 
	#IS_RCC_PLLI2SN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

4595 
	#IS_RCC_PLLI2SR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

4598 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

4599 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4600 
	#IS_RCC_PLLI2SQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

4602 
	#IS_RCC_PLLSAIN_VALUE
(
VALUE
Ë((49 <(VALUE)Ë&& ((VALUEË<432))

	)

4604 
	#IS_RCC_PLLSAIQ_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<15))

	)

4606 
	#IS_RCC_PLLSAIR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

4608 
	#IS_RCC_PLLSAI_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

4610 
	#IS_RCC_PLLI2S_DIVQ_VALUE
(
VALUE
Ë((1 <(VALUE)Ë&& ((VALUEË<32))

	)

4612 
	#IS_RCC_PLLSAI_DIVR_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLSAIDIVR_2
) ||\

4613 ((
VALUE
Ë=
RCC_PLLSAIDIVR_4
) ||\

4614 ((
VALUE
Ë=
RCC_PLLSAIDIVR_8
) ||\

4615 ((
VALUE
Ë=
RCC_PLLSAIDIVR_16
))

	)

4618 #i‡
deföed
(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

4619 
	#IS_RCC_PLLI2SM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

4621 
	#IS_RCC_LSE_MODE
(
MODE
Ë(((MODEË=
RCC_LSE_LOWPOWER_MODE
) ||\

4622 ((
MODE
Ë=
RCC_LSE_HIGHDRIVE_MODE
))

	)

4625 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

4626 
	#IS_RCC_PLLR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

4628 
	#IS_RCC_LSE_MODE
(
MODE
Ë(((MODEË=
RCC_LSE_LOWPOWER_MODE
) ||\

4629 ((
MODE
Ë=
RCC_LSE_HIGHDRIVE_MODE
))

	)

4631 
	#IS_RCC_FMPI2C1CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_FMPI2C1CLKSOURCE_APB
) ||\

4632 ((
SOURCE
Ë=
RCC_FMPI2C1CLKSOURCE_SYSCLK
) ||\

4633 ((
SOURCE
Ë=
RCC_FMPI2C1CLKSOURCE_HSI
))

	)

4635 
	#IS_RCC_LPTIM1CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_LPTIM1CLKSOURCE_PCLK
) ||\

4636 ((
SOURCE
Ë=
RCC_LPTIM1CLKSOURCE_HSI
) ||\

4637 ((
SOURCE
Ë=
RCC_LPTIM1CLKSOURCE_LSI
) ||\

4638 ((
SOURCE
Ë=
RCC_LPTIM1CLKSOURCE_LSE
))

	)

4640 
	#IS_RCC_I2SAPBCLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2SAPBCLKSOURCE_PLLR
) ||\

4641 ((
SOURCE
Ë=
RCC_I2SAPBCLKSOURCE_EXT
) ||\

4642 ((
SOURCE
Ë=
RCC_I2SAPBCLKSOURCE_PLLSRC
))

	)

4645 #i‡
deföed
(
STM32F446xx
)

4646 
	#IS_RCC_PLLR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

4648 
	#IS_RCC_PLLI2SP_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLI2SP_DIV2
) ||\

4649 ((
VALUE
Ë=
RCC_PLLI2SP_DIV4
) ||\

4650 ((
VALUE
Ë=
RCC_PLLI2SP_DIV6
) ||\

4651 ((
VALUE
Ë=
RCC_PLLI2SP_DIV8
))

	)

4653 
	#IS_RCC_PLLSAIM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

4655 
	#IS_RCC_PLLSAIP_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLSAIP_DIV2
) ||\

4656 ((
VALUE
Ë=
RCC_PLLSAIP_DIV4
) ||\

4657 ((
VALUE
Ë=
RCC_PLLSAIP_DIV6
) ||\

4658 ((
VALUE
Ë=
RCC_PLLSAIP_DIV8
))

	)

4660 
	#IS_RCC_SAI1CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAI1CLKSOURCE_PLLSAI
) ||\

4661 ((
SOURCE
Ë=
RCC_SAI1CLKSOURCE_PLLI2S
) ||\

4662 ((
SOURCE
Ë=
RCC_SAI1CLKSOURCE_PLLR
) ||\

4663 ((
SOURCE
Ë=
RCC_SAI1CLKSOURCE_EXT
))

	)

4665 
	#IS_RCC_SAI2CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SAI2CLKSOURCE_PLLSAI
) ||\

4666 ((
SOURCE
Ë=
RCC_SAI2CLKSOURCE_PLLI2S
) ||\

4667 ((
SOURCE
Ë=
RCC_SAI2CLKSOURCE_PLLR
) ||\

4668 ((
SOURCE
Ë=
RCC_SAI2CLKSOURCE_PLLSRC
))

	)

4670 
	#IS_RCC_I2SAPB1CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2SAPB1CLKSOURCE_PLLI2S
) ||\

4671 ((
SOURCE
Ë=
RCC_I2SAPB1CLKSOURCE_EXT
) ||\

4672 ((
SOURCE
Ë=
RCC_I2SAPB1CLKSOURCE_PLLR
) ||\

4673 ((
SOURCE
Ë=
RCC_I2SAPB1CLKSOURCE_PLLSRC
))

	)

4675 
	#IS_RCC_I2SAPB2CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2SAPB2CLKSOURCE_PLLI2S
) ||\

4676 ((
SOURCE
Ë=
RCC_I2SAPB2CLKSOURCE_EXT
) ||\

4677 ((
SOURCE
Ë=
RCC_I2SAPB2CLKSOURCE_PLLR
) ||\

4678 ((
SOURCE
Ë=
RCC_I2SAPB2CLKSOURCE_PLLSRC
))

	)

4680 
	#IS_RCC_FMPI2C1CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_FMPI2C1CLKSOURCE_APB
) ||\

4681 ((
SOURCE
Ë=
RCC_FMPI2C1CLKSOURCE_SYSCLK
) ||\

4682 ((
SOURCE
Ë=
RCC_FMPI2C1CLKSOURCE_HSI
))

	)

4684 
	#IS_RCC_CECCLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_CECCLKSOURCE_HSI
) ||\

4685 ((
SOURCE
Ë=
RCC_CECCLKSOURCE_LSE
))

	)

4687 
	#IS_RCC_CK48CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_CK48CLKSOURCE_PLLQ
) ||\

4688 ((
SOURCE
Ë=
RCC_CK48CLKSOURCE_PLLSAIP
))

	)

4690 
	#IS_RCC_SDIOCLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SDIOCLKSOURCE_CK48
) ||\

4691 ((
SOURCE
Ë=
RCC_SDIOCLKSOURCE_SYSCLK
))

	)

4693 
	#IS_RCC_SPDIFRXCLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SPDIFRXCLKSOURCE_PLLR
) ||\

4694 ((
SOURCE
Ë=
RCC_SPDIFRXCLKSOURCE_PLLI2SP
))

	)

4697 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4698 
	#IS_RCC_PLLR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

4700 
	#IS_RCC_PLLSAIP_VALUE
(
VALUE
Ë(((VALUEË=
RCC_PLLSAIP_DIV2
) ||\

4701 ((
VALUE
Ë=
RCC_PLLSAIP_DIV4
) ||\

4702 ((
VALUE
Ë=
RCC_PLLSAIP_DIV6
) ||\

4703 ((
VALUE
Ë=
RCC_PLLSAIP_DIV8
))

	)

4705 
	#IS_RCC_CK48CLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_CK48CLKSOURCE_PLLQ
) ||\

4706 ((
SOURCE
Ë=
RCC_CK48CLKSOURCE_PLLSAIP
))

	)

4708 
	#IS_RCC_SDIOCLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SDIOCLKSOURCE_CK48
) ||\

4709 ((
SOURCE
Ë=
RCC_SDIOCLKSOURCE_SYSCLK
))

	)

4711 
	#IS_RCC_DSIBYTELANECLKSOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_DSICLKSOURCE_PLLR
) ||\

4712 ((
SOURCE
Ë=
RCC_DSICLKSOURCE_DSIPHY
))

	)

4714 
	#IS_RCC_LSE_MODE
(
MODE
Ë(((MODEË=
RCC_LSE_LOWPOWER_MODE
) ||\

4715 ((
MODE
Ë=
RCC_LSE_HIGHDRIVE_MODE
))

	)

4718 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

4719 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

4720 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

4721 
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

4723 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2SOURCE_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2SOURCE_PLLI2SCLK
)|| \

4724 ((
SOURCE
Ë=
RCC_MCO2SOURCE_HSE
Ë|| ((SOURCEË=
RCC_MCO2SOURCE_PLLCLK
))

	)

4727 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

4729 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

4730 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2SOURCE_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2SOURCE_I2SCLK
)|| \

4731 ((
SOURCE
Ë=
RCC_MCO2SOURCE_HSE
Ë|| ((SOURCEË=
RCC_MCO2SOURCE_PLLCLK
))

	)

4748 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rng.h

39 #i‚de‡
__STM32F4xx_HAL_RNG_H


40 
	#__STM32F4xx_HAL_RNG_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

47 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

48 
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F469xx
) ||\

49 
	$deföed
(
STM32F479xx
)

52 
	~"°m32f4xx_hÆ_def.h
"

74 
HAL_RNG_STATE_RESET
 = 0x00,

75 
HAL_RNG_STATE_READY
 = 0x01,

76 
HAL_RNG_STATE_BUSY
 = 0x02,

77 
HAL_RNG_STATE_TIMEOUT
 = 0x03,

78 
HAL_RNG_STATE_ERROR
 = 0x04

80 }
	tHAL_RNG_SèãTy≥Def
;

91 
RNG_Ty≥Def
 *
In°™˚
;

93 
HAL_LockTy≥Def
 
Lock
;

95 
__IO
 
HAL_RNG_SèãTy≥Def
 
Sèã
;

97 
uöt32_t
 
R™domNumbî
;

99 }
	tRNG_H™dÀTy≥Def
;

118 
	#RNG_IT_DRDY
 
RNG_SR_DRDY


	)

119 
	#RNG_IT_CEI
 
RNG_SR_CEIS


	)

120 
	#RNG_IT_SEI
 
RNG_SR_SEIS


	)

128 
	#RNG_FLAG_DRDY
 
RNG_SR_DRDY


	)

129 
	#RNG_FLAG_CECS
 
RNG_SR_CECS


	)

130 
	#RNG_FLAG_SECS
 
RNG_SR_SECS


	)

150 
	#__HAL_RNG_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_RNG_STATE_RESET
)

	)

157 
	#__HAL_RNG_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
RNG_CR_RNGEN
)

	)

164 
	#__HAL_RNG_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~
RNG_CR_RNGEN
)

	)

176 
	#__HAL_RNG_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__FLAG__)Ë=(__FLAG__))

	)

186 
	#__HAL_RNG_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë

	)

195 
	#__HAL_RNG_ENABLE_IT
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
RNG_CR_IE
)

	)

202 
	#__HAL_RNG_DISABLE_IT
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~
RNG_CR_IE
)

	)

214 
	#__HAL_RNG_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

226 
	#__HAL_RNG_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
SR
Ë~(__INTERRUPT__))

	)

240 
HAL_SètusTy≥Def
 
	`HAL_RNG_Inô
(
RNG_H™dÀTy≥Def
 *
h∫g
);

241 
HAL_SètusTy≥Def
 
	`HAL_RNG_DeInô
 (
RNG_H™dÀTy≥Def
 *
h∫g
);

242 
	`HAL_RNG_M•Inô
(
RNG_H™dÀTy≥Def
 *
h∫g
);

243 
	`HAL_RNG_M•DeInô
(
RNG_H™dÀTy≥Def
 *
h∫g
);

252 
uöt32_t
 
	`HAL_RNG_GëR™domNumbî
(
RNG_H™dÀTy≥Def
 *
h∫g
);

253 
uöt32_t
 
	`HAL_RNG_GëR™domNumbî_IT
(
RNG_H™dÀTy≥Def
 *
h∫g
);

255 
HAL_SètusTy≥Def
 
	`HAL_RNG_Gíî©eR™domNumbî
(
RNG_H™dÀTy≥Def
 *
h∫g
, 
uöt32_t
 *
øndom32bô
);

256 
HAL_SètusTy≥Def
 
	`HAL_RNG_Gíî©eR™domNumbî_IT
(
RNG_H™dÀTy≥Def
 *
h∫g
);

257 
uöt32_t
 
	`HAL_RNG_RódLa°R™domNumbî
(
RNG_H™dÀTy≥Def
 *
h∫g
);

259 
	`HAL_RNG_IRQH™dÀr
(
RNG_H™dÀTy≥Def
 *
h∫g
);

260 
	`HAL_RNG_Eº‹CÆlback
(
RNG_H™dÀTy≥Def
 *
h∫g
);

261 
	`HAL_RNG_RódyD©aCÆlback
(
RNG_H™dÀTy≥Def
* 
h∫g
, 
uöt32_t
 
øndom32bô
);

270 
HAL_RNG_SèãTy≥Def
 
	`HAL_RNG_GëSèã
(
RNG_H™dÀTy≥Def
 *
h∫g
);

320 
	#IS_RNG_IT
(
IT
Ë(((ITË=
RNG_IT_CEI
) || \

321 ((
IT
Ë=
RNG_IT_SEI
))

	)

323 
	#IS_RNG_FLAG
(
FLAG
Ë(((FLAGË=
RNG_FLAG_DRDY
) || \

324 ((
FLAG
Ë=
RNG_FLAG_CECS
) || \

325 ((
FLAG
Ë=
RNG_FLAG_SECS
))

	)

358 
STM32F429xx
 || 
STM32F439xx
 || 
STM32F410xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

360 #ifde‡
__˝lu•lus


361 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rtc.h

39 #i‚de‡
__STM32F4xx_HAL_RTC_H


40 
	#__STM32F4xx_HAL_RTC_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
HAL_RTC_STATE_RESET
 = 0x00,

68 
HAL_RTC_STATE_READY
 = 0x01,

69 
HAL_RTC_STATE_BUSY
 = 0x02,

70 
HAL_RTC_STATE_TIMEOUT
 = 0x03,

71 
HAL_RTC_STATE_ERROR
 = 0x04

73 }
	tHAL_RTCSèãTy≥Def
;

80 
uöt32_t
 
HourF‹m©
;

83 
uöt32_t
 
AsynchPªdiv
;

86 
uöt32_t
 
SynchPªdiv
;

89 
uöt32_t
 
OutPut
;

92 
uöt32_t
 
OutPutPﬁ¨ôy
;

95 
uöt32_t
 
OutPutTy≥
;

97 }
	tRTC_InôTy≥Def
;

104 
uöt8_t
 
Hours
;

108 
uöt8_t
 
Möuãs
;

111 
uöt8_t
 
Sec⁄ds
;

114 
uöt8_t
 
TimeF‹m©
;

117 
uöt32_t
 
SubSec⁄ds
;

121 
uöt32_t
 
Sec⁄dFø˘i⁄
;

127 
uöt32_t
 
DayLightSavög
;

130 
uöt32_t
 
St‹eO≥øti⁄
;

133 }
	tRTC_TimeTy≥Def
;

140 
uöt8_t
 
WìkDay
;

143 
uöt8_t
 
M⁄th
;

146 
uöt8_t
 
D©e
;

149 
uöt8_t
 
Yór
;

152 }
	tRTC_D©eTy≥Def
;

159 
RTC_TimeTy≥Def
 
AœrmTime
;

161 
uöt32_t
 
AœrmMask
;

164 
uöt32_t
 
AœrmSubSec⁄dMask
;

167 
uöt32_t
 
AœrmD©eWìkDaySñ
;

170 
uöt8_t
 
AœrmD©eWìkDay
;

174 
uöt32_t
 
Aœrm
;

176 }
	tRTC_AœrmTy≥Def
;

183 
RTC_Ty≥Def
 *
In°™˚
;

185 
RTC_InôTy≥Def
 
Inô
;

187 
HAL_LockTy≥Def
 
Lock
;

189 
__IO
 
HAL_RTCSèãTy≥Def
 
Sèã
;

191 }
	tRTC_H™dÀTy≥Def
;

205 
	#RTC_HOURFORMAT_24
 ((
uöt32_t
)0x00000000)

	)

206 
	#RTC_HOURFORMAT_12
 ((
uöt32_t
)0x00000040)

	)

214 
	#RTC_OUTPUT_DISABLE
 ((
uöt32_t
)0x00000000)

	)

215 
	#RTC_OUTPUT_ALARMA
 ((
uöt32_t
)0x00200000)

	)

216 
	#RTC_OUTPUT_ALARMB
 ((
uöt32_t
)0x00400000)

	)

217 
	#RTC_OUTPUT_WAKEUP
 ((
uöt32_t
)0x00600000)

	)

225 
	#RTC_OUTPUT_POLARITY_HIGH
 ((
uöt32_t
)0x00000000)

	)

226 
	#RTC_OUTPUT_POLARITY_LOW
 ((
uöt32_t
)0x00100000)

	)

234 
	#RTC_OUTPUT_TYPE_OPENDRAIN
 ((
uöt32_t
)0x00000000)

	)

235 
	#RTC_OUTPUT_TYPE_PUSHPULL
 ((
uöt32_t
)0x00040000)

	)

243 
	#RTC_HOURFORMAT12_AM
 ((
uöt8_t
)0x00)

	)

244 
	#RTC_HOURFORMAT12_PM
 ((
uöt8_t
)0x40)

	)

252 
	#RTC_DAYLIGHTSAVING_SUB1H
 ((
uöt32_t
)0x00020000)

	)

253 
	#RTC_DAYLIGHTSAVING_ADD1H
 ((
uöt32_t
)0x00010000)

	)

254 
	#RTC_DAYLIGHTSAVING_NONE
 ((
uöt32_t
)0x00000000)

	)

262 
	#RTC_STOREOPERATION_RESET
 ((
uöt32_t
)0x00000000)

	)

263 
	#RTC_STOREOPERATION_SET
 ((
uöt32_t
)0x00040000)

	)

271 
	#RTC_FORMAT_BIN
 ((
uöt32_t
)0x000000000)

	)

272 
	#RTC_FORMAT_BCD
 ((
uöt32_t
)0x000000001)

	)

281 
	#RTC_MONTH_JANUARY
 ((
uöt8_t
)0x01)

	)

282 
	#RTC_MONTH_FEBRUARY
 ((
uöt8_t
)0x02)

	)

283 
	#RTC_MONTH_MARCH
 ((
uöt8_t
)0x03)

	)

284 
	#RTC_MONTH_APRIL
 ((
uöt8_t
)0x04)

	)

285 
	#RTC_MONTH_MAY
 ((
uöt8_t
)0x05)

	)

286 
	#RTC_MONTH_JUNE
 ((
uöt8_t
)0x06)

	)

287 
	#RTC_MONTH_JULY
 ((
uöt8_t
)0x07)

	)

288 
	#RTC_MONTH_AUGUST
 ((
uöt8_t
)0x08)

	)

289 
	#RTC_MONTH_SEPTEMBER
 ((
uöt8_t
)0x09)

	)

290 
	#RTC_MONTH_OCTOBER
 ((
uöt8_t
)0x10)

	)

291 
	#RTC_MONTH_NOVEMBER
 ((
uöt8_t
)0x11)

	)

292 
	#RTC_MONTH_DECEMBER
 ((
uöt8_t
)0x12)

	)

300 
	#RTC_WEEKDAY_MONDAY
 ((
uöt8_t
)0x01)

	)

301 
	#RTC_WEEKDAY_TUESDAY
 ((
uöt8_t
)0x02)

	)

302 
	#RTC_WEEKDAY_WEDNESDAY
 ((
uöt8_t
)0x03)

	)

303 
	#RTC_WEEKDAY_THURSDAY
 ((
uöt8_t
)0x04)

	)

304 
	#RTC_WEEKDAY_FRIDAY
 ((
uöt8_t
)0x05)

	)

305 
	#RTC_WEEKDAY_SATURDAY
 ((
uöt8_t
)0x06)

	)

306 
	#RTC_WEEKDAY_SUNDAY
 ((
uöt8_t
)0x07)

	)

314 
	#RTC_ALARMDATEWEEKDAYSEL_DATE
 ((
uöt32_t
)0x00000000)

	)

315 
	#RTC_ALARMDATEWEEKDAYSEL_WEEKDAY
 ((
uöt32_t
)0x40000000)

	)

323 
	#RTC_ALARMMASK_NONE
 ((
uöt32_t
)0x00000000)

	)

324 
	#RTC_ALARMMASK_DATEWEEKDAY
 
RTC_ALRMAR_MSK4


	)

325 
	#RTC_ALARMMASK_HOURS
 
RTC_ALRMAR_MSK3


	)

326 
	#RTC_ALARMMASK_MINUTES
 
RTC_ALRMAR_MSK2


	)

327 
	#RTC_ALARMMASK_SECONDS
 
RTC_ALRMAR_MSK1


	)

328 
	#RTC_ALARMMASK_ALL
 ((
uöt32_t
)0x80808080)

	)

336 
	#RTC_ALARM_A
 
RTC_CR_ALRAE


	)

337 
	#RTC_ALARM_B
 
RTC_CR_ALRBE


	)

345 
	#RTC_ALARMSUBSECONDMASK_ALL
 ((
uöt32_t
)0x00000000Ë

	)

348 
	#RTC_ALARMSUBSECONDMASK_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

350 
	#RTC_ALARMSUBSECONDMASK_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

352 
	#RTC_ALARMSUBSECONDMASK_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

354 
	#RTC_ALARMSUBSECONDMASK_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

356 
	#RTC_ALARMSUBSECONDMASK_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

358 
	#RTC_ALARMSUBSECONDMASK_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

360 
	#RTC_ALARMSUBSECONDMASK_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

362 
	#RTC_ALARMSUBSECONDMASK_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

364 
	#RTC_ALARMSUBSECONDMASK_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

366 
	#RTC_ALARMSUBSECONDMASK_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

368 
	#RTC_ALARMSUBSECONDMASK_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

370 
	#RTC_ALARMSUBSECONDMASK_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

372 
	#RTC_ALARMSUBSECONDMASK_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

374 
	#RTC_ALARMSUBSECONDMASK_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

376 
	#RTC_ALARMSUBSECONDMASK_NONE
 ((
uöt32_t
)0x0F000000Ë

	)

385 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

386 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

387 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

388 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

389 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

390 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

391 
	#RTC_IT_TAMP2
 ((
uöt32_t
)0x00040000)

	)

399 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

400 
	#RTC_FLAG_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

401 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

402 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

403 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

404 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

405 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

406 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

407 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

408 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

409 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

410 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

411 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

412 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

413 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

431 
	#__HAL_RTC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_RTC_STATE_RESET
)

	)

438 
	#__HAL_RTC_WRITEPROTECTION_DISABLE
(
__HANDLE__
) \

440 (
__HANDLE__
)->
In°™˚
->
WPR
 = 0xCA; \

441 (
__HANDLE__
)->
In°™˚
->
WPR
 = 0x53; \

442 } 0)

	)

449 
	#__HAL_RTC_WRITEPROTECTION_ENABLE
(
__HANDLE__
) \

451 (
__HANDLE__
)->
In°™˚
->
WPR
 = 0xFF; \

452 } 0)

	)

459 
	#__HAL_RTC_ALARMA_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
RTC_CR_ALRAE
))

	)

466 
	#__HAL_RTC_ALARMA_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
RTC_CR_ALRAE
))

	)

473 
	#__HAL_RTC_ALARMB_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
RTC_CR_ALRBE
))

	)

480 
	#__HAL_RTC_ALARMB_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
RTC_CR_ALRBE
))

	)

491 
	#__HAL_RTC_ALARM_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(__INTERRUPT__))

	)

502 
	#__HAL_RTC_ALARM_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(__INTERRUPT__))

	)

513 
	#__HAL_RTC_ALARM_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
)& ((__INTERRUPT__)>> 4)Ë!
RESET
)? 
SET
 : RESET)

	)

526 
	#__HAL_RTC_ALARM_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

537 
	#__HAL_RTC_ALARM_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ISR
Ë(~((__FLAG__Ë| 
RTC_ISR_INIT
)|((__HANDLE__)->In°™˚->ISR & RTC_ISR_INIT))

	)

549 
	#__HAL_RTC_ALARM_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
CR
Ë& (__INTERRUPT__)Ë!
RESET
Ë? 
SET
 : RESET)

	)

555 
	#__HAL_RTC_ALARM_EXTI_ENABLE_IT
(Ë(
EXTI
->
IMR
 |
RTC_EXTI_LINE_ALARM_EVENT
)

	)

561 
	#__HAL_RTC_ALARM_EXTI_DISABLE_IT
(Ë(
EXTI
->
IMR
 &~(
RTC_EXTI_LINE_ALARM_EVENT
))

	)

567 
	#__HAL_RTC_ALARM_EXTI_ENABLE_EVENT
(Ë(
EXTI
->
EMR
 |
RTC_EXTI_LINE_ALARM_EVENT
)

	)

573 
	#__HAL_RTC_ALARM_EXTI_DISABLE_EVENT
(Ë(
EXTI
->
EMR
 &~(
RTC_EXTI_LINE_ALARM_EVENT
))

	)

579 
	#__HAL_RTC_ALARM_EXTI_ENABLE_FALLING_EDGE
(Ë(
EXTI
->
FTSR
 |
RTC_EXTI_LINE_ALARM_EVENT
)

	)

585 
	#__HAL_RTC_ALARM_EXTI_DISABLE_FALLING_EDGE
(Ë(
EXTI
->
FTSR
 &~(
RTC_EXTI_LINE_ALARM_EVENT
))

	)

591 
	#__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
(Ë(
EXTI
->
RTSR
 |
RTC_EXTI_LINE_ALARM_EVENT
)

	)

597 
	#__HAL_RTC_ALARM_EXTI_DISABLE_RISING_EDGE
(Ë(
EXTI
->
RTSR
 &~(
RTC_EXTI_LINE_ALARM_EVENT
))

	)

603 
	#__HAL_RTC_ALARM_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_RTC_ALARM_EXTI_ENABLE_FALLING_EDGE
();

	)

609 
	#__HAL_RTC_ALARM_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_RTC_ALARM_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_RTC_ALARM_EXTI_DISABLE_FALLING_EDGE
();

	)

615 
	#__HAL_RTC_ALARM_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

621 
	#__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

627 
	#__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
(Ë(
EXTI
->
SWIER
 |
RTC_EXTI_LINE_ALARM_EVENT
)

	)

633 
	~"°m32f4xx_hÆ_πc_ex.h
"

644 
HAL_SètusTy≥Def
 
HAL_RTC_Inô
(
RTC_H™dÀTy≥Def
 *
hπc
);

645 
HAL_SètusTy≥Def
 
HAL_RTC_DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
);

646 
HAL_RTC_M•Inô
(
RTC_H™dÀTy≥Def
 *
hπc
);

647 
HAL_RTC_M•DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
);

656 
HAL_SètusTy≥Def
 
HAL_RTC_SëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
);

657 
HAL_SètusTy≥Def
 
HAL_RTC_GëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
);

658 
HAL_SètusTy≥Def
 
HAL_RTC_SëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
);

659 
HAL_SètusTy≥Def
 
HAL_RTC_GëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
);

668 
HAL_SètusTy≥Def
 
HAL_RTC_SëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
);

669 
HAL_SètusTy≥Def
 
HAL_RTC_SëAœrm_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
);

670 
HAL_SètusTy≥Def
 
HAL_RTC_Dó˘iv©eAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Aœrm
);

671 
HAL_SètusTy≥Def
 
HAL_RTC_GëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
Aœrm
, uöt32_à
F‹m©
);

672 
HAL_RTC_AœrmIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
);

673 
HAL_SètusTy≥Def
 
HAL_RTC_PﬁlF‹AœrmAEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
);

674 
HAL_RTC_AœrmAEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

683 
HAL_SètusTy≥Def
 
HAL_RTC_WaôF‹Synchro
(
RTC_H™dÀTy≥Def
* 
hπc
);

692 
HAL_RTCSèãTy≥Def
 
HAL_RTC_GëSèã
(
RTC_H™dÀTy≥Def
 *
hπc
);

708 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

709 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

710 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

711 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

712 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

713 
RTC_FLAG_ALRBF
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_INITF
 | \

714 
RTC_FLAG_RSF
 | 
RTC_FLAG_INITS
 | 
RTC_FLAG_WUTWF
 | \

715 
RTC_FLAG_ALRBWF
 | 
RTC_FLAG_ALRAWF
 | 
RTC_FLAG_TAMP1F
 | \

716 
RTC_FLAG_RECALPF
 | 
RTC_FLAG_SHPF
))

	)

718 
	#RTC_TIMEOUT_VALUE
 1000

	)

720 
	#RTC_EXTI_LINE_ALARM_EVENT
 ((
uöt32_t
)
EXTI_IMR_MR17
Ë

	)

733 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HOURFORMAT_12
) || \

734 ((
FORMAT
Ë=
RTC_HOURFORMAT_24
))

	)

735 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_OUTPUT_DISABLE
) || \

736 ((
OUTPUT
Ë=
RTC_OUTPUT_ALARMA
) || \

737 ((
OUTPUT
Ë=
RTC_OUTPUT_ALARMB
) || \

738 ((
OUTPUT
Ë=
RTC_OUTPUT_WAKEUP
))

	)

739 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OUTPUT_POLARITY_HIGH
) || \

740 ((
POL
Ë=
RTC_OUTPUT_POLARITY_LOW
))

	)

741 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OUTPUT_TYPE_OPENDRAIN
) || \

742 ((
TYPE
Ë=
RTC_OUTPUT_TYPE_PUSHPULL
))

	)

743 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> (
uöt32_t
)0Ë&& ((HOURË<(uöt32_t)12))

	)

744 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<(
uöt32_t
)23)

	)

745 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<(
uöt32_t
)0x7F)

	)

746 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<(
uöt32_t
)0x7FFF)

	)

747 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<(
uöt32_t
)59)

	)

748 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<(
uöt32_t
)59)

	)

750 
	#IS_RTC_HOURFORMAT12
(
PM
Ë(((PMË=
RTC_HOURFORMAT12_AM
Ë|| ((PMË=
RTC_HOURFORMAT12_PM
))

	)

751 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DAYLIGHTSAVING_SUB1H
) || \

752 ((
SAVE
Ë=
RTC_DAYLIGHTSAVING_ADD1H
) || \

753 ((
SAVE
Ë=
RTC_DAYLIGHTSAVING_NONE
))

	)

754 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_STOREOPERATION_RESET
) || \

755 ((
OPERATION
Ë=
RTC_STOREOPERATION_SET
))

	)

756 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_FORMAT_BIN
Ë|| ((FORMATË=
RTC_FORMAT_BCD
))

	)

757 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<(
uöt32_t
)99)

	)

758 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>(
uöt32_t
)1Ë&& ((MONTHË<(uöt32_t)12))

	)

759 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>(
uöt32_t
)1Ë&& ((DATEË<(uöt32_t)31))

	)

760 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_WEEKDAY_MONDAY
) || \

761 ((
WEEKDAY
Ë=
RTC_WEEKDAY_TUESDAY
) || \

762 ((
WEEKDAY
Ë=
RTC_WEEKDAY_WEDNESDAY
) || \

763 ((
WEEKDAY
Ë=
RTC_WEEKDAY_THURSDAY
) || \

764 ((
WEEKDAY
Ë=
RTC_WEEKDAY_FRIDAY
) || \

765 ((
WEEKDAY
Ë=
RTC_WEEKDAY_SATURDAY
) || \

766 ((
WEEKDAY
Ë=
RTC_WEEKDAY_SUNDAY
))

	)

767 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË>(
uöt32_t
Ë0Ë&& ((DATEË<(uöt32_t)31))

	)

768 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_WEEKDAY_MONDAY
) || \

769 ((
WEEKDAY
Ë=
RTC_WEEKDAY_TUESDAY
) || \

770 ((
WEEKDAY
Ë=
RTC_WEEKDAY_WEDNESDAY
) || \

771 ((
WEEKDAY
Ë=
RTC_WEEKDAY_THURSDAY
) || \

772 ((
WEEKDAY
Ë=
RTC_WEEKDAY_FRIDAY
) || \

773 ((
WEEKDAY
Ë=
RTC_WEEKDAY_SATURDAY
) || \

774 ((
WEEKDAY
Ë=
RTC_WEEKDAY_SUNDAY
))

	)

775 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_ALARMDATEWEEKDAYSEL_DATE
) || \

776 ((
SEL
Ë=
RTC_ALARMDATEWEEKDAYSEL_WEEKDAY
))

	)

777 
	#IS_RTC_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

778 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_ALARM_A
Ë|| ((ALARMË=
RTC_ALARM_B
))

	)

779 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<(
uöt32_t
)0x00007FFF)

	)

781 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_ALARMSUBSECONDMASK_ALL
) || \

782 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_1
) || \

783 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_2
) || \

784 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_3
) || \

785 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_4
) || \

786 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_5
) || \

787 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_6
) || \

788 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_7
) || \

789 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_8
) || \

790 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_9
) || \

791 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_10
) || \

792 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_11
) || \

793 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_12
) || \

794 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14_13
) || \

795 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_SS14
) || \

796 ((
MASK
Ë=
RTC_ALARMSUBSECONDMASK_NONE
))

	)

809 
HAL_SètusTy≥Def
 
RTC_E¡îInôMode
(
RTC_H™dÀTy≥Def
* 
hπc
);

810 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

811 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

824 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rtc_ex.h

39 #i‚de‡
__STM32F4xx_HAL_RTC_EX_H


40 
	#__STM32F4xx_HAL_RTC_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
Tam≥r
;

70 
uöt32_t
 
PöSñe˘i⁄
;

73 
uöt32_t
 
Triggî
;

76 
uöt32_t
 
Fûãr
;

79 
uöt32_t
 
Sam∂ögFªquícy
;

82 
uöt32_t
 
Pªch¨geDuøti⁄
;

85 
uöt32_t
 
Tam≥rPuŒUp
;

88 
uöt32_t
 
TimeSèmpOnTam≥rDëe˘i⁄
;

90 }
	tRTC_Tam≥rTy≥Def
;

103 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

104 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

105 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

106 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

107 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

108 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

109 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

110 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

111 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

112 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

113 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

114 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

115 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

116 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

117 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

118 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

119 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

120 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

121 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

122 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

130 
	#RTC_TIMESTAMPEDGE_RISING
 ((
uöt32_t
)0x00000000)

	)

131 
	#RTC_TIMESTAMPEDGE_FALLING
 ((
uöt32_t
)0x00000008)

	)

139 
	#RTC_TAMPER_1
 
RTC_TAFCR_TAMP1E


	)

140 
	#RTC_TAMPER_2
 
RTC_TAFCR_TAMP2E


	)

148 
	#RTC_TAMPERPIN_DEFAULT
 ((
uöt32_t
)0x00000000)

	)

149 
	#RTC_TAMPERPIN_POS1
 ((
uöt32_t
)0x00010000)

	)

157 
	#RTC_TIMESTAMPPIN_DEFAULT
 ((
uöt32_t
)0x00000000)

	)

158 
	#RTC_TIMESTAMPPIN_POS1
 ((
uöt32_t
)0x00020000)

	)

166 
	#RTC_TAMPERTRIGGER_RISINGEDGE
 ((
uöt32_t
)0x00000000)

	)

167 
	#RTC_TAMPERTRIGGER_FALLINGEDGE
 ((
uöt32_t
)0x00000002)

	)

168 
	#RTC_TAMPERTRIGGER_LOWLEVEL
 
RTC_TAMPERTRIGGER_RISINGEDGE


	)

169 
	#RTC_TAMPERTRIGGER_HIGHLEVEL
 
RTC_TAMPERTRIGGER_FALLINGEDGE


	)

177 
	#RTC_TAMPERFILTER_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

179 
	#RTC_TAMPERFILTER_2SAMPLE
 ((
uöt32_t
)0x00000800Ë

	)

181 
	#RTC_TAMPERFILTER_4SAMPLE
 ((
uöt32_t
)0x00001000Ë

	)

183 
	#RTC_TAMPERFILTER_8SAMPLE
 ((
uöt32_t
)0x00001800Ë

	)

192 
	#RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768
 ((
uöt32_t
)0x00000000Ë

	)

194 
	#RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV16384
 ((
uöt32_t
)0x00000100Ë

	)

196 
	#RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV8192
 ((
uöt32_t
)0x00000200Ë

	)

198 
	#RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV4096
 ((
uöt32_t
)0x00000300Ë

	)

200 
	#RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV2048
 ((
uöt32_t
)0x00000400Ë

	)

202 
	#RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV1024
 ((
uöt32_t
)0x00000500Ë

	)

204 
	#RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV512
 ((
uöt32_t
)0x00000600Ë

	)

206 
	#RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV256
 ((
uöt32_t
)0x00000700Ë

	)

215 
	#RTC_TAMPERPRECHARGEDURATION_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

217 
	#RTC_TAMPERPRECHARGEDURATION_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

219 
	#RTC_TAMPERPRECHARGEDURATION_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

221 
	#RTC_TAMPERPRECHARGEDURATION_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

230 
	#RTC_TIMESTAMPONTAMPERDETECTION_ENABLE
 ((
uöt32_t
)
RTC_TAFCR_TAMPTS
Ë

	)

231 
	#RTC_TIMESTAMPONTAMPERDETECTION_DISABLE
 ((
uöt32_t
)0x00000000Ë

	)

239 
	#RTC_TAMPER_PULLUP_ENABLE
 ((
uöt32_t
)0x00000000Ë

	)

240 
	#RTC_TAMPER_PULLUP_DISABLE
 ((
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
Ë

	)

248 
	#RTC_WAKEUPCLOCK_RTCCLK_DIV16
 ((
uöt32_t
)0x00000000)

	)

249 
	#RTC_WAKEUPCLOCK_RTCCLK_DIV8
 ((
uöt32_t
)0x00000001)

	)

250 
	#RTC_WAKEUPCLOCK_RTCCLK_DIV4
 ((
uöt32_t
)0x00000002)

	)

251 
	#RTC_WAKEUPCLOCK_RTCCLK_DIV2
 ((
uöt32_t
)0x00000003)

	)

252 
	#RTC_WAKEUPCLOCK_CK_SPRE_16BITS
 ((
uöt32_t
)0x00000004)

	)

253 
	#RTC_WAKEUPCLOCK_CK_SPRE_17BITS
 ((
uöt32_t
)0x00000006)

	)

261 
	#RTC_CALIBSIGN_POSITIVE
 ((
uöt32_t
)0x00000000)

	)

262 
	#RTC_CALIBSIGN_NEGATIVE
 ((
uöt32_t
)0x00000080)

	)

270 
	#RTC_SMOOTHCALIB_PERIOD_32SEC
 ((
uöt32_t
)0x00000000Ë

	)

272 
	#RTC_SMOOTHCALIB_PERIOD_16SEC
 ((
uöt32_t
)0x00002000Ë

	)

274 
	#RTC_SMOOTHCALIB_PERIOD_8SEC
 ((
uöt32_t
)0x00004000Ë

	)

283 
	#RTC_SMOOTHCALIB_PLUSPULSES_SET
 ((
uöt32_t
)0x00008000Ë

	)

286 
	#RTC_SMOOTHCALIB_PLUSPULSES_RESET
 ((
uöt32_t
)0x00000000Ë

	)

295 
	#RTC_SHIFTADD1S_RESET
 ((
uöt32_t
)0x00000000)

	)

296 
	#RTC_SHIFTADD1S_SET
 ((
uöt32_t
)0x80000000)

	)

305 
	#RTC_CALIBOUTPUT_512HZ
 ((
uöt32_t
)0x00000000)

	)

306 
	#RTC_CALIBOUTPUT_1HZ
 ((
uöt32_t
)0x00080000)

	)

330 
	#__HAL_RTC_WAKEUPTIMER_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
RTC_CR_WUTE
))

	)

337 
	#__HAL_RTC_WAKEUPTIMER_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
RTC_CR_WUTE
))

	)

347 
	#__HAL_RTC_WAKEUPTIMER_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(__INTERRUPT__))

	)

357 
	#__HAL_RTC_WAKEUPTIMER_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(__INTERRUPT__))

	)

367 
	#__HAL_RTC_WAKEUPTIMER_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& ((__INTERRUPT__)>> 4)Ë!
RESET
)? 
SET
 : RESET)

	)

377 
	#__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
CR
Ë& (__INTERRUPT__)Ë!
RESET
Ë? 
SET
 : RESET)

	)

388 
	#__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

398 
	#__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ISR
Ë(~((__FLAG__Ë| 
RTC_ISR_INIT
)|((__HANDLE__)->In°™˚->ISR & RTC_ISR_INIT))

	)

404 
	#__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
(Ë(
EXTI
->
IMR
 |
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

410 
	#__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT
(Ë(
EXTI
->
IMR
 &~(
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
))

	)

416 
	#__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT
(Ë(
EXTI
->
EMR
 |
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

422 
	#__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT
(Ë(
EXTI
->
EMR
 &~(
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
))

	)

428 
	#__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_FALLING_EDGE
(Ë(
EXTI
->
FTSR
 |
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

434 
	#__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_FALLING_EDGE
(Ë(
EXTI
->
FTSR
 &~(
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
))

	)

440 
	#__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE
(Ë(
EXTI
->
RTSR
 |
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

446 
	#__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_RISING_EDGE
(Ë(
EXTI
->
RTSR
 &~(
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
))

	)

452 
	#__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_FALLING_EDGE
();

	)

459 
	#__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_FALLING_EDGE
();

	)

465 
	#__HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & 
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

471 
	#__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = 
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

477 
	#__HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT
(Ë(
EXTI
->
SWIER
 |
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
)

	)

493 
	#__HAL_RTC_TIMESTAMP_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
RTC_CR_TSE
))

	)

500 
	#__HAL_RTC_TIMESTAMP_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
RTC_CR_TSE
))

	)

510 
	#__HAL_RTC_TIMESTAMP_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(__INTERRUPT__))

	)

520 
	#__HAL_RTC_TIMESTAMP_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(__INTERRUPT__))

	)

530 
	#__HAL_RTC_TIMESTAMP_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& ((__INTERRUPT__)>> 4)Ë!
RESET
)? 
SET
 : RESET)

	)

540 
	#__HAL_RTC_TIMESTAMP_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
CR
Ë& (__INTERRUPT__)Ë!
RESET
Ë? 
SET
 : RESET)

	)

551 
	#__HAL_RTC_TIMESTAMP_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

561 
	#__HAL_RTC_TIMESTAMP_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ISR
Ë(~((__FLAG__Ë| 
RTC_ISR_INIT
)|((__HANDLE__)->In°™˚->ISR & RTC_ISR_INIT))

	)

577 
	#__HAL_RTC_TAMPER1_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
TAFCR
 |(
RTC_TAFCR_TAMP1E
))

	)

584 
	#__HAL_RTC_TAMPER1_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
TAFCR
 &~(
RTC_TAFCR_TAMP1E
))

	)

591 
	#__HAL_RTC_TAMPER2_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
TAFCR
 |(
RTC_TAFCR_TAMP2E
))

	)

598 
	#__HAL_RTC_TAMPER2_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
TAFCR
 &~(
RTC_TAFCR_TAMP2E
))

	)

609 
	#__HAL_RTC_TAMPER_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& ((__INTERRUPT__)>> 4)Ë!
RESET
)? 
SET
 : RESET)

	)

619 
	#__HAL_RTC_TAMPER_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
TAFCR
Ë& (__INTERRUPT__)Ë!
RESET
Ë? 
SET
 : RESET)

	)

630 
	#__HAL_RTC_TAMPER_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

641 
	#__HAL_RTC_TAMPER_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
ISR
Ë(~((__FLAG__Ë| 
RTC_ISR_INIT
)|((__HANDLE__)->In°™˚->ISR & RTC_ISR_INIT))

	)

655 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
(Ë(
EXTI
->
IMR
 |
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
)

	)

661 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT
(Ë(
EXTI
->
IMR
 &~(
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
))

	)

667 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_EVENT
(Ë(
EXTI
->
EMR
 |
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
)

	)

673 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_EVENT
(Ë(
EXTI
->
EMR
 &~(
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
))

	)

679 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_FALLING_EDGE
(Ë(
EXTI
->
FTSR
 |
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
)

	)

685 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_FALLING_EDGE
(Ë(
EXTI
->
FTSR
 &~(
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
))

	)

691 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE
(Ë(
EXTI
->
RTSR
 |
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
)

	)

697 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_RISING_EDGE
(Ë(
EXTI
->
RTSR
 &~(
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
))

	)

703 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_FALLING_EDGE
();

	)

710 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_FALLING_EDGE
();

	)

716 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & 
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
)

	)

722 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = 
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
)

	)

728 
	#__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT
(Ë(
EXTI
->
SWIER
 |
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
)

	)

743 
	#__HAL_RTC_COARSE_CALIB_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
RTC_CR_DCE
))

	)

750 
	#__HAL_RTC_COARSE_CALIB_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
RTC_CR_DCE
))

	)

757 
	#__HAL_RTC_CALIBRATION_OUTPUT_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
RTC_CR_COE
))

	)

764 
	#__HAL_RTC_CALIBRATION_OUTPUT_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
RTC_CR_COE
))

	)

771 
	#__HAL_RTC_CLOCKREF_DETECTION_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |(
RTC_CR_REFCKON
))

	)

778 
	#__HAL_RTC_CLOCKREF_DETECTION_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &~(
RTC_CR_REFCKON
))

	)

788 
	#__HAL_RTC_SHIFT_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
ISR
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

806 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
TimeSèmpEdge
, uöt32_à
RTC_TimeSèmpPö
);

807 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëTimeSèmp_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
TimeSèmpEdge
, uöt32_à
RTC_TimeSèmpPö
);

808 
HAL_SètusTy≥Def
 
HAL_RTCEx_Dó˘iv©eTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
);

809 
HAL_SètusTy≥Def
 
HAL_RTCEx_GëTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTimeSèmp
, 
RTC_D©eTy≥Def
 *
sTimeSèmpD©e
, 
uöt32_t
 
F‹m©
);

811 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
* 
sTam≥r
);

812 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëTam≥r_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
* 
sTam≥r
);

813 
HAL_SètusTy≥Def
 
HAL_RTCEx_Dó˘iv©eTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Tam≥r
);

814 
HAL_RTCEx_Tam≥rTimeSèmpIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
);

816 
HAL_RTCEx_Tam≥r1EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

817 
HAL_RTCEx_Tam≥r2EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

818 
HAL_RTCEx_TimeSèmpEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

819 
HAL_SètusTy≥Def
 
HAL_RTCEx_PﬁlF‹TimeSèmpEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
);

820 
HAL_SètusTy≥Def
 
HAL_RTCEx_PﬁlF‹Tam≥r1Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
);

821 
HAL_SètusTy≥Def
 
HAL_RTCEx_PﬁlF‹Tam≥r2Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
);

830 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
WakeUpCou¡î
, uöt32_à
WakeUpClock
);

831 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëWakeUpTimî_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
WakeUpCou¡î
, uöt32_à
WakeUpClock
);

832 
uöt32_t
 
HAL_RTCEx_Dó˘iv©eWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
);

833 
uöt32_t
 
HAL_RTCEx_GëWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
);

834 
HAL_RTCEx_WakeUpTimîIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
);

835 
HAL_RTCEx_WakeUpTimîEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

836 
HAL_SètusTy≥Def
 
HAL_RTCEx_PﬁlF‹WakeUpTimîEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
);

845 
HAL_RTCEx_BKUPWrôe
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
BackupRegi°î
, uöt32_à
D©a
);

846 
uöt32_t
 
HAL_RTCEx_BKUPRód
(
RTC_H™dÀTy≥Def
 *
hπc
, uöt32_à
BackupRegi°î
);

848 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëCﬂr£CÆib
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
CÆibSign
, uöt32_à
VÆue
);

849 
HAL_SètusTy≥Def
 
HAL_RTCEx_Dó˘iv©eCﬂr£CÆib
(
RTC_H™dÀTy≥Def
 *
hπc
);

850 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëSmoŸhCÆib
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
SmoŸhCÆibPîiod
, uöt32_à
SmoŸhCÆibPlusPul£s
, uöt32_à
SmouthCÆibMöusPul£sVÆue
);

851 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëSynchroShi·
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Shi·Add1S
, uöt32_à
Shi·SubFS
);

852 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëCÆibøti⁄OutPut
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
CÆibOuçut
);

853 
HAL_SètusTy≥Def
 
HAL_RTCEx_Dó˘iv©eCÆibøti⁄OutPut
(
RTC_H™dÀTy≥Def
 *
hπc
);

854 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëRefClock
(
RTC_H™dÀTy≥Def
 *
hπc
);

855 
HAL_SètusTy≥Def
 
HAL_RTCEx_Dó˘iv©eRefClock
(
RTC_H™dÀTy≥Def
 *
hπc
);

856 
HAL_SètusTy≥Def
 
HAL_RTCEx_E«bÀBy∑ssShadow
(
RTC_H™dÀTy≥Def
 *
hπc
);

857 
HAL_SètusTy≥Def
 
HAL_RTCEx_DißbÀBy∑ssShadow
(
RTC_H™dÀTy≥Def
 *
hπc
);

866 
HAL_RTCEx_AœrmBEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

867 
HAL_SètusTy≥Def
 
HAL_RTCEx_PﬁlF‹AœrmBEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
);

882 
	#RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
 ((
uöt32_t
)
EXTI_IMR_MR21
Ë

	)

883 
	#RTC_EXTI_LINE_WAKEUPTIMER_EVENT
 ((
uöt32_t
)
EXTI_IMR_MR22
Ë

	)

896 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
) || \

897 ((
BKP
Ë=
RTC_BKP_DR1
) || \

898 ((
BKP
Ë=
RTC_BKP_DR2
) || \

899 ((
BKP
Ë=
RTC_BKP_DR3
) || \

900 ((
BKP
Ë=
RTC_BKP_DR4
) || \

901 ((
BKP
Ë=
RTC_BKP_DR5
) || \

902 ((
BKP
Ë=
RTC_BKP_DR6
) || \

903 ((
BKP
Ë=
RTC_BKP_DR7
) || \

904 ((
BKP
Ë=
RTC_BKP_DR8
) || \

905 ((
BKP
Ë=
RTC_BKP_DR9
) || \

906 ((
BKP
Ë=
RTC_BKP_DR10
) || \

907 ((
BKP
Ë=
RTC_BKP_DR11
) || \

908 ((
BKP
Ë=
RTC_BKP_DR12
) || \

909 ((
BKP
Ë=
RTC_BKP_DR13
) || \

910 ((
BKP
Ë=
RTC_BKP_DR14
) || \

911 ((
BKP
Ë=
RTC_BKP_DR15
) || \

912 ((
BKP
Ë=
RTC_BKP_DR16
) || \

913 ((
BKP
Ë=
RTC_BKP_DR17
) || \

914 ((
BKP
Ë=
RTC_BKP_DR18
) || \

915 ((
BKP
Ë=
RTC_BKP_DR19
))

	)

916 
	#IS_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TIMESTAMPEDGE_RISING
) || \

917 ((
EDGE
Ë=
RTC_TIMESTAMPEDGE_FALLING
))

	)

918 
	#IS_RTC_TAMPER
(
TAMPER
Ë((((TAMPERË& ((
uöt32_t
)!(
RTC_TAFCR_TAMP1E
 | 
RTC_TAFCR_TAMP2E
))Ë=0x00Ë&& ((TAMPERË!(uöt32_t)
RESET
))

	)

920 
	#IS_RTC_TAMPER_PIN
(
PIN
Ë(((PINË=
RTC_TAMPERPIN_DEFAULT
) || \

921 ((
PIN
Ë=
RTC_TAMPERPIN_POS1
))

	)

923 
	#IS_RTC_TIMESTAMP_PIN
(
PIN
Ë(((PINË=
RTC_TIMESTAMPPIN_DEFAULT
) || \

924 ((
PIN
Ë=
RTC_TIMESTAMPPIN_POS1
))

	)

926 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_TAMPERTRIGGER_RISINGEDGE
) || \

927 ((
TRIGGER
Ë=
RTC_TAMPERTRIGGER_FALLINGEDGE
) || \

928 ((
TRIGGER
Ë=
RTC_TAMPERTRIGGER_LOWLEVEL
) || \

929 ((
TRIGGER
Ë=
RTC_TAMPERTRIGGER_HIGHLEVEL
))

	)

930 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_TAMPERFILTER_DISABLE
) || \

931 ((
FILTER
Ë=
RTC_TAMPERFILTER_2SAMPLE
) || \

932 ((
FILTER
Ë=
RTC_TAMPERFILTER_4SAMPLE
) || \

933 ((
FILTER
Ë=
RTC_TAMPERFILTER_8SAMPLE
))

	)

934 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË=
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768
)|| \

935 ((
FREQ
Ë=
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV16384
)|| \

936 ((
FREQ
Ë=
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV8192
) || \

937 ((
FREQ
Ë=
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV4096
) || \

938 ((
FREQ
Ë=
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV2048
) || \

939 ((
FREQ
Ë=
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV1024
) || \

940 ((
FREQ
Ë=
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV512
) || \

941 ((
FREQ
Ë=
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV256
))

	)

942 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_TAMPERPRECHARGEDURATION_1RTCCLK
) || \

943 ((
DURATION
Ë=
RTC_TAMPERPRECHARGEDURATION_2RTCCLK
) || \

944 ((
DURATION
Ë=
RTC_TAMPERPRECHARGEDURATION_4RTCCLK
) || \

945 ((
DURATION
Ë=
RTC_TAMPERPRECHARGEDURATION_8RTCCLK
))

	)

946 
	#IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION
(
DETECTION
Ë(((DETECTIONË=
RTC_TIMESTAMPONTAMPERDETECTION_ENABLE
) || \

947 ((
DETECTION
Ë=
RTC_TIMESTAMPONTAMPERDETECTION_DISABLE
))

	)

948 
	#IS_RTC_TAMPER_PULLUP_STATE
(
STATE
Ë(((STATEË=
RTC_TAMPER_PULLUP_ENABLE
) || \

949 ((
STATE
Ë=
RTC_TAMPER_PULLUP_DISABLE
))

	)

950 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WAKEUPCLOCK_RTCCLK_DIV16
) || \

951 ((
CLOCK
Ë=
RTC_WAKEUPCLOCK_RTCCLK_DIV8
) || \

952 ((
CLOCK
Ë=
RTC_WAKEUPCLOCK_RTCCLK_DIV4
) || \

953 ((
CLOCK
Ë=
RTC_WAKEUPCLOCK_RTCCLK_DIV2
) || \

954 ((
CLOCK
Ë=
RTC_WAKEUPCLOCK_CK_SPRE_16BITS
) || \

955 ((
CLOCK
Ë=
RTC_WAKEUPCLOCK_CK_SPRE_17BITS
))

	)

957 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

958 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CALIBSIGN_POSITIVE
) || \

959 ((
SIGN
Ë=
RTC_CALIBSIGN_NEGATIVE
))

	)

961 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

963 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SMOOTHCALIB_PERIOD_32SEC
) || \

964 ((
PERIOD
Ë=
RTC_SMOOTHCALIB_PERIOD_16SEC
) || \

965 ((
PERIOD
Ë=
RTC_SMOOTHCALIB_PERIOD_8SEC
))

	)

966 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SMOOTHCALIB_PLUSPULSES_SET
) || \

967 ((
PLUS
Ë=
RTC_SMOOTHCALIB_PLUSPULSES_RESET
))

	)

970 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

971 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_SHIFTADD1S_RESET
) || \

972 ((
SEL
Ë=
RTC_SHIFTADD1S_SET
))

	)

973 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

974 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CALIBOUTPUT_512HZ
) || \

975 ((
OUTPUT
Ë=
RTC_CALIBOUTPUT_1HZ
))

	)

992 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sai.h

39 #i‚de‡
__STM32F4xx_HAL_SAI_H


40 
	#__STM32F4xx_HAL_SAI_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

52 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

53 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

69 
HAL_SAI_STATE_RESET
 = 0x00,

70 
HAL_SAI_STATE_READY
 = 0x01,

71 
HAL_SAI_STATE_BUSY
 = 0x02,

72 
HAL_SAI_STATE_BUSY_TX
 = 0x12,

73 
HAL_SAI_STATE_BUSY_RX
 = 0x22,

74 
HAL_SAI_STATE_TIMEOUT
 = 0x03,

75 
HAL_SAI_STATE_ERROR
 = 0x04

76 }
	tHAL_SAI_SèãTy≥Def
;

81 (*
SAIˇŒback
)();

88 
uöt32_t
 
AudioMode
;

91 
uöt32_t
 
Synchro
;

94 
uöt32_t
 
SynchroExt
;

98 
uöt32_t
 
OuçutDrive
;

103 
uöt32_t
 
NoDividî
;

112 
uöt32_t
 
FIFOThªshﬁd
;

115 
uöt32_t
 
ClockSour˚
;

118 
uöt32_t
 
AudioFªquícy
;

121 
uöt32_t
 
Mckdiv
;

125 
uöt32_t
 
M⁄oSãªoMode
;

128 
uöt32_t
 
Com∑ndögMode
;

131 
uöt32_t
 
TriSèã
;

137 
uöt32_t
 
PrŸocﬁ
;

140 
uöt32_t
 
D©aSize
;

143 
uöt32_t
 
Fú°Bô
;

146 
uöt32_t
 
ClockSåobög
;

148 }
	tSAI_InôTy≥Def
;

157 
uöt32_t
 
FømeLígth
;

163 
uöt32_t
 
A˘iveFømeLígth
;

168 
uöt32_t
 
FSDeföôi⁄
;

171 
uöt32_t
 
FSPﬁ¨ôy
;

174 
uöt32_t
 
FSOff£t
;

177 }
	tSAI_FømeInôTy≥Def
;

185 
uöt32_t
 
Fú°BôOff£t
;

188 
uöt32_t
 
SlŸSize
;

191 
uöt32_t
 
SlŸNumbî
;

194 
uöt32_t
 
SlŸA˘ive
;

196 }
	tSAI_SlŸInôTy≥Def
;

201 
	s__SAI_H™dÀTy≥Def


203 
SAI_Block_Ty≥Def
 *
In°™˚
;

205 
SAI_InôTy≥Def
 
Inô
;

207 
SAI_FømeInôTy≥Def
 
FømeInô
;

209 
SAI_SlŸInôTy≥Def
 
SlŸInô
;

211 
uöt8_t
 *
pBuffPå
;

213 
uöt16_t
 
X„rSize
;

215 
uöt16_t
 
X„rCou¡
;

217 
DMA_H™dÀTy≥Def
 *
hdm©x
;

219 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

221 
SAIˇŒback
 
muãˇŒback
;

223 (*
I¡îru±Sîvi˚Routöe
)(
__SAI_H™dÀTy≥Def
 *
hßi
);

225 
HAL_LockTy≥Def
 
Lock
;

227 
__IO
 
HAL_SAI_SèãTy≥Def
 
Sèã
;

229 
__IO
 
uöt32_t
 
Eº‹Code
;

230 }
	tSAI_H™dÀTy≥Def
;

245 
	#HAL_SAI_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

246 
	#HAL_SAI_ERROR_OVR
 ((
uöt32_t
)0x00000001Ë

	)

247 
	#HAL_SAI_ERROR_UDR
 ((
uöt32_t
)0x00000002Ë

	)

248 
	#HAL_SAI_ERROR_AFSDET
 ((
uöt32_t
)0x00000004Ë

	)

249 
	#HAL_SAI_ERROR_LFSDET
 ((
uöt32_t
)0x00000008Ë

	)

250 
	#HAL_SAI_ERROR_CNREADY
 ((
uöt32_t
)0x00000010Ë

	)

251 
	#HAL_SAI_ERROR_WCKCFG
 ((
uöt32_t
)0x00000020Ë

	)

252 
	#HAL_SAI_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000040Ë

	)

260 
	#SAI_SYNCEXT_DISABLE
 ((
uöt32_t
)0x00000000)

	)

261 
	#SAI_SYNCEXT_IN_ENABLE
 ((
uöt32_t
)0x00000001)

	)

262 
	#SAI_SYNCEXT_OUTBLOCKA_ENABLE
 ((
uöt32_t
)0x00000002)

	)

263 
	#SAI_SYNCEXT_OUTBLOCKB_ENABLE
 ((
uöt32_t
)0x00000004)

	)

271 
	#SAI_I2S_STANDARD
 ((
uöt32_t
)0x00000000)

	)

272 
	#SAI_I2S_MSBJUSTIFIED
 ((
uöt32_t
)0x00000001)

	)

273 
	#SAI_I2S_LSBJUSTIFIED
 ((
uöt32_t
)0x00000002)

	)

274 
	#SAI_PCM_LONG
 ((
uöt32_t
)0x00000004)

	)

275 
	#SAI_PCM_SHORT
 ((
uöt32_t
)0x00000008)

	)

283 
	#SAI_PROTOCOL_DATASIZE_16BIT
 ((
uöt32_t
)0x00000000)

	)

284 
	#SAI_PROTOCOL_DATASIZE_16BITEXTENDED
 ((
uöt32_t
)0x00000001)

	)

285 
	#SAI_PROTOCOL_DATASIZE_24BIT
 ((
uöt32_t
)0x00000002)

	)

286 
	#SAI_PROTOCOL_DATASIZE_32BIT
 ((
uöt32_t
)0x00000004)

	)

294 
	#SAI_CLKSOURCE_PLLSAI
 ((
uöt32_t
)0x00000000)

	)

295 
	#SAI_CLKSOURCE_PLLI2S
 ((
uöt32_t
)0x00100000)

	)

296 
	#SAI_CLKSOURCE_EXT
 ((
uöt32_t
)0x00200000)

	)

297 
	#SAI_CLKSOURCE_NA
 ((
uöt32_t
)0x00400000Ë

	)

305 
	#SAI_AUDIO_FREQUENCY_192K
 ((
uöt32_t
)192000)

	)

306 
	#SAI_AUDIO_FREQUENCY_96K
 ((
uöt32_t
)96000)

	)

307 
	#SAI_AUDIO_FREQUENCY_48K
 ((
uöt32_t
)48000)

	)

308 
	#SAI_AUDIO_FREQUENCY_44K
 ((
uöt32_t
)44100)

	)

309 
	#SAI_AUDIO_FREQUENCY_32K
 ((
uöt32_t
)32000)

	)

310 
	#SAI_AUDIO_FREQUENCY_22K
 ((
uöt32_t
)22050)

	)

311 
	#SAI_AUDIO_FREQUENCY_16K
 ((
uöt32_t
)16000)

	)

312 
	#SAI_AUDIO_FREQUENCY_11K
 ((
uöt32_t
)11025)

	)

313 
	#SAI_AUDIO_FREQUENCY_8K
 ((
uöt32_t
)8000)

	)

314 
	#SAI_AUDIO_FREQUENCY_MCKDIV
 ((
uöt32_t
)0)

	)

323 
	#SAI_MODEMASTER_TX
 ((
uöt32_t
)0x00000000)

	)

324 
	#SAI_MODEMASTER_RX
 ((
uöt32_t
)
SAI_xCR1_MODE_0
)

	)

325 
	#SAI_MODESLAVE_TX
 ((
uöt32_t
)
SAI_xCR1_MODE_1
)

	)

326 
	#SAI_MODESLAVE_RX
 ((
uöt32_t
)(
SAI_xCR1_MODE_1
 | 
SAI_xCR1_MODE_0
))

	)

335 
	#SAI_FREE_PROTOCOL
 ((
uöt32_t
)0x00000000)

	)

336 
	#SAI_SPDIF_PROTOCOL
 ((
uöt32_t
)
SAI_xCR1_PRTCFG_0
)

	)

337 
	#SAI_AC97_PROTOCOL
 ((
uöt32_t
)
SAI_xCR1_PRTCFG_1
)

	)

346 
	#SAI_DATASIZE_8
 ((
uöt32_t
)
SAI_xCR1_DS_1
)

	)

347 
	#SAI_DATASIZE_10
 ((
uöt32_t
)(
SAI_xCR1_DS_1
 | 
SAI_xCR1_DS_0
))

	)

348 
	#SAI_DATASIZE_16
 ((
uöt32_t
)
SAI_xCR1_DS_2
)

	)

349 
	#SAI_DATASIZE_20
 ((
uöt32_t
)(
SAI_xCR1_DS_2
 | 
SAI_xCR1_DS_0
))

	)

350 
	#SAI_DATASIZE_24
 ((
uöt32_t
)(
SAI_xCR1_DS_2
 | 
SAI_xCR1_DS_1
))

	)

351 
	#SAI_DATASIZE_32
 ((
uöt32_t
)(
SAI_xCR1_DS_2
 | 
SAI_xCR1_DS_1
 | 
SAI_xCR1_DS_0
))

	)

360 
	#SAI_FIRSTBIT_MSB
 ((
uöt32_t
)0x00000000)

	)

361 
	#SAI_FIRSTBIT_LSB
 ((
uöt32_t
)
SAI_xCR1_LSBFIRST
)

	)

370 
	#SAI_CLOCKSTROBING_FALLINGEDGE
 ((
uöt32_t
)0x00000000)

	)

371 
	#SAI_CLOCKSTROBING_RISINGEDGE
 ((
uöt32_t
)
SAI_xCR1_CKSTR
)

	)

380 
	#SAI_ASYNCHRONOUS
 ((
uöt32_t
)0x00000000)

	)

381 
	#SAI_SYNCHRONOUS
 ((
uöt32_t
)
SAI_xCR1_SYNCEN_0
)

	)

382 
	#SAI_SYNCHRONOUS_EXT
 ((
uöt32_t
)
SAI_xCR1_SYNCEN_1
)

	)

391 
	#SAI_OUTPUTDRIVE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

392 
	#SAI_OUTPUTDRIVE_ENABLE
 ((
uöt32_t
)
SAI_xCR1_OUTDRIV
)

	)

401 
	#SAI_MASTERDIVIDER_ENABLE
 ((
uöt32_t
)0x00000000)

	)

402 
	#SAI_MASTERDIVIDER_DISABLE
 ((
uöt32_t
)
SAI_xCR1_NODIV
)

	)

412 
	#SAI_FS_STARTFRAME
 ((
uöt32_t
)0x00000000)

	)

413 
	#SAI_FS_CHANNEL_IDENTIFICATION
 ((
uöt32_t
)
SAI_xFRCR_FSDEF
)

	)

422 
	#SAI_FS_ACTIVE_LOW
 ((
uöt32_t
)0x00000000)

	)

423 
	#SAI_FS_ACTIVE_HIGH
 ((
uöt32_t
)
SAI_xFRCR_FSPO
)

	)

432 
	#SAI_FS_FIRSTBIT
 ((
uöt32_t
)0x00000000)

	)

433 
	#SAI_FS_BEFOREFIRSTBIT
 ((
uöt32_t
)
SAI_xFRCR_FSOFF
)

	)

443 
	#SAI_SLOTSIZE_DATASIZE
 ((
uöt32_t
)0x00000000)

	)

444 
	#SAI_SLOTSIZE_16B
 ((
uöt32_t
)
SAI_xSLOTR_SLOTSZ_0
)

	)

445 
	#SAI_SLOTSIZE_32B
 ((
uöt32_t
)
SAI_xSLOTR_SLOTSZ_1
)

	)

453 
	#SAI_SLOT_NOTACTIVE
 ((
uöt32_t
)0x00000000)

	)

454 
	#SAI_SLOTACTIVE_0
 ((
uöt32_t
)0x00010000)

	)

455 
	#SAI_SLOTACTIVE_1
 ((
uöt32_t
)0x00020000)

	)

456 
	#SAI_SLOTACTIVE_2
 ((
uöt32_t
)0x00040000)

	)

457 
	#SAI_SLOTACTIVE_3
 ((
uöt32_t
)0x00080000)

	)

458 
	#SAI_SLOTACTIVE_4
 ((
uöt32_t
)0x00100000)

	)

459 
	#SAI_SLOTACTIVE_5
 ((
uöt32_t
)0x00200000)

	)

460 
	#SAI_SLOTACTIVE_6
 ((
uöt32_t
)0x00400000)

	)

461 
	#SAI_SLOTACTIVE_7
 ((
uöt32_t
)0x00800000)

	)

462 
	#SAI_SLOTACTIVE_8
 ((
uöt32_t
)0x01000000)

	)

463 
	#SAI_SLOTACTIVE_9
 ((
uöt32_t
)0x02000000)

	)

464 
	#SAI_SLOTACTIVE_10
 ((
uöt32_t
)0x04000000)

	)

465 
	#SAI_SLOTACTIVE_11
 ((
uöt32_t
)0x08000000)

	)

466 
	#SAI_SLOTACTIVE_12
 ((
uöt32_t
)0x10000000)

	)

467 
	#SAI_SLOTACTIVE_13
 ((
uöt32_t
)0x20000000)

	)

468 
	#SAI_SLOTACTIVE_14
 ((
uöt32_t
)0x40000000)

	)

469 
	#SAI_SLOTACTIVE_15
 ((
uöt32_t
)0x80000000)

	)

470 
	#SAI_SLOTACTIVE_ALL
 ((
uöt32_t
)0xFFFF0000)

	)

479 
	#SAI_STEREOMODE
 ((
uöt32_t
)0x00000000)

	)

480 
	#SAI_MONOMODE
 ((
uöt32_t
)
SAI_xCR1_MONO
)

	)

489 
	#SAI_OUTPUT_NOTRELEASED
 ((
uöt32_t
)0x00000000)

	)

490 
	#SAI_OUTPUT_RELEASED
 ((
uöt32_t
)
SAI_xCR2_TRIS
)

	)

499 
	#SAI_FIFOTHRESHOLD_EMPTY
 ((
uöt32_t
)0x00000000)

	)

500 
	#SAI_FIFOTHRESHOLD_1QF
 ((
uöt32_t
)
SAI_xCR2_FTH_0
)

	)

501 
	#SAI_FIFOTHRESHOLD_HF
 ((
uöt32_t
)
SAI_xCR2_FTH_1
)

	)

502 
	#SAI_FIFOTHRESHOLD_3QF
 ((
uöt32_t
)(
SAI_xCR2_FTH_1
 | 
SAI_xCR2_FTH_0
))

	)

503 
	#SAI_FIFOTHRESHOLD_FULL
 ((
uöt32_t
)
SAI_xCR2_FTH_2
)

	)

512 
	#SAI_NOCOMPANDING
 ((
uöt32_t
)0x00000000)

	)

513 
	#SAI_ULAW_1CPL_COMPANDING
 ((
uöt32_t
)
SAI_xCR2_COMP_1
)

	)

514 
	#SAI_ALAW_1CPL_COMPANDING
 ((
uöt32_t
)(
SAI_xCR2_COMP_1
 | 
SAI_xCR2_COMP_0
))

	)

515 
	#SAI_ULAW_2CPL_COMPANDING
 ((
uöt32_t
)(
SAI_xCR2_COMP_1
 | 
SAI_xCR2_CPL
))

	)

516 
	#SAI_ALAW_2CPL_COMPANDING
 ((
uöt32_t
)(
SAI_xCR2_COMP_1
 | 
SAI_xCR2_COMP_0
 | 
SAI_xCR2_CPL
))

	)

525 
	#SAI_ZERO_VALUE
 ((
uöt32_t
)0x00000000)

	)

526 
	#SAI_LAST_SENT_VALUE
 ((
uöt32_t
)
SAI_xCR2_MUTEVAL
)

	)

536 
	#SAI_IT_OVRUDR
 ((
uöt32_t
)
SAI_xIMR_OVRUDRIE
)

	)

537 
	#SAI_IT_MUTEDET
 ((
uöt32_t
)
SAI_xIMR_MUTEDETIE
)

	)

538 
	#SAI_IT_WCKCFG
 ((
uöt32_t
)
SAI_xIMR_WCKCFGIE
)

	)

539 
	#SAI_IT_FREQ
 ((
uöt32_t
)
SAI_xIMR_FREQIE
)

	)

540 
	#SAI_IT_CNRDY
 ((
uöt32_t
)
SAI_xIMR_CNRDYIE
)

	)

541 
	#SAI_IT_AFSDET
 ((
uöt32_t
)
SAI_xIMR_AFSDETIE
)

	)

542 
	#SAI_IT_LFSDET
 ((
uöt32_t
)
SAI_xIMR_LFSDETIE
)

	)

551 
	#SAI_FLAG_OVRUDR
 ((
uöt32_t
)
SAI_xSR_OVRUDR
)

	)

552 
	#SAI_FLAG_MUTEDET
 ((
uöt32_t
)
SAI_xSR_MUTEDET
)

	)

553 
	#SAI_FLAG_WCKCFG
 ((
uöt32_t
)
SAI_xSR_WCKCFG
)

	)

554 
	#SAI_FLAG_FREQ
 ((
uöt32_t
)
SAI_xSR_FREQ
)

	)

555 
	#SAI_FLAG_CNRDY
 ((
uöt32_t
)
SAI_xSR_CNRDY
)

	)

556 
	#SAI_FLAG_AFSDET
 ((
uöt32_t
)
SAI_xSR_AFSDET
)

	)

557 
	#SAI_FLAG_LFSDET
 ((
uöt32_t
)
SAI_xSR_LFSDET
)

	)

566 
	#SAI_FIFOSTATUS_EMPTY
 ((
uöt32_t
)0x00000000)

	)

567 
	#SAI_FIFOSTATUS_LESS1QUARTERFULL
 ((
uöt32_t
)0x00010000)

	)

568 
	#SAI_FIFOSTATUS_1QUARTERFULL
 ((
uöt32_t
)0x00020000)

	)

569 
	#SAI_FIFOSTATUS_HALFFULL
 ((
uöt32_t
)0x00030000)

	)

570 
	#SAI_FIFOSTATUS_3QUARTERFULL
 ((
uöt32_t
)0x00040000)

	)

571 
	#SAI_FIFOSTATUS_FULL
 ((
uöt32_t
)0x00050000)

	)

592 
	#__HAL_SAI_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_SAI_STATE_RESET
)

	)

608 
	#__HAL_SAI_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IMR
 |(__INTERRUPT__))

	)

609 
	#__HAL_SAI_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IMR
 &(~(__INTERRUPT__)))

	)

621 
	#__HAL_SAI_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
IMR
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

636 
	#__HAL_SAI_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((__HANDLE__)->
In°™˚
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

652 
	#__HAL_SAI_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
CLRFR
 = (__FLAG__))

	)

654 
	#__HAL_SAI_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
SAI_xCR1_SAIEN
)

	)

655 
	#__HAL_SAI_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
SAI_xCR1_SAIEN
)

	)

662 
	~"°m32f4xx_hÆ_ßi_ex.h
"

674 
HAL_SètusTy≥Def
 
HAL_SAI_InôPrŸocﬁ
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt32_t
 
¥Ÿocﬁ
, uöt32_à
d©asize
, uöt32_à
nb¶Ÿ
);

675 
HAL_SètusTy≥Def
 
HAL_SAI_Inô
(
SAI_H™dÀTy≥Def
 *
hßi
);

676 
HAL_SètusTy≥Def
 
HAL_SAI_DeInô
 (
SAI_H™dÀTy≥Def
 *
hßi
);

677 
HAL_SAI_M•Inô
(
SAI_H™dÀTy≥Def
 *
hßi
);

678 
HAL_SAI_M•DeInô
(
SAI_H™dÀTy≥Def
 *
hßi
);

689 
HAL_SètusTy≥Def
 
HAL_SAI_Tønsmô
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

690 
HAL_SètusTy≥Def
 
HAL_SAI_Re˚ive
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

693 
HAL_SètusTy≥Def
 
HAL_SAI_Tønsmô_IT
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

694 
HAL_SètusTy≥Def
 
HAL_SAI_Re˚ive_IT
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

697 
HAL_SètusTy≥Def
 
HAL_SAI_Tønsmô_DMA
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

698 
HAL_SètusTy≥Def
 
HAL_SAI_Re˚ive_DMA
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

699 
HAL_SètusTy≥Def
 
HAL_SAI_DMAPau£
(
SAI_H™dÀTy≥Def
 *
hßi
);

700 
HAL_SètusTy≥Def
 
HAL_SAI_DMAResume
(
SAI_H™dÀTy≥Def
 *
hßi
);

701 
HAL_SètusTy≥Def
 
HAL_SAI_DMASt›
(
SAI_H™dÀTy≥Def
 *
hßi
);

704 
HAL_SètusTy≥Def
 
HAL_SAI_Ab‹t
(
SAI_H™dÀTy≥Def
 *
hßi
);

707 
HAL_SètusTy≥Def
 
HAL_SAI_E«bÀTxMuãMode
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt16_t
 
vÆ
);

708 
HAL_SètusTy≥Def
 
HAL_SAI_DißbÀTxMuãMode
(
SAI_H™dÀTy≥Def
 *
hßi
);

709 
HAL_SètusTy≥Def
 
HAL_SAI_E«bÀRxMuãMode
(
SAI_H™dÀTy≥Def
 *
hßi
, 
SAIˇŒback
 
ˇŒback
, 
uöt16_t
 
cou¡î
);

710 
HAL_SètusTy≥Def
 
HAL_SAI_DißbÀRxMuãMode
(
SAI_H™dÀTy≥Def
 *
hßi
);

713 
HAL_SAI_IRQH™dÀr
(
SAI_H™dÀTy≥Def
 *
hßi
);

714 
HAL_SAI_TxHÆfC∂tCÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
);

715 
HAL_SAI_TxC∂tCÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
);

716 
HAL_SAI_RxHÆfC∂tCÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
);

717 
HAL_SAI_RxC∂tCÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
);

718 
HAL_SAI_Eº‹CÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
);

727 
HAL_SAI_SèãTy≥Def
 
HAL_SAI_GëSèã
(
SAI_H™dÀTy≥Def
 *
hßi
);

728 
uöt32_t
 
HAL_SAI_GëEº‹
(
SAI_H™dÀTy≥Def
 *
hßi
);

768 
	#IS_SAI_BLOCK_SYNCEXT
(
STATE
Ë(((STATEË=
SAI_SYNCEXT_DISABLE
) ||\

769 ((
STATE
Ë=
SAI_SYNCEXT_IN_ENABLE
) ||\

770 ((
STATE
Ë=
SAI_SYNCEXT_OUTBLOCKA_ENABLE
) ||\

771 ((
STATE
Ë=
SAI_SYNCEXT_OUTBLOCKB_ENABLE
))

	)

773 
	#IS_SAI_SUPPORTED_PROTOCOL
(
PROTOCOL
Ë(((PROTOCOLË=
SAI_I2S_STANDARD
) ||\

774 ((
PROTOCOL
Ë=
SAI_I2S_MSBJUSTIFIED
) ||\

775 ((
PROTOCOL
Ë=
SAI_I2S_LSBJUSTIFIED
) ||\

776 ((
PROTOCOL
Ë=
SAI_PCM_LONG
) ||\

777 ((
PROTOCOL
Ë=
SAI_PCM_SHORT
))

	)

779 
	#IS_SAI_PROTOCOL_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SAI_PROTOCOL_DATASIZE_16BIT
) ||\

780 ((
DATASIZE
Ë=
SAI_PROTOCOL_DATASIZE_16BITEXTENDED
) ||\

781 ((
DATASIZE
Ë=
SAI_PROTOCOL_DATASIZE_24BIT
) ||\

782 ((
DATASIZE
Ë=
SAI_PROTOCOL_DATASIZE_32BIT
))

	)

784 
	#IS_SAI_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SAI_CLKSOURCE_PLLSAI
) ||\

785 ((
SOURCE
Ë=
SAI_CLKSOURCE_PLLI2S
) ||\

786 ((
SOURCE
Ë=
SAI_CLKSOURCE_EXT
))

	)

788 
	#IS_SAI_AUDIO_FREQUENCY
(
AUDIO
Ë(((AUDIOË=
SAI_AUDIO_FREQUENCY_192K
Ë|| ((AUDIOË=
SAI_AUDIO_FREQUENCY_96K
) || \

789 ((
AUDIO
Ë=
SAI_AUDIO_FREQUENCY_48K
Ë|| ((AUDIOË=
SAI_AUDIO_FREQUENCY_44K
) || \

790 ((
AUDIO
Ë=
SAI_AUDIO_FREQUENCY_32K
Ë|| ((AUDIOË=
SAI_AUDIO_FREQUENCY_22K
) || \

791 ((
AUDIO
Ë=
SAI_AUDIO_FREQUENCY_16K
Ë|| ((AUDIOË=
SAI_AUDIO_FREQUENCY_11K
) || \

792 ((
AUDIO
Ë=
SAI_AUDIO_FREQUENCY_8K
Ë|| ((AUDIOË=
SAI_AUDIO_FREQUENCY_MCKDIV
))

	)

794 
	#IS_SAI_BLOCK_MODE
(
MODE
Ë(((MODEË=
SAI_MODEMASTER_TX
) || \

795 ((
MODE
Ë=
SAI_MODEMASTER_RX
) || \

796 ((
MODE
Ë=
SAI_MODESLAVE_TX
) || \

797 ((
MODE
Ë=
SAI_MODESLAVE_RX
))

	)

799 
	#IS_SAI_BLOCK_PROTOCOL
(
PROTOCOL
Ë(((PROTOCOLË=
SAI_FREE_PROTOCOL
) || \

800 ((
PROTOCOL
Ë=
SAI_AC97_PROTOCOL
) || \

801 ((
PROTOCOL
Ë=
SAI_SPDIF_PROTOCOL
))

	)

803 
	#IS_SAI_BLOCK_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SAI_DATASIZE_8
) || \

804 ((
DATASIZE
Ë=
SAI_DATASIZE_10
) || \

805 ((
DATASIZE
Ë=
SAI_DATASIZE_16
) || \

806 ((
DATASIZE
Ë=
SAI_DATASIZE_20
) || \

807 ((
DATASIZE
Ë=
SAI_DATASIZE_24
) || \

808 ((
DATASIZE
Ë=
SAI_DATASIZE_32
))

	)

810 
	#IS_SAI_BLOCK_FIRST_BIT
(
BIT
Ë(((BITË=
SAI_FIRSTBIT_MSB
) || \

811 ((
BIT
Ë=
SAI_FIRSTBIT_LSB
))

	)

813 
	#IS_SAI_BLOCK_CLOCK_STROBING
(
CLOCK
Ë(((CLOCKË=
SAI_CLOCKSTROBING_FALLINGEDGE
) || \

814 ((
CLOCK
Ë=
SAI_CLOCKSTROBING_RISINGEDGE
))

	)

816 
	#IS_SAI_BLOCK_SYNCHRO
(
SYNCHRO
Ë(((SYNCHROË=
SAI_ASYNCHRONOUS
) || \

817 ((
SYNCHRO
Ë=
SAI_SYNCHRONOUS
) || \

818 ((
SYNCHRO
Ë=
SAI_SYNCHRONOUS_EXT
))

	)

820 
	#IS_SAI_BLOCK_OUTPUT_DRIVE
(
DRIVE
Ë(((DRIVEË=
SAI_OUTPUTDRIVE_DISABLE
) || \

821 ((
DRIVE
Ë=
SAI_OUTPUTDRIVE_ENABLE
))

	)

823 
	#IS_SAI_BLOCK_NODIVIDER
(
NODIVIDER
Ë(((NODIVIDERË=
SAI_MASTERDIVIDER_ENABLE
) || \

824 ((
NODIVIDER
Ë=
SAI_MASTERDIVIDER_DISABLE
))

	)

826 
	#IS_SAI_BLOCK_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
SAI_FIFOSTATUS_LESS1QUARTERFULL
 ) || \

827 ((
STATUS
Ë=
SAI_FIFOSTATUS_HALFFULL
) || \

828 ((
STATUS
Ë=
SAI_FIFOSTATUS_1QUARTERFULL
) || \

829 ((
STATUS
Ë=
SAI_FIFOSTATUS_3QUARTERFULL
) || \

830 ((
STATUS
Ë=
SAI_FIFOSTATUS_FULL
) || \

831 ((
STATUS
Ë=
SAI_FIFOSTATUS_EMPTY
))

	)

833 
	#IS_SAI_BLOCK_MUTE_COUNTER
(
COUNTER
Ë((COUNTERË<63)

	)

835 
	#IS_SAI_BLOCK_MUTE_VALUE
(
VALUE
Ë(((VALUEË=
SAI_ZERO_VALUE
) || \

836 ((
VALUE
Ë=
SAI_LAST_SENT_VALUE
))

	)

838 
	#IS_SAI_BLOCK_COMPANDING_MODE
(
MODE
Ë(((MODEË=
SAI_NOCOMPANDING
) || \

839 ((
MODE
Ë=
SAI_ULAW_1CPL_COMPANDING
) || \

840 ((
MODE
Ë=
SAI_ALAW_1CPL_COMPANDING
) || \

841 ((
MODE
Ë=
SAI_ULAW_2CPL_COMPANDING
) || \

842 ((
MODE
Ë=
SAI_ALAW_2CPL_COMPANDING
))

	)

844 
	#IS_SAI_BLOCK_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
SAI_FIFOTHRESHOLD_EMPTY
) || \

845 ((
THRESHOLD
Ë=
SAI_FIFOTHRESHOLD_1QF
) || \

846 ((
THRESHOLD
Ë=
SAI_FIFOTHRESHOLD_HF
) || \

847 ((
THRESHOLD
Ë=
SAI_FIFOTHRESHOLD_3QF
) || \

848 ((
THRESHOLD
Ë=
SAI_FIFOTHRESHOLD_FULL
))

	)

850 
	#IS_SAI_BLOCK_TRISTATE_MANAGEMENT
(
STATE
Ë(((STATEË=
SAI_OUTPUT_NOTRELEASED
) ||\

851 ((
STATE
Ë=
SAI_OUTPUT_RELEASED
))

	)

853 
	#IS_SAI_MONO_STEREO_MODE
(
MODE
Ë(((MODEË=
SAI_MONOMODE
) ||\

854 ((
MODE
Ë=
SAI_STEREOMODE
))

	)

856 
	#IS_SAI_SLOT_ACTIVE
(
ACTIVE
Ë((((ACTIVEË>> 16 ) > 0Ë&& (((ACTIVEË>> 16 ) <(
SAI_SLOTACTIVE_ALL
 >> 16)))

	)

858 
	#IS_SAI_BLOCK_SLOT_NUMBER
(
NUMBER
Ë((1 <(NUMBER)Ë&& ((NUMBERË<16))

	)

860 
	#IS_SAI_BLOCK_SLOT_SIZE
(
SIZE
Ë(((SIZEË=
SAI_SLOTSIZE_DATASIZE
) || \

861 ((
SIZE
Ë=
SAI_SLOTSIZE_16B
) || \

862 ((
SIZE
Ë=
SAI_SLOTSIZE_32B
))

	)

864 
	#IS_SAI_BLOCK_FIRSTBIT_OFFSET
(
OFFSET
Ë((OFFSETË<24)

	)

866 
	#IS_SAI_BLOCK_FS_OFFSET
(
OFFSET
Ë(((OFFSETË=
SAI_FS_FIRSTBIT
) || \

867 ((
OFFSET
Ë=
SAI_FS_BEFOREFIRSTBIT
))

	)

869 
	#IS_SAI_BLOCK_FS_POLARITY
(
POLARITY
Ë(((POLARITYË=
SAI_FS_ACTIVE_LOW
) || \

870 ((
POLARITY
Ë=
SAI_FS_ACTIVE_HIGH
))

	)

872 
	#IS_SAI_BLOCK_FS_DEFINITION
(
DEFINITION
Ë(((DEFINITIONË=
SAI_FS_STARTFRAME
) || \

873 ((
DEFINITION
Ë=
SAI_FS_CHANNEL_IDENTIFICATION
))

	)

875 
	#IS_SAI_BLOCK_MASTER_DIVIDER
(
DIVIDER
Ë((DIVIDERË<15)

	)

877 
	#IS_SAI_BLOCK_FRAME_LENGTH
(
LENGTH
Ë((8 <(LENGTH)Ë&& ((LENGTHË<256))

	)

879 
	#IS_SAI_BLOCK_ACTIVE_FRAME
(
LENGTH
Ë((1 <(LENGTH)Ë&& ((LENGTHË<128))

	)

903 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sai_ex.h

39 #i‚de‡
__STM32F4xx_HAL_SAI_EX_H


40 
	#__STM32F4xx_HAL_SAI_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

57 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

58 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

72 
SAI_BlockSynchroC⁄fig
(
SAI_H™dÀTy≥Def
 *
hßi
);

73 
uöt32_t
 
SAI_GëI≈utClock
(
SAI_H™dÀTy≥Def
 *
hßi
);

96 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sd.h

39 #i‚de‡
__STM32F4xx_HAL_SD_H


40 
	#__STM32F4xx_HAL_SD_H


	)

42 #ifde‡
__˝lu•lus


45 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

46 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

47 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

48 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_Œ_sdmmc.h
"

69 
	#SD_InôTy≥Def
 
SDIO_InôTy≥Def


	)

70 
	#SD_Ty≥Def
 
SDIO_Ty≥Def


	)

74 
SD_Ty≥Def
 *
In°™˚
;

76 
SD_InôTy≥Def
 
Inô
;

78 
HAL_LockTy≥Def
 
Lock
;

80 
uöt32_t
 
C¨dTy≥
;

82 
uöt32_t
 
RCA
;

84 
uöt32_t
 
CSD
[4];

86 
uöt32_t
 
CID
[4];

88 
__IO
 
uöt32_t
 
SdTøns„rC∂t
;

90 
__IO
 
uöt32_t
 
SdTøns„rEº
;

92 
__IO
 
uöt32_t
 
DmaTøns„rC∂t
;

94 
__IO
 
uöt32_t
 
SdO≥øti⁄
;

96 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

98 
DMA_H™dÀTy≥Def
 *
hdm©x
;

100 }
	tSD_H™dÀTy≥Def
;

110 
__IO
 
uöt8_t
 
CSDSåu˘
;

111 
__IO
 
uöt8_t
 
SysS≥cVîsi⁄
;

112 
__IO
 
uöt8_t
 
Re£rved1
;

113 
__IO
 
uöt8_t
 
TAAC
;

114 
__IO
 
uöt8_t
 
NSAC
;

115 
__IO
 
uöt8_t
 
MaxBusClkFªc
;

116 
__IO
 
uöt16_t
 
C¨dComdCœs£s
;

117 
__IO
 
uöt8_t
 
RdBlockLí
;

118 
__IO
 
uöt8_t
 
P¨tBlockRód
;

119 
__IO
 
uöt8_t
 
WrBlockMißlign
;

120 
__IO
 
uöt8_t
 
RdBlockMißlign
;

121 
__IO
 
uöt8_t
 
DSRIm∂
;

122 
__IO
 
uöt8_t
 
Re£rved2
;

123 
__IO
 
uöt32_t
 
Devi˚Size
;

124 
__IO
 
uöt8_t
 
MaxRdCuºítVDDMö
;

125 
__IO
 
uöt8_t
 
MaxRdCuºítVDDMax
;

126 
__IO
 
uöt8_t
 
MaxWrCuºítVDDMö
;

127 
__IO
 
uöt8_t
 
MaxWrCuºítVDDMax
;

128 
__IO
 
uöt8_t
 
Devi˚SizeMul
;

129 
__IO
 
uöt8_t
 
Eø£GrSize
;

130 
__IO
 
uöt8_t
 
Eø£GrMul
;

131 
__IO
 
uöt8_t
 
WrPrŸe˘GrSize
;

132 
__IO
 
uöt8_t
 
WrPrŸe˘GrE«bÀ
;

133 
__IO
 
uöt8_t
 
M™DeÊECC
;

134 
__IO
 
uöt8_t
 
WrS≥edFa˘
;

135 
__IO
 
uöt8_t
 
MaxWrBlockLí
;

136 
__IO
 
uöt8_t
 
WrôeBlockPaP¨tül
;

137 
__IO
 
uöt8_t
 
Re£rved3
;

138 
__IO
 
uöt8_t
 
C⁄ã¡PrŸe˘Aµli
;

139 
__IO
 
uöt8_t
 
FûeF‹m©Grou›
;

140 
__IO
 
uöt8_t
 
C›yFœg
;

141 
__IO
 
uöt8_t
 
PîmWrPrŸe˘
;

142 
__IO
 
uöt8_t
 
TempWrPrŸe˘
;

143 
__IO
 
uöt8_t
 
FûeF‹m©
;

144 
__IO
 
uöt8_t
 
ECC
;

145 
__IO
 
uöt8_t
 
CSD_CRC
;

146 
__IO
 
uöt8_t
 
Re£rved4
;

148 }
	tHAL_SD_CSDTy≥def
;

158 
__IO
 
uöt8_t
 
M™uÁ˘uªrID
;

159 
__IO
 
uöt16_t
 
OEM_AµliID
;

160 
__IO
 
uöt32_t
 
ProdName1
;

161 
__IO
 
uöt8_t
 
ProdName2
;

162 
__IO
 
uöt8_t
 
ProdRev
;

163 
__IO
 
uöt32_t
 
ProdSN
;

164 
__IO
 
uöt8_t
 
Re£rved1
;

165 
__IO
 
uöt16_t
 
M™uÁ˘D©e
;

166 
__IO
 
uöt8_t
 
CID_CRC
;

167 
__IO
 
uöt8_t
 
Re£rved2
;

169 }
	tHAL_SD_CIDTy≥def
;

179 
__IO
 
uöt8_t
 
DAT_BUS_WIDTH
;

180 
__IO
 
uöt8_t
 
SECURED_MODE
;

181 
__IO
 
uöt16_t
 
SD_CARD_TYPE
;

182 
__IO
 
uöt32_t
 
SIZE_OF_PROTECTED_AREA
;

183 
__IO
 
uöt8_t
 
SPEED_CLASS
;

184 
__IO
 
uöt8_t
 
PERFORMANCE_MOVE
;

185 
__IO
 
uöt8_t
 
AU_SIZE
;

186 
__IO
 
uöt16_t
 
ERASE_SIZE
;

187 
__IO
 
uöt8_t
 
ERASE_TIMEOUT
;

188 
__IO
 
uöt8_t
 
ERASE_OFFSET
;

190 }
	tHAL_SD_C¨dSètusTy≥def
;

200 
HAL_SD_CSDTy≥def
 
SD_csd
;

201 
HAL_SD_CIDTy≥def
 
SD_cid
;

202 
uöt64_t
 
C¨dC≠acôy
;

203 
uöt32_t
 
C¨dBlockSize
;

204 
uöt16_t
 
RCA
;

205 
uöt8_t
 
C¨dTy≥
;

207 }
	tHAL_SD_C¨dInfoTy≥def
;

220 
SD_CMD_CRC_FAIL
 = (1),

221 
SD_DATA_CRC_FAIL
 = (2),

222 
SD_CMD_RSP_TIMEOUT
 = (3),

223 
SD_DATA_TIMEOUT
 = (4),

224 
SD_TX_UNDERRUN
 = (5),

225 
SD_RX_OVERRUN
 = (6),

226 
SD_START_BIT_ERR
 = (7),

227 
SD_CMD_OUT_OF_RANGE
 = (8),

228 
SD_ADDR_MISALIGNED
 = (9),

229 
SD_BLOCK_LEN_ERR
 = (10),

230 
SD_ERASE_SEQ_ERR
 = (11),

231 
SD_BAD_ERASE_PARAM
 = (12),

232 
SD_WRITE_PROT_VIOLATION
 = (13),

233 
SD_LOCK_UNLOCK_FAILED
 = (14),

234 
SD_COM_CRC_FAILED
 = (15),

235 
SD_ILLEGAL_CMD
 = (16),

236 
SD_CARD_ECC_FAILED
 = (17),

237 
SD_CC_ERROR
 = (18),

238 
SD_GENERAL_UNKNOWN_ERROR
 = (19),

239 
SD_STREAM_READ_UNDERRUN
 = (20),

240 
SD_STREAM_WRITE_OVERRUN
 = (21),

241 
SD_CID_CSD_OVERWRITE
 = (22),

242 
SD_WP_ERASE_SKIP
 = (23),

243 
SD_CARD_ECC_DISABLED
 = (24),

244 
SD_ERASE_RESET
 = (25),

245 
SD_AKE_SEQ_ERROR
 = (26),

246 
SD_INVALID_VOLTRANGE
 = (27),

247 
SD_ADDR_OUT_OF_RANGE
 = (28),

248 
SD_SWITCH_ERROR
 = (29),

249 
SD_SDIO_DISABLED
 = (30),

250 
SD_SDIO_FUNCTION_BUSY
 = (31),

251 
SD_SDIO_FUNCTION_FAILED
 = (32),

252 
SD_SDIO_UNKNOWN_FUNCTION
 = (33),

257 
SD_INTERNAL_ERROR
 = (34),

258 
SD_NOT_CONFIGURED
 = (35),

259 
SD_REQUEST_PENDING
 = (36),

260 
SD_REQUEST_NOT_APPLICABLE
 = (37),

261 
SD_INVALID_PARAMETER
 = (38),

262 
SD_UNSUPPORTED_FEATURE
 = (39),

263 
SD_UNSUPPORTED_HW
 = (40),

264 
SD_ERROR
 = (41),

265 
SD_OK
 = (0)

267 }
	tHAL_SD_Eº‹Ty≥def
;

277 
SD_TRANSFER_OK
 = 0,

278 
SD_TRANSFER_BUSY
 = 1,

279 
SD_TRANSFER_ERROR
 = 2

281 }
	tHAL_SD_Tøns„rSèãTy≥def
;

291 
SD_CARD_READY
 = ((
uöt32_t
)0x00000001),

292 
SD_CARD_IDENTIFICATION
 = ((
uöt32_t
)0x00000002),

293 
SD_CARD_STANDBY
 = ((
uöt32_t
)0x00000003),

294 
SD_CARD_TRANSFER
 = ((
uöt32_t
)0x00000004),

295 
SD_CARD_SENDING
 = ((
uöt32_t
)0x00000005),

296 
SD_CARD_RECEIVING
 = ((
uöt32_t
)0x00000006),

297 
SD_CARD_PROGRAMMING
 = ((
uöt32_t
)0x00000007),

298 
SD_CARD_DISCONNECTED
 = ((
uöt32_t
)0x00000008),

299 
SD_CARD_ERROR
 = ((
uöt32_t
)0x000000FF)

301 }
	tHAL_SD_C¨dSèãTy≥def
;

311 
SD_READ_SINGLE_BLOCK
 = 0,

312 
SD_READ_MULTIPLE_BLOCK
 = 1,

313 
SD_WRITE_SINGLE_BLOCK
 = 2,

314 
SD_WRITE_MULTIPLE_BLOCK
 = 3

316 }
	tHAL_SD_O≥øti⁄Ty≥def
;

333 
	#SD_CMD_GO_IDLE_STATE
 ((
uöt8_t
)0Ë

	)

334 
	#SD_CMD_SEND_OP_COND
 ((
uöt8_t
)1Ë

	)

335 
	#SD_CMD_ALL_SEND_CID
 ((
uöt8_t
)2Ë

	)

336 
	#SD_CMD_SET_REL_ADDR
 ((
uöt8_t
)3Ë

	)

337 
	#SD_CMD_SET_DSR
 ((
uöt8_t
)4Ë

	)

338 
	#SD_CMD_SDIO_SEN_OP_COND
 ((
uöt8_t
)5Ë

	)

340 
	#SD_CMD_HS_SWITCH
 ((
uöt8_t
)6Ë

	)

341 
	#SD_CMD_SEL_DESEL_CARD
 ((
uöt8_t
)7Ë

	)

342 
	#SD_CMD_HS_SEND_EXT_CSD
 ((
uöt8_t
)8Ë

	)

344 
	#SD_CMD_SEND_CSD
 ((
uöt8_t
)9Ë

	)

345 
	#SD_CMD_SEND_CID
 ((
uöt8_t
)10Ë

	)

346 
	#SD_CMD_READ_DAT_UNTIL_STOP
 ((
uöt8_t
)11Ë

	)

347 
	#SD_CMD_STOP_TRANSMISSION
 ((
uöt8_t
)12Ë

	)

348 
	#SD_CMD_SEND_STATUS
 ((
uöt8_t
)13Ë

	)

349 
	#SD_CMD_HS_BUSTEST_READ
 ((
uöt8_t
)14)

	)

350 
	#SD_CMD_GO_INACTIVE_STATE
 ((
uöt8_t
)15Ë

	)

351 
	#SD_CMD_SET_BLOCKLEN
 ((
uöt8_t
)16Ë

	)

354 
	#SD_CMD_READ_SINGLE_BLOCK
 ((
uöt8_t
)17Ë

	)

356 
	#SD_CMD_READ_MULT_BLOCK
 ((
uöt8_t
)18Ë

	)

358 
	#SD_CMD_HS_BUSTEST_WRITE
 ((
uöt8_t
)19Ë

	)

359 
	#SD_CMD_WRITE_DAT_UNTIL_STOP
 ((
uöt8_t
)20Ë

	)

360 
	#SD_CMD_SET_BLOCK_COUNT
 ((
uöt8_t
)23Ë

	)

361 
	#SD_CMD_WRITE_SINGLE_BLOCK
 ((
uöt8_t
)24Ë

	)

363 
	#SD_CMD_WRITE_MULT_BLOCK
 ((
uöt8_t
)25Ë

	)

364 
	#SD_CMD_PROG_CID
 ((
uöt8_t
)26Ë

	)

365 
	#SD_CMD_PROG_CSD
 ((
uöt8_t
)27Ë

	)

366 
	#SD_CMD_SET_WRITE_PROT
 ((
uöt8_t
)28Ë

	)

367 
	#SD_CMD_CLR_WRITE_PROT
 ((
uöt8_t
)29Ë

	)

368 
	#SD_CMD_SEND_WRITE_PROT
 ((
uöt8_t
)30Ë

	)

369 
	#SD_CMD_SD_ERASE_GRP_START
 ((
uöt8_t
)32Ë

	)

370 
	#SD_CMD_SD_ERASE_GRP_END
 ((
uöt8_t
)33Ë

	)

371 
	#SD_CMD_ERASE_GRP_START
 ((
uöt8_t
)35Ë

	)

373 
	#SD_CMD_ERASE_GRP_END
 ((
uöt8_t
)36Ë

	)

375 
	#SD_CMD_ERASE
 ((
uöt8_t
)38Ë

	)

376 
	#SD_CMD_FAST_IO
 ((
uöt8_t
)39Ë

	)

377 
	#SD_CMD_GO_IRQ_STATE
 ((
uöt8_t
)40Ë

	)

378 
	#SD_CMD_LOCK_UNLOCK
 ((
uöt8_t
)42Ë

	)

380 
	#SD_CMD_APP_CMD
 ((
uöt8_t
)55Ë

	)

382 
	#SD_CMD_GEN_CMD
 ((
uöt8_t
)56Ë

	)

384 
	#SD_CMD_NO_CMD
 ((
uöt8_t
)64)

	)

390 
	#SD_CMD_APP_SD_SET_BUSWIDTH
 ((
uöt8_t
)6Ë

	)

392 
	#SD_CMD_SD_APP_STATUS
 ((
uöt8_t
)13Ë

	)

393 
	#SD_CMD_SD_APP_SEND_NUM_WRITE_BLOCKS
 ((
uöt8_t
)22Ë

	)

395 
	#SD_CMD_SD_APP_OP_COND
 ((
uöt8_t
)41Ë

	)

397 
	#SD_CMD_SD_APP_SET_CLR_CARD_DETECT
 ((
uöt8_t
)42Ë

	)

398 
	#SD_CMD_SD_APP_SEND_SCR
 ((
uöt8_t
)51Ë

	)

399 
	#SD_CMD_SDIO_RW_DIRECT
 ((
uöt8_t
)52Ë

	)

400 
	#SD_CMD_SDIO_RW_EXTENDED
 ((
uöt8_t
)53Ë

	)

406 
	#SD_CMD_SD_APP_GET_MKB
 ((
uöt8_t
)43Ë

	)

407 
	#SD_CMD_SD_APP_GET_MID
 ((
uöt8_t
)44Ë

	)

408 
	#SD_CMD_SD_APP_SET_CER_RN1
 ((
uöt8_t
)45Ë

	)

409 
	#SD_CMD_SD_APP_GET_CER_RN2
 ((
uöt8_t
)46Ë

	)

410 
	#SD_CMD_SD_APP_SET_CER_RES2
 ((
uöt8_t
)47Ë

	)

411 
	#SD_CMD_SD_APP_GET_CER_RES1
 ((
uöt8_t
)48Ë

	)

412 
	#SD_CMD_SD_APP_SECURE_READ_MULTIPLE_BLOCK
 ((
uöt8_t
)18Ë

	)

413 
	#SD_CMD_SD_APP_SECURE_WRITE_MULTIPLE_BLOCK
 ((
uöt8_t
)25Ë

	)

414 
	#SD_CMD_SD_APP_SECURE_ERASE
 ((
uöt8_t
)38Ë

	)

415 
	#SD_CMD_SD_APP_CHANGE_SECURE_AREA
 ((
uöt8_t
)49Ë

	)

416 
	#SD_CMD_SD_APP_SECURE_WRITE_MKB
 ((
uöt8_t
)48Ë

	)

421 
	#STD_CAPACITY_SD_CARD_V1_1
 ((
uöt32_t
)0x00000000)

	)

422 
	#STD_CAPACITY_SD_CARD_V2_0
 ((
uöt32_t
)0x00000001)

	)

423 
	#HIGH_CAPACITY_SD_CARD
 ((
uöt32_t
)0x00000002)

	)

424 
	#MULTIMEDIA_CARD
 ((
uöt32_t
)0x00000003)

	)

425 
	#SECURE_DIGITAL_IO_CARD
 ((
uöt32_t
)0x00000004)

	)

426 
	#HIGH_SPEED_MULTIMEDIA_CARD
 ((
uöt32_t
)0x00000005)

	)

427 
	#SECURE_DIGITAL_IO_COMBO_CARD
 ((
uöt32_t
)0x00000006)

	)

428 
	#HIGH_CAPACITY_MMC_CARD
 ((
uöt32_t
)0x00000007)

	)

443 
	#__HAL_SD_SDIO_ENABLE
(Ë
	`__SDIO_ENABLE
()

	)

449 
	#__HAL_SD_SDIO_DISABLE
(Ë
	`__SDIO_DISABLE
()

	)

455 
	#__HAL_SD_SDIO_DMA_ENABLE
(Ë
	`__SDIO_DMA_ENABLE
()

	)

461 
	#__HAL_SD_SDIO_DMA_DISABLE
(Ë
	`__SDIO_DMA_DISABLE
()

	)

495 
	#__HAL_SD_SDIO_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`__SDIO_ENABLE_IT
((__HANDLE__)->
In°™˚
, (__INTERRUPT__))

	)

529 
	#__HAL_SD_SDIO_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`__SDIO_DISABLE_IT
((__HANDLE__)->
In°™˚
, (__INTERRUPT__))

	)

562 
	#__HAL_SD_SDIO_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë
	`__SDIO_GET_FLAG
((__HANDLE__)->
In°™˚
, (__FLAG__))

	)

584 
	#__HAL_SD_SDIO_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë
	`__SDIO_CLEAR_FLAG
((__HANDLE__)->
In°™˚
, (__FLAG__))

	)

618 
	#__HAL_SD_SDIO_GET_IT
 (
__HANDLE__
, 
__INTERRUPT__
Ë
	`__SDIO_GET_IT
 ((__HANDLE__)->
In°™˚
, __INTERRUPT__)

	)

640 
	#__HAL_SD_SDIO_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`__SDIO_CLEAR_IT
((__HANDLE__)->
In°™˚
, (__INTERRUPT__))

	)

653 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_Inô
(
SD_H™dÀTy≥Def
 *
hsd
, 
HAL_SD_C¨dInfoTy≥def
 *
SDC¨dInfo
);

654 
HAL_SètusTy≥Def
 
	`HAL_SD_DeInô
 (
SD_H™dÀTy≥Def
 *
hsd
);

655 
	`HAL_SD_M•Inô
(
SD_H™dÀTy≥Def
 *
hsd
);

656 
	`HAL_SD_M•DeInô
(
SD_H™dÀTy≥Def
 *
hsd
);

665 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_RódBlocks
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pRódBuf„r
, 
uöt64_t
 
RódAddr
, uöt32_à
BlockSize
, uöt32_à
NumbîOfBlocks
);

666 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_WrôeBlocks
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pWrôeBuf„r
, 
uöt64_t
 
WrôeAddr
, uöt32_à
BlockSize
, uöt32_à
NumbîOfBlocks
);

667 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_Eø£
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt64_t
 
°¨èddr
, uöt64_à
ídaddr
);

670 
	`HAL_SD_IRQH™dÀr
(
SD_H™dÀTy≥Def
 *
hsd
);

673 
	`HAL_SD_DMA_RxC∂tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

674 
	`HAL_SD_DMA_RxEº‹CÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

675 
	`HAL_SD_DMA_TxC∂tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

676 
	`HAL_SD_DMA_TxEº‹CÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

677 
	`HAL_SD_X„rC∂tCÆlback
(
SD_H™dÀTy≥Def
 *
hsd
);

678 
	`HAL_SD_X„rEº‹CÆlback
(
SD_H™dÀTy≥Def
 *
hsd
);

681 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_RódBlocks_DMA
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pRódBuf„r
, 
uöt64_t
 
RódAddr
, uöt32_à
BlockSize
, uöt32_à
NumbîOfBlocks
);

682 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_WrôeBlocks_DMA
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pWrôeBuf„r
, 
uöt64_t
 
WrôeAddr
, uöt32_à
BlockSize
, uöt32_à
NumbîOfBlocks
);

683 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_CheckWrôeO≥øti⁄
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 
Timeout
);

684 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_CheckRódO≥øti⁄
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 
Timeout
);

692 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_Gë_C¨dInfo
(
SD_H™dÀTy≥Def
 *
hsd
, 
HAL_SD_C¨dInfoTy≥def
 *
pC¨dInfo
);

693 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_WideBusO≥øti⁄_C⁄fig
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 
WideMode
);

694 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_St›Tøns„r
(
SD_H™dÀTy≥Def
 *
hsd
);

695 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_HighS≥ed
 (
SD_H™dÀTy≥Def
 *
hsd
);

704 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_SídSDSètus
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pSD°©us
);

705 
HAL_SD_Eº‹Ty≥def
 
	`HAL_SD_GëC¨dSètus
(
SD_H™dÀTy≥Def
 *
hsd
, 
HAL_SD_C¨dSètusTy≥def
 *
pC¨dSètus
);

706 
HAL_SD_Tøns„rSèãTy≥def
 
	`HAL_SD_GëSètus
(
SD_H™dÀTy≥Def
 *
hsd
);

786 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

787 #ifde‡
__˝lu•lus


788 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sdram.h

39 #i‚de‡
__STM32F4xx_HAL_SDRAM_H


40 
	#__STM32F4xx_HAL_SDRAM_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

47 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_Œ_fmc.h
"

70 
HAL_SDRAM_STATE_RESET
 = 0x00,

71 
HAL_SDRAM_STATE_READY
 = 0x01,

72 
HAL_SDRAM_STATE_BUSY
 = 0x02,

73 
HAL_SDRAM_STATE_ERROR
 = 0x03,

74 
HAL_SDRAM_STATE_WRITE_PROTECTED
 = 0x04,

75 
HAL_SDRAM_STATE_PRECHARGED
 = 0x05

77 }
	tHAL_SDRAM_SèãTy≥Def
;

84 
FMC_SDRAM_Ty≥Def
 *
In°™˚
;

86 
FMC_SDRAM_InôTy≥Def
 
Inô
;

88 
__IO
 
HAL_SDRAM_SèãTy≥Def
 
Sèã
;

90 
HAL_LockTy≥Def
 
Lock
;

92 
DMA_H™dÀTy≥Def
 *
hdma
;

94 }
	tSDRAM_H™dÀTy≥Def
;

109 
	#__HAL_SDRAM_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_SDRAM_STATE_RESET
)

	)

124 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Inô
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
FMC_SDRAM_TimögTy≥Def
 *
Timög
);

125 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_DeInô
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

126 
	`HAL_SDRAM_M•Inô
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

127 
	`HAL_SDRAM_M•DeInô
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

129 
	`HAL_SDRAM_IRQH™dÀr
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

130 
	`HAL_SDRAM_Re‰eshEº‹CÆlback
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

131 
	`HAL_SDRAM_DMA_X„rC∂tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

132 
	`HAL_SDRAM_DMA_X„rEº‹CÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

141 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Ród_8b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, 
uöt8_t
 *
pD°Buf„r
, uöt32_à
Buf„rSize
);

142 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Wrôe_8b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, 
uöt8_t
 *
pSrcBuf„r
, uöt32_à
Buf„rSize
);

143 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Ród_16b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pD°Buf„r
, uöt32_à
Buf„rSize
);

144 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Wrôe_16b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pSrcBuf„r
, uöt32_à
Buf„rSize
);

145 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Ród_32b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pD°Buf„r
, uöt32_à
Buf„rSize
);

146 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Wrôe_32b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pSrcBuf„r
, uöt32_à
Buf„rSize
);

148 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Ród_DMA
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 * 
pAddªss
, uöt32_à*
pD°Buf„r
, uöt32_à
Buf„rSize
);

149 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_Wrôe_DMA
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pSrcBuf„r
, uöt32_à
Buf„rSize
);

158 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_WrôePrŸe˘i⁄_E«bÀ
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

159 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_WrôePrŸe˘i⁄_DißbÀ
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

160 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_SídComm™d
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
FMC_SDRAM_Comm™dTy≥Def
 *
Comm™d
, 
uöt32_t
 
Timeout
);

161 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_ProgømRe‰eshR©e
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 
Re‰eshR©e
);

162 
HAL_SètusTy≥Def
 
	`HAL_SDRAM_SëAutoRe‰eshNumbî
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 
AutoRe‰eshNumbî
);

163 
uöt32_t
 
	`HAL_SDRAM_GëModeSètus
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

172 
HAL_SDRAM_SèãTy≥Def
 
	`HAL_SDRAM_GëSèã
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
);

191 #ifde‡
__˝lu•lus


192 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_smartcard.h

39 #i‚de‡
__STM32F4xx_HAL_SMARTCARD_H


40 
	#__STM32F4xx_HAL_SMARTCARD_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
BaudR©e
;

72 
uöt32_t
 
W‹dLígth
;

75 
uöt32_t
 
St›Bôs
;

78 
uöt32_t
 
P¨ôy
;

85 
uöt32_t
 
Mode
;

88 
uöt32_t
 
CLKPﬁ¨ôy
;

91 
uöt32_t
 
CLKPha£
;

94 
uöt32_t
 
CLKLa°Bô
;

98 
uöt32_t
 
PªsˇÀr
;

102 
uöt32_t
 
Gu¨dTime
;

106 
uöt32_t
 
NACKSèã
;

108 }
	tSMARTCARD_InôTy≥Def
;

115 
HAL_SMARTCARD_STATE_RESET
 = 0x00,

116 
HAL_SMARTCARD_STATE_READY
 = 0x01,

117 
HAL_SMARTCARD_STATE_BUSY
 = 0x02,

118 
HAL_SMARTCARD_STATE_BUSY_TX
 = 0x12,

119 
HAL_SMARTCARD_STATE_BUSY_RX
 = 0x22,

120 
HAL_SMARTCARD_STATE_BUSY_TX_RX
 = 0x32,

121 
HAL_SMARTCARD_STATE_TIMEOUT
 = 0x03,

122 
HAL_SMARTCARD_STATE_ERROR
 = 0x04

123 }
	tHAL_SMARTCARD_SèãTy≥Def
;

130 
USART_Ty≥Def
 *
In°™˚
;

132 
SMARTCARD_InôTy≥Def
 
Inô
;

134 
uöt8_t
 *
pTxBuffPå
;

136 
uöt16_t
 
TxX„rSize
;

138 
uöt16_t
 
TxX„rCou¡
;

140 
uöt8_t
 *
pRxBuffPå
;

142 
uöt16_t
 
RxX„rSize
;

144 
uöt16_t
 
RxX„rCou¡
;

146 
DMA_H™dÀTy≥Def
 *
hdm©x
;

148 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

150 
HAL_LockTy≥Def
 
Lock
;

152 
__IO
 
HAL_SMARTCARD_SèãTy≥Def
 
Sèã
;

154 
__IO
 
uöt32_t
 
Eº‹Code
;

156 }
	tSMARTCARD_H™dÀTy≥Def
;

170 
	#HAL_SMARTCARD_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

171 
	#HAL_SMARTCARD_ERROR_PE
 ((
uöt32_t
)0x00000001Ë

	)

172 
	#HAL_SMARTCARD_ERROR_NE
 ((
uöt32_t
)0x00000002Ë

	)

173 
	#HAL_SMARTCARD_ERROR_FE
 ((
uöt32_t
)0x00000004Ë

	)

174 
	#HAL_SMARTCARD_ERROR_ORE
 ((
uöt32_t
)0x00000008Ë

	)

175 
	#HAL_SMARTCARD_ERROR_DMA
 ((
uöt32_t
)0x00000010Ë

	)

183 
	#SMARTCARD_WORDLENGTH_9B
 ((
uöt32_t
)
USART_CR1_M
)

	)

191 
	#SMARTCARD_STOPBITS_0_5
 ((
uöt32_t
)
USART_CR2_STOP_0
)

	)

192 
	#SMARTCARD_STOPBITS_1_5
 ((
uöt32_t
)(
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
))

	)

200 
	#SMARTCARD_PARITY_EVEN
 ((
uöt32_t
)
USART_CR1_PCE
)

	)

201 
	#SMARTCARD_PARITY_ODD
 ((
uöt32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

209 
	#SMARTCARD_MODE_RX
 ((
uöt32_t
)
USART_CR1_RE
)

	)

210 
	#SMARTCARD_MODE_TX
 ((
uöt32_t
)
USART_CR1_TE
)

	)

211 
	#SMARTCARD_MODE_TX_RX
 ((
uöt32_t
)(
USART_CR1_TE
 |
USART_CR1_RE
))

	)

219 
	#SMARTCARD_POLARITY_LOW
 ((
uöt32_t
)0x00000000)

	)

220 
	#SMARTCARD_POLARITY_HIGH
 ((
uöt32_t
)
USART_CR2_CPOL
)

	)

228 
	#SMARTCARD_PHASE_1EDGE
 ((
uöt32_t
)0x00000000)

	)

229 
	#SMARTCARD_PHASE_2EDGE
 ((
uöt32_t
)
USART_CR2_CPHA
)

	)

237 
	#SMARTCARD_LASTBIT_DISABLE
 ((
uöt32_t
)0x00000000)

	)

238 
	#SMARTCARD_LASTBIT_ENABLE
 ((
uöt32_t
)
USART_CR2_LBCL
)

	)

246 
	#SMARTCARD_NACK_ENABLE
 ((
uöt32_t
)
USART_CR3_NACK
)

	)

247 
	#SMARTCARD_NACK_DISABLE
 ((
uöt32_t
)0x00000000)

	)

255 
	#SMARTCARD_DMAREQ_TX
 ((
uöt32_t
)
USART_CR3_DMAT
)

	)

256 
	#SMARTCARD_DMAREQ_RX
 ((
uöt32_t
)
USART_CR3_DMAR
)

	)

264 
	#SMARTCARD_PRESCALER_SYSCLK_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

265 
	#SMARTCARD_PRESCALER_SYSCLK_DIV4
 ((
uöt32_t
)0x00000002Ë

	)

266 
	#SMARTCARD_PRESCALER_SYSCLK_DIV6
 ((
uöt32_t
)0x00000003Ë

	)

267 
	#SMARTCARD_PRESCALER_SYSCLK_DIV8
 ((
uöt32_t
)0x00000004Ë

	)

268 
	#SMARTCARD_PRESCALER_SYSCLK_DIV10
 ((
uöt32_t
)0x00000005Ë

	)

269 
	#SMARTCARD_PRESCALER_SYSCLK_DIV12
 ((
uöt32_t
)0x00000006Ë

	)

270 
	#SMARTCARD_PRESCALER_SYSCLK_DIV14
 ((
uöt32_t
)0x00000007Ë

	)

271 
	#SMARTCARD_PRESCALER_SYSCLK_DIV16
 ((
uöt32_t
)0x00000008Ë

	)

272 
	#SMARTCARD_PRESCALER_SYSCLK_DIV18
 ((
uöt32_t
)0x00000009Ë

	)

273 
	#SMARTCARD_PRESCALER_SYSCLK_DIV20
 ((
uöt32_t
)0x0000000AË

	)

274 
	#SMARTCARD_PRESCALER_SYSCLK_DIV22
 ((
uöt32_t
)0x0000000BË

	)

275 
	#SMARTCARD_PRESCALER_SYSCLK_DIV24
 ((
uöt32_t
)0x0000000CË

	)

276 
	#SMARTCARD_PRESCALER_SYSCLK_DIV26
 ((
uöt32_t
)0x0000000DË

	)

277 
	#SMARTCARD_PRESCALER_SYSCLK_DIV28
 ((
uöt32_t
)0x0000000EË

	)

278 
	#SMARTCARD_PRESCALER_SYSCLK_DIV30
 ((
uöt32_t
)0x0000000FË

	)

279 
	#SMARTCARD_PRESCALER_SYSCLK_DIV32
 ((
uöt32_t
)0x00000010Ë

	)

280 
	#SMARTCARD_PRESCALER_SYSCLK_DIV34
 ((
uöt32_t
)0x00000011Ë

	)

281 
	#SMARTCARD_PRESCALER_SYSCLK_DIV36
 ((
uöt32_t
)0x00000012Ë

	)

282 
	#SMARTCARD_PRESCALER_SYSCLK_DIV38
 ((
uöt32_t
)0x00000013Ë

	)

283 
	#SMARTCARD_PRESCALER_SYSCLK_DIV40
 ((
uöt32_t
)0x00000014Ë

	)

284 
	#SMARTCARD_PRESCALER_SYSCLK_DIV42
 ((
uöt32_t
)0x00000015Ë

	)

285 
	#SMARTCARD_PRESCALER_SYSCLK_DIV44
 ((
uöt32_t
)0x00000016Ë

	)

286 
	#SMARTCARD_PRESCALER_SYSCLK_DIV46
 ((
uöt32_t
)0x00000017Ë

	)

287 
	#SMARTCARD_PRESCALER_SYSCLK_DIV48
 ((
uöt32_t
)0x00000018Ë

	)

288 
	#SMARTCARD_PRESCALER_SYSCLK_DIV50
 ((
uöt32_t
)0x00000019Ë

	)

289 
	#SMARTCARD_PRESCALER_SYSCLK_DIV52
 ((
uöt32_t
)0x0000001AË

	)

290 
	#SMARTCARD_PRESCALER_SYSCLK_DIV54
 ((
uöt32_t
)0x0000001BË

	)

291 
	#SMARTCARD_PRESCALER_SYSCLK_DIV56
 ((
uöt32_t
)0x0000001CË

	)

292 
	#SMARTCARD_PRESCALER_SYSCLK_DIV58
 ((
uöt32_t
)0x0000001DË

	)

293 
	#SMARTCARD_PRESCALER_SYSCLK_DIV60
 ((
uöt32_t
)0x0000001EË

	)

294 
	#SMARTCARD_PRESCALER_SYSCLK_DIV62
 ((
uöt32_t
)0x0000001FË

	)

304 
	#SMARTCARD_FLAG_TXE
 ((
uöt32_t
)0x00000080)

	)

305 
	#SMARTCARD_FLAG_TC
 ((
uöt32_t
)0x00000040)

	)

306 
	#SMARTCARD_FLAG_RXNE
 ((
uöt32_t
)0x00000020)

	)

307 
	#SMARTCARD_FLAG_IDLE
 ((
uöt32_t
)0x00000010)

	)

308 
	#SMARTCARD_FLAG_ORE
 ((
uöt32_t
)0x00000008)

	)

309 
	#SMARTCARD_FLAG_NE
 ((
uöt32_t
)0x00000004)

	)

310 
	#SMARTCARD_FLAG_FE
 ((
uöt32_t
)0x00000002)

	)

311 
	#SMARTCARD_FLAG_PE
 ((
uöt32_t
)0x00000001)

	)

324 
	#SMARTCARD_IT_PE
 ((
uöt32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28 | 
USART_CR1_PEIE
))

	)

325 
	#SMARTCARD_IT_TXE
 ((
uöt32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28 | 
USART_CR1_TXEIE
))

	)

326 
	#SMARTCARD_IT_TC
 ((
uöt32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28 | 
USART_CR1_TCIE
))

	)

327 
	#SMARTCARD_IT_RXNE
 ((
uöt32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28 | 
USART_CR1_RXNEIE
))

	)

328 
	#SMARTCARD_IT_IDLE
 ((
uöt32_t
)(
SMARTCARD_CR1_REG_INDEX
 << 28 | 
USART_CR1_IDLEIE
))

	)

329 
	#SMARTCARD_IT_ERR
 ((
uöt32_t
)(
SMARTCARD_CR3_REG_INDEX
 << 28 | 
USART_CR3_EIE
))

	)

347 
	#__HAL_SMARTCARD_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_SMARTCARD_STATE_RESET
)

	)

352 
	#__HAL_SMARTCARD_FLUSH_DRREGISTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
DR
)

	)

368 
	#__HAL_SMARTCARD_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__FLAG__)Ë=(__FLAG__))

	)

385 
	#__HAL_SMARTCARD_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__FLAG__))

	)

393 
	#__HAL_SMARTCARD_CLEAR_PEFLAG
(
__HANDLE__
) \

395 
__IO
 
uöt32_t
 
tm¥eg
; \

396 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

397 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
DR
; \

398 
	`UNUSED
(
tm¥eg
); \

399 } 0)

	)

407 
	#__HAL_SMARTCARD_CLEAR_FEFLAG
(
__HANDLE__
Ë
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(__HANDLE__)

	)

415 
	#__HAL_SMARTCARD_CLEAR_NEFLAG
(
__HANDLE__
Ë
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(__HANDLE__)

	)

423 
	#__HAL_SMARTCARD_CLEAR_OREFLAG
(
__HANDLE__
Ë
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(__HANDLE__)

	)

431 
	#__HAL_SMARTCARD_CLEAR_IDLEFLAG
(
__HANDLE__
Ë
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(__HANDLE__)

	)

445 
	#__HAL_SMARTCARD_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28Ë=1)? ((__HANDLE__)->
In°™˚
->
CR1
 |((__INTERRUPT__Ë& 
SMARTCARD_IT_MASK
)): \

446 ((
__HANDLE__
)->
In°™˚
->
CR3
 |((
__INTERRUPT__
Ë& 
SMARTCARD_IT_MASK
)))

	)

447 
	#__HAL_SMARTCARD_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28Ë=1)? ((__HANDLE__)->
In°™˚
->
CR1
 &~((__INTERRUPT__Ë& 
SMARTCARD_IT_MASK
)): \

448 ((
__HANDLE__
)->
In°™˚
->
CR3
 &~ ((
__INTERRUPT__
Ë& 
SMARTCARD_IT_MASK
)))

	)

462 
	#__HAL_SMARTCARD_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
Ë(((((__IT__Ë>> 28Ë=1)? (__HANDLE__)->
In°™˚
->
CR1
: (__HANDLE__)->In°™˚->
CR3
Ë& (((
uöt32_t
)(__IT__)Ë& 
SMARTCARD_IT_MASK
))

	)

468 
	#__HAL_SMARTCARD_ONE_BIT_SAMPLE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
|
USART_CR3_ONEBIT
)

	)

474 
	#__HAL_SMARTCARD_ONE_BIT_SAMPLE_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
))

	)

481 
	#__HAL_SMARTCARD_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
USART_CR1_UE
)

	)

488 
	#__HAL_SMARTCARD_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
USART_CR1_UE
)

	)

497 
	#__HAL_SMARTCARD_DMA_REQUEST_ENABLE
(
__HANDLE__
, 
__REQUEST__
Ë((__HANDLE__)->
In°™˚
->
CR3
 |(__REQUEST__))

	)

498 
	#__HAL_SMARTCARD_DMA_REQUEST_DISABLE
(
__HANDLE__
, 
__REQUEST__
Ë((__HANDLE__)->
In°™˚
->
CR3
 &~(__REQUEST__))

	)

513 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_Inô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

514 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_ReInô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

515 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_DeInô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

516 
HAL_SMARTCARD_M•Inô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

517 
HAL_SMARTCARD_M•DeInô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

526 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_Tønsmô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

527 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_Re˚ive
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

528 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_Tønsmô_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

529 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_Re˚ive_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

530 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_Tønsmô_DMA
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

531 
HAL_SètusTy≥Def
 
HAL_SMARTCARD_Re˚ive_DMA
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

532 
HAL_SMARTCARD_IRQH™dÀr
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

533 
HAL_SMARTCARD_TxC∂tCÆlback
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

534 
HAL_SMARTCARD_RxC∂tCÆlback
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

535 
HAL_SMARTCARD_Eº‹CÆlback
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

544 
HAL_SMARTCARD_SèãTy≥Def
 
HAL_SMARTCARD_GëSèã
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

545 
uöt32_t
 
HAL_SMARTCARD_GëEº‹
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

564 
	#SMARTCARD_IT_MASK
 ((
uöt32_t
Ë
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
 | 
USART_CR1_RXNEIE
 | \

565 
USART_CR1_IDLEIE
 | 
USART_CR3_EIE
 )

	)

566 
	#SMARTCARD_DIV
(
_PCLK_
, 
_BAUD_
Ë(((_PCLK_)*25)/(4*(_BAUD_)))

	)

567 
	#SMARTCARD_DIVMANT
(
_PCLK_
, 
_BAUD_
Ë(
	`SMARTCARD_DIV
((_PCLK_), (_BAUD_))/100)

	)

568 
	#SMARTCARD_DIVFRAQ
(
_PCLK_
, 
_BAUD_
Ë(((
	`SMARTCARD_DIV
((_PCLK_), (_BAUD_)Ë- (
	`SMARTCARD_DIVMANT
((_PCLK_), (_BAUD_)Ë* 100)Ë* 16 + 50Ë/ 100)

	)

569 
	#SMARTCARD_BRR
(
_PCLK_
, 
_BAUD_
Ë((
	`SMARTCARD_DIVMANT
((_PCLK_), (_BAUD_)Ë<< 4)|(
	`SMARTCARD_DIVFRAQ
((_PCLK_), (_BAUD_)Ë& 0x0F))

	)

571 
	#SMARTCARD_CR1_REG_INDEX
 1

	)

572 
	#SMARTCARD_CR3_REG_INDEX
 3

	)

581 
	#IS_SMARTCARD_WORD_LENGTH
(
LENGTH
Ë((LENGTHË=
SMARTCARD_WORDLENGTH_9B
)

	)

582 
	#IS_SMARTCARD_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
SMARTCARD_STOPBITS_0_5
) || \

583 ((
STOPBITS
Ë=
SMARTCARD_STOPBITS_1_5
))

	)

584 
	#IS_SMARTCARD_PARITY
(
PARITY
Ë(((PARITYË=
SMARTCARD_PARITY_EVEN
) || \

585 ((
PARITY
Ë=
SMARTCARD_PARITY_ODD
))

	)

586 
	#IS_SMARTCARD_MODE
(
MODE
Ë((((MODEË& (
uöt32_t
)0x0000FFF3Ë=0x00Ë&& ((MODEË!(uöt32_t)0x000000))

	)

587 
	#IS_SMARTCARD_POLARITY
(
CPOL
Ë(((CPOLË=
SMARTCARD_POLARITY_LOW
Ë|| ((CPOLË=
SMARTCARD_POLARITY_HIGH
))

	)

588 
	#IS_SMARTCARD_PHASE
(
CPHA
Ë(((CPHAË=
SMARTCARD_PHASE_1EDGE
Ë|| ((CPHAË=
SMARTCARD_PHASE_2EDGE
))

	)

589 
	#IS_SMARTCARD_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
SMARTCARD_LASTBIT_DISABLE
) || \

590 ((
LASTBIT
Ë=
SMARTCARD_LASTBIT_ENABLE
))

	)

591 
	#IS_SMARTCARD_NACK_STATE
(
NACK
Ë(((NACKË=
SMARTCARD_NACK_ENABLE
) || \

592 ((
NACK
Ë=
SMARTCARD_NACK_DISABLE
))

	)

593 
	#IS_SMARTCARD_BAUDRATE
(
BAUDRATE
Ë((BAUDRATEË< 10500001)

	)

614 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_spdifrx.h

39 #i‚de‡
__STM32F4xx_HAL_SPDIFRX_H


40 
	#__STM32F4xx_HAL_SPDIFRX_H


	)

42 #ifde‡
__˝lu•lus


46 #i‡
deföed
(
STM32F446xx
)

49 
	~"°m32f4xx_hÆ_def.h
"

69 
uöt32_t
 
I≈utSñe˘i⁄
;

72 
uöt32_t
 
Rërõs
;

75 
uöt32_t
 
WaôF‹A˘ivôy
;

78 
uöt32_t
 
Ch™√lSñe˘i⁄
;

81 
uöt32_t
 
D©aF‹m©
;

84 
uöt32_t
 
SãªoMode
;

87 
uöt32_t
 
PªambÀTy≥Mask
;

90 
uöt32_t
 
Ch™√lSètusMask
;

93 
uöt32_t
 
VÆidôyBôMask
;

96 
uöt32_t
 
P¨ôyEº‹Mask
;

99 }
	tSPDIFRX_InôTy≥Def
;

106 
uöt32_t
 
	mD©aF‹m©
;

109 
uöt32_t
 
	mSãªoMode
;

112 
uöt32_t
 
	mPªambÀTy≥Mask
;

115 
uöt32_t
 
	mCh™√lSètusMask
;

118 
uöt32_t
 
	mVÆidôyBôMask
;

121 
uöt32_t
 
	mP¨ôyEº‹Mask
;

124 }
	tSPDIFRX_SëD©aF‹m©Ty≥Def
;

131 
	mHAL_SPDIFRX_STATE_RESET
 = 0x00,

132 
	mHAL_SPDIFRX_STATE_READY
 = 0x01,

133 
	mHAL_SPDIFRX_STATE_BUSY
 = 0x02,

134 
	mHAL_SPDIFRX_STATE_BUSY_RX
 = 0x03,

135 
	mHAL_SPDIFRX_STATE_BUSY_CX
 = 0x04,

136 
	mHAL_SPDIFRX_STATE_ERROR
 = 0x07

137 }
	tHAL_SPDIFRX_SèãTy≥Def
;

144 
SPDIFRX_Ty≥Def
 *
	mIn°™˚
;

146 
SPDIFRX_InôTy≥Def
 
	mInô
;

148 
uöt32_t
 *
	mpRxBuffPå
;

150 
uöt32_t
 *
	mpCsBuffPå
;

152 
__IO
 
uöt16_t
 
	mRxX„rSize
;

154 
__IO
 
uöt16_t
 
	mRxX„rCou¡
;

161 
__IO
 
uöt16_t
 
	mCsX„rSize
;

163 
__IO
 
uöt16_t
 
	mCsX„rCou¡
;

170 
DMA_H™dÀTy≥Def
 *
	mhdmaCsRx
;

172 
DMA_H™dÀTy≥Def
 *
	mhdmaDrRx
;

174 
__IO
 
HAL_LockTy≥Def
 
	mLock
;

176 
__IO
 
HAL_SPDIFRX_SèãTy≥Def
 
	mSèã
;

178 
__IO
 
uöt32_t
 
	mEº‹Code
;

180 }
	tSPDIFRX_H™dÀTy≥Def
;

192 
	#HAL_SPDIFRX_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

193 
	#HAL_SPDIFRX_ERROR_TIMEOUT
 ((
uöt32_t
)0x00000001Ë

	)

194 
	#HAL_SPDIFRX_ERROR_OVR
 ((
uöt32_t
)0x00000002Ë

	)

195 
	#HAL_SPDIFRX_ERROR_PE
 ((
uöt32_t
)0x00000004Ë

	)

196 
	#HAL_SPDIFRX_ERROR_DMA
 ((
uöt32_t
)0x00000008Ë

	)

197 
	#HAL_SPDIFRX_ERROR_UNKNOWN
 ((
uöt32_t
)0x00000010Ë

	)

205 
	#SPDIFRX_INPUT_IN0
 ((
uöt32_t
)0x00000000)

	)

206 
	#SPDIFRX_INPUT_IN1
 ((
uöt32_t
)0x00010000)

	)

207 
	#SPDIFRX_INPUT_IN2
 ((
uöt32_t
)0x00020000)

	)

208 
	#SPDIFRX_INPUT_IN3
 ((
uöt32_t
)0x00030000)

	)

216 
	#SPDIFRX_MAXRETRIES_NONE
 ((
uöt32_t
)0x00000000)

	)

217 
	#SPDIFRX_MAXRETRIES_3
 ((
uöt32_t
)0x00001000)

	)

218 
	#SPDIFRX_MAXRETRIES_15
 ((
uöt32_t
)0x00002000)

	)

219 
	#SPDIFRX_MAXRETRIES_63
 ((
uöt32_t
)0x00003000)

	)

227 
	#SPDIFRX_WAITFORACTIVITY_OFF
 ((
uöt32_t
)0x00000000)

	)

228 
	#SPDIFRX_WAITFORACTIVITY_ON
 ((
uöt32_t
)
SPDIFRX_CR_WFA
)

	)

236 
	#SPDIFRX_PREAMBLETYPEMASK_OFF
 ((
uöt32_t
)0x00000000)

	)

237 
	#SPDIFRX_PREAMBLETYPEMASK_ON
 ((
uöt32_t
)
SPDIFRX_CR_PTMSK
)

	)

245 
	#SPDIFRX_CHANNELSTATUS_OFF
 ((
uöt32_t
)0x00000000Ë

	)

246 
	#SPDIFRX_CHANNELSTATUS_ON
 ((
uöt32_t
)
SPDIFRX_CR_CUMSK
Ë

	)

254 
	#SPDIFRX_VALIDITYMASK_OFF
 ((
uöt32_t
)0x00000000)

	)

255 
	#SPDIFRX_VALIDITYMASK_ON
 ((
uöt32_t
)
SPDIFRX_CR_VMSK
)

	)

263 
	#SPDIFRX_PARITYERRORMASK_OFF
 ((
uöt32_t
)0x00000000)

	)

264 
	#SPDIFRX_PARITYERRORMASK_ON
 ((
uöt32_t
)
SPDIFRX_CR_PMSK
)

	)

272 
	#SPDIFRX_CHANNEL_A
 ((
uöt32_t
)0x00000000)

	)

273 
	#SPDIFRX_CHANNEL_B
 ((
uöt32_t
)
SPDIFRX_CR_CHSEL
)

	)

281 
	#SPDIFRX_DATAFORMAT_LSB
 ((
uöt32_t
)0x00000000)

	)

282 
	#SPDIFRX_DATAFORMAT_MSB
 ((
uöt32_t
)0x00000010)

	)

283 
	#SPDIFRX_DATAFORMAT_32BITS
 ((
uöt32_t
)0x00000020)

	)

291 
	#SPDIFRX_STEREOMODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

292 
	#SPDIFRX_STEREOMODE_ENABLE
 ((
uöt32_t
)
SPDIFRX_CR_RXSTEO
)

	)

301 
	#SPDIFRX_STATE_IDLE
 ((
uöt32_t
)0xFFFFFFFC)

	)

302 
	#SPDIFRX_STATE_SYNC
 ((
uöt32_t
)0x00000001)

	)

303 
	#SPDIFRX_STATE_RCV
 ((
uöt32_t
)
SPDIFRX_CR_SPDIFEN
)

	)

311 
	#SPDIFRX_IT_RXNE
 ((
uöt32_t
)
SPDIFRX_IMR_RXNEIE
)

	)

312 
	#SPDIFRX_IT_CSRNE
 ((
uöt32_t
)
SPDIFRX_IMR_CSRNEIE
)

	)

313 
	#SPDIFRX_IT_PERRIE
 ((
uöt32_t
)
SPDIFRX_IMR_PERRIE
)

	)

314 
	#SPDIFRX_IT_OVRIE
 ((
uöt32_t
)
SPDIFRX_IMR_OVRIE
)

	)

315 
	#SPDIFRX_IT_SBLKIE
 ((
uöt32_t
)
SPDIFRX_IMR_SBLKIE
)

	)

316 
	#SPDIFRX_IT_SYNCDIE
 ((
uöt32_t
)
SPDIFRX_IMR_SYNCDIE
)

	)

317 
	#SPDIFRX_IT_IFEIE
 ((
uöt32_t
)
SPDIFRX_IMR_IFEIE
 )

	)

325 
	#SPDIFRX_FLAG_RXNE
 ((
uöt32_t
)
SPDIFRX_SR_RXNE
)

	)

326 
	#SPDIFRX_FLAG_CSRNE
 ((
uöt32_t
)
SPDIFRX_SR_CSRNE
)

	)

327 
	#SPDIFRX_FLAG_PERR
 ((
uöt32_t
)
SPDIFRX_SR_PERR
)

	)

328 
	#SPDIFRX_FLAG_OVR
 ((
uöt32_t
)
SPDIFRX_SR_OVR
)

	)

329 
	#SPDIFRX_FLAG_SBD
 ((
uöt32_t
)
SPDIFRX_SR_SBD
)

	)

330 
	#SPDIFRX_FLAG_SYNCD
 ((
uöt32_t
)
SPDIFRX_SR_SYNCD
)

	)

331 
	#SPDIFRX_FLAG_FERR
 ((
uöt32_t
)
SPDIFRX_SR_FERR
)

	)

332 
	#SPDIFRX_FLAG_SERR
 ((
uöt32_t
)
SPDIFRX_SR_SERR
)

	)

333 
	#SPDIFRX_FLAG_TERR
 ((
uöt32_t
)
SPDIFRX_SR_TERR
)

	)

351 
	#__HAL_SPDIFRX_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = (
uöt16_t
)
SPDIFRX_CR_SPDIFEN
)

	)

357 
	#__HAL_SPDIFRX_IDLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 &
SPDIFRX_STATE_IDLE
)

	)

363 
	#__HAL_SPDIFRX_SYNC
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
SPDIFRX_STATE_SYNC
)

	)

370 
	#__HAL_SPDIFRX_RCV
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR
 |
SPDIFRX_STATE_RCV
)

	)

386 
	#__HAL_SPDIFRX_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IMR
 |(__INTERRUPT__))

	)

387 
	#__HAL_SPDIFRX_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
IMR
 &(
uöt16_t
)(~(__INTERRUPT__)))

	)

402 
	#__HAL_SPDIFRX_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
IMR
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

419 
	#__HAL_SPDIFRX_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((__HANDLE__)->
In°™˚
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

432 
	#__HAL_SPDIFRX_CLEAR_IT
(
__HANDLE__
, 
__IT_CLEAR__
Ë((__HANDLE__)->
In°™˚
->
IFCR
 = (
uöt32_t
)(__IT_CLEAR__))

	)

447 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_Inô
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

448 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_DeInô
 (
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

449 
HAL_SPDIFRX_M•Inô
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

450 
HAL_SPDIFRX_M•DeInô
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

451 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_SëD©aF‹m©
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
SPDIFRX_SëD©aF‹m©Ty≥Def
 
sD©aF‹m©
);

461 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_Re˚iveD©aFlow
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
, uöt32_à
Timeout
);

462 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_Re˚iveC⁄åﬁFlow
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
, uöt32_à
Timeout
);

465 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_Re˚iveC⁄åﬁFlow_IT
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
);

466 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_Re˚iveD©aFlow_IT
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
);

467 
HAL_SPDIFRX_IRQH™dÀr
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

470 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_Re˚iveC⁄åﬁFlow_DMA
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
);

471 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_Re˚iveD©aFlow_DMA
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
);

473 
HAL_SètusTy≥Def
 
HAL_SPDIFRX_DMASt›
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

476 
HAL_SPDIFRX_RxHÆfC∂tCÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

477 
HAL_SPDIFRX_RxC∂tCÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

478 
HAL_SPDIFRX_Eº‹CÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

479 
HAL_SPDIFRX_CxHÆfC∂tCÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

480 
HAL_SPDIFRX_CxC∂tCÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

489 
HAL_SPDIFRX_SèãTy≥Def
 
HAL_SPDIFRX_GëSèã
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

490 
uöt32_t
 
HAL_SPDIFRX_GëEº‹
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

505 
	#IS_SPDIFRX_INPUT_SELECT
(
INPUT
Ë(((INPUTË=
SPDIFRX_INPUT_IN1
) || \

506 ((
INPUT
Ë=
SPDIFRX_INPUT_IN2
) || \

507 ((
INPUT
Ë=
SPDIFRX_INPUT_IN3
) || \

508 ((
INPUT
Ë=
SPDIFRX_INPUT_IN0
))

	)

509 
	#IS_SPDIFRX_MAX_RETRIES
(
RET
Ë(((RETË=
SPDIFRX_MAXRETRIES_NONE
) || \

510 ((
RET
Ë=
SPDIFRX_MAXRETRIES_3
) || \

511 ((
RET
Ë=
SPDIFRX_MAXRETRIES_15
) || \

512 ((
RET
Ë=
SPDIFRX_MAXRETRIES_63
))

	)

513 
	#IS_SPDIFRX_WAIT_FOR_ACTIVITY
(
VAL
Ë(((VALË=
SPDIFRX_WAITFORACTIVITY_ON
) || \

514 ((
VAL
Ë=
SPDIFRX_WAITFORACTIVITY_OFF
))

	)

515 
	#IS_PREAMBLE_TYPE_MASK
(
VAL
Ë(((VALË=
SPDIFRX_PREAMBLETYPEMASK_ON
) || \

516 ((
VAL
Ë=
SPDIFRX_PREAMBLETYPEMASK_OFF
))

	)

517 
	#IS_VALIDITY_MASK
(
VAL
Ë(((VALË=
SPDIFRX_VALIDITYMASK_OFF
) || \

518 ((
VAL
Ë=
SPDIFRX_VALIDITYMASK_ON
))

	)

519 
	#IS_PARITY_ERROR_MASK
(
VAL
Ë(((VALË=
SPDIFRX_PARITYERRORMASK_OFF
) || \

520 ((
VAL
Ë=
SPDIFRX_PARITYERRORMASK_ON
))

	)

521 
	#IS_SPDIFRX_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
SPDIFRX_CHANNEL_A
) || \

522 ((
CHANNEL
Ë=
SPDIFRX_CHANNEL_B
))

	)

523 
	#IS_SPDIFRX_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
SPDIFRX_DATAFORMAT_LSB
) || \

524 ((
FORMAT
Ë=
SPDIFRX_DATAFORMAT_MSB
) || \

525 ((
FORMAT
Ë=
SPDIFRX_DATAFORMAT_32BITS
))

	)

526 
	#IS_STEREO_MODE
(
MODE
Ë(((MODEË=
SPDIFRX_STEREOMODE_DISABLE
) || \

527 ((
MODE
Ë=
SPDIFRX_STEREOMODE_ENABLE
))

	)

529 
	#IS_CHANNEL_STATUS_MASK
(
VAL
Ë(((VALË=
SPDIFRX_CHANNELSTATUS_ON
) || \

530 ((
VAL
Ë=
SPDIFRX_CHANNELSTATUS_OFF
))

	)

552 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_spi.h

39 #i‚de‡
__STM32F4xx_HAL_SPI_H


40 
	#__STM32F4xx_HAL_SPI_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
Mode
;

70 
uöt32_t
 
Dúe˘i⁄
;

73 
uöt32_t
 
D©aSize
;

76 
uöt32_t
 
CLKPﬁ¨ôy
;

79 
uöt32_t
 
CLKPha£
;

82 
uöt32_t
 
NSS
;

86 
uöt32_t
 
BaudR©ePªsˇÀr
;

92 
uöt32_t
 
Fú°Bô
;

95 
uöt32_t
 
TIMode
;

98 
uöt32_t
 
CRCCÆcuœti⁄
;

101 
uöt32_t
 
CRCPﬁynomül
;

104 }
	tSPI_InôTy≥Def
;

111 
HAL_SPI_STATE_RESET
 = 0x00,

112 
HAL_SPI_STATE_READY
 = 0x01,

113 
HAL_SPI_STATE_BUSY
 = 0x02,

114 
HAL_SPI_STATE_BUSY_TX
 = 0x12,

115 
HAL_SPI_STATE_BUSY_RX
 = 0x22,

116 
HAL_SPI_STATE_BUSY_TX_RX
 = 0x32,

117 
HAL_SPI_STATE_ERROR
 = 0x03

119 }
	tHAL_SPI_SèãTy≥Def
;

124 
	s__SPI_H™dÀTy≥Def


126 
SPI_Ty≥Def
 *
In°™˚
;

128 
SPI_InôTy≥Def
 
Inô
;

130 
uöt8_t
 *
pTxBuffPå
;

132 
uöt16_t
 
TxX„rSize
;

134 
uöt16_t
 
TxX„rCou¡
;

136 
uöt8_t
 *
pRxBuffPå
;

138 
uöt16_t
 
RxX„rSize
;

140 
uöt16_t
 
RxX„rCou¡
;

142 
DMA_H™dÀTy≥Def
 *
hdm©x
;

144 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

146 (*
RxISR
)(
__SPI_H™dÀTy≥Def
 * 
h•i
);

148 (*
TxISR
)(
__SPI_H™dÀTy≥Def
 * 
h•i
);

150 
HAL_LockTy≥Def
 
Lock
;

152 
__IO
 
HAL_SPI_SèãTy≥Def
 
Sèã
;

154 
__IO
 
uöt32_t
 
Eº‹Code
;

156 }
	tSPI_H™dÀTy≥Def
;

170 
	#HAL_SPI_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

171 
	#HAL_SPI_ERROR_MODF
 ((
uöt32_t
)0x00000001Ë

	)

172 
	#HAL_SPI_ERROR_CRC
 ((
uöt32_t
)0x00000002Ë

	)

173 
	#HAL_SPI_ERROR_OVR
 ((
uöt32_t
)0x00000004Ë

	)

174 
	#HAL_SPI_ERROR_FRE
 ((
uöt32_t
)0x00000008Ë

	)

175 
	#HAL_SPI_ERROR_DMA
 ((
uöt32_t
)0x00000010Ë

	)

176 
	#HAL_SPI_ERROR_FLAG
 ((
uöt32_t
)0x00000020Ë

	)

184 
	#SPI_MODE_SLAVE
 ((
uöt32_t
)0x00000000)

	)

185 
	#SPI_MODE_MASTER
 (
SPI_CR1_MSTR
 | 
SPI_CR1_SSI
)

	)

193 
	#SPI_DIRECTION_2LINES
 ((
uöt32_t
)0x00000000)

	)

194 
	#SPI_DIRECTION_2LINES_RXONLY
 
SPI_CR1_RXONLY


	)

195 
	#SPI_DIRECTION_1LINE
 
SPI_CR1_BIDIMODE


	)

203 
	#SPI_DATASIZE_8BIT
 ((
uöt32_t
)0x00000000)

	)

204 
	#SPI_DATASIZE_16BIT
 
SPI_CR1_DFF


	)

212 
	#SPI_POLARITY_LOW
 ((
uöt32_t
)0x00000000)

	)

213 
	#SPI_POLARITY_HIGH
 
SPI_CR1_CPOL


	)

221 
	#SPI_PHASE_1EDGE
 ((
uöt32_t
)0x00000000)

	)

222 
	#SPI_PHASE_2EDGE
 
SPI_CR1_CPHA


	)

230 
	#SPI_NSS_SOFT
 
SPI_CR1_SSM


	)

231 
	#SPI_NSS_HARD_INPUT
 ((
uöt32_t
)0x00000000)

	)

232 
	#SPI_NSS_HARD_OUTPUT
 ((
uöt32_t
)0x00040000)

	)

240 
	#SPI_BAUDRATEPRESCALER_2
 ((
uöt32_t
)0x00000000)

	)

241 
	#SPI_BAUDRATEPRESCALER_4
 ((
uöt32_t
)0x00000008)

	)

242 
	#SPI_BAUDRATEPRESCALER_8
 ((
uöt32_t
)0x00000010)

	)

243 
	#SPI_BAUDRATEPRESCALER_16
 ((
uöt32_t
)0x00000018)

	)

244 
	#SPI_BAUDRATEPRESCALER_32
 ((
uöt32_t
)0x00000020)

	)

245 
	#SPI_BAUDRATEPRESCALER_64
 ((
uöt32_t
)0x00000028)

	)

246 
	#SPI_BAUDRATEPRESCALER_128
 ((
uöt32_t
)0x00000030)

	)

247 
	#SPI_BAUDRATEPRESCALER_256
 ((
uöt32_t
)0x00000038)

	)

255 
	#SPI_FIRSTBIT_MSB
 ((
uöt32_t
)0x00000000)

	)

256 
	#SPI_FIRSTBIT_LSB
 
SPI_CR1_LSBFIRST


	)

264 
	#SPI_TIMODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

265 
	#SPI_TIMODE_ENABLE
 
SPI_CR2_FRF


	)

273 
	#SPI_CRCCALCULATION_DISABLE
 ((
uöt32_t
)0x00000000)

	)

274 
	#SPI_CRCCALCULATION_ENABLE
 
SPI_CR1_CRCEN


	)

282 
	#SPI_IT_TXE
 
SPI_CR2_TXEIE


	)

283 
	#SPI_IT_RXNE
 
SPI_CR2_RXNEIE


	)

284 
	#SPI_IT_ERR
 
SPI_CR2_ERRIE


	)

292 
	#SPI_FLAG_RXNE
 
SPI_SR_RXNE


	)

293 
	#SPI_FLAG_TXE
 
SPI_SR_TXE


	)

294 
	#SPI_FLAG_CRCERR
 
SPI_SR_CRCERR


	)

295 
	#SPI_FLAG_MODF
 
SPI_SR_MODF


	)

296 
	#SPI_FLAG_OVR
 
SPI_SR_OVR


	)

297 
	#SPI_FLAG_BSY
 
SPI_SR_BSY


	)

298 
	#SPI_FLAG_FRE
 
SPI_SR_FRE


	)

316 
	#__HAL_SPI_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_SPI_STATE_RESET
)

	)

328 
	#__HAL_SPI_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR2
 |(__INTERRUPT__))

	)

329 
	#__HAL_SPI_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
CR2
 &(~(__INTERRUPT__)))

	)

341 
	#__HAL_SPI_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CR2
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

357 
	#__HAL_SPI_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((__HANDLE__)->
In°™˚
->
SR
Ë& (__FLAG__)Ë=(__FLAG__))

	)

364 
	#__HAL_SPI_CLEAR_CRCERRFLAG
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(
SPI_FLAG_CRCERR
))

	)

371 
	#__HAL_SPI_CLEAR_MODFFLAG
(
__HANDLE__
) \

373 
__IO
 
uöt32_t
 
tm¥eg
; \

374 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

375 (
__HANDLE__
)->
In°™˚
->
CR1
 &(~
SPI_CR1_SPE
); \

376 
	`UNUSED
(
tm¥eg
); \

377 } 0)

	)

384 
	#__HAL_SPI_CLEAR_OVRFLAG
(
__HANDLE__
) \

386 
__IO
 
uöt32_t
 
tm¥eg
; \

387 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
DR
; \

388 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

389 
	`UNUSED
(
tm¥eg
); \

390 } 0)

	)

397 
	#__HAL_SPI_CLEAR_FREFLAG
(
__HANDLE__
) \

399 
__IO
 
uöt32_t
 
tm¥eg
; \

400 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

401 
	`UNUSED
(
tm¥eg
); \

402 }0)

	)

408 
	#__HAL_SPI_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
SPI_CR1_SPE
)

	)

414 
	#__HAL_SPI_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
SPI_CR1_SPE
)

	)

428 
HAL_SètusTy≥Def
 
HAL_SPI_Inô
(
SPI_H™dÀTy≥Def
 *
h•i
);

429 
HAL_SètusTy≥Def
 
HAL_SPI_DeInô
 (
SPI_H™dÀTy≥Def
 *
h•i
);

430 
HAL_SPI_M•Inô
(
SPI_H™dÀTy≥Def
 *
h•i
);

431 
HAL_SPI_M•DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
);

440 
HAL_SètusTy≥Def
 
HAL_SPI_Tønsmô
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

441 
HAL_SètusTy≥Def
 
HAL_SPI_Re˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

442 
HAL_SètusTy≥Def
 
HAL_SPI_TønsmôRe˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

443 
HAL_SètusTy≥Def
 
HAL_SPI_Tønsmô_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

444 
HAL_SètusTy≥Def
 
HAL_SPI_Re˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

445 
HAL_SètusTy≥Def
 
HAL_SPI_TønsmôRe˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
);

446 
HAL_SètusTy≥Def
 
HAL_SPI_Tønsmô_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

447 
HAL_SètusTy≥Def
 
HAL_SPI_Re˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

448 
HAL_SètusTy≥Def
 
HAL_SPI_TønsmôRe˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
);

449 
HAL_SètusTy≥Def
 
HAL_SPI_DMAPau£
(
SPI_H™dÀTy≥Def
 *
h•i
);

450 
HAL_SètusTy≥Def
 
HAL_SPI_DMAResume
(
SPI_H™dÀTy≥Def
 *
h•i
);

451 
HAL_SètusTy≥Def
 
HAL_SPI_DMASt›
(
SPI_H™dÀTy≥Def
 *
h•i
);

453 
HAL_SPI_IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
);

454 
HAL_SPI_TxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

455 
HAL_SPI_RxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

456 
HAL_SPI_TxRxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

457 
HAL_SPI_Eº‹CÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

458 
HAL_SPI_TxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

459 
HAL_SPI_RxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

460 
HAL_SPI_TxRxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
);

469 
HAL_SPI_SèãTy≥Def
 
HAL_SPI_GëSèã
(
SPI_H™dÀTy≥Def
 *
h•i
);

470 
uöt32_t
 
HAL_SPI_GëEº‹
(
SPI_H™dÀTy≥Def
 *
h•i
);

495 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_MODE_SLAVE
) || \

496 ((
MODE
Ë=
SPI_MODE_MASTER
))

	)

499 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_DIRECTION_2LINES
) || \

500 ((
MODE
Ë=
SPI_DIRECTION_2LINES_RXONLY
) || \

501 ((
MODE
Ë=
SPI_DIRECTION_1LINE
))

	)

503 
	#IS_SPI_DIRECTION_2LINES_OR_1LINE
(
MODE
Ë(((MODEË=
SPI_DIRECTION_2LINES
) || \

504 ((
MODE
Ë=
SPI_DIRECTION_1LINE
))

	)

506 
	#IS_SPI_DIRECTION_2LINES
(
MODE
Ë((MODEË=
SPI_DIRECTION_2LINES
)

	)

508 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_DATASIZE_16BIT
) || \

509 ((
DATASIZE
Ë=
SPI_DATASIZE_8BIT
))

	)

511 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_POLARITY_LOW
) || \

512 ((
CPOL
Ë=
SPI_POLARITY_HIGH
))

	)

514 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_PHASE_1EDGE
) || \

515 ((
CPHA
Ë=
SPI_PHASE_2EDGE
))

	)

517 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_SOFT
) || \

518 ((
NSS
Ë=
SPI_NSS_HARD_INPUT
) || \

519 ((
NSS
Ë=
SPI_NSS_HARD_OUTPUT
))

	)

521 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BAUDRATEPRESCALER_2
) || \

522 ((
PRESCALER
Ë=
SPI_BAUDRATEPRESCALER_4
) || \

523 ((
PRESCALER
Ë=
SPI_BAUDRATEPRESCALER_8
) || \

524 ((
PRESCALER
Ë=
SPI_BAUDRATEPRESCALER_16
) || \

525 ((
PRESCALER
Ë=
SPI_BAUDRATEPRESCALER_32
) || \

526 ((
PRESCALER
Ë=
SPI_BAUDRATEPRESCALER_64
) || \

527 ((
PRESCALER
Ë=
SPI_BAUDRATEPRESCALER_128
) || \

528 ((
PRESCALER
Ë=
SPI_BAUDRATEPRESCALER_256
))

	)

530 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_FIRSTBIT_MSB
) || \

531 ((
BIT
Ë=
SPI_FIRSTBIT_LSB
))

	)

533 
	#IS_SPI_TIMODE
(
MODE
Ë(((MODEË=
SPI_TIMODE_DISABLE
) || \

534 ((
MODE
Ë=
SPI_TIMODE_ENABLE
))

	)

536 
	#IS_SPI_CRC_CALCULATION
(
CALCULATION
Ë(((CALCULATIONË=
SPI_CRCCALCULATION_DISABLE
) || \

537 ((
CALCULATION
Ë=
SPI_CRCCALCULATION_ENABLE
))

	)

539 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë(((POLYNOMIALË>0x1Ë&& ((POLYNOMIALË<0xFFFF))

	)

541 
	#SPI_1LINE_TX
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
SPI_CR1_BIDIOE
)

	)

543 
	#SPI_1LINE_RX
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
SPI_CR1_BIDIOE
)

	)

545 
	#SPI_RESET_CRC
(
__HANDLE__
Ëdo{(__HANDLE__)->
In°™˚
->
CR1
 &(~
SPI_CR1_CRCEN
);\

546 (
__HANDLE__
)->
In°™˚
->
CR1
 |
SPI_CR1_CRCEN
;}0)

	)

569 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sram.h

39 #i‚de‡
__STM32F4xx_HAL_SRAM_H


40 
	#__STM32F4xx_HAL_SRAM_H


	)

42 #ifde‡
__˝lu•lus


47 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
)|| deföed(
STM32F417xx
)

48 
	~"°m32f4xx_Œ_fsmc.h
"

51 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

52 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

53 
	~"°m32f4xx_Œ_fmc.h
"

61 #i‡
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

62 
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

63 
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

79 
HAL_SRAM_STATE_RESET
 = 0x00,

80 
HAL_SRAM_STATE_READY
 = 0x01,

81 
HAL_SRAM_STATE_BUSY
 = 0x02,

82 
HAL_SRAM_STATE_ERROR
 = 0x03,

83 
HAL_SRAM_STATE_PROTECTED
 = 0x04

85 }
	tHAL_SRAM_SèãTy≥Def
;

92 
FMC_NORSRAM_Ty≥Def
 *
In°™˚
;

94 
FMC_NORSRAM_EXTENDED_Ty≥Def
 *
Exãnded
;

96 
FMC_NORSRAM_InôTy≥Def
 
Inô
;

98 
HAL_LockTy≥Def
 
Lock
;

100 
__IO
 
HAL_SRAM_SèãTy≥Def
 
Sèã
;

102 
DMA_H™dÀTy≥Def
 *
hdma
;

104 }
	tSRAM_H™dÀTy≥Def
;

120 
	#__HAL_SRAM_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_SRAM_STATE_RESET
)

	)

135 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Inô
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
FMC_NORSRAM_TimögTy≥Def
 *
Timög
, FMC_NORSRAM_TimögTy≥De‡*
ExtTimög
);

136 
HAL_SètusTy≥Def
 
	`HAL_SRAM_DeInô
(
SRAM_H™dÀTy≥Def
 *
h§am
);

137 
	`HAL_SRAM_M•Inô
(
SRAM_H™dÀTy≥Def
 *
h§am
);

138 
	`HAL_SRAM_M•DeInô
(
SRAM_H™dÀTy≥Def
 *
h§am
);

140 
	`HAL_SRAM_DMA_X„rC∂tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

141 
	`HAL_SRAM_DMA_X„rEº‹CÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
);

150 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Ród_8b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, 
uöt8_t
 *
pD°Buf„r
, uöt32_à
Buf„rSize
);

151 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Wrôe_8b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, 
uöt8_t
 *
pSrcBuf„r
, uöt32_à
Buf„rSize
);

152 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Ród_16b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pD°Buf„r
, uöt32_à
Buf„rSize
);

153 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Wrôe_16b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pSrcBuf„r
, uöt32_à
Buf„rSize
);

154 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Ród_32b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pD°Buf„r
, uöt32_à
Buf„rSize
);

155 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Wrôe_32b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pSrcBuf„r
, uöt32_à
Buf„rSize
);

156 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Ród_DMA
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pD°Buf„r
, uöt32_à
Buf„rSize
);

157 
HAL_SètusTy≥Def
 
	`HAL_SRAM_Wrôe_DMA
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pSrcBuf„r
, uöt32_à
Buf„rSize
);

166 
HAL_SètusTy≥Def
 
	`HAL_SRAM_WrôeO≥øti⁄_E«bÀ
(
SRAM_H™dÀTy≥Def
 *
h§am
);

167 
HAL_SètusTy≥Def
 
	`HAL_SRAM_WrôeO≥øti⁄_DißbÀ
(
SRAM_H™dÀTy≥Def
 *
h§am
);

176 
HAL_SRAM_SèãTy≥Def
 
	`HAL_SRAM_GëSèã
(
SRAM_H™dÀTy≥Def
 *
h§am
);

195 
STM32F429xx
 || 
STM32F439xx
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

199 #ifde‡
__˝lu•lus


200 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_tim.h

39 #i‚de‡
__STM32F4xx_HAL_TIM_H


40 
	#__STM32F4xx_HAL_TIM_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
PªsˇÀr
;

70 
uöt32_t
 
Cou¡îMode
;

73 
uöt32_t
 
Pîiod
;

77 
uöt32_t
 
ClockDivisi⁄
;

80 
uöt32_t
 
Rïëôi⁄Cou¡î
;

88 } 
	tTIM_Ba£_InôTy≥Def
;

96 
uöt32_t
 
OCMode
;

99 
uöt32_t
 
Pul£
;

102 
uöt32_t
 
OCPﬁ¨ôy
;

105 
uöt32_t
 
OCNPﬁ¨ôy
;

109 
uöt32_t
 
OCFa°Mode
;

114 
uöt32_t
 
OCIdÀSèã
;

118 
uöt32_t
 
OCNIdÀSèã
;

121 } 
	tTIM_OC_InôTy≥Def
;

128 
uöt32_t
 
OCMode
;

131 
uöt32_t
 
Pul£
;

134 
uöt32_t
 
OCPﬁ¨ôy
;

137 
uöt32_t
 
OCNPﬁ¨ôy
;

141 
uöt32_t
 
OCIdÀSèã
;

145 
uöt32_t
 
OCNIdÀSèã
;

149 
uöt32_t
 
ICPﬁ¨ôy
;

152 
uöt32_t
 
ICSñe˘i⁄
;

155 
uöt32_t
 
ICFûãr
;

157 } 
	tTIM_O√Pul£_InôTy≥Def
;

166 
uöt32_t
 
ICPﬁ¨ôy
;

169 
uöt32_t
 
ICSñe˘i⁄
;

172 
uöt32_t
 
ICPªsˇÀr
;

175 
uöt32_t
 
ICFûãr
;

177 } 
	tTIM_IC_InôTy≥Def
;

185 
uöt32_t
 
EncodîMode
;

188 
uöt32_t
 
IC1Pﬁ¨ôy
;

191 
uöt32_t
 
IC1Sñe˘i⁄
;

194 
uöt32_t
 
IC1PªsˇÀr
;

197 
uöt32_t
 
IC1Fûãr
;

200 
uöt32_t
 
IC2Pﬁ¨ôy
;

203 
uöt32_t
 
IC2Sñe˘i⁄
;

206 
uöt32_t
 
IC2PªsˇÀr
;

209 
uöt32_t
 
IC2Fûãr
;

211 } 
	tTIM_Encodî_InôTy≥Def
;

218 
uöt32_t
 
ClockSour˚
;

220 
uöt32_t
 
ClockPﬁ¨ôy
;

222 
uöt32_t
 
ClockPªsˇÀr
;

224 
uöt32_t
 
ClockFûãr
;

226 }
	tTIM_ClockC⁄figTy≥Def
;

233 
uöt32_t
 
CÀ¨I≈utSèã
;

235 
uöt32_t
 
CÀ¨I≈utSour˚
;

237 
uöt32_t
 
CÀ¨I≈utPﬁ¨ôy
;

239 
uöt32_t
 
CÀ¨I≈utPªsˇÀr
;

241 
uöt32_t
 
CÀ¨I≈utFûãr
;

243 }
	tTIM_CÀ¨I≈utC⁄figTy≥Def
;

249 
uöt32_t
 
SœveMode
;

251 
uöt32_t
 
I≈utTriggî
;

253 
uöt32_t
 
TriggîPﬁ¨ôy
;

255 
uöt32_t
 
TriggîPªsˇÀr
;

257 
uöt32_t
 
TriggîFûãr
;

260 }
	tTIM_SœveC⁄figTy≥Def
;

267 
HAL_TIM_STATE_RESET
 = 0x00,

268 
HAL_TIM_STATE_READY
 = 0x01,

269 
HAL_TIM_STATE_BUSY
 = 0x02,

270 
HAL_TIM_STATE_TIMEOUT
 = 0x03,

271 
HAL_TIM_STATE_ERROR
 = 0x04

272 }
	tHAL_TIM_SèãTy≥Def
;

279 
HAL_TIM_ACTIVE_CHANNEL_1
 = 0x01,

280 
HAL_TIM_ACTIVE_CHANNEL_2
 = 0x02,

281 
HAL_TIM_ACTIVE_CHANNEL_3
 = 0x04,

282 
HAL_TIM_ACTIVE_CHANNEL_4
 = 0x08,

283 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
 = 0x00

284 }
	tHAL_TIM_A˘iveCh™√l
;

291 
TIM_Ty≥Def
 *
In°™˚
;

292 
TIM_Ba£_InôTy≥Def
 
Inô
;

293 
HAL_TIM_A˘iveCh™√l
 
Ch™√l
;

294 
DMA_H™dÀTy≥Def
 *
hdma
[7];

296 
HAL_LockTy≥Def
 
Lock
;

297 
__IO
 
HAL_TIM_SèãTy≥Def
 
Sèã
;

298 }
	tTIM_H™dÀTy≥Def
;

311 
	#TIM_INPUTCHANNELPOLARITY_RISING
 ((
uöt32_t
)0x00000000Ë

	)

312 
	#TIM_INPUTCHANNELPOLARITY_FALLING
 (
TIM_CCER_CC1P
Ë

	)

313 
	#TIM_INPUTCHANNELPOLARITY_BOTHEDGE
 (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
Ë

	)

321 
	#TIM_ETRPOLARITY_INVERTED
 (
TIM_SMCR_ETP
Ë

	)

322 
	#TIM_ETRPOLARITY_NONINVERTED
 ((
uöt32_t
)0x0000Ë

	)

330 
	#TIM_ETRPRESCALER_DIV1
 ((
uöt32_t
)0x0000Ë

	)

331 
	#TIM_ETRPRESCALER_DIV2
 (
TIM_SMCR_ETPS_0
Ë

	)

332 
	#TIM_ETRPRESCALER_DIV4
 (
TIM_SMCR_ETPS_1
Ë

	)

333 
	#TIM_ETRPRESCALER_DIV8
 (
TIM_SMCR_ETPS
Ë

	)

341 
	#TIM_COUNTERMODE_UP
 ((
uöt32_t
)0x0000)

	)

342 
	#TIM_COUNTERMODE_DOWN
 
TIM_CR1_DIR


	)

343 
	#TIM_COUNTERMODE_CENTERALIGNED1
 
TIM_CR1_CMS_0


	)

344 
	#TIM_COUNTERMODE_CENTERALIGNED2
 
TIM_CR1_CMS_1


	)

345 
	#TIM_COUNTERMODE_CENTERALIGNED3
 
TIM_CR1_CMS


	)

353 
	#TIM_CLOCKDIVISION_DIV1
 ((
uöt32_t
)0x0000)

	)

354 
	#TIM_CLOCKDIVISION_DIV2
 (
TIM_CR1_CKD_0
)

	)

355 
	#TIM_CLOCKDIVISION_DIV4
 (
TIM_CR1_CKD_1
)

	)

363 
	#TIM_OCMODE_TIMING
 ((
uöt32_t
)0x0000)

	)

364 
	#TIM_OCMODE_ACTIVE
 (
TIM_CCMR1_OC1M_0
)

	)

365 
	#TIM_OCMODE_INACTIVE
 (
TIM_CCMR1_OC1M_1
)

	)

366 
	#TIM_OCMODE_TOGGLE
 (
TIM_CCMR1_OC1M_0
 | 
TIM_CCMR1_OC1M_1
)

	)

367 
	#TIM_OCMODE_PWM1
 (
TIM_CCMR1_OC1M_1
 | 
TIM_CCMR1_OC1M_2
)

	)

368 
	#TIM_OCMODE_PWM2
 (
TIM_CCMR1_OC1M
)

	)

369 
	#TIM_OCMODE_FORCED_ACTIVE
 (
TIM_CCMR1_OC1M_0
 | 
TIM_CCMR1_OC1M_2
)

	)

370 
	#TIM_OCMODE_FORCED_INACTIVE
 (
TIM_CCMR1_OC1M_2
)

	)

379 
	#TIM_OCFAST_DISABLE
 ((
uöt32_t
)0x0000)

	)

380 
	#TIM_OCFAST_ENABLE
 (
TIM_CCMR1_OC1FE
)

	)

388 
	#TIM_OCPOLARITY_HIGH
 ((
uöt32_t
)0x0000)

	)

389 
	#TIM_OCPOLARITY_LOW
 (
TIM_CCER_CC1P
)

	)

397 
	#TIM_OCNPOLARITY_HIGH
 ((
uöt32_t
)0x0000)

	)

398 
	#TIM_OCNPOLARITY_LOW
 (
TIM_CCER_CC1NP
)

	)

406 
	#TIM_OCIDLESTATE_SET
 (
TIM_CR2_OIS1
)

	)

407 
	#TIM_OCIDLESTATE_RESET
 ((
uöt32_t
)0x0000)

	)

415 
	#TIM_OCNIDLESTATE_SET
 (
TIM_CR2_OIS1N
)

	)

416 
	#TIM_OCNIDLESTATE_RESET
 ((
uöt32_t
)0x0000)

	)

424 
	#TIM_CHANNEL_1
 ((
uöt32_t
)0x0000)

	)

425 
	#TIM_CHANNEL_2
 ((
uöt32_t
)0x0004)

	)

426 
	#TIM_CHANNEL_3
 ((
uöt32_t
)0x0008)

	)

427 
	#TIM_CHANNEL_4
 ((
uöt32_t
)0x000C)

	)

428 
	#TIM_CHANNEL_ALL
 ((
uöt32_t
)0x0018)

	)

437 
	#TIM_ICPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

438 
	#TIM_ICPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

439 
	#TIM_ICPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

447 
	#TIM_ICSELECTION_DIRECTTI
 (
TIM_CCMR1_CC1S_0
Ë

	)

449 
	#TIM_ICSELECTION_INDIRECTTI
 (
TIM_CCMR1_CC1S_1
Ë

	)

451 
	#TIM_ICSELECTION_TRC
 (
TIM_CCMR1_CC1S
Ë

	)

460 
	#TIM_ICPSC_DIV1
 ((
uöt32_t
)0x0000Ë

	)

461 
	#TIM_ICPSC_DIV2
 (
TIM_CCMR1_IC1PSC_0
Ë

	)

462 
	#TIM_ICPSC_DIV4
 (
TIM_CCMR1_IC1PSC_1
Ë

	)

463 
	#TIM_ICPSC_DIV8
 (
TIM_CCMR1_IC1PSC
Ë

	)

471 
	#TIM_OPMODE_SINGLE
 (
TIM_CR1_OPM
)

	)

472 
	#TIM_OPMODE_REPETITIVE
 ((
uöt32_t
)0x0000)

	)

480 
	#TIM_ENCODERMODE_TI1
 (
TIM_SMCR_SMS_0
)

	)

481 
	#TIM_ENCODERMODE_TI2
 (
TIM_SMCR_SMS_1
)

	)

482 
	#TIM_ENCODERMODE_TI12
 (
TIM_SMCR_SMS_1
 | 
TIM_SMCR_SMS_0
)

	)

491 
	#TIM_IT_UPDATE
 (
TIM_DIER_UIE
)

	)

492 
	#TIM_IT_CC1
 (
TIM_DIER_CC1IE
)

	)

493 
	#TIM_IT_CC2
 (
TIM_DIER_CC2IE
)

	)

494 
	#TIM_IT_CC3
 (
TIM_DIER_CC3IE
)

	)

495 
	#TIM_IT_CC4
 (
TIM_DIER_CC4IE
)

	)

496 
	#TIM_IT_COM
 (
TIM_DIER_COMIE
)

	)

497 
	#TIM_IT_TRIGGER
 (
TIM_DIER_TIE
)

	)

498 
	#TIM_IT_BREAK
 (
TIM_DIER_BIE
)

	)

506 
	#TIM_COMMUTATION_TRGI
 (
TIM_CR2_CCUS
)

	)

507 
	#TIM_COMMUTATION_SOFTWARE
 ((
uöt32_t
)0x0000)

	)

515 
	#TIM_DMA_UPDATE
 (
TIM_DIER_UDE
)

	)

516 
	#TIM_DMA_CC1
 (
TIM_DIER_CC1DE
)

	)

517 
	#TIM_DMA_CC2
 (
TIM_DIER_CC2DE
)

	)

518 
	#TIM_DMA_CC3
 (
TIM_DIER_CC3DE
)

	)

519 
	#TIM_DMA_CC4
 (
TIM_DIER_CC4DE
)

	)

520 
	#TIM_DMA_COM
 (
TIM_DIER_COMDE
)

	)

521 
	#TIM_DMA_TRIGGER
 (
TIM_DIER_TDE
)

	)

529 
	#TIM_EVENTSOURCE_UPDATE
 
TIM_EGR_UG


	)

530 
	#TIM_EVENTSOURCE_CC1
 
TIM_EGR_CC1G


	)

531 
	#TIM_EVENTSOURCE_CC2
 
TIM_EGR_CC2G


	)

532 
	#TIM_EVENTSOURCE_CC3
 
TIM_EGR_CC3G


	)

533 
	#TIM_EVENTSOURCE_CC4
 
TIM_EGR_CC4G


	)

534 
	#TIM_EVENTSOURCE_COM
 
TIM_EGR_COMG


	)

535 
	#TIM_EVENTSOURCE_TRIGGER
 
TIM_EGR_TG


	)

536 
	#TIM_EVENTSOURCE_BREAK
 
TIM_EGR_BG


	)

545 
	#TIM_FLAG_UPDATE
 (
TIM_SR_UIF
)

	)

546 
	#TIM_FLAG_CC1
 (
TIM_SR_CC1IF
)

	)

547 
	#TIM_FLAG_CC2
 (
TIM_SR_CC2IF
)

	)

548 
	#TIM_FLAG_CC3
 (
TIM_SR_CC3IF
)

	)

549 
	#TIM_FLAG_CC4
 (
TIM_SR_CC4IF
)

	)

550 
	#TIM_FLAG_COM
 (
TIM_SR_COMIF
)

	)

551 
	#TIM_FLAG_TRIGGER
 (
TIM_SR_TIF
)

	)

552 
	#TIM_FLAG_BREAK
 (
TIM_SR_BIF
)

	)

553 
	#TIM_FLAG_CC1OF
 (
TIM_SR_CC1OF
)

	)

554 
	#TIM_FLAG_CC2OF
 (
TIM_SR_CC2OF
)

	)

555 
	#TIM_FLAG_CC3OF
 (
TIM_SR_CC3OF
)

	)

556 
	#TIM_FLAG_CC4OF
 (
TIM_SR_CC4OF
)

	)

564 
	#TIM_CLOCKSOURCE_ETRMODE2
 (
TIM_SMCR_ETPS_1
)

	)

565 
	#TIM_CLOCKSOURCE_INTERNAL
 (
TIM_SMCR_ETPS_0
)

	)

566 
	#TIM_CLOCKSOURCE_ITR0
 ((
uöt32_t
)0x0000)

	)

567 
	#TIM_CLOCKSOURCE_ITR1
 (
TIM_SMCR_TS_0
)

	)

568 
	#TIM_CLOCKSOURCE_ITR2
 (
TIM_SMCR_TS_1
)

	)

569 
	#TIM_CLOCKSOURCE_ITR3
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_1
)

	)

570 
	#TIM_CLOCKSOURCE_TI1ED
 (
TIM_SMCR_TS_2
)

	)

571 
	#TIM_CLOCKSOURCE_TI1
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_2
)

	)

572 
	#TIM_CLOCKSOURCE_TI2
 (
TIM_SMCR_TS_1
 | 
TIM_SMCR_TS_2
)

	)

573 
	#TIM_CLOCKSOURCE_ETRMODE1
 (
TIM_SMCR_TS
)

	)

581 
	#TIM_CLOCKPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

582 
	#TIM_CLOCKPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

583 
	#TIM_CLOCKPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

584 
	#TIM_CLOCKPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

585 
	#TIM_CLOCKPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

593 
	#TIM_CLOCKPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

594 
	#TIM_CLOCKPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

595 
	#TIM_CLOCKPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

596 
	#TIM_CLOCKPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

604 
	#TIM_CLEARINPUTSOURCE_ETR
 ((
uöt32_t
)0x0001)

	)

605 
	#TIM_CLEARINPUTSOURCE_NONE
 ((
uöt32_t
)0x0000)

	)

613 
	#TIM_CLEARINPUTPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

614 
	#TIM_CLEARINPUTPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

622 
	#TIM_CLEARINPUTPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

623 
	#TIM_CLEARINPUTPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

624 
	#TIM_CLEARINPUTPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

625 
	#TIM_CLEARINPUTPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

633 
	#TIM_OSSR_ENABLE
 (
TIM_BDTR_OSSR
)

	)

634 
	#TIM_OSSR_DISABLE
 ((
uöt32_t
)0x0000)

	)

642 
	#TIM_OSSI_ENABLE
 (
TIM_BDTR_OSSI
)

	)

643 
	#TIM_OSSI_DISABLE
 ((
uöt32_t
)0x0000)

	)

651 
	#TIM_LOCKLEVEL_OFF
 ((
uöt32_t
)0x0000)

	)

652 
	#TIM_LOCKLEVEL_1
 (
TIM_BDTR_LOCK_0
)

	)

653 
	#TIM_LOCKLEVEL_2
 (
TIM_BDTR_LOCK_1
)

	)

654 
	#TIM_LOCKLEVEL_3
 (
TIM_BDTR_LOCK
)

	)

661 
	#TIM_BREAK_ENABLE
 (
TIM_BDTR_BKE
)

	)

662 
	#TIM_BREAK_DISABLE
 ((
uöt32_t
)0x0000)

	)

670 
	#TIM_BREAKPOLARITY_LOW
 ((
uöt32_t
)0x0000)

	)

671 
	#TIM_BREAKPOLARITY_HIGH
 (
TIM_BDTR_BKP
)

	)

679 
	#TIM_AUTOMATICOUTPUT_ENABLE
 (
TIM_BDTR_AOE
)

	)

680 
	#TIM_AUTOMATICOUTPUT_DISABLE
 ((
uöt32_t
)0x0000)

	)

688 
	#TIM_TRGO_RESET
 ((
uöt32_t
)0x0000)

	)

689 
	#TIM_TRGO_ENABLE
 (
TIM_CR2_MMS_0
)

	)

690 
	#TIM_TRGO_UPDATE
 (
TIM_CR2_MMS_1
)

	)

691 
	#TIM_TRGO_OC1
 ((
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
))

	)

692 
	#TIM_TRGO_OC1REF
 (
TIM_CR2_MMS_2
)

	)

693 
	#TIM_TRGO_OC2REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_0
))

	)

694 
	#TIM_TRGO_OC3REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
))

	)

695 
	#TIM_TRGO_OC4REF
 ((
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
))

	)

703 
	#TIM_SLAVEMODE_DISABLE
 ((
uöt32_t
)0x0000)

	)

704 
	#TIM_SLAVEMODE_RESET
 ((
uöt32_t
)0x0004)

	)

705 
	#TIM_SLAVEMODE_GATED
 ((
uöt32_t
)0x0005)

	)

706 
	#TIM_SLAVEMODE_TRIGGER
 ((
uöt32_t
)0x0006)

	)

707 
	#TIM_SLAVEMODE_EXTERNAL1
 ((
uöt32_t
)0x0007)

	)

715 
	#TIM_MASTERSLAVEMODE_ENABLE
 ((
uöt32_t
)0x0080)

	)

716 
	#TIM_MASTERSLAVEMODE_DISABLE
 ((
uöt32_t
)0x0000)

	)

724 
	#TIM_TS_ITR0
 ((
uöt32_t
)0x0000)

	)

725 
	#TIM_TS_ITR1
 ((
uöt32_t
)0x0010)

	)

726 
	#TIM_TS_ITR2
 ((
uöt32_t
)0x0020)

	)

727 
	#TIM_TS_ITR3
 ((
uöt32_t
)0x0030)

	)

728 
	#TIM_TS_TI1F_ED
 ((
uöt32_t
)0x0040)

	)

729 
	#TIM_TS_TI1FP1
 ((
uöt32_t
)0x0050)

	)

730 
	#TIM_TS_TI2FP2
 ((
uöt32_t
)0x0060)

	)

731 
	#TIM_TS_ETRF
 ((
uöt32_t
)0x0070)

	)

732 
	#TIM_TS_NONE
 ((
uöt32_t
)0xFFFF)

	)

740 
	#TIM_TRIGGERPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

741 
	#TIM_TRIGGERPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

742 
	#TIM_TRIGGERPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

743 
	#TIM_TRIGGERPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

744 
	#TIM_TRIGGERPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

752 
	#TIM_TRIGGERPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

753 
	#TIM_TRIGGERPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

754 
	#TIM_TRIGGERPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

755 
	#TIM_TRIGGERPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

764 
	#TIM_TI1SELECTION_CH1
 ((
uöt32_t
)0x0000)

	)

765 
	#TIM_TI1SELECTION_XORCOMBINATION
 (
TIM_CR2_TI1S
)

	)

773 
	#TIM_DMABASE_CR1
 (0x00000000)

	)

774 
	#TIM_DMABASE_CR2
 (0x00000001)

	)

775 
	#TIM_DMABASE_SMCR
 (0x00000002)

	)

776 
	#TIM_DMABASE_DIER
 (0x00000003)

	)

777 
	#TIM_DMABASE_SR
 (0x00000004)

	)

778 
	#TIM_DMABASE_EGR
 (0x00000005)

	)

779 
	#TIM_DMABASE_CCMR1
 (0x00000006)

	)

780 
	#TIM_DMABASE_CCMR2
 (0x00000007)

	)

781 
	#TIM_DMABASE_CCER
 (0x00000008)

	)

782 
	#TIM_DMABASE_CNT
 (0x00000009)

	)

783 
	#TIM_DMABASE_PSC
 (0x0000000A)

	)

784 
	#TIM_DMABASE_ARR
 (0x0000000B)

	)

785 
	#TIM_DMABASE_RCR
 (0x0000000C)

	)

786 
	#TIM_DMABASE_CCR1
 (0x0000000D)

	)

787 
	#TIM_DMABASE_CCR2
 (0x0000000E)

	)

788 
	#TIM_DMABASE_CCR3
 (0x0000000F)

	)

789 
	#TIM_DMABASE_CCR4
 (0x00000010)

	)

790 
	#TIM_DMABASE_BDTR
 (0x00000011)

	)

791 
	#TIM_DMABASE_DCR
 (0x00000012)

	)

792 
	#TIM_DMABASE_OR
 (0x00000013)

	)

800 
	#TIM_DMABURSTLENGTH_1TRANSFER
 (0x00000000)

	)

801 
	#TIM_DMABURSTLENGTH_2TRANSFERS
 (0x00000100)

	)

802 
	#TIM_DMABURSTLENGTH_3TRANSFERS
 (0x00000200)

	)

803 
	#TIM_DMABURSTLENGTH_4TRANSFERS
 (0x00000300)

	)

804 
	#TIM_DMABURSTLENGTH_5TRANSFERS
 (0x00000400)

	)

805 
	#TIM_DMABURSTLENGTH_6TRANSFERS
 (0x00000500)

	)

806 
	#TIM_DMABURSTLENGTH_7TRANSFERS
 (0x00000600)

	)

807 
	#TIM_DMABURSTLENGTH_8TRANSFERS
 (0x00000700)

	)

808 
	#TIM_DMABURSTLENGTH_9TRANSFERS
 (0x00000800)

	)

809 
	#TIM_DMABURSTLENGTH_10TRANSFERS
 (0x00000900)

	)

810 
	#TIM_DMABURSTLENGTH_11TRANSFERS
 (0x00000A00)

	)

811 
	#TIM_DMABURSTLENGTH_12TRANSFERS
 (0x00000B00)

	)

812 
	#TIM_DMABURSTLENGTH_13TRANSFERS
 (0x00000C00)

	)

813 
	#TIM_DMABURSTLENGTH_14TRANSFERS
 (0x00000D00)

	)

814 
	#TIM_DMABURSTLENGTH_15TRANSFERS
 (0x00000E00)

	)

815 
	#TIM_DMABURSTLENGTH_16TRANSFERS
 (0x00000F00)

	)

816 
	#TIM_DMABURSTLENGTH_17TRANSFERS
 (0x00001000)

	)

817 
	#TIM_DMABURSTLENGTH_18TRANSFERS
 (0x00001100)

	)

825 
	#TIM_DMA_ID_UPDATE
 ((
uöt16_t
Ë0x0Ë

	)

826 
	#TIM_DMA_ID_CC1
 ((
uöt16_t
Ë0x1Ë

	)

827 
	#TIM_DMA_ID_CC2
 ((
uöt16_t
Ë0x2Ë

	)

828 
	#TIM_DMA_ID_CC3
 ((
uöt16_t
Ë0x3Ë

	)

829 
	#TIM_DMA_ID_CC4
 ((
uöt16_t
Ë0x4Ë

	)

830 
	#TIM_DMA_ID_COMMUTATION
 ((
uöt16_t
Ë0x5Ë

	)

831 
	#TIM_DMA_ID_TRIGGER
 ((
uöt16_t
Ë0x6Ë

	)

839 
	#TIM_CCx_ENABLE
 ((
uöt32_t
)0x0001)

	)

840 
	#TIM_CCx_DISABLE
 ((
uöt32_t
)0x0000)

	)

841 
	#TIM_CCxN_ENABLE
 ((
uöt32_t
)0x0004)

	)

842 
	#TIM_CCxN_DISABLE
 ((
uöt32_t
)0x0000)

	)

859 
	#__HAL_TIM_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_TIM_STATE_RESET
)

	)

866 
	#__HAL_TIM_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
|=(
TIM_CR1_CEN
))

	)

873 
	#__HAL_TIM_MOE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
BDTR
|=(
TIM_BDTR_MOE
))

	)

881 
	#__HAL_TIM_DISABLE
(
__HANDLE__
) \

883 i‡(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxE_MASK
) == 0) \

885 if(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxNE_MASK
) == 0) \

887 (
__HANDLE__
)->
In°™˚
->
CR1
 &~(
TIM_CR1_CEN
); \

890 } 0)

	)

899 
	#__HAL_TIM_MOE_DISABLE
(
__HANDLE__
) \

901 i‡(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxE_MASK
) == 0) \

903 if(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxNE_MASK
) == 0) \

905 (
__HANDLE__
)->
In°™˚
->
BDTR
 &~(
TIM_BDTR_MOE
); \

908 } 0)

	)

910 
	#__HAL_TIM_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DIER
 |(__INTERRUPT__))

	)

911 
	#__HAL_TIM_ENABLE_DMA
(
__HANDLE__
, 
__DMA__
Ë((__HANDLE__)->
In°™˚
->
DIER
 |(__DMA__))

	)

912 
	#__HAL_TIM_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DIER
 &~(__INTERRUPT__))

	)

913 
	#__HAL_TIM_DISABLE_DMA
(
__HANDLE__
, 
__DMA__
Ë((__HANDLE__)->
In°™˚
->
DIER
 &~(__DMA__))

	)

914 
	#__HAL_TIM_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 &(__FLAG__)Ë=(__FLAG__))

	)

915 
	#__HAL_TIM_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__FLAG__))

	)

917 
	#__HAL_TIM_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
DIER
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

918 
	#__HAL_TIM_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__INTERRUPT__))

	)

920 
	#__HAL_TIM_IS_TIM_COUNTING_DOWN
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
CR1
 &(
TIM_CR1_DIR
)Ë=(TIM_CR1_DIR))

	)

921 
	#__HAL_TIM_SET_PRESCALER
(
__HANDLE__
, 
__PRESC__
Ë((__HANDLE__)->
In°™˚
->
PSC
 = (__PRESC__))

	)

923 
	#TIM_SET_ICPRESCALERVALUE
(
__HANDLE__
, 
__CHANNEL__
, 
__ICPSC__
) \

924 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |(
__ICPSC__
)) :\

925 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |((
__ICPSC__
) << 8)) :\

926 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |(
__ICPSC__
)) :\

927 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |((
__ICPSC__
Ë<< 8)))

	)

929 
	#TIM_RESET_ICPRESCALERVALUE
(
__HANDLE__
, 
__CHANNEL__
) \

930 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC1PSC
) :\

931 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC2PSC
) :\

932 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
) :\

933 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
))

	)

935 
	#TIM_SET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
, 
__POLARITY__
) \

936 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |(
__POLARITY__
)) :\

937 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |((
__POLARITY__
) << 4)) :\

938 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |((
__POLARITY__
) << 8)) :\

939 ((
__HANDLE__
)->
In°™˚
->
CCER
 |(((
__POLARITY__
Ë<< 12Ë& 
TIM_CCER_CC4P
)))

	)

941 
	#TIM_RESET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
) \

942 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &(
uöt16_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
)) :\

943 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
)) :\

944 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
)) :\

945 ((
__HANDLE__
)->
In°™˚
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4P
))

	)

960 
	#__HAL_TIM_SET_COMPARE
(
__HANDLE__
, 
__CHANNEL__
, 
__COMPARE__
) \

961 (*(
__IO
 
uöt32_t
 *)(&((
__HANDLE__
)->
In°™˚
->
CCR1
Ë+ ((
__CHANNEL__
Ë>> 2)Ë(
__COMPARE__
))

	)

974 
	#__HAL_TIM_GET_COMPARE
(
__HANDLE__
, 
__CHANNEL__
) \

975 (*(
__IO
 
uöt32_t
 *)(&((
__HANDLE__
)->
In°™˚
->
CCR1
Ë+ ((
__CHANNEL__
Ë>> 2)))

	)

983 
	#__HAL_TIM_SET_COUNTER
(
__HANDLE__
, 
__COUNTER__
Ë((__HANDLE__)->
In°™˚
->
CNT
 = (__COUNTER__))

	)

990 
	#__HAL_TIM_GET_COUNTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CNT
)

	)

999 
	#__HAL_TIM_SET_AUTORELOAD
(
__HANDLE__
, 
__AUTORELOAD__
) \

1001 (
__HANDLE__
)->
In°™˚
->
ARR
 = (
__AUTORELOAD__
); \

1002 (
__HANDLE__
)->
Inô
.
Pîiod
 = (
__AUTORELOAD__
); \

1003 } 0)

	)

1009 
	#__HAL_TIM_GET_AUTORELOAD
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
ARR
)

	)

1022 
	#__HAL_TIM_SET_CLOCKDIVISION
(
__HANDLE__
, 
__CKD__
) \

1024 (
__HANDLE__
)->
In°™˚
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
); \

1025 (
__HANDLE__
)->
In°™˚
->
CR1
 |(
__CKD__
); \

1026 (
__HANDLE__
)->
Inô
.
ClockDivisi⁄
 = (
__CKD__
); \

1027 } 0)

	)

1033 
	#__HAL_TIM_GET_CLOCKDIVISION
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 & 
TIM_CR1_CKD
)

	)

1053 
	#__HAL_TIM_SET_ICPRESCALER
(
__HANDLE__
, 
__CHANNEL__
, 
__ICPSC__
) \

1055 
	`TIM_RESET_ICPRESCALERVALUE
((
__HANDLE__
), (
__CHANNEL__
)); \

1056 
	`TIM_SET_ICPRESCALERVALUE
((
__HANDLE__
), (
__CHANNEL__
), (
__ICPSC__
)); \

1057 } 0)

	)

1070 
	#__HAL_TIM_GET_ICPRESCALER
(
__HANDLE__
, 
__CHANNEL__
) \

1071 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_IC1PSC
) :\

1072 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? (((
__HANDLE__
)->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_IC2PSC
) >> 8) :\

1073 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_IC3PSC
) :\

1074 (((
__HANDLE__
)->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_IC4PSC
)Ë>> 8)

	)

1084 
	#__HAL_TIM_URS_ENABLE
(
__HANDLE__
) \

1085 ((
__HANDLE__
)->
In°™˚
->
CR1
|(
TIM_CR1_URS
))

	)

1098 
	#__HAL_TIM_URS_DISABLE
(
__HANDLE__
) \

1099 ((
__HANDLE__
)->
In°™˚
->
CR1
&=~(
TIM_CR1_URS
))

	)

1117 
	#__HAL_TIM_SET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
, 
__POLARITY__
) \

1119 
	`TIM_RESET_CAPTUREPOLARITY
((
__HANDLE__
), (
__CHANNEL__
)); \

1120 
	`TIM_SET_CAPTUREPOLARITY
((
__HANDLE__
), (
__CHANNEL__
), (
__POLARITY__
)); \

1121 }0)

	)

1127 
	~"°m32f4xx_hÆ_tim_ex.h
"

1139 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1140 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1141 
HAL_TIM_Ba£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1142 
HAL_TIM_Ba£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1144 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
);

1145 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›
(
TIM_H™dÀTy≥Def
 *
htim
);

1147 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
);

1148 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
);

1150 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
);

1151 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
);

1160 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1161 
HAL_SètusTy≥Def
 
HAL_TIM_OC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1162 
HAL_TIM_OC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1163 
HAL_TIM_OC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1165 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1166 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1168 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1169 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1171 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1172 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1182 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1183 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1184 
HAL_TIM_PWM_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1185 
HAL_TIM_PWM_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1187 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1188 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1190 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1191 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1193 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1194 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1204 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1205 
HAL_SètusTy≥Def
 
HAL_TIM_IC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1206 
HAL_TIM_IC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1207 
HAL_TIM_IC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1209 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1210 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1212 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1213 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1215 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1216 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1226 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
O√Pul£Mode
);

1227 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1228 
HAL_TIM_O√Pul£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1229 
HAL_TIM_O√Pul£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1231 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1232 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1235 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1236 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1246 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Encodî_InôTy≥Def
* 
sC⁄fig
);

1247 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1248 
HAL_TIM_Encodî_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1249 
HAL_TIM_Encodî_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1251 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1252 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1254 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1255 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1257 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a1
, uöt32_à*
pD©a2
, 
uöt16_t
 
Lígth
);

1258 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1268 
HAL_TIM_IRQH™dÀr
(
TIM_H™dÀTy≥Def
 *
htim
);

1278 
HAL_SètusTy≥Def
 
HAL_TIM_OC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

1279 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

1280 
HAL_SètusTy≥Def
 
HAL_TIM_IC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_IC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

1281 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_O√Pul£_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
OuçutCh™√l
, uöt32_à
I≈utCh™√l
);

1282 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figOCªfCÀ¨
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_CÀ¨I≈utC⁄figTy≥Def
 * 
sCÀ¨I≈utC⁄fig
, 
uöt32_t
 
Ch™√l
);

1283 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figClockSour˚
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_ClockC⁄figTy≥Def
 * 
sClockSour˚C⁄fig
);

1284 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figTI1I≈ut
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
TI1_Sñe˘i⁄
);

1285 
HAL_SètusTy≥Def
 
HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
);

1286 
HAL_SètusTy≥Def
 
HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
);

1287 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_WrôeSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
, uöt32_à
Bur°Reque°Src
, \

1288 
uöt32_t
 *
Bur°Buf„r
, uöt32_à
Bur°Lígth
);

1289 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_WrôeSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
);

1290 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_RódSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
, uöt32_à
Bur°Reque°Src
, \

1291 
uöt32_t
 *
Bur°Buf„r
, uöt32_à
Bur°Lígth
);

1292 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_RódSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
);

1293 
HAL_SètusTy≥Def
 
HAL_TIM_Gíî©eEvít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
EvítSour˚
);

1294 
uöt32_t
 
HAL_TIM_RódC≠tuªdVÆue
(
TIM_H™dÀTy≥Def
 *
htim
, uöt32_à
Ch™√l
);

1304 
HAL_TIM_PîiodEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1305 
HAL_TIM_OC_DñayEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1306 
HAL_TIM_IC_C≠tuªCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1307 
HAL_TIM_PWM_Pul£FöishedCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1308 
HAL_TIM_TriggîCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1309 
HAL_TIM_Eº‹CÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

1319 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_Ba£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1320 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_OC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1321 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_PWM_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1322 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_IC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1323 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_O√Pul£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1324 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_Encodî_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

1327 
HAL_TIM_PWM_Ch™gePul£Weôh
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

1345 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_COUNTERMODE_UP
) || \

1346 ((
MODE
Ë=
TIM_COUNTERMODE_DOWN
) || \

1347 ((
MODE
Ë=
TIM_COUNTERMODE_CENTERALIGNED1
) || \

1348 ((
MODE
Ë=
TIM_COUNTERMODE_CENTERALIGNED2
) || \

1349 ((
MODE
Ë=
TIM_COUNTERMODE_CENTERALIGNED3
))

	)

1351 
	#IS_TIM_CLOCKDIVISION_DIV
(
DIV
Ë(((DIVË=
TIM_CLOCKDIVISION_DIV1
) || \

1352 ((
DIV
Ë=
TIM_CLOCKDIVISION_DIV2
) || \

1353 ((
DIV
Ë=
TIM_CLOCKDIVISION_DIV4
))

	)

1355 
	#IS_TIM_PWM_MODE
(
MODE
Ë(((MODEË=
TIM_OCMODE_PWM1
) || \

1356 ((
MODE
Ë=
TIM_OCMODE_PWM2
))

	)

1358 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMODE_TIMING
) || \

1359 ((
MODE
Ë=
TIM_OCMODE_ACTIVE
) || \

1360 ((
MODE
Ë=
TIM_OCMODE_INACTIVE
) || \

1361 ((
MODE
Ë=
TIM_OCMODE_TOGGLE
) || \

1362 ((
MODE
Ë=
TIM_OCMODE_FORCED_ACTIVE
) || \

1363 ((
MODE
Ë=
TIM_OCMODE_FORCED_INACTIVE
))

	)

1365 
	#IS_TIM_FAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFAST_DISABLE
) || \

1366 ((
STATE
Ë=
TIM_OCFAST_ENABLE
))

	)

1368 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPOLARITY_HIGH
) || \

1369 ((
POLARITY
Ë=
TIM_OCPOLARITY_LOW
))

	)

1371 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPOLARITY_HIGH
) || \

1372 ((
POLARITY
Ë=
TIM_OCNPOLARITY_LOW
))

	)

1374 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIDLESTATE_SET
) || \

1375 ((
STATE
Ë=
TIM_OCIDLESTATE_RESET
))

	)

1377 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIDLESTATE_SET
) || \

1378 ((
STATE
Ë=
TIM_OCNIDLESTATE_RESET
))

	)

1380 
	#IS_TIM_CHANNELS
(
CHANNEL
Ë(((CHANNELË=
TIM_CHANNEL_1
) || \

1381 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

1382 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

1383 ((
CHANNEL
Ë=
TIM_CHANNEL_4
) || \

1384 ((
CHANNEL
Ë=
TIM_CHANNEL_ALL
))

	)

1386 
	#IS_TIM_OPM_CHANNELS
(
CHANNEL
Ë(((CHANNELË=
TIM_CHANNEL_1
) || \

1387 ((
CHANNEL
Ë=
TIM_CHANNEL_2
))

	)

1389 
	#IS_TIM_COMPLEMENTARY_CHANNELS
(
CHANNEL
Ë(((CHANNELË=
TIM_CHANNEL_1
) || \

1390 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

1391 ((
CHANNEL
Ë=
TIM_CHANNEL_3
))

	)

1393 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPOLARITY_RISING
) || \

1394 ((
POLARITY
Ë=
TIM_ICPOLARITY_FALLING
) || \

1395 ((
POLARITY
Ë=
TIM_ICPOLARITY_BOTHEDGE
))

	)

1397 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSELECTION_DIRECTTI
) || \

1398 ((
SELECTION
Ë=
TIM_ICSELECTION_INDIRECTTI
) || \

1399 ((
SELECTION
Ë=
TIM_ICSELECTION_TRC
))

	)

1401 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

1402 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

1403 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

1404 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

1406 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMODE_SINGLE
) || \

1407 ((
MODE
Ë=
TIM_OPMODE_REPETITIVE
))

	)

1409 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& 0xFFFF80FFË=0x00000000Ë&& ((SOURCEË!0x00000000))

	)

1411 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_ENCODERMODE_TI1
) || \

1412 ((
MODE
Ë=
TIM_ENCODERMODE_TI2
) || \

1413 ((
MODE
Ë=
TIM_ENCODERMODE_TI12
))

	)

1415 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& 0xFFFFFF00Ë=0x00000000Ë&& ((SOURCEË!0x00000000))

	)

1417 
	#IS_TIM_CLOCKSOURCE
(
CLOCK
Ë(((CLOCKË=
TIM_CLOCKSOURCE_INTERNAL
) || \

1418 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_ETRMODE2
) || \

1419 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_ITR0
) || \

1420 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_ITR1
) || \

1421 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_ITR2
) || \

1422 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_ITR3
) || \

1423 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_TI1ED
) || \

1424 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_TI1
) || \

1425 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_TI2
) || \

1426 ((
CLOCK
Ë=
TIM_CLOCKSOURCE_ETRMODE1
))

	)

1428 
	#IS_TIM_CLOCKPOLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_CLOCKPOLARITY_INVERTED
) || \

1429 ((
POLARITY
Ë=
TIM_CLOCKPOLARITY_NONINVERTED
) || \

1430 ((
POLARITY
Ë=
TIM_CLOCKPOLARITY_RISING
) || \

1431 ((
POLARITY
Ë=
TIM_CLOCKPOLARITY_FALLING
) || \

1432 ((
POLARITY
Ë=
TIM_CLOCKPOLARITY_BOTHEDGE
))

	)

1434 
	#IS_TIM_CLOCKPRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_CLOCKPRESCALER_DIV1
) || \

1435 ((
PRESCALER
Ë=
TIM_CLOCKPRESCALER_DIV2
) || \

1436 ((
PRESCALER
Ë=
TIM_CLOCKPRESCALER_DIV4
) || \

1437 ((
PRESCALER
Ë=
TIM_CLOCKPRESCALER_DIV8
))

	)

1439 
	#IS_TIM_CLOCKFILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1441 
	#IS_TIM_CLEARINPUT_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_CLEARINPUTSOURCE_NONE
) || \

1442 ((
SOURCE
Ë=
TIM_CLEARINPUTSOURCE_ETR
))

	)

1444 
	#IS_TIM_CLEARINPUT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_CLEARINPUTPOLARITY_INVERTED
) || \

1445 ((
POLARITY
Ë=
TIM_CLEARINPUTPOLARITY_NONINVERTED
))

	)

1447 
	#IS_TIM_CLEARINPUT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_CLEARINPUTPRESCALER_DIV1
) || \

1448 ((
PRESCALER
Ë=
TIM_CLEARINPUTPRESCALER_DIV2
) || \

1449 ((
PRESCALER
Ë=
TIM_CLEARINPUTPRESCALER_DIV4
) || \

1450 ((
PRESCALER
Ë=
TIM_CLEARINPUTPRESCALER_DIV8
))

	)

1452 
	#IS_TIM_CLEARINPUT_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1454 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSR_ENABLE
) || \

1455 ((
STATE
Ë=
TIM_OSSR_DISABLE
))

	)

1457 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSI_ENABLE
) || \

1458 ((
STATE
Ë=
TIM_OSSI_DISABLE
))

	)

1460 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLEVEL_OFF
) || \

1461 ((
LEVEL
Ë=
TIM_LOCKLEVEL_1
) || \

1462 ((
LEVEL
Ë=
TIM_LOCKLEVEL_2
) || \

1463 ((
LEVEL
Ë=
TIM_LOCKLEVEL_3
))

	)

1465 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_BREAK_ENABLE
) || \

1466 ((
STATE
Ë=
TIM_BREAK_DISABLE
))

	)

1468 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BREAKPOLARITY_LOW
) || \

1469 ((
POLARITY
Ë=
TIM_BREAKPOLARITY_HIGH
))

	)

1471 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_AUTOMATICOUTPUT_ENABLE
) || \

1472 ((
STATE
Ë=
TIM_AUTOMATICOUTPUT_DISABLE
))

	)

1474 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGO_RESET
) || \

1475 ((
SOURCE
Ë=
TIM_TRGO_ENABLE
) || \

1476 ((
SOURCE
Ë=
TIM_TRGO_UPDATE
) || \

1477 ((
SOURCE
Ë=
TIM_TRGO_OC1
) || \

1478 ((
SOURCE
Ë=
TIM_TRGO_OC1REF
) || \

1479 ((
SOURCE
Ë=
TIM_TRGO_OC2REF
) || \

1480 ((
SOURCE
Ë=
TIM_TRGO_OC3REF
) || \

1481 ((
SOURCE
Ë=
TIM_TRGO_OC4REF
))

	)

1483 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SLAVEMODE_DISABLE
) || \

1484 ((
MODE
Ë=
TIM_SLAVEMODE_GATED
) || \

1485 ((
MODE
Ë=
TIM_SLAVEMODE_RESET
) || \

1486 ((
MODE
Ë=
TIM_SLAVEMODE_TRIGGER
) || \

1487 ((
MODE
Ë=
TIM_SLAVEMODE_EXTERNAL1
))

	)

1489 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_MASTERSLAVEMODE_ENABLE
) || \

1490 ((
STATE
Ë=
TIM_MASTERSLAVEMODE_DISABLE
))

	)

1492 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

1493 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

1494 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

1495 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

1496 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

1497 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

1498 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

1499 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

1501 
	#IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

1502 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

1503 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

1504 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

1505 ((
SELECTION
Ë=
TIM_TS_NONE
))

	)

1506 
	#IS_TIM_TRIGGERPOLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_TRIGGERPOLARITY_INVERTED
 ) || \

1507 ((
POLARITY
Ë=
TIM_TRIGGERPOLARITY_NONINVERTED
) || \

1508 ((
POLARITY
Ë=
TIM_TRIGGERPOLARITY_RISING
 ) || \

1509 ((
POLARITY
Ë=
TIM_TRIGGERPOLARITY_FALLING
 ) || \

1510 ((
POLARITY
Ë=
TIM_TRIGGERPOLARITY_BOTHEDGE
 ))

	)

1512 
	#IS_TIM_TRIGGERPRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_TRIGGERPRESCALER_DIV1
) || \

1513 ((
PRESCALER
Ë=
TIM_TRIGGERPRESCALER_DIV2
) || \

1514 ((
PRESCALER
Ë=
TIM_TRIGGERPRESCALER_DIV4
) || \

1515 ((
PRESCALER
Ë=
TIM_TRIGGERPRESCALER_DIV8
))

	)

1517 
	#IS_TIM_TRIGGERFILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1519 
	#IS_TIM_TI1SELECTION
(
TI1SELECTION
Ë(((TI1SELECTIONË=
TIM_TI1SELECTION_CH1
) || \

1520 ((
TI1SELECTION
Ë=
TIM_TI1SELECTION_XORCOMBINATION
))

	)

1522 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABASE_CR1
) || \

1523 ((
BASE
Ë=
TIM_DMABASE_CR2
) || \

1524 ((
BASE
Ë=
TIM_DMABASE_SMCR
) || \

1525 ((
BASE
Ë=
TIM_DMABASE_DIER
) || \

1526 ((
BASE
Ë=
TIM_DMABASE_SR
) || \

1527 ((
BASE
Ë=
TIM_DMABASE_EGR
) || \

1528 ((
BASE
Ë=
TIM_DMABASE_CCMR1
) || \

1529 ((
BASE
Ë=
TIM_DMABASE_CCMR2
) || \

1530 ((
BASE
Ë=
TIM_DMABASE_CCER
) || \

1531 ((
BASE
Ë=
TIM_DMABASE_CNT
) || \

1532 ((
BASE
Ë=
TIM_DMABASE_PSC
) || \

1533 ((
BASE
Ë=
TIM_DMABASE_ARR
) || \

1534 ((
BASE
Ë=
TIM_DMABASE_RCR
) || \

1535 ((
BASE
Ë=
TIM_DMABASE_CCR1
) || \

1536 ((
BASE
Ë=
TIM_DMABASE_CCR2
) || \

1537 ((
BASE
Ë=
TIM_DMABASE_CCR3
) || \

1538 ((
BASE
Ë=
TIM_DMABASE_CCR4
) || \

1539 ((
BASE
Ë=
TIM_DMABASE_BDTR
) || \

1540 ((
BASE
Ë=
TIM_DMABASE_DCR
) || \

1541 ((
BASE
Ë=
TIM_DMABASE_OR
))

	)

1543 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABURSTLENGTH_1TRANSFER
) || \

1544 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_2TRANSFERS
) || \

1545 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_3TRANSFERS
) || \

1546 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_4TRANSFERS
) || \

1547 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_5TRANSFERS
) || \

1548 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_6TRANSFERS
) || \

1549 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_7TRANSFERS
) || \

1550 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_8TRANSFERS
) || \

1551 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_9TRANSFERS
) || \

1552 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_10TRANSFERS
) || \

1553 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_11TRANSFERS
) || \

1554 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_12TRANSFERS
) || \

1555 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_13TRANSFERS
) || \

1556 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_14TRANSFERS
) || \

1557 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_15TRANSFERS
) || \

1558 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_16TRANSFERS
) || \

1559 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_17TRANSFERS
) || \

1560 ((
LENGTH
Ë=
TIM_DMABURSTLENGTH_18TRANSFERS
))

	)

1562 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1572 
	#TIM_CCER_CCxE_MASK
 ((
uöt32_t
)(
TIM_CCER_CC1E
 | 
TIM_CCER_CC2E
 | 
TIM_CCER_CC3E
 | 
TIM_CCER_CC4E
))

	)

1573 
	#TIM_CCER_CCxNE_MASK
 ((
uöt32_t
)(
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
))

	)

1586 
TIM_Ba£_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_Ba£_InôTy≥Def
 *
Såu˘uª
);

1587 
TIM_TI1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
, uöt32_à
TIM_ICFûãr
);

1588 
TIM_OC2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

1589 
TIM_DMADñayPul£C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

1590 
TIM_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

1591 
TIM_DMAC≠tuªC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

1592 
TIM_CCxCh™√lCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lSèã
);

1605 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_tim_ex.h

39 #i‚de‡
__STM32F4xx_HAL_TIM_EX_H


40 
	#__STM32F4xx_HAL_TIM_EX_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

69 
uöt32_t
 
IC1Pﬁ¨ôy
;

72 
uöt32_t
 
IC1PªsˇÀr
;

75 
uöt32_t
 
IC1Fûãr
;

77 
uöt32_t
 
Commuèti⁄_Dñay
;

79 } 
	tTIM_HÆlSís‹_InôTy≥Def
;

85 
uöt32_t
 
Ma°îOuçutTriggî
;

87 
uöt32_t
 
Ma°îSœveMode
;

89 }
	tTIM_Ma°îC⁄figTy≥Def
;

96 
uöt32_t
 
OffSèãRunMode
;

98 
uöt32_t
 
OffSèãIDLEMode
;

100 
uöt32_t
 
LockLevñ
;

102 
uöt32_t
 
DódTime
;

104 
uöt32_t
 
BªakSèã
;

106 
uöt32_t
 
BªakPﬁ¨ôy
;

108 
uöt32_t
 
Autom©icOuçut
;

110 }
	tTIM_BªakDódTimeC⁄figTy≥Def
;

123 
	#TIM_TIM2_TIM8_TRGO
 (0x00000000)

	)

124 
	#TIM_TIM2_ETH_PTP
 (0x00000400)

	)

125 
	#TIM_TIM2_USBFS_SOF
 (0x00000800)

	)

126 
	#TIM_TIM2_USBHS_SOF
 (0x00000C00)

	)

127 
	#TIM_TIM5_GPIO
 (0x00000000)

	)

128 
	#TIM_TIM5_LSI
 (0x00000040)

	)

129 
	#TIM_TIM5_LSE
 (0x00000080)

	)

130 
	#TIM_TIM5_RTC
 (0x000000C0)

	)

131 
	#TIM_TIM11_GPIO
 (0x00000000)

	)

132 
	#TIM_TIM11_HSE
 (0x00000002)

	)

134 #i‡
deföed
 (
STM32F446xx
)

135 
	#TIM_TIM11_SPDIFRX
 (0x00000001)

	)

141 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

145 
	#TIM_SYSTEMBREAKINPUT_HARDFAULT
 ((
uöt32_t
)0x00000001Ë

	)

146 
	#TIM_SYSTEMBREAKINPUT_PVD
 ((
uöt32_t
)0x00000004Ë

	)

147 
	#TIM_SYSTEMBREAKINPUT_HARDFAULT_PVD
 ((
uöt32_t
)0x00000005Ë

	)

166 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_Inô
(
TIM_H™dÀTy≥Def
* 
htim
, 
TIM_HÆlSís‹_InôTy≥Def
* 
sC⁄fig
);

167 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_DeInô
(
TIM_H™dÀTy≥Def
* 
htim
);

169 
HAL_TIMEx_HÆlSís‹_M•Inô
(
TIM_H™dÀTy≥Def
* 
htim
);

170 
HAL_TIMEx_HÆlSís‹_M•DeInô
(
TIM_H™dÀTy≥Def
* 
htim
);

173 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_Sèπ
(
TIM_H™dÀTy≥Def
* 
htim
);

174 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_St›
(
TIM_H™dÀTy≥Def
* 
htim
);

176 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_Sèπ_IT
(
TIM_H™dÀTy≥Def
* 
htim
);

177 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_St›_IT
(
TIM_H™dÀTy≥Def
* 
htim
);

179 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_Sèπ_DMA
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
);

180 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_St›_DMA
(
TIM_H™dÀTy≥Def
* 
htim
);

190 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_Sèπ
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

191 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_St›
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

194 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_Sèπ_IT
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

195 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_St›_IT
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

198 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_Sèπ_DMA
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

199 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_St›_DMA
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

209 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_Sèπ
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

210 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_St›
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

213 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_Sèπ_IT
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

214 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_St›_IT
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

216 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_Sèπ_DMA
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

217 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_St›_DMA
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Ch™√l
);

227 
HAL_SètusTy≥Def
 
HAL_TIMEx_O√Pul£N_Sèπ
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
OuçutCh™√l
);

228 
HAL_SètusTy≥Def
 
HAL_TIMEx_O√Pul£N_St›
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
OuçutCh™√l
);

231 
HAL_SètusTy≥Def
 
HAL_TIMEx_O√Pul£N_Sèπ_IT
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
OuçutCh™√l
);

232 
HAL_SètusTy≥Def
 
HAL_TIMEx_O√Pul£N_St›_IT
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
OuçutCh™√l
);

241 
HAL_SètusTy≥Def
 
HAL_TIMEx_C⁄figCommuèti⁄Evít
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
I≈utTriggî
, uöt32_à
Commuèti⁄Sour˚
);

242 
HAL_SètusTy≥Def
 
HAL_TIMEx_C⁄figCommuèti⁄Evít_IT
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
I≈utTriggî
, uöt32_à
Commuèti⁄Sour˚
);

243 
HAL_SètusTy≥Def
 
HAL_TIMEx_C⁄figCommuèti⁄Evít_DMA
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
I≈utTriggî
, uöt32_à
Commuèti⁄Sour˚
);

244 
HAL_SètusTy≥Def
 
HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
* 
htim
, 
TIM_Ma°îC⁄figTy≥Def
 * 
sMa°îC⁄fig
);

245 
HAL_SètusTy≥Def
 
HAL_TIMEx_C⁄figBªakDódTime
(
TIM_H™dÀTy≥Def
* 
htim
, 
TIM_BªakDódTimeC⁄figTy≥Def
 *
sBªakDódTimeC⁄fig
);

246 
HAL_SètusTy≥Def
 
HAL_TIMEx_Rem≠C⁄fig
(
TIM_H™dÀTy≥Def
* 
htim
, 
uöt32_t
 
Rem≠
);

255 
HAL_TIMEx_Commuèti⁄CÆlback
(
TIM_H™dÀTy≥Def
* 
htim
);

256 
HAL_TIMEx_BªakCÆlback
(
TIM_H™dÀTy≥Def
* 
htim
);

257 
TIMEx_DMACommuèti⁄C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

266 
HAL_TIM_SèãTy≥Def
 
HAL_TIMEx_HÆlSís‹_GëSèã
(
TIM_H™dÀTy≥Def
* 
htim
);

282 #i‡
deföed
 (
STM32F446xx
)

283 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM_TIM2_TIM8_TRGO
)||\

284 ((
TIM_REMAP
Ë=
TIM_TIM2_ETH_PTP
)||\

285 ((
TIM_REMAP
Ë=
TIM_TIM2_USBFS_SOF
)||\

286 ((
TIM_REMAP
Ë=
TIM_TIM2_USBHS_SOF
)||\

287 ((
TIM_REMAP
Ë=
TIM_TIM5_GPIO
)||\

288 ((
TIM_REMAP
Ë=
TIM_TIM5_LSI
)||\

289 ((
TIM_REMAP
Ë=
TIM_TIM5_LSE
)||\

290 ((
TIM_REMAP
Ë=
TIM_TIM5_RTC
)||\

291 ((
TIM_REMAP
Ë=
TIM_TIM11_GPIO
)||\

292 ((
TIM_REMAP
Ë=
TIM_TIM11_SPDIFRX
)||\

293 ((
TIM_REMAP
Ë=
TIM_TIM11_HSE
))

	)

295 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM_TIM2_TIM8_TRGO
)||\

296 ((
TIM_REMAP
Ë=
TIM_TIM2_ETH_PTP
)||\

297 ((
TIM_REMAP
Ë=
TIM_TIM2_USBFS_SOF
)||\

298 ((
TIM_REMAP
Ë=
TIM_TIM2_USBHS_SOF
)||\

299 ((
TIM_REMAP
Ë=
TIM_TIM5_GPIO
)||\

300 ((
TIM_REMAP
Ë=
TIM_TIM5_LSI
)||\

301 ((
TIM_REMAP
Ë=
TIM_TIM5_LSE
)||\

302 ((
TIM_REMAP
Ë=
TIM_TIM5_RTC
)||\

303 ((
TIM_REMAP
Ë=
TIM_TIM11_GPIO
)||\

304 ((
TIM_REMAP
Ë=
TIM_TIM11_HSE
))

	)

307 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

308 
	#IS_TIM_SYSTEMBREAKINPUT
(
BREAKINPUT
Ë(((BREAKINPUTË=
TIM_SYSTEMBREAKINPUT_HARDFAULT
)||\

309 ((
BREAKINPUT
Ë=
TIM_SYSTEMBREAKINPUT_PVD
)||\

310 ((
BREAKINPUT
Ë=
TIM_SYSTEMBREAKINPUT_HARDFAULT_PVD
))

	)

314 
	#IS_TIM_DEADTIME
(
DEADTIME
Ë((DEADTIMEË<0xFF)

	)

336 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_uart.h

39 #i‚de‡
__STM32F4xx_HAL_UART_H


40 
	#__STM32F4xx_HAL_UART_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
BaudR©e
;

73 
uöt32_t
 
W‹dLígth
;

76 
uöt32_t
 
St›Bôs
;

79 
uöt32_t
 
P¨ôy
;

86 
uöt32_t
 
Mode
;

89 
uöt32_t
 
HwFlowCé
;

93 
uöt32_t
 
OvîSam∂ög
;

95 }
	tUART_InôTy≥Def
;

102 
HAL_UART_STATE_RESET
 = 0x00,

103 
HAL_UART_STATE_READY
 = 0x01,

104 
HAL_UART_STATE_BUSY
 = 0x02,

105 
HAL_UART_STATE_BUSY_TX
 = 0x12,

106 
HAL_UART_STATE_BUSY_RX
 = 0x22,

107 
HAL_UART_STATE_BUSY_TX_RX
 = 0x32,

108 
HAL_UART_STATE_TIMEOUT
 = 0x03,

109 
HAL_UART_STATE_ERROR
 = 0x04

110 }
	tHAL_UART_SèãTy≥Def
;

117 
USART_Ty≥Def
 *
In°™˚
;

119 
UART_InôTy≥Def
 
Inô
;

121 
uöt8_t
 *
pTxBuffPå
;

123 
uöt16_t
 
TxX„rSize
;

125 
uöt16_t
 
TxX„rCou¡
;

127 
uöt8_t
 *
pRxBuffPå
;

129 
uöt16_t
 
RxX„rSize
;

131 
uöt16_t
 
RxX„rCou¡
;

133 
DMA_H™dÀTy≥Def
 *
hdm©x
;

135 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

137 
HAL_LockTy≥Def
 
Lock
;

139 
__IO
 
HAL_UART_SèãTy≥Def
 
Sèã
;

141 
__IO
 
uöt32_t
 
Eº‹Code
;

143 }
	tUART_H™dÀTy≥Def
;

157 
	#HAL_UART_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

158 
	#HAL_UART_ERROR_PE
 ((
uöt32_t
)0x00000001Ë

	)

159 
	#HAL_UART_ERROR_NE
 ((
uöt32_t
)0x00000002Ë

	)

160 
	#HAL_UART_ERROR_FE
 ((
uöt32_t
)0x00000004Ë

	)

161 
	#HAL_UART_ERROR_ORE
 ((
uöt32_t
)0x00000008Ë

	)

162 
	#HAL_UART_ERROR_DMA
 ((
uöt32_t
)0x00000010Ë

	)

170 
	#UART_WORDLENGTH_8B
 ((
uöt32_t
)0x00000000)

	)

171 
	#UART_WORDLENGTH_9B
 ((
uöt32_t
)
USART_CR1_M
)

	)

179 
	#UART_STOPBITS_1
 ((
uöt32_t
)0x00000000)

	)

180 
	#UART_STOPBITS_2
 ((
uöt32_t
)
USART_CR2_STOP_1
)

	)

188 
	#UART_PARITY_NONE
 ((
uöt32_t
)0x00000000)

	)

189 
	#UART_PARITY_EVEN
 ((
uöt32_t
)
USART_CR1_PCE
)

	)

190 
	#UART_PARITY_ODD
 ((
uöt32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

198 
	#UART_HWCONTROL_NONE
 ((
uöt32_t
)0x00000000)

	)

199 
	#UART_HWCONTROL_RTS
 ((
uöt32_t
)
USART_CR3_RTSE
)

	)

200 
	#UART_HWCONTROL_CTS
 ((
uöt32_t
)
USART_CR3_CTSE
)

	)

201 
	#UART_HWCONTROL_RTS_CTS
 ((
uöt32_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

209 
	#UART_MODE_RX
 ((
uöt32_t
)
USART_CR1_RE
)

	)

210 
	#UART_MODE_TX
 ((
uöt32_t
)
USART_CR1_TE
)

	)

211 
	#UART_MODE_TX_RX
 ((
uöt32_t
)(
USART_CR1_TE
 |
USART_CR1_RE
))

	)

219 
	#UART_STATE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

220 
	#UART_STATE_ENABLE
 ((
uöt32_t
)
USART_CR1_UE
)

	)

228 
	#UART_OVERSAMPLING_16
 ((
uöt32_t
)0x00000000)

	)

229 
	#UART_OVERSAMPLING_8
 ((
uöt32_t
)
USART_CR1_OVER8
)

	)

237 
	#UART_LINBREAKDETECTLENGTH_10B
 ((
uöt32_t
)0x00000000)

	)

238 
	#UART_LINBREAKDETECTLENGTH_11B
 ((
uöt32_t
)0x00000020)

	)

246 
	#UART_WAKEUPMETHOD_IDLELINE
 ((
uöt32_t
)0x00000000)

	)

247 
	#UART_WAKEUPMETHOD_ADDRESSMARK
 ((
uöt32_t
)0x00000800)

	)

257 
	#UART_FLAG_CTS
 ((
uöt32_t
)
USART_SR_CTS
)

	)

258 
	#UART_FLAG_LBD
 ((
uöt32_t
)
USART_SR_LBD
)

	)

259 
	#UART_FLAG_TXE
 ((
uöt32_t
)
USART_SR_TXE
)

	)

260 
	#UART_FLAG_TC
 ((
uöt32_t
)
USART_SR_TC
)

	)

261 
	#UART_FLAG_RXNE
 ((
uöt32_t
)
USART_SR_RXNE
)

	)

262 
	#UART_FLAG_IDLE
 ((
uöt32_t
)
USART_SR_IDLE
)

	)

263 
	#UART_FLAG_ORE
 ((
uöt32_t
)
USART_SR_ORE
)

	)

264 
	#UART_FLAG_NE
 ((
uöt32_t
)
USART_SR_NE
)

	)

265 
	#UART_FLAG_FE
 ((
uöt32_t
)
USART_SR_FE
)

	)

266 
	#UART_FLAG_PE
 ((
uöt32_t
)
USART_SR_PE
)

	)

282 
	#UART_IT_PE
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28 | 
USART_CR1_PEIE
))

	)

283 
	#UART_IT_TXE
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28 | 
USART_CR1_TXEIE
))

	)

284 
	#UART_IT_TC
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28 | 
USART_CR1_TCIE
))

	)

285 
	#UART_IT_RXNE
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28 | 
USART_CR1_RXNEIE
))

	)

286 
	#UART_IT_IDLE
 ((
uöt32_t
)(
UART_CR1_REG_INDEX
 << 28 | 
USART_CR1_IDLEIE
))

	)

288 
	#UART_IT_LBD
 ((
uöt32_t
)(
UART_CR2_REG_INDEX
 << 28 | 
USART_CR2_LBDIE
))

	)

290 
	#UART_IT_CTS
 ((
uöt32_t
)(
UART_CR3_REG_INDEX
 << 28 | 
USART_CR3_CTSIE
))

	)

291 
	#UART_IT_ERR
 ((
uöt32_t
)(
UART_CR3_REG_INDEX
 << 28 | 
USART_CR3_EIE
))

	)

311 
	#__HAL_UART_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_UART_STATE_RESET
)

	)

316 
	#__HAL_UART_FLUSH_DRREGISTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
DR
)

	)

337 
	#__HAL_UART_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__FLAG__)Ë=(__FLAG__))

	)

361 
	#__HAL_UART_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__FLAG__))

	)

369 
	#__HAL_UART_CLEAR_PEFLAG
(
__HANDLE__
) \

371 
__IO
 
uöt32_t
 
tm¥eg
; \

372 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

373 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
DR
; \

374 
	`UNUSED
(
tm¥eg
); \

375 } 0)

	)

383 
	#__HAL_UART_CLEAR_FEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

391 
	#__HAL_UART_CLEAR_NEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

399 
	#__HAL_UART_CLEAR_OREFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

407 
	#__HAL_UART_CLEAR_IDLEFLAG
(
__HANDLE__
Ë
	`__HAL_UART_CLEAR_PEFLAG
(__HANDLE__)

	)

425 
	#UART_IT_MASK
 ((
uöt32_t
)0x0000FFFF)

	)

426 
	#__HAL_UART_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28Ë=1)? ((__HANDLE__)->
In°™˚
->
CR1
 |((__INTERRUPT__Ë& 
UART_IT_MASK
)): \

427 (((
__INTERRUPT__
Ë>> 28Ë=2)? ((
__HANDLE__
)->
In°™˚
->
CR2
 |((__INTERRUPT__Ë& 
UART_IT_MASK
)): \

428 ((
__HANDLE__
)->
In°™˚
->
CR3
 |((
__INTERRUPT__
Ë& 
UART_IT_MASK
)))

	)

445 
	#__HAL_UART_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28Ë=1)? ((__HANDLE__)->
In°™˚
->
CR1
 &~((__INTERRUPT__Ë& 
UART_IT_MASK
)): \

446 (((
__INTERRUPT__
Ë>> 28Ë=2)? ((
__HANDLE__
)->
In°™˚
->
CR2
 &~((__INTERRUPT__Ë& 
UART_IT_MASK
)): \

447 ((
__HANDLE__
)->
In°™˚
->
CR3
 &~ ((
__INTERRUPT__
Ë& 
UART_IT_MASK
)))

	)

464 
	#__HAL_UART_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
Ë(((((__IT__Ë>> 28Ë=1)? (__HANDLE__)->
In°™˚
->
CR1
:(((((
uöt32_t
)(__IT__)) >> 28) == 2)? \

465 (
__HANDLE__
)->
In°™˚
->
CR2
 : (__HANDLE__)->In°™˚->
CR3
)Ë& (((
uöt32_t
)(
__IT__
)Ë& 
UART_IT_MASK
))

	)

480 
	#__HAL_UART_HWCONTROL_CTS_ENABLE
(
__HANDLE__
) \

482 
	`SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_CTSE
); \

483 (
__HANDLE__
)->
Inô
.
HwFlowCé
 |
USART_CR3_CTSE
; \

484 } 0)

	)

499 
	#__HAL_UART_HWCONTROL_CTS_DISABLE
(
__HANDLE__
) \

501 
	`CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_CTSE
); \

502 (
__HANDLE__
)->
Inô
.
HwFlowCé
 &~(
USART_CR3_CTSE
); \

503 } 0)

	)

518 
	#__HAL_UART_HWCONTROL_RTS_ENABLE
(
__HANDLE__
) \

520 
	`SET_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_RTSE
); \

521 (
__HANDLE__
)->
Inô
.
HwFlowCé
 |
USART_CR3_RTSE
; \

522 } 0)

	)

537 
	#__HAL_UART_HWCONTROL_RTS_DISABLE
(
__HANDLE__
) \

539 
	`CLEAR_BIT
((
__HANDLE__
)->
In°™˚
->
CR3
, 
USART_CR3_RTSE
);\

540 (
__HANDLE__
)->
Inô
.
HwFlowCé
 &~(
USART_CR3_RTSE
); \

541 } 0)

	)

547 
	#__HAL_UART_ONE_BIT_SAMPLE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
|
USART_CR3_ONEBIT
)

	)

553 
	#__HAL_UART_ONE_BIT_SAMPLE_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
))

	)

559 
	#__HAL_UART_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 |
USART_CR1_UE
)

	)

565 
	#__HAL_UART_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 &~
USART_CR1_UE
)

	)

579 
HAL_SètusTy≥Def
 
HAL_UART_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

580 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

581 
HAL_SètusTy≥Def
 
HAL_LIN_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
BªakDëe˘Lígth
);

582 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 
Addªss
, 
uöt32_t
 
WakeUpMëhod
);

583 
HAL_SètusTy≥Def
 
HAL_UART_DeInô
 (
UART_H™dÀTy≥Def
 *
hu¨t
);

584 
HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

585 
HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
);

594 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

595 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

596 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

597 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

598 
HAL_SètusTy≥Def
 
HAL_UART_Tønsmô_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

599 
HAL_SètusTy≥Def
 
HAL_UART_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
);

600 
HAL_SètusTy≥Def
 
HAL_UART_DMAPau£
(
UART_H™dÀTy≥Def
 *
hu¨t
);

601 
HAL_SètusTy≥Def
 
HAL_UART_DMAResume
(
UART_H™dÀTy≥Def
 *
hu¨t
);

602 
HAL_SètusTy≥Def
 
HAL_UART_DMASt›
(
UART_H™dÀTy≥Def
 *
hu¨t
);

603 
HAL_UART_IRQH™dÀr
(
UART_H™dÀTy≥Def
 *
hu¨t
);

604 
HAL_UART_TxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

605 
HAL_UART_TxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

606 
HAL_UART_RxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

607 
HAL_UART_RxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

608 
HAL_UART_Eº‹CÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
);

617 
HAL_SètusTy≥Def
 
HAL_LIN_SídBªak
(
UART_H™dÀTy≥Def
 *
hu¨t
);

618 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_E¡îMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

619 
HAL_SètusTy≥Def
 
HAL_Mu…iPro˚ss‹_ExôMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
);

620 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_E«bÀTønsmôãr
(
UART_H™dÀTy≥Def
 *
hu¨t
);

621 
HAL_SètusTy≥Def
 
HAL_HÆfDu∂ex_E«bÀRe˚ivî
(
UART_H™dÀTy≥Def
 *
hu¨t
);

630 
HAL_UART_SèãTy≥Def
 
HAL_UART_GëSèã
(
UART_H™dÀTy≥Def
 *
hu¨t
);

631 
uöt32_t
 
HAL_UART_GëEº‹
(
UART_H™dÀTy≥Def
 *
hu¨t
);

648 
	#UART_CR1_REG_INDEX
 1

	)

649 
	#UART_CR2_REG_INDEX
 2

	)

650 
	#UART_CR3_REG_INDEX
 3

	)

659 
	#IS_UART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
UART_WORDLENGTH_8B
) || \

660 ((
LENGTH
Ë=
UART_WORDLENGTH_9B
))

	)

661 
	#IS_UART_LIN_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
UART_WORDLENGTH_8B
))

	)

662 
	#IS_UART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
UART_STOPBITS_1
) || \

663 ((
STOPBITS
Ë=
UART_STOPBITS_2
))

	)

664 
	#IS_UART_PARITY
(
PARITY
Ë(((PARITYË=
UART_PARITY_NONE
) || \

665 ((
PARITY
Ë=
UART_PARITY_EVEN
) || \

666 ((
PARITY
Ë=
UART_PARITY_ODD
))

	)

667 
	#IS_UART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

668 (((
CONTROL
Ë=
UART_HWCONTROL_NONE
) || \

669 ((
CONTROL
Ë=
UART_HWCONTROL_RTS
) || \

670 ((
CONTROL
Ë=
UART_HWCONTROL_CTS
) || \

671 ((
CONTROL
Ë=
UART_HWCONTROL_RTS_CTS
))

	)

672 
	#IS_UART_MODE
(
MODE
Ë((((MODEË& (
uöt32_t
)0x0000FFF3Ë=0x00Ë&& ((MODEË!(uöt32_t)0x000000))

	)

673 
	#IS_UART_STATE
(
STATE
Ë(((STATEË=
UART_STATE_DISABLE
) || \

674 ((
STATE
Ë=
UART_STATE_ENABLE
))

	)

675 
	#IS_UART_OVERSAMPLING
(
SAMPLING
Ë(((SAMPLINGË=
UART_OVERSAMPLING_16
) || \

676 ((
SAMPLING
Ë=
UART_OVERSAMPLING_8
))

	)

677 
	#IS_UART_LIN_OVERSAMPLING
(
SAMPLING
Ë(((SAMPLINGË=
UART_OVERSAMPLING_16
))

	)

678 
	#IS_UART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë(((LENGTHË=
UART_LINBREAKDETECTLENGTH_10B
) || \

679 ((
LENGTH
Ë=
UART_LINBREAKDETECTLENGTH_11B
))

	)

680 
	#IS_UART_WAKEUPMETHOD
(
WAKEUP
Ë(((WAKEUPË=
UART_WAKEUPMETHOD_IDLELINE
) || \

681 ((
WAKEUP
Ë=
UART_WAKEUPMETHOD_ADDRESSMARK
))

	)

682 
	#IS_UART_BAUDRATE
(
BAUDRATE
Ë((BAUDRATEË< 10500001)

	)

683 
	#IS_UART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

685 
	#UART_DIV_SAMPLING16
(
_PCLK_
, 
_BAUD_
Ë(((_PCLK_)*25)/(4*(_BAUD_)))

	)

686 
	#UART_DIVMANT_SAMPLING16
(
_PCLK_
, 
_BAUD_
Ë(
	`UART_DIV_SAMPLING16
((_PCLK_), (_BAUD_))/100)

	)

687 
	#UART_DIVFRAQ_SAMPLING16
(
_PCLK_
, 
_BAUD_
Ë(((
	`UART_DIV_SAMPLING16
((_PCLK_), (_BAUD_)Ë- (
	`UART_DIVMANT_SAMPLING16
((_PCLK_), (_BAUD_)Ë* 100)Ë* 16 + 50Ë/ 100)

	)

688 
	#UART_BRR_SAMPLING16
(
_PCLK_
, 
_BAUD_
Ë((
	`UART_DIVMANT_SAMPLING16
((_PCLK_), (_BAUD_)Ë<< 4)|(
	`UART_DIVFRAQ_SAMPLING16
((_PCLK_), (_BAUD_)Ë& 0x0F))

	)

690 
	#UART_DIV_SAMPLING8
(
_PCLK_
, 
_BAUD_
Ë(((_PCLK_)*25)/(2*(_BAUD_)))

	)

691 
	#UART_DIVMANT_SAMPLING8
(
_PCLK_
, 
_BAUD_
Ë(
	`UART_DIV_SAMPLING8
((_PCLK_), (_BAUD_))/100)

	)

692 
	#UART_DIVFRAQ_SAMPLING8
(
_PCLK_
, 
_BAUD_
Ë(((
	`UART_DIV_SAMPLING8
((_PCLK_), (_BAUD_)Ë- (
	`UART_DIVMANT_SAMPLING8
((_PCLK_), (_BAUD_)Ë* 100)Ë* 16 + 50Ë/ 100)

	)

693 
	#UART_BRR_SAMPLING8
(
_PCLK_
, 
_BAUD_
Ë((
	`UART_DIVMANT_SAMPLING8
((_PCLK_), (_BAUD_)Ë<< 4)|(
	`UART_DIVFRAQ_SAMPLING8
((_PCLK_), (_BAUD_)Ë& 0x0F))

	)

716 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_usart.h

39 #i‚de‡
__STM32F4xx_HAL_USART_H


40 
	#__STM32F4xx_HAL_USART_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
uöt32_t
 
BaudR©e
;

72 
uöt32_t
 
W‹dLígth
;

75 
uöt32_t
 
St›Bôs
;

78 
uöt32_t
 
P¨ôy
;

85 
uöt32_t
 
Mode
;

88 
uöt32_t
 
CLKPﬁ¨ôy
;

91 
uöt32_t
 
CLKPha£
;

94 
uöt32_t
 
CLKLa°Bô
;

97 }
	tUSART_InôTy≥Def
;

104 
HAL_USART_STATE_RESET
 = 0x00,

105 
HAL_USART_STATE_READY
 = 0x01,

106 
HAL_USART_STATE_BUSY
 = 0x02,

107 
HAL_USART_STATE_BUSY_TX
 = 0x12,

108 
HAL_USART_STATE_BUSY_RX
 = 0x22,

109 
HAL_USART_STATE_BUSY_TX_RX
 = 0x32,

110 
HAL_USART_STATE_TIMEOUT
 = 0x03,

111 
HAL_USART_STATE_ERROR
 = 0x04

112 }
	tHAL_USART_SèãTy≥Def
;

119 
USART_Ty≥Def
 *
In°™˚
;

121 
USART_InôTy≥Def
 
Inô
;

123 
uöt8_t
 *
pTxBuffPå
;

125 
uöt16_t
 
TxX„rSize
;

127 
__IO
 
uöt16_t
 
TxX„rCou¡
;

129 
uöt8_t
 *
pRxBuffPå
;

131 
uöt16_t
 
RxX„rSize
;

133 
__IO
 
uöt16_t
 
RxX„rCou¡
;

135 
DMA_H™dÀTy≥Def
 *
hdm©x
;

137 
DMA_H™dÀTy≥Def
 *
hdm¨x
;

139 
HAL_LockTy≥Def
 
Lock
;

141 
__IO
 
HAL_USART_SèãTy≥Def
 
Sèã
;

143 
__IO
 
uöt32_t
 
Eº‹Code
;

145 }
	tUSART_H™dÀTy≥Def
;

159 
	#HAL_USART_ERROR_NONE
 ((
uöt32_t
)0x00000000Ë

	)

160 
	#HAL_USART_ERROR_PE
 ((
uöt32_t
)0x00000001Ë

	)

161 
	#HAL_USART_ERROR_NE
 ((
uöt32_t
)0x00000002Ë

	)

162 
	#HAL_USART_ERROR_FE
 ((
uöt32_t
)0x00000004Ë

	)

163 
	#HAL_USART_ERROR_ORE
 ((
uöt32_t
)0x00000008Ë

	)

164 
	#HAL_USART_ERROR_DMA
 ((
uöt32_t
)0x00000010Ë

	)

172 
	#USART_WORDLENGTH_8B
 ((
uöt32_t
)0x00000000)

	)

173 
	#USART_WORDLENGTH_9B
 ((
uöt32_t
)
USART_CR1_M
)

	)

181 
	#USART_STOPBITS_1
 ((
uöt32_t
)0x00000000)

	)

182 
	#USART_STOPBITS_0_5
 ((
uöt32_t
)
USART_CR2_STOP_0
)

	)

183 
	#USART_STOPBITS_2
 ((
uöt32_t
)
USART_CR2_STOP_1
)

	)

184 
	#USART_STOPBITS_1_5
 ((
uöt32_t
)(
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
))

	)

192 
	#USART_PARITY_NONE
 ((
uöt32_t
)0x00000000)

	)

193 
	#USART_PARITY_EVEN
 ((
uöt32_t
)
USART_CR1_PCE
)

	)

194 
	#USART_PARITY_ODD
 ((
uöt32_t
)(
USART_CR1_PCE
 | 
USART_CR1_PS
))

	)

202 
	#USART_MODE_RX
 ((
uöt32_t
)
USART_CR1_RE
)

	)

203 
	#USART_MODE_TX
 ((
uöt32_t
)
USART_CR1_TE
)

	)

204 
	#USART_MODE_TX_RX
 ((
uöt32_t
)(
USART_CR1_TE
 |
USART_CR1_RE
))

	)

212 
	#USART_CLOCK_DISABLE
 ((
uöt32_t
)0x00000000)

	)

213 
	#USART_CLOCK_ENABLE
 ((
uöt32_t
)
USART_CR2_CLKEN
)

	)

221 
	#USART_POLARITY_LOW
 ((
uöt32_t
)0x00000000)

	)

222 
	#USART_POLARITY_HIGH
 ((
uöt32_t
)
USART_CR2_CPOL
)

	)

230 
	#USART_PHASE_1EDGE
 ((
uöt32_t
)0x00000000)

	)

231 
	#USART_PHASE_2EDGE
 ((
uöt32_t
)
USART_CR2_CPHA
)

	)

239 
	#USART_LASTBIT_DISABLE
 ((
uöt32_t
)0x00000000)

	)

240 
	#USART_LASTBIT_ENABLE
 ((
uöt32_t
)
USART_CR2_LBCL
)

	)

248 
	#USART_NACK_ENABLE
 ((
uöt32_t
)
USART_CR3_NACK
)

	)

249 
	#USART_NACK_DISABLE
 ((
uöt32_t
)0x00000000)

	)

259 
	#USART_FLAG_TXE
 ((
uöt32_t
)0x00000080)

	)

260 
	#USART_FLAG_TC
 ((
uöt32_t
)0x00000040)

	)

261 
	#USART_FLAG_RXNE
 ((
uöt32_t
)0x00000020)

	)

262 
	#USART_FLAG_IDLE
 ((
uöt32_t
)0x00000010)

	)

263 
	#USART_FLAG_ORE
 ((
uöt32_t
)0x00000008)

	)

264 
	#USART_FLAG_NE
 ((
uöt32_t
)0x00000004)

	)

265 
	#USART_FLAG_FE
 ((
uöt32_t
)0x00000002)

	)

266 
	#USART_FLAG_PE
 ((
uöt32_t
)0x00000001)

	)

281 
	#USART_IT_PE
 ((
uöt32_t
)(
USART_CR1_REG_INDEX
 << 28 | 
USART_CR1_PEIE
))

	)

282 
	#USART_IT_TXE
 ((
uöt32_t
)(
USART_CR1_REG_INDEX
 << 28 | 
USART_CR1_TXEIE
))

	)

283 
	#USART_IT_TC
 ((
uöt32_t
)(
USART_CR1_REG_INDEX
 << 28 | 
USART_CR1_TCIE
))

	)

284 
	#USART_IT_RXNE
 ((
uöt32_t
)(
USART_CR1_REG_INDEX
 << 28 | 
USART_CR1_RXNEIE
))

	)

285 
	#USART_IT_IDLE
 ((
uöt32_t
)(
USART_CR1_REG_INDEX
 << 28 | 
USART_CR1_IDLEIE
))

	)

287 
	#USART_IT_LBD
 ((
uöt32_t
)(
USART_CR2_REG_INDEX
 << 28 | 
USART_CR2_LBDIE
))

	)

289 
	#USART_IT_CTS
 ((
uöt32_t
)(
USART_CR3_REG_INDEX
 << 28 | 
USART_CR3_CTSIE
))

	)

290 
	#USART_IT_ERR
 ((
uöt32_t
)(
USART_CR3_REG_INDEX
 << 28 | 
USART_CR3_EIE
))

	)

309 
	#__HAL_USART_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_USART_STATE_RESET
)

	)

326 
	#__HAL_USART_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__FLAG__)Ë=(__FLAG__))

	)

347 
	#__HAL_USART_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__FLAG__))

	)

354 
	#__HAL_USART_CLEAR_PEFLAG
(
__HANDLE__
) \

356 
__IO
 
uöt32_t
 
tm¥eg
; \

357 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
SR
; \

358 
tm¥eg
 = (
__HANDLE__
)->
In°™˚
->
DR
; \

359 
	`UNUSED
(
tm¥eg
); \

360 } 0)

	)

367 
	#__HAL_USART_CLEAR_FEFLAG
(
__HANDLE__
Ë
	`__HAL_USART_CLEAR_PEFLAG
(__HANDLE__)

	)

374 
	#__HAL_USART_CLEAR_NEFLAG
(
__HANDLE__
Ë
	`__HAL_USART_CLEAR_PEFLAG
(__HANDLE__)

	)

381 
	#__HAL_USART_CLEAR_OREFLAG
(
__HANDLE__
Ë
	`__HAL_USART_CLEAR_PEFLAG
(__HANDLE__)

	)

388 
	#__HAL_USART_CLEAR_IDLEFLAG
(
__HANDLE__
Ë
	`__HAL_USART_CLEAR_PEFLAG
(__HANDLE__)

	)

404 
	#__HAL_USART_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28Ë=1)? ((__HANDLE__)->
In°™˚
->
CR1
 |((__INTERRUPT__Ë& 
USART_IT_MASK
)): \

405 (((
__INTERRUPT__
Ë>> 28Ë=2)? ((
__HANDLE__
)->
In°™˚
->
CR2
 |((__INTERRUPT__Ë& 
USART_IT_MASK
)): \

406 ((
__HANDLE__
)->
In°™˚
->
CR3
 |((
__INTERRUPT__
Ë& 
USART_IT_MASK
)))

	)

407 
	#__HAL_USART_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__INTERRUPT__Ë>> 28Ë=1)? ((__HANDLE__)->
In°™˚
->
CR1
 &~((__INTERRUPT__Ë& 
USART_IT_MASK
)): \

408 (((
__INTERRUPT__
Ë>> 28Ë=2)? ((
__HANDLE__
)->
In°™˚
->
CR2
 &~((__INTERRUPT__Ë& 
USART_IT_MASK
)): \

409 ((
__HANDLE__
)->
In°™˚
->
CR3
 &~ ((
__INTERRUPT__
Ë& 
USART_IT_MASK
)))

	)

424 
	#__HAL_USART_GET_IT_SOURCE
(
__HANDLE__
, 
__IT__
Ë(((((__IT__Ë>> 28Ë=1)? (__HANDLE__)->
In°™˚
->
CR1
:(((((
uöt32_t
)(__IT__)) >> 28) == 2)? \

425 (
__HANDLE__
)->
In°™˚
->
CR2
 : (__HANDLE__)->In°™˚->
CR3
)Ë& (((
uöt32_t
)(
__IT__
)Ë& 
USART_IT_MASK
))

	)

431 
	#__HAL_USART_ONE_BIT_SAMPLE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
|
USART_CR3_ONEBIT
)

	)

437 
	#__HAL_USART_ONE_BIT_SAMPLE_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
))

	)

444 
	#__HAL_USART_ENABLE
(
__HANDLE__
Ë–(__HANDLE__)->
In°™˚
->
CR1
 |
USART_CR1_UE
)

	)

451 
	#__HAL_USART_DISABLE
(
__HANDLE__
Ë–(__HANDLE__)->
In°™˚
->
CR1
 &~
USART_CR1_UE
)

	)

465 
HAL_SètusTy≥Def
 
HAL_USART_Inô
(
USART_H™dÀTy≥Def
 *
hußπ
);

466 
HAL_SètusTy≥Def
 
HAL_USART_DeInô
(
USART_H™dÀTy≥Def
 *
hußπ
);

467 
HAL_USART_M•Inô
(
USART_H™dÀTy≥Def
 *
hußπ
);

468 
HAL_USART_M•DeInô
(
USART_H™dÀTy≥Def
 *
hußπ
);

477 
HAL_SètusTy≥Def
 
HAL_USART_Tønsmô
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

478 
HAL_SètusTy≥Def
 
HAL_USART_Re˚ive
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pRxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

479 
HAL_SètusTy≥Def
 
HAL_USART_TønsmôRe˚ive
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
);

480 
HAL_SètusTy≥Def
 
HAL_USART_Tønsmô_IT
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, 
uöt16_t
 
Size
);

481 
HAL_SètusTy≥Def
 
HAL_USART_Re˚ive_IT
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pRxD©a
, 
uöt16_t
 
Size
);

482 
HAL_SètusTy≥Def
 
HAL_USART_TønsmôRe˚ive_IT
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
);

483 
HAL_SètusTy≥Def
 
HAL_USART_Tønsmô_DMA
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, 
uöt16_t
 
Size
);

484 
HAL_SètusTy≥Def
 
HAL_USART_Re˚ive_DMA
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pRxD©a
, 
uöt16_t
 
Size
);

485 
HAL_SètusTy≥Def
 
HAL_USART_TønsmôRe˚ive_DMA
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
);

486 
HAL_SètusTy≥Def
 
HAL_USART_DMAPau£
(
USART_H™dÀTy≥Def
 *
hußπ
);

487 
HAL_SètusTy≥Def
 
HAL_USART_DMAResume
(
USART_H™dÀTy≥Def
 *
hußπ
);

488 
HAL_SètusTy≥Def
 
HAL_USART_DMASt›
(
USART_H™dÀTy≥Def
 *
hußπ
);

489 
HAL_USART_IRQH™dÀr
(
USART_H™dÀTy≥Def
 *
hußπ
);

490 
HAL_USART_TxC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
);

491 
HAL_USART_TxHÆfC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
);

492 
HAL_USART_RxC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
);

493 
HAL_USART_RxHÆfC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
);

494 
HAL_USART_TxRxC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
);

495 
HAL_USART_Eº‹CÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
);

504 
HAL_USART_SèãTy≥Def
 
HAL_USART_GëSèã
(
USART_H™dÀTy≥Def
 *
hußπ
);

505 
uöt32_t
 
HAL_USART_GëEº‹
(
USART_H™dÀTy≥Def
 *
hußπ
);

522 
	#USART_IT_MASK
 ((
uöt32_t
Ë
USART_CR1_PEIE
 | 
USART_CR1_TXEIE
 | 
USART_CR1_TCIE
 | 
USART_CR1_RXNEIE
 | \

523 
USART_CR1_IDLEIE
 | 
USART_CR2_LBDIE
 | 
USART_CR3_CTSIE
 | 
USART_CR3_EIE
 )

	)

526 
	#USART_CR1_REG_INDEX
 1

	)

527 
	#USART_CR2_REG_INDEX
 2

	)

528 
	#USART_CR3_REG_INDEX
 3

	)

537 
	#IS_USART_NACK_STATE
(
NACK
Ë(((NACKË=
USART_NACK_ENABLE
) || \

538 ((
NACK
Ë=
USART_NACK_DISABLE
))

	)

539 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_LASTBIT_DISABLE
) || \

540 ((
LASTBIT
Ë=
USART_LASTBIT_ENABLE
))

	)

541 
	#IS_USART_PHASE
(
CPHA
Ë(((CPHAË=
USART_PHASE_1EDGE
Ë|| ((CPHAË=
USART_PHASE_2EDGE
))

	)

542 
	#IS_USART_POLARITY
(
CPOL
Ë(((CPOLË=
USART_POLARITY_LOW
Ë|| ((CPOLË=
USART_POLARITY_HIGH
))

	)

543 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_CLOCK_DISABLE
) || \

544 ((
CLOCK
Ë=
USART_CLOCK_ENABLE
))

	)

545 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_WORDLENGTH_8B
) || \

546 ((
LENGTH
Ë=
USART_WORDLENGTH_9B
))

	)

547 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_STOPBITS_1
) || \

548 ((
STOPBITS
Ë=
USART_STOPBITS_0_5
) || \

549 ((
STOPBITS
Ë=
USART_STOPBITS_1_5
) || \

550 ((
STOPBITS
Ë=
USART_STOPBITS_2
))

	)

551 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_PARITY_NONE
) || \

552 ((
PARITY
Ë=
USART_PARITY_EVEN
) || \

553 ((
PARITY
Ë=
USART_PARITY_ODD
))

	)

554 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt32_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt32_t)0x00))

	)

555 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë((BAUDRATEË< 10500001)

	)

557 
	#USART_DIV
(
_PCLK_
, 
_BAUD_
Ë(((_PCLK_)*25)/(2*(_BAUD_)))

	)

558 
	#USART_DIVMANT
(
_PCLK_
, 
_BAUD_
Ë(
	`USART_DIV
((_PCLK_), (_BAUD_))/100)

	)

559 
	#USART_DIVFRAQ
(
_PCLK_
, 
_BAUD_
Ë(((
	`USART_DIV
((_PCLK_), (_BAUD_)Ë- (
	`USART_DIVMANT
((_PCLK_), (_BAUD_)Ë* 100)Ë* 16 + 50Ë/ 100)

	)

560 
	#USART_BRR
(
_PCLK_
, 
_BAUD_
Ë((
	`USART_DIVMANT
((_PCLK_), (_BAUD_)Ë<< 4)|(
	`USART_DIVFRAQ
((_PCLK_), (_BAUD_)Ë& 0x0F))

	)

582 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_wwdg.h

39 #i‚de‡
__STM32F4xx_HAL_WWDG_H


40 
	#__STM32F4xx_HAL_WWDG_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

67 
HAL_WWDG_STATE_RESET
 = 0x00,

68 
HAL_WWDG_STATE_READY
 = 0x01,

69 
HAL_WWDG_STATE_BUSY
 = 0x02,

70 
HAL_WWDG_STATE_TIMEOUT
 = 0x03,

71 
HAL_WWDG_STATE_ERROR
 = 0x04

72 }
	tHAL_WWDG_SèãTy≥Def
;

79 
uöt32_t
 
PªsˇÀr
;

82 
uöt32_t
 
Wödow
;

85 
uöt32_t
 
Cou¡î
;

88 }
	tWWDG_InôTy≥Def
;

95 
WWDG_Ty≥Def
 *
In°™˚
;

97 
WWDG_InôTy≥Def
 
Inô
;

99 
HAL_LockTy≥Def
 
Lock
;

101 
__IO
 
HAL_WWDG_SèãTy≥Def
 
Sèã
;

103 }
	tWWDG_H™dÀTy≥Def
;

116 
	#WWDG_IT_EWI
 
WWDG_CFR_EWI


	)

125 
	#WWDG_FLAG_EWIF
 
WWDG_SR_EWIF


	)

133 
	#WWDG_PRESCALER_1
 ((
uöt32_t
)0x00000000Ë

	)

134 
	#WWDG_PRESCALER_2
 
WWDG_CFR_WDGTB0


	)

135 
	#WWDG_PRESCALER_4
 
WWDG_CFR_WDGTB1


	)

136 
	#WWDG_PRESCALER_8
 
WWDG_CFR_WDGTB


	)

154 
	#__HAL_WWDG_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_WWDG_STATE_RESET
)

	)

161 
	#__HAL_WWDG_ENABLE
(
__HANDLE__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CR
, 
WWDG_CR_WDGA
)

	)

170 
	#__HAL_WWDG_DISABLE
(
__HANDLE__
Ë

	)

180 
	#__HAL_WWDG_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`__HAL_WWDG_GET_FLAG
((__HANDLE__),(__INTERRUPT__))

	)

189 
	#__HAL_WWDG_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`__HAL_WWDG_CLEAR_FLAG
((__HANDLE__), (__INTERRUPT__))

	)

200 
	#__HAL_WWDG_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CFR
, (__INTERRUPT__))

	)

212 
	#__HAL_WWDG_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë

	)

222 
	#__HAL_WWDG_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 & (__FLAG__)Ë=(__FLAG__))

	)

232 
	#__HAL_WWDG_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
Ë~(__FLAG__))

	)

241 
	#__HAL_WWDG_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
CFR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

256 
HAL_SètusTy≥Def
 
HAL_WWDG_Inô
(
WWDG_H™dÀTy≥Def
 *
hwwdg
);

257 
HAL_SètusTy≥Def
 
HAL_WWDG_DeInô
(
WWDG_H™dÀTy≥Def
 *
hwwdg
);

258 
HAL_WWDG_M•Inô
(
WWDG_H™dÀTy≥Def
 *
hwwdg
);

259 
HAL_WWDG_M•DeInô
(
WWDG_H™dÀTy≥Def
 *
hwwdg
);

260 
HAL_WWDG_WakeupCÆlback
(
WWDG_H™dÀTy≥Def
* 
hwwdg
);

269 
HAL_SètusTy≥Def
 
HAL_WWDG_Sèπ
(
WWDG_H™dÀTy≥Def
 *
hwwdg
);

270 
HAL_SètusTy≥Def
 
HAL_WWDG_Sèπ_IT
(
WWDG_H™dÀTy≥Def
 *
hwwdg
);

271 
HAL_SètusTy≥Def
 
HAL_WWDG_Re‰esh
(
WWDG_H™dÀTy≥Def
 *
hwwdg
, 
uöt32_t
 
Cou¡î
);

272 
HAL_WWDG_IRQH™dÀr
(
WWDG_H™dÀTy≥Def
 *
hwwdg
);

281 
HAL_WWDG_SèãTy≥Def
 
HAL_WWDG_GëSèã
(
WWDG_H™dÀTy≥Def
 *
hwwdg
);

303 
	#WWDG_CFR_BASE
 (
uöt32_t
)(
WWDG_BASE
 + 0x04)

	)

317 
	#IS_WWDG_PRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
WWDG_PRESCALER_1
) || \

318 ((
__PRESCALER__
Ë=
WWDG_PRESCALER_2
) || \

319 ((
__PRESCALER__
Ë=
WWDG_PRESCALER_4
) || \

320 ((
__PRESCALER__
Ë=
WWDG_PRESCALER_8
))

	)

321 
	#IS_WWDG_WINDOW
(
__WINDOW__
Ë((__WINDOW__Ë<0x7F)

	)

322 
	#IS_WWDG_COUNTER
(
__COUNTER__
Ë(((__COUNTER__Ë>0x40Ë&& ((__COUNTER__Ë<0x7F))

	)

343 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_ll_fmc.h

39 #i‚de‡
__STM32F4xx_LL_FMC_H


40 
	#__STM32F4xx_LL_FMC_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

56 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

57 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

68 
uöt32_t
 
NSB™k
;

71 
uöt32_t
 
D©aAddªssMux
;

75 
uöt32_t
 
Mem‹yTy≥
;

79 
uöt32_t
 
Mem‹yD©aWidth
;

82 
uöt32_t
 
Bur°Ac˚ssMode
;

86 
uöt32_t
 
WaôSig«lPﬁ¨ôy
;

90 
uöt32_t
 
WøpMode
;

95 
uöt32_t
 
WaôSig«lA˘ive
;

100 
uöt32_t
 
WrôeO≥øti⁄
;

103 
uöt32_t
 
WaôSig«l
;

107 
uöt32_t
 
ExãndedMode
;

110 
uöt32_t
 
Asynchr⁄ousWaô
;

114 
uöt32_t
 
WrôeBur°
;

117 
uöt32_t
 
C⁄töuousClock
;

122 
uöt32_t
 
WrôeFifo
;

128 
uöt32_t
 
PageSize
;

132 }
	tFMC_NORSRAM_InôTy≥Def
;

139 
uöt32_t
 
AddªssSëupTime
;

144 
uöt32_t
 
AddªssHﬁdTime
;

149 
uöt32_t
 
D©aSëupTime
;

155 
uöt32_t
 
BusTu∫AroundDuøti⁄
;

160 
uöt32_t
 
CLKDivisi⁄
;

165 
uöt32_t
 
D©aL©ícy
;

173 
uöt32_t
 
Ac˚ssMode
;

175 }
	tFMC_NORSRAM_TimögTy≥Def
;

182 
uöt32_t
 
N™dB™k
;

185 
uöt32_t
 
Waô„©uª
;

188 
uöt32_t
 
Mem‹yD©aWidth
;

191 
uöt32_t
 
EccCompuèti⁄
;

194 
uöt32_t
 
ECCPageSize
;

197 
uöt32_t
 
TCLRSëupTime
;

201 
uöt32_t
 
TARSëupTime
;

204 }
	tFMC_NAND_InôTy≥Def
;

211 
uöt32_t
 
SëupTime
;

217 
uöt32_t
 
WaôSëupTime
;

223 
uöt32_t
 
HﬁdSëupTime
;

230 
uöt32_t
 
HiZSëupTime
;

235 }
	tFMC_NAND_PCC_TimögTy≥Def
;

242 
uöt32_t
 
Waô„©uª
;

245 
uöt32_t
 
TCLRSëupTime
;

249 
uöt32_t
 
TARSëupTime
;

252 }
	tFMC_PCCARD_InôTy≥Def
;

259 
uöt32_t
 
SDB™k
;

262 
uöt32_t
 
CﬁumnBôsNumbî
;

265 
uöt32_t
 
RowBôsNumbî
;

268 
uöt32_t
 
Mem‹yD©aWidth
;

271 
uöt32_t
 
I¡î«lB™kNumbî
;

274 
uöt32_t
 
CASL©ícy
;

277 
uöt32_t
 
WrôePrŸe˘i⁄
;

280 
uöt32_t
 
SDClockPîiod
;

284 
uöt32_t
 
RódBur°
;

288 
uöt32_t
 
RódPùeDñay
;

290 }
	tFMC_SDRAM_InôTy≥Def
;

297 
uöt32_t
 
LﬂdToA˘iveDñay
;

301 
uöt32_t
 
ExôSñfRe‰eshDñay
;

305 
uöt32_t
 
SñfRe‰eshTime
;

309 
uöt32_t
 
RowCy˛eDñay
;

314 
uöt32_t
 
WrôeRecovîyTime
;

317 
uöt32_t
 
RPDñay
;

321 
uöt32_t
 
RCDDñay
;

324 }
	tFMC_SDRAM_TimögTy≥Def
;

331 
uöt32_t
 
Comm™dMode
;

334 
uöt32_t
 
Comm™dT¨gë
;

337 
uöt32_t
 
AutoRe‰eshNumbî
;

340 
uöt32_t
 
ModeRegi°îDeföôi⁄
;

341 }
	tFMC_SDRAM_Comm™dTy≥Def
;

357 
	#FMC_NORSRAM_BANK1
 ((
uöt32_t
)0x00000000)

	)

358 
	#FMC_NORSRAM_BANK2
 ((
uöt32_t
)0x00000002)

	)

359 
	#FMC_NORSRAM_BANK3
 ((
uöt32_t
)0x00000004)

	)

360 
	#FMC_NORSRAM_BANK4
 ((
uöt32_t
)0x00000006)

	)

368 
	#FMC_DATA_ADDRESS_MUX_DISABLE
 ((
uöt32_t
)0x00000000)

	)

369 
	#FMC_DATA_ADDRESS_MUX_ENABLE
 ((
uöt32_t
)0x00000002)

	)

377 
	#FMC_MEMORY_TYPE_SRAM
 ((
uöt32_t
)0x00000000)

	)

378 
	#FMC_MEMORY_TYPE_PSRAM
 ((
uöt32_t
)0x00000004)

	)

379 
	#FMC_MEMORY_TYPE_NOR
 ((
uöt32_t
)0x00000008)

	)

387 
	#FMC_NORSRAM_MEM_BUS_WIDTH_8
 ((
uöt32_t
)0x00000000)

	)

388 
	#FMC_NORSRAM_MEM_BUS_WIDTH_16
 ((
uöt32_t
)0x00000010)

	)

389 
	#FMC_NORSRAM_MEM_BUS_WIDTH_32
 ((
uöt32_t
)0x00000020)

	)

397 
	#FMC_NORSRAM_FLASH_ACCESS_ENABLE
 ((
uöt32_t
)0x00000040)

	)

398 
	#FMC_NORSRAM_FLASH_ACCESS_DISABLE
 ((
uöt32_t
)0x00000000)

	)

406 
	#FMC_BURST_ACCESS_MODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

407 
	#FMC_BURST_ACCESS_MODE_ENABLE
 ((
uöt32_t
)0x00000100)

	)

415 
	#FMC_WAIT_SIGNAL_POLARITY_LOW
 ((
uöt32_t
)0x00000000)

	)

416 
	#FMC_WAIT_SIGNAL_POLARITY_HIGH
 ((
uöt32_t
)0x00000200)

	)

426 
	#FMC_WRAP_MODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

427 
	#FMC_WRAP_MODE_ENABLE
 ((
uöt32_t
)0x00000400)

	)

435 
	#FMC_WAIT_TIMING_BEFORE_WS
 ((
uöt32_t
)0x00000000)

	)

436 
	#FMC_WAIT_TIMING_DURING_WS
 ((
uöt32_t
)0x00000800)

	)

444 
	#FMC_WRITE_OPERATION_DISABLE
 ((
uöt32_t
)0x00000000)

	)

445 
	#FMC_WRITE_OPERATION_ENABLE
 ((
uöt32_t
)0x00001000)

	)

453 
	#FMC_WAIT_SIGNAL_DISABLE
 ((
uöt32_t
)0x00000000)

	)

454 
	#FMC_WAIT_SIGNAL_ENABLE
 ((
uöt32_t
)0x00002000)

	)

462 
	#FMC_EXTENDED_MODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

463 
	#FMC_EXTENDED_MODE_ENABLE
 ((
uöt32_t
)0x00004000)

	)

471 
	#FMC_ASYNCHRONOUS_WAIT_DISABLE
 ((
uöt32_t
)0x00000000)

	)

472 
	#FMC_ASYNCHRONOUS_WAIT_ENABLE
 ((
uöt32_t
)0x00008000)

	)

481 
	#FMC_PAGE_SIZE_NONE
 ((
uöt32_t
)0x00000000)

	)

482 
	#FMC_PAGE_SIZE_128
 ((
uöt32_t
)
FMC_BCR1_CPSIZE_0
)

	)

483 
	#FMC_PAGE_SIZE_256
 ((
uöt32_t
)
FMC_BCR1_CPSIZE_1
)

	)

484 
	#FMC_PAGE_SIZE_1024
 ((
uöt32_t
)
FMC_BCR1_CPSIZE_2
)

	)

493 
	#FMC_WRITE_FIFO_DISABLE
 ((
uöt32_t
)0x00000000)

	)

494 
	#FMC_WRITE_FIFO_ENABLE
 ((
uöt32_t
)
FMC_BCR1_WFDIS
)

	)

502 
	#FMC_WRITE_BURST_DISABLE
 ((
uöt32_t
)0x00000000)

	)

503 
	#FMC_WRITE_BURST_ENABLE
 ((
uöt32_t
)0x00080000)

	)

511 
	#FMC_CONTINUOUS_CLOCK_SYNC_ONLY
 ((
uöt32_t
)0x00000000)

	)

512 
	#FMC_CONTINUOUS_CLOCK_SYNC_ASYNC
 ((
uöt32_t
)0x00100000)

	)

520 
	#FMC_ACCESS_MODE_A
 ((
uöt32_t
)0x00000000)

	)

521 
	#FMC_ACCESS_MODE_B
 ((
uöt32_t
)0x10000000)

	)

522 
	#FMC_ACCESS_MODE_C
 ((
uöt32_t
)0x20000000)

	)

523 
	#FMC_ACCESS_MODE_D
 ((
uöt32_t
)0x30000000)

	)

538 
	#FMC_NAND_BANK2
 ((
uöt32_t
)0x00000010)

	)

539 
	#FMC_NAND_BANK3
 ((
uöt32_t
)0x00000100)

	)

547 
	#FMC_NAND_PCC_WAIT_FEATURE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

548 
	#FMC_NAND_PCC_WAIT_FEATURE_ENABLE
 ((
uöt32_t
)0x00000002)

	)

556 
	#FMC_PCR_MEMORY_TYPE_PCCARD
 ((
uöt32_t
)0x00000000)

	)

557 
	#FMC_PCR_MEMORY_TYPE_NAND
 ((
uöt32_t
)0x00000008)

	)

565 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_8
 ((
uöt32_t
)0x00000000)

	)

566 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_16
 ((
uöt32_t
)0x00000010)

	)

574 
	#FMC_NAND_ECC_DISABLE
 ((
uöt32_t
)0x00000000)

	)

575 
	#FMC_NAND_ECC_ENABLE
 ((
uöt32_t
)0x00000040)

	)

583 
	#FMC_NAND_ECC_PAGE_SIZE_256BYTE
 ((
uöt32_t
)0x00000000)

	)

584 
	#FMC_NAND_ECC_PAGE_SIZE_512BYTE
 ((
uöt32_t
)0x00020000)

	)

585 
	#FMC_NAND_ECC_PAGE_SIZE_1024BYTE
 ((
uöt32_t
)0x00040000)

	)

586 
	#FMC_NAND_ECC_PAGE_SIZE_2048BYTE
 ((
uöt32_t
)0x00060000)

	)

587 
	#FMC_NAND_ECC_PAGE_SIZE_4096BYTE
 ((
uöt32_t
)0x00080000)

	)

588 
	#FMC_NAND_ECC_PAGE_SIZE_8192BYTE
 ((
uöt32_t
)0x000A0000)

	)

603 
	#FMC_SDRAM_BANK1
 ((
uöt32_t
)0x00000000)

	)

604 
	#FMC_SDRAM_BANK2
 ((
uöt32_t
)0x00000001)

	)

612 
	#FMC_SDRAM_COLUMN_BITS_NUM_8
 ((
uöt32_t
)0x00000000)

	)

613 
	#FMC_SDRAM_COLUMN_BITS_NUM_9
 ((
uöt32_t
)0x00000001)

	)

614 
	#FMC_SDRAM_COLUMN_BITS_NUM_10
 ((
uöt32_t
)0x00000002)

	)

615 
	#FMC_SDRAM_COLUMN_BITS_NUM_11
 ((
uöt32_t
)0x00000003)

	)

623 
	#FMC_SDRAM_ROW_BITS_NUM_11
 ((
uöt32_t
)0x00000000)

	)

624 
	#FMC_SDRAM_ROW_BITS_NUM_12
 ((
uöt32_t
)0x00000004)

	)

625 
	#FMC_SDRAM_ROW_BITS_NUM_13
 ((
uöt32_t
)0x00000008)

	)

633 
	#FMC_SDRAM_MEM_BUS_WIDTH_8
 ((
uöt32_t
)0x00000000)

	)

634 
	#FMC_SDRAM_MEM_BUS_WIDTH_16
 ((
uöt32_t
)0x00000010)

	)

635 
	#FMC_SDRAM_MEM_BUS_WIDTH_32
 ((
uöt32_t
)0x00000020)

	)

643 
	#FMC_SDRAM_INTERN_BANKS_NUM_2
 ((
uöt32_t
)0x00000000)

	)

644 
	#FMC_SDRAM_INTERN_BANKS_NUM_4
 ((
uöt32_t
)0x00000040)

	)

652 
	#FMC_SDRAM_CAS_LATENCY_1
 ((
uöt32_t
)0x00000080)

	)

653 
	#FMC_SDRAM_CAS_LATENCY_2
 ((
uöt32_t
)0x00000100)

	)

654 
	#FMC_SDRAM_CAS_LATENCY_3
 ((
uöt32_t
)0x00000180)

	)

662 
	#FMC_SDRAM_WRITE_PROTECTION_DISABLE
 ((
uöt32_t
)0x00000000)

	)

663 
	#FMC_SDRAM_WRITE_PROTECTION_ENABLE
 ((
uöt32_t
)0x00000200)

	)

672 
	#FMC_SDRAM_CLOCK_DISABLE
 ((
uöt32_t
)0x00000000)

	)

673 
	#FMC_SDRAM_CLOCK_PERIOD_2
 ((
uöt32_t
)0x00000800)

	)

674 
	#FMC_SDRAM_CLOCK_PERIOD_3
 ((
uöt32_t
)0x00000C00)

	)

682 
	#FMC_SDRAM_RBURST_DISABLE
 ((
uöt32_t
)0x00000000)

	)

683 
	#FMC_SDRAM_RBURST_ENABLE
 ((
uöt32_t
)0x00001000)

	)

691 
	#FMC_SDRAM_RPIPE_DELAY_0
 ((
uöt32_t
)0x00000000)

	)

692 
	#FMC_SDRAM_RPIPE_DELAY_1
 ((
uöt32_t
)0x00002000)

	)

693 
	#FMC_SDRAM_RPIPE_DELAY_2
 ((
uöt32_t
)0x00004000)

	)

701 
	#FMC_SDRAM_CMD_NORMAL_MODE
 ((
uöt32_t
)0x00000000)

	)

702 
	#FMC_SDRAM_CMD_CLK_ENABLE
 ((
uöt32_t
)0x00000001)

	)

703 
	#FMC_SDRAM_CMD_PALL
 ((
uöt32_t
)0x00000002)

	)

704 
	#FMC_SDRAM_CMD_AUTOREFRESH_MODE
 ((
uöt32_t
)0x00000003)

	)

705 
	#FMC_SDRAM_CMD_LOAD_MODE
 ((
uöt32_t
)0x00000004)

	)

706 
	#FMC_SDRAM_CMD_SELFREFRESH_MODE
 ((
uöt32_t
)0x00000005)

	)

707 
	#FMC_SDRAM_CMD_POWERDOWN_MODE
 ((
uöt32_t
)0x00000006)

	)

715 
	#FMC_SDRAM_CMD_TARGET_BANK2
 
FMC_SDCMR_CTB2


	)

716 
	#FMC_SDRAM_CMD_TARGET_BANK1
 
FMC_SDCMR_CTB1


	)

717 
	#FMC_SDRAM_CMD_TARGET_BANK1_2
 ((
uöt32_t
)0x00000018)

	)

725 
	#FMC_SDRAM_NORMAL_MODE
 ((
uöt32_t
)0x00000000)

	)

726 
	#FMC_SDRAM_SELF_REFRESH_MODE
 
FMC_SDSR_MODES1_0


	)

727 
	#FMC_SDRAM_POWER_DOWN_MODE
 
FMC_SDSR_MODES1_1


	)

739 
	#FMC_IT_RISING_EDGE
 ((
uöt32_t
)0x00000008)

	)

740 
	#FMC_IT_LEVEL
 ((
uöt32_t
)0x00000010)

	)

741 
	#FMC_IT_FALLING_EDGE
 ((
uöt32_t
)0x00000020)

	)

742 
	#FMC_IT_REFRESH_ERROR
 ((
uöt32_t
)0x00004000)

	)

750 
	#FMC_FLAG_RISING_EDGE
 ((
uöt32_t
)0x00000001)

	)

751 
	#FMC_FLAG_LEVEL
 ((
uöt32_t
)0x00000002)

	)

752 
	#FMC_FLAG_FALLING_EDGE
 ((
uöt32_t
)0x00000004)

	)

753 
	#FMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

754 
	#FMC_SDRAM_FLAG_REFRESH_IT
 
FMC_SDSR_RE


	)

755 
	#FMC_SDRAM_FLAG_BUSY
 
FMC_SDSR_BUSY


	)

756 
	#FMC_SDRAM_FLAG_REFRESH_ERROR
 
FMC_SDRTR_CRE


	)

764 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

765 
	#FMC_NAND_Ty≥Def
 
FMC_B™k3_Ty≥Def


	)

767 
	#FMC_NAND_Ty≥Def
 
FMC_B™k2_3_Ty≥Def


	)

768 
	#FMC_PCCARD_Ty≥Def
 
FMC_B™k4_Ty≥Def


	)

770 
	#FMC_NORSRAM_Ty≥Def
 
FMC_B™k1_Ty≥Def


	)

771 
	#FMC_NORSRAM_EXTENDED_Ty≥Def
 
FMC_B™k1E_Ty≥Def


	)

772 
	#FMC_SDRAM_Ty≥Def
 
FMC_B™k5_6_Ty≥Def


	)

775 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

776 
	#FMC_NAND_DEVICE
 
FMC_B™k3


	)

778 
	#FMC_NAND_DEVICE
 
FMC_B™k2_3


	)

779 
	#FMC_PCCARD_DEVICE
 
FMC_B™k4


	)

781 
	#FMC_NORSRAM_DEVICE
 
FMC_B™k1


	)

782 
	#FMC_NORSRAM_EXTENDED_DEVICE
 
FMC_B™k1E


	)

783 
	#FMC_SDRAM_DEVICE
 
FMC_B™k5_6


	)

807 
	#__FMC_NORSRAM_ENABLE
(
__INSTANCE__
, 
__BANK__
Ë((__INSTANCE__)->
BTCR
[(__BANK__)] |
FMC_BCR1_MBKEN
)

	)

815 
	#__FMC_NORSRAM_DISABLE
(
__INSTANCE__
, 
__BANK__
Ë((__INSTANCE__)->
BTCR
[(__BANK__)] &~
FMC_BCR1_MBKEN
)

	)

824 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

831 
	#__FMC_NAND_ENABLE
(
__INSTANCE__
, 
__BANK__
Ë((__INSTANCE__)->
PCR
 |
FMC_PCR_PBKEN
)

	)

839 
	#__FMC_NAND_DISABLE
(
__INSTANCE__
, 
__BANK__
Ë((__INSTANCE__)->
PCR
 &~
FMC_PCR_PBKEN
)

	)

847 
	#__FMC_NAND_ENABLE
(
__INSTANCE__
, 
__BANK__
Ë(((__BANK__Ë=
FMC_NAND_BANK2
)? ((__INSTANCE__)->
PCR2
 |
FMC_PCR2_PBKEN
): \

848 ((
__INSTANCE__
)->
PCR3
 |
FMC_PCR3_PBKEN
))

	)

856 
	#__FMC_NAND_DISABLE
(
__INSTANCE__
, 
__BANK__
Ë(((__BANK__Ë=
FMC_NAND_BANK2
)? ((__INSTANCE__)->
PCR2
 &~
FMC_PCR2_PBKEN
): \

857 ((
__INSTANCE__
)->
PCR3
 &~
FMC_PCR3_PBKEN
))

	)

863 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

873 
	#__FMC_PCCARD_ENABLE
(
__INSTANCE__
Ë((__INSTANCE__)->
PCR4
 |
FMC_PCR4_PBKEN
)

	)

880 
	#__FMC_PCCARD_DISABLE
(
__INSTANCE__
Ë((__INSTANCE__)->
PCR4
 &~
FMC_PCR4_PBKEN
)

	)

890 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

902 
	#__FMC_NAND_ENABLE_IT
(
__INSTANCE__
, 
__BANK__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
SR
 |(__INTERRUPT__))

	)

915 
	#__FMC_NAND_DISABLE_IT
(
__INSTANCE__
, 
__BANK__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
SR
 &~(__INTERRUPT__))

	)

929 
	#__FMC_NAND_GET_FLAG
(
__INSTANCE__
, 
__BANK__
, 
__FLAG__
Ë(((__INSTANCE__)->
SR
 &(__FLAG__)Ë=(__FLAG__))

	)

942 
	#__FMC_NAND_CLEAR_FLAG
(
__INSTANCE__
, 
__BANK__
, 
__FLAG__
Ë((__INSTANCE__)->
SR
 &~(__FLAG__))

	)

955 
	#__FMC_NAND_ENABLE_IT
(
__INSTANCE__
, 
__BANK__
, 
__INTERRUPT__
Ë(((__BANK__Ë=
FMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 |= (__INTERRUPT__)): \

956 ((
__INSTANCE__
)->
SR3
 |(
__INTERRUPT__
)))

	)

969 
	#__FMC_NAND_DISABLE_IT
(
__INSTANCE__
, 
__BANK__
, 
__INTERRUPT__
Ë(((__BANK__Ë=
FMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 &= ~(__INTERRUPT__)): \

970 ((
__INSTANCE__
)->
SR3
 &~(
__INTERRUPT__
)))

	)

984 
	#__FMC_NAND_GET_FLAG
(
__INSTANCE__
, 
__BANK__
, 
__FLAG__
Ë(((__BANK__Ë=
FMC_NAND_BANK2
)? (((__INSTANCE__)->
SR2
 &(__FLAG__)) == (__FLAG__)): \

985 (((
__INSTANCE__
)->
SR3
 &(
__FLAG__
)Ë=(__FLAG__)))

	)

998 
	#__FMC_NAND_CLEAR_FLAG
(
__INSTANCE__
, 
__BANK__
, 
__FLAG__
Ë(((__BANK__Ë=
FMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 &= ~(__FLAG__)): \

999 ((
__INSTANCE__
)->
SR3
 &~(
__FLAG__
)))

	)

1002 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

1013 
	#__FMC_PCCARD_ENABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
SR4
 |(__INTERRUPT__))

	)

1025 
	#__FMC_PCCARD_DISABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
SR4
 &~(__INTERRUPT__))

	)

1038 
	#__FMC_PCCARD_GET_FLAG
(
__INSTANCE__
, 
__FLAG__
Ë(((__INSTANCE__)->
SR4
 &(__FLAG__)Ë=(__FLAG__))

	)

1051 
	#__FMC_PCCARD_CLEAR_FLAG
(
__INSTANCE__
, 
__FLAG__
Ë((__INSTANCE__)->
SR4
 &~(__FLAG__))

	)

1062 
	#__FMC_SDRAM_ENABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
SDRTR
 |(__INTERRUPT__))

	)

1072 
	#__FMC_SDRAM_DISABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
SDRTR
 &~(__INTERRUPT__))

	)

1084 
	#__FMC_SDRAM_GET_FLAG
(
__INSTANCE__
, 
__FLAG__
Ë(((__INSTANCE__)->
SDSR
 &(__FLAG__)Ë=(__FLAG__))

	)

1094 
	#__FMC_SDRAM_CLEAR_FLAG
(
__INSTANCE__
, 
__FLAG__
Ë((__INSTANCE__)->
SDRTR
 |(__FLAG__))

	)

1102 
	#IS_FMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FMC_NORSRAM_BANK1
) || \

1103 ((
BANK
Ë=
FMC_NORSRAM_BANK2
) || \

1104 ((
BANK
Ë=
FMC_NORSRAM_BANK3
) || \

1105 ((
BANK
Ë=
FMC_NORSRAM_BANK4
))

	)

1107 
	#IS_FMC_MUX
(
__MUX__
Ë(((__MUX__Ë=
FMC_DATA_ADDRESS_MUX_DISABLE
) || \

1108 ((
__MUX__
Ë=
FMC_DATA_ADDRESS_MUX_ENABLE
))

	)

1110 
	#IS_FMC_MEMORY
(
__MEMORY__
Ë(((__MEMORY__Ë=
FMC_MEMORY_TYPE_SRAM
) || \

1111 ((
__MEMORY__
Ë=
FMC_MEMORY_TYPE_PSRAM
)|| \

1112 ((
__MEMORY__
Ë=
FMC_MEMORY_TYPE_NOR
))

	)

1114 
	#IS_FMC_NORSRAM_MEMORY_WIDTH
(
__WIDTH__
Ë(((__WIDTH__Ë=
FMC_NORSRAM_MEM_BUS_WIDTH_8
) || \

1115 ((
__WIDTH__
Ë=
FMC_NORSRAM_MEM_BUS_WIDTH_16
) || \

1116 ((
__WIDTH__
Ë=
FMC_NORSRAM_MEM_BUS_WIDTH_32
))

	)

1118 
	#IS_FMC_ACCESS_MODE
(
__MODE__
Ë(((__MODE__Ë=
FMC_ACCESS_MODE_A
) || \

1119 ((
__MODE__
Ë=
FMC_ACCESS_MODE_B
) || \

1120 ((
__MODE__
Ë=
FMC_ACCESS_MODE_C
) || \

1121 ((
__MODE__
Ë=
FMC_ACCESS_MODE_D
))

	)

1123 
	#IS_FMC_NAND_BANK
(
BANK
Ë(((BANKË=
FMC_NAND_BANK2
) || \

1124 ((
BANK
Ë=
FMC_NAND_BANK3
))

	)

1126 
	#IS_FMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FMC_NAND_PCC_WAIT_FEATURE_DISABLE
) || \

1127 ((
FEATURE
Ë=
FMC_NAND_PCC_WAIT_FEATURE_ENABLE
))

	)

1129 
	#IS_FMC_NAND_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_NAND_PCC_MEM_BUS_WIDTH_8
) || \

1130 ((
WIDTH
Ë=
FMC_NAND_PCC_MEM_BUS_WIDTH_16
))

	)

1132 
	#IS_FMC_ECC_STATE
(
STATE
Ë(((STATEË=
FMC_NAND_ECC_DISABLE
) || \

1133 ((
STATE
Ë=
FMC_NAND_ECC_ENABLE
))

	)

1135 
	#IS_FMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FMC_NAND_ECC_PAGE_SIZE_256BYTE
) || \

1136 ((
SIZE
Ë=
FMC_NAND_ECC_PAGE_SIZE_512BYTE
) || \

1137 ((
SIZE
Ë=
FMC_NAND_ECC_PAGE_SIZE_1024BYTE
) || \

1138 ((
SIZE
Ë=
FMC_NAND_ECC_PAGE_SIZE_2048BYTE
) || \

1139 ((
SIZE
Ë=
FMC_NAND_ECC_PAGE_SIZE_4096BYTE
) || \

1140 ((
SIZE
Ë=
FMC_NAND_ECC_PAGE_SIZE_8192BYTE
))

	)

1142 
	#IS_FMC_TCLR_TIME
(
TIME
Ë((TIMEË<255)

	)

1144 
	#IS_FMC_TAR_TIME
(
TIME
Ë((TIMEË<255)

	)

1146 
	#IS_FMC_SETUP_TIME
(
TIME
Ë((TIMEË<255)

	)

1148 
	#IS_FMC_WAIT_TIME
(
TIME
Ë((TIMEË<255)

	)

1150 
	#IS_FMC_HOLD_TIME
(
TIME
Ë((TIMEË<255)

	)

1152 
	#IS_FMC_HIZ_TIME
(
TIME
Ë((TIMEË<255)

	)

1154 
	#IS_FMC_NORSRAM_DEVICE
(
__INSTANCE__
Ë((__INSTANCE__Ë=
FMC_NORSRAM_DEVICE
)

	)

1156 
	#IS_FMC_NORSRAM_EXTENDED_DEVICE
(
__INSTANCE__
Ë((__INSTANCE__Ë=
FMC_NORSRAM_EXTENDED_DEVICE
)

	)

1158 
	#IS_FMC_NAND_DEVICE
(
__INSTANCE__
Ë((__INSTANCE__Ë=
FMC_NAND_DEVICE
)

	)

1160 
	#IS_FMC_PCCARD_DEVICE
(
__INSTANCE__
Ë((__INSTANCE__Ë=
FMC_PCCARD_DEVICE
)

	)

1162 
	#IS_FMC_BURSTMODE
(
__STATE__
Ë(((__STATE__Ë=
FMC_BURST_ACCESS_MODE_DISABLE
) || \

1163 ((
__STATE__
Ë=
FMC_BURST_ACCESS_MODE_ENABLE
))

	)

1165 
	#IS_FMC_WAIT_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
FMC_WAIT_SIGNAL_POLARITY_LOW
) || \

1166 ((
__POLARITY__
Ë=
FMC_WAIT_SIGNAL_POLARITY_HIGH
))

	)

1168 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

1169 
	#IS_FMC_WRAP_MODE
(
__MODE__
Ë(((__MODE__Ë=
FMC_WRAP_MODE_DISABLE
) || \

1170 ((
__MODE__
Ë=
FMC_WRAP_MODE_ENABLE
))

	)

1173 
	#IS_FMC_WAIT_SIGNAL_ACTIVE
(
__ACTIVE__
Ë(((__ACTIVE__Ë=
FMC_WAIT_TIMING_BEFORE_WS
) || \

1174 ((
__ACTIVE__
Ë=
FMC_WAIT_TIMING_DURING_WS
))

	)

1176 
	#IS_FMC_WRITE_OPERATION
(
__OPERATION__
Ë(((__OPERATION__Ë=
FMC_WRITE_OPERATION_DISABLE
) || \

1177 ((
__OPERATION__
Ë=
FMC_WRITE_OPERATION_ENABLE
))

	)

1179 
	#IS_FMC_WAITE_SIGNAL
(
__SIGNAL__
Ë(((__SIGNAL__Ë=
FMC_WAIT_SIGNAL_DISABLE
) || \

1180 ((
__SIGNAL__
Ë=
FMC_WAIT_SIGNAL_ENABLE
))

	)

1182 
	#IS_FMC_EXTENDED_MODE
(
__MODE__
Ë(((__MODE__Ë=
FMC_EXTENDED_MODE_DISABLE
) || \

1183 ((
__MODE__
Ë=
FMC_EXTENDED_MODE_ENABLE
))

	)

1185 
	#IS_FMC_ASYNWAIT
(
__STATE__
Ë(((__STATE__Ë=
FMC_ASYNCHRONOUS_WAIT_DISABLE
) || \

1186 ((
__STATE__
Ë=
FMC_ASYNCHRONOUS_WAIT_ENABLE
))

	)

1188 
	#IS_FMC_WRITE_BURST
(
__BURST__
Ë(((__BURST__Ë=
FMC_WRITE_BURST_DISABLE
) || \

1189 ((
__BURST__
Ë=
FMC_WRITE_BURST_ENABLE
))

	)

1191 
	#IS_FMC_CONTINOUS_CLOCK
(
CCLOCK
Ë(((CCLOCKË=
FMC_CONTINUOUS_CLOCK_SYNC_ONLY
) || \

1192 ((
CCLOCK
Ë=
FMC_CONTINUOUS_CLOCK_SYNC_ASYNC
))

	)

1194 
	#IS_FMC_ADDRESS_SETUP_TIME
(
__TIME__
Ë((__TIME__Ë<15)

	)

1196 
	#IS_FMC_ADDRESS_HOLD_TIME
(
__TIME__
Ë(((__TIME__Ë> 0Ë&& ((__TIME__Ë<15))

	)

1198 
	#IS_FMC_DATASETUP_TIME
(
__TIME__
Ë(((__TIME__Ë> 0Ë&& ((__TIME__Ë<255))

	)

1200 
	#IS_FMC_TURNAROUND_TIME
(
__TIME__
Ë((__TIME__Ë<15)

	)

1202 
	#IS_FMC_DATA_LATENCY
(
__LATENCY__
Ë(((__LATENCY__Ë> 1Ë&& ((__LATENCY__Ë<17))

	)

1204 
	#IS_FMC_CLK_DIV
(
DIV
Ë(((DIVË> 1Ë&& ((DIVË<16))

	)

1206 
	#IS_FMC_SDRAM_BANK
(
BANK
Ë(((BANKË=
FMC_SDRAM_BANK1
) || \

1207 ((
BANK
Ë=
FMC_SDRAM_BANK2
))

	)

1209 
	#IS_FMC_COLUMNBITS_NUMBER
(
COLUMN
Ë(((COLUMNË=
FMC_SDRAM_COLUMN_BITS_NUM_8
) || \

1210 ((
COLUMN
Ë=
FMC_SDRAM_COLUMN_BITS_NUM_9
) || \

1211 ((
COLUMN
Ë=
FMC_SDRAM_COLUMN_BITS_NUM_10
) || \

1212 ((
COLUMN
Ë=
FMC_SDRAM_COLUMN_BITS_NUM_11
))

	)

1214 
	#IS_FMC_ROWBITS_NUMBER
(
ROW
Ë(((ROWË=
FMC_SDRAM_ROW_BITS_NUM_11
) || \

1215 ((
ROW
Ë=
FMC_SDRAM_ROW_BITS_NUM_12
) || \

1216 ((
ROW
Ë=
FMC_SDRAM_ROW_BITS_NUM_13
))

	)

1218 
	#IS_FMC_SDMEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FMC_SDRAM_MEM_BUS_WIDTH_8
) || \

1219 ((
WIDTH
Ë=
FMC_SDRAM_MEM_BUS_WIDTH_16
) || \

1220 ((
WIDTH
Ë=
FMC_SDRAM_MEM_BUS_WIDTH_32
))

	)

1222 
	#IS_FMC_INTERNALBANK_NUMBER
(
NUMBER
Ë(((NUMBERË=
FMC_SDRAM_INTERN_BANKS_NUM_2
) || \

1223 ((
NUMBER
Ë=
FMC_SDRAM_INTERN_BANKS_NUM_4
))

	)

1226 
	#IS_FMC_CAS_LATENCY
(
LATENCY
Ë(((LATENCYË=
FMC_SDRAM_CAS_LATENCY_1
) || \

1227 ((
LATENCY
Ë=
FMC_SDRAM_CAS_LATENCY_2
) || \

1228 ((
LATENCY
Ë=
FMC_SDRAM_CAS_LATENCY_3
))

	)

1230 
	#IS_FMC_SDCLOCK_PERIOD
(
PERIOD
Ë(((PERIODË=
FMC_SDRAM_CLOCK_DISABLE
) || \

1231 ((
PERIOD
Ë=
FMC_SDRAM_CLOCK_PERIOD_2
) || \

1232 ((
PERIOD
Ë=
FMC_SDRAM_CLOCK_PERIOD_3
))

	)

1234 
	#IS_FMC_READ_BURST
(
RBURST
Ë(((RBURSTË=
FMC_SDRAM_RBURST_DISABLE
) || \

1235 ((
RBURST
Ë=
FMC_SDRAM_RBURST_ENABLE
))

	)

1238 
	#IS_FMC_READPIPE_DELAY
(
DELAY
Ë(((DELAYË=
FMC_SDRAM_RPIPE_DELAY_0
) || \

1239 ((
DELAY
Ë=
FMC_SDRAM_RPIPE_DELAY_1
) || \

1240 ((
DELAY
Ë=
FMC_SDRAM_RPIPE_DELAY_2
))

	)

1242 
	#IS_FMC_LOADTOACTIVE_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

1244 
	#IS_FMC_EXITSELFREFRESH_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

1246 
	#IS_FMC_SELFREFRESH_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<16))

	)

1248 
	#IS_FMC_ROWCYCLE_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

1250 
	#IS_FMC_WRITE_RECOVERY_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<16))

	)

1252 
	#IS_FMC_RP_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

1254 
	#IS_FMC_RCD_DELAY
(
DELAY
Ë(((DELAYË> 0Ë&& ((DELAYË<16))

	)

1256 
	#IS_FMC_COMMAND_MODE
(
COMMAND
Ë(((COMMANDË=
FMC_SDRAM_CMD_NORMAL_MODE
) || \

1257 ((
COMMAND
Ë=
FMC_SDRAM_CMD_CLK_ENABLE
) || \

1258 ((
COMMAND
Ë=
FMC_SDRAM_CMD_PALL
) || \

1259 ((
COMMAND
Ë=
FMC_SDRAM_CMD_AUTOREFRESH_MODE
) || \

1260 ((
COMMAND
Ë=
FMC_SDRAM_CMD_LOAD_MODE
) || \

1261 ((
COMMAND
Ë=
FMC_SDRAM_CMD_SELFREFRESH_MODE
) || \

1262 ((
COMMAND
Ë=
FMC_SDRAM_CMD_POWERDOWN_MODE
))

	)

1264 
	#IS_FMC_COMMAND_TARGET
(
TARGET
Ë(((TARGETË=
FMC_SDRAM_CMD_TARGET_BANK1
) || \

1265 ((
TARGET
Ë=
FMC_SDRAM_CMD_TARGET_BANK2
) || \

1266 ((
TARGET
Ë=
FMC_SDRAM_CMD_TARGET_BANK1_2
))

	)

1268 
	#IS_FMC_AUTOREFRESH_NUMBER
(
NUMBER
Ë(((NUMBERË> 0Ë&& ((NUMBERË<16))

	)

1270 
	#IS_FMC_MODE_REGISTER
(
CONTENT
Ë((CONTENTË<8191)

	)

1272 
	#IS_FMC_REFRESH_RATE
(
RATE
Ë((RATEË<8191)

	)

1274 
	#IS_FMC_SDRAM_DEVICE
(
INSTANCE
Ë((INSTANCEË=
FMC_SDRAM_DEVICE
)

	)

1276 
	#IS_FMC_WRITE_PROTECTION
(
WRITE
Ë(((WRITEË=
FMC_SDRAM_WRITE_PROTECTION_DISABLE
) || \

1277 ((
WRITE
Ë=
FMC_SDRAM_WRITE_PROTECTION_ENABLE
))

	)

1279 #i‡
deföed
 (
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1280 
	#IS_FMC_PAGESIZE
(
SIZE
Ë(((SIZEË=
FMC_PAGE_SIZE_NONE
) || \

1281 ((
SIZE
Ë=
FMC_PAGE_SIZE_128
) || \

1282 ((
SIZE
Ë=
FMC_PAGE_SIZE_256
) || \

1283 ((
SIZE
Ë=
FMC_PAGE_SIZE_1024
))

	)

1285 
	#IS_FMC_WRITE_FIFO
(
FIFO
Ë(((FIFOË=
FMC_WRITE_FIFO_DISABLE
) || \

1286 ((
FIFO
Ë=
FMC_WRITE_FIFO_ENABLE
))

	)

1308 
HAL_SètusTy≥Def
 
FMC_NORSRAM_Inô
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FMC_NORSRAM_InôTy≥Def
 *
Inô
);

1309 
HAL_SètusTy≥Def
 
FMC_NORSRAM_Timög_Inô
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FMC_NORSRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
);

1310 
HAL_SètusTy≥Def
 
FMC_NORSRAM_Exãnded_Timög_Inô
(
FMC_NORSRAM_EXTENDED_Ty≥Def
 *
Devi˚
, 
FMC_NORSRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
, uöt32_à
ExãndedMode
);

1311 
HAL_SètusTy≥Def
 
FMC_NORSRAM_DeInô
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FMC_NORSRAM_EXTENDED_Ty≥Def
 *
ExDevi˚
, 
uöt32_t
 
B™k
);

1319 
HAL_SètusTy≥Def
 
FMC_NORSRAM_WrôeO≥øti⁄_E«bÀ
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

1320 
HAL_SètusTy≥Def
 
FMC_NORSRAM_WrôeO≥øti⁄_DißbÀ
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

1334 
HAL_SètusTy≥Def
 
FMC_NAND_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_InôTy≥Def
 *
Inô
);

1335 
HAL_SètusTy≥Def
 
FMC_NAND_Comm⁄S∑˚_Timög_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
);

1336 
HAL_SètusTy≥Def
 
FMC_NAND_AâribuãS∑˚_Timög_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
);

1337 
HAL_SètusTy≥Def
 
FMC_NAND_DeInô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

1345 
HAL_SètusTy≥Def
 
FMC_NAND_ECC_E«bÀ
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

1346 
HAL_SètusTy≥Def
 
FMC_NAND_ECC_DißbÀ
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

1347 
HAL_SètusTy≥Def
 
FMC_NAND_GëECC
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 *
ECCvÆ
, uöt32_à
B™k
, uöt32_à
Timeout
);

1355 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

1362 
HAL_SètusTy≥Def
 
FMC_PCCARD_Inô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FMC_PCCARD_InôTy≥Def
 *
Inô
);

1363 
HAL_SètusTy≥Def
 
FMC_PCCARD_Comm⁄S∑˚_Timög_Inô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
);

1364 
HAL_SètusTy≥Def
 
FMC_PCCARD_AâribuãS∑˚_Timög_Inô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
);

1365 
HAL_SètusTy≥Def
 
FMC_PCCARD_IOS∑˚_Timög_Inô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
);

1366 
HAL_SètusTy≥Def
 
FMC_PCCARD_DeInô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
);

1381 
HAL_SètusTy≥Def
 
FMC_SDRAM_Inô
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
FMC_SDRAM_InôTy≥Def
 *
Inô
);

1382 
HAL_SètusTy≥Def
 
FMC_SDRAM_Timög_Inô
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
FMC_SDRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
);

1383 
HAL_SètusTy≥Def
 
FMC_SDRAM_DeInô
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

1391 
HAL_SètusTy≥Def
 
FMC_SDRAM_WrôePrŸe˘i⁄_E«bÀ
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

1392 
HAL_SètusTy≥Def
 
FMC_SDRAM_WrôePrŸe˘i⁄_DißbÀ
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

1393 
HAL_SètusTy≥Def
 
FMC_SDRAM_SídComm™d
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
FMC_SDRAM_Comm™dTy≥Def
 *
Comm™d
, 
uöt32_t
 
Timeout
);

1394 
HAL_SètusTy≥Def
 
FMC_SDRAM_ProgømRe‰eshR©e
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
Re‰eshR©e
);

1395 
HAL_SètusTy≥Def
 
FMC_SDRAM_SëAutoRe‰eshNumbî
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
AutoRe‰eshNumbî
);

1396 
uöt32_t
 
FMC_SDRAM_GëModeSètus
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, uöt32_à
B™k
);

1416 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_ll_fsmc.h

39 #i‚de‡
__STM32F4xx_LL_FSMC_H


40 
	#__STM32F4xx_LL_FSMC_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"°m32f4xx_hÆ_def.h
"

57 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

68 
uöt32_t
 
NSB™k
;

71 
uöt32_t
 
D©aAddªssMux
;

75 
uöt32_t
 
Mem‹yTy≥
;

79 
uöt32_t
 
Mem‹yD©aWidth
;

82 
uöt32_t
 
Bur°Ac˚ssMode
;

86 
uöt32_t
 
WaôSig«lPﬁ¨ôy
;

90 
uöt32_t
 
WøpMode
;

94 
uöt32_t
 
WaôSig«lA˘ive
;

99 
uöt32_t
 
WrôeO≥øti⁄
;

102 
uöt32_t
 
WaôSig«l
;

106 
uöt32_t
 
ExãndedMode
;

109 
uöt32_t
 
Asynchr⁄ousWaô
;

113 
uöt32_t
 
WrôeBur°
;

116 }
	tFSMC_NORSRAM_InôTy≥Def
;

123 
uöt32_t
 
AddªssSëupTime
;

128 
uöt32_t
 
AddªssHﬁdTime
;

133 
uöt32_t
 
D©aSëupTime
;

139 
uöt32_t
 
BusTu∫AroundDuøti⁄
;

144 
uöt32_t
 
CLKDivisi⁄
;

149 
uöt32_t
 
D©aL©ícy
;

157 
uöt32_t
 
Ac˚ssMode
;

160 }
	tFSMC_NORSRAM_TimögTy≥Def
;

162 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

168 
uöt32_t
 
N™dB™k
;

171 
uöt32_t
 
Waô„©uª
;

174 
uöt32_t
 
Mem‹yD©aWidth
;

177 
uöt32_t
 
EccCompuèti⁄
;

180 
uöt32_t
 
ECCPageSize
;

183 
uöt32_t
 
TCLRSëupTime
;

187 
uöt32_t
 
TARSëupTime
;

191 }
	tFSMC_NAND_InôTy≥Def
;

198 
uöt32_t
 
SëupTime
;

204 
uöt32_t
 
WaôSëupTime
;

210 
uöt32_t
 
HﬁdSëupTime
;

217 
uöt32_t
 
HiZSëupTime
;

223 }
	tFSMC_NAND_PCC_TimögTy≥Def
;

230 
uöt32_t
 
Waô„©uª
;

233 
uöt32_t
 
TCLRSëupTime
;

237 
uöt32_t
 
TARSëupTime
;

241 }
	tFSMC_PCCARD_InôTy≥Def
;

258 
	#FSMC_NORSRAM_BANK1
 ((
uöt32_t
)0x00000000)

	)

259 
	#FSMC_NORSRAM_BANK2
 ((
uöt32_t
)0x00000002)

	)

260 
	#FSMC_NORSRAM_BANK3
 ((
uöt32_t
)0x00000004)

	)

261 
	#FSMC_NORSRAM_BANK4
 ((
uöt32_t
)0x00000006)

	)

269 
	#FSMC_DATA_ADDRESS_MUX_DISABLE
 ((
uöt32_t
)0x00000000)

	)

270 
	#FSMC_DATA_ADDRESS_MUX_ENABLE
 ((
uöt32_t
)0x00000002)

	)

278 
	#FSMC_MEMORY_TYPE_SRAM
 ((
uöt32_t
)0x00000000)

	)

279 
	#FSMC_MEMORY_TYPE_PSRAM
 ((
uöt32_t
)0x00000004)

	)

280 
	#FSMC_MEMORY_TYPE_NOR
 ((
uöt32_t
)0x00000008)

	)

288 
	#FSMC_NORSRAM_MEM_BUS_WIDTH_8
 ((
uöt32_t
)0x00000000)

	)

289 
	#FSMC_NORSRAM_MEM_BUS_WIDTH_16
 ((
uöt32_t
)0x00000010)

	)

290 
	#FSMC_NORSRAM_MEM_BUS_WIDTH_32
 ((
uöt32_t
)0x00000020)

	)

298 
	#FSMC_NORSRAM_FLASH_ACCESS_ENABLE
 ((
uöt32_t
)0x00000040)

	)

299 
	#FSMC_NORSRAM_FLASH_ACCESS_DISABLE
 ((
uöt32_t
)0x00000000)

	)

307 
	#FSMC_BURST_ACCESS_MODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

308 
	#FSMC_BURST_ACCESS_MODE_ENABLE
 ((
uöt32_t
)0x00000100)

	)

316 
	#FSMC_WAIT_SIGNAL_POLARITY_LOW
 ((
uöt32_t
)0x00000000)

	)

317 
	#FSMC_WAIT_SIGNAL_POLARITY_HIGH
 ((
uöt32_t
)0x00000200)

	)

325 
	#FSMC_WRAP_MODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

326 
	#FSMC_WRAP_MODE_ENABLE
 ((
uöt32_t
)0x00000400)

	)

334 
	#FSMC_WAIT_TIMING_BEFORE_WS
 ((
uöt32_t
)0x00000000)

	)

335 
	#FSMC_WAIT_TIMING_DURING_WS
 ((
uöt32_t
)0x00000800)

	)

343 
	#FSMC_WRITE_OPERATION_DISABLE
 ((
uöt32_t
)0x00000000)

	)

344 
	#FSMC_WRITE_OPERATION_ENABLE
 ((
uöt32_t
)0x00001000)

	)

352 
	#FSMC_WAIT_SIGNAL_DISABLE
 ((
uöt32_t
)0x00000000)

	)

353 
	#FSMC_WAIT_SIGNAL_ENABLE
 ((
uöt32_t
)0x00002000)

	)

361 
	#FSMC_EXTENDED_MODE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

362 
	#FSMC_EXTENDED_MODE_ENABLE
 ((
uöt32_t
)0x00004000)

	)

370 
	#FSMC_ASYNCHRONOUS_WAIT_DISABLE
 ((
uöt32_t
)0x00000000)

	)

371 
	#FSMC_ASYNCHRONOUS_WAIT_ENABLE
 ((
uöt32_t
)0x00008000)

	)

379 
	#FSMC_WRITE_BURST_DISABLE
 ((
uöt32_t
)0x00000000)

	)

380 
	#FSMC_WRITE_BURST_ENABLE
 ((
uöt32_t
)0x00080000)

	)

388 
	#FSMC_CONTINUOUS_CLOCK_SYNC_ONLY
 ((
uöt32_t
)0x00000000)

	)

389 
	#FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC
 ((
uöt32_t
)0x00100000)

	)

397 
	#FSMC_ACCESS_MODE_A
 ((
uöt32_t
)0x00000000)

	)

398 
	#FSMC_ACCESS_MODE_B
 ((
uöt32_t
)0x10000000)

	)

399 
	#FSMC_ACCESS_MODE_C
 ((
uöt32_t
)0x20000000)

	)

400 
	#FSMC_ACCESS_MODE_D
 ((
uöt32_t
)0x30000000)

	)

408 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

415 
	#FSMC_NAND_BANK2
 ((
uöt32_t
)0x00000010)

	)

416 
	#FSMC_NAND_BANK3
 ((
uöt32_t
)0x00000100)

	)

424 
	#FSMC_NAND_PCC_WAIT_FEATURE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

425 
	#FSMC_NAND_PCC_WAIT_FEATURE_ENABLE
 ((
uöt32_t
)0x00000002)

	)

433 
	#FSMC_PCR_MEMORY_TYPE_PCCARD
 ((
uöt32_t
)0x00000000)

	)

434 
	#FSMC_PCR_MEMORY_TYPE_NAND
 ((
uöt32_t
)0x00000008)

	)

442 
	#FSMC_NAND_PCC_MEM_BUS_WIDTH_8
 ((
uöt32_t
)0x00000000)

	)

443 
	#FSMC_NAND_PCC_MEM_BUS_WIDTH_16
 ((
uöt32_t
)0x00000010)

	)

451 
	#FSMC_NAND_ECC_DISABLE
 ((
uöt32_t
)0x00000000)

	)

452 
	#FSMC_NAND_ECC_ENABLE
 ((
uöt32_t
)0x00000040)

	)

460 
	#FSMC_NAND_ECC_PAGE_SIZE_256BYTE
 ((
uöt32_t
)0x00000000)

	)

461 
	#FSMC_NAND_ECC_PAGE_SIZE_512BYTE
 ((
uöt32_t
)0x00020000)

	)

462 
	#FSMC_NAND_ECC_PAGE_SIZE_1024BYTE
 ((
uöt32_t
)0x00040000)

	)

463 
	#FSMC_NAND_ECC_PAGE_SIZE_2048BYTE
 ((
uöt32_t
)0x00060000)

	)

464 
	#FSMC_NAND_ECC_PAGE_SIZE_4096BYTE
 ((
uöt32_t
)0x00080000)

	)

465 
	#FSMC_NAND_ECC_PAGE_SIZE_8192BYTE
 ((
uöt32_t
)0x000A0000)

	)

477 
	#FSMC_IT_RISING_EDGE
 ((
uöt32_t
)0x00000008)

	)

478 
	#FSMC_IT_LEVEL
 ((
uöt32_t
)0x00000010)

	)

479 
	#FSMC_IT_FALLING_EDGE
 ((
uöt32_t
)0x00000020)

	)

480 
	#FSMC_IT_REFRESH_ERROR
 ((
uöt32_t
)0x00004000)

	)

488 
	#FSMC_FLAG_RISING_EDGE
 ((
uöt32_t
)0x00000001)

	)

489 
	#FSMC_FLAG_LEVEL
 ((
uöt32_t
)0x00000002)

	)

490 
	#FSMC_FLAG_FALLING_EDGE
 ((
uöt32_t
)0x00000004)

	)

491 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

499 
	#FSMC_NORSRAM_Ty≥Def
 
FSMC_B™k1_Ty≥Def


	)

500 
	#FSMC_NORSRAM_EXTENDED_Ty≥Def
 
FSMC_B™k1E_Ty≥Def


	)

501 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

502 
	#FSMC_NAND_Ty≥Def
 
FSMC_B™k2_3_Ty≥Def


	)

503 
	#FSMC_PCCARD_Ty≥Def
 
FSMC_B™k4_Ty≥Def


	)

506 
	#FSMC_NORSRAM_DEVICE
 
FSMC_B™k1


	)

507 
	#FSMC_NORSRAM_EXTENDED_DEVICE
 
FSMC_B™k1E


	)

508 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

509 
	#FSMC_NAND_DEVICE
 
FSMC_B™k2_3


	)

510 
	#FSMC_PCCARD_DEVICE
 
FSMC_B™k4


	)

513 
	#FMC_NORSRAM_Ty≥Def
 
FSMC_NORSRAM_Ty≥Def


	)

514 
	#FMC_NORSRAM_EXTENDED_Ty≥Def
 
FSMC_NORSRAM_EXTENDED_Ty≥Def


	)

515 
	#FMC_NORSRAM_InôTy≥Def
 
FSMC_NORSRAM_InôTy≥Def


	)

516 
	#FMC_NORSRAM_TimögTy≥Def
 
FSMC_NORSRAM_TimögTy≥Def


	)

518 
	#FMC_NORSRAM_Inô
 
FSMC_NORSRAM_Inô


	)

519 
	#FMC_NORSRAM_Timög_Inô
 
FSMC_NORSRAM_Timög_Inô


	)

520 
	#FMC_NORSRAM_Exãnded_Timög_Inô
 
FSMC_NORSRAM_Exãnded_Timög_Inô


	)

521 
	#FMC_NORSRAM_DeInô
 
FSMC_NORSRAM_DeInô


	)

522 
	#FMC_NORSRAM_WrôeO≥øti⁄_E«bÀ
 
FSMC_NORSRAM_WrôeO≥øti⁄_E«bÀ


	)

523 
	#FMC_NORSRAM_WrôeO≥øti⁄_DißbÀ
 
FSMC_NORSRAM_WrôeO≥øti⁄_DißbÀ


	)

525 
	#__FMC_NORSRAM_ENABLE
 
__FSMC_NORSRAM_ENABLE


	)

526 
	#__FMC_NORSRAM_DISABLE
 
__FSMC_NORSRAM_DISABLE


	)

528 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

529 
	#FMC_NAND_InôTy≥Def
 
FSMC_NAND_InôTy≥Def


	)

530 
	#FMC_PCCARD_InôTy≥Def
 
FSMC_PCCARD_InôTy≥Def


	)

531 
	#FMC_NAND_PCC_TimögTy≥Def
 
FSMC_NAND_PCC_TimögTy≥Def


	)

533 
	#FMC_NAND_Inô
 
FSMC_NAND_Inô


	)

534 
	#FMC_NAND_Comm⁄S∑˚_Timög_Inô
 
FSMC_NAND_Comm⁄S∑˚_Timög_Inô


	)

535 
	#FMC_NAND_AâribuãS∑˚_Timög_Inô
 
FSMC_NAND_AâribuãS∑˚_Timög_Inô


	)

536 
	#FMC_NAND_DeInô
 
FSMC_NAND_DeInô


	)

537 
	#FMC_NAND_ECC_E«bÀ
 
FSMC_NAND_ECC_E«bÀ


	)

538 
	#FMC_NAND_ECC_DißbÀ
 
FSMC_NAND_ECC_DißbÀ


	)

539 
	#FMC_NAND_GëECC
 
FSMC_NAND_GëECC


	)

540 
	#FMC_PCCARD_Inô
 
FSMC_PCCARD_Inô


	)

541 
	#FMC_PCCARD_Comm⁄S∑˚_Timög_Inô
 
FSMC_PCCARD_Comm⁄S∑˚_Timög_Inô


	)

542 
	#FMC_PCCARD_AâribuãS∑˚_Timög_Inô
 
FSMC_PCCARD_AâribuãS∑˚_Timög_Inô


	)

543 
	#FMC_PCCARD_IOS∑˚_Timög_Inô
 
FSMC_PCCARD_IOS∑˚_Timög_Inô


	)

544 
	#FMC_PCCARD_DeInô
 
FSMC_PCCARD_DeInô


	)

546 
	#__FMC_NAND_ENABLE
 
__FSMC_NAND_ENABLE


	)

547 
	#__FMC_NAND_DISABLE
 
__FSMC_NAND_DISABLE


	)

548 
	#__FMC_PCCARD_ENABLE
 
__FSMC_PCCARD_ENABLE


	)

549 
	#__FMC_PCCARD_DISABLE
 
__FSMC_PCCARD_DISABLE


	)

550 
	#__FMC_NAND_ENABLE_IT
 
__FSMC_NAND_ENABLE_IT


	)

551 
	#__FMC_NAND_DISABLE_IT
 
__FSMC_NAND_DISABLE_IT


	)

552 
	#__FMC_NAND_GET_FLAG
 
__FSMC_NAND_GET_FLAG


	)

553 
	#__FMC_NAND_CLEAR_FLAG
 
__FSMC_NAND_CLEAR_FLAG


	)

554 
	#__FMC_PCCARD_ENABLE_IT
 
__FSMC_PCCARD_ENABLE_IT


	)

555 
	#__FMC_PCCARD_DISABLE_IT
 
__FSMC_PCCARD_DISABLE_IT


	)

556 
	#__FMC_PCCARD_GET_FLAG
 
__FSMC_PCCARD_GET_FLAG


	)

557 
	#__FMC_PCCARD_CLEAR_FLAG
 
__FSMC_PCCARD_CLEAR_FLAG


	)

560 
	#FMC_NORSRAM_Ty≥Def
 
FSMC_NORSRAM_Ty≥Def


	)

561 
	#FMC_NORSRAM_EXTENDED_Ty≥Def
 
FSMC_NORSRAM_EXTENDED_Ty≥Def


	)

562 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

563 
	#FMC_NAND_Ty≥Def
 
FSMC_NAND_Ty≥Def


	)

564 
	#FMC_PCCARD_Ty≥Def
 
FSMC_PCCARD_Ty≥Def


	)

567 
	#FMC_NORSRAM_DEVICE
 
FSMC_NORSRAM_DEVICE


	)

568 
	#FMC_NORSRAM_EXTENDED_DEVICE
 
FSMC_NORSRAM_EXTENDED_DEVICE


	)

569 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

570 
	#FMC_NAND_DEVICE
 
FSMC_NAND_DEVICE


	)

571 
	#FMC_PCCARD_DEVICE
 
FSMC_PCCARD_DEVICE


	)

573 
	#FMC_NAND_BANK2
 
FSMC_NAND_BANK2


	)

576 
	#FMC_NORSRAM_BANK1
 
FSMC_NORSRAM_BANK1


	)

577 
	#FMC_NORSRAM_BANK2
 
FSMC_NORSRAM_BANK2


	)

578 
	#FMC_NORSRAM_BANK3
 
FSMC_NORSRAM_BANK3


	)

580 
	#FMC_IT_RISING_EDGE
 
FSMC_IT_RISING_EDGE


	)

581 
	#FMC_IT_LEVEL
 
FSMC_IT_LEVEL


	)

582 
	#FMC_IT_FALLING_EDGE
 
FSMC_IT_FALLING_EDGE


	)

583 
	#FMC_IT_REFRESH_ERROR
 
FSMC_IT_REFRESH_ERROR


	)

585 
	#FMC_FLAG_RISING_EDGE
 
FSMC_FLAG_RISING_EDGE


	)

586 
	#FMC_FLAG_LEVEL
 
FSMC_FLAG_LEVEL


	)

587 
	#FMC_FLAG_FALLING_EDGE
 
FSMC_FLAG_FALLING_EDGE


	)

588 
	#FMC_FLAG_FEMPT
 
FSMC_FLAG_FEMPT


	)

612 
	#__FSMC_NORSRAM_ENABLE
(
__INSTANCE__
, 
__BANK__
Ë((__INSTANCE__)->
BTCR
[(__BANK__)] |
FSMC_BCR1_MBKEN
)

	)

620 
	#__FSMC_NORSRAM_DISABLE
(
__INSTANCE__
, 
__BANK__
Ë((__INSTANCE__)->
BTCR
[(__BANK__)] &~
FSMC_BCR1_MBKEN
)

	)

629 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

636 
	#__FSMC_NAND_ENABLE
(
__INSTANCE__
, 
__BANK__
Ë(((__BANK__Ë=
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
PCR2
 |
FSMC_PCR2_PBKEN
): \

637 ((
__INSTANCE__
)->
PCR3
 |
FSMC_PCR3_PBKEN
))

	)

645 
	#__FSMC_NAND_DISABLE
(
__INSTANCE__
, 
__BANK__
Ë(((__BANK__Ë=
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
PCR2
 &~
FSMC_PCR2_PBKEN
): \

646 ((
__INSTANCE__
)->
PCR3
 &~
FSMC_PCR3_PBKEN
))

	)

660 
	#__FSMC_PCCARD_ENABLE
(
__INSTANCE__
Ë((__INSTANCE__)->
PCR4
 |
FSMC_PCR4_PBKEN
)

	)

667 
	#__FSMC_PCCARD_DISABLE
(
__INSTANCE__
Ë((__INSTANCE__)->
PCR4
 &~
FSMC_PCR4_PBKEN
)

	)

687 
	#__FSMC_NAND_ENABLE_IT
(
__INSTANCE__
, 
__BANK__
, 
__INTERRUPT__
Ë(((__BANK__Ë=
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 |= (__INTERRUPT__)): \

688 ((
__INSTANCE__
)->
SR3
 |(
__INTERRUPT__
)))

	)

701 
	#__FSMC_NAND_DISABLE_IT
(
__INSTANCE__
, 
__BANK__
, 
__INTERRUPT__
Ë(((__BANK__Ë=
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 &= ~(__INTERRUPT__)): \

702 ((
__INSTANCE__
)->
SR3
 &~(
__INTERRUPT__
)))

	)

716 
	#__FSMC_NAND_GET_FLAG
(
__INSTANCE__
, 
__BANK__
, 
__FLAG__
Ë(((__BANK__Ë=
FSMC_NAND_BANK2
)? (((__INSTANCE__)->
SR2
 &(__FLAG__)) == (__FLAG__)): \

717 (((
__INSTANCE__
)->
SR3
 &(
__FLAG__
)Ë=(__FLAG__)))

	)

730 
	#__FSMC_NAND_CLEAR_FLAG
(
__INSTANCE__
, 
__BANK__
, 
__FLAG__
Ë(((__BANK__Ë=
FSMC_NAND_BANK2
)? ((__INSTANCE__)->
SR2
 &= ~(__FLAG__)): \

731 ((
__INSTANCE__
)->
SR3
 &~(
__FLAG__
)))

	)

742 
	#__FSMC_PCCARD_ENABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
SR4
 |(__INTERRUPT__))

	)

754 
	#__FSMC_PCCARD_DISABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
SR4
 &~(__INTERRUPT__))

	)

767 
	#__FSMC_PCCARD_GET_FLAG
(
__INSTANCE__
, 
__FLAG__
Ë(((__INSTANCE__)->
SR4
 &(__FLAG__)Ë=(__FLAG__))

	)

780 
	#__FSMC_PCCARD_CLEAR_FLAG
(
__INSTANCE__
, 
__FLAG__
Ë((__INSTANCE__)->
SR4
 &~(__FLAG__))

	)

789 
	#IS_FSMC_NORSRAM_BANK
(
__BANK__
Ë(((__BANK__Ë=
FSMC_NORSRAM_BANK1
) || \

790 ((
__BANK__
Ë=
FSMC_NORSRAM_BANK2
) || \

791 ((
__BANK__
Ë=
FSMC_NORSRAM_BANK3
) || \

792 ((
__BANK__
Ë=
FSMC_NORSRAM_BANK4
))

	)

794 
	#IS_FSMC_MUX
(
__MUX__
Ë(((__MUX__Ë=
FSMC_DATA_ADDRESS_MUX_DISABLE
) || \

795 ((
__MUX__
Ë=
FSMC_DATA_ADDRESS_MUX_ENABLE
))

	)

797 
	#IS_FSMC_MEMORY
(
__MEMORY__
Ë(((__MEMORY__Ë=
FSMC_MEMORY_TYPE_SRAM
) || \

798 ((
__MEMORY__
Ë=
FSMC_MEMORY_TYPE_PSRAM
)|| \

799 ((
__MEMORY__
Ë=
FSMC_MEMORY_TYPE_NOR
))

	)

801 
	#IS_FSMC_NORSRAM_MEMORY_WIDTH
(
__WIDTH__
Ë(((__WIDTH__Ë=
FSMC_NORSRAM_MEM_BUS_WIDTH_8
) || \

802 ((
__WIDTH__
Ë=
FSMC_NORSRAM_MEM_BUS_WIDTH_16
) || \

803 ((
__WIDTH__
Ë=
FSMC_NORSRAM_MEM_BUS_WIDTH_32
))

	)

805 
	#IS_FSMC_ACCESS_MODE
(
__MODE__
Ë(((__MODE__Ë=
FSMC_ACCESS_MODE_A
) || \

806 ((
__MODE__
Ë=
FSMC_ACCESS_MODE_B
) || \

807 ((
__MODE__
Ë=
FSMC_ACCESS_MODE_C
) || \

808 ((
__MODE__
Ë=
FSMC_ACCESS_MODE_D
))

	)

810 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_NAND_BANK2
) || \

811 ((
BANK
Ë=
FSMC_NAND_BANK3
))

	)

813 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_NAND_PCC_WAIT_FEATURE_DISABLE
) || \

814 ((
FEATURE
Ë=
FSMC_NAND_PCC_WAIT_FEATURE_ENABLE
))

	)

816 
	#IS_FSMC_NAND_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_NAND_PCC_MEM_BUS_WIDTH_8
) || \

817 ((
WIDTH
Ë=
FSMC_NAND_PCC_MEM_BUS_WIDTH_16
))

	)

819 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_NAND_ECC_DISABLE
) || \

820 ((
STATE
Ë=
FSMC_NAND_ECC_ENABLE
))

	)

822 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_NAND_ECC_PAGE_SIZE_256BYTE
) || \

823 ((
SIZE
Ë=
FSMC_NAND_ECC_PAGE_SIZE_512BYTE
) || \

824 ((
SIZE
Ë=
FSMC_NAND_ECC_PAGE_SIZE_1024BYTE
) || \

825 ((
SIZE
Ë=
FSMC_NAND_ECC_PAGE_SIZE_2048BYTE
) || \

826 ((
SIZE
Ë=
FSMC_NAND_ECC_PAGE_SIZE_4096BYTE
) || \

827 ((
SIZE
Ë=
FSMC_NAND_ECC_PAGE_SIZE_8192BYTE
))

	)

829 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<255)

	)

831 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<255)

	)

833 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<255)

	)

835 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<255)

	)

837 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<255)

	)

839 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<255)

	)

841 
	#IS_FSMC_NORSRAM_DEVICE
(
__INSTANCE__
Ë((__INSTANCE__Ë=
FSMC_NORSRAM_DEVICE
)

	)

843 
	#IS_FSMC_NORSRAM_EXTENDED_DEVICE
(
__INSTANCE__
Ë((__INSTANCE__Ë=
FSMC_NORSRAM_EXTENDED_DEVICE
)

	)

845 
	#IS_FSMC_NAND_DEVICE
(
INSTANCE
Ë((INSTANCEË=
FSMC_NAND_DEVICE
)

	)

847 
	#IS_FSMC_PCCARD_DEVICE
(
INSTANCE
Ë((INSTANCEË=
FSMC_PCCARD_DEVICE
)

	)

849 
	#IS_FSMC_BURSTMODE
(
__STATE__
Ë(((__STATE__Ë=
FSMC_BURST_ACCESS_MODE_DISABLE
) || \

850 ((
__STATE__
Ë=
FSMC_BURST_ACCESS_MODE_ENABLE
))

	)

852 
	#IS_FSMC_WAIT_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
FSMC_WAIT_SIGNAL_POLARITY_LOW
) || \

853 ((
__POLARITY__
Ë=
FSMC_WAIT_SIGNAL_POLARITY_HIGH
))

	)

855 
	#IS_FSMC_WRAP_MODE
(
__MODE__
Ë(((__MODE__Ë=
FSMC_WRAP_MODE_DISABLE
) || \

856 ((
__MODE__
Ë=
FSMC_WRAP_MODE_ENABLE
))

	)

858 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
__ACTIVE__
Ë(((__ACTIVE__Ë=
FSMC_WAIT_TIMING_BEFORE_WS
) || \

859 ((
__ACTIVE__
Ë=
FSMC_WAIT_TIMING_DURING_WS
))

	)

861 
	#IS_FSMC_WRITE_OPERATION
(
__OPERATION__
Ë(((__OPERATION__Ë=
FSMC_WRITE_OPERATION_DISABLE
) || \

862 ((
__OPERATION__
Ë=
FSMC_WRITE_OPERATION_ENABLE
))

	)

864 
	#IS_FSMC_WAITE_SIGNAL
(
__SIGNAL__
Ë(((__SIGNAL__Ë=
FSMC_WAIT_SIGNAL_DISABLE
) || \

865 ((
__SIGNAL__
Ë=
FSMC_WAIT_SIGNAL_ENABLE
))

	)

867 
	#IS_FSMC_EXTENDED_MODE
(
__MODE__
Ë(((__MODE__Ë=
FSMC_EXTENDED_MODE_DISABLE
) || \

868 ((
__MODE__
Ë=
FSMC_EXTENDED_MODE_ENABLE
))

	)

870 
	#IS_FSMC_ASYNWAIT
(
__STATE__
Ë(((__STATE__Ë=
FSMC_ASYNCHRONOUS_WAIT_DISABLE
) || \

871 ((
__STATE__
Ë=
FSMC_ASYNCHRONOUS_WAIT_ENABLE
))

	)

873 
	#IS_FSMC_DATA_LATENCY
(
__LATENCY__
Ë(((__LATENCY__Ë> 1Ë&& ((__LATENCY__Ë<17))

	)

875 
	#IS_FSMC_WRITE_BURST
(
__BURST__
Ë(((__BURST__Ë=
FSMC_WRITE_BURST_DISABLE
) || \

876 ((
__BURST__
Ë=
FSMC_WRITE_BURST_ENABLE
))

	)

878 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
__TIME__
Ë((__TIME__Ë<15)

	)

880 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
__TIME__
Ë(((__TIME__Ë> 0Ë&& ((__TIME__Ë<15))

	)

882 
	#IS_FSMC_DATASETUP_TIME
(
__TIME__
Ë(((__TIME__Ë> 0Ë&& ((__TIME__Ë<255))

	)

884 
	#IS_FSMC_TURNAROUND_TIME
(
__TIME__
Ë((__TIME__Ë<15)

	)

886 
	#IS_FSMC_CONTINOUS_CLOCK
(
CCLOCK
Ë(((CCLOCKË=
FSMC_CONTINUOUS_CLOCK_SYNC_ONLY
) || \

887 ((
CCLOCK
Ë=
FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC
))

	)

889 
	#IS_FSMC_CLK_DIV
(
DIV
Ë(((DIVË> 1Ë&& ((DIVË<16))

	)

910 
HAL_SètusTy≥Def
 
FSMC_NORSRAM_Inô
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FSMC_NORSRAM_InôTy≥Def
 *
Inô
);

911 
HAL_SètusTy≥Def
 
FSMC_NORSRAM_Timög_Inô
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FSMC_NORSRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
);

912 
HAL_SètusTy≥Def
 
FSMC_NORSRAM_Exãnded_Timög_Inô
(
FSMC_NORSRAM_EXTENDED_Ty≥Def
 *
Devi˚
, 
FSMC_NORSRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
, uöt32_à
ExãndedMode
);

913 
HAL_SètusTy≥Def
 
FSMC_NORSRAM_DeInô
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FSMC_NORSRAM_EXTENDED_Ty≥Def
 *
ExDevi˚
, 
uöt32_t
 
B™k
);

921 
HAL_SètusTy≥Def
 
FSMC_NORSRAM_WrôeO≥øti⁄_E«bÀ
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

922 
HAL_SètusTy≥Def
 
FSMC_NORSRAM_WrôeO≥øti⁄_DißbÀ
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

930 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

937 
HAL_SètusTy≥Def
 
FSMC_NAND_Inô
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_InôTy≥Def
 *
Inô
);

938 
HAL_SètusTy≥Def
 
FSMC_NAND_Comm⁄S∑˚_Timög_Inô
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
);

939 
HAL_SètusTy≥Def
 
FSMC_NAND_AâribuãS∑˚_Timög_Inô
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
);

940 
HAL_SètusTy≥Def
 
FSMC_NAND_DeInô
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

948 
HAL_SètusTy≥Def
 
FSMC_NAND_ECC_E«bÀ
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

949 
HAL_SètusTy≥Def
 
FSMC_NAND_ECC_DißbÀ
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
);

950 
HAL_SètusTy≥Def
 
FSMC_NAND_GëECC
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 *
ECCvÆ
, uöt32_à
B™k
, uöt32_à
Timeout
);

964 
HAL_SètusTy≥Def
 
FSMC_PCCARD_Inô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FSMC_PCCARD_InôTy≥Def
 *
Inô
);

965 
HAL_SètusTy≥Def
 
FSMC_PCCARD_Comm⁄S∑˚_Timög_Inô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
);

966 
HAL_SètusTy≥Def
 
FSMC_PCCARD_AâribuãS∑˚_Timög_Inô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
);

967 
HAL_SètusTy≥Def
 
FSMC_PCCARD_IOS∑˚_Timög_Inô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
);

968 
HAL_SètusTy≥Def
 
FSMC_PCCARD_DeInô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
);

990 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_ll_sdmmc.h

39 #i‚de‡
__STM32F4xx_LL_SDMMC_H


40 
	#__STM32F4xx_LL_SDMMC_H


	)

42 #ifde‡
__˝lu•lus


45 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

46 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

47 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

48 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_hÆ_def.h
"

70 
uöt32_t
 
ClockEdge
;

73 
uöt32_t
 
ClockBy∑ss
;

77 
uöt32_t
 
ClockPowîSave
;

81 
uöt32_t
 
BusWide
;

84 
uöt32_t
 
H¨dw¨eFlowC⁄åﬁ
;

87 
uöt32_t
 
ClockDiv
;

90 }
	tSDIO_InôTy≥Def
;

98 
uöt32_t
 
Argumít
;

103 
uöt32_t
 
CmdIndex
;

106 
uöt32_t
 
Re•⁄£
;

109 
uöt32_t
 
WaôF‹I¡îru±
;

113 
uöt32_t
 
CPSM
;

116 }
	tSDIO_CmdInôTy≥Def
;

124 
uöt32_t
 
D©aTimeOut
;

126 
uöt32_t
 
D©aLígth
;

128 
uöt32_t
 
D©aBlockSize
;

131 
uöt32_t
 
Tøns„rDú
;

135 
uöt32_t
 
Tøns„rMode
;

138 
uöt32_t
 
DPSM
;

141 }
	tSDIO_D©aInôTy≥Def
;

155 
	#SDIO_CLOCK_EDGE_RISING
 ((
uöt32_t
)0x00000000)

	)

156 
	#SDIO_CLOCK_EDGE_FALLING
 
SDIO_CLKCR_NEGEDGE


	)

158 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_CLOCK_EDGE_RISING
) || \

159 ((
EDGE
Ë=
SDIO_CLOCK_EDGE_FALLING
))

	)

167 
	#SDIO_CLOCK_BYPASS_DISABLE
 ((
uöt32_t
)0x00000000)

	)

168 
	#SDIO_CLOCK_BYPASS_ENABLE
 
SDIO_CLKCR_BYPASS


	)

170 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_CLOCK_BYPASS_DISABLE
) || \

171 ((
BYPASS
Ë=
SDIO_CLOCK_BYPASS_ENABLE
))

	)

179 
	#SDIO_CLOCK_POWER_SAVE_DISABLE
 ((
uöt32_t
)0x00000000)

	)

180 
	#SDIO_CLOCK_POWER_SAVE_ENABLE
 
SDIO_CLKCR_PWRSAV


	)

182 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_CLOCK_POWER_SAVE_DISABLE
) || \

183 ((
SAVE
Ë=
SDIO_CLOCK_POWER_SAVE_ENABLE
))

	)

191 
	#SDIO_BUS_WIDE_1B
 ((
uöt32_t
)0x00000000)

	)

192 
	#SDIO_BUS_WIDE_4B
 
SDIO_CLKCR_WIDBUS_0


	)

193 
	#SDIO_BUS_WIDE_8B
 
SDIO_CLKCR_WIDBUS_1


	)

195 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BUS_WIDE_1B
) || \

196 ((
WIDE
Ë=
SDIO_BUS_WIDE_4B
) || \

197 ((
WIDE
Ë=
SDIO_BUS_WIDE_8B
))

	)

205 
	#SDIO_HARDWARE_FLOW_CONTROL_DISABLE
 ((
uöt32_t
)0x00000000)

	)

206 
	#SDIO_HARDWARE_FLOW_CONTROL_ENABLE
 
SDIO_CLKCR_HWFC_EN


	)

208 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_HARDWARE_FLOW_CONTROL_DISABLE
) || \

209 ((
CONTROL
Ë=
SDIO_HARDWARE_FLOW_CONTROL_ENABLE
))

	)

217 
	#IS_SDIO_CLKDIV
(
DIV
Ë((DIVË<0xFF)

	)

225 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

233 
	#SDIO_RESPONSE_NO
 ((
uöt32_t
)0x00000000)

	)

234 
	#SDIO_RESPONSE_SHORT
 
SDIO_CMD_WAITRESP_0


	)

235 
	#SDIO_RESPONSE_LONG
 
SDIO_CMD_WAITRESP


	)

237 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_RESPONSE_NO
) || \

238 ((
RESPONSE
Ë=
SDIO_RESPONSE_SHORT
) || \

239 ((
RESPONSE
Ë=
SDIO_RESPONSE_LONG
))

	)

247 
	#SDIO_WAIT_NO
 ((
uöt32_t
)0x00000000)

	)

248 
	#SDIO_WAIT_IT
 
SDIO_CMD_WAITINT


	)

249 
	#SDIO_WAIT_PEND
 
SDIO_CMD_WAITPEND


	)

251 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_WAIT_NO
) || \

252 ((
WAIT
Ë=
SDIO_WAIT_IT
) || \

253 ((
WAIT
Ë=
SDIO_WAIT_PEND
))

	)

261 
	#SDIO_CPSM_DISABLE
 ((
uöt32_t
)0x00000000)

	)

262 
	#SDIO_CPSM_ENABLE
 
SDIO_CMD_CPSMEN


	)

264 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_DISABLE
) || \

265 ((
CPSM
Ë=
SDIO_CPSM_ENABLE
))

	)

273 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

274 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

275 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

276 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

278 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
) || \

279 ((
RESP
Ë=
SDIO_RESP2
) || \

280 ((
RESP
Ë=
SDIO_RESP3
) || \

281 ((
RESP
Ë=
SDIO_RESP4
))

	)

289 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

297 
	#SDIO_DATABLOCK_SIZE_1B
 ((
uöt32_t
)0x00000000)

	)

298 
	#SDIO_DATABLOCK_SIZE_2B
 
SDIO_DCTRL_DBLOCKSIZE_0


	)

299 
	#SDIO_DATABLOCK_SIZE_4B
 
SDIO_DCTRL_DBLOCKSIZE_1


	)

300 
	#SDIO_DATABLOCK_SIZE_8B
 ((
uöt32_t
)0x00000030)

	)

301 
	#SDIO_DATABLOCK_SIZE_16B
 
SDIO_DCTRL_DBLOCKSIZE_2


	)

302 
	#SDIO_DATABLOCK_SIZE_32B
 ((
uöt32_t
)0x00000050)

	)

303 
	#SDIO_DATABLOCK_SIZE_64B
 ((
uöt32_t
)0x00000060)

	)

304 
	#SDIO_DATABLOCK_SIZE_128B
 ((
uöt32_t
)0x00000070)

	)

305 
	#SDIO_DATABLOCK_SIZE_256B
 
SDIO_DCTRL_DBLOCKSIZE_3


	)

306 
	#SDIO_DATABLOCK_SIZE_512B
 ((
uöt32_t
)0x00000090)

	)

307 
	#SDIO_DATABLOCK_SIZE_1024B
 ((
uöt32_t
)0x000000A0)

	)

308 
	#SDIO_DATABLOCK_SIZE_2048B
 ((
uöt32_t
)0x000000B0)

	)

309 
	#SDIO_DATABLOCK_SIZE_4096B
 ((
uöt32_t
)0x000000C0)

	)

310 
	#SDIO_DATABLOCK_SIZE_8192B
 ((
uöt32_t
)0x000000D0)

	)

311 
	#SDIO_DATABLOCK_SIZE_16384B
 ((
uöt32_t
)0x000000E0)

	)

313 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_DATABLOCK_SIZE_1B
) || \

314 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_2B
) || \

315 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_4B
) || \

316 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_8B
) || \

317 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_16B
) || \

318 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_32B
) || \

319 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_64B
) || \

320 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_128B
) || \

321 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_256B
) || \

322 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_512B
) || \

323 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_1024B
) || \

324 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_2048B
) || \

325 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_4096B
) || \

326 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_8192B
) || \

327 ((
SIZE
Ë=
SDIO_DATABLOCK_SIZE_16384B
))

	)

335 
	#SDIO_TRANSFER_DIR_TO_CARD
 ((
uöt32_t
)0x00000000)

	)

336 
	#SDIO_TRANSFER_DIR_TO_SDIO
 
SDIO_DCTRL_DTDIR


	)

338 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_TRANSFER_DIR_TO_CARD
) || \

339 ((
DIR
Ë=
SDIO_TRANSFER_DIR_TO_SDIO
))

	)

347 
	#SDIO_TRANSFER_MODE_BLOCK
 ((
uöt32_t
)0x00000000)

	)

348 
	#SDIO_TRANSFER_MODE_STREAM
 
SDIO_DCTRL_DTMODE


	)

350 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_TRANSFER_MODE_BLOCK
) || \

351 ((
MODE
Ë=
SDIO_TRANSFER_MODE_STREAM
))

	)

359 
	#SDIO_DPSM_DISABLE
 ((
uöt32_t
)0x00000000)

	)

360 
	#SDIO_DPSM_ENABLE
 
SDIO_DCTRL_DTEN


	)

362 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_DISABLE
) ||\

363 ((
DPSM
Ë=
SDIO_DPSM_ENABLE
))

	)

371 
	#SDIO_READ_WAIT_MODE_DATA2
 ((
uöt32_t
)0x00000000)

	)

372 
	#SDIO_READ_WAIT_MODE_CLK
 ((
uöt32_t
)0x00000001)

	)

374 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_READ_WAIT_MODE_CLK
) || \

375 ((
MODE
Ë=
SDIO_READ_WAIT_MODE_DATA2
))

	)

383 
	#SDIO_IT_CCRCFAIL
 
SDIO_STA_CCRCFAIL


	)

384 
	#SDIO_IT_DCRCFAIL
 
SDIO_STA_DCRCFAIL


	)

385 
	#SDIO_IT_CTIMEOUT
 
SDIO_STA_CTIMEOUT


	)

386 
	#SDIO_IT_DTIMEOUT
 
SDIO_STA_DTIMEOUT


	)

387 
	#SDIO_IT_TXUNDERR
 
SDIO_STA_TXUNDERR


	)

388 
	#SDIO_IT_RXOVERR
 
SDIO_STA_RXOVERR


	)

389 
	#SDIO_IT_CMDREND
 
SDIO_STA_CMDREND


	)

390 
	#SDIO_IT_CMDSENT
 
SDIO_STA_CMDSENT


	)

391 
	#SDIO_IT_DATAEND
 
SDIO_STA_DATAEND


	)

392 
	#SDIO_IT_STBITERR
 
SDIO_STA_STBITERR


	)

393 
	#SDIO_IT_DBCKEND
 
SDIO_STA_DBCKEND


	)

394 
	#SDIO_IT_CMDACT
 
SDIO_STA_CMDACT


	)

395 
	#SDIO_IT_TXACT
 
SDIO_STA_TXACT


	)

396 
	#SDIO_IT_RXACT
 
SDIO_STA_RXACT


	)

397 
	#SDIO_IT_TXFIFOHE
 
SDIO_STA_TXFIFOHE


	)

398 
	#SDIO_IT_RXFIFOHF
 
SDIO_STA_RXFIFOHF


	)

399 
	#SDIO_IT_TXFIFOF
 
SDIO_STA_TXFIFOF


	)

400 
	#SDIO_IT_RXFIFOF
 
SDIO_STA_RXFIFOF


	)

401 
	#SDIO_IT_TXFIFOE
 
SDIO_STA_TXFIFOE


	)

402 
	#SDIO_IT_RXFIFOE
 
SDIO_STA_RXFIFOE


	)

403 
	#SDIO_IT_TXDAVL
 
SDIO_STA_TXDAVL


	)

404 
	#SDIO_IT_RXDAVL
 
SDIO_STA_RXDAVL


	)

405 
	#SDIO_IT_SDIOIT
 
SDIO_STA_SDIOIT


	)

406 
	#SDIO_IT_CEATAEND
 
SDIO_STA_CEATAEND


	)

414 
	#SDIO_FLAG_CCRCFAIL
 
SDIO_STA_CCRCFAIL


	)

415 
	#SDIO_FLAG_DCRCFAIL
 
SDIO_STA_DCRCFAIL


	)

416 
	#SDIO_FLAG_CTIMEOUT
 
SDIO_STA_CTIMEOUT


	)

417 
	#SDIO_FLAG_DTIMEOUT
 
SDIO_STA_DTIMEOUT


	)

418 
	#SDIO_FLAG_TXUNDERR
 
SDIO_STA_TXUNDERR


	)

419 
	#SDIO_FLAG_RXOVERR
 
SDIO_STA_RXOVERR


	)

420 
	#SDIO_FLAG_CMDREND
 
SDIO_STA_CMDREND


	)

421 
	#SDIO_FLAG_CMDSENT
 
SDIO_STA_CMDSENT


	)

422 
	#SDIO_FLAG_DATAEND
 
SDIO_STA_DATAEND


	)

423 
	#SDIO_FLAG_STBITERR
 
SDIO_STA_STBITERR


	)

424 
	#SDIO_FLAG_DBCKEND
 
SDIO_STA_DBCKEND


	)

425 
	#SDIO_FLAG_CMDACT
 
SDIO_STA_CMDACT


	)

426 
	#SDIO_FLAG_TXACT
 
SDIO_STA_TXACT


	)

427 
	#SDIO_FLAG_RXACT
 
SDIO_STA_RXACT


	)

428 
	#SDIO_FLAG_TXFIFOHE
 
SDIO_STA_TXFIFOHE


	)

429 
	#SDIO_FLAG_RXFIFOHF
 
SDIO_STA_RXFIFOHF


	)

430 
	#SDIO_FLAG_TXFIFOF
 
SDIO_STA_TXFIFOF


	)

431 
	#SDIO_FLAG_RXFIFOF
 
SDIO_STA_RXFIFOF


	)

432 
	#SDIO_FLAG_TXFIFOE
 
SDIO_STA_TXFIFOE


	)

433 
	#SDIO_FLAG_RXFIFOE
 
SDIO_STA_RXFIFOE


	)

434 
	#SDIO_FLAG_TXDAVL
 
SDIO_STA_TXDAVL


	)

435 
	#SDIO_FLAG_RXDAVL
 
SDIO_STA_RXDAVL


	)

436 
	#SDIO_FLAG_SDIOIT
 
SDIO_STA_SDIOIT


	)

437 
	#SDIO_FLAG_CEATAEND
 
SDIO_STA_CEATAEND


	)

454 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

458 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

459 
	#CLKEN_BITNUMBER
 0x08

	)

460 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BITNUMBER
 * 4))

	)

464 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

465 
	#SDIOSUSPEND_BITNUMBER
 0x0B

	)

466 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BITNUMBER
 * 4))

	)

469 
	#ENCMDCOMPL_BITNUMBER
 0x0C

	)

470 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BITNUMBER
 * 4))

	)

473 
	#NIEN_BITNUMBER
 0x0D

	)

474 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BITNUMBER
 * 4))

	)

477 
	#ATACMD_BITNUMBER
 0x0E

	)

478 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BITNUMBER
 * 4))

	)

482 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

483 
	#DMAEN_BITNUMBER
 0x03

	)

484 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BITNUMBER
 * 4))

	)

487 
	#RWSTART_BITNUMBER
 0x08

	)

488 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BITNUMBER
 * 4))

	)

491 
	#RWSTOP_BITNUMBER
 0x09

	)

492 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BITNUMBER
 * 4))

	)

495 
	#RWMOD_BITNUMBER
 0x0A

	)

496 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BITNUMBER
 * 4))

	)

499 
	#SDIOEN_BITNUMBER
 0x0B

	)

500 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BITNUMBER
 * 4))

	)

513 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)(
SDIO_CLKCR_CLKDIV
 | 
SDIO_CLKCR_PWRSAV
 |\

514 
SDIO_CLKCR_BYPASS
 | 
SDIO_CLKCR_WIDBUS
 |\

515 
SDIO_CLKCR_NEGEDGE
 | 
SDIO_CLKCR_HWFC_EN
))

	)

520 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)(
SDIO_DCTRL_DTEN
 | 
SDIO_DCTRL_DTDIR
 |\

521 
SDIO_DCTRL_DTMODE
 | 
SDIO_DCTRL_DBLOCKSIZE
))

	)

525 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)(
SDIO_CMD_CMDINDEX
 | 
SDIO_CMD_WAITRESP
 |\

526 
SDIO_CMD_WAITINT
 | 
SDIO_CMD_WAITPEND
 |\

527 
SDIO_CMD_CPSMEN
 | 
SDIO_CMD_SDIOSUSPEND
))

	)

530 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

533 
	#SDIO_INIT_CLK_DIV
 ((
uöt8_t
)0x76)

	)

536 
	#SDIO_TRANSFER_CLK_DIV
 ((
uöt8_t
)0x0)

	)

550 
	#__SDIO_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *)
CLKCR_CLKEN_BB
 = 
ENABLE
)

	)

556 
	#__SDIO_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *)
CLKCR_CLKEN_BB
 = 
DISABLE
)

	)

562 
	#__SDIO_DMA_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *)
DCTRL_DMAEN_BB
 = 
ENABLE
)

	)

568 
	#__SDIO_DMA_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *)
DCTRL_DMAEN_BB
 = 
DISABLE
)

	)

602 
	#__SDIO_ENABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
MASK
 |(__INTERRUPT__))

	)

636 
	#__SDIO_DISABLE_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
MASK
 &~(__INTERRUPT__))

	)

669 
	#__SDIO_GET_FLAG
(
__INSTANCE__
, 
__FLAG__
Ë(((__INSTANCE__)->
STA
 &(__FLAG__)Ë!
RESET
)

	)

692 
	#__SDIO_CLEAR_FLAG
(
__INSTANCE__
, 
__FLAG__
Ë((__INSTANCE__)->
ICR
 = (__FLAG__))

	)

726 
	#__SDIO_GET_IT
 (
__INSTANCE__
, 
__INTERRUPT__
Ë(((__INSTANCE__)->
STA
 &(__INTERRUPT__)Ë=(__INTERRUPT__))

	)

748 
	#__SDIO_CLEAR_IT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
ICR
 = (__INTERRUPT__))

	)

754 
	#__SDIO_START_READWAIT_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = 
ENABLE
)

	)

760 
	#__SDIO_START_READWAIT_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = 
DISABLE
)

	)

766 
	#__SDIO_STOP_READWAIT_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = 
ENABLE
)

	)

772 
	#__SDIO_STOP_READWAIT_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = 
DISABLE
)

	)

778 
	#__SDIO_OPERATION_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = 
ENABLE
)

	)

784 
	#__SDIO_OPERATION_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = 
DISABLE
)

	)

790 
	#__SDIO_SUSPEND_CMD_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = 
ENABLE
)

	)

796 
	#__SDIO_SUSPEND_CMD_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = 
DISABLE
)

	)

798 #i‡
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

799 
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

800 
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| 
	$deföed
(
STM32F411xE
)

805 
	#__SDIO_CEATA_CMD_COMPLETION_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = 
ENABLE
)

	)

811 
	#__SDIO_CEATA_CMD_COMPLETION_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = 
DISABLE
)

	)

817 
	#__SDIO_CEATA_ENABLE_IT
(Ë(*(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)0)

	)

823 
	#__SDIO_CEATA_DISABLE_IT
(Ë(*(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)1)

	)

829 
	#__SDIO_CEATA_SENDCMD_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = 
ENABLE
)

	)

835 
	#__SDIO_CEATA_SENDCMD_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = 
DISABLE
)

	)

837 
STM32F427xx
 || 
STM32F437xx
 || 
STM32F429xx
 || 
STM32F439xx
 */

855 
HAL_SètusTy≥Def
 
	`SDIO_Inô
(
SDIO_Ty≥Def
 *
SDIOx
, 
SDIO_InôTy≥Def
 
Inô
);

865 
uöt32_t
 
	`SDIO_RódFIFO
(
SDIO_Ty≥Def
 *
SDIOx
);

866 
HAL_SètusTy≥Def
 
	`SDIO_WrôeFIFO
(
SDIO_Ty≥Def
 *
SDIOx
, 
uöt32_t
 *
pWrôeD©a
);

875 
HAL_SètusTy≥Def
 
	`SDIO_PowîSèã_ON
(
SDIO_Ty≥Def
 *
SDIOx
);

876 
HAL_SètusTy≥Def
 
	`SDIO_PowîSèã_OFF
(
SDIO_Ty≥Def
 *
SDIOx
);

877 
uöt32_t
 
	`SDIO_GëPowîSèã
(
SDIO_Ty≥Def
 *
SDIOx
);

880 
HAL_SètusTy≥Def
 
	`SDIO_SídComm™d
(
SDIO_Ty≥Def
 *
SDIOx
, 
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

881 
uöt8_t
 
	`SDIO_GëComm™dRe•⁄£
(
SDIO_Ty≥Def
 *
SDIOx
);

882 
uöt32_t
 
	`SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

885 
HAL_SètusTy≥Def
 
	`SDIO_D©aC⁄fig
(
SDIO_Ty≥Def
 *
SDIOx
, 
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

886 
uöt32_t
 
	`SDIO_GëD©aCou¡î
(
SDIO_Ty≥Def
 *
SDIOx
);

887 
uöt32_t
 
	`SDIO_GëFIFOCou¡
(
SDIO_Ty≥Def
 *
SDIOx
);

890 
HAL_SètusTy≥Def
 
	`SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

908 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

909 #ifde‡
__˝lu•lus


910 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_ll_usb.h

39 #i‚de‡
__STM32F4xx_LL_USB_H


40 
	#__STM32F4xx_LL_USB_H


	)

42 #ifde‡
__˝lu•lus


45 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

46 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

47 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

48 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

50 
	~"°m32f4xx_hÆ_def.h
"

67 
USB_OTG_DEVICE_MODE
 = 0,

68 
USB_OTG_HOST_MODE
 = 1,

69 
USB_OTG_DRD_MODE
 = 2

71 }
	tUSB_OTG_ModeTy≥Def
;

77 
URB_IDLE
 = 0,

78 
URB_DONE
,

79 
URB_NOTREADY
,

80 
URB_NYET
,

81 
URB_ERROR
,

82 
URB_STALL


84 }
	tUSB_OTG_URBSèãTy≥Def
;

90 
HC_IDLE
 = 0,

91 
HC_XFRC
,

92 
HC_HALTED
,

93 
HC_NAK
,

94 
HC_NYET
,

95 
HC_STALL
,

96 
HC_XACTERR
,

97 
HC_BBLERR
,

98 
HC_DATATGLERR


100 }
	tUSB_OTG_HCSèãTy≥Def
;

107 
uöt32_t
 
dev_ídpoöts
;

111 
uöt32_t
 
Ho°_ch™√ls
;

115 
uöt32_t
 
•ìd
;

118 
uöt32_t
 
dma_íabÀ
;

120 
uöt32_t
 
ï0_mps
;

123 
uöt32_t
 
phy_ôÁ˚
;

126 
uöt32_t
 
Sof_íabÀ
;

128 
uöt32_t
 
low_powî_íabÀ
;

130 
uöt32_t
 
Õm_íabÀ
;

132 
uöt32_t
 
b©ãry_ch¨gög_íabÀ
;

134 
uöt32_t
 
vbus_£nsög_íabÀ
;

136 
uöt32_t
 
u£_dediˇãd_ï1
;

138 
uöt32_t
 
u£_exã∫Æ_vbus
;

140 }
	tUSB_OTG_CfgTy≥Def
;

144 
uöt8_t
 
num
;

147 
uöt8_t
 
is_ö
;

150 
uöt8_t
 
is_°Æl
;

153 
uöt8_t
 
ty≥
;

156 
uöt8_t
 
d©a_pid_°¨t
;

159 
uöt8_t
 
eví_odd_‰ame
;

162 
uöt16_t
 
tx_fifo_num
;

165 
uöt32_t
 
max∑ckë
;

168 
uöt8_t
 *
x„r_buff
;

170 
uöt32_t
 
dma_addr
;

172 
uöt32_t
 
x„r_Àn
;

174 
uöt32_t
 
x„r_cou¡
;

176 }
	tUSB_OTG_EPTy≥Def
;

180 
uöt8_t
 
dev_addr
 ;

183 
uöt8_t
 
ch_num
;

186 
uöt8_t
 
ï_num
;

189 
uöt8_t
 
ï_is_ö
;

192 
uöt8_t
 
•ìd
;

195 
uöt8_t
 
do_pög
;

197 
uöt8_t
 
¥o˚ss_pög
;

199 
uöt8_t
 
ï_ty≥
;

202 
uöt16_t
 
max_∑ckë
;

205 
uöt8_t
 
d©a_pid
;

208 
uöt8_t
 *
x„r_buff
;

210 
uöt32_t
 
x„r_Àn
;

212 
uöt32_t
 
x„r_cou¡
;

214 
uöt8_t
 
toggÀ_ö
;

217 
uöt8_t
 
toggÀ_out
;

220 
uöt32_t
 
dma_addr
;

222 
uöt32_t
 
EºC¡
;

224 
USB_OTG_URBSèãTy≥Def
 
urb_°©e
;

227 
USB_OTG_HCSèãTy≥Def
 
°©e
;

230 }
	tUSB_OTG_HCTy≥Def
;

241 
	#USB_OTG_MODE_DEVICE
 0

	)

242 
	#USB_OTG_MODE_HOST
 1

	)

243 
	#USB_OTG_MODE_DRD
 2

	)

251 
	#USB_OTG_SPEED_HIGH
 0

	)

252 
	#USB_OTG_SPEED_HIGH_IN_FULL
 1

	)

253 
	#USB_OTG_SPEED_LOW
 2

	)

254 
	#USB_OTG_SPEED_FULL
 3

	)

262 
	#USB_OTG_ULPI_PHY
 1

	)

263 
	#USB_OTG_EMBEDDED_PHY
 2

	)

271 
	#USB_OTG_HS_MAX_PACKET_SIZE
 512

	)

272 
	#USB_OTG_FS_MAX_PACKET_SIZE
 64

	)

273 
	#USB_OTG_MAX_EP0_SIZE
 64

	)

281 
	#DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ
 (0 << 1)

	)

282 
	#DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
 (1 << 1)

	)

283 
	#DSTS_ENUMSPD_LS_PHY_6MHZ
 (2 << 1)

	)

284 
	#DSTS_ENUMSPD_FS_PHY_48MHZ
 (3 << 1)

	)

292 
	#DCFG_FRAME_INTERVAL_80
 0

	)

293 
	#DCFG_FRAME_INTERVAL_85
 1

	)

294 
	#DCFG_FRAME_INTERVAL_90
 2

	)

295 
	#DCFG_FRAME_INTERVAL_95
 3

	)

303 
	#DEP0CTL_MPS_64
 0

	)

304 
	#DEP0CTL_MPS_32
 1

	)

305 
	#DEP0CTL_MPS_16
 2

	)

306 
	#DEP0CTL_MPS_8
 3

	)

314 
	#EP_SPEED_LOW
 0

	)

315 
	#EP_SPEED_FULL
 1

	)

316 
	#EP_SPEED_HIGH
 2

	)

324 
	#EP_TYPE_CTRL
 0

	)

325 
	#EP_TYPE_ISOC
 1

	)

326 
	#EP_TYPE_BULK
 2

	)

327 
	#EP_TYPE_INTR
 3

	)

328 
	#EP_TYPE_MSK
 3

	)

336 
	#STS_GOUT_NAK
 1

	)

337 
	#STS_DATA_UPDT
 2

	)

338 
	#STS_XFER_COMP
 3

	)

339 
	#STS_SETUP_COMP
 4

	)

340 
	#STS_SETUP_UPDT
 6

	)

348 
	#HCFG_30_60_MHZ
 0

	)

349 
	#HCFG_48_MHZ
 1

	)

350 
	#HCFG_6_MHZ
 2

	)

358 
	#HPRT0_PRTSPD_HIGH_SPEED
 0

	)

359 
	#HPRT0_PRTSPD_FULL_SPEED
 1

	)

360 
	#HPRT0_PRTSPD_LOW_SPEED
 2

	)

365 
	#HCCHAR_CTRL
 0

	)

366 
	#HCCHAR_ISOC
 1

	)

367 
	#HCCHAR_BULK
 2

	)

368 
	#HCCHAR_INTR
 3

	)

370 
	#HC_PID_DATA0
 0

	)

371 
	#HC_PID_DATA2
 1

	)

372 
	#HC_PID_DATA1
 2

	)

373 
	#HC_PID_SETUP
 3

	)

375 
	#GRXSTS_PKTSTS_IN
 2

	)

376 
	#GRXSTS_PKTSTS_IN_XFER_COMP
 3

	)

377 
	#GRXSTS_PKTSTS_DATA_TOGGLE_ERR
 5

	)

378 
	#GRXSTS_PKTSTS_CH_HALTED
 7

	)

380 
	#USBx_PCGCCTL
 *(
__IO
 
uöt32_t
 *)((uöt32_t)
USBx
 + 
USB_OTG_PCGCCTL_BASE
)

	)

381 
	#USBx_HPRT0
 *(
__IO
 
uöt32_t
 *)((uöt32_t)
USBx
 + 
USB_OTG_HOST_PORT_BASE
)

	)

383 
	#USBx_DEVICE
 ((
USB_OTG_Devi˚Ty≥Def
 *)((
uöt32_t
 )
USBx
 + 
USB_OTG_DEVICE_BASE
))

	)

384 
	#USBx_INEP
(
i
Ë((
USB_OTG_INEndpoötTy≥Def
 *)((
uöt32_t
)
USBx
 + 
USB_OTG_IN_ENDPOINT_BASE
 + (i)*
USB_OTG_EP_REG_SIZE
))

	)

385 
	#USBx_OUTEP
(
i
Ë((
USB_OTG_OUTEndpoötTy≥Def
 *)((
uöt32_t
)
USBx
 + 
USB_OTG_OUT_ENDPOINT_BASE
 + (i)*
USB_OTG_EP_REG_SIZE
))

	)

386 
	#USBx_DFIFO
(
i
Ë*(
__IO
 
uöt32_t
 *)((uöt32_t)
USBx
 + 
USB_OTG_FIFO_BASE
 + (iË* 
USB_OTG_FIFO_SIZE
)

	)

388 
	#USBx_HOST
 ((
USB_OTG_Ho°Ty≥Def
 *)((
uöt32_t
 )
USBx
 + 
USB_OTG_HOST_BASE
))

	)

389 
	#USBx_HC
(
i
Ë((
USB_OTG_Ho°Ch™√lTy≥Def
 *)((
uöt32_t
)
USBx
 + 
USB_OTG_HOST_CHANNEL_BASE
 + (i)*
USB_OTG_HOST_CHANNEL_SIZE
))

	)

394 
	#USB_MASK_INTERRUPT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
GINTMSK
 &~(__INTERRUPT__))

	)

395 
	#USB_UNMASK_INTERRUPT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
GINTMSK
 |(__INTERRUPT__))

	)

397 
	#CLEAR_IN_EP_INTR
(
__EPNUM__
, 
__INTERRUPT__
Ë(
	`USBx_INEP
(__EPNUM__)->
DIEPINT
 = (__INTERRUPT__))

	)

398 
	#CLEAR_OUT_EP_INTR
(
__EPNUM__
, 
__INTERRUPT__
Ë(
	`USBx_OUTEP
(__EPNUM__)->
DOEPINT
 = (__INTERRUPT__))

	)

401 
HAL_SètusTy≥Def
 
	`USB_C‹eInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
Inô
);

402 
HAL_SètusTy≥Def
 
	`USB_DevInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
Inô
);

403 
HAL_SètusTy≥Def
 
	`USB_E«bÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

404 
HAL_SètusTy≥Def
 
	`USB_DißbÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

405 
HAL_SètusTy≥Def
 
	`USB_SëCuºítMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_ModeTy≥Def
 
mode
);

406 
HAL_SètusTy≥Def
 
	`USB_SëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
•ìd
);

407 
HAL_SètusTy≥Def
 
	`USB_FlushRxFifo
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

408 
HAL_SètusTy≥Def
 
	`USB_FlushTxFifo
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
num
 );

409 
HAL_SètusTy≥Def
 
	`USB_A˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

410 
HAL_SètusTy≥Def
 
	`USB_Dó˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

411 
HAL_SètusTy≥Def
 
	`USB_A˘iv©eDediˇãdEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

412 
HAL_SètusTy≥Def
 
	`USB_Dó˘iv©eDediˇãdEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

413 
HAL_SètusTy≥Def
 
	`USB_EPSèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
, 
uöt8_t
 
dma
);

414 
HAL_SètusTy≥Def
 
	`USB_EP0SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
, 
uöt8_t
 
dma
);

415 
HAL_SètusTy≥Def
 
	`USB_WrôePackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
§c
, uöt8_à
ch_ï_num
, 
uöt16_t
 
Àn
, uöt8_à
dma
);

416 * 
	`USB_RódPackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
);

417 
HAL_SètusTy≥Def
 
	`USB_EPSëSèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
);

418 
HAL_SètusTy≥Def
 
	`USB_EPCÀ¨SèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
);

419 
HAL_SètusTy≥Def
 
	`USB_SëDevAddªss
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
addªss
);

420 
HAL_SètusTy≥Def
 
	`USB_DevC⁄√˘
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

421 
HAL_SètusTy≥Def
 
	`USB_DevDisc⁄√˘
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

422 
HAL_SètusTy≥Def
 
	`USB_St›Devi˚
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

423 
HAL_SètusTy≥Def
 
	`USB_A˘iv©eSëup
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

424 
HAL_SètusTy≥Def
 
	`USB_EP0_OutSèπ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
dma
, uöt8_à*
p£tup
);

425 
uöt8_t
 
	`USB_GëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

426 
uöt32_t
 
	`USB_GëMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

427 
uöt32_t
 
	`USB_RódI¡îru±s
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

428 
uöt32_t
 
	`USB_RódDevAŒOutEpI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

429 
uöt32_t
 
	`USB_RódDevOutEPI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
);

430 
uöt32_t
 
	`USB_RódDevAŒInEpI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

431 
uöt32_t
 
	`USB_RódDevInEPI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
);

432 
	`USB_CÀ¨I¡îru±s
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
);

434 
HAL_SètusTy≥Def
 
	`USB_Ho°Inô
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
);

435 
HAL_SètusTy≥Def
 
	`USB_InôFSLSPClkSñ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
‰eq
);

436 
HAL_SètusTy≥Def
 
	`USB_Re£tP‹t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

437 
HAL_SètusTy≥Def
 
	`USB_DriveVbus
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
°©e
);

438 
uöt32_t
 
	`USB_GëHo°S≥ed
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

439 
uöt32_t
 
	`USB_GëCuºítFøme
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

440 
HAL_SètusTy≥Def
 
	`USB_HC_Inô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
,

441 
uöt8_t
 
ch_num
,

442 
uöt8_t
 
ïnum
,

443 
uöt8_t
 
dev_addªss
,

444 
uöt8_t
 
•ìd
,

445 
uöt8_t
 
ï_ty≥
,

446 
uöt16_t
 
mps
);

447 
HAL_SètusTy≥Def
 
	`USB_HC_SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_HCTy≥Def
 *
hc
, 
uöt8_t
 
dma
);

448 
uöt32_t
 
	`USB_HC_RódI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
);

449 
HAL_SètusTy≥Def
 
	`USB_HC_HÆt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
hc_num
);

450 
HAL_SètusTy≥Def
 
	`USB_DoPög
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ch_num
);

451 
HAL_SètusTy≥Def
 
	`USB_St›Ho°
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

461 
STM32F401xC
 || 
STM32F401xE
 || 
STM32F411xE
 || 
STM32F446xx
 || 
STM32F469xx
 || 
STM32F479xx
 */

462 #ifde‡
__˝lu•lus


463 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal.c

54 
	~"°m32f4xx_hÆ.h
"

73 
	#__STM32F4xx_HAL_VERSION_MAIN
 (0x01Ë

	)

74 
	#__STM32F4xx_HAL_VERSION_SUB1
 (0x04Ë

	)

75 
	#__STM32F4xx_HAL_VERSION_SUB2
 (0x00Ë

	)

76 
	#__STM32F4xx_HAL_VERSION_RC
 (0x00Ë

	)

77 
	#__STM32F4xx_HAL_VERSION
 ((
__STM32F4xx_HAL_VERSION_MAIN
 << 24)\

78 |(
__STM32F4xx_HAL_VERSION_SUB1
 << 16)\

79 |(
__STM32F4xx_HAL_VERSION_SUB2
 << 8 )\

80 |(
__STM32F4xx_HAL_VERSION_RC
))

	)

82 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

85 
	#SYSCFG_OFFSET
 (
SYSCFG_BASE
 - 
PERIPH_BASE
)

	)

88 
	#MEMRMP_OFFSET
 
SYSCFG_OFFSET


	)

89 
	#UFB_MODE_BIT_NUMBER
 
	`POSITION_VAL
(
SYSCFG_MEMRMP_UFB_MODE
)

	)

90 
	#UFB_MODE_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
MEMRMP_OFFSET
 * 32Ë+ (
UFB_MODE_BIT_NUMBER
 * 4))

	)

94 
	#CMPCR_OFFSET
 (
SYSCFG_OFFSET
 + 0x20)

	)

95 
	#CMP_PD_BIT_NUMBER
 
	`POSITION_VAL
(
SYSCFG_CMPCR_CMP_PD
)

	)

96 
	#CMPCR_CMP_PD_BB
 (
uöt32_t
)(
PERIPH_BB_BASE
 + (
CMPCR_OFFSET
 * 32Ë+ (
CMP_PD_BIT_NUMBER
 * 4))

	)

106 
__IO
 
uöt32_t
 
	guwTick
;

167 
HAL_SètusTy≥Def
 
	$HAL_Inô
()

170 #i‡(
INSTRUCTION_CACHE_ENABLE
 != 0)

171 
	`__HAL_FLASH_INSTRUCTION_CACHE_ENABLE
();

174 #i‡(
DATA_CACHE_ENABLE
 != 0)

175 
	`__HAL_FLASH_DATA_CACHE_ENABLE
();

178 #i‡(
PREFETCH_ENABLE
 != 0)

179 
	`__HAL_FLASH_PREFETCH_BUFFER_ENABLE
();

183 
	`HAL_NVIC_SëPri‹ôyGroupög
(
NVIC_PRIORITYGROUP_4
);

186 
	`HAL_InôTick
(
TICK_INT_PRIORITY
);

189 
	`HAL_M•Inô
();

192  
HAL_OK
;

193 
	}
}

200 
HAL_SètusTy≥Def
 
	$HAL_DeInô
()

203 
	`__HAL_RCC_APB1_FORCE_RESET
();

204 
	`__HAL_RCC_APB1_RELEASE_RESET
();

206 
	`__HAL_RCC_APB2_FORCE_RESET
();

207 
	`__HAL_RCC_APB2_RELEASE_RESET
();

209 
	`__HAL_RCC_AHB1_FORCE_RESET
();

210 
	`__HAL_RCC_AHB1_RELEASE_RESET
();

212 
	`__HAL_RCC_AHB2_FORCE_RESET
();

213 
	`__HAL_RCC_AHB2_RELEASE_RESET
();

215 
	`__HAL_RCC_AHB3_FORCE_RESET
();

216 
	`__HAL_RCC_AHB3_RELEASE_RESET
();

219 
	`HAL_M•DeInô
();

222  
HAL_OK
;

223 
	}
}

229 
__wók
 
	$HAL_M•Inô
()

234 
	}
}

240 
__wók
 
	$HAL_M•DeInô
()

245 
	}
}

263 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_InôTick
(
uöt32_t
 
TickPri‹ôy
)

266 
	`HAL_SYSTICK_C⁄fig
(
	`HAL_RCC_GëHCLKFªq
()/1000);

269 
	`HAL_NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
TickPri‹ôy
 ,0);

272  
HAL_OK
;

273 
	}
}

311 
__wók
 
	$HAL_IncTick
()

313 
uwTick
++;

314 
	}
}

322 
__wók
 
uöt32_t
 
	$HAL_GëTick
()

324  
uwTick
;

325 
	}
}

338 
__wók
 
	$HAL_Dñay
(
__IO
 
uöt32_t
 
Dñay
)

340 
uöt32_t
 
tick°¨t
 = 0;

341 
tick°¨t
 = 
	`HAL_GëTick
();

342 (
	`HAL_GëTick
(Ë- 
tick°¨t
Ë< 
Dñay
)

345 
	}
}

357 
__wók
 
	$HAL_Su•ídTick
()

360 
SysTick
->
CTRL
 &~
SysTick_CTRL_TICKINT_Msk
;

361 
	}
}

373 
__wók
 
	$HAL_ResumeTick
()

376 
SysTick
->
CTRL
 |
SysTick_CTRL_TICKINT_Msk
;

377 
	}
}

383 
uöt32_t
 
	$HAL_GëHÆVîsi⁄
()

385  
__STM32F4xx_HAL_VERSION
;

386 
	}
}

392 
uöt32_t
 
	$HAL_GëREVID
()

394 ((
DBGMCU
->
IDCODE
) >> 16);

395 
	}
}

401 
uöt32_t
 
	$HAL_GëDEVID
()

403 ((
DBGMCU
->
IDCODE
Ë& 
IDCODE_DEVID_MASK
);

404 
	}
}

410 
	$HAL_DBGMCU_E«bÀDBGSÀïMode
()

412 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

413 
	}
}

419 
	$HAL_DBGMCU_DißbÀDBGSÀïMode
()

421 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

422 
	}
}

428 
	$HAL_DBGMCU_E«bÀDBGSt›Mode
()

430 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

431 
	}
}

437 
	$HAL_DBGMCU_DißbÀDBGSt›Mode
()

439 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

440 
	}
}

446 
	$HAL_DBGMCU_E«bÀDBGSèndbyMode
()

448 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

449 
	}
}

455 
	$HAL_DBGMCU_DißbÀDBGSèndbyMode
()

457 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

458 
	}
}

466 
	$HAL_E«bÀCom≥nßti⁄Cñl
()

468 *(
__IO
 
uöt32_t
 *)
CMPCR_CMP_PD_BB
 = (uöt32_t)
ENABLE
;

469 
	}
}

477 
	$HAL_DißbÀCom≥nßti⁄Cñl
()

479 *(
__IO
 
uöt32_t
 *)
CMPCR_CMP_PD_BB
 = (uöt32_t)
DISABLE
;

480 
	}
}

482 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
) ||\

483 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

494 
	$HAL_E«bÀMem‹ySw≠pögB™k
()

496 *(
__IO
 
uöt32_t
 *)
UFB_MODE_BB
 = (uöt32_t)
ENABLE
;

497 
	}
}

509 
	$HAL_DißbÀMem‹ySw≠pögB™k
()

512 *(
__IO
 
uöt32_t
 *)
UFB_MODE_BB
 = (uöt32_t)
DISABLE
;

513 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_adc.c

195 
	~"°m32f4xx_hÆ.h
"

206 #ifde‡
HAL_ADC_MODULE_ENABLED


216 
ADC_Inô
(
ADC_H™dÀTy≥Def
* 
hadc
);

217 
ADC_DMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

218 
ADC_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

219 
ADC_DMAHÆfC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

258 
HAL_SètusTy≥Def
 
	$HAL_ADC_Inô
(
ADC_H™dÀTy≥Def
* 
hadc
)

261 if(
hadc
 =
NULL
)

263  
HAL_ERROR
;

267 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

268 
	`as£π_∑øm
(
	`IS_ADC_CLOCKPRESCALER
(
hadc
->
Inô
.
ClockPªsˇÀr
));

269 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
hadc
->
Inô
.
Resﬁuti⁄
));

270 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
SˇnC⁄vMode
));

271 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

272 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
));

273 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
hadc
->
Inô
.
D©aAlign
));

274 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
hadc
->
Inô
.
NbrOfC⁄vîsi⁄
));

275 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
DMAC⁄töuousReque°s
));

276 
	`as£π_∑øm
(
	`IS_ADC_EOCSñe˘i⁄
(
hadc
->
Inô
.
EOCSñe˘i⁄
));

277 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
Disc⁄töuousC⁄vMode
));

279 if(
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
 !
ADC_SOFTWARE_START
)

281 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
));

284 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_RESET
)

287 
hadc
->
Lock
 = 
HAL_UNLOCKED
;

289 
	`HAL_ADC_M•Inô
(
hadc
);

293 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY
;

296 
	`ADC_Inô
(
hadc
);

299 
hadc
->
Eº‹Code
 = 
HAL_ADC_ERROR_NONE
;

302 
hadc
->
Sèã
 = 
HAL_ADC_STATE_READY
;

305 
	`__HAL_UNLOCK
(
hadc
);

308  
HAL_OK
;

309 
	}
}

317 
HAL_SètusTy≥Def
 
	$HAL_ADC_DeInô
(
ADC_H™dÀTy≥Def
* 
hadc
)

320 if(
hadc
 =
NULL
)

322  
HAL_ERROR
;

326 
	`as£π_∑øm
(
	`IS_ADC_ALL_INSTANCE
(
hadc
->
In°™˚
));

329 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY
;

332 
	`HAL_ADC_M•DeInô
(
hadc
);

335 
hadc
->
Eº‹Code
 = 
HAL_ADC_ERROR_NONE
;

338 
hadc
->
Sèã
 = 
HAL_ADC_STATE_RESET
;

341  
HAL_OK
;

342 
	}
}

350 
__wók
 
	$HAL_ADC_M•Inô
(
ADC_H™dÀTy≥Def
* 
hadc
)

355 
	}
}

363 
__wók
 
	$HAL_ADC_M•DeInô
(
ADC_H™dÀTy≥Def
* 
hadc
)

368 
	}
}

400 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ
(
ADC_H™dÀTy≥Def
* 
hadc
)

402 
__IO
 
uöt32_t
 
cou¡î
 = 0;

405 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

406 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
));

409 
	`__HAL_LOCK
(
hadc
);

412 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_BUSY_INJ
)

415 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_INJ_REG
;

420 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_REG
;

425 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_ADON
) != ADC_CR2_ADON)

428 
	`__HAL_ADC_ENABLE
(
hadc
);

432 
cou¡î
 = (
ADC_STAB_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

433 
cou¡î
 != 0)

435 
cou¡î
--;

440 
	`__HAL_UNLOCK
(
hadc
);

443 if(
	`HAL_IS_BIT_CLR
(
ADC
->
CCR
, 
ADC_CCR_MULTI
))

446 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_EXTEN
Ë=
RESET
)

449 
hadc
->
In°™˚
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

455 if((
hadc
->
In°™˚
 =
ADC1
Ë&& ((hadc->In°™˚->
CR2
 & 
ADC_CR2_EXTEN
Ë=
RESET
))

458 
hadc
->
In°™˚
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

463  
HAL_OK
;

464 
	}
}

476 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›
(
ADC_H™dÀTy≥Def
* 
hadc
)

479 
	`__HAL_ADC_DISABLE
(
hadc
);

482 
hadc
->
Sèã
 = 
HAL_ADC_STATE_READY
;

485  
HAL_OK
;

486 
	}
}

503 
HAL_SètusTy≥Def
 
	$HAL_ADC_PﬁlF‹C⁄vîsi⁄
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Timeout
)

505 
uöt32_t
 
tick°¨t
 = 0;

513 i‡(
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_EOCS
) &&

514 
	`HAL_IS_BIT_SET
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_DMA
) )

517 
hadc
->
Sèã
 = 
HAL_ADC_STATE_ERROR
;

520 
	`__HAL_UNLOCK
(
hadc
);

522  
HAL_ERROR
;

526 
tick°¨t
 = 
	`HAL_GëTick
();

529 !(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOC
)))

532 if(
Timeout
 !
HAL_MAX_DELAY
)

534 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

536 
hadc
->
Sèã

HAL_ADC_STATE_TIMEOUT
;

538 
	`__HAL_UNLOCK
(
hadc
);

539  
HAL_TIMEOUT
;

545 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_EOC_INJ
)

548 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_INJ_REG
;

553 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_REG
;

557  
HAL_OK
;

558 
	}
}

571 
HAL_SètusTy≥Def
 
	$HAL_ADC_PﬁlF‹Evít
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
EvítTy≥
, uöt32_à
Timeout
)

573 
uöt32_t
 
tick°¨t
 = 0;

576 
	`as£π_∑øm
(
	`IS_ADC_EVENT_TYPE
(
EvítTy≥
));

579 
tick°¨t
 = 
	`HAL_GëTick
();

582 !(
	`__HAL_ADC_GET_FLAG
(
hadc
,
EvítTy≥
)))

585 if(
Timeout
 !
HAL_MAX_DELAY
)

587 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

589 
hadc
->
Sèã

HAL_ADC_STATE_TIMEOUT
;

591 
	`__HAL_UNLOCK
(
hadc
);

592  
HAL_TIMEOUT
;

598 if(
EvítTy≥
 =
ADC_AWD_EVENT
)

601 
hadc
->
Sèã
 = 
HAL_ADC_STATE_AWD
;

604 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_AWD
);

609 
hadc
->
Sèã
 = 
HAL_ADC_STATE_ERROR
;

612 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
, 
ADC_FLAG_OVR
);

616  
HAL_OK
;

617 
	}
}

626 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

628 
__IO
 
uöt32_t
 
cou¡î
 = 0;

631 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

632 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
));

635 
	`__HAL_LOCK
(
hadc
);

638 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_BUSY_INJ
)

641 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_INJ_REG
;

646 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_REG
;

650 
hadc
->
Eº‹Code
 = 
HAL_ADC_ERROR_NONE
;

654 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_ADON
) != ADC_CR2_ADON)

657 
	`__HAL_ADC_ENABLE
(
hadc
);

661 
cou¡î
 = (
ADC_STAB_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

662 
cou¡î
 != 0)

664 
cou¡î
--;

669 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_OVR
);

672 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_EOC
);

675 
	`__HAL_UNLOCK
(
hadc
);

678 if(
	`HAL_IS_BIT_CLR
(
ADC
->
CCR
, 
ADC_CCR_MULTI
))

681 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_EXTEN
Ë=
RESET
)

684 
hadc
->
In°™˚
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

690 if((
hadc
->
In°™˚
 =(
ADC_Ty≥Def
*)0x40012000Ë&& ((hadc->In°™˚->
CR2
 & 
ADC_CR2_EXTEN
Ë=
RESET
))

693 
hadc
->
In°™˚
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

698  
HAL_OK
;

699 
	}
}

710 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

713 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

716 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_CR1_JEOCIE
);

719 
	`__HAL_ADC_DISABLE
(
hadc
);

722 
hadc
->
Sèã
 = 
HAL_ADC_STATE_READY
;

725  
HAL_OK
;

726 
	}
}

734 
	$HAL_ADC_IRQH™dÀr
(
ADC_H™dÀTy≥Def
* 
hadc
)

736 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

739 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

740 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
hadc
->
Inô
.
NbrOfC⁄vîsi⁄
));

741 
	`as£π_∑øm
(
	`IS_ADC_EOCSñe˘i⁄
(
hadc
->
Inô
.
EOCSñe˘i⁄
));

743 
tmp1
 = 
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_EOC
);

744 
tmp2
 = 
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_EOC
);

746 if(
tmp1
 && 
tmp2
)

749 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_EOC_INJ
)

752 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_INJ_REG
;

757 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_REG
;

760 if((
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
Ë&& ((hadc->
In°™˚
->
CR2
 & 
ADC_CR2_EXTEN
Ë=
RESET
))

762 if(
hadc
->
Inô
.
EOCSñe˘i⁄
 =
ADC_EOC_SEQ_CONV
)

765 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

768 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_OVR
);

772 i‡(
hadc
->
NbrOfCuºítC⁄vîsi⁄R™k
 == 0)

774 
hadc
->
NbrOfCuºítC⁄vîsi⁄R™k
 = hadc->
Inô
.
NbrOfC⁄vîsi⁄
;

778 
hadc
->
NbrOfCuºítC⁄vîsi⁄R™k
--;

781 if(
hadc
->
NbrOfCuºítC⁄vîsi⁄R™k
 == 0)

784 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

787 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_OVR
);

793 
	`HAL_ADC_C⁄vC∂tCÆlback
(
hadc
);

796 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
,
ADC_FLAG_EOC
);

799 
tmp1
 = 
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_JEOC
);

800 
tmp2
 = 
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_JEOC
);

802 if(
tmp1
 && 
tmp2
)

805 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_EOC_REG
)

808 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_INJ_REG
;

813 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_INJ
;

816 
tmp1
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
);

817 
tmp2
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_JEXTEN
);

818 if(((
hadc
->
Inô
.
C⁄töuousC⁄vMode
 =
DISABLE
Ë|| 
tmp1
Ë&& 
tmp2
)

821 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_JEOC
);

825 
	`HAL_ADCEx_Inje˘edC⁄vC∂tCÆlback
(
hadc
);

828 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
,
ADC_FLAG_JEOC
);

831 
tmp1
 = 
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_AWD
);

832 
tmp2
 = 
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_AWD
);

834 if(
tmp1
 && 
tmp2
)

837 
hadc
->
Sèã
 = 
HAL_ADC_STATE_AWD
;

840 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
,
ADC_FLAG_AWD
);

843 
	`HAL_ADC_LevñOutOfWödowCÆlback
(
hadc
);

846 
tmp1
 = 
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_OVR
);

847 
tmp2
 = 
	`__HAL_ADC_GET_IT_SOURCE
(
hadc
, 
ADC_IT_OVR
);

849 if(
tmp1
 && 
tmp2
)

852 
hadc
->
Sèã
 = 
HAL_ADC_STATE_ERROR
;

855 
hadc
->
Eº‹Code
 |
HAL_ADC_ERROR_OVR
;

858 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
,
ADC_FLAG_OVR
);

861 
	`HAL_ADC_Eº‹CÆlback
(
hadc
);

863 
	}
}

873 
HAL_SètusTy≥Def
 
	$HAL_ADC_Sèπ_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
* 
pD©a
, uöt32_à
Lígth
)

875 
__IO
 
uöt32_t
 
cou¡î
 = 0;

878 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

879 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
));

882 
	`__HAL_LOCK
(
hadc
);

885 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_OVR
);

888 
hadc
->
In°™˚
->
CR2
 |
ADC_CR2_DMA
;

891 
hadc
->
DMA_H™dÀ
->
X„rC∂tCÆlback
 = 
ADC_DMAC⁄vC∂t
;

894 
hadc
->
DMA_H™dÀ
->
X„rHÆfC∂tCÆlback
 = 
ADC_DMAHÆfC⁄vC∂t
;

897 
hadc
->
DMA_H™dÀ
->
X„rEº‹CÆlback
 = 
ADC_DMAEº‹
 ;

900 
	`HAL_DMA_Sèπ_IT
(
hadc
->
DMA_H™dÀ
, (
uöt32_t
)&hadc->
In°™˚
->
DR
, (uöt32_t)
pD©a
, 
Lígth
);

903 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_REG
;

906 
	`__HAL_UNLOCK
(
hadc
);

910 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_ADON
) != ADC_CR2_ADON)

913 
	`__HAL_ADC_ENABLE
(
hadc
);

917 
cou¡î
 = (
ADC_STAB_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

918 
cou¡î
 != 0)

920 
cou¡î
--;

925 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_EXTEN
Ë=
RESET
)

928 
hadc
->
In°™˚
->
CR2
 |
ADC_CR2_SWSTART
;

932  
HAL_OK
;

933 
	}
}

941 
HAL_SètusTy≥Def
 
	$HAL_ADC_St›_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
)

944 
	`__HAL_ADC_DISABLE
(
hadc
);

947 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_OVR
);

950 
hadc
->
In°™˚
->
CR2
 &~
ADC_CR2_DMA
;

953 
	`HAL_DMA_Ab‹t
(
hadc
->
DMA_H™dÀ
);

956 
hadc
->
Sèã
 = 
HAL_ADC_STATE_READY
;

959  
HAL_OK
;

960 
	}
}

968 
uöt32_t
 
	$HAL_ADC_GëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
)

971  
hadc
->
In°™˚
->
DR
;

972 
	}
}

980 
__wók
 
	$HAL_ADC_C⁄vC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

985 
	}
}

993 
__wók
 
	$HAL_ADC_C⁄vHÆfC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

998 
	}
}

1006 
__wók
 
	$HAL_ADC_LevñOutOfWödowCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

1011 
	}
}

1019 
__wók
 
	$HAL_ADC_Eº‹CÆlback
(
ADC_H™dÀTy≥Def
 *
hadc
)

1024 
	}
}

1055 
HAL_SètusTy≥Def
 
	$HAL_ADC_C⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
)

1057 
__IO
 
uöt32_t
 
cou¡î
 = 0;

1060 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
sC⁄fig
->
Ch™√l
));

1061 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
sC⁄fig
->
R™k
));

1062 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
sC⁄fig
->
Sam∂ögTime
));

1065 
	`__HAL_LOCK
(
hadc
);

1068 i‡(
sC⁄fig
->
Ch™√l
 > 
ADC_CHANNEL_9
)

1071 
hadc
->
In°™˚
->
SMPR1
 &~
	`ADC_SMPR1
(
ADC_SMPR1_SMP10
, 
sC⁄fig
->
Ch™√l
);

1074 
hadc
->
In°™˚
->
SMPR1
 |
	`ADC_SMPR1
(
sC⁄fig
->
Sam∂ögTime
, sC⁄fig->
Ch™√l
);

1079 
hadc
->
In°™˚
->
SMPR2
 &~
	`ADC_SMPR2
(
ADC_SMPR2_SMP0
, 
sC⁄fig
->
Ch™√l
);

1082 
hadc
->
In°™˚
->
SMPR2
 |
	`ADC_SMPR2
(
sC⁄fig
->
Sam∂ögTime
, sC⁄fig->
Ch™√l
);

1086 i‡(
sC⁄fig
->
R™k
 < 7)

1089 
hadc
->
In°™˚
->
SQR3
 &~
	`ADC_SQR3_RK
(
ADC_SQR3_SQ1
, 
sC⁄fig
->
R™k
);

1092 
hadc
->
In°™˚
->
SQR3
 |
	`ADC_SQR3_RK
(
sC⁄fig
->
Ch™√l
, sC⁄fig->
R™k
);

1095 i‡(
sC⁄fig
->
R™k
 < 13)

1098 
hadc
->
In°™˚
->
SQR2
 &~
	`ADC_SQR2_RK
(
ADC_SQR2_SQ7
, 
sC⁄fig
->
R™k
);

1101 
hadc
->
In°™˚
->
SQR2
 |
	`ADC_SQR2_RK
(
sC⁄fig
->
Ch™√l
, sC⁄fig->
R™k
);

1107 
hadc
->
In°™˚
->
SQR1
 &~
	`ADC_SQR1_RK
(
ADC_SQR1_SQ13
, 
sC⁄fig
->
R™k
);

1110 
hadc
->
In°™˚
->
SQR1
 |
	`ADC_SQR1_RK
(
sC⁄fig
->
Ch™√l
, sC⁄fig->
R™k
);

1114 i‡((
hadc
->
In°™˚
 =
ADC1
Ë&& (
sC⁄fig
->
Ch™√l
 =
ADC_CHANNEL_VBAT
))

1117 
ADC
->
CCR
 |
ADC_CCR_VBATE
;

1121 i‡((
hadc
->
In°™˚
 =
ADC1
Ë&& ((
sC⁄fig
->
Ch™√l
 =
ADC_CHANNEL_TEMPSENSOR
Ë|| (sC⁄fig->Ch™√»=
ADC_CHANNEL_VREFINT
)))

1124 
ADC
->
CCR
 |
ADC_CCR_TSVREFE
;

1126 if((
sC⁄fig
->
Ch™√l
 =
ADC_CHANNEL_TEMPSENSOR
))

1130 
cou¡î
 = (
ADC_TEMPSENSOR_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

1131 
cou¡î
 != 0)

1133 
cou¡î
--;

1139 
	`__HAL_UNLOCK
(
hadc
);

1142  
HAL_OK
;

1143 
	}
}

1153 
HAL_SètusTy≥Def
 
	$HAL_ADC_A«logWDGC⁄fig
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_A«logWDGC⁄fTy≥Def
* 
A«logWDGC⁄fig
)

1155 #ifde‡
USE_FULL_ASSERT


1156 
uöt32_t
 
tmp
 = 0;

1160 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
A«logWDGC⁄fig
->
W©chdogMode
));

1161 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
A«logWDGC⁄fig
->
Ch™√l
));

1162 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
A«logWDGC⁄fig
->
ITMode
));

1164 #ifde‡
USE_FULL_ASSERT


1165 
tmp
 = 
	`ADC_GET_RESOLUTION
(
hadc
);

1166 
	`as£π_∑øm
(
	`IS_ADC_RANGE
(
tmp
, 
A«logWDGC⁄fig
->
HighThªshﬁd
));

1167 
	`as£π_∑øm
(
	`IS_ADC_RANGE
(
tmp
, 
A«logWDGC⁄fig
->
LowThªshﬁd
));

1171 
	`__HAL_LOCK
(
hadc
);

1173 if(
A«logWDGC⁄fig
->
ITMode
 =
ENABLE
)

1176 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_AWD
);

1181 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_AWD
);

1185 
hadc
->
In°™˚
->
CR1
 &~(
ADC_CR1_AWDSGL
 | 
ADC_CR1_JAWDEN
 | 
ADC_CR1_AWDEN
);

1188 
hadc
->
In°™˚
->
CR1
 |
A«logWDGC⁄fig
->
W©chdogMode
;

1191 
hadc
->
In°™˚
->
HTR
 = 
A«logWDGC⁄fig
->
HighThªshﬁd
;

1194 
hadc
->
In°™˚
->
LTR
 = 
A«logWDGC⁄fig
->
LowThªshﬁd
;

1197 
hadc
->
In°™˚
->
CR1
 &~
ADC_CR1_AWDCH
;

1200 
hadc
->
In°™˚
->
CR1
 |(
uöt32_t
)((
uöt16_t
)(
A«logWDGC⁄fig
->
Ch™√l
));

1203 
	`__HAL_UNLOCK
(
hadc
);

1206  
HAL_OK
;

1207 
	}
}

1235 
HAL_ADC_SèãTy≥Def
 
	$HAL_ADC_GëSèã
(
ADC_H™dÀTy≥Def
* 
hadc
)

1238  
hadc
->
Sèã
;

1239 
	}
}

1247 
uöt32_t
 
	$HAL_ADC_GëEº‹
(
ADC_H™dÀTy≥Def
 *
hadc
)

1249  
hadc
->
Eº‹Code
;

1250 
	}
}

1267 
	$ADC_Inô
(
ADC_H™dÀTy≥Def
* 
hadc
)

1271 
ADC
->
CCR
 &~(
ADC_CCR_ADCPRE
);

1272 
ADC
->
CCR
 |
hadc
->
Inô
.
ClockPªsˇÀr
;

1275 
hadc
->
In°™˚
->
CR1
 &~(
ADC_CR1_SCAN
);

1276 
hadc
->
In°™˚
->
CR1
 |
	`ADC_CR1_SCANCONV
(hadc->
Inô
.
SˇnC⁄vMode
);

1279 
hadc
->
In°™˚
->
CR1
 &~(
ADC_CR1_RES
);

1280 
hadc
->
In°™˚
->
CR1
 |hadc->
Inô
.
Resﬁuti⁄
;

1283 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_ALIGN
);

1284 
hadc
->
In°™˚
->
CR2
 |hadc->
Inô
.
D©aAlign
;

1291 if(
hadc
->
Inô
.
Exã∫ÆTrigC⁄v
 !
ADC_SOFTWARE_START
)

1294 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_EXTSEL
);

1295 
hadc
->
In°™˚
->
CR2
 |hadc->
Inô
.
Exã∫ÆTrigC⁄v
;

1298 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_EXTEN
);

1299 
hadc
->
In°™˚
->
CR2
 |hadc->
Inô
.
Exã∫ÆTrigC⁄vEdge
;

1304 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_EXTSEL
);

1305 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_EXTEN
);

1309 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_CONT
);

1310 
hadc
->
In°™˚
->
CR2
 |
	`ADC_CR2_CONTINUOUS
(hadc->
Inô
.
C⁄töuousC⁄vMode
);

1312 if(
hadc
->
Inô
.
Disc⁄töuousC⁄vMode
 !
DISABLE
)

1314 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
hadc
->
Inô
.
NbrOfDiscC⁄vîsi⁄
));

1317 
hadc
->
In°™˚
->
CR1
 |(
uöt32_t
)
ADC_CR1_DISCEN
;

1320 
hadc
->
In°™˚
->
CR1
 &~(
ADC_CR1_DISCNUM
);

1321 
hadc
->
In°™˚
->
CR1
 |
	`ADC_CR1_DISCONTINUOUS
(hadc->
Inô
.
NbrOfDiscC⁄vîsi⁄
);

1326 
hadc
->
In°™˚
->
CR1
 &~(
ADC_CR1_DISCEN
);

1330 
hadc
->
In°™˚
->
SQR1
 &~(
ADC_SQR1_L
);

1331 
hadc
->
In°™˚
->
SQR1
 |
	`ADC_SQR1
(hadc->
Inô
.
NbrOfC⁄vîsi⁄
);

1334 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_DDS
);

1335 
hadc
->
In°™˚
->
CR2
 |
	`ADC_CR2_DMAC⁄tReq
(hadc->
Inô
.
DMAC⁄töuousReque°s
);

1338 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_EOCS
);

1339 
hadc
->
In°™˚
->
CR2
 |
	`ADC_CR2_EOCSñe˘i⁄
(hadc->
Inô
.
EOCSñe˘i⁄
);

1340 
	}
}

1348 
	$ADC_DMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1350 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1353 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_EOC_INJ
)

1356 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_INJ_REG
;

1361 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_REG
;

1364 
	`HAL_ADC_C⁄vC∂tCÆlback
(
hadc
);

1365 
	}
}

1373 
	$ADC_DMAHÆfC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1375 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1377 
	`HAL_ADC_C⁄vHÆfC∂tCÆlback
(
hadc
);

1378 
	}
}

1386 
	$ADC_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1388 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1389 
hadc
->
Sèã

HAL_ADC_STATE_ERROR
;

1391 
hadc
->
Eº‹Code
 |
HAL_ADC_ERROR_DMA
;

1392 
	`HAL_ADC_Eº‹CÆlback
(
hadc
);

1393 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_adc_ex.c

117 
	~"°m32f4xx_hÆ.h
"

128 #ifde‡
HAL_ADC_MODULE_ENABLED


138 
ADC_Mu…iModeDMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

139 
ADC_Mu…iModeDMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

140 
ADC_Mu…iModeDMAHÆfC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

177 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edSèπ
(
ADC_H™dÀTy≥Def
* 
hadc
)

179 
__IO
 
uöt32_t
 
cou¡î
 = 0;

180 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

183 
	`__HAL_LOCK
(
hadc
);

186 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_BUSY_REG
)

189 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_INJ_REG
;

194 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_INJ
;

199 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_ADON
) != ADC_CR2_ADON)

202 
	`__HAL_ADC_ENABLE
(
hadc
);

206 
cou¡î
 = (
ADC_STAB_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

207 
cou¡î
 != 0)

209 
cou¡î
--;

214 if(
	`HAL_IS_BIT_CLR
(
ADC
->
CCR
, 
ADC_CCR_MULTI
))

216 
tmp1
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_JEXTEN
);

217 
tmp2
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
);

218 if(
tmp1
 && 
tmp2
)

221 
hadc
->
In°™˚
->
CR2
 |
ADC_CR2_JSWSTART
;

226 
tmp1
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_JEXTEN
);

227 
tmp2
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
);

228 if((
hadc
->
In°™˚
 =
ADC1
Ë&& 
tmp1
 && 
tmp2
)

231 
hadc
->
In°™˚
->
CR2
 |
ADC_CR2_JSWSTART
;

236 
	`__HAL_UNLOCK
(
hadc
);

239  
HAL_OK
;

240 
	}
}

249 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edSèπ_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

251 
__IO
 
uöt32_t
 
cou¡î
 = 0;

252 
uöt32_t
 
tmp1
 = 0, 
tmp2
 =0;

255 
	`__HAL_LOCK
(
hadc
);

258 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_BUSY_REG
)

261 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_INJ_REG
;

266 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_INJ
;

270 
hadc
->
Eº‹Code
 = 
HAL_ADC_ERROR_NONE
;

274 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_ADON
) != ADC_CR2_ADON)

277 
	`__HAL_ADC_ENABLE
(
hadc
);

281 
cou¡î
 = (
ADC_STAB_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

282 
cou¡î
 != 0)

284 
cou¡î
--;

289 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_JEOC
);

292 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_OVR
);

295 if(
	`HAL_IS_BIT_CLR
(
ADC
->
CCR
, 
ADC_CCR_MULTI
))

297 
tmp1
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_JEXTEN
);

298 
tmp2
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
);

299 if(
tmp1
 && 
tmp2
)

302 
hadc
->
In°™˚
->
CR2
 |
ADC_CR2_JSWSTART
;

307 
tmp1
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR2
, 
ADC_CR2_JEXTEN
);

308 
tmp2
 = 
	`HAL_IS_BIT_CLR
(
hadc
->
In°™˚
->
CR1
, 
ADC_CR1_JAUTO
);

309 if((
hadc
->
In°™˚
 =
ADC1
Ë&& 
tmp1
 && 
tmp2
)

312 
hadc
->
In°™˚
->
CR2
 |
ADC_CR2_JSWSTART
;

317 
	`__HAL_UNLOCK
(
hadc
);

320  
HAL_OK
;

321 
	}
}

332 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edSt›
(
ADC_H™dÀTy≥Def
* 
hadc
)

335 
	`__HAL_ADC_DISABLE
(
hadc
);

338 
hadc
->
Sèã
 = 
HAL_ADC_STATE_READY
;

341  
HAL_OK
;

342 
	}
}

351 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edPﬁlF‹C⁄vîsi⁄
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Timeout
)

353 
uöt32_t
 
tick°¨t
 = 0;

356 
tick°¨t
 = 
	`HAL_GëTick
();

359 !(
	`__HAL_ADC_GET_FLAG
(
hadc
, 
ADC_FLAG_JEOC
)))

362 if(
Timeout
 !
HAL_MAX_DELAY
)

364 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

366 
hadc
->
Sèã

HAL_ADC_STATE_TIMEOUT
;

368 
	`__HAL_UNLOCK
(
hadc
);

369  
HAL_TIMEOUT
;

375 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_EOC_REG
)

378 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_INJ_REG
;

383 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_INJ
;

387  
HAL_OK
;

388 
	}
}

399 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edSt›_IT
(
ADC_H™dÀTy≥Def
* 
hadc
)

402 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_EOC
);

405 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_CR1_JEOCIE
);

408 
	`__HAL_ADC_DISABLE
(
hadc
);

411 
hadc
->
Sèã
 = 
HAL_ADC_STATE_READY
;

414  
HAL_OK
;

415 
	}
}

429 
uöt32_t
 
	$HAL_ADCEx_Inje˘edGëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
 
Inje˘edR™k
)

431 
__IO
 
uöt32_t
 
tmp
 = 0;

434 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
Inje˘edR™k
));

437 
	`__HAL_ADC_CLEAR_FLAG
(
hadc
,
ADC_FLAG_JEOC
);

440 
Inje˘edR™k
)

442 
ADC_INJECTED_RANK_4
:

444 
tmp
 = 
hadc
->
In°™˚
->
JDR4
;

447 
ADC_INJECTED_RANK_3
:

449 
tmp
 = 
hadc
->
In°™˚
->
JDR3
;

452 
ADC_INJECTED_RANK_2
:

454 
tmp
 = 
hadc
->
In°™˚
->
JDR2
;

457 
ADC_INJECTED_RANK_1
:

459 
tmp
 = 
hadc
->
In°™˚
->
JDR1
;

465  
tmp
;

466 
	}
}

479 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Mu…iModeSèπ_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
, 
uöt32_t
* 
pD©a
, uöt32_à
Lígth
)

481 
__IO
 
uöt32_t
 
cou¡î
 = 0;

484 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
C⁄töuousC⁄vMode
));

485 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
hadc
->
Inô
.
Exã∫ÆTrigC⁄vEdge
));

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hadc
->
Inô
.
DMAC⁄töuousReque°s
));

489 
	`__HAL_LOCK
(
hadc
);

492 
	`__HAL_ADC_ENABLE_IT
(
hadc
, 
ADC_IT_OVR
);

494 i‡(
hadc
->
Inô
.
DMAC⁄töuousReque°s
 !
DISABLE
)

497 
ADC
->
CCR
 |
ADC_CCR_DDS
;

502 
ADC
->
CCR
 &~
ADC_CCR_DDS
;

506 
hadc
->
DMA_H™dÀ
->
X„rC∂tCÆlback
 = 
ADC_Mu…iModeDMAC⁄vC∂t
;

509 
hadc
->
DMA_H™dÀ
->
X„rHÆfC∂tCÆlback
 = 
ADC_Mu…iModeDMAHÆfC⁄vC∂t
;

512 
hadc
->
DMA_H™dÀ
->
X„rEº‹CÆlback
 = 
ADC_Mu…iModeDMAEº‹
 ;

515 
	`HAL_DMA_Sèπ_IT
(
hadc
->
DMA_H™dÀ
, (
uöt32_t
)&
ADC
->
CDR
, (uöt32_t)
pD©a
, 
Lígth
);

518 
hadc
->
Sèã
 = 
HAL_ADC_STATE_BUSY_REG
;

522 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_ADON
) != ADC_CR2_ADON)

525 
	`__HAL_ADC_ENABLE
(
hadc
);

529 
cou¡î
 = (
ADC_STAB_DELAY_US
 * (
Sy°emC‹eClock
 / 1000000));

530 
cou¡î
 != 0)

532 
cou¡î
--;

537 if((
hadc
->
In°™˚
->
CR2
 & 
ADC_CR2_EXTEN
Ë=
RESET
)

540 
hadc
->
In°™˚
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

544 
	`__HAL_UNLOCK
(
hadc
);

547  
HAL_OK
;

548 
	}
}

556 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Mu…iModeSt›_DMA
(
ADC_H™dÀTy≥Def
* 
hadc
)

559 
	`__HAL_LOCK
(
hadc
);

562 
	`__HAL_ADC_DISABLE
(
hadc
);

565 
	`__HAL_ADC_DISABLE_IT
(
hadc
, 
ADC_IT_OVR
);

568 
ADC
->
CCR
 &~
ADC_CCR_DDS
;

571 
	`HAL_DMA_Ab‹t
(
hadc
->
DMA_H™dÀ
);

574 
hadc
->
Sèã
 = 
HAL_ADC_STATE_READY
;

577 
	`__HAL_UNLOCK
(
hadc
);

580  
HAL_OK
;

581 
	}
}

590 
uöt32_t
 
	$HAL_ADCEx_Mu…iModeGëVÆue
(
ADC_H™dÀTy≥Def
* 
hadc
)

593  
ADC
->
CDR
;

594 
	}
}

602 
__wók
 
	$HAL_ADCEx_Inje˘edC⁄vC∂tCÆlback
(
ADC_H™dÀTy≥Def
* 
hadc
)

607 
	}
}

617 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Inje˘edC⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Inje˘i⁄C⁄fTy≥Def
* 
sC⁄figInje˘ed
)

620 #ifde‡
USE_FULL_ASSERT


621 
uöt32_t
 
tmp
 = 0;

625 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
sC⁄figInje˘ed
->
Inje˘edCh™√l
));

626 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
sC⁄figInje˘ed
->
Inje˘edR™k
));

627 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
sC⁄figInje˘ed
->
Inje˘edSam∂ögTime
));

628 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄v
));

629 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
sC⁄figInje˘ed
->
Inje˘edNbrOfC⁄vîsi⁄
));

630 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
sC⁄figInje˘ed
->
AutoInje˘edC⁄v
));

631 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
sC⁄figInje˘ed
->
Inje˘edDisc⁄töuousC⁄vMode
));

633 #ifde‡
USE_FULL_ASSERT


634 
tmp
 = 
	`ADC_GET_RESOLUTION
(
hadc
);

635 
	`as£π_∑øm
(
	`IS_ADC_RANGE
(
tmp
, 
sC⁄figInje˘ed
->
Inje˘edOff£t
));

638 if(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄vEdge
 !
ADC_INJECTED_SOFTWARE_START
)

640 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG_EDGE
(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄vEdge
));

644 
	`__HAL_LOCK
(
hadc
);

647 i‡(
sC⁄figInje˘ed
->
Inje˘edCh™√l
 > 
ADC_CHANNEL_9
)

650 
hadc
->
In°™˚
->
SMPR1
 &~
	`ADC_SMPR1
(
ADC_SMPR1_SMP10
, 
sC⁄figInje˘ed
->
Inje˘edCh™√l
);

653 
hadc
->
In°™˚
->
SMPR1
 |
	`ADC_SMPR1
(
sC⁄figInje˘ed
->
Inje˘edSam∂ögTime
, sC⁄figInje˘ed->
Inje˘edCh™√l
);

658 
hadc
->
In°™˚
->
SMPR2
 &~
	`ADC_SMPR2
(
ADC_SMPR2_SMP0
, 
sC⁄figInje˘ed
->
Inje˘edCh™√l
);

661 
hadc
->
In°™˚
->
SMPR2
 |
	`ADC_SMPR2
(
sC⁄figInje˘ed
->
Inje˘edSam∂ögTime
, sC⁄figInje˘ed->
Inje˘edCh™√l
);

665 
hadc
->
In°™˚
->
JSQR
 &~(
ADC_JSQR_JL
);

666 
hadc
->
In°™˚
->
JSQR
 |
	`ADC_SQR1
(
sC⁄figInje˘ed
->
Inje˘edNbrOfC⁄vîsi⁄
);

671 
hadc
->
In°™˚
->
JSQR
 &~
	`ADC_JSQR
(
ADC_JSQR_JSQ1
, 
sC⁄figInje˘ed
->
Inje˘edR™k
,sC⁄figInje˘ed->
Inje˘edNbrOfC⁄vîsi⁄
);

674 
hadc
->
In°™˚
->
JSQR
 |
	`ADC_JSQR
(
sC⁄figInje˘ed
->
Inje˘edCh™√l
, sC⁄figInje˘ed->
Inje˘edR™k
,sC⁄figInje˘ed->
Inje˘edNbrOfC⁄vîsi⁄
);

681 if(
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄v
 !
ADC_INJECTED_SOFTWARE_START
)

684 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_JEXTSEL
);

685 
hadc
->
In°™˚
->
CR2
 |
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄v
;

688 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_JEXTEN
);

689 
hadc
->
In°™˚
->
CR2
 |
sC⁄figInje˘ed
->
Exã∫ÆTrigInjecC⁄vEdge
;

694 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_JEXTSEL
);

695 
hadc
->
In°™˚
->
CR2
 &~(
ADC_CR2_JEXTEN
);

698 i‡(
sC⁄figInje˘ed
->
AutoInje˘edC⁄v
 !
DISABLE
)

701 
hadc
->
In°™˚
->
CR1
 |
ADC_CR1_JAUTO
;

706 
hadc
->
In°™˚
->
CR1
 &~(
ADC_CR1_JAUTO
);

709 i‡(
sC⁄figInje˘ed
->
Inje˘edDisc⁄töuousC⁄vMode
 !
DISABLE
)

712 
hadc
->
In°™˚
->
CR1
 |
ADC_CR1_JDISCEN
;

717 
hadc
->
In°™˚
->
CR1
 &~(
ADC_CR1_JDISCEN
);

720 
sC⁄figInje˘ed
->
Inje˘edR™k
)

724 
hadc
->
In°™˚
->
JOFR1
 &~(
ADC_JOFR1_JOFFSET1
);

725 
hadc
->
In°™˚
->
JOFR1
 |
sC⁄figInje˘ed
->
Inje˘edOff£t
;

729 
hadc
->
In°™˚
->
JOFR2
 &~(
ADC_JOFR2_JOFFSET2
);

730 
hadc
->
In°™˚
->
JOFR2
 |
sC⁄figInje˘ed
->
Inje˘edOff£t
;

734 
hadc
->
In°™˚
->
JOFR3
 &~(
ADC_JOFR3_JOFFSET3
);

735 
hadc
->
In°™˚
->
JOFR3
 |
sC⁄figInje˘ed
->
Inje˘edOff£t
;

739 
hadc
->
In°™˚
->
JOFR4
 &~(
ADC_JOFR4_JOFFSET4
);

740 
hadc
->
In°™˚
->
JOFR4
 |
sC⁄figInje˘ed
->
Inje˘edOff£t
;

745 i‡((
hadc
->
In°™˚
 =
ADC1
Ë&& (
sC⁄figInje˘ed
->
Inje˘edCh™√l
 =
ADC_CHANNEL_VBAT
))

748 
ADC
->
CCR
 |
ADC_CCR_VBATE
;

752 i‡((
hadc
->
In°™˚
 =
ADC1
Ë&& ((
sC⁄figInje˘ed
->
Inje˘edCh™√l
 =
ADC_CHANNEL_TEMPSENSOR
Ë|| (sC⁄figInje˘ed->Inje˘edCh™√»=
ADC_CHANNEL_VREFINT
)))

755 
ADC
->
CCR
 |
ADC_CCR_TSVREFE
;

759 
	`__HAL_UNLOCK
(
hadc
);

762  
HAL_OK
;

763 
	}
}

773 
HAL_SètusTy≥Def
 
	$HAL_ADCEx_Mu…iModeC⁄figCh™√l
(
ADC_H™dÀTy≥Def
* 
hadc
, 
ADC_Mu…iModeTy≥Def
* 
mu…imode
)

776 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
mu…imode
->
Mode
));

777 
	`as£π_∑øm
(
	`IS_ADC_DMA_ACCESS_MODE
(
mu…imode
->
DMAAc˚ssMode
));

778 
	`as£π_∑øm
(
	`IS_ADC_SAMPLING_DELAY
(
mu…imode
->
TwoSam∂ögDñay
));

781 
	`__HAL_LOCK
(
hadc
);

784 
ADC
->
CCR
 &~(
ADC_CCR_MULTI
);

785 
ADC
->
CCR
 |
mu…imode
->
Mode
;

788 
ADC
->
CCR
 &~(
ADC_CCR_DMA
);

789 
ADC
->
CCR
 |
mu…imode
->
DMAAc˚ssMode
;

792 
ADC
->
CCR
 &~(
ADC_CCR_DELAY
);

793 
ADC
->
CCR
 |
mu…imode
->
TwoSam∂ögDñay
;

796 
	`__HAL_UNLOCK
(
hadc
);

799  
HAL_OK
;

800 
	}
}

812 
	$ADC_Mu…iModeDMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

814 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

817 if(
hadc
->
Sèã
 =
HAL_ADC_STATE_EOC_INJ
)

820 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_INJ_REG
;

825 
hadc
->
Sèã
 = 
HAL_ADC_STATE_EOC_REG
;

828 
	`HAL_ADC_C⁄vC∂tCÆlback
(
hadc
);

829 
	}
}

837 
	$ADC_Mu…iModeDMAHÆfC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

839 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

841 
	`HAL_ADC_C⁄vHÆfC∂tCÆlback
(
hadc
);

842 
	}
}

850 
	$ADC_Mu…iModeDMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

852 
ADC_H™dÀTy≥Def
* 
hadc
 = ( ADC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

853 
hadc
->
Sèã

HAL_ADC_STATE_ERROR
;

855 
hadc
->
Eº‹Code
 |
HAL_ADC_ERROR_DMA
;

856 
	`HAL_ADC_Eº‹CÆlback
(
hadc
);

857 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_can.c

103 
	~"°m32f4xx_hÆ.h
"

114 #ifde‡
HAL_CAN_MODULE_ENABLED


116 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

117 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

118 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

125 
	#CAN_TIMEOUT_VALUE
 10

	)

135 
HAL_SètusTy≥Def
 
	`CAN_Re˚ive_IT
(
CAN_H™dÀTy≥Def
* 
hˇn
, 
uöt8_t
 
FIFONumbî
);

136 
HAL_SètusTy≥Def
 
	`CAN_Tønsmô_IT
(
CAN_H™dÀTy≥Def
* 
hˇn
);

168 
HAL_SètusTy≥Def
 
	$HAL_CAN_Inô
(
CAN_H™dÀTy≥Def
* 
hˇn
)

170 
uöt32_t
 
InôSètus
 = 3;

171 
uöt32_t
 
tick°¨t
 = 0;

174 if(
hˇn
 =
NULL
)

176  
HAL_ERROR
;

180 
	`as£π_∑øm
(
	`IS_CAN_ALL_INSTANCE
(
hˇn
->
In°™˚
));

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hˇn
->
Inô
.
TTCM
));

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hˇn
->
Inô
.
ABOM
));

183 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hˇn
->
Inô
.
AWUM
));

184 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hˇn
->
Inô
.
NART
));

185 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hˇn
->
Inô
.
RFLM
));

186 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
hˇn
->
Inô
.
TXFP
));

187 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
hˇn
->
Inô
.
Mode
));

188 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
hˇn
->
Inô
.
SJW
));

189 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
hˇn
->
Inô
.
BS1
));

190 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
hˇn
->
Inô
.
BS2
));

191 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
hˇn
->
Inô
.
PªsˇÀr
));

194 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_RESET
)

197 
hˇn
->
Lock
 = 
HAL_UNLOCKED
;

199 
	`HAL_CAN_M•Inô
(
hˇn
);

203 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY
;

206 
hˇn
->
In°™˚
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

209 
hˇn
->
In°™˚
->
MCR
 |
CAN_MCR_INRQ
 ;

212 
tick°¨t
 = 
	`HAL_GëTick
();

215 (
hˇn
->
In°™˚
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

217 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CAN_TIMEOUT_VALUE
)

219 
hˇn
->
Sèã

HAL_CAN_STATE_TIMEOUT
;

221 
	`__HAL_UNLOCK
(
hˇn
);

222  
HAL_TIMEOUT
;

227 i‡((
hˇn
->
In°™˚
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

229 
InôSètus
 = 
CAN_INITSTATUS_FAILED
;

234 i‡(
hˇn
->
Inô
.
TTCM
 =
ENABLE
)

236 
hˇn
->
In°™˚
->
MCR
 |
CAN_MCR_TTCM
;

240 
hˇn
->
In°™˚
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

244 i‡(
hˇn
->
Inô
.
ABOM
 =
ENABLE
)

246 
hˇn
->
In°™˚
->
MCR
 |
CAN_MCR_ABOM
;

250 
hˇn
->
In°™˚
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

254 i‡(
hˇn
->
Inô
.
AWUM
 =
ENABLE
)

256 
hˇn
->
In°™˚
->
MCR
 |
CAN_MCR_AWUM
;

260 
hˇn
->
In°™˚
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

264 i‡(
hˇn
->
Inô
.
NART
 =
ENABLE
)

266 
hˇn
->
In°™˚
->
MCR
 |
CAN_MCR_NART
;

270 
hˇn
->
In°™˚
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

274 i‡(
hˇn
->
Inô
.
RFLM
 =
ENABLE
)

276 
hˇn
->
In°™˚
->
MCR
 |
CAN_MCR_RFLM
;

280 
hˇn
->
In°™˚
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

284 i‡(
hˇn
->
Inô
.
TXFP
 =
ENABLE
)

286 
hˇn
->
In°™˚
->
MCR
 |
CAN_MCR_TXFP
;

290 
hˇn
->
In°™˚
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

294 
hˇn
->
In°™˚
->
BTR
 = (
uöt32_t
)((uöt32_t)hˇn->
Inô
.
Mode
) | \

295 ((
uöt32_t
)
hˇn
->
Inô
.
SJW
) | \

296 ((
uöt32_t
)
hˇn
->
Inô
.
BS1
) | \

297 ((
uöt32_t
)
hˇn
->
Inô
.
BS2
) | \

298 ((
uöt32_t
)
hˇn
->
Inô
.
PªsˇÀr
 - 1);

301 
hˇn
->
In°™˚
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

304 
tick°¨t
 = 
	`HAL_GëTick
();

307 (
hˇn
->
In°™˚
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

309 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CAN_TIMEOUT_VALUE
)

311 
hˇn
->
Sèã

HAL_CAN_STATE_TIMEOUT
;

313 
	`__HAL_UNLOCK
(
hˇn
);

314  
HAL_TIMEOUT
;

319 i‡((
hˇn
->
In°™˚
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

321 
InôSètus
 = 
CAN_INITSTATUS_FAILED
;

325 
InôSètus
 = 
CAN_INITSTATUS_SUCCESS
;

329 if(
InôSètus
 =
CAN_INITSTATUS_SUCCESS
)

332 
hˇn
->
Eº‹Code
 = 
HAL_CAN_ERROR_NONE
;

335 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_READY
;

338  
HAL_OK
;

343 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_ERROR
;

346  
HAL_ERROR
;

348 
	}
}

359 
HAL_SètusTy≥Def
 
	$HAL_CAN_C⁄figFûãr
(
CAN_H™dÀTy≥Def
* 
hˇn
, 
CAN_FûãrC⁄fTy≥Def
* 
sFûãrC⁄fig
)

361 
uöt32_t
 
fûã∫brbôpos
 = 0;

364 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
sFûãrC⁄fig
->
FûãrNumbî
));

365 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
sFûãrC⁄fig
->
FûãrMode
));

366 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
sFûãrC⁄fig
->
FûãrSˇÀ
));

367 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
sFûãrC⁄fig
->
FûãrFIFOAssignmít
));

368 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
sFûãrC⁄fig
->
FûãrA˘iv©i⁄
));

369 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
sFûãrC⁄fig
->
B™kNumbî
));

371 
fûã∫brbôpos
 = ((
uöt32_t
)1Ë<< 
sFûãrC⁄fig
->
FûãrNumbî
;

374 
CAN1
->
FMR
 |(
uöt32_t
)
CAN_FMR_FINIT
;

377 
CAN1
->
FMR
 &~((
uöt32_t
)
CAN_FMR_CAN2SB
);

378 
CAN1
->
FMR
 |(
uöt32_t
)(
sFûãrC⁄fig
->
B™kNumbî
 << 8);

381 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûã∫brbôpos
;

384 i‡(
sFûãrC⁄fig
->
FûãrSˇÀ
 =
CAN_FILTERSCALE_16BIT
)

387 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûã∫brbôpos
;

391 
CAN1
->
sFûãrRegi°î
[
sFûãrC⁄fig
->
FûãrNumbî
].
FR1
 =

392 ((0x0000FFFF & (
uöt32_t
)
sFûãrC⁄fig
->
FûãrMaskIdLow
) << 16) |

393 (0x0000FFFF & (
uöt32_t
)
sFûãrC⁄fig
->
FûãrIdLow
);

397 
CAN1
->
sFûãrRegi°î
[
sFûãrC⁄fig
->
FûãrNumbî
].
FR2
 =

398 ((0x0000FFFF & (
uöt32_t
)
sFûãrC⁄fig
->
FûãrMaskIdHigh
) << 16) |

399 (0x0000FFFF & (
uöt32_t
)
sFûãrC⁄fig
->
FûãrIdHigh
);

402 i‡(
sFûãrC⁄fig
->
FûãrSˇÀ
 =
CAN_FILTERSCALE_32BIT
)

405 
CAN1
->
FS1R
 |
fûã∫brbôpos
;

407 
CAN1
->
sFûãrRegi°î
[
sFûãrC⁄fig
->
FûãrNumbî
].
FR1
 =

408 ((0x0000FFFF & (
uöt32_t
)
sFûãrC⁄fig
->
FûãrIdHigh
) << 16) |

409 (0x0000FFFF & (
uöt32_t
)
sFûãrC⁄fig
->
FûãrIdLow
);

411 
CAN1
->
sFûãrRegi°î
[
sFûãrC⁄fig
->
FûãrNumbî
].
FR2
 =

412 ((0x0000FFFF & (
uöt32_t
)
sFûãrC⁄fig
->
FûãrMaskIdHigh
) << 16) |

413 (0x0000FFFF & (
uöt32_t
)
sFûãrC⁄fig
->
FûãrMaskIdLow
);

417 i‡(
sFûãrC⁄fig
->
FûãrMode
 =
CAN_FILTERMODE_IDMASK
)

420 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûã∫brbôpos
;

425 
CAN1
->
FM1R
 |(
uöt32_t
)
fûã∫brbôpos
;

429 i‡(
sFûãrC⁄fig
->
FûãrFIFOAssignmít
 =
CAN_FILTER_FIFO0
)

432 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûã∫brbôpos
;

435 i‡(
sFûãrC⁄fig
->
FûãrFIFOAssignmít
 =
CAN_FILTER_FIFO1
)

438 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûã∫brbôpos
;

442 i‡(
sFûãrC⁄fig
->
FûãrA˘iv©i⁄
 =
ENABLE
)

444 
CAN1
->
FA1R
 |
fûã∫brbôpos
;

448 
CAN1
->
FMR
 &~((
uöt32_t
)
CAN_FMR_FINIT
);

451  
HAL_OK
;

452 
	}
}

460 
HAL_SètusTy≥Def
 
	$HAL_CAN_DeInô
(
CAN_H™dÀTy≥Def
* 
hˇn
)

463 if(
hˇn
 =
NULL
)

465  
HAL_ERROR
;

469 
	`as£π_∑øm
(
	`IS_CAN_ALL_INSTANCE
(
hˇn
->
In°™˚
));

472 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY
;

475 
	`HAL_CAN_M•DeInô
(
hˇn
);

478 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_RESET
;

481 
	`__HAL_UNLOCK
(
hˇn
);

484  
HAL_OK
;

485 
	}
}

493 
__wók
 
	$HAL_CAN_M•Inô
(
CAN_H™dÀTy≥Def
* 
hˇn
)

498 
	}
}

506 
__wók
 
	$HAL_CAN_M•DeInô
(
CAN_H™dÀTy≥Def
* 
hˇn
)

511 
	}
}

541 
HAL_SètusTy≥Def
 
	$HAL_CAN_Tønsmô
(
CAN_H™dÀTy≥Def
* 
hˇn
, 
uöt32_t
 
Timeout
)

543 
uöt32_t
 
å™smômaûbox
 = 5;

544 
uöt32_t
 
tick°¨t
 = 0;

547 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
hˇn
->
pTxMsg
->
IDE
));

548 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
hˇn
->
pTxMsg
->
RTR
));

549 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
hˇn
->
pTxMsg
->
DLC
));

552 
	`__HAL_LOCK
(
hˇn
);

554 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_RX
)

557 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_TX_RX
;

562 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_TX
;

566 i‡((
hˇn
->
In°™˚
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

568 
å™smômaûbox
 = 0;

570 i‡((
hˇn
->
In°™˚
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

572 
å™smômaûbox
 = 1;

574 i‡((
hˇn
->
In°™˚
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

576 
å™smômaûbox
 = 2;

580 
å™smômaûbox
 = 
CAN_TXSTATUS_NOMAILBOX
;

583 i‡(
å™smômaûbox
 !
CAN_TXSTATUS_NOMAILBOX
)

586 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TIR
 &
CAN_TI0R_TXRQ
;

587 i‡(
hˇn
->
pTxMsg
->
IDE
 =
CAN_ID_STD
)

589 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
hˇn
->
pTxMsg
->
StdId
));

590 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TIR
 |((hˇn->
pTxMsg
->
StdId
 << 21) | \

591 
hˇn
->
pTxMsg
->
RTR
);

595 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
hˇn
->
pTxMsg
->
ExtId
));

596 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TIR
 |((hˇn->
pTxMsg
->
ExtId
 << 3) | \

597 
hˇn
->
pTxMsg
->
IDE
 | \

598 
hˇn
->
pTxMsg
->
RTR
);

602 
hˇn
->
pTxMsg
->
DLC
 &(
uöt8_t
)0x0000000F;

603 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

604 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TDTR
 |hˇn->
pTxMsg
->
DLC
;

607 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TDLR
 = (((
uöt32_t
)hˇn->
pTxMsg
->
D©a
[3] << 24) |

608 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[2] << 16) |

609 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[1] << 8) |

610 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[0]));

611 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TDHR
 = (((
uöt32_t
)hˇn->
pTxMsg
->
D©a
[7] << 24) |

612 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[6] << 16) |

613 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[5] << 8) |

614 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[4]));

616 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TIR
 |
CAN_TI0R_TXRQ
;

619 
tick°¨t
 = 
	`HAL_GëTick
();

622 !(
	`__HAL_CAN_TRANSMIT_STATUS
(
hˇn
, 
å™smômaûbox
)))

625 if(
Timeout
 !
HAL_MAX_DELAY
)

627 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

629 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_TIMEOUT
;

631 
	`__HAL_UNLOCK
(
hˇn
);

632  
HAL_TIMEOUT
;

636 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_TX_RX
)

639 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_RX
;

642 
	`__HAL_UNLOCK
(
hˇn
);

647 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_READY
;

650 
	`__HAL_UNLOCK
(
hˇn
);

654  
HAL_OK
;

659 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_ERROR
;

662 
	`__HAL_UNLOCK
(
hˇn
);

665  
HAL_ERROR
;

667 
	}
}

675 
HAL_SètusTy≥Def
 
	$HAL_CAN_Tønsmô_IT
(
CAN_H™dÀTy≥Def
* 
hˇn
)

677 
uöt32_t
 
å™smômaûbox
 = 5;

678 
uöt32_t
 
tmp
 = 0;

681 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
hˇn
->
pTxMsg
->
IDE
));

682 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
hˇn
->
pTxMsg
->
RTR
));

683 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
hˇn
->
pTxMsg
->
DLC
));

685 
tmp
 = 
hˇn
->
Sèã
;

686 if((
tmp
 =
HAL_CAN_STATE_READY
Ë|| (tm∞=
HAL_CAN_STATE_BUSY_RX
))

689 
	`__HAL_LOCK
(
hˇn
);

692 if((
hˇn
->
In°™˚
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

694 
å™smômaûbox
 = 0;

696 if((
hˇn
->
In°™˚
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

698 
å™smômaûbox
 = 1;

700 if((
hˇn
->
In°™˚
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

702 
å™smômaûbox
 = 2;

706 
å™smômaûbox
 = 
CAN_TXSTATUS_NOMAILBOX
;

709 if(
å™smômaûbox
 !
CAN_TXSTATUS_NOMAILBOX
)

712 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TIR
 &
CAN_TI0R_TXRQ
;

713 if(
hˇn
->
pTxMsg
->
IDE
 =
CAN_ID_STD
)

715 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
hˇn
->
pTxMsg
->
StdId
));

716 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TIR
 |((hˇn->
pTxMsg
->
StdId
 << 21) | \

717 
hˇn
->
pTxMsg
->
RTR
);

721 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
hˇn
->
pTxMsg
->
ExtId
));

722 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TIR
 |((hˇn->
pTxMsg
->
ExtId
 << 3) | \

723 
hˇn
->
pTxMsg
->
IDE
 | \

724 
hˇn
->
pTxMsg
->
RTR
);

728 
hˇn
->
pTxMsg
->
DLC
 &(
uöt8_t
)0x0000000F;

729 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

730 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TDTR
 |hˇn->
pTxMsg
->
DLC
;

733 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TDLR
 = (((
uöt32_t
)hˇn->
pTxMsg
->
D©a
[3] << 24) |

734 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[2] << 16) |

735 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[1] << 8) |

736 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[0]));

737 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TDHR
 = (((
uöt32_t
)hˇn->
pTxMsg
->
D©a
[7] << 24) |

738 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[6] << 16) |

739 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[5] << 8) |

740 ((
uöt32_t
)
hˇn
->
pTxMsg
->
D©a
[4]));

742 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_RX
)

745 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_TX_RX
;

750 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_TX
;

754 
hˇn
->
Eº‹Code
 = 
HAL_CAN_ERROR_NONE
;

757 
	`__HAL_UNLOCK
(
hˇn
);

760 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_EWG
);

763 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_EPV
);

766 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_BOF
);

769 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_LEC
);

772 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_ERR
);

775 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_TME
);

778 
hˇn
->
In°™˚
->
sTxMaûBox
[
å™smômaûbox
].
TIR
 |
CAN_TI0R_TXRQ
;

783  
HAL_BUSY
;

786  
HAL_OK
;

787 
	}
}

797 
HAL_SètusTy≥Def
 
	$HAL_CAN_Re˚ive
(
CAN_H™dÀTy≥Def
* 
hˇn
, 
uöt8_t
 
FIFONumbî
, 
uöt32_t
 
Timeout
)

799 
uöt32_t
 
tick°¨t
 = 0;

802 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

805 
	`__HAL_LOCK
(
hˇn
);

807 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_TX
)

810 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_TX_RX
;

815 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_RX
;

819 
tick°¨t
 = 
	`HAL_GëTick
();

822 
	`__HAL_CAN_MSG_PENDING
(
hˇn
, 
FIFONumbî
) == 0)

825 if(
Timeout
 !
HAL_MAX_DELAY
)

827 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

829 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_TIMEOUT
;

831 
	`__HAL_UNLOCK
(
hˇn
);

832  
HAL_TIMEOUT
;

838 
hˇn
->
pRxMsg
->
IDE
 = (
uöt8_t
)0x04 & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

839 i‡(
hˇn
->
pRxMsg
->
IDE
 =
CAN_ID_STD
)

841 
hˇn
->
pRxMsg
->
StdId
 = (
uöt32_t
)0x000007FF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

845 
hˇn
->
pRxMsg
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

848 
hˇn
->
pRxMsg
->
RTR
 = (
uöt8_t
)0x02 & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

850 
hˇn
->
pRxMsg
->
DLC
 = (
uöt8_t
)0x0F & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

852 
hˇn
->
pRxMsg
->
FMI
 = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

854 
hˇn
->
pRxMsg
->
D©a
[0] = (
uöt8_t
)0xFF & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

855 
hˇn
->
pRxMsg
->
D©a
[1] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

856 
hˇn
->
pRxMsg
->
D©a
[2] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

857 
hˇn
->
pRxMsg
->
D©a
[3] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

858 
hˇn
->
pRxMsg
->
D©a
[4] = (
uöt8_t
)0xFF & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

859 
hˇn
->
pRxMsg
->
D©a
[5] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

860 
hˇn
->
pRxMsg
->
D©a
[6] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

861 
hˇn
->
pRxMsg
->
D©a
[7] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

864 if(
FIFONumbî
 =
CAN_FIFO0
)

867 
	`__HAL_CAN_FIFO_RELEASE
(
hˇn
, 
CAN_FIFO0
);

872 
	`__HAL_CAN_FIFO_RELEASE
(
hˇn
, 
CAN_FIFO1
);

875 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_TX_RX
)

878 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_TX
;

881 
	`__HAL_UNLOCK
(
hˇn
);

886 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_READY
;

889 
	`__HAL_UNLOCK
(
hˇn
);

893  
HAL_OK
;

894 
	}
}

903 
HAL_SètusTy≥Def
 
	$HAL_CAN_Re˚ive_IT
(
CAN_H™dÀTy≥Def
* 
hˇn
, 
uöt8_t
 
FIFONumbî
)

905 
uöt32_t
 
tmp
 = 0;

908 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

910 
tmp
 = 
hˇn
->
Sèã
;

911 if((
tmp
 =
HAL_CAN_STATE_READY
Ë|| (tm∞=
HAL_CAN_STATE_BUSY_TX
))

914 
	`__HAL_LOCK
(
hˇn
);

916 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_TX
)

919 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_TX_RX
;

924 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_RX
;

928 
hˇn
->
Eº‹Code
 = 
HAL_CAN_ERROR_NONE
;

931 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_EWG
);

934 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_EPV
);

937 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_BOF
);

940 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_LEC
);

943 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_ERR
);

946 
	`__HAL_UNLOCK
(
hˇn
);

948 if(
FIFONumbî
 =
CAN_FIFO0
)

951 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_FMP0
);

956 
	`__HAL_CAN_ENABLE_IT
(
hˇn
, 
CAN_IT_FMP1
);

962  
HAL_BUSY
;

966  
HAL_OK
;

967 
	}
}

975 
HAL_SètusTy≥Def
 
	$HAL_CAN_SÀï
(
CAN_H™dÀTy≥Def
* 
hˇn
)

977 
uöt32_t
 
tick°¨t
 = 0;

980 
	`__HAL_LOCK
(
hˇn
);

983 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY
;

986 
hˇn
->
In°™˚
->
MCR
 = (((hˇn->In°™˚->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

989 i‡((
hˇn
->
In°™˚
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) != CAN_MSR_SLAK)

992 
	`__HAL_UNLOCK
(
hˇn
);

995  
HAL_ERROR
;

999 
tick°¨t
 = 
	`HAL_GëTick
();

1002 (
hˇn
->
In°™˚
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) != CAN_MSR_SLAK)

1004 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
CAN_TIMEOUT_VALUE
)

1006 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_TIMEOUT
;

1008 
	`__HAL_UNLOCK
(
hˇn
);

1009  
HAL_TIMEOUT
;

1014 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_READY
;

1017 
	`__HAL_UNLOCK
(
hˇn
);

1020  
HAL_OK
;

1021 
	}
}

1030 
HAL_SètusTy≥Def
 
	$HAL_CAN_WakeUp
(
CAN_H™dÀTy≥Def
* 
hˇn
)

1032 
uöt32_t
 
tick°¨t
 = 0;

1035 
	`__HAL_LOCK
(
hˇn
);

1038 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY
;

1041 
hˇn
->
In°™˚
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

1044 
tick°¨t
 = 
	`HAL_GëTick
();

1047 (
hˇn
->
In°™˚
->
MSR
 & 
CAN_MSR_SLAK
) == CAN_MSR_SLAK)

1049 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
CAN_TIMEOUT_VALUE
)

1051 
hˇn
->
Sèã

HAL_CAN_STATE_TIMEOUT
;

1053 
	`__HAL_UNLOCK
(
hˇn
);

1054  
HAL_TIMEOUT
;

1057 if((
hˇn
->
In°™˚
->
MSR
 & 
CAN_MSR_SLAK
) == CAN_MSR_SLAK)

1060 
	`__HAL_UNLOCK
(
hˇn
);

1063  
HAL_ERROR
;

1067 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_READY
;

1070 
	`__HAL_UNLOCK
(
hˇn
);

1073  
HAL_OK
;

1074 
	}
}

1082 
	$HAL_CAN_IRQH™dÀr
(
CAN_H™dÀTy≥Def
* 
hˇn
)

1084 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0, 
tmp3
 = 0;

1087 if(
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_TME
))

1089 
tmp1
 = 
	`__HAL_CAN_TRANSMIT_STATUS
(
hˇn
, 
CAN_TXMAILBOX_0
);

1090 
tmp2
 = 
	`__HAL_CAN_TRANSMIT_STATUS
(
hˇn
, 
CAN_TXMAILBOX_1
);

1091 
tmp3
 = 
	`__HAL_CAN_TRANSMIT_STATUS
(
hˇn
, 
CAN_TXMAILBOX_2
);

1092 if(
tmp1
 || 
tmp2
 || 
tmp3
)

1095 
	`CAN_Tønsmô_IT
(
hˇn
);

1099 
tmp1
 = 
	`__HAL_CAN_MSG_PENDING
(
hˇn
, 
CAN_FIFO0
);

1100 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_FMP0
);

1102 if((
tmp1
 !0Ë&& 
tmp2
)

1105 
	`CAN_Re˚ive_IT
(
hˇn
, 
CAN_FIFO0
);

1108 
tmp1
 = 
	`__HAL_CAN_MSG_PENDING
(
hˇn
, 
CAN_FIFO1
);

1109 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_FMP1
);

1111 if((
tmp1
 !0Ë&& 
tmp2
)

1114 
	`CAN_Re˚ive_IT
(
hˇn
, 
CAN_FIFO1
);

1117 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hˇn
, 
CAN_FLAG_EWG
);

1118 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_EWG
);

1119 
tmp3
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_ERR
);

1121 if(
tmp1
 && 
tmp2
 && 
tmp3
)

1124 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_EWG
;

1126 
	`__HAL_CAN_CLEAR_FLAG
(
hˇn
, 
CAN_FLAG_EWG
);

1129 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hˇn
, 
CAN_FLAG_EPV
);

1130 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_EPV
);

1131 
tmp3
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_ERR
);

1133 if(
tmp1
 && 
tmp2
 && 
tmp3
)

1136 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_EPV
;

1138 
	`__HAL_CAN_CLEAR_FLAG
(
hˇn
, 
CAN_FLAG_EPV
);

1141 
tmp1
 = 
	`__HAL_CAN_GET_FLAG
(
hˇn
, 
CAN_FLAG_BOF
);

1142 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_BOF
);

1143 
tmp3
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_ERR
);

1145 if(
tmp1
 && 
tmp2
 && 
tmp3
)

1148 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_BOF
;

1150 
	`__HAL_CAN_CLEAR_FLAG
(
hˇn
, 
CAN_FLAG_BOF
);

1153 
tmp1
 = 
	`HAL_IS_BIT_CLR
(
hˇn
->
In°™˚
->
ESR
, 
CAN_ESR_LEC
);

1154 
tmp2
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_LEC
);

1155 
tmp3
 = 
	`__HAL_CAN_GET_IT_SOURCE
(
hˇn
, 
CAN_IT_ERR
);

1157 if((!
tmp1
Ë&& 
tmp2
 && 
tmp3
)

1159 
tmp1
 = (
hˇn
->
In°™˚
->
ESR
Ë& 
CAN_ESR_LEC
;

1160 
tmp1
)

1162 (
CAN_ESR_LEC_0
):

1164 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_STF
;

1166 (
CAN_ESR_LEC_1
):

1168 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_FOR
;

1170 (
CAN_ESR_LEC_1
 | 
CAN_ESR_LEC_0
):

1172 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_ACK
;

1174 (
CAN_ESR_LEC_2
):

1176 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_BR
;

1178 (
CAN_ESR_LEC_2
 | 
CAN_ESR_LEC_0
):

1180 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_BD
;

1182 (
CAN_ESR_LEC_2
 | 
CAN_ESR_LEC_1
):

1184 
hˇn
->
Eº‹Code
 |
HAL_CAN_ERROR_CRC
;

1191 
hˇn
->
In°™˚
->
ESR
 &~(
CAN_ESR_LEC
);

1195 if(
hˇn
->
Eº‹Code
 !
HAL_CAN_ERROR_NONE
)

1198 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_READY
;

1200 
	`HAL_CAN_Eº‹CÆlback
(
hˇn
);

1202 
	}
}

1210 
__wók
 
	$HAL_CAN_TxC∂tCÆlback
(
CAN_H™dÀTy≥Def
* 
hˇn
)

1215 
	}
}

1223 
__wók
 
	$HAL_CAN_RxC∂tCÆlback
(
CAN_H™dÀTy≥Def
* 
hˇn
)

1228 
	}
}

1236 
__wók
 
	$HAL_CAN_Eº‹CÆlback
(
CAN_H™dÀTy≥Def
 *
hˇn
)

1241 
	}
}

1269 
HAL_CAN_SèãTy≥Def
 
	$HAL_CAN_GëSèã
(
CAN_H™dÀTy≥Def
* 
hˇn
)

1272  
hˇn
->
Sèã
;

1273 
	}
}

1281 
uöt32_t
 
	$HAL_CAN_GëEº‹
(
CAN_H™dÀTy≥Def
 *
hˇn
)

1283  
hˇn
->
Eº‹Code
;

1284 
	}
}

1295 
HAL_SètusTy≥Def
 
	$CAN_Tønsmô_IT
(
CAN_H™dÀTy≥Def
* 
hˇn
)

1298 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_TME
);

1300 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_TX
)

1303 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_EWG
);

1306 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_EPV
);

1309 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_BOF
);

1312 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_LEC
);

1315 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_ERR
);

1318 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_TX_RX
)

1321 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_RX
;

1326 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_READY
;

1330 
	`HAL_CAN_TxC∂tCÆlback
(
hˇn
);

1332  
HAL_OK
;

1333 
	}
}

1343 
HAL_SètusTy≥Def
 
	$CAN_Re˚ive_IT
(
CAN_H™dÀTy≥Def
* 
hˇn
, 
uöt8_t
 
FIFONumbî
)

1346 
hˇn
->
pRxMsg
->
IDE
 = (
uöt8_t
)0x04 & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

1347 i‡(
hˇn
->
pRxMsg
->
IDE
 =
CAN_ID_STD
)

1349 
hˇn
->
pRxMsg
->
StdId
 = (
uöt32_t
)0x000007FF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

1353 
hˇn
->
pRxMsg
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

1356 
hˇn
->
pRxMsg
->
RTR
 = (
uöt8_t
)0x02 & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

1358 
hˇn
->
pRxMsg
->
DLC
 = (
uöt8_t
)0x0F & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

1360 
hˇn
->
pRxMsg
->
FMI
 = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

1362 
hˇn
->
pRxMsg
->
D©a
[0] = (
uöt8_t
)0xFF & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

1363 
hˇn
->
pRxMsg
->
D©a
[1] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

1364 
hˇn
->
pRxMsg
->
D©a
[2] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

1365 
hˇn
->
pRxMsg
->
D©a
[3] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

1366 
hˇn
->
pRxMsg
->
D©a
[4] = (
uöt8_t
)0xFF & hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

1367 
hˇn
->
pRxMsg
->
D©a
[5] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

1368 
hˇn
->
pRxMsg
->
D©a
[6] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

1369 
hˇn
->
pRxMsg
->
D©a
[7] = (
uöt8_t
)0xFF & (hˇn->
In°™˚
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

1372 i‡(
FIFONumbî
 =
CAN_FIFO0
)

1374 
	`__HAL_CAN_FIFO_RELEASE
(
hˇn
, 
CAN_FIFO0
);

1377 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_FMP0
);

1382 
	`__HAL_CAN_FIFO_RELEASE
(
hˇn
, 
CAN_FIFO1
);

1385 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_FMP1
);

1388 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_RX
)

1391 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_EWG
);

1394 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_EPV
);

1397 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_BOF
);

1400 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_LEC
);

1403 
	`__HAL_CAN_DISABLE_IT
(
hˇn
, 
CAN_IT_ERR
);

1406 if(
hˇn
->
Sèã
 =
HAL_CAN_STATE_BUSY_TX_RX
)

1409 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_BUSY_TX
;

1414 
hˇn
->
Sèã
 = 
HAL_CAN_STATE_READY
;

1418 
	`HAL_CAN_RxC∂tCÆlback
(
hˇn
);

1421  
HAL_OK
;

1422 
	}
}

1428 
	gSTM32F429xx
 || 
	gSTM32F439xx
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 || 
	gSTM3F412xE
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cec.c

80 
	~"°m32f4xx_hÆ.h
"

90 #ifde‡
HAL_CEC_MODULE_ENABLED


92 #i‡
deföed
(
STM32F446xx
)

99 
	#CEC_CFGR_FIELDS
 (
CEC_CFGR_SFT
 | 
CEC_CFGR_RXTOL
 | 
CEC_CFGR_BRESTP
 \

100 | 
CEC_CFGR_BREGEN
 | 
CEC_CFGR_LBPEGEN
 | 
CEC_CFGR_SFTOPT
 \

101 | 
CEC_CFGR_BRDNOGEN
 | 
CEC_CFGR_OAR
 | 
CEC_CFGR_LSTN
)

	)

112 
HAL_SètusTy≥Def
 
CEC_Tønsmô_IT
(
CEC_H™dÀTy≥Def
 *
h˚c
);

113 
HAL_SètusTy≥Def
 
CEC_Re˚ive_IT
(
CEC_H™dÀTy≥Def
 *
h˚c
);

153 
HAL_SètusTy≥Def
 
	$HAL_CEC_Inô
(
CEC_H™dÀTy≥Def
 *
h˚c
)

155 
uöt32_t
 
tm¥eg
 = 0x0;

158 if(
h˚c
 =
NULL
)

160  
HAL_ERROR
;

164 
	`as£π_∑øm
(
	`IS_CEC_ALL_INSTANCE
(
h˚c
->
In°™˚
));

165 
	`as£π_∑øm
(
	`IS_CEC_SIGNALFREETIME
(
h˚c
->
Inô
.
Sig«lFªeTime
));

166 
	`as£π_∑øm
(
	`IS_CEC_TOLERANCE
(
h˚c
->
Inô
.
Tﬁî™˚
));

167 
	`as£π_∑øm
(
	`IS_CEC_BRERXSTOP
(
h˚c
->
Inô
.
BRERxSt›
));

168 
	`as£π_∑øm
(
	`IS_CEC_BREERRORBITGEN
(
h˚c
->
Inô
.
BREEº‹BôGí
));

169 
	`as£π_∑øm
(
	`IS_CEC_LBPEERRORBITGEN
(
h˚c
->
Inô
.
LBPEEº‹BôGí
));

170 
	`as£π_∑øm
(
	`IS_CEC_BROADCASTERROR_NO_ERRORBIT_GENERATION
(
h˚c
->
Inô
.
Brﬂdˇ°MsgNoEº‹BôGí
));

171 
	`as£π_∑øm
(
	`IS_CEC_SFTOP
(
h˚c
->
Inô
.
Sig«lFªeTimeO±i⁄
));

172 
	`as£π_∑øm
(
	`IS_CEC_OAR_ADDRESS
(
h˚c
->
Inô
.
OwnAddªss
));

173 
	`as£π_∑øm
(
	`IS_CEC_LISTENING_MODE
(
h˚c
->
Inô
.
Li°íMode
));

174 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
h˚c
->
Inô
.
Inôüt‹Addªss
));

177 if(
h˚c
->
Sèã
 =
HAL_CEC_STATE_RESET
)

180 
h˚c
->
Lock
 = 
HAL_UNLOCKED
;

182 
	`HAL_CEC_M•Inô
(
h˚c
);

185 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_BUSY
;

188 
	`__HAL_CEC_DISABLE
(
h˚c
);

190 
tm¥eg
 = 
h˚c
->
Inô
.
Sig«lFªeTime
;

191 
tm¥eg
 |
h˚c
->
Inô
.
Tﬁî™˚
;

192 
tm¥eg
 |
h˚c
->
Inô
.
BRERxSt›
;

193 
tm¥eg
 |
h˚c
->
Inô
.
BREEº‹BôGí
;

194 
tm¥eg
 |
h˚c
->
Inô
.
LBPEEº‹BôGí
;

195 
tm¥eg
 |
h˚c
->
Inô
.
Brﬂdˇ°MsgNoEº‹BôGí
;

196 
tm¥eg
 |
h˚c
->
Inô
.
Sig«lFªeTimeO±i⁄
;

197 
tm¥eg
 |(
h˚c
->
Inô
.
OwnAddªss
 << 
CEC_CFGR_OAR_LSB_POS
);

198 
tm¥eg
 |
h˚c
->
Inô
.
Li°íMode
;

201 
	`MODIFY_REG
(
h˚c
->
In°™˚
->
CFGR
, 
CEC_CFGR_FIELDS
, 
tm¥eg
);

204 
	`__HAL_CEC_ENABLE
(
h˚c
);

206 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_READY
;

208  
HAL_OK
;

209 
	}
}

216 
HAL_SètusTy≥Def
 
	$HAL_CEC_DeInô
(
CEC_H™dÀTy≥Def
 *
h˚c
)

219 if(
h˚c
 =
NULL
)

221  
HAL_ERROR
;

225 
	`as£π_∑øm
(
	`IS_CEC_ALL_INSTANCE
(
h˚c
->
In°™˚
));

227 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_BUSY
;

230 
	`HAL_CEC_M•DeInô
(
h˚c
);

232 
	`__HAL_CEC_DISABLE
(
h˚c
);

234 
h˚c
->
Eº‹Code
 = 
HAL_CEC_ERROR_NONE
;

235 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_RESET
;

238 
	`__HAL_UNLOCK
(
h˚c
);

240  
HAL_OK
;

241 
	}
}

248 
__wók
 
	$HAL_CEC_M•Inô
(
CEC_H™dÀTy≥Def
 *
h˚c
)

253 
	}
}

260 
__wók
 
	$HAL_CEC_M•DeInô
(
CEC_H™dÀTy≥Def
 *
h˚c
)

265 
	}
}

324 
HAL_SètusTy≥Def
 
	$HAL_CEC_Tønsmô
(
CEC_H™dÀTy≥Def
 *
h˚c
, 
uöt8_t
 
De°ö©i⁄Addªss
, uöt8_à*
pD©a
, 
uöt32_t
 
Size
, uöt32_à
Timeout
)

326 
uöt8_t
 
ãmp
 = 0;

327 
uöt32_t
 
ãmpi§
 = 0;

328 
uöt32_t
 
tick°¨t
 = 0;

330 if((
h˚c
->
Sèã
 =
HAL_CEC_STATE_READY
Ë&& (
	`__HAL_CEC_GET_TRANSMISSION_START_FLAG
(h˚cË=
RESET
))

332 
h˚c
->
Eº‹Code
 = 
HAL_CEC_ERROR_NONE
;

333 if((
pD©a
 =
NULL
 ) && (
Size
 > 0))

335 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

336  
HAL_ERROR
;

339 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
De°ö©i⁄Addªss
));

340 
	`as£π_∑øm
(
	`IS_CEC_MSGSIZE
(
Size
));

343 
	`__HAL_LOCK
(
h˚c
);

345 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_BUSY_TX
;

347 
h˚c
->
TxX„rCou¡
 = 
Size
;

350 i‡(
Size
 == 0)

353 
	`__HAL_CEC_LAST_BYTE_TX_SET
(
h˚c
);

357 
ãmp
 = ((
uöt32_t
)
h˚c
->
Inô
.
Inôüt‹Addªss
 << 
CEC_INITIATOR_LSB_POS
Ë| 
De°ö©i⁄Addªss
;

358 
h˚c
->
In°™˚
->
TXDR
 = 
ãmp
;

360 
	`__HAL_CEC_FIRST_BYTE_TX_SET
(
h˚c
);

362 
h˚c
->
TxX„rCou¡
 > 0)

364 
h˚c
->
TxX„rCou¡
--;

366 
tick°¨t
 = 
	`HAL_GëTick
();

367 
	`HAL_IS_BIT_CLR
(
h˚c
->
In°™˚
->
ISR
, 
CEC_FLAG_TXBR
))

369 if(
Timeout
 !
HAL_MAX_DELAY
)

371 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

373 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_TIMEOUT
;

375 
	`__HAL_UNLOCK
(
h˚c
);

376  
HAL_TIMEOUT
;

385 
ãmpi§
 = 
h˚c
->
In°™˚
->
ISR
;

386 i‡((
ãmpi§
 & (
CEC_FLAG_TXUDR
|
CEC_FLAG_TXERR
|
CEC_FLAG_TXACKE
|
CEC_FLAG_ARBLST
)) != 0)

389 
h˚c
->
Eº‹Code
 = 
ãmpi§
;

391 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, (
CEC_FLAG_TXUDR
|
CEC_FLAG_TXERR
|
CEC_FLAG_TXACKE
|
CEC_FLAG_ARBLST
));

392 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

393 
	`__HAL_UNLOCK
(
h˚c
);

394  
HAL_ERROR
;

398 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_TXBR
);

399 i‡(
h˚c
->
TxX„rCou¡
 == 0)

402 
	`__HAL_CEC_LAST_BYTE_TX_SET
(
h˚c
);

404 
h˚c
->
In°™˚
->
TXDR
 = *
pD©a
++;

407 
ãmpi§
 = 
h˚c
->
In°™˚
->
ISR
;

408 i‡((
ãmpi§
 & (
CEC_FLAG_TXUDR
|
CEC_FLAG_TXERR
|
CEC_FLAG_TXACKE
|
CEC_FLAG_ARBLST
)) != 0)

411 
h˚c
->
Eº‹Code
 = 
ãmpi§
;

413 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, (
CEC_FLAG_TXUDR
|
CEC_FLAG_TXERR
|
CEC_FLAG_TXACKE
|
CEC_FLAG_ARBLST
));

414 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

415 
	`__HAL_UNLOCK
(
h˚c
);

416  
HAL_ERROR
;

422 
tick°¨t
 = 
	`HAL_GëTick
();

424 
	`HAL_IS_BIT_SET
(
h˚c
->
In°™˚
->
CR
, 
CEC_CR_TXEOM
))

426 if(
Timeout
 !
HAL_MAX_DELAY
)

428 if((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
Timeout
)

430 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

431 
	`__HAL_UNLOCK
(
h˚c
);

432  
HAL_TIMEOUT
;

438 
ãmpi§
 = 
h˚c
->
In°™˚
->
ISR
;

439 i‡((
ãmpi§
 & (
CEC_FLAG_TXUDR
|
CEC_FLAG_TXERR
|
CEC_FLAG_TXACKE
)) != 0)

442 
h˚c
->
Eº‹Code
 = 
ãmpi§
;

444 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, (
CEC_FLAG_TXUDR
|
CEC_FLAG_TXERR
|
CEC_FLAG_TXACKE
));

445 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

446 
	`__HAL_UNLOCK
(
h˚c
);

447  
HAL_ERROR
;

450 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_READY
;

451 
	`__HAL_UNLOCK
(
h˚c
);

453  
HAL_OK
;

457  
HAL_BUSY
;

459 
	}
}

472 
HAL_SètusTy≥Def
 
	$HAL_CEC_Re˚ive
(
CEC_H™dÀTy≥Def
 *
h˚c
, 
uöt8_t
 *
pD©a
, 
uöt32_t
 
Timeout
)

474 
uöt32_t
 
ãmp
;

475 
uöt32_t
 
tick°¨t
 = 0;

477 i‡(
h˚c
->
Sèã
 =
HAL_CEC_STATE_READY
)

479 
h˚c
->
Eº‹Code
 = 
HAL_CEC_ERROR_NONE
;

480 i‡(
pD©a
 =
NULL
 )

482 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

483  
HAL_ERROR
;

486 
h˚c
->
RxX„rSize
 = 0;

488 
	`__HAL_LOCK
(
h˚c
);

491 
	`HAL_IS_BIT_CLR
(
h˚c
->
In°™˚
->
ISR
, 
CEC_FLAG_RXEND
))

493 
tick°¨t
 = 
	`HAL_GëTick
();

495 
	`HAL_IS_BIT_CLR
(
h˚c
->
In°™˚
->
ISR
, 
CEC_FLAG_RXBR
))

497 if(
Timeout
 !
HAL_MAX_DELAY
)

499 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

501 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_TIMEOUT
;

502 
	`__HAL_UNLOCK
(
h˚c
);

503  
HAL_TIMEOUT
;

512 
ãmp
 = (
uöt32_t
Ë(
h˚c
->
In°™˚
->
ISR
);

513 i‡((
ãmp
 & (
CEC_FLAG_RXACKE
|
CEC_FLAG_LBPE
|
CEC_FLAG_SBPE
|
CEC_FLAG_BRE
|
CEC_FLAG_RXOVR
)) != 0)

516 
h˚c
->
Eº‹Code
 = 
ãmp
;

518 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
,(
CEC_FLAG_RXACKE
|
CEC_FLAG_LBPE
|
CEC_FLAG_SBPE
|
CEC_FLAG_BRE
|
CEC_FLAG_RXOVR
));

519 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

520 
	`__HAL_UNLOCK
(
h˚c
);

521  
HAL_ERROR
;

526 *
pD©a
++ = 
h˚c
->
In°™˚
->
RXDR
;

527 
ãmp
 = (
uöt32_t
Ë(
h˚c
->
In°™˚
->
ISR
);

529 i‡((
ãmp
 & 
CEC_ISR_RXEND
) != 0)

531 
	`as£π_∑øm
(
	`IS_CEC_MSGSIZE
(
h˚c
->
RxX„rSize
));

532 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
,
CEC_FLAG_RXEND
);

533 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_READY
;

534 
	`__HAL_UNLOCK
(
h˚c
);

535  
HAL_OK
;

539 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
,
CEC_FLAG_RXBR
);

541 
h˚c
->
RxX„rSize
++;

548 *
pD©a
++ = 
h˚c
->
In°™˚
->
RXDR
;

550 
h˚c
->
RxX„rSize
 = 0;

551 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_RXEND
);

553 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_READY
;

554 
	`__HAL_UNLOCK
(
h˚c
);

555  
HAL_OK
;

559  
HAL_BUSY
;

561 
	}
}

573 
HAL_SètusTy≥Def
 
	$HAL_CEC_Tønsmô_IT
(
CEC_H™dÀTy≥Def
 *
h˚c
, 
uöt8_t
 
De°ö©i⁄Addªss
, uöt8_à*
pD©a
, 
uöt32_t
 
Size
)

575 
uöt8_t
 
ãmp
 = 0;

578 i‡(((
h˚c
->
Sèã
 =
HAL_CEC_STATE_READY
Ë|| (h˚c->Sèã =
HAL_CEC_STATE_STANDBY_RX
))

579 && (
	`__HAL_CEC_GET_TRANSMISSION_START_FLAG
(
h˚c
Ë=
RESET
))

581 if((
pD©a
 =
NULL
Ë&& (
Size
 > 0))

583 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

584  
HAL_ERROR
;

587 
	`as£π_∑øm
(
	`IS_CEC_ADDRESS
(
De°ö©i⁄Addªss
));

588 
	`as£π_∑øm
(
	`IS_CEC_MSGSIZE
(
Size
));

591 
	`__HAL_LOCK
(
h˚c
);

592 
h˚c
->
pTxBuffPå
 = 
pD©a
;

593 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_BUSY_TX
;

594 
h˚c
->
Eº‹Code
 = 
HAL_CEC_ERROR_NONE
;

597 
	`__HAL_CEC_DISABLE
(
h˚c
);

607 
	`__HAL_CEC_ENABLE_IT
(
h˚c
, 
CEC_IT_TXBR
|
CEC_IT_TXEND
|
CEC_IER_TX_ALL_ERR
);

610 
	`__HAL_CEC_ENABLE
(
h˚c
);

614 
h˚c
->
TxX„rCou¡
 = 
Size
;

617 
	`__HAL_UNLOCK
(
h˚c
);

621 i‡(
Size
 == 0)

623 
	`__HAL_CEC_LAST_BYTE_TX_SET
(
h˚c
);

627 
ãmp
 = (
uöt8_t
)((
uöt32_t
)(
h˚c
->
Inô
.
Inôüt‹Addªss
Ë<< 
CEC_INITIATOR_LSB_POS
Ë| 
De°ö©i⁄Addªss
;

628 
h˚c
->
In°™˚
->
TXDR
 = 
ãmp
;

630 
	`__HAL_CEC_FIRST_BYTE_TX_SET
(
h˚c
);

632  
HAL_OK
;

636 i‡((
h˚c
->
Sèã
 =
HAL_CEC_STATE_BUSY_TX
Ë|| (
	`__HAL_CEC_GET_TRANSMISSION_START_FLAG
(h˚cË!
RESET
))

638 
	`__HAL_LOCK
(
h˚c
);

641 i‡(
h˚c
->
Sèã
 !
HAL_CEC_STATE_BUSY_TX
)

643 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_BUSY_TX
;

647 if(
h˚c
->
TxX„rCou¡
 == 0)

650 
	`__HAL_CEC_DISABLE
(
h˚c
);

653 
	`__HAL_CEC_DISABLE_IT
(
h˚c
, 
CEC_IT_TXBR
|
CEC_IT_TXEND
);

655 
	`__HAL_CEC_DISABLE_IT
(
h˚c
, 
CEC_IER_TX_ALL_ERR
);

658 
	`__HAL_CEC_ENABLE
(
h˚c
);

660 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_TXBR
|
CEC_FLAG_TXEND
);

662 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_READY
;

665 
	`__HAL_UNLOCK
(
h˚c
);

667 
	`HAL_CEC_TxC∂tCÆlback
(
h˚c
);

669  
HAL_OK
;

673 i‡(
h˚c
->
TxX„rCou¡
 == 1)

676 
	`__HAL_CEC_LAST_BYTE_TX_SET
(
h˚c
);

679 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_TXBR
);

680 
h˚c
->
In°™˚
->
TXDR
 = *h˚c->
pTxBuffPå
++;

681 
h˚c
->
TxX„rCou¡
--;

684 
	`__HAL_UNLOCK
(
h˚c
);

686  
HAL_OK
;

691  
HAL_BUSY
;

693 
	}
}

705 
HAL_SètusTy≥Def
 
	$HAL_CEC_Re˚ive_IT
(
CEC_H™dÀTy≥Def
 *
h˚c
, 
uöt8_t
 *
pD©a
)

707 if(
h˚c
->
Sèã
 =
HAL_CEC_STATE_READY
)

709 if(
pD©a
 =
NULL
)

711 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

712  
HAL_ERROR
;

716 
	`__HAL_LOCK
(
h˚c
);

717 
h˚c
->
RxX„rSize
 = 0;

718 
h˚c
->
pRxBuffPå
 = 
pD©a
;

719 
h˚c
->
Eº‹Code
 = 
HAL_CEC_ERROR_NONE
;

721 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_STANDBY_RX
;

724 
	`__HAL_CEC_DISABLE
(
h˚c
);

732 
	`__HAL_CEC_ENABLE_IT
(
h˚c
, 
CEC_IER_RX_ALL_ERR
);

735 
	`__HAL_UNLOCK
(
h˚c
);

740 
	`__HAL_CEC_ENABLE_IT
(
h˚c
, 
CEC_IT_RXBR
|
CEC_IT_RXEND
);

742 
	`__HAL_CEC_ENABLE
(
h˚c
);

744  
HAL_OK
;

748  
HAL_BUSY
;

750 
	}
}

757 
uöt32_t
 
	$HAL_CEC_GëRe˚ivedFømeSize
(
CEC_H™dÀTy≥Def
 *
h˚c
)

759  
h˚c
->
RxX„rSize
;

760 
	}
}

767 
	$HAL_CEC_IRQH™dÀr
(
CEC_H™dÀTy≥Def
 *
h˚c
)

770 
h˚c
->
Eº‹Code
 = h˚c->
In°™˚
->
ISR
;

772 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_TXACKE
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_TXACKE
) != RESET))

774 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_TXACKE
);

775 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

779 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_TXERR
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_TXERR
) != RESET))

781 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_TXERR
);

782 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

786 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_TXUDR
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_TXUDR
) != RESET))

788 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_TXUDR
);

789 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

793 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_ARBLST
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_ARBLST
) != RESET))

795 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_ARBLST
);

796 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

800 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_RXOVR
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_RXOVR
) != RESET))

802 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_RXOVR
);

803 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

807 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_BRE
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_BRE
) != RESET))

809 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_BRE
);

810 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

814 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_SBPE
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_SBPE
) != RESET))

816 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_SBPE
);

817 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

821 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_LBPE
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_LBPE
) != RESET))

823 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_LBPE
);

824 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

828 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_RXACKE
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_RXACKE
) != RESET))

830 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_RXACKE
);

831 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_ERROR
;

834 i‡((
h˚c
->
Eº‹Code
 & 
CEC_ISR_ALL_ERROR
) != 0)

836 
	`HAL_CEC_Eº‹CÆlback
(
h˚c
);

840 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_RXBR
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_RXBR
) != RESET))

843 
	`CEC_Re˚ive_IT
(
h˚c
);

847 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_RXEND
Ë!
RESET
Ë&& (
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_RXEND
) != RESET))

850 
	`CEC_Re˚ive_IT
(
h˚c
);

854 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_TXBR
Ë!
RESET
Ë&&(
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_TXBR
) != RESET))

857 
	`CEC_Tønsmô_IT
(
h˚c
);

861 if((
	`__HAL_CEC_GET_FLAG
(
h˚c
, 
CEC_FLAG_TXEND
Ë!
RESET
Ë&&(
	`__HAL_CEC_GET_IT_SOURCE
(h˚c, 
CEC_IT_TXEND
) != RESET))

864 
	`CEC_Tønsmô_IT
(
h˚c
);

866 
	}
}

873 
__wók
 
	$HAL_CEC_TxC∂tCÆlback
(
CEC_H™dÀTy≥Def
 *
h˚c
)

878 
	}
}

885 
__wók
 
	$HAL_CEC_RxC∂tCÆlback
(
CEC_H™dÀTy≥Def
 *
h˚c
)

890 
	}
}

897 
__wók
 
	$HAL_CEC_Eº‹CÆlback
(
CEC_H™dÀTy≥Def
 *
h˚c
)

902 
	}
}

925 
HAL_CEC_SèãTy≥Def
 
	$HAL_CEC_GëSèã
(
CEC_H™dÀTy≥Def
 *
h˚c
)

927  
h˚c
->
Sèã
;

928 
	}
}

936 
uöt32_t
 
	$HAL_CEC_GëEº‹
(
CEC_H™dÀTy≥Def
 *
h˚c
)

938  
h˚c
->
Eº‹Code
;

939 
	}
}

952 
HAL_SètusTy≥Def
 
	$CEC_Tønsmô_IT
(
CEC_H™dÀTy≥Def
 *
h˚c
)

956 i‡((
h˚c
->
Sèã
 =
HAL_CEC_STATE_BUSY_TX
)

957 || (
	`__HAL_CEC_GET_TRANSMISSION_START_FLAG
(
h˚c
Ë!
RESET
))

959 
	`__HAL_LOCK
(
h˚c
);

962 i‡(
h˚c
->
Sèã
 !
HAL_CEC_STATE_BUSY_TX
)

964 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_BUSY_TX
;

968 if(
h˚c
->
TxX„rCou¡
 == 0)

971 
	`__HAL_CEC_DISABLE
(
h˚c
);

974 
	`__HAL_CEC_DISABLE_IT
(
h˚c
, 
CEC_IT_TXBR
|
CEC_IT_TXEND
);

976 
	`__HAL_CEC_DISABLE_IT
(
h˚c
, 
CEC_IER_TX_ALL_ERR
);

979 
	`__HAL_CEC_ENABLE
(
h˚c
);

981 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
,
CEC_FLAG_TXBR
|
CEC_FLAG_TXEND
);

983 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_READY
;

986 
	`__HAL_UNLOCK
(
h˚c
);

988 
	`HAL_CEC_TxC∂tCÆlback
(
h˚c
);

990  
HAL_OK
;

994 i‡(
h˚c
->
TxX„rCou¡
 == 1)

997 
	`__HAL_CEC_LAST_BYTE_TX_SET
(
h˚c
);

1000 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
,
CEC_FLAG_TXBR
);

1001 
h˚c
->
In°™˚
->
TXDR
 = *h˚c->
pTxBuffPå
++;

1002 
h˚c
->
TxX„rCou¡
--;

1005 
	`__HAL_UNLOCK
(
h˚c
);

1007  
HAL_OK
;

1012  
HAL_BUSY
;

1014 
	}
}

1024 
HAL_SètusTy≥Def
 
	$CEC_Re˚ive_IT
(
CEC_H™dÀTy≥Def
 *
h˚c
)

1026 
uöt32_t
 
ãmpi§
;

1037 i‡((
h˚c
->
Sèã
 =
HAL_CEC_STATE_STANDBY_RX
)

1038 || (
h˚c
->
Sèã
 =
HAL_CEC_STATE_BUSY_RX
)

1039 || (
h˚c
->
Sèã
 =
HAL_CEC_STATE_BUSY_TX
))

1042 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_BUSY_RX
;

1043 
ãmpi§
 = (
uöt32_t
Ë(
h˚c
->
In°™˚
->
ISR
);

1044 i‡((
ãmpi§
 & 
CEC_FLAG_RXBR
) != 0)

1047 
	`__HAL_LOCK
(
h˚c
);

1049 *
h˚c
->
pRxBuffPå
++ = h˚c->
In°™˚
->
RXDR
;

1051 i‡((
ãmpi§
 & 
CEC_FLAG_RXEND
) != 0)

1054 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
,
CEC_FLAG_RXBR
|
CEC_FLAG_RXEND
);

1066 
h˚c
->
Sèã
 = 
HAL_CEC_STATE_READY
;

1069 
	`__HAL_UNLOCK
(
h˚c
);

1070 
	`HAL_CEC_RxC∂tCÆlback
(
h˚c
);

1072  
HAL_OK
;

1074 
	`__HAL_CEC_CLEAR_FLAG
(
h˚c
, 
CEC_FLAG_RXBR
);

1076 
h˚c
->
RxX„rSize
++;

1078 
	`__HAL_UNLOCK
(
h˚c
);

1080  
HAL_OK
;

1084  
HAL_BUSY
;

1089  
HAL_BUSY
;

1091 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cortex.c

101 
	~"°m32f4xx_hÆ.h
"

112 #ifde‡
HAL_CORTEX_MODULE_ENABLED


161 
	$HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

164 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

167 
	`NVIC_SëPri‹ôyGroupög
(
Pri‹ôyGroup
);

168 
	}
}

183 
	$HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

185 
uöt32_t
 
¥i‹ôygroup
 = 0x00;

188 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
SubPri‹ôy
));

189 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
Pªem±Pri‹ôy
));

191 
¥i‹ôygroup
 = 
	`NVIC_GëPri‹ôyGroupög
();

193 
	`NVIC_SëPri‹ôy
(
IRQn
, 
	`NVIC_EncodePri‹ôy
(
¥i‹ôygroup
, 
Pªem±Pri‹ôy
, 
SubPri‹ôy
));

194 
	}
}

205 
	$HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

208 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

211 
	`NVIC_E«bÀIRQ
(
IRQn
);

212 
	}
}

221 
	$HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

224 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

227 
	`NVIC_DißbÀIRQ
(
IRQn
);

228 
	}
}

234 
	$HAL_NVIC_Sy°emRe£t
()

237 
	`NVIC_Sy°emRe£t
();

238 
	}
}

247 
uöt32_t
 
	$HAL_SYSTICK_C⁄fig
(
uöt32_t
 
TicksNumb
)

249  
	`SysTick_C⁄fig
(
TicksNumb
);

250 
	}
}

271 #i‡(
__MPU_PRESENT
 == 1)

278 
	$HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
)

281 
	`as£π_∑øm
(
	`IS_MPU_REGION_NUMBER
(
MPU_Inô
->
Numbî
));

282 
	`as£π_∑øm
(
	`IS_MPU_REGION_ENABLE
(
MPU_Inô
->
E«bÀ
));

285 
MPU
->
RNR
 = 
MPU_Inô
->
Numbî
;

287 i‡((
MPU_Inô
->
E«bÀ
Ë!
RESET
)

290 
	`as£π_∑øm
(
	`IS_MPU_INSTRUCTION_ACCESS
(
MPU_Inô
->
DißbÀExec
));

291 
	`as£π_∑øm
(
	`IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
MPU_Inô
->
Ac˚ssPîmissi⁄
));

292 
	`as£π_∑øm
(
	`IS_MPU_TEX_LEVEL
(
MPU_Inô
->
Ty≥ExtFõld
));

293 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_SHAREABLE
(
MPU_Inô
->
IsSh¨óbÀ
));

294 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_CACHEABLE
(
MPU_Inô
->
IsCachóbÀ
));

295 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_BUFFERABLE
(
MPU_Inô
->
IsBuf„øbÀ
));

296 
	`as£π_∑øm
(
	`IS_MPU_SUB_REGION_DISABLE
(
MPU_Inô
->
SubRegi⁄DißbÀ
));

297 
	`as£π_∑øm
(
	`IS_MPU_REGION_SIZE
(
MPU_Inô
->
Size
));

299 
MPU
->
RBAR
 = 
MPU_Inô
->
Ba£Addªss
;

300 
MPU
->
RASR
 = ((
uöt32_t
)
MPU_Inô
->
DißbÀExec
 << 
MPU_RASR_XN_Pos
) |

301 ((
uöt32_t
)
MPU_Inô
->
Ac˚ssPîmissi⁄
 << 
MPU_RASR_AP_Pos
) |

302 ((
uöt32_t
)
MPU_Inô
->
Ty≥ExtFõld
 << 
MPU_RASR_TEX_Pos
) |

303 ((
uöt32_t
)
MPU_Inô
->
IsSh¨óbÀ
 << 
MPU_RASR_S_Pos
) |

304 ((
uöt32_t
)
MPU_Inô
->
IsCachóbÀ
 << 
MPU_RASR_C_Pos
) |

305 ((
uöt32_t
)
MPU_Inô
->
IsBuf„øbÀ
 << 
MPU_RASR_B_Pos
) |

306 ((
uöt32_t
)
MPU_Inô
->
SubRegi⁄DißbÀ
 << 
MPU_RASR_SRD_Pos
) |

307 ((
uöt32_t
)
MPU_Inô
->
Size
 << 
MPU_RASR_SIZE_Pos
) |

308 ((
uöt32_t
)
MPU_Inô
->
E«bÀ
 << 
MPU_RASR_ENABLE_Pos
);

312 
MPU
->
RBAR
 = 0x00;

313 
MPU
->
RASR
 = 0x00;

315 
	}
}

322 
uöt32_t
 
	$HAL_NVIC_GëPri‹ôyGroupög
()

325  
	`NVIC_GëPri‹ôyGroupög
();

326 
	}
}

349 
	$HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_à*
pPªem±Pri‹ôy
, uöt32_à*
pSubPri‹ôy
)

352 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

354 
	`NVIC_DecodePri‹ôy
(
	`NVIC_GëPri‹ôy
(
IRQn
), 
Pri‹ôyGroup
, 
pPªem±Pri‹ôy
, 
pSubPri‹ôy
);

355 
	}
}

364 
	$HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

367 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

370 
	`NVIC_SëPídögIRQ
(
IRQn
);

371 
	}
}

382 
uöt32_t
 
	$HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

385 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

388  
	`NVIC_GëPídögIRQ
(
IRQn
);

389 
	}
}

398 
	$HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

401 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

404 
	`NVIC_CÀ¨PídögIRQ
(
IRQn
);

405 
	}
}

415 
uöt32_t
 
	$HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

418 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

421  
	`NVIC_GëA˘ive
(
IRQn
);

422 
	}
}

432 
	$HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
)

435 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
CLKSour˚
));

436 i‡(
CLKSour˚
 =
SYSTICK_CLKSOURCE_HCLK
)

438 
SysTick
->
CTRL
 |
SYSTICK_CLKSOURCE_HCLK
;

442 
SysTick
->
CTRL
 &~
SYSTICK_CLKSOURCE_HCLK
;

444 
	}
}

450 
	$HAL_SYSTICK_IRQH™dÀr
()

452 
	`HAL_SYSTICK_CÆlback
();

453 
	}
}

459 
__wók
 
	$HAL_SYSTICK_CÆlback
()

464 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_crc.c

63 
	~"°m32f4xx_hÆ.h
"

73 #ifde‡
HAL_CRC_MODULE_ENABLED


112 
HAL_SètusTy≥Def
 
	$HAL_CRC_Inô
(
CRC_H™dÀTy≥Def
 *
h¸c
)

115 if(
h¸c
 =
NULL
)

117  
HAL_ERROR
;

121 
	`as£π_∑øm
(
	`IS_CRC_ALL_INSTANCE
(
h¸c
->
In°™˚
));

123 if(
h¸c
->
Sèã
 =
HAL_CRC_STATE_RESET
)

126 
h¸c
->
Lock
 = 
HAL_UNLOCKED
;

128 
	`HAL_CRC_M•Inô
(
h¸c
);

132 
h¸c
->
Sèã
 = 
HAL_CRC_STATE_BUSY
;

135 
h¸c
->
Sèã
 = 
HAL_CRC_STATE_READY
;

138  
HAL_OK
;

139 
	}
}

147 
HAL_SètusTy≥Def
 
	$HAL_CRC_DeInô
(
CRC_H™dÀTy≥Def
 *
h¸c
)

150 if(
h¸c
 =
NULL
)

152  
HAL_ERROR
;

156 
	`as£π_∑øm
(
	`IS_CRC_ALL_INSTANCE
(
h¸c
->
In°™˚
));

159 
h¸c
->
Sèã
 = 
HAL_CRC_STATE_BUSY
;

162 
	`HAL_CRC_M•DeInô
(
h¸c
);

165 
h¸c
->
Sèã
 = 
HAL_CRC_STATE_RESET
;

168 
	`__HAL_UNLOCK
(
h¸c
);

171  
HAL_OK
;

172 
	}
}

180 
__wók
 
	$HAL_CRC_M•Inô
(
CRC_H™dÀTy≥Def
 *
h¸c
)

185 
	}
}

193 
__wók
 
	$HAL_CRC_M•DeInô
(
CRC_H™dÀTy≥Def
 *
h¸c
)

198 
	}
}

230 
uöt32_t
 
	$HAL_CRC_Accumuœã
(
CRC_H™dÀTy≥Def
 *
h¸c
, 
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

232 
uöt32_t
 
ödex
 = 0;

235 
	`__HAL_LOCK
(
h¸c
);

238 
h¸c
->
Sèã
 = 
HAL_CRC_STATE_BUSY
;

241 
ödex
 = 0; index < 
Buf„rLígth
; index++)

243 
h¸c
->
In°™˚
->
DR
 = 
pBuf„r
[
ödex
];

247 
h¸c
->
Sèã
 = 
HAL_CRC_STATE_READY
;

250 
	`__HAL_UNLOCK
(
h¸c
);

253  
h¸c
->
In°™˚
->
DR
;

254 
	}
}

265 
uöt32_t
 
	$HAL_CRC_CÆcuœã
(
CRC_H™dÀTy≥Def
 *
h¸c
, 
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

267 
uöt32_t
 
ödex
 = 0;

270 
	`__HAL_LOCK
(
h¸c
);

273 
h¸c
->
Sèã
 = 
HAL_CRC_STATE_BUSY
;

276 
	`__HAL_CRC_DR_RESET
(
h¸c
);

279 
ödex
 = 0; index < 
Buf„rLígth
; index++)

281 
h¸c
->
In°™˚
->
DR
 = 
pBuf„r
[
ödex
];

285 
h¸c
->
Sèã
 = 
HAL_CRC_STATE_READY
;

288 
	`__HAL_UNLOCK
(
h¸c
);

291  
h¸c
->
In°™˚
->
DR
;

292 
	}
}

320 
HAL_CRC_SèãTy≥Def
 
	$HAL_CRC_GëSèã
(
CRC_H™dÀTy≥Def
 *
h¸c
)

322  
h¸c
->
Sèã
;

323 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cryp.c

101 
	~"°m32f4xx_hÆ.h
"

112 #ifde‡
HAL_CRYP_MODULE_ENABLED


114 #i‡
deföed
(
STM32F415xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

121 
	#CRYP_TIMEOUT_VALUE
 1

	)

132 
CRYP_SëInôVe˘‹
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
InôVe˘‹
, 
uöt32_t
 
IVSize
);

133 
CRYP_SëKey
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
Key
, 
uöt32_t
 
KeySize
);

134 
HAL_SètusTy≥Def
 
CRYP_Pro˚ssD©a
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
* 
I≈ut
, 
uöt16_t
 
IÀngth
, uöt8_t* 
Ouçut
, 
uöt32_t
 
Timeout
);

135 
HAL_SètusTy≥Def
 
CRYP_Pro˚ssD©a2W‹ds
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
* 
I≈ut
, 
uöt16_t
 
IÀngth
, uöt8_t* 
Ouçut
, 
uöt32_t
 
Timeout
);

136 
CRYP_DMAInC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

137 
CRYP_DMAOutC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

138 
CRYP_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

139 
CRYP_SëDMAC⁄fig
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
öpuèddr
, 
uöt16_t
 
Size
, uöt32_à
ouçuèddr
);

140 
CRYP_SëTDESECBMode
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Dúe˘i⁄
);

141 
CRYP_SëTDESCBCMode
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Dúe˘i⁄
);

142 
CRYP_SëDESECBMode
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Dúe˘i⁄
);

143 
CRYP_SëDESCBCMode
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Dúe˘i⁄
);

161 
	$CRYP_DMAInC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

163 
CRYP_H™dÀTy≥Def
* 
h¸yp
 = (CRYP_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

167 
h¸yp
->
In°™˚
->
DMACR
 &(
uöt32_t
)(~
CRYP_DMACR_DIEN
);

170 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

171 
	}
}

178 
	$CRYP_DMAOutC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

180 
CRYP_H™dÀTy≥Def
* 
h¸yp
 = (CRYP_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

184 
h¸yp
->
In°™˚
->
DMACR
 &(
uöt32_t
)(~
CRYP_DMACR_DOEN
);

187 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

190 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

193 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

194 
	}
}

201 
	$CRYP_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

203 
CRYP_H™dÀTy≥Def
* 
h¸yp
 = (CRYP_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

204 
h¸yp
->
Sèã

HAL_CRYP_STATE_READY
;

205 
	`HAL_CRYP_Eº‹CÆlback
(
h¸yp
);

206 
	}
}

216 
	$CRYP_SëKey
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
Key
, 
uöt32_t
 
KeySize
)

218 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

220 
KeySize
)

222 
CRYP_KEYSIZE_256B
:

224 
h¸yp
->
In°™˚
->
K0LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

225 
keyaddr
+=4;

226 
h¸yp
->
In°™˚
->
K0RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

227 
keyaddr
+=4;

228 
h¸yp
->
In°™˚
->
K1LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

229 
keyaddr
+=4;

230 
h¸yp
->
In°™˚
->
K1RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

231 
keyaddr
+=4;

232 
h¸yp
->
In°™˚
->
K2LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

233 
keyaddr
+=4;

234 
h¸yp
->
In°™˚
->
K2RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

235 
keyaddr
+=4;

236 
h¸yp
->
In°™˚
->
K3LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

237 
keyaddr
+=4;

238 
h¸yp
->
In°™˚
->
K3RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

240 
CRYP_KEYSIZE_192B
:

241 
h¸yp
->
In°™˚
->
K1LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

242 
keyaddr
+=4;

243 
h¸yp
->
In°™˚
->
K1RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

244 
keyaddr
+=4;

245 
h¸yp
->
In°™˚
->
K2LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

246 
keyaddr
+=4;

247 
h¸yp
->
In°™˚
->
K2RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

248 
keyaddr
+=4;

249 
h¸yp
->
In°™˚
->
K3LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

250 
keyaddr
+=4;

251 
h¸yp
->
In°™˚
->
K3RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

253 
CRYP_KEYSIZE_128B
:

254 
h¸yp
->
In°™˚
->
K2LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

255 
keyaddr
+=4;

256 
h¸yp
->
In°™˚
->
K2RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

257 
keyaddr
+=4;

258 
h¸yp
->
In°™˚
->
K3LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

259 
keyaddr
+=4;

260 
h¸yp
->
In°™˚
->
K3RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

265 
	}
}

275 
	$CRYP_SëInôVe˘‹
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
InôVe˘‹
, 
uöt32_t
 
IVSize
)

277 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹
;

279 
IVSize
)

281 
CRYP_KEYSIZE_128B
:

282 
h¸yp
->
In°™˚
->
IV0LR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

283 
ivaddr
+=4;

284 
h¸yp
->
In°™˚
->
IV0RR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

285 
ivaddr
+=4;

286 
h¸yp
->
In°™˚
->
IV1LR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

287 
ivaddr
+=4;

288 
h¸yp
->
In°™˚
->
IV1RR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

291 
CRYP_KEYSIZE_192B
:

292 
h¸yp
->
In°™˚
->
IV0LR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

293 
ivaddr
+=4;

294 
h¸yp
->
In°™˚
->
IV0RR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

296 
CRYP_KEYSIZE_256B
:

297 
h¸yp
->
In°™˚
->
IV0LR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

298 
ivaddr
+=4;

299 
h¸yp
->
In°™˚
->
IV0RR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

304 
	}
}

316 
HAL_SètusTy≥Def
 
	$CRYP_Pro˚ssD©a
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
* 
I≈ut
, 
uöt16_t
 
IÀngth
, uöt8_t* 
Ouçut
, 
uöt32_t
 
Timeout
)

318 
uöt32_t
 
tick°¨t
 = 0;

320 
uöt32_t
 
i
 = 0;

321 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

322 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

324 
i
=0; (ò< 
IÀngth
); i+=16)

327 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

328 
öpuèddr
+=4;

329 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

330 
öpuèddr
+=4;

331 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

332 
öpuèddr
+=4;

333 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

334 
öpuèddr
+=4;

337 
tick°¨t
 = 
	`HAL_GëTick
();

339 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_OFNE
))

342 if(
Timeout
 !
HAL_MAX_DELAY
)

344 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

347 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

350 
	`__HAL_UNLOCK
(
h¸yp
);

352  
HAL_TIMEOUT
;

357 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

358 
ouçuèddr
+=4;

359 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

360 
ouçuèddr
+=4;

361 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

362 
ouçuèddr
+=4;

363 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

364 
ouçuèddr
+=4;

367  
HAL_OK
;

368 
	}
}

380 
HAL_SètusTy≥Def
 
	$CRYP_Pro˚ssD©a2W‹ds
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
* 
I≈ut
, 
uöt16_t
 
IÀngth
, uöt8_t* 
Ouçut
, 
uöt32_t
 
Timeout
)

382 
uöt32_t
 
tick°¨t
 = 0;

384 
uöt32_t
 
i
 = 0;

385 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

386 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

388 
i
=0; (ò< 
IÀngth
); i+=8)

391 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

392 
öpuèddr
+=4;

393 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

394 
öpuèddr
+=4;

397 
tick°¨t
 = 
	`HAL_GëTick
();

399 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_OFNE
))

402 if(
Timeout
 !
HAL_MAX_DELAY
)

404 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

407 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

410 
	`__HAL_UNLOCK
(
h¸yp
);

412  
HAL_TIMEOUT
;

417 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

418 
ouçuèddr
+=4;

419 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

420 
ouçuèddr
+=4;

423  
HAL_OK
;

424 
	}
}

435 
	$CRYP_SëDMAC⁄fig
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
öpuèddr
, 
uöt16_t
 
Size
, uöt32_à
ouçuèddr
)

438 
h¸yp
->
hdmaö
->
X„rC∂tCÆlback
 = 
CRYP_DMAInC∂t
;

440 
h¸yp
->
hdmaö
->
X„rEº‹CÆlback
 = 
CRYP_DMAEº‹
;

443 
h¸yp
->
hdmaout
->
X„rC∂tCÆlback
 = 
CRYP_DMAOutC∂t
;

445 
h¸yp
->
hdmaout
->
X„rEº‹CÆlback
 = 
CRYP_DMAEº‹
;

448 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

451 
	`HAL_DMA_Sèπ_IT
(
h¸yp
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&h¸yp->
In°™˚
->
DR
, 
Size
/4);

454 
h¸yp
->
In°™˚
->
DMACR
 = (
CRYP_DMACR_DIEN
);

457 
	`HAL_DMA_Sèπ_IT
(
h¸yp
->
hdmaout
, (
uöt32_t
)&h¸yp->
In°™˚
->
DOUT
, 
ouçuèddr
, 
Size
/4);

460 
h¸yp
->
In°™˚
->
DMACR
 |
CRYP_DMACR_DOEN
;

462 
	}
}

471 
	$CRYP_SëDESECBMode
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Dúe˘i⁄
)

474 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

477 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_DES_ECB
 | 
Dúe˘i⁄
);

480 
h¸yp
->
In°™˚
->
K1LR
 = 
	`__REV
(*(
uöt32_t
*)(h¸yp->
Inô
.
pKey
));

481 
h¸yp
->
In°™˚
->
K1RR
 = 
	`__REV
(*(
uöt32_t
*)(h¸yp->
Inô
.
pKey
+4));

484 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

487 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

489 
	}
}

498 
	$CRYP_SëDESCBCMode
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Dúe˘i⁄
)

501 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

504 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_DES_CBC
 | 
Dúe˘i⁄
);

507 
h¸yp
->
In°™˚
->
K1LR
 = 
	`__REV
(*(
uöt32_t
*)(h¸yp->
Inô
.
pKey
));

508 
h¸yp
->
In°™˚
->
K1RR
 = 
	`__REV
(*(
uöt32_t
*)(h¸yp->
Inô
.
pKey
+4));

511 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_256B
);

514 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

517 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

519 
	}
}

528 
	$CRYP_SëTDESECBMode
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Dúe˘i⁄
)

531 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

534 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_TDES_ECB
 | 
Dúe˘i⁄
);

537 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, 
CRYP_KEYSIZE_192B
);

540 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

543 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

545 
	}
}

554 
	$CRYP_SëTDESCBCMode
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Dúe˘i⁄
)

557 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

560 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_TDES_CBC
 | 
Dúe˘i⁄
);

563 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, 
CRYP_KEYSIZE_192B
);

566 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_256B
);

569 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

572 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

574 
	}
}

610 
HAL_SètusTy≥Def
 
	$HAL_CRYP_Inô
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

613 if(
h¸yp
 =
NULL
)

615  
HAL_ERROR
;

619 
	`as£π_∑øm
(
	`IS_CRYP_KEYSIZE
(
h¸yp
->
Inô
.
KeySize
));

620 
	`as£π_∑øm
(
	`IS_CRYP_DATATYPE
(
h¸yp
->
Inô
.
D©aTy≥
));

622 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_RESET
)

625 
h¸yp
->
Lock
 = 
HAL_UNLOCKED
;

627 
	`HAL_CRYP_M•Inô
(
h¸yp
);

631 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

634 
CRYP
->
CR
 = (
uöt32_t
Ë(
h¸yp
->
Inô
.
KeySize
 | h¸yp->Inô.
D©aTy≥
);

637 
h¸yp
->
CrypInCou¡
 = 0;

638 
h¸yp
->
CrypOutCou¡
 = 0;

641 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

644 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_READY
;

647  
HAL_OK
;

648 
	}
}

656 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DeInô
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

659 if(
h¸yp
 =
NULL
)

661  
HAL_ERROR
;

665 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

668 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_READY
;

671 
h¸yp
->
CrypInCou¡
 = 0;

672 
h¸yp
->
CrypOutCou¡
 = 0;

675 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

678 
	`HAL_CRYP_M•DeInô
(
h¸yp
);

681 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_RESET
;

684 
	`__HAL_UNLOCK
(
h¸yp
);

687  
HAL_OK
;

688 
	}
}

696 
__wók
 
	$HAL_CRYP_M•Inô
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

701 
	}
}

709 
__wók
 
	$HAL_CRYP_M•DeInô
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

714 
	}
}

750 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESECB_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

753 
	`__HAL_LOCK
(
h¸yp
);

756 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

759 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

762 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

765 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_ECB
);

768 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

771 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

774 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

778 if(
	`CRYP_Pro˚ssD©a
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

780  
HAL_TIMEOUT
;

784 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

787 
	`__HAL_UNLOCK
(
h¸yp
);

790  
HAL_OK
;

791 
	}
}

804 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCBC_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

807 
	`__HAL_LOCK
(
h¸yp
);

810 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

813 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

816 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

819 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CBC
);

822 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

825 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

828 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

831 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

835 if(
	`CRYP_Pro˚ssD©a
(
h¸yp
,
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

837  
HAL_TIMEOUT
;

841 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

844 
	`__HAL_UNLOCK
(
h¸yp
);

847  
HAL_OK
;

848 
	}
}

861 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCTR_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

864 
	`__HAL_LOCK
(
h¸yp
);

867 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

870 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

873 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

876 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CTR
);

879 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

882 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

885 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

888 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

892 if(
	`CRYP_Pro˚ssD©a
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

894  
HAL_TIMEOUT
;

898 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

901 
	`__HAL_UNLOCK
(
h¸yp
);

904  
HAL_OK
;

905 
	}
}

920 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESECB_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
)

922 
uöt32_t
 
tick°¨t
 = 0;

925 
	`__HAL_LOCK
(
h¸yp
);

928 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

931 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

934 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

937 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_KEY
 | 
CRYP_CR_ALGODIR
);

940 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

943 
tick°¨t
 = 
	`HAL_GëTick
();

945 
	`HAL_IS_BIT_SET
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_BUSY
))

948 if(
Timeout
 !
HAL_MAX_DELAY
)

950 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

953 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

956 
	`__HAL_UNLOCK
(
h¸yp
);

958  
HAL_TIMEOUT
;

964 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

967 
CRYP
->
CR
 &(
uöt32_t
)(~
CRYP_CR_ALGOMODE
);

970 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_ECB
 | 
CRYP_CR_ALGODIR
);

972 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

975 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

978 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

982 if(
	`CRYP_Pro˚ssD©a
(
h¸yp
, 
pCyphîD©a
, 
Size
, 
pPœöD©a
, 
Timeout
Ë!
HAL_OK
)

984  
HAL_TIMEOUT
;

988 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

991 
	`__HAL_UNLOCK
(
h¸yp
);

994  
HAL_OK
;

995 
	}
}

1008 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCBC_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
)

1010 
uöt32_t
 
tick°¨t
 = 0;

1013 
	`__HAL_LOCK
(
h¸yp
);

1016 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1019 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1022 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1025 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_KEY
 | 
CRYP_CR_ALGODIR
);

1028 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1031 
tick°¨t
 = 
	`HAL_GëTick
();

1033 
	`HAL_IS_BIT_SET
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_BUSY
))

1036 if(
Timeout
 !
HAL_MAX_DELAY
)

1038 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1041 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1044 
	`__HAL_UNLOCK
(
h¸yp
);

1046  
HAL_TIMEOUT
;

1052 
CRYP
->
CR
 &(
uöt32_t
)(~
CRYP_CR_ALGOMODE
);

1055 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CBC
 | 
CRYP_CR_ALGODIR
);

1058 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

1061 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1064 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1067 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1071 if(
	`CRYP_Pro˚ssD©a
(
h¸yp
, 
pCyphîD©a
, 
Size
, 
pPœöD©a
, 
Timeout
Ë!
HAL_OK
)

1073  
HAL_TIMEOUT
;

1077 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1080 
	`__HAL_UNLOCK
(
h¸yp
);

1083  
HAL_OK
;

1084 
	}
}

1097 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCTR_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
)

1100 
	`__HAL_LOCK
(
h¸yp
);

1103 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1106 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1109 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1112 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CTR
 | 
CRYP_CR_ALGODIR
);

1115 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

1118 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1121 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1124 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1128 if(
	`CRYP_Pro˚ssD©a
(
h¸yp
, 
pCyphîD©a
, 
Size
, 
pPœöD©a
, 
Timeout
Ë!
HAL_OK
)

1130  
HAL_TIMEOUT
;

1134 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1137 
	`__HAL_UNLOCK
(
h¸yp
);

1140  
HAL_OK
;

1141 
	}
}

1152 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESECB_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

1154 
uöt32_t
 
öpuèddr
;

1155 
uöt32_t
 
ouçuèddr
;

1157 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1160 
	`__HAL_LOCK
(
h¸yp
);

1162 
h¸yp
->
CrypInCou¡
 = 
Size
;

1163 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

1164 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

1165 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1168 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1171 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1174 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1177 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_ECB
);

1180 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1183 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1187 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1190 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1193  
HAL_OK
;

1195 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1197 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1199 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1200 
öpuèddr
+=4;

1201 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1202 
öpuèddr
+=4;

1203 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1204 
öpuèddr
+=4;

1205 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1206 
h¸yp
->
pCrypInBuffPå
 += 16;

1207 
h¸yp
->
CrypInCou¡
 -= 16;

1208 if(
h¸yp
->
CrypInCou¡
 == 0)

1210 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1212 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1215 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1217 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1219 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1220 
ouçuèddr
+=4;

1221 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1222 
ouçuèddr
+=4;

1223 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1224 
ouçuèddr
+=4;

1225 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1226 
h¸yp
->
pCrypOutBuffPå
 += 16;

1227 
h¸yp
->
CrypOutCou¡
 -= 16;

1228 if(
h¸yp
->
CrypOutCou¡
 == 0)

1230 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1232 
	`__HAL_UNLOCK
(
h¸yp
);

1234 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1236 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1241  
HAL_OK
;

1242 
	}
}

1253 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCBC_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

1255 
uöt32_t
 
öpuèddr
;

1256 
uöt32_t
 
ouçuèddr
;

1258 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1261 
	`__HAL_LOCK
(
h¸yp
);

1263 
h¸yp
->
CrypInCou¡
 = 
Size
;

1264 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

1265 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

1266 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1269 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1272 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1275 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1278 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CBC
);

1281 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

1284 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1287 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1290 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1293 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1296  
HAL_OK
;

1298 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1300 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1302 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1303 
öpuèddr
+=4;

1304 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1305 
öpuèddr
+=4;

1306 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1307 
öpuèddr
+=4;

1308 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1309 
h¸yp
->
pCrypInBuffPå
 += 16;

1310 
h¸yp
->
CrypInCou¡
 -= 16;

1311 if(
h¸yp
->
CrypInCou¡
 == 0)

1313 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1315 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1318 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1320 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1322 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1323 
ouçuèddr
+=4;

1324 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1325 
ouçuèddr
+=4;

1326 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1327 
ouçuèddr
+=4;

1328 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1329 
h¸yp
->
pCrypOutBuffPå
 += 16;

1330 
h¸yp
->
CrypOutCou¡
 -= 16;

1331 if(
h¸yp
->
CrypOutCou¡
 == 0)

1333 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1335 
	`__HAL_UNLOCK
(
h¸yp
);

1337 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1339 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1344  
HAL_OK
;

1345 
	}
}

1356 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCTR_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

1358 
uöt32_t
 
öpuèddr
;

1359 
uöt32_t
 
ouçuèddr
;

1361 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1364 
	`__HAL_LOCK
(
h¸yp
);

1366 
h¸yp
->
CrypInCou¡
 = 
Size
;

1367 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

1368 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

1369 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1372 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1375 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1378 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1381 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CTR
);

1384 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

1387 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1390 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1393 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1396 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1399  
HAL_OK
;

1401 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1403 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1405 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1406 
öpuèddr
+=4;

1407 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1408 
öpuèddr
+=4;

1409 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1410 
öpuèddr
+=4;

1411 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1412 
h¸yp
->
pCrypInBuffPå
 += 16;

1413 
h¸yp
->
CrypInCou¡
 -= 16;

1414 if(
h¸yp
->
CrypInCou¡
 == 0)

1416 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1418 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1421 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1423 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1425 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1426 
ouçuèddr
+=4;

1427 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1428 
ouçuèddr
+=4;

1429 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1430 
ouçuèddr
+=4;

1431 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1432 
h¸yp
->
pCrypOutBuffPå
 += 16;

1433 
h¸yp
->
CrypOutCou¡
 -= 16;

1434 if(
h¸yp
->
CrypOutCou¡
 == 0)

1436 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1438 
	`__HAL_UNLOCK
(
h¸yp
);

1440 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1442 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1447  
HAL_OK
;

1448 
	}
}

1460 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESECB_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

1462 
uöt32_t
 
tick°¨t
 = 0;

1464 
uöt32_t
 
öpuèddr
;

1465 
uöt32_t
 
ouçuèddr
;

1467 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1470 
	`__HAL_LOCK
(
h¸yp
);

1472 
h¸yp
->
CrypInCou¡
 = 
Size
;

1473 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

1474 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

1475 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1478 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1481 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1484 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1487 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_KEY
 | 
CRYP_CR_ALGODIR
);

1489 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1492 
tick°¨t
 = 
	`HAL_GëTick
();

1494 
	`HAL_IS_BIT_SET
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_BUSY
))

1497 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYP_TIMEOUT_VALUE
)

1500 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1503 
	`__HAL_UNLOCK
(
h¸yp
);

1505  
HAL_TIMEOUT
;

1510 
CRYP
->
CR
 &(
uöt32_t
)(~
CRYP_CR_ALGOMODE
);

1513 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_ECB
 | 
CRYP_CR_ALGODIR
);

1516 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1519 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1523 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1526 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1529  
HAL_OK
;

1531 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1533 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1535 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1536 
öpuèddr
+=4;

1537 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1538 
öpuèddr
+=4;

1539 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1540 
öpuèddr
+=4;

1541 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1542 
h¸yp
->
pCrypInBuffPå
 += 16;

1543 
h¸yp
->
CrypInCou¡
 -= 16;

1544 if(
h¸yp
->
CrypInCou¡
 == 0)

1546 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1548 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1551 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1553 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1555 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1556 
ouçuèddr
+=4;

1557 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1558 
ouçuèddr
+=4;

1559 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1560 
ouçuèddr
+=4;

1561 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1562 
h¸yp
->
pCrypOutBuffPå
 += 16;

1563 
h¸yp
->
CrypOutCou¡
 -= 16;

1564 if(
h¸yp
->
CrypOutCou¡
 == 0)

1566 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1568 
	`__HAL_UNLOCK
(
h¸yp
);

1570 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1572 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1577  
HAL_OK
;

1578 
	}
}

1589 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCBC_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

1592 
uöt32_t
 
tick°¨t
 = 0;

1593 
uöt32_t
 
öpuèddr
;

1594 
uöt32_t
 
ouçuèddr
;

1596 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1599 
	`__HAL_LOCK
(
h¸yp
);

1602 
h¸yp
->
CrypInCou¡
 = 
Size
;

1603 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

1604 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

1605 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1608 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1611 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1614 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1617 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_KEY
 | 
CRYP_CR_ALGODIR
);

1620 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1623 
tick°¨t
 = 
	`HAL_GëTick
();

1625 
	`HAL_IS_BIT_SET
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_BUSY
))

1628 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYP_TIMEOUT_VALUE
)

1631 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1634 
	`__HAL_UNLOCK
(
h¸yp
);

1636  
HAL_TIMEOUT
;

1641 
CRYP
->
CR
 &(
uöt32_t
)(~
CRYP_CR_ALGOMODE
);

1644 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CBC
 | 
CRYP_CR_ALGODIR
);

1647 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

1650 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1653 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1656 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1660 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1663 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1666  
HAL_OK
;

1668 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1670 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1672 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1673 
öpuèddr
+=4;

1674 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1675 
öpuèddr
+=4;

1676 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1677 
öpuèddr
+=4;

1678 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1679 
h¸yp
->
pCrypInBuffPå
 += 16;

1680 
h¸yp
->
CrypInCou¡
 -= 16;

1681 if(
h¸yp
->
CrypInCou¡
 == 0)

1683 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1685 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1688 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1690 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1692 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1693 
ouçuèddr
+=4;

1694 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1695 
ouçuèddr
+=4;

1696 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1697 
ouçuèddr
+=4;

1698 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1699 
h¸yp
->
pCrypOutBuffPå
 += 16;

1700 
h¸yp
->
CrypOutCou¡
 -= 16;

1701 if(
h¸yp
->
CrypOutCou¡
 == 0)

1703 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1705 
	`__HAL_UNLOCK
(
h¸yp
);

1707 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1709 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1714  
HAL_OK
;

1715 
	}
}

1726 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCTR_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

1728 
uöt32_t
 
öpuèddr
;

1729 
uöt32_t
 
ouçuèddr
;

1731 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1734 
	`__HAL_LOCK
(
h¸yp
);

1737 
h¸yp
->
CrypInCou¡
 = 
Size
;

1738 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

1739 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

1740 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1743 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1746 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1749 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1752 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CTR
 | 
CRYP_CR_ALGODIR
);

1755 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

1758 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1761 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1765 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1768 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1771  
HAL_OK
;

1773 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1775 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1777 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1778 
öpuèddr
+=4;

1779 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1780 
öpuèddr
+=4;

1781 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1782 
öpuèddr
+=4;

1783 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1784 
h¸yp
->
pCrypInBuffPå
 += 16;

1785 
h¸yp
->
CrypInCou¡
 -= 16;

1786 if(
h¸yp
->
CrypInCou¡
 == 0)

1788 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1790 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1793 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1795 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1797 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1798 
ouçuèddr
+=4;

1799 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1800 
ouçuèddr
+=4;

1801 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1802 
ouçuèddr
+=4;

1803 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1804 
h¸yp
->
pCrypOutBuffPå
 += 16;

1805 
h¸yp
->
CrypOutCou¡
 -= 16;

1806 if(
h¸yp
->
CrypOutCou¡
 == 0)

1808 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1810 
	`__HAL_UNLOCK
(
h¸yp
);

1812 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1814 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1819  
HAL_OK
;

1820 
	}
}

1831 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESECB_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

1833 
uöt32_t
 
öpuèddr
;

1834 
uöt32_t
 
ouçuèddr
;

1836 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

1839 
	`__HAL_LOCK
(
h¸yp
);

1841 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

1842 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

1845 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1848 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1851 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1854 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_ECB
);

1857 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1860 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1863 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

1866 
	`__HAL_UNLOCK
(
h¸yp
);

1869  
HAL_OK
;

1873  
HAL_ERROR
;

1875 
	}
}

1886 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCBC_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

1888 
uöt32_t
 
öpuèddr
;

1889 
uöt32_t
 
ouçuèddr
;

1891 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

1894 
	`__HAL_LOCK
(
h¸yp
);

1896 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

1897 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

1900 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1903 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1906 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1909 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CBC
);

1912 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

1915 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1918 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1921 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

1924 
	`__HAL_UNLOCK
(
h¸yp
);

1927  
HAL_OK
;

1931  
HAL_ERROR
;

1933 
	}
}

1944 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCTR_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

1946 
uöt32_t
 
öpuèddr
;

1947 
uöt32_t
 
ouçuèddr
;

1949 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

1952 
	`__HAL_LOCK
(
h¸yp
);

1954 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

1955 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

1958 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1961 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1964 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1967 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CTR
);

1970 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

1973 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1976 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1980 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

1983 
	`__HAL_UNLOCK
(
h¸yp
);

1986  
HAL_OK
;

1990  
HAL_ERROR
;

1992 
	}
}

2003 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESECB_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2005 
uöt32_t
 
tick°¨t
 = 0;

2006 
uöt32_t
 
öpuèddr
;

2007 
uöt32_t
 
ouçuèddr
;

2009 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2012 
	`__HAL_LOCK
(
h¸yp
);

2014 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2015 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

2018 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2021 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

2024 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

2027 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_KEY
 | 
CRYP_CR_ALGODIR
);

2030 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2033 
tick°¨t
 = 
	`HAL_GëTick
();

2035 
	`HAL_IS_BIT_SET
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_BUSY
))

2038 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYP_TIMEOUT_VALUE
)

2041 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2044 
	`__HAL_UNLOCK
(
h¸yp
);

2046  
HAL_TIMEOUT
;

2051 
CRYP
->
CR
 &(
uöt32_t
)(~
CRYP_CR_ALGOMODE
);

2054 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_ECB
 | 
CRYP_CR_ALGODIR
);

2057 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2060 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

2064 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2067 
	`__HAL_UNLOCK
(
h¸yp
);

2070  
HAL_OK
;

2074  
HAL_ERROR
;

2076 
	}
}

2087 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCBC_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2089 
uöt32_t
 
tick°¨t
 = 0;

2090 
uöt32_t
 
öpuèddr
;

2091 
uöt32_t
 
ouçuèddr
;

2093 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2096 
	`__HAL_LOCK
(
h¸yp
);

2098 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2099 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

2102 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2105 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

2108 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

2111 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_KEY
 | 
CRYP_CR_ALGODIR
);

2114 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2117 
tick°¨t
 = 
	`HAL_GëTick
();

2119 
	`HAL_IS_BIT_SET
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_BUSY
))

2122 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYP_TIMEOUT_VALUE
)

2125 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2128 
	`__HAL_UNLOCK
(
h¸yp
);

2130  
HAL_TIMEOUT
;

2135 
CRYP
->
CR
 &(
uöt32_t
)(~
CRYP_CR_ALGOMODE
);

2138 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CBC
 | 
CRYP_CR_ALGODIR
);

2141 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

2144 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2147 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

2151 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2154 
	`__HAL_UNLOCK
(
h¸yp
);

2157  
HAL_OK
;

2161  
HAL_ERROR
;

2163 
	}
}

2174 
HAL_SètusTy≥Def
 
	$HAL_CRYP_AESCTR_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2176 
uöt32_t
 
öpuèddr
;

2177 
uöt32_t
 
ouçuèddr
;

2179 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2182 
	`__HAL_LOCK
(
h¸yp
);

2184 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2185 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

2188 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2191 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

2194 
	`CRYP_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

2197 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CTR
 | 
CRYP_CR_ALGODIR
);

2200 
	`CRYP_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
, 
CRYP_KEYSIZE_128B
);

2203 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2206 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

2210 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2213 
	`__HAL_UNLOCK
(
h¸yp
);

2216  
HAL_OK
;

2220  
HAL_ERROR
;

2222 
	}
}

2258 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESECB_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

2261 
	`__HAL_LOCK
(
h¸yp
);

2264 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2267 
	`CRYP_SëDESECBMode
(
h¸yp
, 0);

2270 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2273 if(
	`CRYP_Pro˚ssD©a2W‹ds
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

2275  
HAL_TIMEOUT
;

2279 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2282 
	`__HAL_UNLOCK
(
h¸yp
);

2285  
HAL_OK
;

2286 
	}
}

2298 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESECB_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

2301 
	`__HAL_LOCK
(
h¸yp
);

2304 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2307 
	`CRYP_SëDESECBMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

2310 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2313 if(
	`CRYP_Pro˚ssD©a2W‹ds
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

2315  
HAL_TIMEOUT
;

2319 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2322 
	`__HAL_UNLOCK
(
h¸yp
);

2325  
HAL_OK
;

2326 
	}
}

2338 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESCBC_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

2341 
	`__HAL_LOCK
(
h¸yp
);

2344 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2347 
	`CRYP_SëDESCBCMode
(
h¸yp
, 0);

2350 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2353 if(
	`CRYP_Pro˚ssD©a2W‹ds
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

2355  
HAL_TIMEOUT
;

2359 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2362 
	`__HAL_UNLOCK
(
h¸yp
);

2365  
HAL_OK
;

2366 
	}
}

2378 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESCBC_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

2381 
	`__HAL_LOCK
(
h¸yp
);

2384 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2387 
	`CRYP_SëDESCBCMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

2390 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2393 if(
	`CRYP_Pro˚ssD©a2W‹ds
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

2395  
HAL_TIMEOUT
;

2399 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2402 
	`__HAL_UNLOCK
(
h¸yp
);

2405  
HAL_OK
;

2406 
	}
}

2417 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESECB_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

2419 
uöt32_t
 
öpuèddr
;

2420 
uöt32_t
 
ouçuèddr
;

2422 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

2425 
	`__HAL_LOCK
(
h¸yp
);

2427 
h¸yp
->
CrypInCou¡
 = 
Size
;

2428 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

2429 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

2430 
h¸yp
->
CrypOutCou¡
 = 
Size
;

2433 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2436 
	`CRYP_SëDESECBMode
(
h¸yp
, 0);

2439 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

2442 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2445  
HAL_OK
;

2447 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

2449 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

2451 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2452 
öpuèddr
+=4;

2453 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2455 
h¸yp
->
pCrypInBuffPå
 += 8;

2456 
h¸yp
->
CrypInCou¡
 -= 8;

2457 if(
h¸yp
->
CrypInCou¡
 == 0)

2459 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

2461 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

2464 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

2466 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

2468 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2469 
ouçuèddr
+=4;

2470 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2472 
h¸yp
->
pCrypOutBuffPå
 += 8;

2473 
h¸yp
->
CrypOutCou¡
 -= 8;

2474 if(
h¸yp
->
CrypOutCou¡
 == 0)

2477 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

2479 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

2481 
	`__HAL_UNLOCK
(
h¸yp
);

2483 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2485 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

2490  
HAL_OK
;

2491 
	}
}

2502 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESCBC_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

2504 
uöt32_t
 
öpuèddr
;

2505 
uöt32_t
 
ouçuèddr
;

2507 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

2510 
	`__HAL_LOCK
(
h¸yp
);

2512 
h¸yp
->
CrypInCou¡
 = 
Size
;

2513 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

2514 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

2515 
h¸yp
->
CrypOutCou¡
 = 
Size
;

2518 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2521 
	`CRYP_SëDESCBCMode
(
h¸yp
, 0);

2524 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

2527 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2530  
HAL_OK
;

2533 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

2535 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

2537 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2538 
öpuèddr
+=4;

2539 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2541 
h¸yp
->
pCrypInBuffPå
 += 8;

2542 
h¸yp
->
CrypInCou¡
 -= 8;

2543 if(
h¸yp
->
CrypInCou¡
 == 0)

2545 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

2547 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

2550 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

2552 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

2554 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2555 
ouçuèddr
+=4;

2556 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2558 
h¸yp
->
pCrypOutBuffPå
 += 8;

2559 
h¸yp
->
CrypOutCou¡
 -= 8;

2560 if(
h¸yp
->
CrypOutCou¡
 == 0)

2563 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

2565 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

2567 
	`__HAL_UNLOCK
(
h¸yp
);

2569 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2571 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

2576  
HAL_OK
;

2577 
	}
}

2588 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESECB_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2590 
uöt32_t
 
öpuèddr
;

2591 
uöt32_t
 
ouçuèddr
;

2593 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

2596 
	`__HAL_LOCK
(
h¸yp
);

2598 
h¸yp
->
CrypInCou¡
 = 
Size
;

2599 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

2600 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

2601 
h¸yp
->
CrypOutCou¡
 = 
Size
;

2604 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2607 
	`CRYP_SëDESECBMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

2610 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

2613 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2616  
HAL_OK
;

2618 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

2620 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

2622 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2623 
öpuèddr
+=4;

2624 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2626 
h¸yp
->
pCrypInBuffPå
 += 8;

2627 
h¸yp
->
CrypInCou¡
 -= 8;

2628 if(
h¸yp
->
CrypInCou¡
 == 0)

2630 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

2632 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

2635 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

2637 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

2639 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2640 
ouçuèddr
+=4;

2641 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2643 
h¸yp
->
pCrypOutBuffPå
 += 8;

2644 
h¸yp
->
CrypOutCou¡
 -= 8;

2645 if(
h¸yp
->
CrypOutCou¡
 == 0)

2648 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

2650 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

2652 
	`__HAL_UNLOCK
(
h¸yp
);

2654 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2656 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

2661  
HAL_OK
;

2662 
	}
}

2673 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESCBC_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2675 
uöt32_t
 
öpuèddr
;

2676 
uöt32_t
 
ouçuèddr
;

2678 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

2681 
	`__HAL_LOCK
(
h¸yp
);

2683 
h¸yp
->
CrypInCou¡
 = 
Size
;

2684 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

2685 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

2686 
h¸yp
->
CrypOutCou¡
 = 
Size
;

2689 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2692 
	`CRYP_SëDESCBCMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

2695 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

2698 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2701  
HAL_OK
;

2703 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

2705 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

2707 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2708 
öpuèddr
+=4;

2709 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2711 
h¸yp
->
pCrypInBuffPå
 += 8;

2712 
h¸yp
->
CrypInCou¡
 -= 8;

2713 if(
h¸yp
->
CrypInCou¡
 == 0)

2715 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

2717 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

2720 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

2722 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

2724 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2725 
ouçuèddr
+=4;

2726 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2728 
h¸yp
->
pCrypOutBuffPå
 += 8;

2729 
h¸yp
->
CrypOutCou¡
 -= 8;

2730 if(
h¸yp
->
CrypOutCou¡
 == 0)

2733 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

2735 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

2737 
	`__HAL_UNLOCK
(
h¸yp
);

2739 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2741 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

2746  
HAL_OK
;

2747 
	}
}

2758 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESECB_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

2760 
uöt32_t
 
öpuèddr
;

2761 
uöt32_t
 
ouçuèddr
;

2763 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2766 
	`__HAL_LOCK
(
h¸yp
);

2768 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

2769 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2772 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2775 
	`CRYP_SëDESECBMode
(
h¸yp
, 0);

2778 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2781 
	`__HAL_UNLOCK
(
h¸yp
);

2784  
HAL_OK
;

2788  
HAL_ERROR
;

2790 
	}
}

2801 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESCBC_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

2803 
uöt32_t
 
öpuèddr
;

2804 
uöt32_t
 
ouçuèddr
;

2806 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2809 
	`__HAL_LOCK
(
h¸yp
);

2811 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

2812 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2815 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2818 
	`CRYP_SëDESCBCMode
(
h¸yp
, 0);

2821 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2824 
	`__HAL_UNLOCK
(
h¸yp
);

2827  
HAL_OK
;

2831  
HAL_ERROR
;

2833 
	}
}

2844 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESECB_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2846 
uöt32_t
 
öpuèddr
;

2847 
uöt32_t
 
ouçuèddr
;

2849 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2852 
	`__HAL_LOCK
(
h¸yp
);

2854 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2855 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

2858 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2861 
	`CRYP_SëDESECBMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

2864 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2867 
	`__HAL_UNLOCK
(
h¸yp
);

2870  
HAL_OK
;

2874  
HAL_ERROR
;

2876 
	}
}

2887 
HAL_SètusTy≥Def
 
	$HAL_CRYP_DESCBC_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2889 
uöt32_t
 
öpuèddr
;

2890 
uöt32_t
 
ouçuèddr
;

2892 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2895 
	`__HAL_LOCK
(
h¸yp
);

2897 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2898 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

2901 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2904 
	`CRYP_SëDESCBCMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

2907 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2910 
	`__HAL_UNLOCK
(
h¸yp
);

2913  
HAL_OK
;

2917  
HAL_ERROR
;

2919 
	}
}

2955 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESECB_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

2958 
	`__HAL_LOCK
(
h¸yp
);

2961 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2964 
	`CRYP_SëTDESECBMode
(
h¸yp
, 0);

2967 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2970 if(
	`CRYP_Pro˚ssD©a2W‹ds
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

2972  
HAL_TIMEOUT
;

2976 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2979 
	`__HAL_UNLOCK
(
h¸yp
);

2982  
HAL_OK
;

2983 
	}
}

2996 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESECB_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
)

2999 
	`__HAL_LOCK
(
h¸yp
);

3002 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3005 
	`CRYP_SëTDESECBMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

3008 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

3011 if(
	`CRYP_Pro˚ssD©a2W‹ds
(
h¸yp
, 
pCyphîD©a
, 
Size
, 
pPœöD©a
, 
Timeout
Ë!
HAL_OK
)

3013  
HAL_TIMEOUT
;

3017 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

3020 
	`__HAL_UNLOCK
(
h¸yp
);

3023  
HAL_OK
;

3024 
	}
}

3037 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESCBC_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

3040 
	`__HAL_LOCK
(
h¸yp
);

3043 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3046 
	`CRYP_SëTDESCBCMode
(
h¸yp
, 0);

3049 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

3052 if(
	`CRYP_Pro˚ssD©a2W‹ds
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

3054  
HAL_TIMEOUT
;

3058 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

3061 
	`__HAL_UNLOCK
(
h¸yp
);

3064  
HAL_OK
;

3065 
	}
}

3078 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESCBC_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
)

3081 
	`__HAL_LOCK
(
h¸yp
);

3084 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3087 
	`CRYP_SëTDESCBCMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

3090 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

3093 if(
	`CRYP_Pro˚ssD©a2W‹ds
(
h¸yp
, 
pCyphîD©a
, 
Size
, 
pPœöD©a
, 
Timeout
Ë!
HAL_OK
)

3095  
HAL_TIMEOUT
;

3099 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

3102 
	`__HAL_UNLOCK
(
h¸yp
);

3105  
HAL_OK
;

3106 
	}
}

3117 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESECB_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

3119 
uöt32_t
 
öpuèddr
;

3120 
uöt32_t
 
ouçuèddr
;

3122 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

3125 
	`__HAL_LOCK
(
h¸yp
);

3127 
h¸yp
->
CrypInCou¡
 = 
Size
;

3128 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

3129 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

3130 
h¸yp
->
CrypOutCou¡
 = 
Size
;

3133 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3136 
	`CRYP_SëTDESECBMode
(
h¸yp
, 0);

3139 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

3142 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

3145  
HAL_OK
;

3147 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

3149 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

3151 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

3152 
öpuèddr
+=4;

3153 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

3155 
h¸yp
->
pCrypInBuffPå
 += 8;

3156 
h¸yp
->
CrypInCou¡
 -= 8;

3157 if(
h¸yp
->
CrypInCou¡
 == 0)

3159 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

3161 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

3164 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

3166 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

3168 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

3169 
ouçuèddr
+=4;

3170 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

3172 
h¸yp
->
pCrypOutBuffPå
 += 8;

3173 
h¸yp
->
CrypOutCou¡
 -= 8;

3174 if(
h¸yp
->
CrypOutCou¡
 == 0)

3177 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

3179 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

3181 
	`__HAL_UNLOCK
(
h¸yp
);

3183 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

3185 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

3190  
HAL_OK
;

3191 
	}
}

3202 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESCBC_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

3204 
uöt32_t
 
öpuèddr
;

3205 
uöt32_t
 
ouçuèddr
;

3207 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

3210 
	`__HAL_LOCK
(
h¸yp
);

3212 
h¸yp
->
CrypInCou¡
 = 
Size
;

3213 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

3214 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

3215 
h¸yp
->
CrypOutCou¡
 = 
Size
;

3218 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3221 
	`CRYP_SëTDESCBCMode
(
h¸yp
, 0);

3224 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

3227 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

3230  
HAL_OK
;

3232 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

3234 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

3236 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

3237 
öpuèddr
+=4;

3238 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

3240 
h¸yp
->
pCrypInBuffPå
 += 8;

3241 
h¸yp
->
CrypInCou¡
 -= 8;

3242 if(
h¸yp
->
CrypInCou¡
 == 0)

3244 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

3246 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

3249 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

3251 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

3253 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

3254 
ouçuèddr
+=4;

3255 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

3257 
h¸yp
->
pCrypOutBuffPå
 += 8;

3258 
h¸yp
->
CrypOutCou¡
 -= 8;

3259 if(
h¸yp
->
CrypOutCou¡
 == 0)

3261 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

3263 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

3265 
	`__HAL_UNLOCK
(
h¸yp
);

3267 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

3269 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

3274  
HAL_OK
;

3275 
	}
}

3286 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESECB_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

3288 
uöt32_t
 
öpuèddr
;

3289 
uöt32_t
 
ouçuèddr
;

3291 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

3294 
	`__HAL_LOCK
(
h¸yp
);

3296 
h¸yp
->
CrypInCou¡
 = 
Size
;

3297 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

3298 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

3299 
h¸yp
->
CrypOutCou¡
 = 
Size
;

3302 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3305 
	`CRYP_SëTDESECBMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

3308 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

3311 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

3314  
HAL_OK
;

3316 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

3318 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

3320 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

3321 
öpuèddr
+=4;

3322 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

3324 
h¸yp
->
pCrypInBuffPå
 += 8;

3325 
h¸yp
->
CrypInCou¡
 -= 8;

3326 if(
h¸yp
->
CrypInCou¡
 == 0)

3328 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

3330 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

3333 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

3335 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

3337 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

3338 
ouçuèddr
+=4;

3339 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

3341 
h¸yp
->
pCrypOutBuffPå
 += 8;

3342 
h¸yp
->
CrypOutCou¡
 -= 8;

3343 if(
h¸yp
->
CrypOutCou¡
 == 0)

3345 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

3347 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

3349 
	`__HAL_UNLOCK
(
h¸yp
);

3351 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

3353 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

3358  
HAL_OK
;

3359 
	}
}

3370 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESCBC_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

3372 
uöt32_t
 
öpuèddr
;

3373 
uöt32_t
 
ouçuèddr
;

3375 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

3378 
	`__HAL_LOCK
(
h¸yp
);

3380 
h¸yp
->
CrypInCou¡
 = 
Size
;

3381 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

3382 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

3383 
h¸yp
->
CrypOutCou¡
 = 
Size
;

3386 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3389 
	`CRYP_SëTDESCBCMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

3392 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

3395 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

3398  
HAL_OK
;

3400 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

3402 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

3404 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

3405 
öpuèddr
+=4;

3406 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

3408 
h¸yp
->
pCrypInBuffPå
 += 8;

3409 
h¸yp
->
CrypInCou¡
 -= 8;

3410 if(
h¸yp
->
CrypInCou¡
 == 0)

3412 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

3414 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

3417 if(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

3419 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

3421 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

3422 
ouçuèddr
+=4;

3423 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

3425 
h¸yp
->
pCrypOutBuffPå
 += 8;

3426 
h¸yp
->
CrypOutCou¡
 -= 8;

3427 if(
h¸yp
->
CrypOutCou¡
 == 0)

3429 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

3431 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

3433 
	`__HAL_UNLOCK
(
h¸yp
);

3435 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

3437 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

3442  
HAL_OK
;

3443 
	}
}

3454 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESECB_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

3456 
uöt32_t
 
öpuèddr
;

3457 
uöt32_t
 
ouçuèddr
;

3459 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

3462 
	`__HAL_LOCK
(
h¸yp
);

3464 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

3465 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

3468 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3471 
	`CRYP_SëTDESECBMode
(
h¸yp
, 0);

3474 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

3477 
	`__HAL_UNLOCK
(
h¸yp
);

3480  
HAL_OK
;

3484  
HAL_ERROR
;

3486 
	}
}

3497 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESCBC_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

3499 
uöt32_t
 
öpuèddr
;

3500 
uöt32_t
 
ouçuèddr
;

3502 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

3505 
	`__HAL_LOCK
(
h¸yp
);

3507 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

3508 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

3511 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3514 
	`CRYP_SëTDESCBCMode
(
h¸yp
, 0);

3517 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

3520 
	`__HAL_UNLOCK
(
h¸yp
);

3523  
HAL_OK
;

3527  
HAL_ERROR
;

3529 
	}
}

3540 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESECB_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

3542 
uöt32_t
 
öpuèddr
;

3543 
uöt32_t
 
ouçuèddr
;

3545 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

3548 
	`__HAL_LOCK
(
h¸yp
);

3550 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

3551 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

3554 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3557 
	`CRYP_SëTDESECBMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

3560 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

3563 
	`__HAL_UNLOCK
(
h¸yp
);

3566  
HAL_OK
;

3570  
HAL_ERROR
;

3572 
	}
}

3583 
HAL_SètusTy≥Def
 
	$HAL_CRYP_TDESCBC_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

3585 
uöt32_t
 
öpuèddr
;

3586 
uöt32_t
 
ouçuèddr
;

3588 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

3591 
	`__HAL_LOCK
(
h¸yp
);

3593 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

3594 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

3597 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

3600 
	`CRYP_SëTDESCBCMode
(
h¸yp
, 
CRYP_CR_ALGODIR
);

3603 
	`CRYP_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

3606 
	`__HAL_UNLOCK
(
h¸yp
);

3609  
HAL_OK
;

3613  
HAL_ERROR
;

3615 
	}
}

3643 
__wók
 
	$HAL_CRYP_InC∂tCÆlback
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

3648 
	}
}

3656 
__wók
 
	$HAL_CRYP_OutC∂tCÆlback
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

3661 
	}
}

3669 
__wók
 
	$HAL_CRYP_Eº‹CÆlback
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

3674 
	}
}

3699 
	$HAL_CRYP_IRQH™dÀr
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

3701 
CRYP
->
CR
 & 
CRYP_CR_ALGOMODE_DIRECTION
)

3703 
CRYP_CR_ALGOMODE_TDES_ECB_ENCRYPT
:

3704 
	`HAL_CRYP_TDESECB_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3707 
CRYP_CR_ALGOMODE_TDES_ECB_DECRYPT
:

3708 
	`HAL_CRYP_TDESECB_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3711 
CRYP_CR_ALGOMODE_TDES_CBC_ENCRYPT
:

3712 
	`HAL_CRYP_TDESCBC_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3715 
CRYP_CR_ALGOMODE_TDES_CBC_DECRYPT
:

3716 
	`HAL_CRYP_TDESCBC_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3719 
CRYP_CR_ALGOMODE_DES_ECB_ENCRYPT
:

3720 
	`HAL_CRYP_DESECB_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3723 
CRYP_CR_ALGOMODE_DES_ECB_DECRYPT
:

3724 
	`HAL_CRYP_DESECB_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3727 
CRYP_CR_ALGOMODE_DES_CBC_ENCRYPT
:

3728 
	`HAL_CRYP_DESCBC_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3731 
CRYP_CR_ALGOMODE_DES_CBC_DECRYPT
:

3732 
	`HAL_CRYP_DESCBC_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3735 
CRYP_CR_ALGOMODE_AES_ECB_ENCRYPT
:

3736 
	`HAL_CRYP_AESECB_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3739 
CRYP_CR_ALGOMODE_AES_ECB_DECRYPT
:

3740 
	`HAL_CRYP_AESECB_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3743 
CRYP_CR_ALGOMODE_AES_CBC_ENCRYPT
:

3744 
	`HAL_CRYP_AESCBC_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3747 
CRYP_CR_ALGOMODE_AES_CBC_DECRYPT
:

3748 
	`HAL_CRYP_AESCBC_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3751 
CRYP_CR_ALGOMODE_AES_CTR_ENCRYPT
:

3752 
	`HAL_CRYP_AESCTR_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3755 
CRYP_CR_ALGOMODE_AES_CTR_DECRYPT
:

3756 
	`HAL_CRYP_AESCTR_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3762 
	}
}

3788 
HAL_CRYP_STATETy≥Def
 
	$HAL_CRYP_GëSèã
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

3790  
h¸yp
->
Sèã
;

3791 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cryp_ex.c

100 
	~"°m32f4xx_hÆ.h
"

111 #ifde‡
HAL_CRYP_MODULE_ENABLED


113 #i‡
deföed
(
STM32F437xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

120 
	#CRYPEx_TIMEOUT_VALUE
 1

	)

131 
CRYPEx_GCMCCM_SëInôVe˘‹
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
InôVe˘‹
);

132 
CRYPEx_GCMCCM_SëKey
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
Key
, 
uöt32_t
 
KeySize
);

133 
HAL_SètusTy≥Def
 
CRYPEx_GCMCCM_Pro˚ssD©a
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
I≈ut
, 
uöt16_t
 
IÀngth
, uöt8_à*
Ouçut
, 
uöt32_t
 
Timeout
);

134 
HAL_SètusTy≥Def
 
CRYPEx_GCMCCM_SëHódîPha£
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
* 
I≈ut
, 
uöt16_t
 
IÀngth
, 
uöt32_t
 
Timeout
);

135 
CRYPEx_GCMCCM_DMAInC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

136 
CRYPEx_GCMCCM_DMAOutC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

137 
CRYPEx_GCMCCM_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

138 
CRYPEx_GCMCCM_SëDMAC⁄fig
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
öpuèddr
, 
uöt16_t
 
Size
, uöt32_à
ouçuèddr
);

153 
	$CRYPEx_GCMCCM_DMAInC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

155 
CRYP_H™dÀTy≥Def
* 
h¸yp
 = ( CRYP_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

159 
h¸yp
->
In°™˚
->
DMACR
 &(
uöt32_t
)(~
CRYP_DMACR_DIEN
);

162 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

163 
	}
}

170 
	$CRYPEx_GCMCCM_DMAOutC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

172 
CRYP_H™dÀTy≥Def
* 
h¸yp
 = ( CRYP_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

176 
h¸yp
->
In°™˚
->
DMACR
 &(
uöt32_t
)(~
CRYP_DMACR_DOEN
);

179 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

182 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

185 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

186 
	}
}

193 
	$CRYPEx_GCMCCM_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

195 
CRYP_H™dÀTy≥Def
* 
h¸yp
 = ( CRYP_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

196 
h¸yp
->
Sèã

HAL_CRYP_STATE_READY
;

197 
	`HAL_CRYP_Eº‹CÆlback
(
h¸yp
);

198 
	}
}

208 
	$CRYPEx_GCMCCM_SëKey
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
Key
, 
uöt32_t
 
KeySize
)

210 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

212 
KeySize
)

214 
CRYP_KEYSIZE_256B
:

216 
h¸yp
->
In°™˚
->
K0LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

217 
keyaddr
+=4;

218 
h¸yp
->
In°™˚
->
K0RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

219 
keyaddr
+=4;

220 
h¸yp
->
In°™˚
->
K1LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

221 
keyaddr
+=4;

222 
h¸yp
->
In°™˚
->
K1RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

223 
keyaddr
+=4;

224 
h¸yp
->
In°™˚
->
K2LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

225 
keyaddr
+=4;

226 
h¸yp
->
In°™˚
->
K2RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

227 
keyaddr
+=4;

228 
h¸yp
->
In°™˚
->
K3LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

229 
keyaddr
+=4;

230 
h¸yp
->
In°™˚
->
K3RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

232 
CRYP_KEYSIZE_192B
:

233 
h¸yp
->
In°™˚
->
K1LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

234 
keyaddr
+=4;

235 
h¸yp
->
In°™˚
->
K1RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

236 
keyaddr
+=4;

237 
h¸yp
->
In°™˚
->
K2LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

238 
keyaddr
+=4;

239 
h¸yp
->
In°™˚
->
K2RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

240 
keyaddr
+=4;

241 
h¸yp
->
In°™˚
->
K3LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

242 
keyaddr
+=4;

243 
h¸yp
->
In°™˚
->
K3RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

245 
CRYP_KEYSIZE_128B
:

246 
h¸yp
->
In°™˚
->
K2LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

247 
keyaddr
+=4;

248 
h¸yp
->
In°™˚
->
K2RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

249 
keyaddr
+=4;

250 
h¸yp
->
In°™˚
->
K3LR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

251 
keyaddr
+=4;

252 
h¸yp
->
In°™˚
->
K3RR
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

257 
	}
}

266 
	$CRYPEx_GCMCCM_SëInôVe˘‹
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
InôVe˘‹
)

268 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹
;

270 
h¸yp
->
In°™˚
->
IV0LR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

271 
ivaddr
+=4;

272 
h¸yp
->
In°™˚
->
IV0RR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

273 
ivaddr
+=4;

274 
h¸yp
->
In°™˚
->
IV1LR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

275 
ivaddr
+=4;

276 
h¸yp
->
In°™˚
->
IV1RR
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

277 
	}
}

289 
HAL_SètusTy≥Def
 
	$CRYPEx_GCMCCM_Pro˚ssD©a
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
I≈ut
, 
uöt16_t
 
IÀngth
, uöt8_à*
Ouçut
, 
uöt32_t
 
Timeout
)

291 
uöt32_t
 
tick°¨t
 = 0;

292 
uöt32_t
 
i
 = 0;

293 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

294 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

296 
i
=0; (ò< 
IÀngth
); i+=16)

299 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

300 
öpuèddr
+=4;

301 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

302 
öpuèddr
+=4;

303 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

304 
öpuèddr
+=4;

305 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

306 
öpuèddr
+=4;

309 
tick°¨t
 = 
	`HAL_GëTick
();

311 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_OFNE
))

314 if(
Timeout
 !
HAL_MAX_DELAY
)

316 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

319 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

322 
	`__HAL_UNLOCK
(
h¸yp
);

324  
HAL_TIMEOUT
;

329 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

330 
ouçuèddr
+=4;

331 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

332 
ouçuèddr
+=4;

333 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

334 
ouçuèddr
+=4;

335 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

336 
ouçuèddr
+=4;

339  
HAL_OK
;

340 
	}
}

351 
HAL_SètusTy≥Def
 
	$CRYPEx_GCMCCM_SëHódîPha£
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
* 
I≈ut
, 
uöt16_t
 
IÀngth
, 
uöt32_t
 
Timeout
)

353 
uöt32_t
 
tick°¨t
 = 0;

354 
uöt32_t
 
lo›cou¡î
 = 0;

355 
uöt32_t
 
hódîaddr
 = (uöt32_t)
I≈ut
;

358 if(
h¸yp
->
Inô
.
HódîSize
 != 0)

361 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_HEADER
);

363 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

365 
lo›cou¡î
 = 0; (lo›cou¡î < 
h¸yp
->
Inô
.
HódîSize
);Üoopcounter+=16)

368 
tick°¨t
 = 
	`HAL_GëTick
();

370 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_IFEM
))

373 if(
Timeout
 !
HAL_MAX_DELAY
)

375 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

378 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

381 
	`__HAL_UNLOCK
(
h¸yp
);

383  
HAL_TIMEOUT
;

388 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

389 
hódîaddr
+=4;

390 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

391 
hódîaddr
+=4;

392 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

393 
hódîaddr
+=4;

394 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

395 
hódîaddr
+=4;

401 
tick°¨t
 = 
	`HAL_GëTick
();

403 (
h¸yp
->
In°™˚
->
SR
 & 
CRYP_FLAG_BUSY
) == CRYP_FLAG_BUSY)

406 if(
Timeout
 !
HAL_MAX_DELAY
)

408 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

411 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

414 
	`__HAL_UNLOCK
(
h¸yp
);

416  
HAL_TIMEOUT
;

422  
HAL_OK
;

423 
	}
}

434 
	$CRYPEx_GCMCCM_SëDMAC⁄fig
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
öpuèddr
, 
uöt16_t
 
Size
, uöt32_à
ouçuèddr
)

437 
h¸yp
->
hdmaö
->
X„rC∂tCÆlback
 = 
CRYPEx_GCMCCM_DMAInC∂t
;

439 
h¸yp
->
hdmaö
->
X„rEº‹CÆlback
 = 
CRYPEx_GCMCCM_DMAEº‹
;

442 
h¸yp
->
hdmaout
->
X„rC∂tCÆlback
 = 
CRYPEx_GCMCCM_DMAOutC∂t
;

444 
h¸yp
->
hdmaout
->
X„rEº‹CÆlback
 = 
CRYPEx_GCMCCM_DMAEº‹
;

447 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

450 
	`HAL_DMA_Sèπ_IT
(
h¸yp
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&h¸yp->
In°™˚
->
DR
, 
Size
/4);

453 
h¸yp
->
In°™˚
->
DMACR
 = 
CRYP_DMACR_DIEN
;

456 
	`HAL_DMA_Sèπ_IT
(
h¸yp
->
hdmaout
, (
uöt32_t
)&h¸yp->
In°™˚
->
DOUT
, 
ouçuèddr
, 
Size
/4);

459 
h¸yp
->
In°™˚
->
DMACR
 |
CRYP_DMACR_DOEN
;

460 
	}
}

503 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESCCM_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

505 
uöt32_t
 
tick°¨t
 = 0;

506 
uöt32_t
 
hódîsize
 = 
h¸yp
->
Inô
.
HódîSize
;

507 
uöt32_t
 
hódîaddr
 = (uöt32_t)
h¸yp
->
Inô
.
Hódî
;

508 
uöt32_t
 
lo›cou¡î
 = 0;

509 
uöt32_t
 
buf„ridx
 = 0;

510 
uöt8_t
 
blockb0
[16] = {0};

511 
uöt8_t
 
˘r
[16] = {0};

512 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

515 
	`__HAL_LOCK
(
h¸yp
);

518 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

521 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

524 if(
hódîsize
 != 0)

527 if(
hódîsize
 < 65280)

529 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

530 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

531 
hódîsize
 += 2;

536 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFF;

537 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFE;

538 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

539 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

540 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

541 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

542 
hódîsize
 += 6;

545 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

547 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = h¸yp->Inô.
Hódî
[
lo›cou¡î
];

550 i‡((
hódîsize
 % 16) != 0)

553 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

555 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 0;

558 
hódîsize
 = ((headersize/16) + 1) * 16;

561 
hódîaddr
 = (
uöt32_t
)
h¸yp
->
Inô
.
pS¸©ch
;

564 if(
hódîsize
 != 0)

566 
blockb0
[0] = 0x40;

570 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)(((uöt8_t)(
h¸yp
->
Inô
.
TagSize
 - (uint8_t)(2))) >> 1) & (uint8_t)0x07 ) << 3);

571 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)((uöt8_t)(15Ë- 
h¸yp
->
Inô
.
IVSize
) - (uint8_t)1) & (uint8_t)0x07);

573 
lo›cou¡î
 = 0;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
;Üoopcounter++)

575 
blockb0
[
lo›cou¡î
+1] = 
h¸yp
->
Inô
.
pInôVe˘
[loopcounter];

577  ; 
lo›cou¡î
 < 13;Üoopcounter++)

579 
blockb0
[
lo›cou¡î
+1] = 0;

582 
blockb0
[14] = (
Size
 >> 8);

583 
blockb0
[15] = (
Size
 & 0xFF);

592 
˘r
[0] = 
blockb0
[0] & 0x07;

594 
lo›cou¡î
 = 1;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
 + 1;Üoopcounter++)

596 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

599 
˘r
[15] |= 0x01;

602 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

605 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CCM_ENCRYPT
);

608 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, 
˘r
);

611 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_INIT
);

613 
b0addr
 = (
uöt32_t
)
blockb0
;

615 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

616 
b0addr
+=4;

617 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

618 
b0addr
+=4;

619 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

620 
b0addr
+=4;

621 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

624 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

627 
tick°¨t
 = 
	`HAL_GëTick
();

629 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

632 if(
Timeout
 !
HAL_MAX_DELAY
)

634 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

637 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

640 
	`__HAL_UNLOCK
(
h¸yp
);

642  
HAL_TIMEOUT
;

647 if(
hódîsize
 != 0)

650 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_HEADER
);

653 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

655 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

658 
tick°¨t
 = 
	`HAL_GëTick
();

660 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_IFEM
))

664 if(
Timeout
 !
HAL_MAX_DELAY
)

666 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

669 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

672 
	`__HAL_UNLOCK
(
h¸yp
);

674  
HAL_TIMEOUT
;

680 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

681 
hódîaddr
+=4;

682 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

683 
hódîaddr
+=4;

684 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

685 
hódîaddr
+=4;

686 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

687 
hódîaddr
+=4;

691 
tick°¨t
 = 
	`HAL_GëTick
();

693 (
h¸yp
->
In°™˚
->
SR
 & 
CRYP_FLAG_BUSY
) == CRYP_FLAG_BUSY)

696 if(
Timeout
 !
HAL_MAX_DELAY
)

698 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

701 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

704 
	`__HAL_UNLOCK
(
h¸yp
);

706  
HAL_TIMEOUT
;

712 
lo›cou¡î
 = 0; (loopcounter < 16);Üoopcounter++)

714 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 
˘r
[loopcounter];

717 
h¸yp
->
Inô
.
pS¸©ch
[15] &= 0xfe;

720 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

723 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

726 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

729 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

733 if(
	`CRYPEx_GCMCCM_Pro˚ssD©a
(
h¸yp
,
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

735  
HAL_TIMEOUT
;

739 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

742 
	`__HAL_UNLOCK
(
h¸yp
);

745  
HAL_OK
;

746 
	}
}

759 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESGCM_En¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
, 
uöt32_t
 
Timeout
)

761 
uöt32_t
 
tick°¨t
 = 0;

764 
	`__HAL_LOCK
(
h¸yp
);

767 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

770 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

773 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

776 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_GCM_ENCRYPT
);

779 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
);

782 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

785 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

788 
tick°¨t
 = 
	`HAL_GëTick
();

790 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

793 if(
Timeout
 !
HAL_MAX_DELAY
)

795 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

798 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

801 
	`__HAL_UNLOCK
(
h¸yp
);

803  
HAL_TIMEOUT
;

809 if(
	`CRYPEx_GCMCCM_SëHódîPha£
(
h¸yp
, h¸yp->
Inô
.
Hódî
, h¸yp->Inô.
HódîSize
, 
Timeout
Ë!
HAL_OK
)

811  
HAL_TIMEOUT
;

815 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

818 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

821 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

824 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

827 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

831 if(
	`CRYPEx_GCMCCM_Pro˚ssD©a
(
h¸yp
, 
pPœöD©a
, 
Size
, 
pCyphîD©a
, 
Timeout
Ë!
HAL_OK
)

833  
HAL_TIMEOUT
;

837 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

840 
	`__HAL_UNLOCK
(
h¸yp
);

843  
HAL_OK
;

844 
	}
}

857 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESGCM_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
)

859 
uöt32_t
 
tick°¨t
 = 0;

862 
	`__HAL_LOCK
(
h¸yp
);

865 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

868 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

871 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

874 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_GCM_DECRYPT
);

877 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
);

880 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

883 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

886 
tick°¨t
 = 
	`HAL_GëTick
();

888 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

891 if(
Timeout
 !
HAL_MAX_DELAY
)

893 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

896 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

899 
	`__HAL_UNLOCK
(
h¸yp
);

901  
HAL_TIMEOUT
;

907 if(
	`CRYPEx_GCMCCM_SëHódîPha£
(
h¸yp
, h¸yp->
Inô
.
Hódî
, h¸yp->Inô.
HódîSize
, 
Timeout
Ë!
HAL_OK
)

909  
HAL_TIMEOUT
;

912 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

915 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

918 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

921 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

925 if(
	`CRYPEx_GCMCCM_Pro˚ssD©a
(
h¸yp
, 
pCyphîD©a
, 
Size
, 
pPœöD©a
, 
Timeout
Ë!
HAL_OK
)

927  
HAL_TIMEOUT
;

931 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

934 
	`__HAL_UNLOCK
(
h¸yp
);

937  
HAL_OK
;

938 
	}
}

949 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESGCM_Föish
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt32_t
 
Size
, 
uöt8_t
 *
AuthTag
, uöt32_à
Timeout
)

951 
uöt32_t
 
tick°¨t
 = 0;

952 
uöt64_t
 
hódîÀngth
 = 
h¸yp
->
Inô
.
HódîSize
 * 8;

953 
uöt64_t
 
öpuéígth
 = 
Size
 * 8;

954 
uöt32_t
 
ègaddr
 = (uöt32_t)
AuthTag
;

957 
	`__HAL_LOCK
(
h¸yp
);

960 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

963 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
)

966 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_FINAL
;

969 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

972 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_FINAL
);

975 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

979 if(
h¸yp
->
Inô
.
D©aTy≥
 =
CRYP_DATATYPE_1B
)

981 
h¸yp
->
In°™˚
->
DR
 = 
	`__RBIT
(
hódîÀngth
 >> 32);

982 
h¸yp
->
In°™˚
->
DR
 = 
	`__RBIT
(
hódîÀngth
);

983 
h¸yp
->
In°™˚
->
DR
 = 
	`__RBIT
(
öpuéígth
 >> 32);

984 
h¸yp
->
In°™˚
->
DR
 = 
	`__RBIT
(
öpuéígth
);

986 if(
h¸yp
->
Inô
.
D©aTy≥
 =
CRYP_DATATYPE_8B
)

988 
h¸yp
->
In°™˚
->
DR
 = 
	`__REV
(
hódîÀngth
 >> 32);

989 
h¸yp
->
In°™˚
->
DR
 = 
	`__REV
(
hódîÀngth
);

990 
h¸yp
->
In°™˚
->
DR
 = 
	`__REV
(
öpuéígth
 >> 32);

991 
h¸yp
->
In°™˚
->
DR
 = 
	`__REV
(
öpuéígth
);

993 if(
h¸yp
->
Inô
.
D©aTy≥
 =
CRYP_DATATYPE_16B
)

995 
h¸yp
->
In°™˚
->
DR
 = 
	`__ROR
((
uöt32_t
)(
hódîÀngth
 >> 32), 16);

996 
h¸yp
->
In°™˚
->
DR
 = 
	`__ROR
((
uöt32_t
)
hódîÀngth
, 16);

997 
h¸yp
->
In°™˚
->
DR
 = 
	`__ROR
((
uöt32_t
)(
öpuéígth
 >> 32), 16);

998 
h¸yp
->
In°™˚
->
DR
 = 
	`__ROR
((
uöt32_t
)
öpuéígth
, 16);

1000 if(
h¸yp
->
Inô
.
D©aTy≥
 =
CRYP_DATATYPE_32B
)

1002 
h¸yp
->
In°™˚
->
DR
 = (
uöt32_t
)(
hódîÀngth
 >> 32);

1003 
h¸yp
->
In°™˚
->
DR
 = (
uöt32_t
)(
hódîÀngth
);

1004 
h¸yp
->
In°™˚
->
DR
 = (
uöt32_t
)(
öpuéígth
 >> 32);

1005 
h¸yp
->
In°™˚
->
DR
 = (
uöt32_t
)(
öpuéígth
);

1008 
tick°¨t
 = 
	`HAL_GëTick
();

1010 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_OFNE
))

1013 if(
Timeout
 !
HAL_MAX_DELAY
)

1015 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1018 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1021 
	`__HAL_UNLOCK
(
h¸yp
);

1023  
HAL_TIMEOUT
;

1029 *(
uöt32_t
*)(
ègaddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1030 
ègaddr
+=4;

1031 *(
uöt32_t
*)(
ègaddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1032 
ègaddr
+=4;

1033 *(
uöt32_t
*)(
ègaddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1034 
ègaddr
+=4;

1035 *(
uöt32_t
*)(
ègaddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1039 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1042 
	`__HAL_UNLOCK
(
h¸yp
);

1045  
HAL_OK
;

1046 
	}
}

1057 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESCCM_Föish
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
AuthTag
, 
uöt32_t
 
Timeout
)

1059 
uöt32_t
 
tick°¨t
 = 0;

1060 
uöt32_t
 
ègaddr
 = (uöt32_t)
AuthTag
;

1061 
uöt32_t
 
˘øddr
 = (uöt32_t)
h¸yp
->
Inô
.
pS¸©ch
;

1062 
uöt32_t
 
ãm±ag
[4] = {0};

1063 
uöt32_t
 
lo›cou¡î
;

1066 
	`__HAL_LOCK
(
h¸yp
);

1069 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1072 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
)

1075 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_FINAL
;

1078 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

1081 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_FINAL
);

1084 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1087 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)
˘øddr
;

1088 
˘øddr
+=4;

1089 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)
˘øddr
;

1090 
˘øddr
+=4;

1091 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)
˘øddr
;

1092 
˘øddr
+=4;

1093 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)
˘øddr
;

1096 
tick°¨t
 = 
	`HAL_GëTick
();

1098 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_OFNE
))

1101 if(
Timeout
 !
HAL_MAX_DELAY
)

1103 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1106 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1109 
	`__HAL_UNLOCK
(
h¸yp
);

1111  
HAL_TIMEOUT
;

1117 
ãm±ag
[0] = 
h¸yp
->
In°™˚
->
DOUT
;

1118 
ãm±ag
[1] = 
h¸yp
->
In°™˚
->
DOUT
;

1119 
ãm±ag
[2] = 
h¸yp
->
In°™˚
->
DOUT
;

1120 
ãm±ag
[3] = 
h¸yp
->
In°™˚
->
DOUT
;

1124 
lo›cou¡î
 = 0;Üo›cou¡î < 
h¸yp
->
Inô
.
TagSize
 ;Üoopcounter++)

1127 *((
uöt8_t
*)
ègaddr
+
lo›cou¡î
Ë*((uöt8_t*)
ãm±ag
+loopcounter);

1131 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1134 
	`__HAL_UNLOCK
(
h¸yp
);

1137  
HAL_OK
;

1138 
	}
}

1151 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESCCM_De¸y±
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
, 
uöt32_t
 
Timeout
)

1153 
uöt32_t
 
tick°¨t
 = 0;

1154 
uöt32_t
 
hódîsize
 = 
h¸yp
->
Inô
.
HódîSize
;

1155 
uöt32_t
 
hódîaddr
 = (uöt32_t)
h¸yp
->
Inô
.
Hódî
;

1156 
uöt32_t
 
lo›cou¡î
 = 0;

1157 
uöt32_t
 
buf„ridx
 = 0;

1158 
uöt8_t
 
blockb0
[16] = {0};

1159 
uöt8_t
 
˘r
[16] = {0};

1160 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

1163 
	`__HAL_LOCK
(
h¸yp
);

1166 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1169 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1172 if(
hódîsize
 != 0)

1175 if(
hódîsize
 < 65280)

1177 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

1178 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

1179 
hódîsize
 += 2;

1184 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFF;

1185 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFE;

1186 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

1187 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

1188 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

1189 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

1190 
hódîsize
 += 6;

1193 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

1195 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = h¸yp->Inô.
Hódî
[
lo›cou¡î
];

1198 i‡((
hódîsize
 % 16) != 0)

1201 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

1203 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 0;

1206 
hódîsize
 = ((headersize/16) + 1) * 16;

1209 
hódîaddr
 = (
uöt32_t
)
h¸yp
->
Inô
.
pS¸©ch
;

1212 if(
hódîsize
 != 0)

1214 
blockb0
[0] = 0x40;

1218 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)(((uöt8_t)(
h¸yp
->
Inô
.
TagSize
 - (uint8_t)(2))) >> 1) & (uint8_t)0x07 ) << 3);

1219 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)((uöt8_t)(15Ë- 
h¸yp
->
Inô
.
IVSize
) - (uint8_t)1) & (uint8_t)0x07);

1221 
lo›cou¡î
 = 0;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
;Üoopcounter++)

1223 
blockb0
[
lo›cou¡î
+1] = 
h¸yp
->
Inô
.
pInôVe˘
[loopcounter];

1225  ; 
lo›cou¡î
 < 13;Üoopcounter++)

1227 
blockb0
[
lo›cou¡î
+1] = 0;

1230 
blockb0
[14] = (
Size
 >> 8);

1231 
blockb0
[15] = (
Size
 & 0xFF);

1240 
˘r
[0] = 
blockb0
[0] & 0x07;

1242 
lo›cou¡î
 = 1;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
 + 1;Üoopcounter++)

1244 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

1247 
˘r
[15] |= 0x01;

1250 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1253 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CCM_DECRYPT
);

1256 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, 
˘r
);

1259 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_INIT
);

1261 
b0addr
 = (
uöt32_t
)
blockb0
;

1263 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

1264 
b0addr
+=4;

1265 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

1266 
b0addr
+=4;

1267 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

1268 
b0addr
+=4;

1269 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

1272 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1275 
tick°¨t
 = 
	`HAL_GëTick
();

1277 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

1280 if(
Timeout
 !
HAL_MAX_DELAY
)

1282 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1285 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1288 
	`__HAL_UNLOCK
(
h¸yp
);

1290  
HAL_TIMEOUT
;

1295 if(
hódîsize
 != 0)

1298 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_HEADER
);

1301 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1303 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

1306 
tick°¨t
 = 
	`HAL_GëTick
();

1308 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_IFEM
))

1311 if(
Timeout
 !
HAL_MAX_DELAY
)

1313 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1316 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1319 
	`__HAL_UNLOCK
(
h¸yp
);

1321  
HAL_TIMEOUT
;

1326 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

1327 
hódîaddr
+=4;

1328 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

1329 
hódîaddr
+=4;

1330 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

1331 
hódîaddr
+=4;

1332 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

1333 
hódîaddr
+=4;

1337 
tick°¨t
 = 
	`HAL_GëTick
();

1339 (
h¸yp
->
In°™˚
->
SR
 & 
CRYP_FLAG_BUSY
) == CRYP_FLAG_BUSY)

1342 if(
Timeout
 !
HAL_MAX_DELAY
)

1344 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1347 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1350 
	`__HAL_UNLOCK
(
h¸yp
);

1352  
HAL_TIMEOUT
;

1358 
lo›cou¡î
 = 0; (loopcounter < 16);Üoopcounter++)

1360 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 
˘r
[loopcounter];

1363 
h¸yp
->
Inô
.
pS¸©ch
[15] &= 0xfe;

1365 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

1368 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1371 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1374 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1378 if(
	`CRYPEx_GCMCCM_Pro˚ssD©a
(
h¸yp
, 
pCyphîD©a
, 
Size
, 
pPœöD©a
, 
Timeout
Ë!
HAL_OK
)

1380  
HAL_TIMEOUT
;

1384 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1387 
	`__HAL_UNLOCK
(
h¸yp
);

1390  
HAL_OK
;

1391 
	}
}

1402 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESGCM_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

1404 
uöt32_t
 
tick°¨t
 = 0;

1405 
uöt32_t
 
öpuèddr
;

1406 
uöt32_t
 
ouçuèddr
;

1408 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1411 
	`__HAL_LOCK
(
h¸yp
);

1414 
h¸yp
->
CrypInCou¡
 = 
Size
;

1415 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

1416 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

1417 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1420 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1423 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1426 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1429 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_GCM_ENCRYPT
);

1432 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
);

1435 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1438 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1441 
tick°¨t
 = 
	`HAL_GëTick
();

1443 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

1447 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

1450 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1453 
	`__HAL_UNLOCK
(
h¸yp
);

1455  
HAL_TIMEOUT
;

1461 if(
	`CRYPEx_GCMCCM_SëHódîPha£
(
h¸yp
, h¸yp->
Inô
.
Hódî
, h¸yp->Inô.
HódîSize
, 1Ë!
HAL_OK
)

1463  
HAL_TIMEOUT
;

1466 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

1469 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

1472 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1475 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1478 if(
Size
 != 0)

1481 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1483 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1488 
	`__HAL_UNLOCK
(
h¸yp
);

1490 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1493  
HAL_OK
;

1495 i‡(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1497 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1499 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1500 
öpuèddr
+=4;

1501 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1502 
öpuèddr
+=4;

1503 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1504 
öpuèddr
+=4;

1505 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1506 
h¸yp
->
pCrypInBuffPå
 += 16;

1507 
h¸yp
->
CrypInCou¡
 -= 16;

1508 if(
h¸yp
->
CrypInCou¡
 == 0)

1510 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1512 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1515 i‡(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1517 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1519 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1520 
ouçuèddr
+=4;

1521 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1522 
ouçuèddr
+=4;

1523 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1524 
ouçuèddr
+=4;

1525 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1526 
h¸yp
->
pCrypOutBuffPå
 += 16;

1527 
h¸yp
->
CrypOutCou¡
 -= 16;

1528 if(
h¸yp
->
CrypOutCou¡
 == 0)

1530 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1532 
	`__HAL_UNLOCK
(
h¸yp
);

1534 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1536 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1541  
HAL_OK
;

1542 
	}
}

1553 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESCCM_En¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

1555 
uöt32_t
 
tick°¨t
 = 0;

1556 
uöt32_t
 
öpuèddr
;

1557 
uöt32_t
 
ouçuèddr
;

1559 
uöt32_t
 
hódîsize
 = 
h¸yp
->
Inô
.
HódîSize
;

1560 
uöt32_t
 
hódîaddr
 = (uöt32_t)
h¸yp
->
Inô
.
Hódî
;

1561 
uöt32_t
 
lo›cou¡î
 = 0;

1562 
uöt32_t
 
buf„ridx
 = 0;

1563 
uöt8_t
 
blockb0
[16] = {0};

1564 
uöt8_t
 
˘r
[16] = {0};

1565 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

1567 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1570 
	`__HAL_LOCK
(
h¸yp
);

1572 
h¸yp
->
CrypInCou¡
 = 
Size
;

1573 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

1574 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

1575 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1578 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1581 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1584 if(
hódîsize
 != 0)

1587 if(
hódîsize
 < 65280)

1589 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

1590 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

1591 
hódîsize
 += 2;

1596 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFF;

1597 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFE;

1598 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

1599 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

1600 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

1601 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

1602 
hódîsize
 += 6;

1605 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

1607 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = h¸yp->Inô.
Hódî
[
lo›cou¡î
];

1610 i‡((
hódîsize
 % 16) != 0)

1613 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

1615 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 0;

1618 
hódîsize
 = ((headersize/16) + 1) * 16;

1621 
hódîaddr
 = (
uöt32_t
)
h¸yp
->
Inô
.
pS¸©ch
;

1624 if(
hódîsize
 != 0)

1626 
blockb0
[0] = 0x40;

1630 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)(((uöt8_t)(
h¸yp
->
Inô
.
TagSize
 - (uint8_t)(2))) >> 1) & (uint8_t)0x07 ) << 3);

1631 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)((uöt8_t)(15Ë- 
h¸yp
->
Inô
.
IVSize
) - (uint8_t)1) & (uint8_t)0x07);

1633 
lo›cou¡î
 = 0;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
;Üoopcounter++)

1635 
blockb0
[
lo›cou¡î
+1] = 
h¸yp
->
Inô
.
pInôVe˘
[loopcounter];

1637  ; 
lo›cou¡î
 < 13;Üoopcounter++)

1639 
blockb0
[
lo›cou¡î
+1] = 0;

1642 
blockb0
[14] = (
Size
 >> 8);

1643 
blockb0
[15] = (
Size
 & 0xFF);

1652 
˘r
[0] = 
blockb0
[0] & 0x07;

1654 
lo›cou¡î
 = 1;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
 + 1;Üoopcounter++)

1656 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

1659 
˘r
[15] |= 0x01;

1662 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1665 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CCM_ENCRYPT
);

1668 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, 
˘r
);

1671 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_INIT
);

1673 
b0addr
 = (
uöt32_t
)
blockb0
;

1675 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

1676 
b0addr
+=4;

1677 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

1678 
b0addr
+=4;

1679 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

1680 
b0addr
+=4;

1681 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

1684 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1687 
tick°¨t
 = 
	`HAL_GëTick
();

1689 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

1692 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

1695 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1698 
	`__HAL_UNLOCK
(
h¸yp
);

1700  
HAL_TIMEOUT
;

1704 if(
hódîsize
 != 0)

1707 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_HEADER
);

1710 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1712 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

1715 
tick°¨t
 = 
	`HAL_GëTick
();

1717 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_IFEM
))

1720 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

1723 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1726 
	`__HAL_UNLOCK
(
h¸yp
);

1728  
HAL_TIMEOUT
;

1732 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

1733 
hódîaddr
+=4;

1734 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

1735 
hódîaddr
+=4;

1736 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

1737 
hódîaddr
+=4;

1738 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

1739 
hódîaddr
+=4;

1743 
tick°¨t
 = 
	`HAL_GëTick
();

1745 (
h¸yp
->
In°™˚
->
SR
 & 
CRYP_FLAG_BUSY
) == CRYP_FLAG_BUSY)

1748 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

1751 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1754 
	`__HAL_UNLOCK
(
h¸yp
);

1756  
HAL_TIMEOUT
;

1761 
lo›cou¡î
 = 0; (loopcounter < 16);Üoopcounter++)

1763 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 
˘r
[loopcounter];

1766 
h¸yp
->
Inô
.
pS¸©ch
[15] &= 0xfe;

1769 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

1772 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1775 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1778 if(
Size
 != 0)

1781 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1783 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1788 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1792  
HAL_OK
;

1794 i‡(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1796 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1798 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1799 
öpuèddr
+=4;

1800 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1801 
öpuèddr
+=4;

1802 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1803 
öpuèddr
+=4;

1804 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1805 
h¸yp
->
pCrypInBuffPå
 += 16;

1806 
h¸yp
->
CrypInCou¡
 -= 16;

1807 if(
h¸yp
->
CrypInCou¡
 == 0)

1809 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1811 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1814 i‡(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1816 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1818 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1819 
ouçuèddr
+=4;

1820 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1821 
ouçuèddr
+=4;

1822 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1823 
ouçuèddr
+=4;

1824 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1825 
h¸yp
->
pCrypOutBuffPå
 += 16;

1826 
h¸yp
->
CrypOutCou¡
 -= 16;

1827 if(
h¸yp
->
CrypOutCou¡
 == 0)

1829 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1831 
	`__HAL_UNLOCK
(
h¸yp
);

1833 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1835 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1840  
HAL_OK
;

1841 
	}
}

1852 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESGCM_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

1854 
uöt32_t
 
tick°¨t
 = 0;

1855 
uöt32_t
 
öpuèddr
;

1856 
uöt32_t
 
ouçuèddr
;

1858 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

1861 
	`__HAL_LOCK
(
h¸yp
);

1864 
h¸yp
->
CrypInCou¡
 = 
Size
;

1865 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

1866 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

1867 
h¸yp
->
CrypOutCou¡
 = 
Size
;

1870 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

1873 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

1876 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

1879 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_GCM_DECRYPT
);

1882 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
);

1885 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

1888 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1891 
tick°¨t
 = 
	`HAL_GëTick
();

1893 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

1896 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

1899 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

1902 
	`__HAL_UNLOCK
(
h¸yp
);

1904  
HAL_TIMEOUT
;

1909 if(
	`CRYPEx_GCMCCM_SëHódîPha£
(
h¸yp
, h¸yp->
Inô
.
Hódî
, h¸yp->Inô.
HódîSize
, 1Ë!
HAL_OK
)

1911  
HAL_TIMEOUT
;

1914 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

1917 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

1920 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

1923 if(
Size
 != 0)

1926 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

1928 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

1933 
	`__HAL_UNLOCK
(
h¸yp
);

1935 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1939  
HAL_OK
;

1941 i‡(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

1943 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

1945 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1946 
öpuèddr
+=4;

1947 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1948 
öpuèddr
+=4;

1949 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1950 
öpuèddr
+=4;

1951 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

1952 
h¸yp
->
pCrypInBuffPå
 += 16;

1953 
h¸yp
->
CrypInCou¡
 -= 16;

1954 if(
h¸yp
->
CrypInCou¡
 == 0)

1956 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

1958 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

1961 i‡(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

1963 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

1965 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1966 
ouçuèddr
+=4;

1967 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1968 
ouçuèddr
+=4;

1969 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1970 
ouçuèddr
+=4;

1971 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

1972 
h¸yp
->
pCrypOutBuffPå
 += 16;

1973 
h¸yp
->
CrypOutCou¡
 -= 16;

1974 if(
h¸yp
->
CrypOutCou¡
 == 0)

1976 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

1978 
	`__HAL_UNLOCK
(
h¸yp
);

1980 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

1982 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

1987  
HAL_OK
;

1988 
	}
}

2000 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESCCM_De¸y±_IT
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2002 
uöt32_t
 
öpuèddr
;

2003 
uöt32_t
 
ouçuèddr
;

2004 
uöt32_t
 
tick°¨t
 = 0;

2005 
uöt32_t
 
hódîsize
 = 
h¸yp
->
Inô
.
HódîSize
;

2006 
uöt32_t
 
hódîaddr
 = (uöt32_t)
h¸yp
->
Inô
.
Hódî
;

2007 
uöt32_t
 
lo›cou¡î
 = 0;

2008 
uöt32_t
 
buf„ridx
 = 0;

2009 
uöt8_t
 
blockb0
[16] = {0};

2010 
uöt8_t
 
˘r
[16] = {0};

2011 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

2013 if(
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
)

2016 
	`__HAL_LOCK
(
h¸yp
);

2018 
h¸yp
->
CrypInCou¡
 = 
Size
;

2019 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

2020 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

2021 
h¸yp
->
CrypOutCou¡
 = 
Size
;

2024 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2027 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

2030 if(
hódîsize
 != 0)

2033 if(
hódîsize
 < 65280)

2035 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

2036 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

2037 
hódîsize
 += 2;

2042 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFF;

2043 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFE;

2044 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

2045 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

2046 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

2047 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

2048 
hódîsize
 += 6;

2051 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

2053 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = h¸yp->Inô.
Hódî
[
lo›cou¡î
];

2056 i‡((
hódîsize
 % 16) != 0)

2059 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

2061 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 0;

2064 
hódîsize
 = ((headersize/16) + 1) * 16;

2067 
hódîaddr
 = (
uöt32_t
)
h¸yp
->
Inô
.
pS¸©ch
;

2070 if(
hódîsize
 != 0)

2072 
blockb0
[0] = 0x40;

2076 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)(((uöt8_t)(
h¸yp
->
Inô
.
TagSize
 - (uint8_t)(2))) >> 1) & (uint8_t)0x07 ) << 3);

2077 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)((uöt8_t)(15Ë- 
h¸yp
->
Inô
.
IVSize
) - (uint8_t)1) & (uint8_t)0x07);

2079 
lo›cou¡î
 = 0;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
;Üoopcounter++)

2081 
blockb0
[
lo›cou¡î
+1] = 
h¸yp
->
Inô
.
pInôVe˘
[loopcounter];

2083  ; 
lo›cou¡î
 < 13;Üoopcounter++)

2085 
blockb0
[
lo›cou¡î
+1] = 0;

2088 
blockb0
[14] = (
Size
 >> 8);

2089 
blockb0
[15] = (
Size
 & 0xFF);

2098 
˘r
[0] = 
blockb0
[0] & 0x07;

2100 
lo›cou¡î
 = 1;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
 + 1;Üoopcounter++)

2102 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

2105 
˘r
[15] |= 0x01;

2108 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

2111 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CCM_DECRYPT
);

2114 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, 
˘r
);

2117 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_INIT
);

2119 
b0addr
 = (
uöt32_t
)
blockb0
;

2121 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2122 
b0addr
+=4;

2123 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2124 
b0addr
+=4;

2125 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2126 
b0addr
+=4;

2127 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2130 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2133 
tick°¨t
 = 
	`HAL_GëTick
();

2135 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

2138 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2141 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2144 
	`__HAL_UNLOCK
(
h¸yp
);

2146  
HAL_TIMEOUT
;

2150 if(
hódîsize
 != 0)

2153 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_HEADER
);

2156 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2158 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

2161 
tick°¨t
 = 
	`HAL_GëTick
();

2163 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_IFEM
))

2166 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2169 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2172 
	`__HAL_UNLOCK
(
h¸yp
);

2174  
HAL_TIMEOUT
;

2178 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2179 
hódîaddr
+=4;

2180 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2181 
hódîaddr
+=4;

2182 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2183 
hódîaddr
+=4;

2184 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2185 
hódîaddr
+=4;

2189 
tick°¨t
 = 
	`HAL_GëTick
();

2191 (
h¸yp
->
In°™˚
->
SR
 & 
CRYP_FLAG_BUSY
) == CRYP_FLAG_BUSY)

2194 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2197 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2200 
	`__HAL_UNLOCK
(
h¸yp
);

2202  
HAL_TIMEOUT
;

2207 
lo›cou¡î
 = 0; (loopcounter < 16);Üoopcounter++)

2209 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 
˘r
[loopcounter];

2212 
h¸yp
->
Inô
.
pS¸©ch
[15] &= 0xfe;

2214 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

2217 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2220 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

2224 
	`__HAL_CRYP_ENABLE_IT
(
h¸yp
, 
CRYP_IT_INI
 | 
CRYP_IT_OUTI
);

2227 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2230  
HAL_OK
;

2232 i‡(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_INI
))

2234 
öpuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypInBuffPå
;

2236 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2237 
öpuèddr
+=4;

2238 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2239 
öpuèddr
+=4;

2240 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2241 
öpuèddr
+=4;

2242 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
öpuèddr
);

2243 
h¸yp
->
pCrypInBuffPå
 += 16;

2244 
h¸yp
->
CrypInCou¡
 -= 16;

2245 if(
h¸yp
->
CrypInCou¡
 == 0)

2247 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_INI
);

2249 
	`HAL_CRYP_InC∂tCÆlback
(
h¸yp
);

2252 i‡(
	`__HAL_CRYP_GET_IT
(
h¸yp
, 
CRYP_IT_OUTI
))

2254 
ouçuèddr
 = (
uöt32_t
)
h¸yp
->
pCrypOutBuffPå
;

2256 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2257 
ouçuèddr
+=4;

2258 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2259 
ouçuèddr
+=4;

2260 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2261 
ouçuèddr
+=4;

2262 *(
uöt32_t
*)(
ouçuèddr
Ë
h¸yp
->
In°™˚
->
DOUT
;

2263 
h¸yp
->
pCrypOutBuffPå
 += 16;

2264 
h¸yp
->
CrypOutCou¡
 -= 16;

2265 if(
h¸yp
->
CrypOutCou¡
 == 0)

2267 
	`__HAL_CRYP_DISABLE_IT
(
h¸yp
, 
CRYP_IT_OUTI
);

2269 
	`__HAL_UNLOCK
(
h¸yp
);

2271 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_READY
;

2273 
	`HAL_CRYP_OutC∂tCÆlback
(
h¸yp
);

2278  
HAL_OK
;

2279 
	}
}

2290 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESGCM_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

2292 
uöt32_t
 
tick°¨t
 = 0;

2293 
uöt32_t
 
öpuèddr
;

2294 
uöt32_t
 
ouçuèddr
;

2296 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2299 
	`__HAL_LOCK
(
h¸yp
);

2301 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

2302 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2305 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2308 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

2311 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

2314 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_GCM_ENCRYPT
);

2317 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
);

2320 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2323 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2326 
tick°¨t
 = 
	`HAL_GëTick
();

2328 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

2331 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2334 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2337 
	`__HAL_UNLOCK
(
h¸yp
);

2339  
HAL_TIMEOUT
;

2343 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2346 if(
	`CRYPEx_GCMCCM_SëHódîPha£
(
h¸yp
, h¸yp->
Inô
.
Hódî
, h¸yp->Inô.
HódîSize
, 1Ë!
HAL_OK
)

2348  
HAL_TIMEOUT
;

2351 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

2354 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

2357 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2360 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

2364 
	`CRYPEx_GCMCCM_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2367 
	`__HAL_UNLOCK
(
h¸yp
);

2370  
HAL_OK
;

2374  
HAL_ERROR
;

2376 
	}
}

2387 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESCCM_En¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pPœöD©a
, 
uöt16_t
 
Size
, uöt8_à*
pCyphîD©a
)

2389 
uöt32_t
 
tick°¨t
 = 0;

2390 
uöt32_t
 
öpuèddr
;

2391 
uöt32_t
 
ouçuèddr
;

2392 
uöt32_t
 
hódîsize
;

2393 
uöt32_t
 
hódîaddr
;

2394 
uöt32_t
 
lo›cou¡î
 = 0;

2395 
uöt32_t
 
buf„ridx
 = 0;

2396 
uöt8_t
 
blockb0
[16] = {0};

2397 
uöt8_t
 
˘r
[16] = {0};

2398 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

2400 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2403 
	`__HAL_LOCK
(
h¸yp
);

2405 
öpuèddr
 = (
uöt32_t
)
pPœöD©a
;

2406 
ouçuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2408 
hódîsize
 = 
h¸yp
->
Inô
.
HódîSize
;

2409 
hódîaddr
 = (
uöt32_t
)
h¸yp
->
Inô
.
Hódî
;

2411 
h¸yp
->
CrypInCou¡
 = 
Size
;

2412 
h¸yp
->
pCrypInBuffPå
 = 
pPœöD©a
;

2413 
h¸yp
->
pCrypOutBuffPå
 = 
pCyphîD©a
;

2414 
h¸yp
->
CrypOutCou¡
 = 
Size
;

2417 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2420 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

2423 if(
hódîsize
 != 0)

2426 if(
hódîsize
 < 65280)

2428 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

2429 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

2430 
hódîsize
 += 2;

2435 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFF;

2436 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFE;

2437 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

2438 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

2439 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

2440 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

2441 
hódîsize
 += 6;

2444 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

2446 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = h¸yp->Inô.
Hódî
[
lo›cou¡î
];

2449 i‡((
hódîsize
 % 16) != 0)

2452 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

2454 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 0;

2457 
hódîsize
 = ((headersize/16) + 1) * 16;

2460 
hódîaddr
 = (
uöt32_t
)
h¸yp
->
Inô
.
pS¸©ch
;

2463 if(
hódîsize
 != 0)

2465 
blockb0
[0] = 0x40;

2469 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)(((uöt8_t)(
h¸yp
->
Inô
.
TagSize
 - (uint8_t)(2))) >> 1) & (uint8_t)0x07 ) << 3);

2470 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)((uöt8_t)(15Ë- 
h¸yp
->
Inô
.
IVSize
) - (uint8_t)1) & (uint8_t)0x07);

2472 
lo›cou¡î
 = 0;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
;Üoopcounter++)

2474 
blockb0
[
lo›cou¡î
+1] = 
h¸yp
->
Inô
.
pInôVe˘
[loopcounter];

2476  ; 
lo›cou¡î
 < 13;Üoopcounter++)

2478 
blockb0
[
lo›cou¡î
+1] = 0;

2481 
blockb0
[14] = (
Size
 >> 8);

2482 
blockb0
[15] = (
Size
 & 0xFF);

2491 
˘r
[0] = 
blockb0
[0] & 0x07;

2493 
lo›cou¡î
 = 1;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
 + 1;Üoopcounter++)

2495 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

2498 
˘r
[15] |= 0x01;

2501 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

2504 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CCM_ENCRYPT
);

2507 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, 
˘r
);

2510 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_INIT
);

2512 
b0addr
 = (
uöt32_t
)
blockb0
;

2514 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2515 
b0addr
+=4;

2516 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2517 
b0addr
+=4;

2518 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2519 
b0addr
+=4;

2520 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2523 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2526 
tick°¨t
 = 
	`HAL_GëTick
();

2528 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

2531 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2534 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2537 
	`__HAL_UNLOCK
(
h¸yp
);

2539  
HAL_TIMEOUT
;

2543 if(
hódîsize
 != 0)

2546 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_HEADER
);

2549 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2551 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

2554 
tick°¨t
 = 
	`HAL_GëTick
();

2556 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_IFEM
))

2559 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2562 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2565 
	`__HAL_UNLOCK
(
h¸yp
);

2567  
HAL_TIMEOUT
;

2571 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2572 
hódîaddr
+=4;

2573 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2574 
hódîaddr
+=4;

2575 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2576 
hódîaddr
+=4;

2577 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2578 
hódîaddr
+=4;

2582 
tick°¨t
 = 
	`HAL_GëTick
();

2584 (
h¸yp
->
In°™˚
->
SR
 & 
CRYP_FLAG_BUSY
) == CRYP_FLAG_BUSY)

2587 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2590 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2593 
	`__HAL_UNLOCK
(
h¸yp
);

2595  
HAL_TIMEOUT
;

2600 
lo›cou¡î
 = 0; (loopcounter < 16);Üoopcounter++)

2602 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 
˘r
[loopcounter];

2605 
h¸yp
->
Inô
.
pS¸©ch
[15] &= 0xfe;

2608 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

2611 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2614 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

2618 
	`CRYPEx_GCMCCM_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2621 
	`__HAL_UNLOCK
(
h¸yp
);

2624  
HAL_OK
;

2628  
HAL_ERROR
;

2630 
	}
}

2641 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESGCM_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2643 
uöt32_t
 
tick°¨t
 = 0;

2644 
uöt32_t
 
öpuèddr
;

2645 
uöt32_t
 
ouçuèddr
;

2647 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2650 
	`__HAL_LOCK
(
h¸yp
);

2652 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2653 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

2656 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2659 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

2662 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

2665 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_GCM_DECRYPT
);

2668 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, h¸yp->
Inô
.
pInôVe˘
);

2671 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2674 
tick°¨t
 = 
	`HAL_GëTick
();

2676 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

2679 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2682 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2685 
	`__HAL_UNLOCK
(
h¸yp
);

2687  
HAL_TIMEOUT
;

2692 if(
	`CRYPEx_GCMCCM_SëHódîPha£
(
h¸yp
, h¸yp->
Inô
.
Hódî
, h¸yp->Inô.
HódîSize
, 1Ë!
HAL_OK
)

2694  
HAL_TIMEOUT
;

2697 
	`__HAL_CRYP_DISABLE
(
h¸yp
);

2700 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

2703 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

2707 
	`CRYPEx_GCMCCM_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2710 
	`__HAL_UNLOCK
(
h¸yp
);

2713  
HAL_OK
;

2717  
HAL_ERROR
;

2719 
	}
}

2731 
HAL_SètusTy≥Def
 
	$HAL_CRYPEx_AESCCM_De¸y±_DMA
(
CRYP_H™dÀTy≥Def
 *
h¸yp
, 
uöt8_t
 *
pCyphîD©a
, 
uöt16_t
 
Size
, uöt8_à*
pPœöD©a
)

2733 
uöt32_t
 
tick°¨t
 = 0;

2734 
uöt32_t
 
öpuèddr
;

2735 
uöt32_t
 
ouçuèddr
;

2736 
uöt32_t
 
hódîsize
;

2737 
uöt32_t
 
hódîaddr
;

2738 
uöt32_t
 
lo›cou¡î
 = 0;

2739 
uöt32_t
 
buf„ridx
 = 0;

2740 
uöt8_t
 
blockb0
[16] = {0};

2741 
uöt8_t
 
˘r
[16] = {0};

2742 
uöt32_t
 
b0addr
 = (uöt32_t)
blockb0
;

2744 if((
h¸yp
->
Sèã
 =
HAL_CRYP_STATE_READY
Ë|| (h¸yp->
Pha£
 =
HAL_CRYP_PHASE_PROCESS
))

2747 
	`__HAL_LOCK
(
h¸yp
);

2749 
öpuèddr
 = (
uöt32_t
)
pCyphîD©a
;

2750 
ouçuèddr
 = (
uöt32_t
)
pPœöD©a
;

2752 
hódîsize
 = 
h¸yp
->
Inô
.
HódîSize
;

2753 
hódîaddr
 = (
uöt32_t
)
h¸yp
->
Inô
.
Hódî
;

2755 
h¸yp
->
CrypInCou¡
 = 
Size
;

2756 
h¸yp
->
pCrypInBuffPå
 = 
pCyphîD©a
;

2757 
h¸yp
->
pCrypOutBuffPå
 = 
pPœöD©a
;

2758 
h¸yp
->
CrypOutCou¡
 = 
Size
;

2761 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_BUSY
;

2764 if(
h¸yp
->
Pha£
 =
HAL_CRYP_PHASE_READY
)

2767 if(
hódîsize
 != 0)

2770 if(
hódîsize
 < 65280)

2772 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
 >> 8) & 0xFF);

2773 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = (
uöt8_t
Ë((
hódîsize
) & 0xFF);

2774 
hódîsize
 += 2;

2779 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFF;

2780 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 0xFE;

2781 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0xff000000;

2782 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x00ff0000;

2783 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x0000ff00;

2784 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = 
hódîsize
 & 0x000000ff;

2785 
hódîsize
 += 6;

2788 
lo›cou¡î
 = 0;Üo›cou¡î < 
hódîsize
;Üoopcounter++)

2790 
h¸yp
->
Inô
.
pS¸©ch
[
buf„ridx
++] = h¸yp->Inô.
Hódî
[
lo›cou¡î
];

2793 i‡((
hódîsize
 % 16) != 0)

2796 
lo›cou¡î
 = 
hódîsize
;Üoopcounter <= ((headersize/16) + 1) * 16;Üoopcounter++)

2798 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 0;

2801 
hódîsize
 = ((headersize/16) + 1) * 16;

2804 
hódîaddr
 = (
uöt32_t
)
h¸yp
->
Inô
.
pS¸©ch
;

2807 if(
hódîsize
 != 0)

2809 
blockb0
[0] = 0x40;

2813 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)(((uöt8_t)(
h¸yp
->
Inô
.
TagSize
 - (uint8_t)(2))) >> 1) & (uint8_t)0x07 ) << 3);

2814 
blockb0
[0] |(
uöt8_t
)((uöt8_t)((uöt8_t)((uöt8_t)(15Ë- 
h¸yp
->
Inô
.
IVSize
) - (uint8_t)1) & (uint8_t)0x07);

2816 
lo›cou¡î
 = 0;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
;Üoopcounter++)

2818 
blockb0
[
lo›cou¡î
+1] = 
h¸yp
->
Inô
.
pInôVe˘
[loopcounter];

2820  ; 
lo›cou¡î
 < 13;Üoopcounter++)

2822 
blockb0
[
lo›cou¡î
+1] = 0;

2825 
blockb0
[14] = (
Size
 >> 8);

2826 
blockb0
[15] = (
Size
 & 0xFF);

2835 
˘r
[0] = 
blockb0
[0] & 0x07;

2837 
lo›cou¡î
 = 1;Üo›cou¡î < 
h¸yp
->
Inô
.
IVSize
 + 1;Üoopcounter++)

2839 
˘r
[
lo›cou¡î
] = 
blockb0
[loopcounter];

2842 
˘r
[15] |= 0x01;

2845 
	`CRYPEx_GCMCCM_SëKey
(
h¸yp
, h¸yp->
Inô
.
pKey
, h¸yp->Inô.
KeySize
);

2848 
	`__HAL_CRYP_SET_MODE
(
h¸yp
, 
CRYP_CR_ALGOMODE_AES_CCM_DECRYPT
);

2851 
	`CRYPEx_GCMCCM_SëInôVe˘‹
(
h¸yp
, 
˘r
);

2854 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_INIT
);

2856 
b0addr
 = (
uöt32_t
)
blockb0
;

2858 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2859 
b0addr
+=4;

2860 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2861 
b0addr
+=4;

2862 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2863 
b0addr
+=4;

2864 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
b0addr
);

2867 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2870 
tick°¨t
 = 
	`HAL_GëTick
();

2872 (
CRYP
->
CR
 & 
CRYP_CR_CRYPEN
) == CRYP_CR_CRYPEN)

2876 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2879 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2882 
	`__HAL_UNLOCK
(
h¸yp
);

2884  
HAL_TIMEOUT
;

2889 if(
hódîsize
 != 0)

2892 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_HEADER
);

2895 
	`__HAL_CRYP_ENABLE
(
h¸yp
);

2897 
lo›cou¡î
 = 0; (lo›cou¡î < 
hódîsize
);Üoopcounter+=16)

2900 
tick°¨t
 = 
	`HAL_GëTick
();

2902 
	`HAL_IS_BIT_CLR
(
h¸yp
->
In°™˚
->
SR
, 
CRYP_FLAG_IFEM
))

2905 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2908 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2911 
	`__HAL_UNLOCK
(
h¸yp
);

2913  
HAL_TIMEOUT
;

2917 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2918 
hódîaddr
+=4;

2919 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2920 
hódîaddr
+=4;

2921 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2922 
hódîaddr
+=4;

2923 
h¸yp
->
In°™˚
->
DR
 = *(
uöt32_t
*)(
hódîaddr
);

2924 
hódîaddr
+=4;

2928 
tick°¨t
 = 
	`HAL_GëTick
();

2930 (
h¸yp
->
In°™˚
->
SR
 & 
CRYP_FLAG_BUSY
) == CRYP_FLAG_BUSY)

2933 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CRYPEx_TIMEOUT_VALUE
)

2936 
h¸yp
->
Sèã
 = 
HAL_CRYP_STATE_TIMEOUT
;

2939 
	`__HAL_UNLOCK
(
h¸yp
);

2941  
HAL_TIMEOUT
;

2946 
lo›cou¡î
 = 0; (loopcounter < 16);Üoopcounter++)

2948 
h¸yp
->
Inô
.
pS¸©ch
[
lo›cou¡î
] = 
˘r
[loopcounter];

2951 
h¸yp
->
Inô
.
pS¸©ch
[15] &= 0xfe;

2953 
	`__HAL_CRYP_SET_PHASE
(
h¸yp
, 
CRYP_PHASE_PAYLOAD
);

2956 
	`__HAL_CRYP_FIFO_FLUSH
(
h¸yp
);

2959 
h¸yp
->
Pha£
 = 
HAL_CRYP_PHASE_PROCESS
;

2962 
	`CRYPEx_GCMCCM_SëDMAC⁄fig
(
h¸yp
, 
öpuèddr
, 
Size
, 
ouçuèddr
);

2965 
	`__HAL_UNLOCK
(
h¸yp
);

2968  
HAL_OK
;

2972  
HAL_ERROR
;

2974 
	}
}

3000 
	$HAL_CRYPEx_GCMCCM_IRQH™dÀr
(
CRYP_H™dÀTy≥Def
 *
h¸yp
)

3002 
CRYP
->
CR
 & 
CRYP_CR_ALGOMODE_DIRECTION
)

3004 
CRYP_CR_ALGOMODE_AES_GCM_ENCRYPT
:

3005 
	`HAL_CRYPEx_AESGCM_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3008 
CRYP_CR_ALGOMODE_AES_GCM_DECRYPT
:

3009 
	`HAL_CRYPEx_AESGCM_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3012 
CRYP_CR_ALGOMODE_AES_CCM_ENCRYPT
:

3013 
	`HAL_CRYPEx_AESCCM_En¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3016 
CRYP_CR_ALGOMODE_AES_CCM_DECRYPT
:

3017 
	`HAL_CRYPEx_AESCCM_De¸y±_IT
(
h¸yp
, 
NULL
, 0, NULL);

3023 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dac.c

173 
	~"°m32f4xx_hÆ.h
"

184 #ifde‡
HAL_DAC_MODULE_ENABLED


186 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

187 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

188 
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
) ||\

189 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

198 
	`DAC_DMAC⁄vC∂tCh1
(
DMA_H™dÀTy≥Def
 *
hdma
);

199 
	`DAC_DMAEº‹Ch1
(
DMA_H™dÀTy≥Def
 *
hdma
);

200 
	`DAC_DMAHÆfC⁄vC∂tCh1
(
DMA_H™dÀTy≥Def
 *
hdma
);

232 
HAL_SètusTy≥Def
 
	$HAL_DAC_Inô
(
DAC_H™dÀTy≥Def
* 
hdac
)

235 if(
hdac
 =
NULL
)

237  
HAL_ERROR
;

240 
	`as£π_∑øm
(
	`IS_DAC_ALL_INSTANCE
(
hdac
->
In°™˚
));

242 if(
hdac
->
Sèã
 =
HAL_DAC_STATE_RESET
)

245 
hdac
->
Lock
 = 
HAL_UNLOCKED
;

247 
	`HAL_DAC_M•Inô
(
hdac
);

251 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

254 
hdac
->
Eº‹Code
 = 
HAL_DAC_ERROR_NONE
;

257 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

260  
HAL_OK
;

261 
	}
}

269 
HAL_SètusTy≥Def
 
	$HAL_DAC_DeInô
(
DAC_H™dÀTy≥Def
* 
hdac
)

272 if(
hdac
 =
NULL
)

274  
HAL_ERROR
;

278 
	`as£π_∑øm
(
	`IS_DAC_ALL_INSTANCE
(
hdac
->
In°™˚
));

281 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

284 
	`HAL_DAC_M•DeInô
(
hdac
);

287 
hdac
->
Eº‹Code
 = 
HAL_DAC_ERROR_NONE
;

290 
hdac
->
Sèã
 = 
HAL_DAC_STATE_RESET
;

293 
	`__HAL_UNLOCK
(
hdac
);

296  
HAL_OK
;

297 
	}
}

305 
__wók
 
	$HAL_DAC_M•Inô
(
DAC_H™dÀTy≥Def
* 
hdac
)

310 
	}
}

318 
__wók
 
	$HAL_DAC_M•DeInô
(
DAC_H™dÀTy≥Def
* 
hdac
)

323 
	}
}

357 
HAL_SètusTy≥Def
 
	$HAL_DAC_Sèπ
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

359 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

362 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

365 
	`__HAL_LOCK
(
hdac
);

368 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

371 
	`__HAL_DAC_ENABLE
(
hdac
, 
Ch™√l
);

373 if(
Ch™√l
 =
DAC_CHANNEL_1
)

375 
tmp1
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TEN1
;

376 
tmp2
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TSEL1
;

378 if((
tmp1
 =
DAC_CR_TEN1
Ë&& (
tmp2
 =
DAC_CR_TSEL1
))

381 
hdac
->
In°™˚
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
;

386 
tmp1
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TEN2
;

387 
tmp2
 = 
hdac
->
In°™˚
->
CR
 & 
DAC_CR_TSEL2
;

389 if((
tmp1
 =
DAC_CR_TEN2
Ë&& (
tmp2
 =
DAC_CR_TSEL2
))

392 
hdac
->
In°™˚
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG2
;

397 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

400 
	`__HAL_UNLOCK
(
hdac
);

403  
HAL_OK
;

404 
	}
}

416 
HAL_SètusTy≥Def
 
	$HAL_DAC_St›
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

419 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

422 
	`__HAL_DAC_DISABLE
(
hdac
, 
Ch™√l
);

425 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

428  
HAL_OK
;

429 
	}
}

448 
HAL_SètusTy≥Def
 
	$HAL_DAC_Sèπ_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_t* 
pD©a
, uöt32_à
Lígth
, uöt32_à
Alignmít
)

450 
uöt32_t
 
tm¥eg
 = 0;

453 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

454 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
Alignmít
));

457 
	`__HAL_LOCK
(
hdac
);

460 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

462 if(
Ch™√l
 =
DAC_CHANNEL_1
)

465 
hdac
->
DMA_H™dÀ1
->
X„rC∂tCÆlback
 = 
DAC_DMAC⁄vC∂tCh1
;

468 
hdac
->
DMA_H™dÀ1
->
X„rHÆfC∂tCÆlback
 = 
DAC_DMAHÆfC⁄vC∂tCh1
;

471 
hdac
->
DMA_H™dÀ1
->
X„rEº‹CÆlback
 = 
DAC_DMAEº‹Ch1
;

474 
hdac
->
In°™˚
->
CR
 |
DAC_CR_DMAEN1
;

477 
Alignmít
)

479 
DAC_ALIGN_12B_R
:

481 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12R1
;

483 
DAC_ALIGN_12B_L
:

485 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12L1
;

487 
DAC_ALIGN_8B_R
:

489 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR8R1
;

498 
hdac
->
DMA_H™dÀ2
->
X„rC∂tCÆlback
 = 
DAC_DMAC⁄vC∂tCh2
;

501 
hdac
->
DMA_H™dÀ2
->
X„rHÆfC∂tCÆlback
 = 
DAC_DMAHÆfC⁄vC∂tCh2
;

504 
hdac
->
DMA_H™dÀ2
->
X„rEº‹CÆlback
 = 
DAC_DMAEº‹Ch2
;

507 
hdac
->
In°™˚
->
CR
 |
DAC_CR_DMAEN2
;

510 
Alignmít
)

512 
DAC_ALIGN_12B_R
:

514 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12R2
;

516 
DAC_ALIGN_12B_L
:

518 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR12L2
;

520 
DAC_ALIGN_8B_R
:

522 
tm¥eg
 = (
uöt32_t
)&
hdac
->
In°™˚
->
DHR8R2
;

530 if(
Ch™√l
 =
DAC_CHANNEL_1
)

533 
	`__HAL_DAC_ENABLE_IT
(
hdac
, 
DAC_IT_DMAUDR1
);

536 
	`HAL_DMA_Sèπ_IT
(
hdac
->
DMA_H™dÀ1
, (
uöt32_t
)
pD©a
, 
tm¥eg
, 
Lígth
);

541 
	`__HAL_DAC_ENABLE_IT
(
hdac
, 
DAC_IT_DMAUDR2
);

544 
	`HAL_DMA_Sèπ_IT
(
hdac
->
DMA_H™dÀ2
, (
uöt32_t
)
pD©a
, 
tm¥eg
, 
Lígth
);

548 
	`__HAL_DAC_ENABLE
(
hdac
, 
Ch™√l
);

551 
	`__HAL_UNLOCK
(
hdac
);

554  
HAL_OK
;

555 
	}
}

567 
HAL_SètusTy≥Def
 
	$HAL_DAC_St›_DMA
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

569 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

572 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

575 
hdac
->
In°™˚
->
CR
 &~(
DAC_CR_DMAEN1
 << 
Ch™√l
);

578 
	`__HAL_DAC_DISABLE
(
hdac
, 
Ch™√l
);

582 if(
Ch™√l
 =
DAC_CHANNEL_1
)

584 
°©us
 = 
	`HAL_DMA_Ab‹t
(
hdac
->
DMA_H™dÀ1
);

588 
°©us
 = 
	`HAL_DMA_Ab‹t
(
hdac
->
DMA_H™dÀ2
);

592 if(
°©us
 !
HAL_OK
)

595 
hdac
->
Sèã
 = 
HAL_DAC_STATE_ERROR
;

600 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

604  
°©us
;

605 
	}
}

617 
uöt32_t
 
	$HAL_DAC_GëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
)

620 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

623 if(
Ch™√l
 =
DAC_CHANNEL_1
)

625  
hdac
->
In°™˚
->
DOR1
;

629  
hdac
->
In°™˚
->
DOR2
;

631 
	}
}

639 
	$HAL_DAC_IRQH™dÀr
(
DAC_H™dÀTy≥Def
* 
hdac
)

642 if(
	`__HAL_DAC_GET_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR1
))

645 
hdac
->
Sèã
 = 
HAL_DAC_STATE_ERROR
;

648 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMAUNDERRUNCH1
;

651 
	`__HAL_DAC_CLEAR_FLAG
(
hdac
,
DAC_FLAG_DMAUDR1
);

654 
hdac
->
In°™˚
->
CR
 &~
DAC_CR_DMAEN1
;

657 
	`HAL_DAC_DMAUndîrunCÆlbackCh1
(
hdac
);

660 if(
	`__HAL_DAC_GET_FLAG
(
hdac
, 
DAC_FLAG_DMAUDR2
))

663 
hdac
->
Sèã
 = 
HAL_DAC_STATE_ERROR
;

666 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMAUNDERRUNCH2
;

669 
	`__HAL_DAC_CLEAR_FLAG
(
hdac
,
DAC_FLAG_DMAUDR2
);

672 
hdac
->
In°™˚
->
CR
 &~
DAC_CR_DMAEN2
;

675 
	`HAL_DACEx_DMAUndîrunCÆlbackCh2
(
hdac
);

677 
	}
}

685 
__wók
 
	$HAL_DAC_C⁄vC∂tCÆlbackCh1
(
DAC_H™dÀTy≥Def
* 
hdac
)

690 
	}
}

698 
__wók
 
	$HAL_DAC_C⁄vHÆfC∂tCÆlbackCh1
(
DAC_H™dÀTy≥Def
* 
hdac
)

703 
	}
}

711 
__wók
 
	$HAL_DAC_Eº‹CÆlbackCh1
(
DAC_H™dÀTy≥Def
 *
hdac
)

716 
	}
}

724 
__wók
 
	$HAL_DAC_DMAUndîrunCÆlbackCh1
(
DAC_H™dÀTy≥Def
 *
hdac
)

729 
	}
}

761 
HAL_SètusTy≥Def
 
	$HAL_DAC_C⁄figCh™√l
(
DAC_H™dÀTy≥Def
* 
hdac
, 
DAC_Ch™√lC⁄fTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

763 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

766 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
sC⁄fig
->
DAC_Triggî
));

767 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
sC⁄fig
->
DAC_OuçutBuf„r
));

768 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

771 
	`__HAL_LOCK
(
hdac
);

774 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

777 
tm¥eg1
 = 
hdac
->
In°™˚
->
CR
;

779 
tm¥eg1
 &~(((
uöt32_t
)(
DAC_CR_MAMP1
 | 
DAC_CR_WAVE1
 | 
DAC_CR_TSEL1
 | 
DAC_CR_TEN1
 | 
DAC_CR_BOFF1
)Ë<< 
Ch™√l
);

783 
tm¥eg2
 = (
sC⁄fig
->
DAC_Triggî
 | sC⁄fig->
DAC_OuçutBuf„r
);

785 
tm¥eg1
 |
tm¥eg2
 << 
Ch™√l
;

787 
hdac
->
In°™˚
->
CR
 = 
tm¥eg1
;

789 
hdac
->
In°™˚
->
CR
 &~(
DAC_CR_WAVE1
 << 
Ch™√l
);

792 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

795 
	`__HAL_UNLOCK
(
hdac
);

798  
HAL_OK
;

799 
	}
}

817 
HAL_SètusTy≥Def
 
	$HAL_DAC_SëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Alignmít
, uöt32_à
D©a
)

819 
__IO
 
uöt32_t
 
tmp
 = 0;

822 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

823 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
Alignmít
));

824 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

826 
tmp
 = (
uöt32_t
)
hdac
->
In°™˚
;

827 if(
Ch™√l
 =
DAC_CHANNEL_1
)

829 
tmp
 +
	`DAC_DHR12R1_ALIGNMENT
(
Alignmít
);

833 
tmp
 +
	`DAC_DHR12R2_ALIGNMENT
(
Alignmít
);

837 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

840  
HAL_OK
;

841 
	}
}

869 
HAL_DAC_SèãTy≥Def
 
	$HAL_DAC_GëSèã
(
DAC_H™dÀTy≥Def
* 
hdac
)

872  
hdac
->
Sèã
;

873 
	}
}

882 
uöt32_t
 
	$HAL_DAC_GëEº‹
(
DAC_H™dÀTy≥Def
 *
hdac
)

884  
hdac
->
Eº‹Code
;

885 
	}
}

897 
	$DAC_DMAC⁄vC∂tCh1
(
DMA_H™dÀTy≥Def
 *
hdma
)

899 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

901 
	`HAL_DAC_C⁄vC∂tCÆlbackCh1
(
hdac
);

903 
hdac
->
Sèã

HAL_DAC_STATE_READY
;

904 
	}
}

912 
	$DAC_DMAHÆfC⁄vC∂tCh1
(
DMA_H™dÀTy≥Def
 *
hdma
)

914 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

916 
	`HAL_DAC_C⁄vHÆfC∂tCÆlbackCh1
(
hdac
);

917 
	}
}

925 
	$DAC_DMAEº‹Ch1
(
DMA_H™dÀTy≥Def
 *
hdma
)

927 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

930 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMA
;

932 
	`HAL_DAC_Eº‹CÆlbackCh1
(
hdac
);

934 
hdac
->
Sèã

HAL_DAC_STATE_READY
;

935 
	}
}

941 
	gSTM32F427xx
 || 
	gSTM32F437xx
 || 
	gSTM32F429xx
 || 
	gSTM32F439xx
 ||\

942 
	gSTM32F410xx
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dac_ex.c

57 
	~"°m32f4xx_hÆ.h
"

68 #ifde‡
HAL_DAC_MODULE_ENABLED


70 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

71 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

72 
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
) ||\

73 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

110 
uöt32_t
 
	$HAL_DACEx_DuÆGëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
)

112 
uöt32_t
 
tmp
 = 0;

114 
tmp
 |
hdac
->
In°™˚
->
DOR1
;

116 
tmp
 |
hdac
->
In°™˚
->
DOR2
 << 16;

119  
tmp
;

120 
	}
}

145 
HAL_SètusTy≥Def
 
	$HAL_DACEx_TrüngÀWaveGíî©e
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Am∂ôude
)

148 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

149 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
Am∂ôude
));

152 
	`__HAL_LOCK
(
hdac
);

155 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

158 
	`MODIFY_REG
(
hdac
->
In°™˚
->
CR
, (
DAC_CR_WAVE1
 | 
DAC_CR_MAMP1
Ë<< 
Ch™√l
, (
DAC_CR_WAVE1_1
 | 
Am∂ôude
) << Channel);

161 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

164 
	`__HAL_UNLOCK
(
hdac
);

167  
HAL_OK
;

168 
	}
}

193 
HAL_SètusTy≥Def
 
	$HAL_DACEx_Noi£WaveGíî©e
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Ch™√l
, uöt32_à
Am∂ôude
)

196 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
Ch™√l
));

197 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
Am∂ôude
));

200 
	`__HAL_LOCK
(
hdac
);

203 
hdac
->
Sèã
 = 
HAL_DAC_STATE_BUSY
;

206 
	`MODIFY_REG
(
hdac
->
In°™˚
->
CR
, (
DAC_CR_WAVE1
 | 
DAC_CR_MAMP1
Ë<< 
Ch™√l
, (
DAC_CR_WAVE1_0
 | 
Am∂ôude
) << Channel);

209 
hdac
->
Sèã
 = 
HAL_DAC_STATE_READY
;

212 
	`__HAL_UNLOCK
(
hdac
);

215  
HAL_OK
;

216 
	}
}

233 
HAL_SètusTy≥Def
 
	$HAL_DACEx_DuÆSëVÆue
(
DAC_H™dÀTy≥Def
* 
hdac
, 
uöt32_t
 
Alignmít
, uöt32_à
D©a1
, uöt32_à
D©a2
)

235 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

238 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
Alignmít
));

239 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

240 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

243 i‡(
Alignmít
 =
DAC_ALIGN_8B_R
)

245 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

249 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

252 
tmp
 = (
uöt32_t
)
hdac
->
In°™˚
;

253 
tmp
 +
	`DAC_DHR12RD_ALIGNMENT
(
Alignmít
);

256 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

259  
HAL_OK
;

260 
	}
}

272 
__wók
 
	$HAL_DACEx_C⁄vC∂tCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
)

277 
	}
}

285 
__wók
 
	$HAL_DACEx_C⁄vHÆfC∂tCÆlbackCh2
(
DAC_H™dÀTy≥Def
* 
hdac
)

290 
	}
}

298 
__wók
 
	$HAL_DACEx_Eº‹CÆlbackCh2
(
DAC_H™dÀTy≥Def
 *
hdac
)

303 
	}
}

311 
__wók
 
	$HAL_DACEx_DMAUndîrunCÆlbackCh2
(
DAC_H™dÀTy≥Def
 *
hdac
)

316 
	}
}

324 
	$DAC_DMAC⁄vC∂tCh2
(
DMA_H™dÀTy≥Def
 *
hdma
)

326 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

328 
	`HAL_DACEx_C⁄vC∂tCÆlbackCh2
(
hdac
);

330 
hdac
->
Sèã

HAL_DAC_STATE_READY
;

331 
	}
}

339 
	$DAC_DMAHÆfC⁄vC∂tCh2
(
DMA_H™dÀTy≥Def
 *
hdma
)

341 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

343 
	`HAL_DACEx_C⁄vHÆfC∂tCÆlbackCh2
(
hdac
);

344 
	}
}

352 
	$DAC_DMAEº‹Ch2
(
DMA_H™dÀTy≥Def
 *
hdma
)

354 
DAC_H™dÀTy≥Def
* 
hdac
 = ( DAC_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

357 
hdac
->
Eº‹Code
 |
HAL_DAC_ERROR_DMA
;

359 
	`HAL_DACEx_Eº‹CÆlbackCh2
(
hdac
);

361 
hdac
->
Sèã

HAL_DAC_STATE_READY
;

362 
	}
}

369 
	gSTM32F427xx
 || 
	gSTM32F437xx
 || 
	gSTM32F429xx
 || 
	gSTM32F439xx
 ||\

370 
	gSTM32F410xx
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dcmi.c

94 
	~"°m32f4xx_hÆ.h
"

104 #ifde‡
HAL_DCMI_MODULE_ENABLED


106 #i‡
deföed
(
STM32F407xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) ||\

107 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

108 
	$deföed
(
STM32F479xx
)

111 
	#HAL_TIMEOUT_DCMI_STOP
 ((
uöt32_t
)1000Ë

	)

115 
	`DCMI_DMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

116 
	`DCMI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

146 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_DCMI_Inô
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

149 if(
hdcmi
 =
NULL
)

151  
HAL_ERROR
;

155 
	`as£π_∑øm
(
	`IS_DCMI_ALL_INSTANCE
(
hdcmi
->
In°™˚
));

156 
	`as£π_∑øm
(
	`IS_DCMI_PCKPOLARITY
(
hdcmi
->
Inô
.
PCKPﬁ¨ôy
));

157 
	`as£π_∑øm
(
	`IS_DCMI_VSPOLARITY
(
hdcmi
->
Inô
.
VSPﬁ¨ôy
));

158 
	`as£π_∑øm
(
	`IS_DCMI_HSPOLARITY
(
hdcmi
->
Inô
.
HSPﬁ¨ôy
));

159 
	`as£π_∑øm
(
	`IS_DCMI_SYNCHRO
(
hdcmi
->
Inô
.
SynchroMode
));

160 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_RATE
(
hdcmi
->
Inô
.
C≠tuªR©e
));

161 
	`as£π_∑øm
(
	`IS_DCMI_EXTENDED_DATA
(
hdcmi
->
Inô
.
ExãndedD©aMode
));

162 
	`as£π_∑øm
(
	`IS_DCMI_MODE_JPEG
(
hdcmi
->
Inô
.
JPEGMode
));

164 if(
hdcmi
->
Sèã
 =
HAL_DCMI_STATE_RESET
)

167 
hdcmi
->
Lock
 = 
HAL_UNLOCKED
;

169 
	`HAL_DCMI_M•Inô
(
hdcmi
);

173 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_BUSY
;

175 
hdcmi
->
In°™˚
->
CR
 &~(
DCMI_CR_PCKPOL
 | 
DCMI_CR_HSPOL
 | 
DCMI_CR_VSPOL
 | 
DCMI_CR_EDM_0
 |

176 
DCMI_CR_EDM_1
 | 
DCMI_CR_FCRC_0
 | 
DCMI_CR_FCRC_1
 | 
DCMI_CR_JPEG
 |

177 
DCMI_CR_ESS
);

178 
hdcmi
->
In°™˚
->
CR
 |(
uöt32_t
)(hdcmi->
Inô
.
SynchroMode
 | hdcmi->Inô.
C≠tuªR©e
 | \

179 
hdcmi
->
Inô
.
VSPﬁ¨ôy
 | hdcmi->Inô.
HSPﬁ¨ôy
 | \

180 
hdcmi
->
Inô
.
PCKPﬁ¨ôy
 | hdcmi->Inô.
ExãndedD©aMode
 | \

181 
hdcmi
->
Inô
.
JPEGMode
);

183 if(
hdcmi
->
Inô
.
SynchroMode
 =
DCMI_SYNCHRO_EMBEDDED
)

185 
DCMI
->
ESCR
 = (((
uöt32_t
)
hdcmi
->
Inô
.
Syn¸oCode
.
FømeSèπCode
) |

186 ((
uöt32_t
)
hdcmi
->
Inô
.
Syn¸oCode
.
LöeSèπCode
 << 8)|

187 ((
uöt32_t
)
hdcmi
->
Inô
.
Syn¸oCode
.
LöeEndCode
 << 16) |

188 ((
uöt32_t
)
hdcmi
->
Inô
.
Syn¸oCode
.
FømeEndCode
 << 24));

193 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_LINE
);

196 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_VSYNC
);

199 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_FRAME
);

202 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_ERR
);

205 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_OVF
);

208 
	`__HAL_DCMI_ENABLE
(
hdcmi
);

211 
hdcmi
->
Eº‹Code
 = 
HAL_DCMI_ERROR_NONE
;

214 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_READY
;

216  
HAL_OK
;

217 
	}
}

227 
HAL_SètusTy≥Def
 
	$HAL_DCMI_DeInô
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

230 
	`HAL_DCMI_M•DeInô
(
hdcmi
);

233 
hdcmi
->
Eº‹Code
 = 
HAL_DCMI_ERROR_NONE
;

236 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_RESET
;

239 
	`__HAL_UNLOCK
(
hdcmi
);

241  
HAL_OK
;

242 
	}
}

250 
__wók
 
	$HAL_DCMI_M•Inô
(
DCMI_H™dÀTy≥Def
* 
hdcmi
)

255 
	}
}

263 
__wók
 
	$HAL_DCMI_M•DeInô
(
DCMI_H™dÀTy≥Def
* 
hdcmi
)

268 
	}
}

299 
HAL_SètusTy≥Def
 
	$HAL_DCMI_Sèπ_DMA
(
DCMI_H™dÀTy≥Def
* 
hdcmi
, 
uöt32_t
 
DCMI_Mode
, uöt32_à
pD©a
, uöt32_à
Lígth
)

302 
uöt32_t
 
Sec⁄dMemAddªss
 = 0;

305 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_MODE
(
DCMI_Mode
));

308 
	`__HAL_LOCK
(
hdcmi
);

311 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_BUSY
;

314 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_MODE
(
DCMI_Mode
));

317 
hdcmi
->
In°™˚
->
CR
 &~(
DCMI_CR_CM
);

318 
hdcmi
->
In°™˚
->
CR
 |(
uöt32_t
)(
DCMI_Mode
);

321 
hdcmi
->
DMA_H™dÀ
->
X„rC∂tCÆlback
 = 
DCMI_DMAC⁄vC∂t
;

324 
hdcmi
->
DMA_H™dÀ
->
X„rEº‹CÆlback
 = 
DCMI_DMAEº‹
;

326 if(
Lígth
 <= 0xFFFF)

329 
	`HAL_DMA_Sèπ_IT
(
hdcmi
->
DMA_H™dÀ
, (
uöt32_t
)&hdcmi->
In°™˚
->
DR
, (uöt32_t)
pD©a
, 
Lígth
);

334 
hdcmi
->
DMA_H™dÀ
->
X„rM1C∂tCÆlback
 = 
DCMI_DMAC⁄vC∂t
;

337 
hdcmi
->
X„rCou¡
 = 1;

338 
hdcmi
->
X„rSize
 = 
Lígth
;

339 
hdcmi
->
pBuffPå
 = 
pD©a
;

342 
hdcmi
->
X„rSize
 > 0xFFFF)

344 
hdcmi
->
X„rSize
 = (hdcmi->XferSize/2);

345 
hdcmi
->
X„rCou¡
 = hdcmi->XferCount*2;

349 
hdcmi
->
X„rCou¡
 = (hdcmi->XferCount - 2);

350 
hdcmi
->
X„rTøns„rNumbî
 = hdcmi->
X„rCou¡
;

353 
Sec⁄dMemAddªss
 = (
uöt32_t
)(
pD©a
 + (4*
hdcmi
->
X„rSize
));

356 
	`HAL_DMAEx_Mu…iBuf„rSèπ_IT
(
hdcmi
->
DMA_H™dÀ
, (
uöt32_t
)&hdcmi->
In°™˚
->
DR
, (uöt32_t)
pD©a
, 
Sec⁄dMemAddªss
, hdcmi->
X„rSize
);

360 
DCMI
->
CR
 |
DCMI_CR_CAPTURE
;

363  
HAL_OK
;

364 
	}
}

372 
HAL_SètusTy≥Def
 
	$HAL_DCMI_St›
(
DCMI_H™dÀTy≥Def
* 
hdcmi
)

374 
uöt32_t
 
tick°¨t
 = 0;

377 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_BUSY
;

379 
	`__HAL_DCMI_DISABLE
(
hdcmi
);

382 
DCMI
->
CR
 &~(
DCMI_CR_CAPTURE
);

385 
tick°¨t
 = 
	`HAL_GëTick
();

388 (
hdcmi
->
In°™˚
->
CR
 & 
DCMI_CR_CAPTURE
) != 0)

390 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HAL_TIMEOUT_DCMI_STOP
)

393 
	`__HAL_UNLOCK
(
hdcmi
);

396 
hdcmi
->
Eº‹Code
 |
HAL_DCMI_ERROR_TIMEOUT
;

399 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_TIMEOUT
;

401  
HAL_TIMEOUT
;

406 
	`HAL_DMA_Ab‹t
(
hdcmi
->
DMA_H™dÀ
);

409 
hdcmi
->
Eº‹Code
 |
HAL_DCMI_ERROR_NONE
;

412 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_READY
;

415 
	`__HAL_UNLOCK
(
hdcmi
);

418  
HAL_OK
;

419 
	}
}

427 
	$HAL_DCMI_IRQH™dÀr
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

430 if(
	`__HAL_DCMI_GET_FLAG
(
hdcmi
, 
DCMI_FLAG_ERRRI
Ë!
RESET
)

432 if(
	`__HAL_DCMI_GET_IT_SOURCE
(
hdcmi
, 
DCMI_IT_ERR
Ë!
RESET
)

435 
	`__HAL_DCMI_DISABLE_IT
(
hdcmi
, 
DCMI_IT_ERR
);

438 
	`__HAL_DCMI_CLEAR_FLAG
(
hdcmi
, 
DCMI_FLAG_ERRRI
);

441 
hdcmi
->
Eº‹Code
 |
HAL_DCMI_ERROR_SYNC
;

444 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_ERROR
;

447 
	`__HAL_UNLOCK
(
hdcmi
);

450 
	`HAL_DMA_Ab‹t
(
hdcmi
->
DMA_H™dÀ
);

453 
	`HAL_DCMI_Eº‹CÆlback
(
hdcmi
);

457 if(
	`__HAL_DCMI_GET_FLAG
(
hdcmi
, 
DCMI_FLAG_OVFRI
Ë!
RESET
)

459 if(
	`__HAL_DCMI_GET_IT_SOURCE
(
hdcmi
, 
DCMI_IT_OVF
Ë!
RESET
)

462 
	`__HAL_DCMI_DISABLE_IT
(
hdcmi
, 
DCMI_IT_OVF
);

465 
	`__HAL_DCMI_CLEAR_FLAG
(
hdcmi
, 
DCMI_FLAG_OVFRI
);

468 
hdcmi
->
Eº‹Code
 |
HAL_DCMI_ERROR_OVF
;

471 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_ERROR
;

474 
	`__HAL_UNLOCK
(
hdcmi
);

477 
	`HAL_DMA_Ab‹t
(
hdcmi
->
DMA_H™dÀ
);

480 
	`HAL_DCMI_Eº‹CÆlback
(
hdcmi
);

484 if(
	`__HAL_DCMI_GET_FLAG
(
hdcmi
, 
DCMI_FLAG_LINERI
Ë!
RESET
)

486 if(
	`__HAL_DCMI_GET_IT_SOURCE
(
hdcmi
, 
DCMI_IT_LINE
Ë!
RESET
)

489 
	`__HAL_DCMI_CLEAR_FLAG
(
hdcmi
, 
DCMI_FLAG_LINERI
);

492 
	`__HAL_UNLOCK
(
hdcmi
);

495 
	`HAL_DCMI_LöeEvítCÆlback
(
hdcmi
);

499 if(
	`__HAL_DCMI_GET_FLAG
(
hdcmi
, 
DCMI_FLAG_VSYNCRI
Ë!
RESET
)

501 if(
	`__HAL_DCMI_GET_IT_SOURCE
(
hdcmi
, 
DCMI_IT_VSYNC
Ë!
RESET
)

504 
	`__HAL_DCMI_DISABLE_IT
(
hdcmi
, 
DCMI_IT_VSYNC
);

507 
	`__HAL_DCMI_CLEAR_FLAG
(
hdcmi
, 
DCMI_FLAG_VSYNCRI
);

510 
	`__HAL_UNLOCK
(
hdcmi
);

513 
	`HAL_DCMI_VsyncEvítCÆlback
(
hdcmi
);

517 if(
	`__HAL_DCMI_GET_FLAG
(
hdcmi
, 
DCMI_FLAG_FRAMERI
Ë!
RESET
)

519 if(
	`__HAL_DCMI_GET_IT_SOURCE
(
hdcmi
, 
DCMI_IT_FRAME
Ë!
RESET
)

522 
	`__HAL_DCMI_DISABLE_IT
(
hdcmi
, 
DCMI_IT_FRAME
);

525 
	`__HAL_DCMI_CLEAR_FLAG
(
hdcmi
, 
DCMI_FLAG_FRAMERI
);

528 
	`__HAL_UNLOCK
(
hdcmi
);

531 
	`HAL_DCMI_FømeEvítCÆlback
(
hdcmi
);

534 
	}
}

542 
__wók
 
	$HAL_DCMI_Eº‹CÆlback
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

547 
	}
}

555 
__wók
 
	$HAL_DCMI_LöeEvítCÆlback
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

560 
	}
}

568 
__wók
 
	$HAL_DCMI_VsyncEvítCÆlback
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

573 
	}
}

581 
__wók
 
	$HAL_DCMI_FømeEvítCÆlback
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

586 
	}
}

617 
HAL_SètusTy≥Def
 
	$HAL_DCMI_C⁄figCROP
(
DCMI_H™dÀTy≥Def
 *
hdcmi
, 
uöt32_t
 
X0
, uöt32_à
Y0
, uöt32_à
XSize
, uöt32_à
YSize
)

620 
	`__HAL_LOCK
(
hdcmi
);

623 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_BUSY
;

626 
	`as£π_∑øm
(
	`IS_DCMI_WINDOW_COORDINATE
(
X0
));

627 
	`as£π_∑øm
(
	`IS_DCMI_WINDOW_COORDINATE
(
YSize
));

628 
	`as£π_∑øm
(
	`IS_DCMI_WINDOW_COORDINATE
(
XSize
));

629 
	`as£π_∑øm
(
	`IS_DCMI_WINDOW_HEIGHT
(
Y0
));

632 
DCMI
->
CWSIZER
 = (
XSize
 | (
YSize
 << 16));

633 
DCMI
->
CWSTRTR
 = (
X0
 | (
Y0
 << 16));

636 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_READY
;

639 
	`__HAL_UNLOCK
(
hdcmi
);

641  
HAL_OK
;

642 
	}
}

650 
HAL_SètusTy≥Def
 
	$HAL_DCMI_DißbÀCROP
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

653 
	`__HAL_LOCK
(
hdcmi
);

656 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_BUSY
;

659 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CROP
;

662 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_READY
;

665 
	`__HAL_UNLOCK
(
hdcmi
);

667  
HAL_OK
;

668 
	}
}

676 
HAL_SètusTy≥Def
 
	$HAL_DCMI_E«bÀCROP
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

679 
	`__HAL_LOCK
(
hdcmi
);

682 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_BUSY
;

685 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CROP
;

688 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_READY
;

691 
	`__HAL_UNLOCK
(
hdcmi
);

693  
HAL_OK
;

694 
	}
}

722 
HAL_DCMI_SèãTy≥Def
 
	$HAL_DCMI_GëSèã
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

724  
hdcmi
->
Sèã
;

725 
	}
}

733 
uöt32_t
 
	$HAL_DCMI_GëEº‹
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

735  
hdcmi
->
Eº‹Code
;

736 
	}
}

752 
	$DCMI_DMAC⁄vC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

754 
uöt32_t
 
tmp
 = 0;

756 
DCMI_H™dÀTy≥Def
* 
hdcmi
 = ( DCMI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

757 
hdcmi
->
Sèã

HAL_DCMI_STATE_READY
;

759 if(
hdcmi
->
X„rCou¡
 != 0)

762 
tmp
 = ((
hdcmi
->
DMA_H™dÀ
->
In°™˚
->
CR
Ë& 
DMA_SxCR_CT
);

763 if(((
hdcmi
->
X„rCou¡
 % 2Ë=0Ë&& (
tmp
 != 0))

765 
tmp
 = 
hdcmi
->
DMA_H™dÀ
->
In°™˚
->
M0AR
;

766 
	`HAL_DMAEx_Ch™geMem‹y
(
hdcmi
->
DMA_H™dÀ
, (
tmp
 + (8*hdcmi->
X„rSize
)), 
MEMORY0
);

767 
hdcmi
->
X„rCou¡
--;

770 if((
hdcmi
->
DMA_H™dÀ
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) == 0)

772 
tmp
 = 
hdcmi
->
DMA_H™dÀ
->
In°™˚
->
M1AR
;

773 
	`HAL_DMAEx_Ch™geMem‹y
(
hdcmi
->
DMA_H™dÀ
, (
tmp
 + (8*hdcmi->
X„rSize
)), 
MEMORY1
);

774 
hdcmi
->
X„rCou¡
--;

778 if((
hdcmi
->
DMA_H™dÀ
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) != 0)

780 
hdcmi
->
DMA_H™dÀ
->
In°™˚
->
M0AR
 = hdcmi->
pBuffPå
;

783 if((
hdcmi
->
DMA_H™dÀ
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) == 0)

785 
tmp
 = 
hdcmi
->
pBuffPå
;

786 
hdcmi
->
DMA_H™dÀ
->
In°™˚
->
M1AR
 = (
tmp
 + (4*hdcmi->
X„rSize
));

787 
hdcmi
->
X„rCou¡
 = hdcmi->
X„rTøns„rNumbî
;

790 if(
	`__HAL_DCMI_GET_FLAG
(
hdcmi
, 
DCMI_FLAG_FRAMERI
Ë!
RESET
)

793 
	`__HAL_UNLOCK
(
hdcmi
);

796 
	`HAL_DCMI_FømeEvítCÆlback
(
hdcmi
);

798 
	}
}

806 
	$DCMI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

808 
DCMI_H™dÀTy≥Def
* 
hdcmi
 = ( DCMI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

809 
hdcmi
->
Sèã

HAL_DCMI_STATE_READY
;

810 
	`HAL_DCMI_Eº‹CÆlback
(
hdcmi
);

811 
	}
}

821 
	gSTM32F429xx
 || 
	gSTM32F439xx
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 ||\

822 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dcmi_ex.c

58 
	~"°m32f4xx_hÆ.h
"

68 #ifde‡
HAL_DCMI_MODULE_ENABLED


70 #i‡
deföed
(
STM32F407xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
) ||\

71 
deföed
(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

105 
HAL_SètusTy≥Def
 
	$HAL_DCMI_Inô
(
DCMI_H™dÀTy≥Def
 *
hdcmi
)

108 if(
hdcmi
 =
NULL
)

110  
HAL_ERROR
;

114 
	`as£π_∑øm
(
	`IS_DCMI_ALL_INSTANCE
(
hdcmi
->
In°™˚
));

115 
	`as£π_∑øm
(
	`IS_DCMI_PCKPOLARITY
(
hdcmi
->
Inô
.
PCKPﬁ¨ôy
));

116 
	`as£π_∑øm
(
	`IS_DCMI_VSPOLARITY
(
hdcmi
->
Inô
.
VSPﬁ¨ôy
));

117 
	`as£π_∑øm
(
	`IS_DCMI_HSPOLARITY
(
hdcmi
->
Inô
.
HSPﬁ¨ôy
));

118 
	`as£π_∑øm
(
	`IS_DCMI_SYNCHRO
(
hdcmi
->
Inô
.
SynchroMode
));

119 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_RATE
(
hdcmi
->
Inô
.
C≠tuªR©e
));

120 
	`as£π_∑øm
(
	`IS_DCMI_EXTENDED_DATA
(
hdcmi
->
Inô
.
ExãndedD©aMode
));

121 
	`as£π_∑øm
(
	`IS_DCMI_MODE_JPEG
(
hdcmi
->
Inô
.
JPEGMode
));

122 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

123 
	`as£π_∑øm
(
	`IS_DCMI_BYTE_SELECT_MODE
(
hdcmi
->
Inô
.
ByãSñe˘Mode
));

124 
	`as£π_∑øm
(
	`IS_DCMI_BYTE_SELECT_START
(
hdcmi
->
Inô
.
ByãSñe˘Sèπ
));

125 
	`as£π_∑øm
(
	`IS_DCMI_LINE_SELECT_MODE
(
hdcmi
->
Inô
.
LöeSñe˘Mode
));

126 
	`as£π_∑øm
(
	`IS_DCMI_LINE_SELECT_START
(
hdcmi
->
Inô
.
LöeSñe˘Sèπ
));

128 if(
hdcmi
->
Sèã
 =
HAL_DCMI_STATE_RESET
)

131 
	`HAL_DCMI_M•Inô
(
hdcmi
);

135 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_BUSY
;

137 
hdcmi
->
In°™˚
->
CR
 &~(
DCMI_CR_PCKPOL
 | 
DCMI_CR_HSPOL
 | 
DCMI_CR_VSPOL
 | 
DCMI_CR_EDM_0
 |\

138 
DCMI_CR_EDM_1
 | 
DCMI_CR_FCRC_0
 | 
DCMI_CR_FCRC_1
 | 
DCMI_CR_JPEG
 |\

139 
DCMI_CR_ESS


140 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

141 | 
DCMI_CR_BSM_0
 | 
DCMI_CR_BSM_1
 | 
DCMI_CR_OEBS
 |\

142 
DCMI_CR_LSM
 | 
DCMI_CR_OELS


145 
hdcmi
->
In°™˚
->
CR
 |(
uöt32_t
)(hdcmi->
Inô
.
SynchroMode
 | hdcmi->Inô.
C≠tuªR©e
 |\

146 
hdcmi
->
Inô
.
VSPﬁ¨ôy
 | hdcmi->Inô.
HSPﬁ¨ôy
 |\

147 
hdcmi
->
Inô
.
PCKPﬁ¨ôy
 | hdcmi->Inô.
ExãndedD©aMode
 |\

148 
hdcmi
->
Inô
.
JPEGMode


149 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

150 | 
hdcmi
->
Inô
.
ByãSñe˘Mode
 |\

151 
hdcmi
->
Inô
.
ByãSñe˘Sèπ
 | hdcmi->Inô.
LöeSñe˘Mode
 |\

152 
hdcmi
->
Inô
.
LöeSñe˘Sèπ


155 if(
hdcmi
->
Inô
.
SynchroMode
 =
DCMI_SYNCHRO_EMBEDDED
)

157 
DCMI
->
ESCR
 = (((
uöt32_t
)
hdcmi
->
Inô
.
Syn¸oCode
.
FømeSèπCode
) |

158 ((
uöt32_t
)
hdcmi
->
Inô
.
Syn¸oCode
.
LöeSèπCode
 << 8)|

159 ((
uöt32_t
)
hdcmi
->
Inô
.
Syn¸oCode
.
LöeEndCode
 << 16) |

160 ((
uöt32_t
)
hdcmi
->
Inô
.
Syn¸oCode
.
FømeEndCode
 << 24));

165 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_LINE
);

168 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_VSYNC
);

171 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_FRAME
);

174 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_ERR
);

177 
	`__HAL_DCMI_ENABLE_IT
(
hdcmi
, 
DCMI_IT_OVF
);

180 
	`__HAL_DCMI_ENABLE
(
hdcmi
);

183 
hdcmi
->
Eº‹Code
 = 
HAL_DCMI_ERROR_NONE
;

186 
hdcmi
->
Sèã
 = 
HAL_DCMI_STATE_READY
;

188  
HAL_OK
;

189 
	}
}

204 
	gSTM32F439xx
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dma.c

117 
	~"°m32f4xx_hÆ.h
"

128 #ifde‡
HAL_DMA_MODULE_ENABLED


134 
__IO
 
uöt32_t
 
	mISR
;

135 
__IO
 
uöt32_t
 
	mRe£rved0
;

136 
__IO
 
uöt32_t
 
	mIFCR
;

137 } 
	tDMA_Ba£_Regi°îs
;

144 
	#HAL_TIMEOUT_DMA_ABORT
 ((
uöt32_t
)1000Ë

	)

153 
DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

154 
uöt32_t
 
DMA_CÆcBa£AndBôshi·
(
DMA_H™dÀTy≥Def
 *
hdma
);

190 
HAL_SètusTy≥Def
 
	$HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
)

192 
uöt32_t
 
tmp
 = 0;

195 if(
hdma
 =
NULL
)

197  
HAL_ERROR
;

201 
	`as£π_∑øm
(
	`IS_DMA_STREAM_ALL_INSTANCE
(
hdma
->
In°™˚
));

202 
	`as£π_∑øm
(
	`IS_DMA_CHANNEL
(
hdma
->
Inô
.
Ch™√l
));

203 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
hdma
->
Inô
.
Dúe˘i⁄
));

204 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
hdma
->
Inô
.
PîùhInc
));

205 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
hdma
->
Inô
.
MemInc
));

206 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
hdma
->
Inô
.
PîùhD©aAlignmít
));

207 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
hdma
->
Inô
.
MemD©aAlignmít
));

208 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
hdma
->
Inô
.
Mode
));

209 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
hdma
->
Inô
.
Pri‹ôy
));

210 
	`as£π_∑øm
(
	`IS_DMA_FIFO_MODE_STATE
(
hdma
->
Inô
.
FIFOMode
));

213 if(
hdma
->
Inô
.
FIFOMode
 !
DMA_FIFOMODE_DISABLE
)

215 
	`as£π_∑øm
(
	`IS_DMA_FIFO_THRESHOLD
(
hdma
->
Inô
.
FIFOThªshﬁd
));

216 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_BURST
(
hdma
->
Inô
.
MemBur°
));

217 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_BURST
(
hdma
->
Inô
.
PîùhBur°
));

221 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

224 
tmp
 = 
hdma
->
In°™˚
->
CR
;

227 
tmp
 &((
uöt32_t
)~(
DMA_SxCR_CHSEL
 | 
DMA_SxCR_MBURST
 | 
DMA_SxCR_PBURST
 | \

228 
DMA_SxCR_PL
 | 
DMA_SxCR_MSIZE
 | 
DMA_SxCR_PSIZE
 | \

229 
DMA_SxCR_MINC
 | 
DMA_SxCR_PINC
 | 
DMA_SxCR_CIRC
 | \

230 
DMA_SxCR_DIR
 | 
DMA_SxCR_CT
 | 
DMA_SxCR_DBM
));

233 
tmp
 |
hdma
->
Inô
.
Ch™√l
 | hdma->Inô.
Dúe˘i⁄
 |

234 
hdma
->
Inô
.
PîùhInc
 | hdma->Inô.
MemInc
 |

235 
hdma
->
Inô
.
PîùhD©aAlignmít
 | hdma->Inô.
MemD©aAlignmít
 |

236 
hdma
->
Inô
.
Mode
 | hdma->Inô.
Pri‹ôy
;

239 if(
hdma
->
Inô
.
FIFOMode
 =
DMA_FIFOMODE_ENABLE
)

242 
tmp
 |
hdma
->
Inô
.
MemBur°
 | hdma->Inô.
PîùhBur°
;

246 
hdma
->
In°™˚
->
CR
 = 
tmp
;

249 
tmp
 = 
hdma
->
In°™˚
->
FCR
;

252 
tmp
 &(
uöt32_t
)~(
DMA_SxFCR_DMDIS
 | 
DMA_SxFCR_FTH
);

255 
tmp
 |
hdma
->
Inô
.
FIFOMode
;

258 if(
hdma
->
Inô
.
FIFOMode
 =
DMA_FIFOMODE_ENABLE
)

261 
tmp
 |
hdma
->
Inô
.
FIFOThªshﬁd
;

265 
hdma
->
In°™˚
->
FCR
 = 
tmp
;

269 
	`DMA_CÆcBa£AndBôshi·
(
hdma
);

272 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

275 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

277  
HAL_OK
;

278 
	}
}

286 
HAL_SètusTy≥Def
 
	$HAL_DMA_DeInô
(
DMA_H™dÀTy≥Def
 *
hdma
)

288 
DMA_Ba£_Regi°îs
 *
ªgs
;

291 if(
hdma
 =
NULL
)

293  
HAL_ERROR
;

297 if(
hdma
->
Sèã
 =
HAL_DMA_STATE_BUSY
)

299  
HAL_ERROR
;

303 
	`__HAL_DMA_DISABLE
(
hdma
);

306 
hdma
->
In°™˚
->
CR
 = 0;

309 
hdma
->
In°™˚
->
NDTR
 = 0;

312 
hdma
->
In°™˚
->
PAR
 = 0;

315 
hdma
->
In°™˚
->
M0AR
 = 0;

318 
hdma
->
In°™˚
->
M1AR
 = 0;

321 
hdma
->
In°™˚
->
FCR
 = (
uöt32_t
)0x00000021;

324 
ªgs
 = (
DMA_Ba£_Regi°îs
 *)
	`DMA_CÆcBa£AndBôshi·
(
hdma
);

327 
ªgs
->
IFCR
 = 0x3F << 
hdma
->
SåómIndex
;

330 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

333 
hdma
->
Sèã
 = 
HAL_DMA_STATE_RESET
;

336 
	`__HAL_UNLOCK
(
hdma
);

338  
HAL_OK
;

339 
	}
}

372 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

375 
	`__HAL_LOCK
(
hdma
);

378 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

381 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

384 
	`__HAL_DMA_DISABLE
(
hdma
);

387 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

390 
	`__HAL_DMA_ENABLE
(
hdma
);

392  
HAL_OK
;

393 
	}
}

404 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

407 
	`__HAL_LOCK
(
hdma
);

410 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

413 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

416 
	`__HAL_DMA_DISABLE
(
hdma
);

419 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

422 
hdma
->
In°™˚
->
CR
 |
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
 | 
DMA_IT_DME
;

423 
hdma
->
In°™˚
->
FCR
 |
DMA_IT_FE
;

426 
	`__HAL_DMA_ENABLE
(
hdma
);

428  
HAL_OK
;

429 
	}
}

443 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
)

445 
uöt32_t
 
tick°¨t
 = 0;

448 
	`__HAL_DMA_DISABLE
(
hdma
);

451 
tick°¨t
 = 
	`HAL_GëTick
();

454 (
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_EN
) != 0)

457 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HAL_TIMEOUT_DMA_ABORT
)

460 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_TIMEOUT
;

463 
	`__HAL_UNLOCK
(
hdma
);

466 
hdma
->
Sèã
 = 
HAL_DMA_STATE_TIMEOUT
;

468  
HAL_TIMEOUT
;

472 
	`__HAL_UNLOCK
(
hdma
);

475 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

477  
HAL_OK
;

478 
	}
}

488 
HAL_SètusTy≥Def
 
	$HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
)

490 
uöt32_t
 
ãmp
, 
tmp
, 
tmp1
, 
tmp2
;

491 
uöt32_t
 
tick°¨t
 = 0;

494 
DMA_Ba£_Regi°îs
 *
ªgs
;

496 
ªgs
 = (
DMA_Ba£_Regi°îs
 *)
hdma
->
SåómBa£Addªss
;

499 if(
Com∂ëeLevñ
 =
HAL_DMA_FULL_TRANSFER
)

502 
ãmp
 = 
DMA_FLAG_TCIF0_4
 << 
hdma
->
SåómIndex
;

507 
ãmp
 = 
DMA_FLAG_HTIF0_4
 << 
hdma
->
SåómIndex
;

511 
tick°¨t
 = 
	`HAL_GëTick
();

513 (
ªgs
->
ISR
 & 
ãmp
Ë=
RESET
)

515 
tmp
 = 
ªgs
->
ISR
 & (
DMA_FLAG_TEIF0_4
 << 
hdma
->
SåómIndex
);

516 
tmp1
 = 
ªgs
->
ISR
 & (
DMA_FLAG_FEIF0_4
 << 
hdma
->
SåómIndex
);

517 
tmp2
 = 
ªgs
->
ISR
 & (
DMA_FLAG_DMEIF0_4
 << 
hdma
->
SåómIndex
);

518 if((
tmp
 !
RESET
Ë|| (
tmp1
 !RESETË|| (
tmp2
 != RESET))

520 if(
tmp
 !
RESET
)

523 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_TE
;

526 
ªgs
->
IFCR
 = 
DMA_FLAG_TEIF0_4
 << 
hdma
->
SåómIndex
;

528 if(
tmp1
 !
RESET
)

531 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_FE
;

534 
ªgs
->
IFCR
 = 
DMA_FLAG_FEIF0_4
 << 
hdma
->
SåómIndex
;

536 if(
tmp2
 !
RESET
)

539 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_DME
;

542 
ªgs
->
IFCR
 = 
DMA_FLAG_DMEIF0_4
 << 
hdma
->
SåómIndex
;

545 
hdma
->
Sèã

HAL_DMA_STATE_ERROR
;

548 
	`__HAL_UNLOCK
(
hdma
);

550  
HAL_ERROR
;

553 if(
Timeout
 !
HAL_MAX_DELAY
)

555 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

558 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_TIMEOUT
;

561 
hdma
->
Sèã
 = 
HAL_DMA_STATE_TIMEOUT
;

564 
	`__HAL_UNLOCK
(
hdma
);

566  
HAL_TIMEOUT
;

571 if(
Com∂ëeLevñ
 =
HAL_DMA_FULL_TRANSFER
)

574 
ªgs
->
IFCR
 = (
DMA_FLAG_HTIF0_4
 | 
DMA_FLAG_TCIF0_4
Ë<< 
hdma
->
SåómIndex
;

577 if(((
hdma
->
In°™˚
->
CR
Ë& (
uöt32_t
)(
DMA_SxCR_DBM
)) != 0)

580 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) == 0)

583 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_MEM0
;

586 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) != 0)

589 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_MEM1
;

596 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_MEM0
;

599 
	`__HAL_UNLOCK
(
hdma
);

604 
ªgs
->
IFCR
 = 
DMA_FLAG_HTIF0_4
 << 
hdma
->
SåómIndex
;

607 if(((
hdma
->
In°™˚
->
CR
Ë& (
uöt32_t
)(
DMA_SxCR_DBM
)) != 0)

610 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) == 0)

613 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_HALF_MEM0
;

616 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) != 0)

619 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_HALF_MEM1
;

625 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_HALF_MEM0
;

628  
HAL_OK
;

629 
	}
}

637 
	$HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
)

640 
DMA_Ba£_Regi°îs
 *
ªgs
;

642 
ªgs
 = (
DMA_Ba£_Regi°îs
 *)
hdma
->
SåómBa£Addªss
;

645 i‡((
ªgs
->
ISR
 & (
DMA_FLAG_TEIF0_4
 << 
hdma
->
SåómIndex
)Ë!
RESET
)

647 if(
	`__HAL_DMA_GET_IT_SOURCE
(
hdma
, 
DMA_IT_TE
Ë!
RESET
)

650 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_TE
);

653 
ªgs
->
IFCR
 = 
DMA_FLAG_TEIF0_4
 << 
hdma
->
SåómIndex
;

656 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_TE
;

659 
hdma
->
Sèã
 = 
HAL_DMA_STATE_ERROR
;

662 
	`__HAL_UNLOCK
(
hdma
);

664 if(
hdma
->
X„rEº‹CÆlback
 !
NULL
)

667 
hdma
->
	`X„rEº‹CÆlback
(hdma);

672 i‡((
ªgs
->
ISR
 & (
DMA_FLAG_FEIF0_4
 << 
hdma
->
SåómIndex
)Ë!
RESET
)

674 if(
	`__HAL_DMA_GET_IT_SOURCE
(
hdma
, 
DMA_IT_FE
Ë!
RESET
)

677 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_FE
);

680 
ªgs
->
IFCR
 = 
DMA_FLAG_FEIF0_4
 << 
hdma
->
SåómIndex
;

683 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_FE
;

686 
hdma
->
Sèã
 = 
HAL_DMA_STATE_ERROR
;

689 
	`__HAL_UNLOCK
(
hdma
);

691 if(
hdma
->
X„rEº‹CÆlback
 !
NULL
)

694 
hdma
->
	`X„rEº‹CÆlback
(hdma);

699 i‡((
ªgs
->
ISR
 & (
DMA_FLAG_DMEIF0_4
 << 
hdma
->
SåómIndex
)Ë!
RESET
)

701 if(
	`__HAL_DMA_GET_IT_SOURCE
(
hdma
, 
DMA_IT_DME
Ë!
RESET
)

704 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_DME
);

707 
ªgs
->
IFCR
 = 
DMA_FLAG_DMEIF0_4
 << 
hdma
->
SåómIndex
;

710 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_DME
;

713 
hdma
->
Sèã
 = 
HAL_DMA_STATE_ERROR
;

716 
	`__HAL_UNLOCK
(
hdma
);

718 if(
hdma
->
X„rEº‹CÆlback
 !
NULL
)

721 
hdma
->
	`X„rEº‹CÆlback
(hdma);

726 i‡((
ªgs
->
ISR
 & (
DMA_FLAG_HTIF0_4
 << 
hdma
->
SåómIndex
)Ë!
RESET
)

728 if(
	`__HAL_DMA_GET_IT_SOURCE
(
hdma
, 
DMA_IT_HT
Ë!
RESET
)

731 if(((
hdma
->
In°™˚
->
CR
Ë& (
uöt32_t
)(
DMA_SxCR_DBM
)) != 0)

734 
ªgs
->
IFCR
 = 
DMA_FLAG_HTIF0_4
 << 
hdma
->
SåómIndex
;

737 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) == 0)

740 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_HALF_MEM0
;

743 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) != 0)

746 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_HALF_MEM1
;

752 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

755 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

758 
ªgs
->
IFCR
 = 
DMA_FLAG_HTIF0_4
 << 
hdma
->
SåómIndex
;

761 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_HALF_MEM0
;

764 if(
hdma
->
X„rHÆfC∂tCÆlback
 !
NULL
)

767 
hdma
->
	`X„rHÆfC∂tCÆlback
(hdma);

772 i‡((
ªgs
->
ISR
 & (
DMA_FLAG_TCIF0_4
 << 
hdma
->
SåómIndex
)Ë!
RESET
)

774 if(
	`__HAL_DMA_GET_IT_SOURCE
(
hdma
, 
DMA_IT_TC
Ë!
RESET
)

776 if(((
hdma
->
In°™˚
->
CR
Ë& (
uöt32_t
)(
DMA_SxCR_DBM
)) != 0)

779 
ªgs
->
IFCR
 = 
DMA_FLAG_TCIF0_4
 << 
hdma
->
SåómIndex
;

782 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) == 0)

784 if(
hdma
->
X„rM1C∂tCÆlback
 !
NULL
)

787 
hdma
->
	`X„rM1C∂tCÆlback
(hdma);

791 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) != 0)

793 if(
hdma
->
X„rC∂tCÆlback
 !
NULL
)

796 
hdma
->
	`X„rC∂tCÆlback
(hdma);

803 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

806 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_TC
);

809 
ªgs
->
IFCR
 = 
DMA_FLAG_TCIF0_4
 << 
hdma
->
SåómIndex
;

812 
hdma
->
Eº‹Code
 |
HAL_DMA_ERROR_NONE
;

815 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY_MEM0
;

818 
	`__HAL_UNLOCK
(
hdma
);

820 if(
hdma
->
X„rC∂tCÆlback
 !
NULL
)

823 
hdma
->
	`X„rC∂tCÆlback
(hdma);

828 
	}
}

855 
HAL_DMA_SèãTy≥Def
 
	$HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
)

857  
hdma
->
Sèã
;

858 
	}
}

866 
uöt32_t
 
	$HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

868  
hdma
->
Eº‹Code
;

869 
	}
}

892 
	$DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

895 
hdma
->
In°™˚
->
CR
 &(
uöt32_t
)(~
DMA_SxCR_DBM
);

898 
hdma
->
In°™˚
->
NDTR
 = 
D©aLígth
;

901 if((
hdma
->
Inô
.
Dúe˘i⁄
Ë=
DMA_MEMORY_TO_PERIPH
)

904 
hdma
->
In°™˚
->
PAR
 = 
D°Addªss
;

907 
hdma
->
In°™˚
->
M0AR
 = 
SrcAddªss
;

913 
hdma
->
In°™˚
->
PAR
 = 
SrcAddªss
;

916 
hdma
->
In°™˚
->
M0AR
 = 
D°Addªss
;

918 
	}
}

926 
uöt32_t
 
	$DMA_CÆcBa£AndBôshi·
(
DMA_H™dÀTy≥Def
 *
hdma
)

928 
uöt32_t
 
°ªam_numbî
 = (((uöt32_t)
hdma
->
In°™˚
 & 0xFF) - 16) / 24;

931 c⁄° 
uöt8_t
 
ÊagBôshi·Off£t
[8] = {0, 6, 16, 22, 0, 6, 16, 22};

932 
hdma
->
SåómIndex
 = 
ÊagBôshi·Off£t
[
°ªam_numbî
];

934 i‡(
°ªam_numbî
 > 3)

937 
hdma
->
SåómBa£Addªss
 = (((
uöt32_t
)hdma->
In°™˚
 & (uint32_t)(~0x3FF)) + 4);

942 
hdma
->
SåómBa£Addªss
 = ((
uöt32_t
)hdma->
In°™˚
 & (uint32_t)(~0x3FF));

945  
hdma
->
SåómBa£Addªss
;

946 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dma2d.c

118 
	~"°m32f4xx_hÆ.h
"

128 #ifde‡
HAL_DMA2D_MODULE_ENABLED


130 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

137 
	#HAL_TIMEOUT_DMA2D_ABORT
 ((
uöt32_t
)1000Ë

	)

138 
	#HAL_TIMEOUT_DMA2D_SUSPEND
 ((
uöt32_t
)1000Ë

	)

150 
DMA2D_SëC⁄fig
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
pd©a
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
);

183 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_Inô
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
)

185 
uöt32_t
 
tmp
 = 0;

188 if(
hdma2d
 =
NULL
)

190  
HAL_ERROR
;

194 
	`as£π_∑øm
(
	`IS_DMA2D_ALL_INSTANCE
(
hdma2d
->
In°™˚
));

195 
	`as£π_∑øm
(
	`IS_DMA2D_MODE
(
hdma2d
->
Inô
.
Mode
));

196 
	`as£π_∑øm
(
	`IS_DMA2D_CMODE
(
hdma2d
->
Inô
.
Cﬁ‹Mode
));

197 
	`as£π_∑øm
(
	`IS_DMA2D_OFFSET
(
hdma2d
->
Inô
.
OuçutOff£t
));

199 if(
hdma2d
->
Sèã
 =
HAL_DMA2D_STATE_RESET
)

202 
hdma2d
->
Lock
 = 
HAL_UNLOCKED
;

204 
	`HAL_DMA2D_M•Inô
(
hdma2d
);

208 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_BUSY
;

212 
tmp
 = 
hdma2d
->
In°™˚
->
CR
;

215 
tmp
 &(
uöt32_t
)~
DMA2D_CR_MODE
;

218 
tmp
 |
hdma2d
->
Inô
.
Mode
;

221 
hdma2d
->
In°™˚
->
CR
 = 
tmp
;

225 
tmp
 = 
hdma2d
->
In°™˚
->
OPFCCR
;

228 
tmp
 &(
uöt32_t
)~
DMA2D_OPFCCR_CM
;

231 
tmp
 |
hdma2d
->
Inô
.
Cﬁ‹Mode
;

234 
hdma2d
->
In°™˚
->
OPFCCR
 = 
tmp
;

238 
tmp
 = 
hdma2d
->
In°™˚
->
OOR
;

241 
tmp
 &(
uöt32_t
)~
DMA2D_OOR_LO
;

244 
tmp
 |
hdma2d
->
Inô
.
OuçutOff£t
;

247 
hdma2d
->
In°™˚
->
OOR
 = 
tmp
;

250 
hdma2d
->
Eº‹Code
 = 
HAL_DMA2D_ERROR_NONE
;

253 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_READY
;

255  
HAL_OK
;

256 
	}
}

266 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_DeInô
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
)

269 if(
hdma2d
 =
NULL
)

271  
HAL_ERROR
;

275 
	`HAL_DMA2D_M•DeInô
(
hdma2d
);

278 
hdma2d
->
Eº‹Code
 = 
HAL_DMA2D_ERROR_NONE
;

281 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_RESET
;

284 
	`__HAL_UNLOCK
(
hdma2d
);

286  
HAL_OK
;

287 
	}
}

295 
__wók
 
	$HAL_DMA2D_M•Inô
(
DMA2D_H™dÀTy≥Def
* 
hdma2d
)

300 
	}
}

308 
__wók
 
	$HAL_DMA2D_M•DeInô
(
DMA2D_H™dÀTy≥Def
* 
hdma2d
)

313 
	}
}

358 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_Sèπ
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
pd©a
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
)

361 
	`__HAL_LOCK
(
hdma2d
);

364 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_BUSY
;

367 
	`as£π_∑øm
(
	`IS_DMA2D_LINE
(
Height
));

368 
	`as£π_∑øm
(
	`IS_DMA2D_PIXEL
(
Width
));

371 
	`__HAL_DMA2D_DISABLE
(
hdma2d
);

374 
	`DMA2D_SëC⁄fig
(
hdma2d
, 
pd©a
, 
D°Addªss
, 
Width
, 
Height
);

377 
	`__HAL_DMA2D_ENABLE
(
hdma2d
);

379  
HAL_OK
;

380 
	}
}

395 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_Sèπ_IT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
pd©a
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
)

398 
	`__HAL_LOCK
(
hdma2d
);

401 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_BUSY
;

404 
	`as£π_∑øm
(
	`IS_DMA2D_LINE
(
Height
));

405 
	`as£π_∑øm
(
	`IS_DMA2D_PIXEL
(
Width
));

408 
	`__HAL_DMA2D_DISABLE
(
hdma2d
);

411 
	`DMA2D_SëC⁄fig
(
hdma2d
, 
pd©a
, 
D°Addªss
, 
Width
, 
Height
);

414 
	`__HAL_DMA2D_ENABLE_IT
(
hdma2d
, 
DMA2D_IT_TC
);

417 
	`__HAL_DMA2D_ENABLE_IT
(
hdma2d
, 
DMA2D_IT_TE
);

420 
	`__HAL_DMA2D_ENABLE
(
hdma2d
);

423 
	`__HAL_DMA2D_ENABLE_IT
(
hdma2d
, 
DMA2D_IT_CE
);

425  
HAL_OK
;

426 
	}
}

439 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_BÀndögSèπ
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
SrcAddªss1
, uöt32_à
SrcAddªss2
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
)

442 
	`__HAL_LOCK
(
hdma2d
);

445 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_BUSY
;

448 
	`as£π_∑øm
(
	`IS_DMA2D_LINE
(
Height
));

449 
	`as£π_∑øm
(
	`IS_DMA2D_PIXEL
(
Width
));

452 
	`__HAL_DMA2D_DISABLE
(
hdma2d
);

455 
hdma2d
->
In°™˚
->
BGMAR
 = 
SrcAddªss2
;

458 
	`DMA2D_SëC⁄fig
(
hdma2d
, 
SrcAddªss1
, 
D°Addªss
, 
Width
, 
Height
);

461 
	`__HAL_DMA2D_ENABLE
(
hdma2d
);

463  
HAL_OK
;

464 
	}
}

477 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_BÀndögSèπ_IT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
SrcAddªss1
, uöt32_à
SrcAddªss2
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
)

480 
	`__HAL_LOCK
(
hdma2d
);

483 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_BUSY
;

486 
	`as£π_∑øm
(
	`IS_DMA2D_LINE
(
Height
));

487 
	`as£π_∑øm
(
	`IS_DMA2D_PIXEL
(
Width
));

490 
	`__HAL_DMA2D_DISABLE
(
hdma2d
);

493 
hdma2d
->
In°™˚
->
BGMAR
 = 
SrcAddªss2
;

496 
	`DMA2D_SëC⁄fig
(
hdma2d
, 
SrcAddªss1
, 
D°Addªss
, 
Width
, 
Height
);

499 
	`__HAL_DMA2D_ENABLE_IT
(
hdma2d
, 
DMA2D_IT_CE
);

502 
	`__HAL_DMA2D_ENABLE_IT
(
hdma2d
, 
DMA2D_IT_TC
);

505 
	`__HAL_DMA2D_ENABLE_IT
(
hdma2d
, 
DMA2D_IT_TE
);

508 
	`__HAL_DMA2D_ENABLE
(
hdma2d
);

510  
HAL_OK
;

511 
	}
}

519 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_Ab‹t
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
)

521 
uöt32_t
 
tick°¨t
 = 0;

524 
	`__HAL_DMA2D_DISABLE
(
hdma2d
);

527 
tick°¨t
 = 
	`HAL_GëTick
();

530 (
hdma2d
->
In°™˚
->
CR
 & 
DMA2D_CR_START
) != 0)

532 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HAL_TIMEOUT_DMA2D_ABORT
)

535 
hdma2d
->
Eº‹Code
 |
HAL_DMA2D_ERROR_TIMEOUT
;

538 
hdma2d
->
Sèã

HAL_DMA2D_STATE_TIMEOUT
;

541 
	`__HAL_UNLOCK
(
hdma2d
);

543  
HAL_TIMEOUT
;

547 
	`__HAL_UNLOCK
(
hdma2d
);

550 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_READY
;

552  
HAL_OK
;

553 
	}
}

561 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_Su•íd
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
)

563 
uöt32_t
 
tick°¨t
 = 0;

566 
hdma2d
->
In°™˚
->
CR
 |
DMA2D_CR_SUSP
;

569 
tick°¨t
 = 
	`HAL_GëTick
();

572 (
hdma2d
->
In°™˚
->
CR
 & 
DMA2D_CR_SUSP
) != DMA2D_CR_SUSP)

574 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HAL_TIMEOUT_DMA2D_SUSPEND
)

577 
hdma2d
->
Eº‹Code
 |
HAL_DMA2D_ERROR_TIMEOUT
;

580 
hdma2d
->
Sèã

HAL_DMA2D_STATE_TIMEOUT
;

582  
HAL_TIMEOUT
;

586 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_SUSPEND
;

588  
HAL_OK
;

589 
	}
}

597 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_Resume
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
)

600 
hdma2d
->
In°™˚
->
CR
 &~
DMA2D_CR_SUSP
;

603 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_BUSY
;

605  
HAL_OK
;

606 
	}
}

615 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_PﬁlF‹Tøns„r
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
Timeout
)

617 
uöt32_t
 
tmp
, 
tmp1
;

618 
uöt32_t
 
tick°¨t
 = 0;

621 if((
hdma2d
->
In°™˚
->
CR
 & 
DMA2D_CR_START
) != 0)

624 
tick°¨t
 = 
	`HAL_GëTick
();

626 
	`__HAL_DMA2D_GET_FLAG
(
hdma2d
, 
DMA2D_FLAG_TC
Ë=
RESET
)

628 
tmp
 = 
	`__HAL_DMA2D_GET_FLAG
(
hdma2d
, 
DMA2D_FLAG_CE
);

629 
tmp1
 = 
	`__HAL_DMA2D_GET_FLAG
(
hdma2d
, 
DMA2D_FLAG_TE
);

631 if((
tmp
 !
RESET
Ë|| (
tmp1
 != RESET))

634 
	`__HAL_DMA2D_CLEAR_FLAG
(
hdma2d
, 
DMA2D_FLAG_CE
);

635 
	`__HAL_DMA2D_CLEAR_FLAG
(
hdma2d
, 
DMA2D_FLAG_TE
);

638 
hdma2d
->
Sèã

HAL_DMA2D_STATE_ERROR
;

641 
	`__HAL_UNLOCK
(
hdma2d
);

643  
HAL_ERROR
;

646 if(
Timeout
 !
HAL_MAX_DELAY
)

648 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

651 
	`__HAL_UNLOCK
(
hdma2d
);

654 
hdma2d
->
Eº‹Code
 |
HAL_DMA2D_ERROR_TIMEOUT
;

657 
hdma2d
->
Sèã

HAL_DMA2D_STATE_TIMEOUT
;

659  
HAL_TIMEOUT
;

665 if((
hdma2d
->
In°™˚
->
FGPFCCR
 & 
DMA2D_FGPFCCR_START
) != 0)

668 
tick°¨t
 = 
	`HAL_GëTick
();

670 
	`__HAL_DMA2D_GET_FLAG
(
hdma2d
, 
DMA2D_FLAG_CTC
Ë=
RESET
)

672 if((
	`__HAL_DMA2D_GET_FLAG
(
hdma2d
, 
DMA2D_FLAG_CAE
Ë!
RESET
))

675 
	`__HAL_DMA2D_CLEAR_FLAG
(
hdma2d
, 
DMA2D_FLAG_CAE
);

678 
hdma2d
->
Sèã

HAL_DMA2D_STATE_ERROR
;

680  
HAL_ERROR
;

683 if(
Timeout
 !
HAL_MAX_DELAY
)

685 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

688 
hdma2d
->
Eº‹Code
 |
HAL_DMA2D_ERROR_TIMEOUT
;

691 
hdma2d
->
Sèã

HAL_DMA2D_STATE_TIMEOUT
;

693  
HAL_TIMEOUT
;

699 
	`__HAL_DMA2D_CLEAR_FLAG
(
hdma2d
, 
DMA2D_FLAG_TC
);

702 
	`__HAL_DMA2D_CLEAR_FLAG
(
hdma2d
, 
DMA2D_FLAG_CTC
);

705 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_READY
;

708 
	`__HAL_UNLOCK
(
hdma2d
);

710  
HAL_OK
;

711 
	}
}

718 
	$HAL_DMA2D_IRQH™dÀr
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
)

721 if(
	`__HAL_DMA2D_GET_FLAG
(
hdma2d
, 
DMA2D_FLAG_TE
Ë!
RESET
)

723 if(
	`__HAL_DMA2D_GET_IT_SOURCE
(
hdma2d
, 
DMA2D_IT_TE
Ë!
RESET
)

726 
	`__HAL_DMA2D_DISABLE_IT
(
hdma2d
, 
DMA2D_IT_TE
);

729 
hdma2d
->
Eº‹Code
 |
HAL_DMA2D_ERROR_TE
;

732 
	`__HAL_DMA2D_CLEAR_FLAG
(
hdma2d
, 
DMA2D_FLAG_TE
);

735 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_ERROR
;

738 
	`__HAL_UNLOCK
(
hdma2d
);

740 if(
hdma2d
->
X„rEº‹CÆlback
 !
NULL
)

743 
hdma2d
->
	`X„rEº‹CÆlback
(hdma2d);

748 if(
	`__HAL_DMA2D_GET_FLAG
(
hdma2d
, 
DMA2D_FLAG_CE
Ë!
RESET
)

750 if(
	`__HAL_DMA2D_GET_IT_SOURCE
(
hdma2d
, 
DMA2D_IT_CE
Ë!
RESET
)

753 
	`__HAL_DMA2D_DISABLE_IT
(
hdma2d
, 
DMA2D_IT_CE
);

756 
	`__HAL_DMA2D_CLEAR_FLAG
(
hdma2d
, 
DMA2D_FLAG_CE
);

759 
hdma2d
->
Eº‹Code
 |
HAL_DMA2D_ERROR_CE
;

762 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_ERROR
;

765 
	`__HAL_UNLOCK
(
hdma2d
);

767 if(
hdma2d
->
X„rEº‹CÆlback
 !
NULL
)

770 
hdma2d
->
	`X„rEº‹CÆlback
(hdma2d);

775 if(
	`__HAL_DMA2D_GET_FLAG
(
hdma2d
, 
DMA2D_FLAG_TC
Ë!
RESET
)

777 if(
	`__HAL_DMA2D_GET_IT_SOURCE
(
hdma2d
, 
DMA2D_IT_TC
Ë!
RESET
)

780 
	`__HAL_DMA2D_DISABLE_IT
(
hdma2d
, 
DMA2D_IT_TC
);

783 
	`__HAL_DMA2D_CLEAR_FLAG
(
hdma2d
, 
DMA2D_FLAG_TC
);

786 
hdma2d
->
Eº‹Code
 |
HAL_DMA2D_ERROR_NONE
;

789 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_READY
;

792 
	`__HAL_UNLOCK
(
hdma2d
);

794 if(
hdma2d
->
X„rC∂tCÆlback
 !
NULL
)

797 
hdma2d
->
	`X„rC∂tCÆlback
(hdma2d);

801 
	}
}

834 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_C⁄figLayî
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
LayîIdx
)

836 
DMA2D_LayîCfgTy≥Def
 *
pLayîCfg
 = &
hdma2d
->
LayîCfg
[
LayîIdx
];

838 
uöt32_t
 
tmp
 = 0;

841 
	`__HAL_LOCK
(
hdma2d
);

844 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_BUSY
;

847 
	`as£π_∑øm
(
	`IS_DMA2D_LAYER
(
LayîIdx
));

848 
	`as£π_∑øm
(
	`IS_DMA2D_OFFSET
(
pLayîCfg
->
I≈utOff£t
));

849 if(
hdma2d
->
Inô
.
Mode
 !
DMA2D_R2M
)

851 
	`as£π_∑øm
(
	`IS_DMA2D_INPUT_COLOR_MODE
(
pLayîCfg
->
I≈utCﬁ‹Mode
));

852 if(
hdma2d
->
Inô
.
Mode
 !
DMA2D_M2M
)

854 
	`as£π_∑øm
(
	`IS_DMA2D_ALPHA_MODE
(
pLayîCfg
->
AÕhaMode
));

859 if(
LayîIdx
 == 0)

863 
tmp
 = 
hdma2d
->
In°™˚
->
BGPFCCR
;

866 
tmp
 &(
uöt32_t
)~(
DMA2D_BGPFCCR_CM
 | 
DMA2D_BGPFCCR_AM
 | 
DMA2D_BGPFCCR_ALPHA
);

868 i‡((
pLayîCfg
->
I≈utCﬁ‹Mode
 =
CM_A4
Ë|| (pLayîCfg->I≈utCﬁ‹Modê=
CM_A8
))

871 
tmp
 |(
pLayîCfg
->
I≈utCﬁ‹Mode
 | (pLayîCfg->
AÕhaMode
 << 16Ë| (’LayîCfg->
I≈utAÕha
) & 0xFF000000));

876 
tmp
 |(
pLayîCfg
->
I≈utCﬁ‹Mode
 | (pLayîCfg->
AÕhaMode
 << 16Ë| (pLayîCfg->
I≈utAÕha
 << 24));

880 
hdma2d
->
In°™˚
->
BGPFCCR
 = 
tmp
;

884 
tmp
 = 
hdma2d
->
In°™˚
->
BGOR
;

887 
tmp
 &(
uöt32_t
)~
DMA2D_BGOR_LO
;

890 
tmp
 |
pLayîCfg
->
I≈utOff£t
;

893 
hdma2d
->
In°™˚
->
BGOR
 = 
tmp
;

895 i‡((
pLayîCfg
->
I≈utCﬁ‹Mode
 =
CM_A4
Ë|| (pLayîCfg->I≈utCﬁ‹Modê=
CM_A8
))

898 
tmp
 = ((
pLayîCfg
->
I≈utAÕha
) & 0x00FFFFFF);

901 
hdma2d
->
In°™˚
->
BGCOLR
 = 
tmp
;

909 
tmp
 = 
hdma2d
->
In°™˚
->
FGPFCCR
;

912 
tmp
 &(
uöt32_t
)~(
DMA2D_FGPFCCR_CM
 | 
DMA2D_FGPFCCR_AM
 | 
DMA2D_FGPFCCR_ALPHA
);

914 i‡((
pLayîCfg
->
I≈utCﬁ‹Mode
 =
CM_A4
Ë|| (pLayîCfg->I≈utCﬁ‹Modê=
CM_A8
))

917 
tmp
 |(
pLayîCfg
->
I≈utCﬁ‹Mode
 | (pLayîCfg->
AÕhaMode
 << 16Ë| (’LayîCfg->
I≈utAÕha
) & 0xFF000000));

922 
tmp
 |(
pLayîCfg
->
I≈utCﬁ‹Mode
 | (pLayîCfg->
AÕhaMode
 << 16Ë| (pLayîCfg->
I≈utAÕha
 << 24));

926 
hdma2d
->
In°™˚
->
FGPFCCR
 = 
tmp
;

930 
tmp
 = 
hdma2d
->
In°™˚
->
FGOR
;

933 
tmp
 &(
uöt32_t
)~
DMA2D_FGOR_LO
;

936 
tmp
 |
pLayîCfg
->
I≈utOff£t
;

939 
hdma2d
->
In°™˚
->
FGOR
 = 
tmp
;

941 i‡((
pLayîCfg
->
I≈utCﬁ‹Mode
 =
CM_A4
Ë|| (pLayîCfg->I≈utCﬁ‹Modê=
CM_A8
))

944 
tmp
 = ((
pLayîCfg
->
I≈utAÕha
) & 0x00FFFFFF);

947 
hdma2d
->
In°™˚
->
FGCOLR
 = 
tmp
;

951 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_READY
;

954 
	`__HAL_UNLOCK
(
hdma2d
);

956  
HAL_OK
;

957 
	}
}

970 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_C⁄figCLUT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
DMA2D_CLUTCfgTy≥Def
 
CLUTCfg
, 
uöt32_t
 
LayîIdx
)

972 
uöt32_t
 
tmp
 = 0, 
tmp1
 = 0;

975 
	`as£π_∑øm
(
	`IS_DMA2D_LAYER
(
LayîIdx
));

976 
	`as£π_∑øm
(
	`IS_DMA2D_CLUT_CM
(
CLUTCfg
.
CLUTCﬁ‹Mode
));

977 
	`as£π_∑øm
(
	`IS_DMA2D_CLUT_SIZE
(
CLUTCfg
.
Size
));

980 if(
LayîIdx
 == 0)

983 
tmp
 = 
hdma2d
->
In°™˚
->
BGCMAR
;

986 
tmp
 &(
uöt32_t
)~
DMA2D_BGCMAR_MA
;

989 
tmp
 |(
uöt32_t
)
CLUTCfg
.
pCLUT
;

992 
hdma2d
->
In°™˚
->
BGCMAR
 = 
tmp
;

995 
tmp
 = 
hdma2d
->
In°™˚
->
BGPFCCR
;

998 
tmp
 &(
uöt32_t
)~(
DMA2D_BGPFCCR_CS
 | 
DMA2D_BGPFCCR_CCM
);

1001 
tmp1
 = 
CLUTCfg
.
Size
 << 16;

1004 
tmp
 |(
CLUTCfg
.
CLUTCﬁ‹Mode
 | 
tmp1
);

1007 
hdma2d
->
In°™˚
->
BGPFCCR
 = 
tmp
;

1013 
tmp
 = 
hdma2d
->
In°™˚
->
FGCMAR
;

1016 
tmp
 &(
uöt32_t
)~
DMA2D_FGCMAR_MA
;

1019 
tmp
 |(
uöt32_t
)
CLUTCfg
.
pCLUT
;

1022 
hdma2d
->
In°™˚
->
FGCMAR
 = 
tmp
;

1025 
tmp
 = 
hdma2d
->
In°™˚
->
FGPFCCR
;

1028 
tmp
 &(
uöt32_t
)~(
DMA2D_FGPFCCR_CS
 | 
DMA2D_FGPFCCR_CCM
);

1031 
tmp1
 = 
CLUTCfg
.
Size
 << 8;

1034 
tmp
 |(
CLUTCfg
.
CLUTCﬁ‹Mode
 | 
tmp1
);

1037 
hdma2d
->
In°™˚
->
FGPFCCR
 = 
tmp
;

1040  
HAL_OK
;

1041 
	}
}

1052 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_E«bÀCLUT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
LayîIdx
)

1055 
	`as£π_∑øm
(
	`IS_DMA2D_LAYER
(
LayîIdx
));

1057 if(
LayîIdx
 == 0)

1060 
hdma2d
->
In°™˚
->
BGPFCCR
 |
DMA2D_BGPFCCR_START
;

1065 
hdma2d
->
In°™˚
->
FGPFCCR
 |
DMA2D_FGPFCCR_START
;

1068  
HAL_OK
;

1069 
	}
}

1080 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_DißbÀCLUT
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
LayîIdx
)

1083 
	`as£π_∑øm
(
	`IS_DMA2D_LAYER
(
LayîIdx
));

1085 if(
LayîIdx
 == 0)

1088 
hdma2d
->
In°™˚
->
BGPFCCR
 &~
DMA2D_BGPFCCR_START
;

1093 
hdma2d
->
In°™˚
->
FGPFCCR
 &~
DMA2D_FGPFCCR_START
;

1096  
HAL_OK
;

1097 
	}
}

1107 
HAL_SètusTy≥Def
 
	$HAL_DMA2D_ProgømLöeEvít
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
Löe
)

1110 
	`__HAL_LOCK
(
hdma2d
);

1113 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_BUSY
;

1116 
	`as£π_∑øm
(
	`IS_DMA2D_LöeW©îm¨k
(
Löe
));

1119 
DMA2D
->
LWR
 = (
uöt32_t
)
Löe
;

1122 
hdma2d
->
Sèã
 = 
HAL_DMA2D_STATE_READY
;

1125 
	`__HAL_UNLOCK
(
hdma2d
);

1127  
HAL_OK
;

1128 
	}
}

1156 
HAL_DMA2D_SèãTy≥Def
 
	$HAL_DMA2D_GëSèã
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
)

1158  
hdma2d
->
Sèã
;

1159 
	}
}

1167 
uöt32_t
 
	$HAL_DMA2D_GëEº‹
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
)

1169  
hdma2d
->
Eº‹Code
;

1170 
	}
}

1187 
	$DMA2D_SëC⁄fig
(
DMA2D_H™dÀTy≥Def
 *
hdma2d
, 
uöt32_t
 
pd©a
, uöt32_à
D°Addªss
, uöt32_à
Width
, uöt32_à
Height
)

1189 
uöt32_t
 
tmp
 = 0;

1190 
uöt32_t
 
tmp1
 = 0;

1191 
uöt32_t
 
tmp2
 = 0;

1192 
uöt32_t
 
tmp3
 = 0;

1193 
uöt32_t
 
tmp4
 = 0;

1195 
tmp
 = 
Width
 << 16;

1198 
hdma2d
->
In°™˚
->
NLR
 = (
Height
 | 
tmp
);

1201 
hdma2d
->
In°™˚
->
OMAR
 = 
D°Addªss
;

1204 i‡(
hdma2d
->
Inô
.
Mode
 =
DMA2D_R2M
)

1206 
tmp1
 = 
pd©a
 & 
DMA2D_OCOLR_ALPHA_1
;

1207 
tmp2
 = 
pd©a
 & 
DMA2D_OCOLR_RED_1
;

1208 
tmp3
 = 
pd©a
 & 
DMA2D_OCOLR_GREEN_1
;

1209 
tmp4
 = 
pd©a
 & 
DMA2D_OCOLR_BLUE_1
;

1212 i‡(
hdma2d
->
Inô
.
Cﬁ‹Mode
 =
DMA2D_ARGB8888
)

1214 
tmp
 = (
tmp3
 | 
tmp2
 | 
tmp1
| 
tmp4
);

1216 i‡(
hdma2d
->
Inô
.
Cﬁ‹Mode
 =
DMA2D_RGB888
)

1218 
tmp
 = (
tmp3
 | 
tmp2
 | 
tmp4
);

1220 i‡(
hdma2d
->
Inô
.
Cﬁ‹Mode
 =
DMA2D_RGB565
)

1222 
tmp2
 = (tmp2 >> 19);

1223 
tmp3
 = (tmp3 >> 10);

1224 
tmp4
 = (tmp4 >> 3 );

1225 
tmp
 = ((
tmp3
 << 5Ë| (
tmp2
 << 11Ë| 
tmp4
);

1227 i‡(
hdma2d
->
Inô
.
Cﬁ‹Mode
 =
DMA2D_ARGB1555
)

1229 
tmp1
 = (tmp1 >> 31);

1230 
tmp2
 = (tmp2 >> 19);

1231 
tmp3
 = (tmp3 >> 11);

1232 
tmp4
 = (tmp4 >> 3 );

1233 
tmp
 = ((
tmp3
 << 5Ë| (
tmp2
 << 10Ë| (
tmp1
 << 15Ë| 
tmp4
);

1237 
tmp1
 = (tmp1 >> 28);

1238 
tmp2
 = (tmp2 >> 20);

1239 
tmp3
 = (tmp3 >> 12);

1240 
tmp4
 = (tmp4 >> 4 );

1241 
tmp
 = ((
tmp3
 << 4Ë| (
tmp2
 << 8Ë| (
tmp1
 << 12Ë| 
tmp4
);

1244 
hdma2d
->
In°™˚
->
OCOLR
 = 
tmp
;

1249 
hdma2d
->
In°™˚
->
FGMAR
 = 
pd©a
;

1251 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dma_ex.c

58 
	~"°m32f4xx_hÆ.h
"

69 #ifde‡
HAL_DMA_MODULE_ENABLED


79 
DMA_Mu…iBuf„rSëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

119 
HAL_SètusTy≥Def
 
	$HAL_DMAEx_Mu…iBuf„rSèπ
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
Sec⁄dMemAddªss
, uöt32_à
D©aLígth
)

122 
	`__HAL_LOCK
(
hdma
);

125 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) == 0)

127 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY_MEM0
;

130 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) != 0)

132 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY_MEM1
;

136 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

139 
	`__HAL_DMA_DISABLE
(
hdma
);

142 
hdma
->
In°™˚
->
CR
 |(
uöt32_t
)
DMA_SxCR_DBM
;

145 
hdma
->
In°™˚
->
M1AR
 = 
Sec⁄dMemAddªss
;

148 
	`DMA_Mu…iBuf„rSëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

151 
	`__HAL_DMA_ENABLE
(
hdma
);

153  
HAL_OK
;

154 
	}
}

166 
HAL_SètusTy≥Def
 
	$HAL_DMAEx_Mu…iBuf„rSèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
Sec⁄dMemAddªss
, uöt32_à
D©aLígth
)

169 
	`__HAL_LOCK
(
hdma
);

172 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) == 0)

174 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY_MEM0
;

177 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CT
) != 0)

179 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY_MEM1
;

183 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

186 
	`__HAL_DMA_DISABLE
(
hdma
);

189 
hdma
->
In°™˚
->
CR
 |(
uöt32_t
)
DMA_SxCR_DBM
;

192 
hdma
->
In°™˚
->
M1AR
 = 
Sec⁄dMemAddªss
;

195 
	`DMA_Mu…iBuf„rSëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

198 
	`__HAL_DMA_ENABLE_IT
(
hdma
, 
DMA_IT_TC
);

201 
	`__HAL_DMA_ENABLE_IT
(
hdma
, 
DMA_IT_HT
);

204 
	`__HAL_DMA_ENABLE_IT
(
hdma
, 
DMA_IT_TE
);

207 
	`__HAL_DMA_ENABLE_IT
(
hdma
, 
DMA_IT_FE
);

210 
	`__HAL_DMA_ENABLE_IT
(
hdma
, 
DMA_IT_DME
);

213 
	`__HAL_DMA_ENABLE
(
hdma
);

215  
HAL_OK
;

216 
	}
}

232 
HAL_SètusTy≥Def
 
	$HAL_DMAEx_Ch™geMem‹y
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Addªss
, 
HAL_DMA_Mem‹yTy≥Def
 
mem‹y
)

234 if(
mem‹y
 =
MEMORY0
)

237 
hdma
->
In°™˚
->
M0AR
 = 
Addªss
;

242 
hdma
->
In°™˚
->
M1AR
 = 
Addªss
;

245  
HAL_OK
;

246 
	}
}

269 
	$DMA_Mu…iBuf„rSëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

272 
hdma
->
In°™˚
->
NDTR
 = 
D©aLígth
;

275 if((
hdma
->
Inô
.
Dúe˘i⁄
Ë=
DMA_MEMORY_TO_PERIPH
)

278 
hdma
->
In°™˚
->
PAR
 = 
D°Addªss
;

281 
hdma
->
In°™˚
->
M0AR
 = 
SrcAddªss
;

287 
hdma
->
In°™˚
->
PAR
 = 
SrcAddªss
;

290 
hdma
->
In°™˚
->
M0AR
 = 
D°Addªss
;

292 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dsi.c

45 
	~"°m32f4xx_hÆ.h
"

54 #ifde‡
HAL_DSI_MODULE_ENABLED


56 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

63 
	#DSI_TIMEOUT_VALUE
 ((
uöt32_t
)1000Ë

	)

65 
	#DSI_ERROR_ACK_MASK
 (
DSI_ISR0_AE0
 | 
DSI_ISR0_AE1
 | 
DSI_ISR0_AE2
 | 
DSI_ISR0_AE3
 | \

66 
DSI_ISR0_AE4
 | 
DSI_ISR0_AE5
 | 
DSI_ISR0_AE6
 | 
DSI_ISR0_AE7
 | \

67 
DSI_ISR0_AE8
 | 
DSI_ISR0_AE9
 | 
DSI_ISR0_AE10
 | 
DSI_ISR0_AE11
 | \

68 
DSI_ISR0_AE12
 | 
DSI_ISR0_AE13
 | 
DSI_ISR0_AE14
 | 
DSI_ISR0_AE15
)

	)

69 
	#DSI_ERROR_PHY_MASK
 (
DSI_ISR0_PE0
 | 
DSI_ISR0_PE1
 | 
DSI_ISR0_PE2
 | 
DSI_ISR0_PE3
 | 
DSI_ISR0_PE4
)

	)

70 
	#DSI_ERROR_TX_MASK
 
DSI_ISR1_TOHSTX


	)

71 
	#DSI_ERROR_RX_MASK
 
DSI_ISR1_TOLPRX


	)

72 
	#DSI_ERROR_ECC_MASK
 (
DSI_ISR1_ECCSE
 | 
DSI_ISR1_ECCME
)

	)

73 
	#DSI_ERROR_CRC_MASK
 
DSI_ISR1_CRCE


	)

74 
	#DSI_ERROR_PSE_MASK
 
DSI_ISR1_PSE


	)

75 
	#DSI_ERROR_EOT_MASK
 
DSI_ISR1_EOTPE


	)

76 
	#DSI_ERROR_OVF_MASK
 
DSI_ISR1_LPWRE


	)

77 
	#DSI_ERROR_GEN_MASK
 (
DSI_ISR1_GCWRE
 | 
DSI_ISR1_GPWRE
 | 
DSI_ISR1_GPTXE
 | 
DSI_ISR1_GPRDE
 | 
DSI_ISR1_GPRXE
)

	)

86 
DSI_C⁄figPackëHódî
(
DSI_Ty≥Def
 *
DSIx
, 
uöt32_t
 
Ch™√lID
, uöt32_à
D©aTy≥
, uöt32_à
D©a0
, uöt32_à
D©a1
);

103 
	$DSI_C⁄figPackëHódî
(
DSI_Ty≥Def
 *
DSIx
,

104 
uöt32_t
 
Ch™√lID
,

105 
uöt32_t
 
D©aTy≥
,

106 
uöt32_t
 
D©a0
,

107 
uöt32_t
 
D©a1
)

110 
DSIx
->
GHCR
 = (
D©aTy≥
 | (
Ch™√lID
<<6Ë| (
D©a0
<<8Ë| (
D©a1
<<16));

111 
	}
}

142 
HAL_SètusTy≥Def
 
	$HAL_DSI_Inô
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_PLLInôTy≥Def
 *
PLLInô
)

144 
uöt32_t
 
tick°¨t
 = 0;

145 
uöt32_t
 
unôI¡îvÆx4
 = 0;

146 
uöt32_t
 
ãmpIDF
 = 0;

149 if(
hdsi
 =
NULL
)

151  
HAL_ERROR
;

155 
	`as£π_∑øm
(
	`IS_DSI_PLL_NDIV
(
PLLInô
->
PLLNDIV
));

156 
	`as£π_∑øm
(
	`IS_DSI_PLL_IDF
(
PLLInô
->
PLLIDF
));

157 
	`as£π_∑øm
(
	`IS_DSI_PLL_ODF
(
PLLInô
->
PLLODF
));

158 
	`as£π_∑øm
(
	`IS_DSI_AUTO_CLKLANE_CONTROL
(
hdsi
->
Inô
.
Autom©icClockL™eC⁄åﬁ
));

159 
	`as£π_∑øm
(
	`IS_DSI_NUMBER_OF_LANES
(
hdsi
->
Inô
.
NumbîOfL™es
));

161 if(
hdsi
->
Sèã
 =
HAL_DSI_STATE_RESET
)

164 
	`HAL_DSI_M•Inô
(
hdsi
);

168 
hdsi
->
Sèã
 = 
HAL_DSI_STATE_BUSY
;

173 
	`__HAL_DSI_REG_ENABLE
(
hdsi
);

176 
tick°¨t
 = 
	`HAL_GëTick
();

179 
	`__HAL_DSI_GET_FLAG
(
hdsi
, 
DSI_FLAG_RRS
Ë=
RESET
)

182 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

184  
HAL_TIMEOUT
;

189 
hdsi
->
In°™˚
->
WRPCR
 &~(
DSI_WRPCR_PLL_NDIV
 | 
DSI_WRPCR_PLL_IDF
 | 
DSI_WRPCR_PLL_ODF
);

190 
hdsi
->
In°™˚
->
WRPCR
 |(((
PLLInô
->
PLLNDIV
)<<2Ë| ((PLLInô->
PLLIDF
)<<11Ë| ((PLLInô->
PLLODF
)<<16));

193 
	`__HAL_DSI_PLL_ENABLE
(
hdsi
);

196 
tick°¨t
 = 
	`HAL_GëTick
();

199 
	`__HAL_DSI_GET_FLAG
(
hdsi
, 
DSI_FLAG_PLLLS
Ë=
RESET
)

202 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

204  
HAL_TIMEOUT
;

211 
hdsi
->
In°™˚
->
PCTLR
 |(
DSI_PCTLR_CKE
 | 
DSI_PCTLR_DEN
);

214 
hdsi
->
In°™˚
->
CLCR
 &~(
DSI_CLCR_DPCC
 | 
DSI_CLCR_ACR
);

215 
hdsi
->
In°™˚
->
CLCR
 |(
DSI_CLCR_DPCC
 | hdsi->
Inô
.
Autom©icClockL™eC⁄åﬁ
);

218 
hdsi
->
In°™˚
->
PCONFR
 &~
DSI_PCONFR_NL
;

219 
hdsi
->
In°™˚
->
PCONFR
 |hdsi->
Inô
.
NumbîOfL™es
;

224 
hdsi
->
In°™˚
->
CCR
 &~
DSI_CCR_TXECKDIV
;

225 
hdsi
->
In°™˚
->
CCR
 = hdsi->
Inô
.
TXEsˇ≥Ckdiv
;

230 
ãmpIDF
 = (
PLLInô
->
PLLIDF
 > 0) ? PLLInit->PLLIDF : 1;

231 
unôI¡îvÆx4
 = (4000000 * 
ãmpIDF
 * (1 << 
PLLInô
->
PLLODF
)Ë/ ((
HSE_VALUE
/1000Ë* PLLInô->
PLLNDIV
);

234 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_UIX4
;

235 
hdsi
->
In°™˚
->
WPCR
[0] |
unôI¡îvÆx4
;

240 
hdsi
->
In°™˚
->
IER
[0] = 0;

241 
hdsi
->
In°™˚
->
IER
[1] = 0;

242 
hdsi
->
Eº‹Msk
 = 0;

245 
hdsi
->
Eº‹Code
 = 
HAL_DSI_ERROR_NONE
;

248 
hdsi
->
Sèã
 = 
HAL_DSI_STATE_READY
;

250  
HAL_OK
;

251 
	}
}

260 
HAL_SètusTy≥Def
 
	$HAL_DSI_DeInô
(
DSI_H™dÀTy≥Def
 *
hdsi
)

263 if(
hdsi
 =
NULL
)

265  
HAL_ERROR
;

269 
hdsi
->
Sèã
 = 
HAL_DSI_STATE_BUSY
;

272 
	`__HAL_DSI_WRAPPER_DISABLE
(
hdsi
);

275 
	`__HAL_DSI_DISABLE
(
hdsi
);

278 
hdsi
->
In°™˚
->
PCTLR
 &~(
DSI_PCTLR_CKE
 | 
DSI_PCTLR_DEN
);

281 
	`__HAL_DSI_PLL_DISABLE
(
hdsi
);

284 
	`__HAL_DSI_REG_DISABLE
(
hdsi
);

287 
	`HAL_DSI_M•DeInô
(
hdsi
);

290 
hdsi
->
Eº‹Code
 = 
HAL_DSI_ERROR_NONE
;

293 
hdsi
->
Sèã
 = 
HAL_DSI_STATE_RESET
;

296 
	`__HAL_UNLOCK
(
hdsi
);

298  
HAL_OK
;

299 
	}
}

307 
uöt32_t
 
	$HAL_DSI_GëEº‹
(
DSI_H™dÀTy≥Def
 *
hdsi
)

310  
hdsi
->
Eº‹Code
;

311 
	}
}

321 
HAL_SètusTy≥Def
 
	$HAL_DSI_C⁄figEº‹M⁄ô‹
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
A˘iveEº‹s
)

324 
	`__HAL_LOCK
(
hdsi
);

326 
hdsi
->
In°™˚
->
IER
[0] = 0;

327 
hdsi
->
In°™˚
->
IER
[1] = 0;

330 
hdsi
->
Eº‹Msk
 = 
A˘iveEº‹s
;

332 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_ACK
)

335 
hdsi
->
In°™˚
->
IER
[0] |
DSI_ERROR_ACK_MASK
;

338 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_PHY
)

341 
hdsi
->
In°™˚
->
IER
[0] |
DSI_ERROR_PHY_MASK
;

344 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_TX
)

347 
hdsi
->
In°™˚
->
IER
[1] |
DSI_ERROR_TX_MASK
;

350 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_RX
)

353 
hdsi
->
In°™˚
->
IER
[1] |
DSI_ERROR_RX_MASK
;

356 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_ECC
)

359 
hdsi
->
In°™˚
->
IER
[1] |
DSI_ERROR_ECC_MASK
;

362 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_CRC
)

365 
hdsi
->
In°™˚
->
IER
[1] |
DSI_ERROR_CRC_MASK
;

368 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_PSE
)

371 
hdsi
->
In°™˚
->
IER
[1] |
DSI_ERROR_PSE_MASK
;

374 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_EOT
)

377 
hdsi
->
In°™˚
->
IER
[1] |
DSI_ERROR_EOT_MASK
;

380 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_OVF
)

383 
hdsi
->
In°™˚
->
IER
[1] |
DSI_ERROR_OVF_MASK
;

386 if(
A˘iveEº‹s
 & 
HAL_DSI_ERROR_GEN
)

389 
hdsi
->
In°™˚
->
IER
[1] |
DSI_ERROR_GEN_MASK
;

393 
	`__HAL_UNLOCK
(
hdsi
);

395  
HAL_OK
;

396 
	}
}

404 
__wók
 
	$HAL_DSI_M•Inô
(
DSI_H™dÀTy≥Def
* 
hdsi
)

409 
	}
}

417 
__wók
 
	$HAL_DSI_M•DeInô
(
DSI_H™dÀTy≥Def
* 
hdsi
)

422 
	}
}

447 
	$HAL_DSI_IRQH™dÀr
(
DSI_H™dÀTy≥Def
 *
hdsi
)

449 
uöt32_t
 
Eº‹Sètus0
, 
Eº‹Sètus1
;

452 if(
	`__HAL_DSI_GET_FLAG
(
hdsi
, 
DSI_FLAG_TE
Ë!
RESET
)

454 if(
	`__HAL_DSI_GET_IT_SOURCE
(
hdsi
, 
DSI_IT_TE
Ë!
RESET
)

457 
	`__HAL_DSI_CLEAR_FLAG
(
hdsi
, 
DSI_FLAG_TE
);

460 
	`HAL_DSI_TórögEf„˘CÆlback
(
hdsi
);

465 if(
	`__HAL_DSI_GET_FLAG
(
hdsi
, 
DSI_FLAG_ER
Ë!
RESET
)

467 if(
	`__HAL_DSI_GET_IT_SOURCE
(
hdsi
, 
DSI_IT_ER
Ë!
RESET
)

470 
	`__HAL_DSI_CLEAR_FLAG
(
hdsi
, 
DSI_FLAG_ER
);

473 
	`HAL_DSI_EndOfRe‰eshCÆlback
(
hdsi
);

478 if(
hdsi
->
Eº‹Msk
 != 0)

480 
Eº‹Sètus0
 = 
hdsi
->
In°™˚
->
ISR
[0];

481 
Eº‹Sètus0
 &
hdsi
->
In°™˚
->
IER
[0];

482 
Eº‹Sètus1
 = 
hdsi
->
In°™˚
->
ISR
[1];

483 
Eº‹Sètus1
 &
hdsi
->
In°™˚
->
IER
[1];

485 if(
Eº‹Sètus0
 & 
DSI_ERROR_ACK_MASK
)

487 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_ACK
;

490 if(
Eº‹Sètus0
 & 
DSI_ERROR_PHY_MASK
)

492 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_PHY
;

495 if(
Eº‹Sètus1
 & 
DSI_ERROR_TX_MASK
)

497 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_TX
;

500 if(
Eº‹Sètus1
 & 
DSI_ERROR_RX_MASK
)

502 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_RX
;

505 if(
Eº‹Sètus1
 & 
DSI_ERROR_ECC_MASK
)

507 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_ECC
;

510 if(
Eº‹Sètus1
 & 
DSI_ERROR_CRC_MASK
)

512 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_CRC
;

515 if(
Eº‹Sètus1
 & 
DSI_ERROR_PSE_MASK
)

517 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_PSE
;

520 if(
Eº‹Sètus1
 & 
DSI_ERROR_EOT_MASK
)

522 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_EOT
;

525 if(
Eº‹Sètus1
 & 
DSI_ERROR_OVF_MASK
)

527 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_OVF
;

530 if(
Eº‹Sètus1
 & 
DSI_ERROR_GEN_MASK
)

532 
hdsi
->
Eº‹Code
 |
HAL_DSI_ERROR_GEN
;

536 if(
hdsi
->
Eº‹Code
 !
HAL_DSI_ERROR_NONE
)

539 
	`HAL_DSI_Eº‹CÆlback
(
hdsi
);

542 
	}
}

550 
__wók
 
	$HAL_DSI_TórögEf„˘CÆlback
(
DSI_H™dÀTy≥Def
 *
hdsi
)

555 
	}
}

563 
__wók
 
	$HAL_DSI_EndOfRe‰eshCÆlback
(
DSI_H™dÀTy≥Def
 *
hdsi
)

568 
	}
}

576 
__wók
 
	$HAL_DSI_Eº‹CÆlback
(
DSI_H™dÀTy≥Def
 *
hdsi
)

581 
	}
}

610 
HAL_SètusTy≥Def
 
	$HAL_DSI_SëGíîicVCID
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
VútuÆCh™√lID
)

613 
	`__HAL_LOCK
(
hdsi
);

616 
hdsi
->
In°™˚
->
GVCIDR
 &~
DSI_GVCIDR_VCID
;

617 
hdsi
->
In°™˚
->
GVCIDR
 |
VútuÆCh™√lID
;

620 
	`__HAL_UNLOCK
(
hdsi
);

622  
HAL_OK
;

623 
	}
}

633 
HAL_SètusTy≥Def
 
	$HAL_DSI_C⁄figVideoMode
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_VidCfgTy≥Def
 *
VidCfg
)

636 
	`__HAL_LOCK
(
hdsi
);

639 
	`as£π_∑øm
(
	`IS_DSI_COLOR_CODING
(
VidCfg
->
Cﬁ‹Codög
));

640 
	`as£π_∑øm
(
	`IS_DSI_VIDEO_MODE_TYPE
(
VidCfg
->
Mode
));

641 
	`as£π_∑øm
(
	`IS_DSI_LP_COMMAND
(
VidCfg
->
LPComm™dE«bÀ
));

642 
	`as£π_∑øm
(
	`IS_DSI_LP_HFP
(
VidCfg
->
LPH‹iz⁄èlFr⁄tP‹chE«bÀ
));

643 
	`as£π_∑øm
(
	`IS_DSI_LP_HBP
(
VidCfg
->
LPH‹iz⁄èlBackP‹chE«bÀ
));

644 
	`as£π_∑øm
(
	`IS_DSI_LP_VACTIVE
(
VidCfg
->
LPVîtiˇlA˘iveE«bÀ
));

645 
	`as£π_∑øm
(
	`IS_DSI_LP_VFP
(
VidCfg
->
LPVîtiˇlFr⁄tP‹chE«bÀ
));

646 
	`as£π_∑øm
(
	`IS_DSI_LP_VBP
(
VidCfg
->
LPVîtiˇlBackP‹chE«bÀ
));

647 
	`as£π_∑øm
(
	`IS_DSI_LP_VSYNC
(
VidCfg
->
LPVîtiˇlSyncA˘iveE«bÀ
));

648 
	`as£π_∑øm
(
	`IS_DSI_FBTAA
(
VidCfg
->
FømeBTAAcknowÀdgeE«bÀ
));

649 
	`as£π_∑øm
(
	`IS_DSI_DE_POLARITY
(
VidCfg
->
DEPﬁ¨ôy
));

650 
	`as£π_∑øm
(
	`IS_DSI_VSYNC_POLARITY
(
VidCfg
->
VSPﬁ¨ôy
));

651 
	`as£π_∑øm
(
	`IS_DSI_HSYNC_POLARITY
(
VidCfg
->
HSPﬁ¨ôy
));

653 if(
VidCfg
->
Cﬁ‹Codög
 =
DSI_RGB666
)

655 
	`as£π_∑øm
(
	`IS_DSI_LOOSELY_PACKED
(
VidCfg
->
Loo£lyPacked
));

659 
hdsi
->
In°™˚
->
MCR
 &~
DSI_MCR_CMDM
;

660 
hdsi
->
In°™˚
->
WCFGR
 &~
DSI_WCFGR_DSIM
;

663 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_VMT
;

664 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
Mode
;

667 
hdsi
->
In°™˚
->
VPCR
 &~
DSI_VPCR_VPSIZE
;

668 
hdsi
->
In°™˚
->
VPCR
 |
VidCfg
->
PackëSize
;

671 
hdsi
->
In°™˚
->
VCCR
 &~
DSI_VCCR_NUMC
;

672 
hdsi
->
In°™˚
->
VCCR
 |
VidCfg
->
NumbîOfChunks
;

675 
hdsi
->
In°™˚
->
VNPCR
 &~
DSI_VNPCR_NPSIZE
;

676 
hdsi
->
In°™˚
->
VNPCR
 |
VidCfg
->
NuŒPackëSize
;

679 
hdsi
->
In°™˚
->
LVCIDR
 &~
DSI_LVCIDR_VCID
;

680 
hdsi
->
In°™˚
->
LVCIDR
 |
VidCfg
->
VútuÆCh™√lID
;

683 
hdsi
->
In°™˚
->
LPCR
 &~(
DSI_LPCR_DEP
 | 
DSI_LPCR_VSP
 | 
DSI_LPCR_HSP
);

684 
hdsi
->
In°™˚
->
LPCR
 |(
VidCfg
->
DEPﬁ¨ôy
 | VidCfg->
VSPﬁ¨ôy
 | VidCfg->
HSPﬁ¨ôy
);

687 
hdsi
->
In°™˚
->
LCOLCR
 &~
DSI_LCOLCR_COLC
;

688 
hdsi
->
In°™˚
->
LCOLCR
 |
VidCfg
->
Cﬁ‹Codög
;

691 
hdsi
->
In°™˚
->
WCFGR
 &~
DSI_WCFGR_COLMUX
;

692 
hdsi
->
In°™˚
->
WCFGR
 |((
VidCfg
->
Cﬁ‹Codög
)<<1);

695 if(
VidCfg
->
Cﬁ‹Codög
 =
DSI_RGB666
)

697 
hdsi
->
In°™˚
->
LCOLCR
 &~
DSI_LCOLCR_LPE
;

698 
hdsi
->
In°™˚
->
LCOLCR
 |
VidCfg
->
Loo£lyPacked
;

702 
hdsi
->
In°™˚
->
VHSACR
 &~
DSI_VHSACR_HSA
;

703 
hdsi
->
In°™˚
->
VHSACR
 |
VidCfg
->
H‹iz⁄èlSyncA˘ive
;

706 
hdsi
->
In°™˚
->
VHBPCR
 &~
DSI_VHBPCR_HBP
;

707 
hdsi
->
In°™˚
->
VHBPCR
 |
VidCfg
->
H‹iz⁄èlBackP‹ch
;

710 
hdsi
->
In°™˚
->
VLCR
 &~
DSI_VLCR_HLINE
;

711 
hdsi
->
In°™˚
->
VLCR
 |
VidCfg
->
H‹iz⁄èlLöe
;

714 
hdsi
->
In°™˚
->
VVSACR
 &~
DSI_VVSACR_VSA
;

715 
hdsi
->
In°™˚
->
VVSACR
 |
VidCfg
->
VîtiˇlSyncA˘ive
;

718 
hdsi
->
In°™˚
->
VVBPCR
 &~
DSI_VVBPCR_VBP
;

719 
hdsi
->
In°™˚
->
VVBPCR
 |
VidCfg
->
VîtiˇlBackP‹ch
;

722 
hdsi
->
In°™˚
->
VVFPCR
 &~
DSI_VVFPCR_VFP
;

723 
hdsi
->
In°™˚
->
VVFPCR
 |
VidCfg
->
VîtiˇlFr⁄tP‹ch
;

726 
hdsi
->
In°™˚
->
VVACR
 &~
DSI_VVACR_VA
;

727 
hdsi
->
In°™˚
->
VVACR
 |
VidCfg
->
VîtiˇlA˘ive
;

730 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_LPCE
;

731 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
LPComm™dE«bÀ
;

734 
hdsi
->
In°™˚
->
LPMCR
 &~
DSI_LPMCR_LPSIZE
;

735 
hdsi
->
In°™˚
->
LPMCR
 |((
VidCfg
->
LPL¨ge°PackëSize
)<<16);

738 
hdsi
->
In°™˚
->
LPMCR
 &~
DSI_LPMCR_VLPSIZE
;

739 
hdsi
->
In°™˚
->
LPMCR
 |
VidCfg
->
LPVACTL¨ge°PackëSize
;

742 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_LPHFPE
;

743 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
LPH‹iz⁄èlFr⁄tP‹chE«bÀ
;

746 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_LPHBPE
;

747 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
LPH‹iz⁄èlBackP‹chE«bÀ
;

750 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_LPVAE
;

751 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
LPVîtiˇlA˘iveE«bÀ
;

754 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_LPVFPE
;

755 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
LPVîtiˇlFr⁄tP‹chE«bÀ
;

758 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_LPVBPE
;

759 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
LPVîtiˇlBackP‹chE«bÀ
;

762 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_LPVSAE
;

763 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
LPVîtiˇlSyncA˘iveE«bÀ
;

766 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_FBTAAE
;

767 
hdsi
->
In°™˚
->
VMCR
 |
VidCfg
->
FømeBTAAcknowÀdgeE«bÀ
;

770 
	`__HAL_UNLOCK
(
hdsi
);

772  
HAL_OK
;

773 
	}
}

783 
HAL_SètusTy≥Def
 
	$HAL_DSI_C⁄figAd≠ãdComm™dMode
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_CmdCfgTy≥Def
 *
CmdCfg
)

786 
	`__HAL_LOCK
(
hdsi
);

789 
	`as£π_∑øm
(
	`IS_DSI_COLOR_CODING
(
CmdCfg
->
Cﬁ‹Codög
));

790 
	`as£π_∑øm
(
	`IS_DSI_TE_SOURCE
(
CmdCfg
->
TórögEf„˘Sour˚
));

791 
	`as£π_∑øm
(
	`IS_DSI_TE_POLARITY
(
CmdCfg
->
TórögEf„˘Pﬁ¨ôy
));

792 
	`as£π_∑øm
(
	`IS_DSI_AUTOMATIC_REFRESH
(
CmdCfg
->
Autom©icRe‰esh
));

793 
	`as£π_∑øm
(
	`IS_DSI_VS_POLARITY
(
CmdCfg
->
VSyncPﬁ
));

794 
	`as£π_∑øm
(
	`IS_DSI_TE_ACK_REQUEST
(
CmdCfg
->
TEAcknowÀdgeReque°
));

795 
	`as£π_∑øm
(
	`IS_DSI_DE_POLARITY
(
CmdCfg
->
DEPﬁ¨ôy
));

796 
	`as£π_∑øm
(
	`IS_DSI_VSYNC_POLARITY
(
CmdCfg
->
VSPﬁ¨ôy
));

797 
	`as£π_∑øm
(
	`IS_DSI_HSYNC_POLARITY
(
CmdCfg
->
HSPﬁ¨ôy
));

800 
hdsi
->
In°™˚
->
MCR
 |
DSI_MCR_CMDM
;

801 
hdsi
->
In°™˚
->
WCFGR
 &~
DSI_WCFGR_DSIM
;

802 
hdsi
->
In°™˚
->
WCFGR
 |
DSI_WCFGR_DSIM
;

805 
hdsi
->
In°™˚
->
LVCIDR
 &~
DSI_LVCIDR_VCID
;

806 
hdsi
->
In°™˚
->
LVCIDR
 |
CmdCfg
->
VútuÆCh™√lID
;

809 
hdsi
->
In°™˚
->
LPCR
 &~(
DSI_LPCR_DEP
 | 
DSI_LPCR_VSP
 | 
DSI_LPCR_HSP
);

810 
hdsi
->
In°™˚
->
LPCR
 |(
CmdCfg
->
DEPﬁ¨ôy
 | CmdCfg->
VSPﬁ¨ôy
 | CmdCfg->
HSPﬁ¨ôy
);

813 
hdsi
->
In°™˚
->
LCOLCR
 &~
DSI_LCOLCR_COLC
;

814 
hdsi
->
In°™˚
->
LCOLCR
 |
CmdCfg
->
Cﬁ‹Codög
;

817 
hdsi
->
In°™˚
->
WCFGR
 &~
DSI_WCFGR_COLMUX
;

818 
hdsi
->
In°™˚
->
WCFGR
 |((
CmdCfg
->
Cﬁ‹Codög
)<<1);

821 
hdsi
->
In°™˚
->
LCCR
 &~
DSI_LCCR_CMDSIZE
;

822 
hdsi
->
In°™˚
->
LCCR
 |
CmdCfg
->
Comm™dSize
;

825 
hdsi
->
In°™˚
->
WCFGR
 &~(
DSI_WCFGR_TESRC
 | 
DSI_WCFGR_TEPOL
 | 
DSI_WCFGR_AR
 | 
DSI_WCFGR_VSPOL
);

826 
hdsi
->
In°™˚
->
WCFGR
 |(
CmdCfg
->
TórögEf„˘Sour˚
 | CmdCfg->
TórögEf„˘Pﬁ¨ôy
 | CmdCfg->
Autom©icRe‰esh
 | CmdCfg->
VSyncPﬁ
);

829 
hdsi
->
In°™˚
->
CMCR
 &~
DSI_CMCR_TEARE
;

830 
hdsi
->
In°™˚
->
CMCR
 |
CmdCfg
->
TEAcknowÀdgeReque°
;

833 
	`__HAL_DSI_ENABLE_IT
(
hdsi
, 
DSI_IT_TE
);

836 
	`__HAL_DSI_ENABLE_IT
(
hdsi
, 
DSI_IT_ER
);

839 
	`__HAL_UNLOCK
(
hdsi
);

841  
HAL_OK
;

842 
	}
}

853 
HAL_SètusTy≥Def
 
	$HAL_DSI_C⁄figComm™d
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_LPCmdTy≥Def
 *
LPCmd
)

856 
	`__HAL_LOCK
(
hdsi
);

858 
	`as£π_∑øm
(
	`IS_DSI_LP_GSW0P
(
LPCmd
->
LPGíSh‹tWrôeNoP
));

859 
	`as£π_∑øm
(
	`IS_DSI_LP_GSW1P
(
LPCmd
->
LPGíSh‹tWrôeO√P
));

860 
	`as£π_∑øm
(
	`IS_DSI_LP_GSW2P
(
LPCmd
->
LPGíSh‹tWrôeTwoP
));

861 
	`as£π_∑øm
(
	`IS_DSI_LP_GSR0P
(
LPCmd
->
LPGíSh‹tRódNoP
));

862 
	`as£π_∑øm
(
	`IS_DSI_LP_GSR1P
(
LPCmd
->
LPGíSh‹tRódO√P
));

863 
	`as£π_∑øm
(
	`IS_DSI_LP_GSR2P
(
LPCmd
->
LPGíSh‹tRódTwoP
));

864 
	`as£π_∑øm
(
	`IS_DSI_LP_GLW
(
LPCmd
->
LPGíL⁄gWrôe
));

865 
	`as£π_∑øm
(
	`IS_DSI_LP_DSW0P
(
LPCmd
->
LPDcsSh‹tWrôeNoP
));

866 
	`as£π_∑øm
(
	`IS_DSI_LP_DSW1P
(
LPCmd
->
LPDcsSh‹tWrôeO√P
));

867 
	`as£π_∑øm
(
	`IS_DSI_LP_DSR0P
(
LPCmd
->
LPDcsSh‹tRódNoP
));

868 
	`as£π_∑øm
(
	`IS_DSI_LP_DLW
(
LPCmd
->
LPDcsL⁄gWrôe
));

869 
	`as£π_∑øm
(
	`IS_DSI_LP_MRDP
(
LPCmd
->
LPMaxRódPackë
));

870 
	`as£π_∑øm
(
	`IS_DSI_ACK_REQUEST
(
LPCmd
->
AcknowÀdgeReque°
));

873 
hdsi
->
In°™˚
->
CMCR
 &~(
DSI_CMCR_GSW0TX
 |\

874 
DSI_CMCR_GSW1TX
 |\

875 
DSI_CMCR_GSW2TX
 |\

876 
DSI_CMCR_GSR0TX
 |\

877 
DSI_CMCR_GSR1TX
 |\

878 
DSI_CMCR_GSR2TX
 |\

879 
DSI_CMCR_GLWTX
 |\

880 
DSI_CMCR_DSW0TX
 |\

881 
DSI_CMCR_DSW1TX
 |\

882 
DSI_CMCR_DSR0TX
 |\

883 
DSI_CMCR_DLWTX
 |\

884 
DSI_CMCR_MRDPS
);

885 
hdsi
->
In°™˚
->
CMCR
 |(
LPCmd
->
LPGíSh‹tWrôeNoP
 |\

886 
LPCmd
->
LPGíSh‹tWrôeO√P
 |\

887 
LPCmd
->
LPGíSh‹tWrôeTwoP
 |\

888 
LPCmd
->
LPGíSh‹tRódNoP
 |\

889 
LPCmd
->
LPGíSh‹tRódO√P
 |\

890 
LPCmd
->
LPGíSh‹tRódTwoP
 |\

891 
LPCmd
->
LPGíL⁄gWrôe
 |\

892 
LPCmd
->
LPDcsSh‹tWrôeNoP
 |\

893 
LPCmd
->
LPDcsSh‹tWrôeO√P
 |\

894 
LPCmd
->
LPDcsSh‹tRódNoP
 |\

895 
LPCmd
->
LPDcsL⁄gWrôe
 |\

896 
LPCmd
->
LPMaxRódPackë
);

899 
hdsi
->
In°™˚
->
CMCR
 &~
DSI_CMCR_ARE
;

900 
hdsi
->
In°™˚
->
CMCR
 |
LPCmd
->
AcknowÀdgeReque°
;

903 
	`__HAL_UNLOCK
(
hdsi
);

905  
HAL_OK
;

906 
	}
}

916 
HAL_SètusTy≥Def
 
	$HAL_DSI_C⁄figFlowC⁄åﬁ
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
FlowC⁄åﬁ
)

919 
	`__HAL_LOCK
(
hdsi
);

922 
	`as£π_∑øm
(
	`IS_DSI_FLOW_CONTROL
(
FlowC⁄åﬁ
));

925 
hdsi
->
In°™˚
->
PCR
 &~
DSI_FLOW_CONTROL_ALL
;

926 
hdsi
->
In°™˚
->
PCR
 |
FlowC⁄åﬁ
;

929 
	`__HAL_UNLOCK
(
hdsi
);

931  
HAL_OK
;

932 
	}
}

942 
HAL_SètusTy≥Def
 
	$HAL_DSI_C⁄figPhyTimî
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_PHY_TimîTy≥Def
 *
PhyTimîs
)

945 
	`__HAL_LOCK
(
hdsi
);

948 
hdsi
->
In°™˚
->
CLTCR
 &~(
DSI_CLTCR_LP2HS_TIME
 | 
DSI_CLTCR_HS2LP_TIME
);

949 
hdsi
->
In°™˚
->
CLTCR
 |(
PhyTimîs
->
ClockL™eLP2HSTime
 | ((PhyTimîs->
ClockL™eHS2LPTime
)<<16));

952 
hdsi
->
In°™˚
->
DLTCR
 &~(
DSI_DLTCR_MRD_TIME
 | 
DSI_DLTCR_LP2HS_TIME
 | 
DSI_DLTCR_HS2LP_TIME
);

953 
hdsi
->
In°™˚
->
DLTCR
 |(
PhyTimîs
->
D©aL™eMaxRódTime
 | ((PhyTimîs->
D©aL™eLP2HSTime
)<<16Ë| ((PhyTimîs->
D©aL™eHS2LPTime
)<<24));

956 
hdsi
->
In°™˚
->
PCONFR
 &~
DSI_PCONFR_SW_TIME
;

957 
hdsi
->
In°™˚
->
PCONFR
 |((
PhyTimîs
->
St›WaôTime
)<<8);

960 
	`__HAL_UNLOCK
(
hdsi
);

962  
HAL_OK
;

963 
	}
}

973 
HAL_SètusTy≥Def
 
	$HAL_DSI_C⁄figHo°Timeouts
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
DSI_HOST_TimeoutTy≥Def
 *
Ho°Timeouts
)

976 
	`__HAL_LOCK
(
hdsi
);

979 
hdsi
->
In°™˚
->
CCR
 &~
DSI_CCR_TOCKDIV
;

980 
hdsi
->
In°™˚
->
CCR
 = ((
Ho°Timeouts
->
TimeoutCkdiv
)<<8);

983 
hdsi
->
In°™˚
->
TCCR
[0] &~
DSI_TCCR1_HSTX_TOCNT
;

984 
hdsi
->
In°™˚
->
TCCR
[0] |((
Ho°Timeouts
->
HighS≥edTønsmissi⁄Timeout
)<<16);

987 
hdsi
->
In°™˚
->
TCCR
[0] &~
DSI_TCCR1_LPRX_TOCNT
;

988 
hdsi
->
In°™˚
->
TCCR
[0] |
Ho°Timeouts
->
LowPowîRe˚±i⁄Timeout
;

991 
hdsi
->
In°™˚
->
TCCR
[1] &~
DSI_TCCR2_HSRD_TOCNT
;

992 
hdsi
->
In°™˚
->
TCCR
[1] |
Ho°Timeouts
->
HighS≥edRódTimeout
;

995 
hdsi
->
In°™˚
->
TCCR
[2] &~
DSI_TCCR3_LPRD_TOCNT
;

996 
hdsi
->
In°™˚
->
TCCR
[2] |
Ho°Timeouts
->
LowPowîRódTimeout
;

999 
hdsi
->
In°™˚
->
TCCR
[3] &~
DSI_TCCR4_HSWR_TOCNT
;

1000 
hdsi
->
In°™˚
->
TCCR
[3] |
Ho°Timeouts
->
HighS≥edWrôeTimeout
;

1003 
hdsi
->
In°™˚
->
TCCR
[3] &~
DSI_TCCR4_PM
;

1004 
hdsi
->
In°™˚
->
TCCR
[3] |
Ho°Timeouts
->
HighS≥edWrôePª•Mode
;

1007 
hdsi
->
In°™˚
->
TCCR
[4] &~
DSI_TCCR5_LPWR_TOCNT
;

1008 
hdsi
->
In°™˚
->
TCCR
[4] |
Ho°Timeouts
->
LowPowîWrôeTimeout
;

1011 
hdsi
->
In°™˚
->
TCCR
[5] &~
DSI_TCCR6_BTA_TOCNT
;

1012 
hdsi
->
In°™˚
->
TCCR
[5] |
Ho°Timeouts
->
BTATimeout
;

1015 
	`__HAL_UNLOCK
(
hdsi
);

1017  
HAL_OK
;

1018 
	}
}

1026 
HAL_SètusTy≥Def
 
	$HAL_DSI_Sèπ
(
DSI_H™dÀTy≥Def
 *
hdsi
)

1029 
	`__HAL_LOCK
(
hdsi
);

1032 
	`__HAL_DSI_ENABLE
(
hdsi
);

1035 
	`__HAL_DSI_WRAPPER_ENABLE
(
hdsi
);

1038 
	`__HAL_UNLOCK
(
hdsi
);

1040  
HAL_OK
;

1041 
	}
}

1049 
HAL_SètusTy≥Def
 
	$HAL_DSI_St›
(
DSI_H™dÀTy≥Def
 *
hdsi
)

1052 
	`__HAL_LOCK
(
hdsi
);

1055 
	`__HAL_DSI_DISABLE
(
hdsi
);

1058 
	`__HAL_DSI_WRAPPER_DISABLE
(
hdsi
);

1061 
	`__HAL_UNLOCK
(
hdsi
);

1063  
HAL_OK
;

1064 
	}
}

1072 
HAL_SètusTy≥Def
 
	$HAL_DSI_Re‰esh
(
DSI_H™dÀTy≥Def
 *
hdsi
)

1075 
	`__HAL_LOCK
(
hdsi
);

1078 
hdsi
->
In°™˚
->
WCR
 |
DSI_WCR_LTDCEN
;

1081 
	`__HAL_UNLOCK
(
hdsi
);

1083  
HAL_OK
;

1084 
	}
}

1094 
HAL_SètusTy≥Def
 
	$HAL_DSI_Cﬁ‹Mode
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Cﬁ‹Mode
)

1097 
	`__HAL_LOCK
(
hdsi
);

1100 
	`as£π_∑øm
(
	`IS_DSI_COLOR_MODE
(
Cﬁ‹Mode
));

1103 
hdsi
->
In°™˚
->
WCR
 &~
DSI_WCR_COLM
;

1104 
hdsi
->
In°™˚
->
WCR
 |
Cﬁ‹Mode
;

1107 
	`__HAL_UNLOCK
(
hdsi
);

1109  
HAL_OK
;

1110 
	}
}

1120 
HAL_SètusTy≥Def
 
	$HAL_DSI_Shutdown
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Shutdown
)

1123 
	`__HAL_LOCK
(
hdsi
);

1126 
	`as£π_∑øm
(
	`IS_DSI_SHUT_DOWN
(
Shutdown
));

1129 
hdsi
->
In°™˚
->
WCR
 &~
DSI_WCR_SHTDN
;

1130 
hdsi
->
In°™˚
->
WCR
 |
Shutdown
;

1133 
	`__HAL_UNLOCK
(
hdsi
);

1135  
HAL_OK
;

1136 
	}
}

1151 
HAL_SètusTy≥Def
 
	$HAL_DSI_Sh‹tWrôe
(
DSI_H™dÀTy≥Def
 *
hdsi
,

1152 
uöt32_t
 
Ch™√lID
,

1153 
uöt32_t
 
Mode
,

1154 
uöt32_t
 
P¨am1
,

1155 
uöt32_t
 
P¨am2
)

1157 
uöt32_t
 
tick°¨t
 = 0;

1160 
	`__HAL_LOCK
(
hdsi
);

1163 
	`as£π_∑øm
(
	`IS_DSI_SHORT_WRITE_PACKET_TYPE
(
Mode
));

1166 
tick°¨t
 = 
	`HAL_GëTick
();

1169 (
hdsi
->
In°™˚
->
GPSR
 & 
DSI_GPSR_CMDFE
) == 0)

1172 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1175 
	`__HAL_UNLOCK
(
hdsi
);

1177  
HAL_TIMEOUT
;

1182 
	`DSI_C⁄figPackëHódî
(
hdsi
->
In°™˚
,

1183 
Ch™√lID
,

1184 
Mode
,

1185 
P¨am1
,

1186 
P¨am2
);

1189 
	`__HAL_UNLOCK
(
hdsi
);

1191  
HAL_OK
;

1192 
	}
}

1208 
HAL_SètusTy≥Def
 
	$HAL_DSI_L⁄gWrôe
(
DSI_H™dÀTy≥Def
 *
hdsi
,

1209 
uöt32_t
 
Ch™√lID
,

1210 
uöt32_t
 
Mode
,

1211 
uöt32_t
 
NbP¨ams
,

1212 
uöt32_t
 
P¨am1
,

1213 
uöt8_t
* 
P¨amëîsTabÀ
)

1215 
uöt32_t
 
uicou¡î
 = 0;

1216 
uöt32_t
 
tick°¨t
 = 0;

1219 
	`__HAL_LOCK
(
hdsi
);

1222 
	`as£π_∑øm
(
	`IS_DSI_LONG_WRITE_PACKET_TYPE
(
Mode
));

1225 
tick°¨t
 = 
	`HAL_GëTick
();

1228 (
hdsi
->
In°™˚
->
GPSR
 & 
DSI_GPSR_CMDFE
Ë=
RESET
)

1231 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1234 
	`__HAL_UNLOCK
(
hdsi
);

1236  
HAL_TIMEOUT
;

1241 
uicou¡î
 < 
NbP¨ams
)

1243 if(
uicou¡î
 == 0x00)

1245 
hdsi
->
In°™˚
->
GPDR
=(
P¨am1
 | \

1246 ((*(
P¨amëîsTabÀ
+
uicou¡î
))<<8) | \

1247 ((*(
P¨amëîsTabÀ
+
uicou¡î
+1))<<16) | \

1248 ((*(
P¨amëîsTabÀ
+
uicou¡î
+2))<<24));

1249 
uicou¡î
 += 3;

1253 
hdsi
->
In°™˚
->
GPDR
=((*(
P¨amëîsTabÀ
+
uicou¡î
)) | \

1254 ((*(
P¨amëîsTabÀ
+
uicou¡î
+1))<<8) | \

1255 ((*(
P¨amëîsTabÀ
+
uicou¡î
+2))<<16) | \

1256 ((*(
P¨amëîsTabÀ
+
uicou¡î
+3))<<24));

1257 
uicou¡î
+=4;

1262 
	`DSI_C⁄figPackëHódî
(
hdsi
->
In°™˚
,

1263 
Ch™√lID
,

1264 
Mode
,

1265 ((
NbP¨ams
+1)&0x00FF),

1266 (((
NbP¨ams
+1)&0xFF00)>>8));

1269 
	`__HAL_UNLOCK
(
hdsi
);

1271  
HAL_OK
;

1272 
	}
}

1287 
HAL_SètusTy≥Def
 
	$HAL_DSI_Ród
(
DSI_H™dÀTy≥Def
 *
hdsi
,

1288 
uöt32_t
 
Ch™√lNbr
,

1289 
uöt8_t
* 
Aºay
,

1290 
uöt32_t
 
Size
,

1291 
uöt32_t
 
Mode
,

1292 
uöt32_t
 
DCSCmd
,

1293 
uöt8_t
* 
P¨amëîsTabÀ
)

1295 
uöt32_t
 
tick°¨t
 = 0;

1298 
	`__HAL_LOCK
(
hdsi
);

1301 
	`as£π_∑øm
(
	`IS_DSI_READ_PACKET_TYPE
(
Mode
));

1303 if(
Size
 > 2)

1306 
	`HAL_DSI_Sh‹tWrôe
(
hdsi
, 
Ch™√lNbr
, 
DSI_MAX_RETURN_PKT_SIZE
, ((
Size
)&0xFF), (((Size)>>8)&0xFF));

1310 i‡(
Mode
 =
DSI_DCS_SHORT_PKT_READ
)

1312 
	`DSI_C⁄figPackëHódî
(
hdsi
->
In°™˚
, 
Ch™√lNbr
, 
Mode
, 
DCSCmd
, 0);

1314 i‡(
Mode
 =
DSI_GEN_SHORT_PKT_READ_P0
)

1316 
	`DSI_C⁄figPackëHódî
(
hdsi
->
In°™˚
, 
Ch™√lNbr
, 
Mode
, 0, 0);

1318 i‡(
Mode
 =
DSI_GEN_SHORT_PKT_READ_P1
)

1320 
	`DSI_C⁄figPackëHódî
(
hdsi
->
In°™˚
, 
Ch™√lNbr
, 
Mode
, 
P¨amëîsTabÀ
[0], 0);

1322 i‡(
Mode
 =
DSI_GEN_SHORT_PKT_READ_P2
)

1324 
	`DSI_C⁄figPackëHódî
(
hdsi
->
In°™˚
, 
Ch™√lNbr
, 
Mode
, 
P¨amëîsTabÀ
[0], ParametersTable[1]);

1328 
tick°¨t
 = 
	`HAL_GëTick
();

1331 (
hdsi
->
In°™˚
->
GPSR
 & 
DSI_GPSR_PRDFE
) == DSI_GPSR_PRDFE)

1334 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1337 
	`__HAL_UNLOCK
(
hdsi
);

1339  
HAL_TIMEOUT
;

1344 *((
uöt32_t
 *)
Aºay
Ë(
hdsi
->
In°™˚
->
GPDR
);

1345 i‡(
Size
 > 4)

1347 
Size
 -= 4;

1348 
Aºay
 += 4;

1353 
	`__HAL_UNLOCK
(
hdsi
);

1355  
HAL_OK
;

1359 
tick°¨t
 = 
	`HAL_GëTick
();

1362 (()(
Size
)) > 0)

1364 if((
hdsi
->
In°™˚
->
GPSR
 & 
DSI_GPSR_PRDFE
) == 0)

1366 *((
uöt32_t
 *)
Aºay
Ë(
hdsi
->
In°™˚
->
GPDR
);

1367 
Size
 -= 4;

1368 
Aºay
 += 4;

1372 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1375 
	`__HAL_UNLOCK
(
hdsi
);

1377  
HAL_TIMEOUT
;

1382 
	`__HAL_UNLOCK
(
hdsi
);

1384  
HAL_OK
;

1385 
	}
}

1394 
HAL_SètusTy≥Def
 
	$HAL_DSI_E¡îULPMD©a
(
DSI_H™dÀTy≥Def
 *
hdsi
)

1396 
uöt32_t
 
tick°¨t
 = 0;

1399 
	`__HAL_LOCK
(
hdsi
);

1402 
hdsi
->
In°™˚
->
PUCR
 |
DSI_PUCR_URDL
;

1405 
tick°¨t
 = 
	`HAL_GëTick
();

1408 if((
hdsi
->
In°™˚
->
PCONFR
 & 
DSI_PCONFR_NL
Ë=
DSI_ONE_DATA_LANE
)

1410 (
hdsi
->
In°™˚
->
PSR
 & 
DSI_PSR_UAN0
Ë!
RESET
)

1413 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1416 
	`__HAL_UNLOCK
(
hdsi
);

1418  
HAL_TIMEOUT
;

1422 i‡((
hdsi
->
In°™˚
->
PCONFR
 & 
DSI_PCONFR_NL
Ë=
DSI_TWO_DATA_LANES
)

1424 (
hdsi
->
In°™˚
->
PSR
 & (
DSI_PSR_UAN0
 | 
DSI_PSR_UAN1
)Ë!
RESET
)

1427 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1430 
	`__HAL_UNLOCK
(
hdsi
);

1432  
HAL_TIMEOUT
;

1438 
	`__HAL_UNLOCK
(
hdsi
);

1440  
HAL_OK
;

1441 
	}
}

1450 
HAL_SètusTy≥Def
 
	$HAL_DSI_ExôULPMD©a
(
DSI_H™dÀTy≥Def
 *
hdsi
)

1452 
uöt32_t
 
tick°¨t
 = 0;

1455 
	`__HAL_LOCK
(
hdsi
);

1458 
hdsi
->
In°™˚
->
PUCR
 |
DSI_PUCR_UEDL
;

1461 
tick°¨t
 = 
	`HAL_GëTick
();

1464 if((
hdsi
->
In°™˚
->
PCONFR
 & 
DSI_PCONFR_NL
Ë=
DSI_ONE_DATA_LANE
)

1466 (
hdsi
->
In°™˚
->
PSR
 & 
DSI_PSR_UAN0
) != DSI_PSR_UAN0)

1469 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1472 
	`__HAL_UNLOCK
(
hdsi
);

1474  
HAL_TIMEOUT
;

1478 i‡((
hdsi
->
In°™˚
->
PCONFR
 & 
DSI_PCONFR_NL
Ë=
DSI_TWO_DATA_LANES
)

1480 (
hdsi
->
In°™˚
->
PSR
 & (
DSI_PSR_UAN0
 | 
DSI_PSR_UAN1
)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1))

1483 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1486 
	`__HAL_UNLOCK
(
hdsi
);

1488  
HAL_TIMEOUT
;

1494 
hdsi
->
In°™˚
->
PUCR
 = 0;

1497 
	`__HAL_UNLOCK
(
hdsi
);

1499  
HAL_OK
;

1500 
	}
}

1509 
HAL_SètusTy≥Def
 
	$HAL_DSI_E¡îULPM
(
DSI_H™dÀTy≥Def
 *
hdsi
)

1511 
uöt32_t
 
tick°¨t
 = 0;

1514 
	`__HAL_LOCK
(
hdsi
);

1517 
hdsi
->
In°™˚
->
CLCR
 &~
DSI_CLCR_DPCC
;

1520 
	`__HAL_RCC_DSI_CONFIG
(
RCC_DSICLKSOURCE_PLLR
);

1523 
hdsi
->
In°™˚
->
PUCR
 |(
DSI_PUCR_URCL
 | 
DSI_PUCR_URDL
);

1526 
tick°¨t
 = 
	`HAL_GëTick
();

1529 if((
hdsi
->
In°™˚
->
PCONFR
 & 
DSI_PCONFR_NL
Ë=
DSI_ONE_DATA_LANE
)

1531 (
hdsi
->
In°™˚
->
PSR
 & (
DSI_PSR_UAN0
 | 
DSI_PSR_UANC
)Ë!
RESET
)

1534 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1537 
	`__HAL_UNLOCK
(
hdsi
);

1539  
HAL_TIMEOUT
;

1543 i‡((
hdsi
->
In°™˚
->
PCONFR
 & 
DSI_PCONFR_NL
Ë=
DSI_TWO_DATA_LANES
)

1545 (
hdsi
->
In°™˚
->
PSR
 & (
DSI_PSR_UAN0
 | 
DSI_PSR_UAN1
 | 
DSI_PSR_UANC
)Ë!
RESET
)

1548 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1551 
	`__HAL_UNLOCK
(
hdsi
);

1553  
HAL_TIMEOUT
;

1559 
	`__HAL_DSI_PLL_DISABLE
(
hdsi
);

1562 
	`__HAL_UNLOCK
(
hdsi
);

1564  
HAL_OK
;

1565 
	}
}

1574 
HAL_SètusTy≥Def
 
	$HAL_DSI_ExôULPM
(
DSI_H™dÀTy≥Def
 *
hdsi
)

1576 
uöt32_t
 
tick°¨t
 = 0;

1579 
	`__HAL_LOCK
(
hdsi
);

1582 
	`__HAL_DSI_PLL_ENABLE
(
hdsi
);

1585 
tick°¨t
 = 
	`HAL_GëTick
();

1588 
	`__HAL_DSI_GET_FLAG
(
hdsi
, 
DSI_FLAG_PLLLS
Ë=
RESET
)

1591 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1594 
	`__HAL_UNLOCK
(
hdsi
);

1596  
HAL_TIMEOUT
;

1601 
hdsi
->
In°™˚
->
PUCR
 |(
DSI_PUCR_UECL
 | 
DSI_PUCR_UEDL
);

1604 
tick°¨t
 = 
	`HAL_GëTick
();

1607 if((
hdsi
->
In°™˚
->
PCONFR
 & 
DSI_PCONFR_NL
Ë=
DSI_ONE_DATA_LANE
)

1609 (
hdsi
->
In°™˚
->
PSR
 & (
DSI_PSR_UAN0
 | 
DSI_PSR_UANC
)) != (DSI_PSR_UAN0 | DSI_PSR_UANC))

1612 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1615 
	`__HAL_UNLOCK
(
hdsi
);

1617  
HAL_TIMEOUT
;

1621 i‡((
hdsi
->
In°™˚
->
PCONFR
 & 
DSI_PCONFR_NL
Ë=
DSI_TWO_DATA_LANES
)

1623 (
hdsi
->
In°™˚
->
PSR
 & (
DSI_PSR_UAN0
 | 
DSI_PSR_UAN1
 | 
DSI_PSR_UANC
)) != (DSI_PSR_UAN0 | DSI_PSR_UAN1 | DSI_PSR_UANC))

1626 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
DSI_TIMEOUT_VALUE
)

1629 
	`__HAL_UNLOCK
(
hdsi
);

1631  
HAL_TIMEOUT
;

1637 
hdsi
->
In°™˚
->
PUCR
 = 0;

1640 
	`__HAL_RCC_DSI_CONFIG
(
RCC_DSICLKSOURCE_DSIPHY
);

1643 
hdsi
->
In°™˚
->
CLCR
 |
DSI_CLCR_DPCC
;

1646 
	`__HAL_UNLOCK
(
hdsi
);

1648  
HAL_OK
;

1649 
	}
}

1665 
HAL_SètusTy≥Def
 
	$HAL_DSI_P©ã∫Gíî©‹Sèπ
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Mode
, uöt32_à
Orõ¡©i⁄
)

1668 
	`__HAL_LOCK
(
hdsi
);

1671 
hdsi
->
In°™˚
->
VMCR
 &~(
DSI_VMCR_PGM
 | 
DSI_VMCR_PGO
);

1672 
hdsi
->
In°™˚
->
VMCR
 |((
Mode
<<20Ë| (
Orõ¡©i⁄
<<24));

1675 
hdsi
->
In°™˚
->
VMCR
 |
DSI_VMCR_PGE
;

1678 
	`__HAL_UNLOCK
(
hdsi
);

1680  
HAL_OK
;

1681 
	}
}

1689 
HAL_SètusTy≥Def
 
	$HAL_DSI_P©ã∫Gíî©‹St›
(
DSI_H™dÀTy≥Def
 *
hdsi
)

1692 
	`__HAL_LOCK
(
hdsi
);

1695 
hdsi
->
In°™˚
->
VMCR
 &~
DSI_VMCR_PGE
;

1698 
	`__HAL_UNLOCK
(
hdsi
);

1700  
HAL_OK
;

1701 
	}
}

1714 
HAL_SètusTy≥Def
 
	$HAL_DSI_SëSÀwR©eAndDñayTunög
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
CommDñay
, uöt32_à
L™e
, uöt32_à
VÆue
)

1717 
	`__HAL_LOCK
(
hdsi
);

1720 
	`as£π_∑øm
(
	`IS_DSI_COMMUNICATION_DELAY
(
CommDñay
));

1721 
	`as£π_∑øm
(
	`IS_DSI_LANE_GROUP
(
L™e
));

1723 
CommDñay
)

1725 
DSI_SLEW_RATE_HSTX
:

1726 if(
L™e
 =
DSI_CLOCK_LANE
)

1729 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_HSTXSRCCL
;

1730 
hdsi
->
In°™˚
->
WPCR
[1] |
VÆue
<<16;

1732 if(
L™e
 =
DSI_DATA_LANES
)

1735 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_HSTXSRCDL
;

1736 
hdsi
->
In°™˚
->
WPCR
[1] |
VÆue
<<18;

1739 
DSI_SLEW_RATE_LPTX
:

1740 if(
L™e
 =
DSI_CLOCK_LANE
)

1743 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_LPSRCCL
;

1744 
hdsi
->
In°™˚
->
WPCR
[1] |
VÆue
<<6;

1746 if(
L™e
 =
DSI_DATA_LANES
)

1749 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_LPSRCDL
;

1750 
hdsi
->
In°™˚
->
WPCR
[1] |
VÆue
<<8;

1753 
DSI_HS_DELAY
:

1754 if(
L™e
 =
DSI_CLOCK_LANE
)

1757 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_HSTXDCL
;

1758 
hdsi
->
In°™˚
->
WPCR
[1] |
VÆue
;

1760 if(
L™e
 =
DSI_DATA_LANES
)

1763 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_HSTXDDL
;

1764 
hdsi
->
In°™˚
->
WPCR
[1] |
VÆue
<<2;

1772 
	`__HAL_UNLOCK
(
hdsi
);

1774  
HAL_OK
;

1775 
	}
}

1784 
HAL_SètusTy≥Def
 
	$HAL_DSI_SëLowPowîRXFûãr
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Fªquícy
)

1787 
	`__HAL_LOCK
(
hdsi
);

1790 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_LPRXFT
;

1791 
hdsi
->
In°™˚
->
WPCR
[1] |
Fªquícy
<<25;

1794 
	`__HAL_UNLOCK
(
hdsi
);

1796  
HAL_OK
;

1797 
	}
}

1807 
HAL_SètusTy≥Def
 
	$HAL_DSI_SëSDD
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
)

1810 
	`__HAL_LOCK
(
hdsi
);

1813 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
Sèã
));

1816 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_SDDC
;

1817 
hdsi
->
In°™˚
->
WPCR
[1] |
Sèã
<<12;

1820 
	`__HAL_UNLOCK
(
hdsi
);

1822  
HAL_OK
;

1823 
	}
}

1836 
HAL_SètusTy≥Def
 
	$HAL_DSI_SëL™ePösC⁄figuøti⁄
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Cu°omL™e
, uöt32_à
L™e
, 
Fun˘i⁄ÆSèã
 
Sèã
)

1839 
	`__HAL_LOCK
(
hdsi
);

1842 
	`as£π_∑øm
(
	`IS_DSI_CUSTOM_LANE
(
Cu°omL™e
));

1843 
	`as£π_∑øm
(
	`IS_DSI_LANE
(
L™e
));

1844 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
Sèã
));

1846 
Cu°omL™e
)

1848 
DSI_SWAP_LANE_PINS
:

1849 if(
L™e
 =
DSI_CLOCK_LANE
)

1852 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_SWCL
;

1853 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<6);

1855 if(
L™e
 =
DSI_DATA_LANE0
)

1858 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_SWDL0
;

1859 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<7);

1861 if(
L™e
 =
DSI_DATA_LANE1
)

1864 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_SWDL1
;

1865 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<8);

1868 
DSI_INVERT_HS_SIGNAL
:

1869 if(
L™e
 =
DSI_CLOCK_LANE
)

1872 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_HSICL
;

1873 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<9);

1875 if(
L™e
 =
DSI_DATA_LANE0
)

1878 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_HSIDL0
;

1879 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<10);

1881 if(
L™e
 =
DSI_DATA_LANE1
)

1884 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_HSIDL1
;

1885 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<11);

1893 
	`__HAL_UNLOCK
(
hdsi
);

1895  
HAL_OK
;

1896 
	}
}

1908 
HAL_SètusTy≥Def
 
	$HAL_DSI_SëPHYTimögs
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
Timög
, 
Fun˘i⁄ÆSèã
 
Sèã
, uöt32_à
VÆue
)

1911 
	`__HAL_LOCK
(
hdsi
);

1914 
	`as£π_∑øm
(
	`IS_DSI_PHY_TIMING
(
Timög
));

1915 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
Sèã
));

1917 
Timög
)

1919 
DSI_TCLK_POST
:

1921 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_TCLKPOSTEN
;

1922 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<27);

1924 if(
Sèã
)

1927 
hdsi
->
In°™˚
->
WPCR
[4] &~
DSI_WPCR5_TCLKPOST
;

1928 
hdsi
->
In°™˚
->
WPCR
[4] |
VÆue
;

1932 
DSI_TLPX_CLK
:

1934 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_TLPXCEN
;

1935 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<26);

1937 if(
Sèã
)

1940 
hdsi
->
In°™˚
->
WPCR
[3] &~
DSI_WPCR4_TLPXC
;

1941 
hdsi
->
In°™˚
->
WPCR
[3] |
VÆue
;

1945 
DSI_THS_EXIT
:

1947 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_THSEXITEN
;

1948 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<25);

1950 if(
Sèã
)

1953 
hdsi
->
In°™˚
->
WPCR
[3] &~
DSI_WPCR4_THSEXIT
;

1954 
hdsi
->
In°™˚
->
WPCR
[3] |
VÆue
;

1958 
DSI_TLPX_DATA
:

1960 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_TLPXDEN
;

1961 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<24);

1963 if(
Sèã
)

1966 
hdsi
->
In°™˚
->
WPCR
[3] &~
DSI_WPCR4_TLPXD
;

1967 
hdsi
->
In°™˚
->
WPCR
[3] |
VÆue
;

1971 
DSI_THS_ZERO
:

1973 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_THSZEROEN
;

1974 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<23);

1976 if(
Sèã
)

1979 
hdsi
->
In°™˚
->
WPCR
[3] &~
DSI_WPCR4_THSZERO
;

1980 
hdsi
->
In°™˚
->
WPCR
[3] |
VÆue
;

1984 
DSI_THS_TRAIL
:

1986 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_THSTRAILEN
;

1987 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<22);

1989 if(
Sèã
)

1992 
hdsi
->
In°™˚
->
WPCR
[2] &~
DSI_WPCR3_THSTRAIL
;

1993 
hdsi
->
In°™˚
->
WPCR
[2] |
VÆue
;

1997 
DSI_THS_PREPARE
:

1999 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_THSPREPEN
;

2000 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<21);

2002 if(
Sèã
)

2005 
hdsi
->
In°™˚
->
WPCR
[2] &~
DSI_WPCR3_THSPREP
;

2006 
hdsi
->
In°™˚
->
WPCR
[2] |
VÆue
;

2010 
DSI_TCLK_ZERO
:

2012 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_TCLKZEROEN
;

2013 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<20);

2015 if(
Sèã
)

2018 
hdsi
->
In°™˚
->
WPCR
[2] &~
DSI_WPCR3_TCLKZERO
;

2019 
hdsi
->
In°™˚
->
WPCR
[2] |
VÆue
;

2023 
DSI_TCLK_PREPARE
:

2025 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_TCLKPREPEN
;

2026 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<19);

2028 if(
Sèã
)

2031 
hdsi
->
In°™˚
->
WPCR
[2] &~
DSI_WPCR3_TCLKPREP
;

2032 
hdsi
->
In°™˚
->
WPCR
[2] |
VÆue
;

2041 
	`__HAL_UNLOCK
(
hdsi
);

2043  
HAL_OK
;

2044 
	}
}

2055 
HAL_SètusTy≥Def
 
	$HAL_DSI_F‹˚TXSt›Mode
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
uöt32_t
 
L™e
, 
Fun˘i⁄ÆSèã
 
Sèã
)

2058 
	`__HAL_LOCK
(
hdsi
);

2061 
	`as£π_∑øm
(
	`IS_DSI_LANE_GROUP
(
L™e
));

2062 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
Sèã
));

2064 if(
L™e
 =
DSI_CLOCK_LANE
)

2067 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_FTXSMCL
;

2068 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<12);

2070 if(
L™e
 =
DSI_DATA_LANES
)

2073 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_FTXSMDL
;

2074 
hdsi
->
In°™˚
->
WPCR
[0] |(
Sèã
<<13);

2078 
	`__HAL_UNLOCK
(
hdsi
);

2080  
HAL_OK
;

2081 
	}
}

2090 
HAL_SètusTy≥Def
 
	$HAL_DSI_F‹˚RXLowPowî
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
)

2093 
	`__HAL_LOCK
(
hdsi
);

2096 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
Sèã
));

2099 
hdsi
->
In°™˚
->
WPCR
[1] &~
DSI_WPCR2_FLPRXLPM
;

2100 
hdsi
->
In°™˚
->
WPCR
[1] |
Sèã
<<22;

2103 
	`__HAL_UNLOCK
(
hdsi
);

2105  
HAL_OK
;

2106 
	}
}

2115 
HAL_SètusTy≥Def
 
	$HAL_DSI_F‹˚D©aL™esInRX
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
)

2118 
	`__HAL_LOCK
(
hdsi
);

2121 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
Sèã
));

2124 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_TDDL
;

2125 
hdsi
->
In°™˚
->
WPCR
[0] |
Sèã
<<16;

2128 
	`__HAL_UNLOCK
(
hdsi
);

2130  
HAL_OK
;

2131 
	}
}

2140 
HAL_SètusTy≥Def
 
	$HAL_DSI_SëPuŒDown
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
)

2143 
	`__HAL_LOCK
(
hdsi
);

2146 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
Sèã
));

2149 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_PDEN
;

2150 
hdsi
->
In°™˚
->
WPCR
[0] |
Sèã
<<18;

2153 
	`__HAL_UNLOCK
(
hdsi
);

2155  
HAL_OK
;

2156 
	}
}

2165 
HAL_SètusTy≥Def
 
	$HAL_DSI_SëC⁄ã¡i⁄Dëe˘i⁄Off
(
DSI_H™dÀTy≥Def
 *
hdsi
, 
Fun˘i⁄ÆSèã
 
Sèã
)

2168 
	`__HAL_LOCK
(
hdsi
);

2171 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
Sèã
));

2174 
hdsi
->
In°™˚
->
WPCR
[0] &~
DSI_WPCR1_CDOFFDL
;

2175 
hdsi
->
In°™˚
->
WPCR
[0] |
Sèã
<<14;

2178 
	`__HAL_UNLOCK
(
hdsi
);

2180  
HAL_OK
;

2181 
	}
}

2209 
HAL_DSI_SèãTy≥Def
 
	$HAL_DSI_GëSèã
(
DSI_H™dÀTy≥Def
 *
hdsi
)

2211  
hdsi
->
Sèã
;

2212 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_eth.c

102 
	~"°m32f4xx_hÆ.h
"

113 #ifde‡
HAL_ETH_MODULE_ENABLED


115 #i‡
deföed
(
STM32F407xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) ||\

116 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

123 
	#LINKED_STATE_TIMEOUT_VALUE
 ((
uöt32_t
)2000Ë

	)

124 
	#AUTONEGO_COMPLETED_TIMEOUT_VALUE
 ((
uöt32_t
)1000Ë

	)

135 
	`ETH_MACDMAC⁄fig
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt32_t
 
îr
);

136 
	`ETH_MACAddªssC⁄fig
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt32_t
 
MacAddr
, 
uöt8_t
 *
Addr
);

137 
	`ETH_MACRe˚±i⁄E«bÀ
(
ETH_H™dÀTy≥Def
 *
hëh
);

138 
	`ETH_MACRe˚±i⁄DißbÀ
(
ETH_H™dÀTy≥Def
 *
hëh
);

139 
	`ETH_MACTønsmissi⁄E«bÀ
(
ETH_H™dÀTy≥Def
 *
hëh
);

140 
	`ETH_MACTønsmissi⁄DißbÀ
(
ETH_H™dÀTy≥Def
 *
hëh
);

141 
	`ETH_DMATønsmissi⁄E«bÀ
(
ETH_H™dÀTy≥Def
 *
hëh
);

142 
	`ETH_DMATønsmissi⁄DißbÀ
(
ETH_H™dÀTy≥Def
 *
hëh
);

143 
	`ETH_DMARe˚±i⁄E«bÀ
(
ETH_H™dÀTy≥Def
 *
hëh
);

144 
	`ETH_DMARe˚±i⁄DißbÀ
(
ETH_H™dÀTy≥Def
 *
hëh
);

145 
	`ETH_FlushTønsmôFIFO
(
ETH_H™dÀTy≥Def
 *
hëh
);

178 
HAL_SètusTy≥Def
 
	$HAL_ETH_Inô
(
ETH_H™dÀTy≥Def
 *
hëh
)

180 
uöt32_t
 
tm¥eg1
 = 0, 
phyªg
 = 0;

181 
uöt32_t
 
h˛k
 = 60000000;

182 
uöt32_t
 
tick°¨t
 = 0;

183 
uöt32_t
 
îr
 = 
ETH_SUCCESS
;

186 if(
hëh
 =
NULL
)

188  
HAL_ERROR
;

192 
	`as£π_∑øm
(
	`IS_ETH_AUTONEGOTIATION
(
hëh
->
Inô
.
AutoNegŸüti⁄
));

193 
	`as£π_∑øm
(
	`IS_ETH_RX_MODE
(
hëh
->
Inô
.
RxMode
));

194 
	`as£π_∑øm
(
	`IS_ETH_CHECKSUM_MODE
(
hëh
->
Inô
.
ChecksumMode
));

195 
	`as£π_∑øm
(
	`IS_ETH_MEDIA_INTERFACE
(
hëh
->
Inô
.
MedüI¡îÁ˚
));

197 if(
hëh
->
Sèã
 =
HAL_ETH_STATE_RESET
)

200 
hëh
->
Lock
 = 
HAL_UNLOCKED
;

202 
	`HAL_ETH_M•Inô
(
hëh
);

206 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

209 
SYSCFG
->
PMC
 &~(
SYSCFG_PMC_MII_RMII_SEL
);

210 
SYSCFG
->
PMC
 |(
uöt32_t
)
hëh
->
Inô
.
MedüI¡îÁ˚
;

215 (
hëh
->
In°™˚
)->
DMABMR
 |
ETH_DMABMR_SR
;

218 ((
hëh
->
In°™˚
)->
DMABMR
 & 
ETH_DMABMR_SR
Ë!(
uöt32_t
)
RESET
)

224 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACMIIAR
;

226 
tm¥eg1
 &
ETH_MACMIIAR_CR_MASK
;

229 
h˛k
 = 
	`HAL_RCC_GëHCLKFªq
();

232 if((
h˛k
 >= 20000000)&&(hclk < 35000000))

235 
tm¥eg1
 |(
uöt32_t
)
ETH_MACMIIAR_CR_Div16
;

237 if((
h˛k
 >= 35000000)&&(hclk < 60000000))

240 
tm¥eg1
 |(
uöt32_t
)
ETH_MACMIIAR_CR_Div26
;

242 if((
h˛k
 >= 60000000)&&(hclk < 100000000))

245 
tm¥eg1
 |(
uöt32_t
)
ETH_MACMIIAR_CR_Div42
;

247 if((
h˛k
 >= 100000000)&&(hclk < 150000000))

250 
tm¥eg1
 |(
uöt32_t
)
ETH_MACMIIAR_CR_Div62
;

255 
tm¥eg1
 |(
uöt32_t
)
ETH_MACMIIAR_CR_Div102
;

259 (
hëh
->
In°™˚
)->
MACMIIAR
 = (
uöt32_t
)
tm¥eg1
;

263 if((
	`HAL_ETH_WrôePHYRegi°î
(
hëh
, 
PHY_BCR
, 
PHY_RESET
)Ë!
HAL_OK
)

266 
îr
 = 
ETH_ERROR
;

269 
	`ETH_MACDMAC⁄fig
(
hëh
, 
îr
);

272 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

275  
HAL_ERROR
;

279 
	`HAL_Dñay
(
PHY_RESET_DELAY
);

281 if((
hëh
->
Inô
).
AutoNegŸüti⁄
 !
ETH_AUTONEGOTIATION_DISABLE
)

284 
tick°¨t
 = 
	`HAL_GëTick
();

289 
	`HAL_ETH_RódPHYRegi°î
(
hëh
, 
PHY_BSR
, &
phyªg
);

292 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LINKED_STATE_TIMEOUT_VALUE
)

295 
îr
 = 
ETH_ERROR
;

298 
	`ETH_MACDMAC⁄fig
(
hëh
, 
îr
);

300 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

303 
	`__HAL_UNLOCK
(
hëh
);

305  
HAL_TIMEOUT
;

307 } ((
phyªg
 & 
PHY_LINKED_STATUS
) != PHY_LINKED_STATUS));

311 if((
	`HAL_ETH_WrôePHYRegi°î
(
hëh
, 
PHY_BCR
, 
PHY_AUTONEGOTIATION
)Ë!
HAL_OK
)

314 
îr
 = 
ETH_ERROR
;

317 
	`ETH_MACDMAC⁄fig
(
hëh
, 
îr
);

320 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

323  
HAL_ERROR
;

327 
tick°¨t
 = 
	`HAL_GëTick
();

332 
	`HAL_ETH_RódPHYRegi°î
(
hëh
, 
PHY_BSR
, &
phyªg
);

335 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
AUTONEGO_COMPLETED_TIMEOUT_VALUE
)

338 
îr
 = 
ETH_ERROR
;

341 
	`ETH_MACDMAC⁄fig
(
hëh
, 
îr
);

343 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

346 
	`__HAL_UNLOCK
(
hëh
);

348  
HAL_TIMEOUT
;

351 } ((
phyªg
 & 
PHY_AUTONEGO_COMPLETE
) != PHY_AUTONEGO_COMPLETE));

354 if((
	`HAL_ETH_RódPHYRegi°î
(
hëh
, 
PHY_SR
, &
phyªg
)Ë!
HAL_OK
)

357 
îr
 = 
ETH_ERROR
;

360 
	`ETH_MACDMAC⁄fig
(
hëh
, 
îr
);

363 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

366  
HAL_ERROR
;

370 if((
phyªg
 & 
PHY_DUPLEX_STATUS
Ë!(
uöt32_t
)
RESET
)

373 (
hëh
->
Inô
).
Du∂exMode
 = 
ETH_MODE_FULLDUPLEX
;

378 (
hëh
->
Inô
).
Du∂exMode
 = 
ETH_MODE_HALFDUPLEX
;

381 if((
phyªg
 & 
PHY_SPEED_STATUS
) == PHY_SPEED_STATUS)

384 (
hëh
->
Inô
).
S≥ed
 = 
ETH_SPEED_10M
;

389 (
hëh
->
Inô
).
S≥ed
 = 
ETH_SPEED_100M
;

395 
	`as£π_∑øm
(
	`IS_ETH_SPEED
(
hëh
->
Inô
.
S≥ed
));

396 
	`as£π_∑øm
(
	`IS_ETH_DUPLEX_MODE
(
hëh
->
Inô
.
Du∂exMode
));

399 if(
	`HAL_ETH_WrôePHYRegi°î
(
hëh
, 
PHY_BCR
, ((
uöt16_t
)((hëh->
Inô
).
Du∂exMode
 >> 3) |

400 (
uöt16_t
)((
hëh
->
Inô
).
S≥ed
 >> 1))Ë!
HAL_OK
)

403 
îr
 = 
ETH_ERROR
;

406 
	`ETH_MACDMAC⁄fig
(
hëh
, 
îr
);

409 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

412  
HAL_ERROR
;

416 
	`HAL_Dñay
(
PHY_CONFIG_DELAY
);

420 
	`ETH_MACDMAC⁄fig
(
hëh
, 
îr
);

423 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

426  
HAL_OK
;

427 
	}
}

435 
HAL_SètusTy≥Def
 
	$HAL_ETH_DeInô
(
ETH_H™dÀTy≥Def
 *
hëh
)

438 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY
;

441 
	`HAL_ETH_M•DeInô
(
hëh
);

444 
hëh
->
Sèã

HAL_ETH_STATE_RESET
;

447 
	`__HAL_UNLOCK
(
hëh
);

450  
HAL_OK
;

451 
	}
}

462 
HAL_SètusTy≥Def
 
	$HAL_ETH_DMATxDescLi°Inô
(
ETH_H™dÀTy≥Def
 *
hëh
, 
ETH_DMADescTy≥Def
 *
DMATxDescTab
, 
uöt8_t
 *
TxBuff
, 
uöt32_t
 
TxBuffCou¡
)

464 
uöt32_t
 
i
 = 0;

465 
ETH_DMADescTy≥Def
 *
dm©xdesc
;

468 
	`__HAL_LOCK
(
hëh
);

471 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY
;

474 
hëh
->
TxDesc
 = 
DMATxDescTab
;

477 
i
=0; i < 
TxBuffCou¡
; i++)

480 
dm©xdesc
 = 
DMATxDescTab
 + 
i
;

483 
dm©xdesc
->
Sètus
 = 
ETH_DMATXDESC_TCH
;

486 
dm©xdesc
->
Buf„r1Addr
 = (
uöt32_t
)(&
TxBuff
[
i
*
ETH_TX_BUF_SIZE
]);

488 i‡((
hëh
->
Inô
).
ChecksumMode
 =
ETH_CHECKSUM_BY_HARDWARE
)

491 
dm©xdesc
->
Sètus
 |
ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL
;

495 if(
i
 < (
TxBuffCou¡
-1))

498 
dm©xdesc
->
Buf„r2NextDescAddr
 = (
uöt32_t
)(
DMATxDescTab
+
i
+1);

503 
dm©xdesc
->
Buf„r2NextDescAddr
 = (
uöt32_t
Ë
DMATxDescTab
;

508 (
hëh
->
In°™˚
)->
DMATDLAR
 = (
uöt32_t
Ë
DMATxDescTab
;

511 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

514 
	`__HAL_UNLOCK
(
hëh
);

517  
HAL_OK
;

518 
	}
}

529 
HAL_SètusTy≥Def
 
	$HAL_ETH_DMARxDescLi°Inô
(
ETH_H™dÀTy≥Def
 *
hëh
, 
ETH_DMADescTy≥Def
 *
DMARxDescTab
, 
uöt8_t
 *
RxBuff
, 
uöt32_t
 
RxBuffCou¡
)

531 
uöt32_t
 
i
 = 0;

532 
ETH_DMADescTy≥Def
 *
DMARxDesc
;

535 
	`__HAL_LOCK
(
hëh
);

538 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY
;

541 
hëh
->
RxDesc
 = 
DMARxDescTab
;

544 
i
=0; i < 
RxBuffCou¡
; i++)

547 
DMARxDesc
 = 
DMARxDescTab
+
i
;

550 
DMARxDesc
->
Sètus
 = 
ETH_DMARXDESC_OWN
;

553 
DMARxDesc
->
C⁄åﬁBuf„rSize
 = 
ETH_DMARXDESC_RCH
 | 
ETH_RX_BUF_SIZE
;

556 
DMARxDesc
->
Buf„r1Addr
 = (
uöt32_t
)(&
RxBuff
[
i
*
ETH_RX_BUF_SIZE
]);

558 if((
hëh
->
Inô
).
RxMode
 =
ETH_RXINTERRUPT_MODE
)

561 
DMARxDesc
->
C⁄åﬁBuf„rSize
 &~
ETH_DMARXDESC_DIC
;

565 if(
i
 < (
RxBuffCou¡
-1))

568 
DMARxDesc
->
Buf„r2NextDescAddr
 = (
uöt32_t
)(
DMARxDescTab
+
i
+1);

573 
DMARxDesc
->
Buf„r2NextDescAddr
 = (
uöt32_t
)(
DMARxDescTab
);

578 (
hëh
->
In°™˚
)->
DMARDLAR
 = (
uöt32_t
Ë
DMARxDescTab
;

581 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

584 
	`__HAL_UNLOCK
(
hëh
);

587  
HAL_OK
;

588 
	}
}

596 
__wók
 
	$HAL_ETH_M•Inô
(
ETH_H™dÀTy≥Def
 *
hëh
)

601 
	}
}

609 
__wók
 
	$HAL_ETH_M•DeInô
(
ETH_H™dÀTy≥Def
 *
hëh
)

614 
	}
}

650 
HAL_SètusTy≥Def
 
	$HAL_ETH_TønsmôFøme
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt32_t
 
FømeLígth
)

652 
uöt32_t
 
bufcou¡
 = 0, 
size
 = 0, 
i
 = 0;

655 
	`__HAL_LOCK
(
hëh
);

658 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY
;

660 i‡(
FømeLígth
 == 0)

663 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

666 
	`__HAL_UNLOCK
(
hëh
);

668  
HAL_ERROR
;

672 if(((
hëh
->
TxDesc
)->
Sètus
 & 
ETH_DMATXDESC_OWN
Ë!(
uöt32_t
)
RESET
)

675 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY_TX
;

678 
	`__HAL_UNLOCK
(
hëh
);

680  
HAL_ERROR
;

684 i‡(
FømeLígth
 > 
ETH_TX_BUF_SIZE
)

686 
bufcou¡
 = 
FømeLígth
/
ETH_TX_BUF_SIZE
;

687 i‡(
FømeLígth
 % 
ETH_TX_BUF_SIZE
)

689 
bufcou¡
++;

694 
bufcou¡
 = 1;

696 i‡(
bufcou¡
 == 1)

699 
hëh
->
TxDesc
->
Sètus
 |=
ETH_DMATXDESC_FS
|
ETH_DMATXDESC_LS
;

701 
hëh
->
TxDesc
->
C⁄åﬁBuf„rSize
 = (
FømeLígth
 & 
ETH_DMATXDESC_TBS1
);

703 
hëh
->
TxDesc
->
Sètus
 |
ETH_DMATXDESC_OWN
;

705 
hëh
->
TxDesc
(
ETH_DMADescTy≥Def
 *)(hëh->TxDesc->
Buf„r2NextDescAddr
);

709 
i
=0; i< 
bufcou¡
; i++)

712 
hëh
->
TxDesc
->
Sètus
 &~(
ETH_DMATXDESC_FS
 | 
ETH_DMATXDESC_LS
);

714 i‡(
i
 == 0)

717 
hëh
->
TxDesc
->
Sètus
 |
ETH_DMATXDESC_FS
;

721 
hëh
->
TxDesc
->
C⁄åﬁBuf„rSize
 = (
ETH_TX_BUF_SIZE
 & 
ETH_DMATXDESC_TBS1
);

723 i‡(
i
 =(
bufcou¡
-1))

726 
hëh
->
TxDesc
->
Sètus
 |
ETH_DMATXDESC_LS
;

727 
size
 = 
FømeLígth
 - (
bufcou¡
-1)*
ETH_TX_BUF_SIZE
;

728 
hëh
->
TxDesc
->
C⁄åﬁBuf„rSize
 = (
size
 & 
ETH_DMATXDESC_TBS1
);

732 
hëh
->
TxDesc
->
Sètus
 |
ETH_DMATXDESC_OWN
;

734 
hëh
->
TxDesc
 = (
ETH_DMADescTy≥Def
 *)(hëh->TxDesc->
Buf„r2NextDescAddr
);

739 i‡(((
hëh
->
In°™˚
)->
DMASR
 & 
ETH_DMASR_TBUS
Ë!(
uöt32_t
)
RESET
)

742 (
hëh
->
In°™˚
)->
DMASR
 = 
ETH_DMASR_TBUS
;

744 (
hëh
->
In°™˚
)->
DMATPDR
 = 0;

748 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

751 
	`__HAL_UNLOCK
(
hëh
);

754  
HAL_OK
;

755 
	}
}

763 
HAL_SètusTy≥Def
 
	$HAL_ETH_GëRe˚ivedFøme
(
ETH_H™dÀTy≥Def
 *
hëh
)

765 
uöt32_t
 
‰amñígth
 = 0;

768 
	`__HAL_LOCK
(
hëh
);

771 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY
;

775 if(((
hëh
->
RxDesc
->
Sètus
 & 
ETH_DMARXDESC_OWN
Ë=(
uöt32_t
)
RESET
))

778 if(((
hëh
->
RxDesc
->
Sètus
 & 
ETH_DMARXDESC_LS
Ë!(
uöt32_t
)
RESET
))

781 (
hëh
->
RxFømeInfos
).
SegCou¡
++;

784 i‡((
hëh
->
RxFømeInfos
).
SegCou¡
 == 1)

786 (
hëh
->
RxFømeInfos
).
FSRxDesc
 =hëh->
RxDesc
;

789 
hëh
->
RxFømeInfos
.
LSRxDesc
 = hëh->
RxDesc
;

792 
‰amñígth
 = (((
hëh
->
RxDesc
)->
Sètus
 & 
ETH_DMARXDESC_FL
Ë>> 
ETH_DMARXDESC_FRAMELENGTHSHIFT
) - 4;

793 
hëh
->
RxFømeInfos
.
Àngth
 = 
‰amñígth
;

796 
hëh
->
RxFømeInfos
.
buf„r
 = ((hëh->RxFømeInfos).
FSRxDesc
)->
Buf„r1Addr
;

798 
hëh
->
RxDesc
 = (
ETH_DMADescTy≥Def
*Ë((hëh->RxDesc)->
Buf„r2NextDescAddr
);

801 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

804 
	`__HAL_UNLOCK
(
hëh
);

807  
HAL_OK
;

810 if((
hëh
->
RxDesc
->
Sètus
 & 
ETH_DMARXDESC_FS
Ë!(
uöt32_t
)
RESET
)

812 (
hëh
->
RxFømeInfos
).
FSRxDesc
 = hëh->
RxDesc
;

813 (
hëh
->
RxFømeInfos
).
LSRxDesc
 = 
NULL
;

814 (
hëh
->
RxFømeInfos
).
SegCou¡
 = 1;

816 
hëh
->
RxDesc
 = (
ETH_DMADescTy≥Def
*Ë(hëh->RxDesc->
Buf„r2NextDescAddr
);

821 (
hëh
->
RxFømeInfos
).
SegCou¡
++;

823 
hëh
->
RxDesc
 = (
ETH_DMADescTy≥Def
*Ë(hëh->RxDesc->
Buf„r2NextDescAddr
);

828 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

831 
	`__HAL_UNLOCK
(
hëh
);

834  
HAL_ERROR
;

835 
	}
}

843 
HAL_SètusTy≥Def
 
	$HAL_ETH_GëRe˚ivedFøme_IT
(
ETH_H™dÀTy≥Def
 *
hëh
)

845 
uöt32_t
 
des¸ùt‹sˇncou¡î
 = 0;

848 
	`__HAL_LOCK
(
hëh
);

851 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY
;

854 ((
hëh
->
RxDesc
->
Sètus
 & 
ETH_DMARXDESC_OWN
Ë=(
uöt32_t
)
RESET
Ë&& (
des¸ùt‹sˇncou¡î
 < 
ETH_RXBUFNB
))

857 
des¸ùt‹sˇncou¡î
++;

861 if((
hëh
->
RxDesc
->
Sètus
 & (
ETH_DMARXDESC_FS
 | 
ETH_DMARXDESC_LS
)Ë=(
uöt32_t
)ETH_DMARXDESC_FS)

863 
hëh
->
RxFømeInfos
.
FSRxDesc
 = hëh->
RxDesc
;

864 
hëh
->
RxFømeInfos
.
SegCou¡
 = 1;

866 
hëh
->
RxDesc
 = (
ETH_DMADescTy≥Def
*Ë(hëh->RxDesc->
Buf„r2NextDescAddr
);

870 i‡((
hëh
->
RxDesc
->
Sètus
 & (
ETH_DMARXDESC_LS
 | 
ETH_DMARXDESC_FS
)Ë=(
uöt32_t
)
RESET
)

873 (
hëh
->
RxFømeInfos
.
SegCou¡
)++;

875 
hëh
->
RxDesc
 = (
ETH_DMADescTy≥Def
*)(hëh->RxDesc->
Buf„r2NextDescAddr
);

881 
hëh
->
RxFømeInfos
.
LSRxDesc
 = hëh->
RxDesc
;

884 (
hëh
->
RxFømeInfos
.
SegCou¡
)++;

887 i‡((
hëh
->
RxFømeInfos
.
SegCou¡
) == 1)

889 
hëh
->
RxFømeInfos
.
FSRxDesc
 = hëh->
RxDesc
;

893 
hëh
->
RxFømeInfos
.
Àngth
 = (((hëh->
RxDesc
)->
Sètus
 & 
ETH_DMARXDESC_FL
Ë>> 
ETH_DMARXDESC_FRAMELENGTHSHIFT
) - 4;

896 
hëh
->
RxFømeInfos
.
buf„r
 =((hëh->RxFømeInfos).
FSRxDesc
)->
Buf„r1Addr
;

899 
hëh
->
RxDesc
 = (
ETH_DMADescTy≥Def
*Ë(hëh->RxDesc->
Buf„r2NextDescAddr
);

902 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

905 
	`__HAL_UNLOCK
(
hëh
);

908  
HAL_OK
;

913 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

916 
	`__HAL_UNLOCK
(
hëh
);

919  
HAL_ERROR
;

920 
	}
}

928 
	$HAL_ETH_IRQH™dÀr
(
ETH_H™dÀTy≥Def
 *
hëh
)

931 i‡(
	`__HAL_ETH_DMA_GET_FLAG
(
hëh
, 
ETH_DMA_FLAG_R
))

934 
	`HAL_ETH_RxC∂tCÆlback
(
hëh
);

937 
	`__HAL_ETH_DMA_CLEAR_IT
(
hëh
, 
ETH_DMA_IT_R
);

940 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

943 
	`__HAL_UNLOCK
(
hëh
);

947 i‡(
	`__HAL_ETH_DMA_GET_FLAG
(
hëh
, 
ETH_DMA_FLAG_T
))

950 
	`HAL_ETH_TxC∂tCÆlback
(
hëh
);

953 
	`__HAL_ETH_DMA_CLEAR_IT
(
hëh
, 
ETH_DMA_IT_T
);

956 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

959 
	`__HAL_UNLOCK
(
hëh
);

963 
	`__HAL_ETH_DMA_CLEAR_IT
(
hëh
, 
ETH_DMA_IT_NIS
);

966 if(
	`__HAL_ETH_DMA_GET_FLAG
(
hëh
, 
ETH_DMA_FLAG_AIS
))

969 
	`HAL_ETH_Eº‹CÆlback
(
hëh
);

972 
	`__HAL_ETH_DMA_CLEAR_IT
(
hëh
, 
ETH_DMA_FLAG_AIS
);

975 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

978 
	`__HAL_UNLOCK
(
hëh
);

980 
	}
}

988 
__wók
 
	$HAL_ETH_TxC∂tCÆlback
(
ETH_H™dÀTy≥Def
 *
hëh
)

993 
	}
}

1001 
__wók
 
	$HAL_ETH_RxC∂tCÆlback
(
ETH_H™dÀTy≥Def
 *
hëh
)

1006 
	}
}

1014 
__wók
 
	$HAL_ETH_Eº‹CÆlback
(
ETH_H™dÀTy≥Def
 *
hëh
)

1019 
	}
}

1033 
HAL_SètusTy≥Def
 
	$HAL_ETH_RódPHYRegi°î
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt16_t
 
PHYReg
, 
uöt32_t
 *
RegVÆue
)

1035 
uöt32_t
 
tm¥eg1
 = 0;

1036 
uöt32_t
 
tick°¨t
 = 0;

1039 
	`as£π_∑øm
(
	`IS_ETH_PHY_ADDRESS
(
hëh
->
Inô
.
PhyAddªss
));

1042 if(
hëh
->
Sèã
 =
HAL_ETH_STATE_BUSY_RD
)

1044  
HAL_BUSY
;

1047 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY_RD
;

1050 
tm¥eg1
 = 
hëh
->
In°™˚
->
MACMIIAR
;

1053 
tm¥eg1
 &~
ETH_MACMIIAR_CR_MASK
;

1056 
tm¥eg1
 |=(((
uöt32_t
)
hëh
->
Inô
.
PhyAddªss
 << 11Ë& 
ETH_MACMIIAR_PA
);

1057 
tm¥eg1
 |=(((
uöt32_t
)
PHYReg
<<6Ë& 
ETH_MACMIIAR_MR
);

1058 
tm¥eg1
 &~
ETH_MACMIIAR_MW
;

1059 
tm¥eg1
 |
ETH_MACMIIAR_MB
;

1062 
hëh
->
In°™˚
->
MACMIIAR
 = 
tm¥eg1
;

1065 
tick°¨t
 = 
	`HAL_GëTick
();

1068 (
tm¥eg1
 & 
ETH_MACMIIAR_MB
) == ETH_MACMIIAR_MB)

1071 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PHY_READ_TO
)

1073 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

1076 
	`__HAL_UNLOCK
(
hëh
);

1078  
HAL_TIMEOUT
;

1081 
tm¥eg1
 = 
hëh
->
In°™˚
->
MACMIIAR
;

1085 *
RegVÆue
 = (
uöt16_t
)(
hëh
->
In°™˚
->
MACMIIDR
);

1088 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

1091  
HAL_OK
;

1092 
	}
}

1105 
HAL_SètusTy≥Def
 
	$HAL_ETH_WrôePHYRegi°î
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt16_t
 
PHYReg
, 
uöt32_t
 
RegVÆue
)

1107 
uöt32_t
 
tm¥eg1
 = 0;

1108 
uöt32_t
 
tick°¨t
 = 0;

1111 
	`as£π_∑øm
(
	`IS_ETH_PHY_ADDRESS
(
hëh
->
Inô
.
PhyAddªss
));

1114 if(
hëh
->
Sèã
 =
HAL_ETH_STATE_BUSY_WR
)

1116  
HAL_BUSY
;

1119 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY_WR
;

1122 
tm¥eg1
 = 
hëh
->
In°™˚
->
MACMIIAR
;

1125 
tm¥eg1
 &~
ETH_MACMIIAR_CR_MASK
;

1128 
tm¥eg1
 |=(((
uöt32_t
)
hëh
->
Inô
.
PhyAddªss
<<11Ë& 
ETH_MACMIIAR_PA
);

1129 
tm¥eg1
 |=(((
uöt32_t
)
PHYReg
<<6Ë& 
ETH_MACMIIAR_MR
);

1130 
tm¥eg1
 |
ETH_MACMIIAR_MW
;

1131 
tm¥eg1
 |
ETH_MACMIIAR_MB
;

1134 
hëh
->
In°™˚
->
MACMIIDR
 = (
uöt16_t
)
RegVÆue
;

1137 
hëh
->
In°™˚
->
MACMIIAR
 = 
tm¥eg1
;

1140 
tick°¨t
 = 
	`HAL_GëTick
();

1143 (
tm¥eg1
 & 
ETH_MACMIIAR_MB
) == ETH_MACMIIAR_MB)

1146 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PHY_WRITE_TO
)

1148 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

1151 
	`__HAL_UNLOCK
(
hëh
);

1153  
HAL_TIMEOUT
;

1156 
tm¥eg1
 = 
hëh
->
In°™˚
->
MACMIIAR
;

1160 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

1163  
HAL_OK
;

1164 
	}
}

1197 
HAL_SètusTy≥Def
 
	$HAL_ETH_Sèπ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1200 
	`__HAL_LOCK
(
hëh
);

1203 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY
;

1206 
	`ETH_MACTønsmissi⁄E«bÀ
(
hëh
);

1209 
	`ETH_MACRe˚±i⁄E«bÀ
(
hëh
);

1212 
	`ETH_FlushTønsmôFIFO
(
hëh
);

1215 
	`ETH_DMATønsmissi⁄E«bÀ
(
hëh
);

1218 
	`ETH_DMARe˚±i⁄E«bÀ
(
hëh
);

1221 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

1224 
	`__HAL_UNLOCK
(
hëh
);

1227  
HAL_OK
;

1228 
	}
}

1236 
HAL_SètusTy≥Def
 
	$HAL_ETH_St›
(
ETH_H™dÀTy≥Def
 *
hëh
)

1239 
	`__HAL_LOCK
(
hëh
);

1242 
hëh
->
Sèã
 = 
HAL_ETH_STATE_BUSY
;

1245 
	`ETH_DMATønsmissi⁄DißbÀ
(
hëh
);

1248 
	`ETH_DMARe˚±i⁄DißbÀ
(
hëh
);

1251 
	`ETH_MACRe˚±i⁄DißbÀ
(
hëh
);

1254 
	`ETH_FlushTønsmôFIFO
(
hëh
);

1257 
	`ETH_MACTønsmissi⁄DißbÀ
(
hëh
);

1260 
hëh
->
Sèã
 = 
HAL_ETH_STATE_READY
;

1263 
	`__HAL_UNLOCK
(
hëh
);

1266  
HAL_OK
;

1267 
	}
}

1276 
HAL_SètusTy≥Def
 
	$HAL_ETH_C⁄figMAC
(
ETH_H™dÀTy≥Def
 *
hëh
, 
ETH_MACInôTy≥Def
 *
macc⁄f
)

1278 
uöt32_t
 
tm¥eg1
 = 0;

1281 
	`__HAL_LOCK
(
hëh
);

1284 
hëh
->
Sèã

HAL_ETH_STATE_BUSY
;

1286 
	`as£π_∑øm
(
	`IS_ETH_SPEED
(
hëh
->
Inô
.
S≥ed
));

1287 
	`as£π_∑øm
(
	`IS_ETH_DUPLEX_MODE
(
hëh
->
Inô
.
Du∂exMode
));

1289 i‡(
macc⁄f
 !
NULL
)

1292 
	`as£π_∑øm
(
	`IS_ETH_WATCHDOG
(
macc⁄f
->
W©chdog
));

1293 
	`as£π_∑øm
(
	`IS_ETH_JABBER
(
macc⁄f
->
Jabbî
));

1294 
	`as£π_∑øm
(
	`IS_ETH_INTER_FRAME_GAP
(
macc⁄f
->
I¡îFømeG≠
));

1295 
	`as£π_∑øm
(
	`IS_ETH_CARRIER_SENSE
(
macc⁄f
->
C¨rõrSí£
));

1296 
	`as£π_∑øm
(
	`IS_ETH_RECEIVE_OWN
(
macc⁄f
->
Re˚iveOwn
));

1297 
	`as£π_∑øm
(
	`IS_ETH_LOOPBACK_MODE
(
macc⁄f
->
Lo›backMode
));

1298 
	`as£π_∑øm
(
	`IS_ETH_CHECKSUM_OFFLOAD
(
macc⁄f
->
ChecksumOfÊﬂd
));

1299 
	`as£π_∑øm
(
	`IS_ETH_RETRY_TRANSMISSION
(
macc⁄f
->
RëryTønsmissi⁄
));

1300 
	`as£π_∑øm
(
	`IS_ETH_AUTOMATIC_PADCRC_STRIP
(
macc⁄f
->
Autom©icPadCRCSåù
));

1301 
	`as£π_∑øm
(
	`IS_ETH_BACKOFF_LIMIT
(
macc⁄f
->
BackOffLimô
));

1302 
	`as£π_∑øm
(
	`IS_ETH_DEFERRAL_CHECK
(
macc⁄f
->
De„ºÆCheck
));

1303 
	`as£π_∑øm
(
	`IS_ETH_RECEIVE_ALL
(
macc⁄f
->
Re˚iveAŒ
));

1304 
	`as£π_∑øm
(
	`IS_ETH_SOURCE_ADDR_FILTER
(
macc⁄f
->
Sour˚AddrFûãr
));

1305 
	`as£π_∑øm
(
	`IS_ETH_CONTROL_FRAMES
(
macc⁄f
->
PassC⁄åﬁFømes
));

1306 
	`as£π_∑øm
(
	`IS_ETH_BROADCAST_FRAMES_RECEPTION
(
macc⁄f
->
Brﬂdˇ°FømesRe˚±i⁄
));

1307 
	`as£π_∑øm
(
	`IS_ETH_DESTINATION_ADDR_FILTER
(
macc⁄f
->
De°ö©i⁄AddrFûãr
));

1308 
	`as£π_∑øm
(
	`IS_ETH_PROMISCUOUS_MODE
(
macc⁄f
->
PromiscuousMode
));

1309 
	`as£π_∑øm
(
	`IS_ETH_MULTICAST_FRAMES_FILTER
(
macc⁄f
->
Mu…iˇ°FømesFûãr
));

1310 
	`as£π_∑øm
(
	`IS_ETH_UNICAST_FRAMES_FILTER
(
macc⁄f
->
Uniˇ°FømesFûãr
));

1311 
	`as£π_∑øm
(
	`IS_ETH_PAUSE_TIME
(
macc⁄f
->
Pau£Time
));

1312 
	`as£π_∑øm
(
	`IS_ETH_ZEROQUANTA_PAUSE
(
macc⁄f
->
ZîoQu™èPau£
));

1313 
	`as£π_∑øm
(
	`IS_ETH_PAUSE_LOW_THRESHOLD
(
macc⁄f
->
Pau£LowThªshﬁd
));

1314 
	`as£π_∑øm
(
	`IS_ETH_UNICAST_PAUSE_FRAME_DETECT
(
macc⁄f
->
Uniˇ°Pau£FømeDëe˘
));

1315 
	`as£π_∑øm
(
	`IS_ETH_RECEIVE_FLOWCONTROL
(
macc⁄f
->
Re˚iveFlowC⁄åﬁ
));

1316 
	`as£π_∑øm
(
	`IS_ETH_TRANSMIT_FLOWCONTROL
(
macc⁄f
->
TønsmôFlowC⁄åﬁ
));

1317 
	`as£π_∑øm
(
	`IS_ETH_VLAN_TAG_COMPARISON
(
macc⁄f
->
VLANTagCom∑ris⁄
));

1318 
	`as£π_∑øm
(
	`IS_ETH_VLAN_TAG_IDENTIFIER
(
macc⁄f
->
VLANTagIdítifõr
));

1322 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1324 
tm¥eg1
 &
ETH_MACCR_CLEAR_MASK
;

1326 
tm¥eg1
 |(
uöt32_t
)(
macc⁄f
->
W©chdog
 |

1327 
macc⁄f
->
Jabbî
 |

1328 
macc⁄f
->
I¡îFømeG≠
 |

1329 
macc⁄f
->
C¨rõrSí£
 |

1330 (
hëh
->
Inô
).
S≥ed
 |

1331 
macc⁄f
->
Re˚iveOwn
 |

1332 
macc⁄f
->
Lo›backMode
 |

1333 (
hëh
->
Inô
).
Du∂exMode
 |

1334 
macc⁄f
->
ChecksumOfÊﬂd
 |

1335 
macc⁄f
->
RëryTønsmissi⁄
 |

1336 
macc⁄f
->
Autom©icPadCRCSåù
 |

1337 
macc⁄f
->
BackOffLimô
 |

1338 
macc⁄f
->
De„ºÆCheck
);

1341 (
hëh
->
In°™˚
)->
MACCR
 = (
uöt32_t
)
tm¥eg1
;

1345 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1346 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1347 (
hëh
->
In°™˚
)->
MACCR
 = 
tm¥eg1
;

1351 (
hëh
->
In°™˚
)->
MACFFR
 = (
uöt32_t
)(
macc⁄f
->
Re˚iveAŒ
 |

1352 
macc⁄f
->
Sour˚AddrFûãr
 |

1353 
macc⁄f
->
PassC⁄åﬁFømes
 |

1354 
macc⁄f
->
Brﬂdˇ°FømesRe˚±i⁄
 |

1355 
macc⁄f
->
De°ö©i⁄AddrFûãr
 |

1356 
macc⁄f
->
PromiscuousMode
 |

1357 
macc⁄f
->
Mu…iˇ°FømesFûãr
 |

1358 
macc⁄f
->
Uniˇ°FømesFûãr
);

1362 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACFFR
;

1363 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1364 (
hëh
->
In°™˚
)->
MACFFR
 = 
tm¥eg1
;

1368 (
hëh
->
In°™˚
)->
MACHTHR
 = (
uöt32_t
)
macc⁄f
->
HashTabÀHigh
;

1371 (
hëh
->
In°™˚
)->
MACHTLR
 = (
uöt32_t
)
macc⁄f
->
HashTabÀLow
;

1375 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACFCR
;

1377 
tm¥eg1
 &
ETH_MACFCR_CLEAR_MASK
;

1379 
tm¥eg1
 |(
uöt32_t
)((
macc⁄f
->
Pau£Time
 << 16) |

1380 
macc⁄f
->
ZîoQu™èPau£
 |

1381 
macc⁄f
->
Pau£LowThªshﬁd
 |

1382 
macc⁄f
->
Uniˇ°Pau£FømeDëe˘
 |

1383 
macc⁄f
->
Re˚iveFlowC⁄åﬁ
 |

1384 
macc⁄f
->
TønsmôFlowC⁄åﬁ
);

1387 (
hëh
->
In°™˚
)->
MACFCR
 = (
uöt32_t
)
tm¥eg1
;

1391 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACFCR
;

1392 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1393 (
hëh
->
In°™˚
)->
MACFCR
 = 
tm¥eg1
;

1396 (
hëh
->
In°™˚
)->
MACVLANTR
 = (
uöt32_t
)(
macc⁄f
->
VLANTagCom∑ris⁄
 |

1397 
macc⁄f
->
VLANTagIdítifõr
);

1401 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACVLANTR
;

1402 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1403 (
hëh
->
In°™˚
)->
MACVLANTR
 = 
tm¥eg1
;

1409 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1412 
tm¥eg1
 &~((
uöt32_t
)0x00004800);

1414 
tm¥eg1
 |(
uöt32_t
)(
hëh
->
Inô
.
S≥ed
 | hëh->Inô.
Du∂exMode
);

1417 (
hëh
->
In°™˚
)->
MACCR
 = (
uöt32_t
)
tm¥eg1
;

1421 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1422 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1423 (
hëh
->
In°™˚
)->
MACCR
 = 
tm¥eg1
;

1427 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

1430 
	`__HAL_UNLOCK
(
hëh
);

1433  
HAL_OK
;

1434 
	}
}

1443 
HAL_SètusTy≥Def
 
	$HAL_ETH_C⁄figDMA
(
ETH_H™dÀTy≥Def
 *
hëh
, 
ETH_DMAInôTy≥Def
 *
dmac⁄f
)

1445 
uöt32_t
 
tm¥eg1
 = 0;

1448 
	`__HAL_LOCK
(
hëh
);

1451 
hëh
->
Sèã

HAL_ETH_STATE_BUSY
;

1454 
	`as£π_∑øm
(
	`IS_ETH_DROP_TCPIP_CHECKSUM_FRAME
(
dmac⁄f
->
Dr›TCPIPChecksumEº‹Føme
));

1455 
	`as£π_∑øm
(
	`IS_ETH_RECEIVE_STORE_FORWARD
(
dmac⁄f
->
Re˚iveSt‹eF‹w¨d
));

1456 
	`as£π_∑øm
(
	`IS_ETH_FLUSH_RECEIVE_FRAME
(
dmac⁄f
->
FlushRe˚ivedFøme
));

1457 
	`as£π_∑øm
(
	`IS_ETH_TRANSMIT_STORE_FORWARD
(
dmac⁄f
->
TønsmôSt‹eF‹w¨d
));

1458 
	`as£π_∑øm
(
	`IS_ETH_TRANSMIT_THRESHOLD_CONTROL
(
dmac⁄f
->
TønsmôThªshﬁdC⁄åﬁ
));

1459 
	`as£π_∑øm
(
	`IS_ETH_FORWARD_ERROR_FRAMES
(
dmac⁄f
->
F‹w¨dEº‹Fømes
));

1460 
	`as£π_∑øm
(
	`IS_ETH_FORWARD_UNDERSIZED_GOOD_FRAMES
(
dmac⁄f
->
F‹w¨dUndîsizedGoodFømes
));

1461 
	`as£π_∑øm
(
	`IS_ETH_RECEIVE_THRESHOLD_CONTROL
(
dmac⁄f
->
Re˚iveThªshﬁdC⁄åﬁ
));

1462 
	`as£π_∑øm
(
	`IS_ETH_SECOND_FRAME_OPERATE
(
dmac⁄f
->
Sec⁄dFømeO≥øã
));

1463 
	`as£π_∑øm
(
	`IS_ETH_ADDRESS_ALIGNED_BEATS
(
dmac⁄f
->
AddªssAlig√dBóts
));

1464 
	`as£π_∑øm
(
	`IS_ETH_FIXED_BURST
(
dmac⁄f
->
FixedBur°
));

1465 
	`as£π_∑øm
(
	`IS_ETH_RXDMA_BURST_LENGTH
(
dmac⁄f
->
RxDMABur°Lígth
));

1466 
	`as£π_∑øm
(
	`IS_ETH_TXDMA_BURST_LENGTH
(
dmac⁄f
->
TxDMABur°Lígth
));

1467 
	`as£π_∑øm
(
	`IS_ETH_ENHANCED_DESCRIPTOR_FORMAT
(
dmac⁄f
->
Enh™˚dDes¸ùt‹F‹m©
));

1468 
	`as£π_∑øm
(
	`IS_ETH_DMA_DESC_SKIP_LENGTH
(
dmac⁄f
->
Des¸ùt‹SkùLígth
));

1469 
	`as£π_∑øm
(
	`IS_ETH_DMA_ARBITRATION_ROUNDROBIN_RXTX
(
dmac⁄f
->
DMAArbôøti⁄
));

1473 
tm¥eg1
 = (
hëh
->
In°™˚
)->
DMAOMR
;

1475 
tm¥eg1
 &
ETH_DMAOMR_CLEAR_MASK
;

1477 
tm¥eg1
 |(
uöt32_t
)(
dmac⁄f
->
Dr›TCPIPChecksumEº‹Føme
 |

1478 
dmac⁄f
->
Re˚iveSt‹eF‹w¨d
 |

1479 
dmac⁄f
->
FlushRe˚ivedFøme
 |

1480 
dmac⁄f
->
TønsmôSt‹eF‹w¨d
 |

1481 
dmac⁄f
->
TønsmôThªshﬁdC⁄åﬁ
 |

1482 
dmac⁄f
->
F‹w¨dEº‹Fømes
 |

1483 
dmac⁄f
->
F‹w¨dUndîsizedGoodFømes
 |

1484 
dmac⁄f
->
Re˚iveThªshﬁdC⁄åﬁ
 |

1485 
dmac⁄f
->
Sec⁄dFømeO≥øã
);

1488 (
hëh
->
In°™˚
)->
DMAOMR
 = (
uöt32_t
)
tm¥eg1
;

1492 
tm¥eg1
 = (
hëh
->
In°™˚
)->
DMAOMR
;

1493 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1494 (
hëh
->
In°™˚
)->
DMAOMR
 = 
tm¥eg1
;

1497 (
hëh
->
In°™˚
)->
DMABMR
 = (
uöt32_t
)(
dmac⁄f
->
AddªssAlig√dBóts
 |

1498 
dmac⁄f
->
FixedBur°
 |

1499 
dmac⁄f
->
RxDMABur°Lígth
 |

1500 
dmac⁄f
->
TxDMABur°Lígth
 |

1501 
dmac⁄f
->
Enh™˚dDes¸ùt‹F‹m©
 |

1502 (
dmac⁄f
->
Des¸ùt‹SkùLígth
 << 2) |

1503 
dmac⁄f
->
DMAArbôøti⁄
 |

1504 
ETH_DMABMR_USP
);

1508 
tm¥eg1
 = (
hëh
->
In°™˚
)->
DMABMR
;

1509 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1510 (
hëh
->
In°™˚
)->
DMABMR
 = 
tm¥eg1
;

1513 
hëh
->
Sèã

HAL_ETH_STATE_READY
;

1516 
	`__HAL_UNLOCK
(
hëh
);

1519  
HAL_OK
;

1520 
	}
}

1550 
HAL_ETH_SèãTy≥Def
 
	$HAL_ETH_GëSèã
(
ETH_H™dÀTy≥Def
 *
hëh
)

1553  
hëh
->
Sèã
;

1554 
	}
}

1575 
	$ETH_MACDMAC⁄fig
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt32_t
 
îr
)

1577 
ETH_MACInôTy≥Def
 
macöô
;

1578 
ETH_DMAInôTy≥Def
 
dmaöô
;

1579 
uöt32_t
 
tm¥eg1
 = 0;

1581 i‡(
îr
 !
ETH_SUCCESS
)

1584 (
hëh
->
Inô
).
Du∂exMode
 = 
ETH_MODE_FULLDUPLEX
;

1587 (
hëh
->
Inô
).
S≥ed
 = 
ETH_SPEED_100M
;

1591 
macöô
.
W©chdog
 = 
ETH_WATCHDOG_ENABLE
;

1592 
macöô
.
Jabbî
 = 
ETH_JABBER_ENABLE
;

1593 
macöô
.
I¡îFømeG≠
 = 
ETH_INTERFRAMEGAP_96BIT
;

1594 
macöô
.
C¨rõrSí£
 = 
ETH_CARRIERSENCE_ENABLE
;

1595 
macöô
.
Re˚iveOwn
 = 
ETH_RECEIVEOWN_ENABLE
;

1596 
macöô
.
Lo›backMode
 = 
ETH_LOOPBACKMODE_DISABLE
;

1597 if(
hëh
->
Inô
.
ChecksumMode
 =
ETH_CHECKSUM_BY_HARDWARE
)

1599 
macöô
.
ChecksumOfÊﬂd
 = 
ETH_CHECKSUMOFFLAOD_ENABLE
;

1603 
macöô
.
ChecksumOfÊﬂd
 = 
ETH_CHECKSUMOFFLAOD_DISABLE
;

1605 
macöô
.
RëryTønsmissi⁄
 = 
ETH_RETRYTRANSMISSION_DISABLE
;

1606 
macöô
.
Autom©icPadCRCSåù
 = 
ETH_AUTOMATICPADCRCSTRIP_DISABLE
;

1607 
macöô
.
BackOffLimô
 = 
ETH_BACKOFFLIMIT_10
;

1608 
macöô
.
De„ºÆCheck
 = 
ETH_DEFFERRALCHECK_DISABLE
;

1609 
macöô
.
Re˚iveAŒ
 = 
ETH_RECEIVEAŒ_DISABLE
;

1610 
macöô
.
Sour˚AddrFûãr
 = 
ETH_SOURCEADDRFILTER_DISABLE
;

1611 
macöô
.
PassC⁄åﬁFømes
 = 
ETH_PASSCONTROLFRAMES_BLOCKALL
;

1612 
macöô
.
Brﬂdˇ°FømesRe˚±i⁄
 = 
ETH_BROADCASTFRAMESRECEPTION_ENABLE
;

1613 
macöô
.
De°ö©i⁄AddrFûãr
 = 
ETH_DESTINATIONADDRFILTER_NORMAL
;

1614 
macöô
.
PromiscuousMode
 = 
ETH_PROMISCUOUS_MODE_DISABLE
;

1615 
macöô
.
Mu…iˇ°FømesFûãr
 = 
ETH_MULTICASTFRAMESFILTER_PERFECT
;

1616 
macöô
.
Uniˇ°FømesFûãr
 = 
ETH_UNICASTFRAMESFILTER_PERFECT
;

1617 
macöô
.
HashTabÀHigh
 = 0x0;

1618 
macöô
.
HashTabÀLow
 = 0x0;

1619 
macöô
.
Pau£Time
 = 0x0;

1620 
macöô
.
ZîoQu™èPau£
 = 
ETH_ZEROQUANTAPAUSE_DISABLE
;

1621 
macöô
.
Pau£LowThªshﬁd
 = 
ETH_PAUSELOWTHRESHOLD_MINUS4
;

1622 
macöô
.
Uniˇ°Pau£FømeDëe˘
 = 
ETH_UNICASTPAUSEFRAMEDETECT_DISABLE
;

1623 
macöô
.
Re˚iveFlowC⁄åﬁ
 = 
ETH_RECEIVEFLOWCONTROL_DISABLE
;

1624 
macöô
.
TønsmôFlowC⁄åﬁ
 = 
ETH_TRANSMITFLOWCONTROL_DISABLE
;

1625 
macöô
.
VLANTagCom∑ris⁄
 = 
ETH_VLANTAGCOMPARISON_16BIT
;

1626 
macöô
.
VLANTagIdítifõr
 = 0x0;

1630 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1632 
tm¥eg1
 &
ETH_MACCR_CLEAR_MASK
;

1646 
tm¥eg1
 |(
uöt32_t
)(
macöô
.
W©chdog
 |

1647 
macöô
.
Jabbî
 |

1648 
macöô
.
I¡îFømeG≠
 |

1649 
macöô
.
C¨rõrSí£
 |

1650 (
hëh
->
Inô
).
S≥ed
 |

1651 
macöô
.
Re˚iveOwn
 |

1652 
macöô
.
Lo›backMode
 |

1653 (
hëh
->
Inô
).
Du∂exMode
 |

1654 
macöô
.
ChecksumOfÊﬂd
 |

1655 
macöô
.
RëryTønsmissi⁄
 |

1656 
macöô
.
Autom©icPadCRCSåù
 |

1657 
macöô
.
BackOffLimô
 |

1658 
macöô
.
De„ºÆCheck
);

1661 (
hëh
->
In°™˚
)->
MACCR
 = (
uöt32_t
)
tm¥eg1
;

1665 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1666 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1667 (
hëh
->
In°™˚
)->
MACCR
 = 
tm¥eg1
;

1679 (
hëh
->
In°™˚
)->
MACFFR
 = (
uöt32_t
)(
macöô
.
Re˚iveAŒ
 |

1680 
macöô
.
Sour˚AddrFûãr
 |

1681 
macöô
.
PassC⁄åﬁFømes
 |

1682 
macöô
.
Brﬂdˇ°FømesRe˚±i⁄
 |

1683 
macöô
.
De°ö©i⁄AddrFûãr
 |

1684 
macöô
.
PromiscuousMode
 |

1685 
macöô
.
Mu…iˇ°FømesFûãr
 |

1686 
macöô
.
Uniˇ°FømesFûãr
);

1690 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACFFR
;

1691 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1692 (
hëh
->
In°™˚
)->
MACFFR
 = 
tm¥eg1
;

1696 (
hëh
->
In°™˚
)->
MACHTHR
 = (
uöt32_t
)
macöô
.
HashTabÀHigh
;

1699 (
hëh
->
In°™˚
)->
MACHTLR
 = (
uöt32_t
)
macöô
.
HashTabÀLow
;

1703 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACFCR
;

1705 
tm¥eg1
 &
ETH_MACFCR_CLEAR_MASK
;

1713 
tm¥eg1
 |(
uöt32_t
)((
macöô
.
Pau£Time
 << 16) |

1714 
macöô
.
ZîoQu™èPau£
 |

1715 
macöô
.
Pau£LowThªshﬁd
 |

1716 
macöô
.
Uniˇ°Pau£FømeDëe˘
 |

1717 
macöô
.
Re˚iveFlowC⁄åﬁ
 |

1718 
macöô
.
TønsmôFlowC⁄åﬁ
);

1721 (
hëh
->
In°™˚
)->
MACFCR
 = (
uöt32_t
)
tm¥eg1
;

1725 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACFCR
;

1726 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1727 (
hëh
->
In°™˚
)->
MACFCR
 = 
tm¥eg1
;

1732 (
hëh
->
In°™˚
)->
MACVLANTR
 = (
uöt32_t
)(
macöô
.
VLANTagCom∑ris⁄
 |

1733 
macöô
.
VLANTagIdítifõr
);

1737 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACVLANTR
;

1738 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1739 (
hëh
->
In°™˚
)->
MACVLANTR
 = 
tm¥eg1
;

1742 
dmaöô
.
Dr›TCPIPChecksumEº‹Føme
 = 
ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE
;

1743 
dmaöô
.
Re˚iveSt‹eF‹w¨d
 = 
ETH_RECEIVESTOREFORWARD_ENABLE
;

1744 
dmaöô
.
FlushRe˚ivedFøme
 = 
ETH_FLUSHRECEIVEDFRAME_ENABLE
;

1745 
dmaöô
.
TønsmôSt‹eF‹w¨d
 = 
ETH_TRANSMITSTOREFORWARD_ENABLE
;

1746 
dmaöô
.
TønsmôThªshﬁdC⁄åﬁ
 = 
ETH_TRANSMITTHRESHOLDCONTROL_64BYTES
;

1747 
dmaöô
.
F‹w¨dEº‹Fømes
 = 
ETH_FORWARDERRORFRAMES_DISABLE
;

1748 
dmaöô
.
F‹w¨dUndîsizedGoodFømes
 = 
ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE
;

1749 
dmaöô
.
Re˚iveThªshﬁdC⁄åﬁ
 = 
ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES
;

1750 
dmaöô
.
Sec⁄dFømeO≥øã
 = 
ETH_SECONDFRAMEOPERARTE_ENABLE
;

1751 
dmaöô
.
AddªssAlig√dBóts
 = 
ETH_ADDRESSALIGNEDBEATS_ENABLE
;

1752 
dmaöô
.
FixedBur°
 = 
ETH_FIXEDBURST_ENABLE
;

1753 
dmaöô
.
RxDMABur°Lígth
 = 
ETH_RXDMABURSTLENGTH_32BEAT
;

1754 
dmaöô
.
TxDMABur°Lígth
 = 
ETH_TXDMABURSTLENGTH_32BEAT
;

1755 
dmaöô
.
Enh™˚dDes¸ùt‹F‹m©
 = 
ETH_DMAENHANCEDDESCRIPTOR_ENABLE
;

1756 
dmaöô
.
Des¸ùt‹SkùLígth
 = 0x0;

1757 
dmaöô
.
DMAArbôøti⁄
 = 
ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1
;

1760 
tm¥eg1
 = (
hëh
->
In°™˚
)->
DMAOMR
;

1762 
tm¥eg1
 &
ETH_DMAOMR_CLEAR_MASK
;

1773 
tm¥eg1
 |(
uöt32_t
)(
dmaöô
.
Dr›TCPIPChecksumEº‹Føme
 |

1774 
dmaöô
.
Re˚iveSt‹eF‹w¨d
 |

1775 
dmaöô
.
FlushRe˚ivedFøme
 |

1776 
dmaöô
.
TønsmôSt‹eF‹w¨d
 |

1777 
dmaöô
.
TønsmôThªshﬁdC⁄åﬁ
 |

1778 
dmaöô
.
F‹w¨dEº‹Fømes
 |

1779 
dmaöô
.
F‹w¨dUndîsizedGoodFømes
 |

1780 
dmaöô
.
Re˚iveThªshﬁdC⁄åﬁ
 |

1781 
dmaöô
.
Sec⁄dFømeO≥øã
);

1784 (
hëh
->
In°™˚
)->
DMAOMR
 = (
uöt32_t
)
tm¥eg1
;

1788 
tm¥eg1
 = (
hëh
->
In°™˚
)->
DMAOMR
;

1789 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1790 (
hëh
->
In°™˚
)->
DMAOMR
 = 
tm¥eg1
;

1800 (
hëh
->
In°™˚
)->
DMABMR
 = (
uöt32_t
)(
dmaöô
.
AddªssAlig√dBóts
 |

1801 
dmaöô
.
FixedBur°
 |

1802 
dmaöô
.
RxDMABur°Lígth
 |

1803 
dmaöô
.
TxDMABur°Lígth
 |

1804 
dmaöô
.
Enh™˚dDes¸ùt‹F‹m©
 |

1805 (
dmaöô
.
Des¸ùt‹SkùLígth
 << 2) |

1806 
dmaöô
.
DMAArbôøti⁄
 |

1807 
ETH_DMABMR_USP
);

1811 
tm¥eg1
 = (
hëh
->
In°™˚
)->
DMABMR
;

1812 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1813 (
hëh
->
In°™˚
)->
DMABMR
 = 
tm¥eg1
;

1815 if((
hëh
->
Inô
).
RxMode
 =
ETH_RXINTERRUPT_MODE
)

1818 
	`__HAL_ETH_DMA_ENABLE_IT
((
hëh
), 
ETH_DMA_IT_NIS
 | 
ETH_DMA_IT_R
);

1822 
	`ETH_MACAddªssC⁄fig
(
hëh
, 
ETH_MAC_ADDRESS0
, hëh->
Inô
.
MACAddr
);

1823 
	}
}

1838 
	$ETH_MACAddªssC⁄fig
(
ETH_H™dÀTy≥Def
 *
hëh
, 
uöt32_t
 
MacAddr
, 
uöt8_t
 *
Addr
)

1840 
uöt32_t
 
tm¥eg1
;

1843 
	`as£π_∑øm
(
	`IS_ETH_MAC_ADDRESS0123
(
MacAddr
));

1846 
tm¥eg1
 = ((
uöt32_t
)
Addr
[5] << 8) | (uint32_t)Addr[4];

1848 (*(
__IO
 
uöt32_t
 *)((uöt32_t)(
ETH_MAC_ADDR_HBASE
 + 
MacAddr
))Ë
tm¥eg1
;

1850 
tm¥eg1
 = ((
uöt32_t
)
Addr
[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];

1853 (*(
__IO
 
uöt32_t
 *)((uöt32_t)(
ETH_MAC_ADDR_LBASE
 + 
MacAddr
))Ë
tm¥eg1
;

1854 
	}
}

1862 
	$ETH_MACTønsmissi⁄E«bÀ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1864 
__IO
 
uöt32_t
 
tm¥eg1
 = 0;

1867 (
hëh
->
In°™˚
)->
MACCR
 |
ETH_MACCR_TE
;

1871 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1872 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1873 (
hëh
->
In°™˚
)->
MACCR
 = 
tm¥eg1
;

1874 
	}
}

1882 
	$ETH_MACTønsmissi⁄DißbÀ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1884 
__IO
 
uöt32_t
 
tm¥eg1
 = 0;

1887 (
hëh
->
In°™˚
)->
MACCR
 &~
ETH_MACCR_TE
;

1891 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1892 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1893 (
hëh
->
In°™˚
)->
MACCR
 = 
tm¥eg1
;

1894 
	}
}

1902 
	$ETH_MACRe˚±i⁄E«bÀ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1904 
__IO
 
uöt32_t
 
tm¥eg1
 = 0;

1907 (
hëh
->
In°™˚
)->
MACCR
 |
ETH_MACCR_RE
;

1911 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1912 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1913 (
hëh
->
In°™˚
)->
MACCR
 = 
tm¥eg1
;

1914 
	}
}

1922 
	$ETH_MACRe˚±i⁄DißbÀ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1924 
__IO
 
uöt32_t
 
tm¥eg1
 = 0;

1927 (
hëh
->
In°™˚
)->
MACCR
 &~
ETH_MACCR_RE
;

1931 
tm¥eg1
 = (
hëh
->
In°™˚
)->
MACCR
;

1932 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

1933 (
hëh
->
In°™˚
)->
MACCR
 = 
tm¥eg1
;

1934 
	}
}

1942 
	$ETH_DMATønsmissi⁄E«bÀ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1945 (
hëh
->
In°™˚
)->
DMAOMR
 |
ETH_DMAOMR_ST
;

1946 
	}
}

1954 
	$ETH_DMATønsmissi⁄DißbÀ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1957 (
hëh
->
In°™˚
)->
DMAOMR
 &~
ETH_DMAOMR_ST
;

1958 
	}
}

1966 
	$ETH_DMARe˚±i⁄E«bÀ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1969 (
hëh
->
In°™˚
)->
DMAOMR
 |
ETH_DMAOMR_SR
;

1970 
	}
}

1978 
	$ETH_DMARe˚±i⁄DißbÀ
(
ETH_H™dÀTy≥Def
 *
hëh
)

1981 (
hëh
->
In°™˚
)->
DMAOMR
 &~
ETH_DMAOMR_SR
;

1982 
	}
}

1990 
	$ETH_FlushTønsmôFIFO
(
ETH_H™dÀTy≥Def
 *
hëh
)

1992 
__IO
 
uöt32_t
 
tm¥eg1
 = 0;

1995 (
hëh
->
In°™˚
)->
DMAOMR
 |
ETH_DMAOMR_FTF
;

1999 
tm¥eg1
 = (
hëh
->
In°™˚
)->
DMAOMR
;

2000 
	`HAL_Dñay
(
ETH_REG_WRITE_DELAY
);

2001 (
hëh
->
In°™˚
)->
DMAOMR
 = 
tm¥eg1
;

2002 
	}
}

2009 
	gSTM32F437xx
 || 
	gSTM32F429xx
 || 
	gSTM32F439xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_flash.c

96 
	~"°m32f4xx_hÆ.h
"

107 #ifde‡
HAL_FLASH_MODULE_ENABLED


114 
	#FLASH_TIMEOUT_VALUE
 ((
uöt32_t
)50000)

	)

124 
FLASH_Pro˚ssTy≥Def
 
	gpFœsh
;

134 
FLASH_Progøm_DoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

135 
FLASH_Progøm_W‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

136 
FLASH_Progøm_HÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

137 
FLASH_Progøm_Byã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

138 
FLASH_SëEº‹Code
();

139 
FLASH_FlushCaches
();

141 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

175 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
)

177 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

180 
	`__HAL_LOCK
(&
pFœsh
);

183 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

186 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

188 if(
°©us
 =
HAL_OK
)

190 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_BYTE
)

193 
	`FLASH_Progøm_Byã
(
Addªss
, (
uöt8_t
Ë
D©a
);

195 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_HALFWORD
)

198 
	`FLASH_Progøm_HÆfW‹d
(
Addªss
, (
uöt16_t
Ë
D©a
);

200 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

203 
	`FLASH_Progøm_W‹d
(
Addªss
, (
uöt32_t
Ë
D©a
);

208 
	`FLASH_Progøm_DoubÀW‹d
(
Addªss
, 
D©a
);

212 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

215 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

219 
	`__HAL_UNLOCK
(&
pFœsh
);

221  
°©us
;

222 
	}
}

233 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
)

235 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

238 
	`__HAL_LOCK
(&
pFœsh
);

241 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

244 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
);

247 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_ERR
);

249 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAM
;

250 
pFœsh
.
Addªss
 = Address;

252 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_BYTE
)

255 
	`FLASH_Progøm_Byã
(
Addªss
, (
uöt8_t
Ë
D©a
);

257 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_HALFWORD
)

260 
	`FLASH_Progøm_HÆfW‹d
(
Addªss
, (
uöt16_t
Ë
D©a
);

262 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

265 
	`FLASH_Progøm_W‹d
(
Addªss
, (
uöt32_t
Ë
D©a
);

270 
	`FLASH_Progøm_DoubÀW‹d
(
Addªss
, 
D©a
);

273  
°©us
;

274 
	}
}

280 
	$HAL_FLASH_IRQH™dÀr
()

282 
uöt32_t
 
addªs°mp
 = 0;

285 if(
	`__HAL_FLASH_GET_FLAG
((
FLASH_FLAG_OPERR
 | 
FLASH_FLAG_WRPERR
 | 
FLASH_FLAG_PGAERR
 | \

286 
FLASH_FLAG_PGPERR
 | 
FLASH_FLAG_PGSERR
 | 
FLASH_FLAG_RDERR
)Ë!
RESET
)

288 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_SECTERASE
)

291 
addªs°mp
 = 
pFœsh
.
Se˘‹
;

292 
pFœsh
.
Se˘‹
 = 0xFFFFFFFF;

294 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_MASSERASE
)

297 
addªs°mp
 = 
pFœsh
.
B™k
;

302 
addªs°mp
 = 
pFœsh
.
Addªss
;

306 
	`FLASH_SëEº‹Code
();

309 
	`HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
addªs°mp
);

312 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

316 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
Ë!
RESET
)

319 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

321 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_SECTERASE
)

324 
pFœsh
.
NbSe˘‹sToEø£
--;

327 if(
pFœsh
.
NbSe˘‹sToEø£
 != 0)

329 
addªs°mp
 = 
pFœsh
.
Se˘‹
;

331 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

334 
pFœsh
.
Se˘‹
++;

335 
addªs°mp
 = 
pFœsh
.
Se˘‹
;

336 
	`FLASH_Eø£_Se˘‹
(
addªs°mp
, 
pFœsh
.
VﬁègeF‹Eø£
);

342 
pFœsh
.
Se˘‹
 = 
addªs°mp
 = 0xFFFFFFFF;

343 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

346 
	`FLASH_FlushCaches
() ;

349 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

354 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_MASSERASE
)

358 
	`FLASH_FlushCaches
() ;

361 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
B™k
);

367 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

369 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

373 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_NONE
)

376 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_SER
 | 
FLASH_CR_SNB
 | 
FLASH_MER_BIT
));

379 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP
);

382 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_ERR
);

385 
	`__HAL_UNLOCK
(&
pFœsh
);

387 
	}
}

398 
__wók
 
	$HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

403 
	}
}

413 
__wók
 
	$HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

418 
	}
}

443 
HAL_SètusTy≥Def
 
	$HAL_FLASH_U∆ock
()

445 if((
FLASH
->
CR
 & 
FLASH_CR_LOCK
Ë!
RESET
)

448 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

449 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

453  
HAL_ERROR
;

456  
HAL_OK
;

457 
	}
}

463 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Lock
()

466 
FLASH
->
CR
 |
FLASH_CR_LOCK
;

468  
HAL_OK
;

469 
	}
}

475 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_U∆ock
()

477 if((
FLASH
->
OPTCR
 & 
FLASH_OPTCR_OPTLOCK
Ë!
RESET
)

480 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY1
;

481 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY2
;

485  
HAL_ERROR
;

488  
HAL_OK
;

489 
	}
}

495 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_Lock
()

498 
FLASH
->
OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

500  
HAL_OK
;

501 
	}
}

507 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_Launch
()

510 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
FLASH_OPTCR_OPTSTRT
;

513 (
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
));

514 
	}
}

544 
uöt32_t
 
	$HAL_FLASH_GëEº‹
()

546  
pFœsh
.
Eº‹Code
;

547 
	}
}

558 
HAL_SètusTy≥Def
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

560 
uöt32_t
 
tick°¨t
 = 0;

563 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

569 
tick°¨t
 = 
	`HAL_GëTick
();

571 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY
Ë!
RESET
)

573 if(
Timeout
 !
HAL_MAX_DELAY
)

575 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

577  
HAL_TIMEOUT
;

583 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

586 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

589 if(
	`__HAL_FLASH_GET_FLAG
((
FLASH_FLAG_OPERR
 | 
FLASH_FLAG_WRPERR
 | 
FLASH_FLAG_PGAERR
 | \

590 
FLASH_FLAG_PGPERR
 | 
FLASH_FLAG_PGSERR
 | 
FLASH_FLAG_RDERR
)Ë!
RESET
)

593 
	`FLASH_SëEº‹Code
();

594  
HAL_ERROR
;

598  
HAL_OK
;

600 
	}
}

614 
	$FLASH_Progøm_DoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
)

617 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

620 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PSIZE
);

621 
FLASH
->
CR
 |
FLASH_PSIZE_DOUBLE_WORD
;

622 
FLASH
->
CR
 |
FLASH_CR_PG
;

624 *(
__IO
 
uöt64_t
*)
Addªss
 = 
D©a
;

625 
	}
}

640 
	$FLASH_Progøm_W‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

643 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

646 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PSIZE
);

647 
FLASH
->
CR
 |
FLASH_PSIZE_WORD
;

648 
FLASH
->
CR
 |
FLASH_CR_PG
;

650 *(
__IO
 
uöt32_t
*)
Addªss
 = 
D©a
;

651 
	}
}

665 
	$FLASH_Progøm_HÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

668 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

671 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PSIZE
);

672 
FLASH
->
CR
 |
FLASH_PSIZE_HALF_WORD
;

673 
FLASH
->
CR
 |
FLASH_CR_PG
;

675 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

676 
	}
}

690 
	$FLASH_Progøm_Byã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

693 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

696 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PSIZE
);

697 
FLASH
->
CR
 |
FLASH_PSIZE_BYTE
;

698 
FLASH
->
CR
 |
FLASH_CR_PG
;

700 *(
__IO
 
uöt8_t
*)
Addªss
 = 
D©a
;

701 
	}
}

707 
	$FLASH_SëEº‹Code
()

709 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
Ë!
RESET
)

711 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_WRP
;

714 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_WRPERR
);

717 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGAERR
Ë!
RESET
)

719 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_PGA
;

722 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_PGAERR
);

725 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGPERR
Ë!
RESET
)

727 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_PGP
;

730 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_PGPERR
);

733 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGSERR
Ë!
RESET
)

735 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_PGS
;

738 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_PGSERR
);

741 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_RDERR
Ë!
RESET
)

743 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_RD
;

746 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_RDERR
);

749 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPERR
Ë!
RESET
)

751 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_OPERATION
;

754 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_OPERR
);

756 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_flash_ex.c

82 
	~"°m32f4xx_hÆ.h
"

93 #ifde‡
HAL_FLASH_MODULE_ENABLED


100 
	#FLASH_TIMEOUT_VALUE
 ((
uöt32_t
)50000)

	)

110 
FLASH_Pro˚ssTy≥Def
 
pFœsh
;

120 
FLASH_MassEø£
(
uöt8_t
 
VﬁègeR™ge
, 
uöt32_t
 
B™ks
);

121 
FLASH_FlushCaches
();

122 
HAL_SètusTy≥Def
 
FLASH_OB_E«bÀWRP
(
uöt32_t
 
WRPSe˘‹
, uöt32_à
B™ks
);

123 
HAL_SètusTy≥Def
 
FLASH_OB_DißbÀWRP
(
uöt32_t
 
WRPSe˘‹
, uöt32_à
B™ks
);

124 
HAL_SètusTy≥Def
 
FLASH_OB_RDP_LevñC⁄fig
(
uöt8_t
 
Levñ
);

125 
HAL_SètusTy≥Def
 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
Iwdg
, uöt8_à
St›
, uöt8_à
Stdby
);

126 
HAL_SètusTy≥Def
 
FLASH_OB_BOR_LevñC⁄fig
(
uöt8_t
 
Levñ
);

127 
uöt8_t
 
FLASH_OB_GëU£r
();

128 
uöt16_t
 
FLASH_OB_GëWRP
();

129 
uöt8_t
 
FLASH_OB_GëRDP
();

130 
uöt8_t
 
FLASH_OB_GëBOR
();

132 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F411xE
) ||\

133 
	$deföed
(
STM32F446xx
)

134 
HAL_SètusTy≥Def
 
	`FLASH_OB_E«bÀPCROP
(
uöt32_t
 
Se˘‹
);

135 
HAL_SètusTy≥Def
 
	`FLASH_OB_DißbÀPCROP
(
uöt32_t
 
Se˘‹
);

138 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

139 
HAL_SètusTy≥Def
 
	`FLASH_OB_E«bÀPCROP
(
uöt32_t
 
Se˘‹B™k1
, uöt32_à
Se˘‹B™k2
, uöt32_à
B™ks
);

140 
HAL_SètusTy≥Def
 
	`FLASH_OB_DißbÀPCROP
(
uöt32_t
 
Se˘‹B™k1
, uöt32_à
Se˘‹B™k2
, uöt32_à
B™ks
);

141 
HAL_SètusTy≥Def
 
	`FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
BoŸC⁄fig
);

144 
HAL_SètusTy≥Def
 
	`FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

179 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
Se˘‹Eº‹
)

181 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

182 
uöt32_t
 
ödex
 = 0;

185 
	`__HAL_LOCK
(&
pFœsh
);

188 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

191 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

193 if(
°©us
 =
HAL_OK
)

196 *
Se˘‹Eº‹
 = 0xFFFFFFFF;

198 if(
pEø£Inô
->
Ty≥Eø£
 =
FLASH_TYPEERASE_MASSERASE
)

201 
	`FLASH_MassEø£
((
uöt8_t
Ë
pEø£Inô
->
VﬁègeR™ge
,ÖEø£Inô->
B™ks
);

204 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

207 
FLASH
->
CR
 &(~
FLASH_MER_BIT
);

212 
	`as£π_∑øm
(
	`IS_FLASH_NBSECTORS
(
pEø£Inô
->
NbSe˘‹s
 +ÖEø£Inô->
Se˘‹
));

215 
ödex
 = 
pEø£Inô
->
Se˘‹
; index < (pEø£Inô->
NbSe˘‹s
 +ÖEraseInit->Sector); index++)

217 
	`FLASH_Eø£_Se˘‹
(
ödex
, (
uöt8_t
Ë
pEø£Inô
->
VﬁègeR™ge
);

220 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

223 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_SER
 | 
FLASH_CR_SNB
));

225 if(
°©us
 !
HAL_OK
)

228 *
Se˘‹Eº‹
 = 
ödex
;

234 
	`FLASH_FlushCaches
();

238 
	`__HAL_UNLOCK
(&
pFœsh
);

240  
°©us
;

241 
	}
}

250 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
)

252 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

255 
	`__HAL_LOCK
(&
pFœsh
);

258 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

261 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
);

264 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_ERR
);

267 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
 | 
FLASH_FLAG_OPERR
 | 
FLASH_FLAG_WRPERR
 |\

268 
FLASH_FLAG_PGAERR
 | 
FLASH_FLAG_PGPERR
| 
FLASH_FLAG_PGSERR
);

270 if(
pEø£Inô
->
Ty≥Eø£
 =
FLASH_TYPEERASE_MASSERASE
)

273 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_MASSERASE
;

274 
pFœsh
.
B™k
 = 
pEø£Inô
->
B™ks
;

275 
	`FLASH_MassEø£
((
uöt8_t
Ë
pEø£Inô
->
VﬁègeR™ge
,ÖEø£Inô->
B™ks
);

282 
	`as£π_∑øm
(
	`IS_FLASH_NBSECTORS
(
pEø£Inô
->
NbSe˘‹s
 +ÖEø£Inô->
Se˘‹
));

284 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_SECTERASE
;

285 
pFœsh
.
NbSe˘‹sToEø£
 = 
pEø£Inô
->
NbSe˘‹s
;

286 
pFœsh
.
Se˘‹
 = 
pEø£Inô
->Sector;

287 
pFœsh
.
VﬁègeF‹Eø£
 = (
uöt8_t
)
pEø£Inô
->
VﬁègeR™ge
;

290 
	`FLASH_Eø£_Se˘‹
(
pEø£Inô
->
Se˘‹
,ÖEø£Inô->
VﬁègeR™ge
);

293  
°©us
;

294 
	}
}

303 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

305 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

308 
	`__HAL_LOCK
(&
pFœsh
);

311 
	`as£π_∑øm
(
	`IS_OPTIONBYTE
(
pOBInô
->
O±i⁄Ty≥
));

314 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_WRP
) == OPTIONBYTE_WRP)

316 
	`as£π_∑øm
(
	`IS_WRPSTATE
(
pOBInô
->
WRPSèã
));

317 if(
pOBInô
->
WRPSèã
 =
OB_WRPSTATE_ENABLE
)

320 
°©us
 = 
	`FLASH_OB_E«bÀWRP
(
pOBInô
->
WRPSe˘‹
,ÖOBInô->
B™ks
);

325 
°©us
 = 
	`FLASH_OB_DißbÀWRP
(
pOBInô
->
WRPSe˘‹
,ÖOBInô->
B™ks
);

330 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_RDP
) == OPTIONBYTE_RDP)

332 
°©us
 = 
	`FLASH_OB_RDP_LevñC⁄fig
(
pOBInô
->
RDPLevñ
);

336 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_USER
) == OPTIONBYTE_USER)

338 
°©us
 = 
	`FLASH_OB_U£rC⁄fig
(
pOBInô
->
USERC⁄fig
&
OB_IWDG_SW
,

339 
pOBInô
->
USERC⁄fig
&
OB_STOP_NO_RST
,

340 
pOBInô
->
USERC⁄fig
&
OB_STDBY_NO_RST
);

344 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_BOR
) == OPTIONBYTE_BOR)

346 
°©us
 = 
	`FLASH_OB_BOR_LevñC⁄fig
(
pOBInô
->
BORLevñ
);

350 
	`__HAL_UNLOCK
(&
pFœsh
);

352  
°©us
;

353 
	}
}

359 
	$FLASH_FlushCaches
()

362 if(
	`READ_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_ICEN
))

365 
	`__HAL_FLASH_INSTRUCTION_CACHE_DISABLE
();

367 
	`__HAL_FLASH_INSTRUCTION_CACHE_RESET
();

369 
	`__HAL_FLASH_INSTRUCTION_CACHE_ENABLE
();

373 if(
	`READ_BIT
(
FLASH
->
ACR
, 
FLASH_ACR_DCEN
))

376 
	`__HAL_FLASH_DATA_CACHE_DISABLE
();

378 
	`__HAL_FLASH_DATA_CACHE_RESET
();

380 
	`__HAL_FLASH_DATA_CACHE_ENABLE
();

382 
	}
}

391 
	$HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

393 
pOBInô
->
O±i⁄Ty≥
 = 
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
 | 
OPTIONBYTE_BOR
;

396 
pOBInô
->
WRPSe˘‹
 = (
uöt32_t
)
	`FLASH_OB_GëWRP
();

399 
pOBInô
->
RDPLevñ
 = (
uöt32_t
)
	`FLASH_OB_GëRDP
();

402 
pOBInô
->
USERC⁄fig
 = (
uöt8_t
)
	`FLASH_OB_GëU£r
();

405 
pOBInô
->
BORLevñ
 = (
uöt32_t
)
	`FLASH_OB_GëBOR
();

406 
	}
}

408 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

409 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

410 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) ||\

411 
	$deföed
(
STM32F479xx
)

419 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_AdvOBProgøm
 (
FLASH_AdvOBProgømInôTy≥Def
 *
pAdvOBInô
)

421 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

424 
	`as£π_∑øm
(
	`IS_OBEX
(
pAdvOBInô
->
O±i⁄Ty≥
));

427 if(((
pAdvOBInô
->
O±i⁄Ty≥
Ë& 
OPTIONBYTE_PCROP
) == OPTIONBYTE_PCROP)

430 
	`as£π_∑øm
(
	`IS_PCROPSTATE
(
pAdvOBInô
->
PCROPSèã
));

431 if((
pAdvOBInô
->
PCROPSèã
Ë=
OB_PCROP_STATE_ENABLE
)

434 #i‡
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
) ||\

435 
	`deföed
(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

436 
°©us
 = 
	`FLASH_OB_E«bÀPCROP
(
pAdvOBInô
->
Se˘‹s
);

438 
°©us
 = 
	`FLASH_OB_E«bÀPCROP
(
pAdvOBInô
->
Se˘‹sB™k1
,ÖAdvOBInô->
Se˘‹sB™k2
,ÖAdvOBInô->
B™ks
);

444 #i‡
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
) ||\

445 
	`deföed
(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

446 
°©us
 = 
	`FLASH_OB_DißbÀPCROP
(
pAdvOBInô
->
Se˘‹s
);

448 
°©us
 = 
	`FLASH_OB_DißbÀPCROP
(
pAdvOBInô
->
Se˘‹sB™k1
,ÖAdvOBInô->
Se˘‹sB™k2
,ÖAdvOBInô->
B™ks
);

453 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

455 if(((
pAdvOBInô
->
O±i⁄Ty≥
Ë& 
OPTIONBYTE_BOOTCONFIG
) == OPTIONBYTE_BOOTCONFIG)

457 
°©us
 = 
	`FLASH_OB_BoŸC⁄fig
(
pAdvOBInô
->
BoŸC⁄fig
);

461  
°©us
;

462 
	}
}

471 
	$HAL_FLASHEx_AdvOBGëC⁄fig
(
FLASH_AdvOBProgømInôTy≥Def
 *
pAdvOBInô
)

473 #i‡
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
) ||\

474 
	`deföed
(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

476 
pAdvOBInô
->
Se˘‹s
 = (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

479 
pAdvOBInô
->
Se˘‹sB™k1
 = (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

482 
pAdvOBInô
->
Se˘‹sB™k2
 = (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

485 
pAdvOBInô
->
BoŸC⁄fig
 = *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
;

487 
	}
}

501 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OB_Sñe˘PCROP
()

503 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

506 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE3_ADDRESS
) & (uint8_t)0x7F);

509 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE3_ADDRESS
 = (uöt8_t)(
OB_PCROP_SELECTED
 | 
›ti⁄tmp
);

511  
HAL_OK
;

512 
	}
}

526 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OB_DeSñe˘PCROP
()

528 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

531 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE3_ADDRESS
) & (uint8_t)0x7F);

534 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE3_ADDRESS
 = (uöt8_t)(
OB_PCROP_DESELECTED
 | 
›ti⁄tmp
);

536  
HAL_OK
;

537 
	}
}

539 
	gSTM32F411xE
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

541 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
)|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

547 
uöt16_t
 
	$HAL_FLASHEx_OB_GëB™k2WRP
()

550  (*(
__IO
 
uöt16_t
 *)(
OPTCR1_BYTE2_ADDRESS
));

551 
	}
}

558 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

580 
	$FLASH_MassEø£
(
uöt8_t
 
VﬁègeR™ge
, 
uöt32_t
 
B™ks
)

582 
uöt32_t
 
tmp_psize
 = 0;

585 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

586 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

589 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PSIZE
);

590 
FLASH
->
CR
 |
tmp_psize
;

591 if(
B™ks
 =
FLASH_BANK_BOTH
)

594 
FLASH
->
CR
 |
FLASH_MER_BIT
;

596 if(
B™ks
 =
FLASH_BANK_1
)

599 
FLASH
->
CR
 |
FLASH_CR_MER1
;

604 
FLASH
->
CR
 |
FLASH_CR_MER2
;

606 
FLASH
->
CR
 |
FLASH_CR_STRT
;

607 
	}
}

626 
	$FLASH_Eø£_Se˘‹
(
uöt32_t
 
Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
)

628 
uöt32_t
 
tmp_psize
 = 0;

631 
	`as£π_∑øm
(
	`IS_FLASH_SECTOR
(
Se˘‹
));

632 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

634 if(
VﬁègeR™ge
 =
FLASH_VOLTAGE_RANGE_1
)

636 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

638 if(
VﬁègeR™ge
 =
FLASH_VOLTAGE_RANGE_2
)

640 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

642 if(
VﬁègeR™ge
 =
FLASH_VOLTAGE_RANGE_3
)

644 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

648 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

652 if(
Se˘‹
 > 
FLASH_SECTOR_11
)

654 
Se˘‹
 += 4;

657 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PSIZE
);

658 
FLASH
->
CR
 |
tmp_psize
;

659 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_SNB
);

660 
FLASH
->
CR
 |
FLASH_CR_SER
 | (
Se˘‹
 << 
	`POSITION_VAL
(
FLASH_CR_SNB
));

661 
FLASH
->
CR
 |
FLASH_CR_STRT
;

662 
	}
}

686 
HAL_SètusTy≥Def
 
	$FLASH_OB_E«bÀWRP
(
uöt32_t
 
WRPSe˘‹
, uöt32_à
B™ks
)

688 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

691 
	`as£π_∑øm
(
	`IS_OB_WRP_SECTOR
(
WRPSe˘‹
));

692 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

695 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

697 if(
°©us
 =
HAL_OK
)

699 if(((
WRPSe˘‹
 =
OB_WRP_SECTOR_AŒ
Ë&& ((
B™ks
 =
FLASH_BANK_1
Ë|| (B™k†=
FLASH_BANK_BOTH
))) ||

700 (
WRPSe˘‹
 < 
OB_WRP_SECTOR_12
))

702 if(
WRPSe˘‹
 =
OB_WRP_SECTOR_AŒ
)

705 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~(
WRPSe˘‹
>>12));

710 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
WRPSe˘‹
);

716 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~(
WRPSe˘‹
>>12));

720 if((
WRPSe˘‹
 =
OB_WRP_SECTOR_AŒ
Ë&& (
B™ks
 =
FLASH_BANK_BOTH
))

723 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

725 if(
°©us
 =
HAL_OK
)

727 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~(
WRPSe˘‹
>>12));

732  
°©us
;

733 
	}
}

757 
HAL_SètusTy≥Def
 
	$FLASH_OB_DißbÀWRP
(
uöt32_t
 
WRPSe˘‹
, uöt32_à
B™ks
)

759 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

762 
	`as£π_∑øm
(
	`IS_OB_WRP_SECTOR
(
WRPSe˘‹
));

763 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

766 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

768 if(
°©us
 =
HAL_OK
)

770 if(((
WRPSe˘‹
 =
OB_WRP_SECTOR_AŒ
Ë&& ((
B™ks
 =
FLASH_BANK_1
Ë|| (B™k†=
FLASH_BANK_BOTH
))) ||

771 (
WRPSe˘‹
 < 
OB_WRP_SECTOR_12
))

773 if(
WRPSe˘‹
 =
OB_WRP_SECTOR_AŒ
)

776 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)(
WRPSe˘‹
>>12);

781 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
WRPSe˘‹
;

787 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)(
WRPSe˘‹
>>12);

791 if((
WRPSe˘‹
 =
OB_WRP_SECTOR_AŒ
Ë&& (
B™ks
 =
FLASH_BANK_BOTH
))

794 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

796 if(
°©us
 =
HAL_OK
)

798 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)(
WRPSe˘‹
>>12);

804  
°©us
;

805 
	}
}

818 
HAL_SètusTy≥Def
 
	$FLASH_OB_BoŸC⁄fig
(
uöt8_t
 
BoŸC⁄fig
)

820 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

823 
	`as£π_∑øm
(
	`IS_OB_BOOT
(
BoŸC⁄fig
));

826 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

828 if(
°©us
 =
HAL_OK
)

831 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BFB2
);

832 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
BoŸC⁄fig
;

835  
°©us
;

836 
	}
}

858 
HAL_SètusTy≥Def
 
	$FLASH_OB_E«bÀPCROP
(
uöt32_t
 
Se˘‹B™k1
, uöt32_à
Se˘‹B™k2
, uöt32_à
B™ks
)

860 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

862 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

865 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

867 if(
°©us
 =
HAL_OK
)

869 if((
B™ks
 =
FLASH_BANK_1
Ë|| (B™k†=
FLASH_BANK_BOTH
))

871 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
Se˘‹B™k1
));

873 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
Se˘‹B™k1
;

877 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
Se˘‹B™k2
));

879 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
Se˘‹B™k2
;

883 if(
B™ks
 =
FLASH_BANK_BOTH
)

885 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
Se˘‹B™k2
));

887 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

889 if(
°©us
 =
HAL_OK
)

892 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 |(uöt16_t)
Se˘‹B™k2
;

898  
°©us
;

899 
	}
}

922 
HAL_SètusTy≥Def
 
	$FLASH_OB_DißbÀPCROP
(
uöt32_t
 
Se˘‹B™k1
, uöt32_à
Se˘‹B™k2
, uöt32_à
B™ks
)

924 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

927 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

930 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

932 if(
°©us
 =
HAL_OK
)

934 if((
B™ks
 =
FLASH_BANK_1
Ë|| (B™k†=
FLASH_BANK_BOTH
))

936 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
Se˘‹B™k1
));

938 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
Se˘‹B™k1
);

943 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
Se˘‹B™k2
));

944 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
Se˘‹B™k2
);

948 if(
B™ks
 =
FLASH_BANK_BOTH
)

950 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
Se˘‹B™k2
));

952 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

954 if(
°©us
 =
HAL_OK
)

957 *(
__IO
 
uöt16_t
*)
OPTCR1_BYTE2_ADDRESS
 &(~
Se˘‹B™k2
);

963  
°©us
;

965 
	}
}

969 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

970 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) ||\

971 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| 
	$deföed
(
STM32F446xx
)

991 
	$FLASH_MassEø£
(
uöt8_t
 
VﬁègeR™ge
, 
uöt32_t
 
B™ks
)

993 
uöt32_t
 
tmp_psize
 = 0;

996 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

997 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

1000 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PSIZE
);

1001 
FLASH
->
CR
 |
tmp_psize
;

1002 
FLASH
->
CR
 |
FLASH_CR_MER
;

1003 
FLASH
->
CR
 |
FLASH_CR_STRT
;

1004 
	}
}

1023 
	$FLASH_Eø£_Se˘‹
(
uöt32_t
 
Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
)

1025 
uöt32_t
 
tmp_psize
 = 0;

1028 
	`as£π_∑øm
(
	`IS_FLASH_SECTOR
(
Se˘‹
));

1029 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

1031 if(
VﬁègeR™ge
 =
FLASH_VOLTAGE_RANGE_1
)

1033 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

1035 if(
VﬁègeR™ge
 =
FLASH_VOLTAGE_RANGE_2
)

1037 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

1039 if(
VﬁègeR™ge
 =
FLASH_VOLTAGE_RANGE_3
)

1041 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

1045 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

1049 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PSIZE
);

1050 
FLASH
->
CR
 |
tmp_psize
;

1051 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_SNB
);

1052 
FLASH
->
CR
 |
FLASH_CR_SER
 | (
Se˘‹
 << 
	`POSITION_VAL
(
FLASH_CR_SNB
));

1053 
FLASH
->
CR
 |
FLASH_CR_STRT
;

1054 
	}
}

1073 
HAL_SètusTy≥Def
 
	$FLASH_OB_E«bÀWRP
(
uöt32_t
 
WRPSe˘‹
, uöt32_à
B™ks
)

1075 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1078 
	`as£π_∑øm
(
	`IS_OB_WRP_SECTOR
(
WRPSe˘‹
));

1079 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

1082 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1084 if(
°©us
 =
HAL_OK
)

1086 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
WRPSe˘‹
);

1089  
°©us
;

1090 
	}
}

1109 
HAL_SètusTy≥Def
 
	$FLASH_OB_DißbÀWRP
(
uöt32_t
 
WRPSe˘‹
, uöt32_à
B™ks
)

1111 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1114 
	`as£π_∑øm
(
	`IS_OB_WRP_SECTOR
(
WRPSe˘‹
));

1115 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

1118 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1120 if(
°©us
 =
HAL_OK
)

1122 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
WRPSe˘‹
;

1125  
°©us
;

1126 
	}
}

1129 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
) ||\

1130 
deföed
(
STM32F411xE
Ë|| 
	$deföed
(
STM32F446xx
)

1140 
HAL_SètusTy≥Def
 
	$FLASH_OB_E«bÀPCROP
(
uöt32_t
 
Se˘‹
)

1142 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1145 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
Se˘‹
));

1148 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1150 if(
°©us
 =
HAL_OK
)

1152 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
Se˘‹
;

1155  
°©us
;

1156 
	}
}

1168 
HAL_SètusTy≥Def
 
	$FLASH_OB_DißbÀPCROP
(
uöt32_t
 
Se˘‹
)

1170 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1173 
	`as£π_∑øm
(
	`IS_OB_PCROP
(
Se˘‹
));

1176 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1178 if(
°©us
 =
HAL_OK
)

1180 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
Se˘‹
);

1183  
°©us
;

1185 
	}
}

1200 
HAL_SètusTy≥Def
 
	$FLASH_OB_RDP_LevñC⁄fig
(
uöt8_t
 
Levñ
)

1202 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1205 
	`as£π_∑øm
(
	`IS_OB_RDP_LEVEL
(
Levñ
));

1208 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1210 if(
°©us
 =
HAL_OK
)

1212 *(
__IO
 
uöt8_t
*)
OPTCR_BYTE1_ADDRESS
 = 
Levñ
;

1215  
°©us
;

1216 
	}
}

1234 
HAL_SètusTy≥Def
 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
Iwdg
, uöt8_à
St›
, uöt8_à
Stdby
)

1236 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

1237 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1240 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
Iwdg
));

1241 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
St›
));

1242 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
Stdby
));

1245 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1247 if(
°©us
 =
HAL_OK
)

1250 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x1F);

1253 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 = 
Iwdg
 | (uöt8_t)(
Stdby
 | (uöt8_t)(
St›
 | ((uöt8_t)
›ti⁄tmp
)));

1256  
°©us
;

1257 
	}
}

1269 
HAL_SètusTy≥Def
 
	$FLASH_OB_BOR_LevñC⁄fig
(
uöt8_t
 
Levñ
)

1272 
	`as£π_∑øm
(
	`IS_OB_BOR_LEVEL
(
Levñ
));

1275 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BOR_LEV
);

1276 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
Levñ
;

1278  
HAL_OK
;

1280 
	}
}

1287 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1290  ((
uöt8_t
)(
FLASH
->
OPTCR
 & 0xE0));

1291 
	}
}

1297 
uöt16_t
 
	$FLASH_OB_GëWRP
()

1300  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

1301 
	}
}

1311 
uöt8_t
 
	$FLASH_OB_GëRDP
()

1313 
uöt8_t
 
ªad°©us
 = 
OB_RDP_LEVEL_0
;

1315 if((*(
__IO
 
uöt8_t
*)(
OPTCR_BYTE1_ADDRESS
Ë=(uöt8_t)
OB_RDP_LEVEL_2
))

1317 
ªad°©us
 = 
OB_RDP_LEVEL_2
;

1319 if((*(
__IO
 
uöt8_t
*)(
OPTCR_BYTE1_ADDRESS
Ë=(uöt8_t)
OB_RDP_LEVEL_1
))

1321 
ªad°©us
 = 
OB_RDP_LEVEL_1
;

1325 
ªad°©us
 = 
OB_RDP_LEVEL_0
;

1328  
ªad°©us
;

1329 
	}
}

1339 
uöt8_t
 
	$FLASH_OB_GëBOR
()

1342  (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0C);

1343 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_flash_ramfunc.c

67 
	~"°m32f4xx_hÆ.h
"

77 #ifde‡
HAL_FLASH_MODULE_ENABLED


78 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
)

113 
__RAM_FUNC
 
	$HAL_FLASHEx_St›FœshI¡îÁ˚Clk
()

116 
	`__HAL_RCC_PWR_CLK_ENABLE
();

118 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_FISSR
);

120  
HAL_OK
;

121 
	}
}

130 
__RAM_FUNC
 
	$HAL_FLASHEx_SèπFœshI¡îÁ˚Clk
()

133 
	`__HAL_RCC_PWR_CLK_ENABLE
();

135 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_FISSR
);

137  
HAL_OK
;

138 
	}
}

147 
__RAM_FUNC
 
	$HAL_FLASHEx_E«bÀFœshSÀïMode
()

150 
	`__HAL_RCC_PWR_CLK_ENABLE
();

152 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_FMSSR
);

154  
HAL_OK
;

155 
	}
}

164 
__RAM_FUNC
 
	$HAL_FLASHEx_DißbÀFœshSÀïMode
()

167 
	`__HAL_RCC_PWR_CLK_ENABLE
();

169 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_FMSSR
);

171  
HAL_OK
;

172 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_fmpi2c.c

183 
	~"°m32f4xx_hÆ.h
"

194 #ifde‡
HAL_FMPI2C_MODULE_ENABLED


196 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
)

203 
	#TIMING_CLEAR_MASK
 ((
uöt32_t
)0xF0FFFFFFË

	)

204 
	#FMPI2C_TIMEOUT_ADDR
 ((
uöt32_t
)10000Ë

	)

205 
	#FMPI2C_TIMEOUT_BUSY
 ((
uöt32_t
)25Ë

	)

206 
	#FMPI2C_TIMEOUT_DIR
 ((
uöt32_t
)25Ë

	)

207 
	#FMPI2C_TIMEOUT_RXNE
 ((
uöt32_t
)25Ë

	)

208 
	#FMPI2C_TIMEOUT_STOPF
 ((
uöt32_t
)25Ë

	)

209 
	#FMPI2C_TIMEOUT_TC
 ((
uöt32_t
)25Ë

	)

210 
	#FMPI2C_TIMEOUT_TCR
 ((
uöt32_t
)25Ë

	)

211 
	#FMPI2C_TIMEOUT_TXIS
 ((
uöt32_t
)25Ë

	)

212 
	#FMPI2C_TIMEOUT_FLAG
 ((
uöt32_t
)25Ë

	)

224 
FMPI2C_DMAMa°îTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

225 
FMPI2C_DMAMa°îRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

226 
FMPI2C_DMASœveTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

227 
FMPI2C_DMASœveRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

228 
FMPI2C_DMAMemTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

229 
FMPI2C_DMAMemRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

230 
FMPI2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

232 
HAL_SètusTy≥Def
 
FMPI2C_Reque°Mem‹yWrôe
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
);

233 
HAL_SètusTy≥Def
 
FMPI2C_Reque°Mem‹yRód
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
);

234 
HAL_SètusTy≥Def
 
FMPI2C_WaôOnFœgU¡ûTimeout
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

235 
HAL_SètusTy≥Def
 
FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Timeout
);

236 
HAL_SètusTy≥Def
 
FMPI2C_WaôOnRXNEFœgU¡ûTimeout
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Timeout
);

237 
HAL_SètusTy≥Def
 
FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Timeout
);

238 
HAL_SètusTy≥Def
 
FMPI2C_IsAcknowÀdgeFaûed
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Timeout
);

240 
HAL_SètusTy≥Def
 
FMPI2C_Ma°îTønsmô_ISR
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
);

241 
HAL_SètusTy≥Def
 
FMPI2C_Ma°îRe˚ive_ISR
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
);

243 
HAL_SètusTy≥Def
 
FMPI2C_SœveTønsmô_ISR
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
);

244 
HAL_SètusTy≥Def
 
FMPI2C_SœveRe˚ive_ISR
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
);

246 
FMPI2C_Tøns„rC⁄fig
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 
Size
, 
uöt32_t
 
Mode
, uöt32_à
Reque°
);

294 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Inô
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

297 if(
hfmpi2c
 =
NULL
)

299  
HAL_ERROR
;

303 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_INSTANCE
(
hfmpi2c
->
In°™˚
));

304 
	`as£π_∑øm
(
	`IS_FMPI2C_OWN_ADDRESS1
(
hfmpi2c
->
Inô
.
OwnAddªss1
));

305 
	`as£π_∑øm
(
	`IS_FMPI2C_ADDRESSING_MODE
(
hfmpi2c
->
Inô
.
AddªssögMode
));

306 
	`as£π_∑øm
(
	`IS_FMPI2C_DUAL_ADDRESS
(
hfmpi2c
->
Inô
.
DuÆAddªssMode
));

307 
	`as£π_∑øm
(
	`IS_FMPI2C_OWN_ADDRESS2
(
hfmpi2c
->
Inô
.
OwnAddªss2
));

308 
	`as£π_∑øm
(
	`IS_FMPI2C_OWN_ADDRESS2_MASK
(
hfmpi2c
->
Inô
.
OwnAddªss2Masks
));

309 
	`as£π_∑øm
(
	`IS_FMPI2C_GENERAL_CALL
(
hfmpi2c
->
Inô
.
GíîÆCÆlMode
));

310 
	`as£π_∑øm
(
	`IS_FMPI2C_NO_STRETCH
(
hfmpi2c
->
Inô
.
NoSåëchMode
));

312 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_RESET
)

315 
hfmpi2c
->
Lock
 = 
HAL_UNLOCKED
;

317 
	`HAL_FMPI2C_M•Inô
(
hfmpi2c
);

320 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_BUSY
;

323 
	`__HAL_FMPI2C_DISABLE
(
hfmpi2c
);

327 
hfmpi2c
->
In°™˚
->
TIMINGR
 = hfmpi2c->
Inô
.
Timög
 & 
TIMING_CLEAR_MASK
;

331 
hfmpi2c
->
In°™˚
->
OAR1
 &~
FMPI2C_OAR1_OA1EN
;

332 if(
hfmpi2c
->
Inô
.
OwnAddªss1
 != 0)

334 if(
hfmpi2c
->
Inô
.
AddªssögMode
 =
FMPI2C_ADDRESSINGMODE_7BIT
)

336 
hfmpi2c
->
In°™˚
->
OAR1
 = (
FMPI2C_OAR1_OA1EN
 | hfmpi2c->
Inô
.
OwnAddªss1
);

340 
hfmpi2c
->
In°™˚
->
OAR1
 = (
FMPI2C_OAR1_OA1EN
 | 
FMPI2C_OAR1_OA1MODE
 | hfmpi2c->
Inô
.
OwnAddªss1
);

346 if(
hfmpi2c
->
Inô
.
AddªssögMode
 =
FMPI2C_ADDRESSINGMODE_10BIT
)

348 
hfmpi2c
->
In°™˚
->
CR2
 = (
FMPI2C_CR2_ADD10
);

351 
hfmpi2c
->
In°™˚
->
CR2
 |(
FMPI2C_CR2_AUTOEND
 | 
FMPI2C_CR2_NACK
);

355 
hfmpi2c
->
In°™˚
->
OAR2
 = (hfmpi2c->
Inô
.
DuÆAddªssMode
 | hfmpi2c->Inô.
OwnAddªss2
 | (hfmpi2c->Inô.
OwnAddªss2Masks
 << 8));

359 
hfmpi2c
->
In°™˚
->
CR1
 = (hfmpi2c->
Inô
.
GíîÆCÆlMode
 | hfmpi2c->Inô.
NoSåëchMode
);

362 
	`__HAL_FMPI2C_ENABLE
(
hfmpi2c
);

364 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

365 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

367  
HAL_OK
;

368 
	}
}

376 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_DeInô
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

379 if(
hfmpi2c
 =
NULL
)

381  
HAL_ERROR
;

385 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_INSTANCE
(
hfmpi2c
->
In°™˚
));

387 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_BUSY
;

390 
	`__HAL_FMPI2C_DISABLE
(
hfmpi2c
);

393 
	`HAL_FMPI2C_M•DeInô
(
hfmpi2c
);

395 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

396 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_RESET
;

399 
	`__HAL_UNLOCK
(
hfmpi2c
);

401  
HAL_OK
;

402 
	}
}

410 
__wók
 
	$HAL_FMPI2C_M•Inô
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

415 
	}
}

423 
__wók
 
	$HAL_FMPI2C_M•DeInô
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

428 
	}
}

503 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Ma°î_Tønsmô
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

505 
uöt32_t
 
sizëmp
 = 0;

507 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

509 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

511  
HAL_ERROR
;

514 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

516  
HAL_BUSY
;

520 
	`__HAL_LOCK
(
hfmpi2c
);

522 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MASTER_BUSY_TX
;

523 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

528 if(
Size
 > 255)

530 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_WRITE
);

531 
sizëmp
 = 255;

535 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
Size
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_WRITE
);

536 
sizëmp
 = 
Size
;

542 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

544 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

546  
HAL_ERROR
;

550  
HAL_TIMEOUT
;

554 
hfmpi2c
->
In°™˚
->
TXDR
 = (*
pD©a
++);

555 
sizëmp
--;

556 
Size
--;

558 if((
sizëmp
 =0)&&(
Size
!=0))

561 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

563  
HAL_TIMEOUT
;

566 if(
Size
 > 255)

568 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

569 
sizëmp
 = 255;

573 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
Size
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

574 
sizëmp
 = 
Size
;

578 }
Size
 > 0);

582 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

584 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

586  
HAL_ERROR
;

590  
HAL_TIMEOUT
;

595 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

598 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

600 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

603 
	`__HAL_UNLOCK
(
hfmpi2c
);

605  
HAL_OK
;

609  
HAL_BUSY
;

611 
	}
}

623 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Ma°î_Re˚ive
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

625 
uöt32_t
 
sizëmp
 = 0;

627 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

629 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

631  
HAL_ERROR
;

634 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

636  
HAL_BUSY
;

640 
	`__HAL_LOCK
(
hfmpi2c
);

642 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MASTER_BUSY_RX
;

643 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

648 if(
Size
 > 255)

650 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_READ
);

651 
sizëmp
 = 255;

655 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
Size
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_READ
);

656 
sizëmp
 = 
Size
;

662 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

664  
HAL_TIMEOUT
;

668 (*
pD©a
++Ë=
hfmpi2c
->
In°™˚
->
RXDR
;

669 
sizëmp
--;

670 
Size
--;

672 if((
sizëmp
 =0)&&(
Size
!=0))

675 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

677  
HAL_TIMEOUT
;

680 if(
Size
 > 255)

682 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

683 
sizëmp
 = 255;

687 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
Size
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

688 
sizëmp
 = 
Size
;

692 }
Size
 > 0);

696 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

698 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

700  
HAL_ERROR
;

704  
HAL_TIMEOUT
;

709 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

712 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

714 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

717 
	`__HAL_UNLOCK
(
hfmpi2c
);

719  
HAL_OK
;

723  
HAL_BUSY
;

725 
	}
}

736 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Sœve_Tønsmô
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

738 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

740 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

742  
HAL_ERROR
;

746 
	`__HAL_LOCK
(
hfmpi2c
);

748 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
;

749 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

752 
hfmpi2c
->
In°™˚
->
CR2
 &~
FMPI2C_CR2_NACK
;

755 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

758 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

759  
HAL_TIMEOUT
;

763 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_ADDR
);

766 if(
hfmpi2c
->
Inô
.
AddªssögMode
 =
FMPI2C_ADDRESSINGMODE_10BIT
)

769 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

772 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

773  
HAL_TIMEOUT
;

777 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_ADDR
);

781 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_DIR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

784 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

785  
HAL_TIMEOUT
;

791 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

794 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

796 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

798  
HAL_ERROR
;

802  
HAL_TIMEOUT
;

807 
hfmpi2c
->
In°™˚
->
TXDR
 = (*
pD©a
++);

808 
Size
--;

809 }
Size
 > 0);

812 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

815 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

817 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

821 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

825  
HAL_TIMEOUT
;

830 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_STOPF
);

833 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
, 
SET
, 
Timeout
Ë!
HAL_OK
)

836 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

837  
HAL_TIMEOUT
;

841 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

843 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

846 
	`__HAL_UNLOCK
(
hfmpi2c
);

848  
HAL_OK
;

852  
HAL_BUSY
;

854 
	}
}

865 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Sœve_Re˚ive
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

867 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

869 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

871  
HAL_ERROR
;

875 
	`__HAL_LOCK
(
hfmpi2c
);

877 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
;

878 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

881 
hfmpi2c
->
In°™˚
->
CR2
 &~
FMPI2C_CR2_NACK
;

884 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

887 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

888  
HAL_TIMEOUT
;

892 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_ADDR
);

895 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_DIR
, 
SET
, 
Timeout
Ë!
HAL_OK
)

898 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

899  
HAL_TIMEOUT
;

902 
Size
 > 0)

905 if(
	`FMPI2C_WaôOnRXNEFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

908 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

909 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_TIMEOUT
)

911  
HAL_TIMEOUT
;

915  
HAL_ERROR
;

920 (*
pD©a
++Ë
hfmpi2c
->
In°™˚
->
RXDR
;

921 
Size
--;

925 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

928 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

930 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

932  
HAL_ERROR
;

936  
HAL_TIMEOUT
;

941 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_STOPF
);

944 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
, 
SET
, 
Timeout
Ë!
HAL_OK
)

947 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

948  
HAL_TIMEOUT
;

953 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

955 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

958 
	`__HAL_UNLOCK
(
hfmpi2c
);

960  
HAL_OK
;

964  
HAL_BUSY
;

966 
	}
}

977 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Ma°î_Tønsmô_IT
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

979 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

981 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

983  
HAL_ERROR
;

986 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

988  
HAL_BUSY
;

992 
	`__HAL_LOCK
(
hfmpi2c
);

994 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MASTER_BUSY_TX
;

995 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

997 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

998 
hfmpi2c
->
X„rCou¡
 = 
Size
;

999 if(
Size
 > 255)

1001 
hfmpi2c
->
X„rSize
 = 255;

1005 
hfmpi2c
->
X„rSize
 = 
Size
;

1010 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

1012 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_WRITE
);

1016 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_WRITE
);

1020 
	`__HAL_UNLOCK
(
hfmpi2c
);

1030 
	`__HAL_FMPI2C_ENABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_TXI
 );

1032  
HAL_OK
;

1036  
HAL_BUSY
;

1038 
	}
}

1049 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Ma°î_Re˚ive_IT
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1051 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1053 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1055  
HAL_ERROR
;

1058 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

1060  
HAL_BUSY
;

1064 
	`__HAL_LOCK
(
hfmpi2c
);

1066 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MASTER_BUSY_RX
;

1067 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1069 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1070 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1071 if(
Size
 > 255)

1073 
hfmpi2c
->
X„rSize
 = 255;

1077 
hfmpi2c
->
X„rSize
 = 
Size
;

1082 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

1084 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_READ
);

1088 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_READ
);

1092 
	`__HAL_UNLOCK
(
hfmpi2c
);

1101 
	`__HAL_FMPI2C_ENABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
 | 
FMPI2C_IT_STOPI
 | 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_RXI
 );

1103  
HAL_OK
;

1107  
HAL_BUSY
;

1109 
	}
}

1119 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Sœve_Tønsmô_IT
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1121 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1123 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1125  
HAL_ERROR
;

1129 
	`__HAL_LOCK
(
hfmpi2c
);

1131 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_SLAVE_BUSY_TX
;

1132 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1135 
hfmpi2c
->
In°™˚
->
CR2
 &~
FMPI2C_CR2_NACK
;

1137 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1138 
hfmpi2c
->
X„rSize
 = 
Size
;

1139 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1142 
	`__HAL_UNLOCK
(
hfmpi2c
);

1151 
	`__HAL_FMPI2C_ENABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
 | 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_ADDRI
 | 
FMPI2C_IT_TXI
 );

1153  
HAL_OK
;

1157  
HAL_BUSY
;

1159 
	}
}

1169 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Sœve_Re˚ive_IT
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1171 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1173 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1175  
HAL_ERROR
;

1179 
	`__HAL_LOCK
(
hfmpi2c
);

1181 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
;

1182 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1185 
hfmpi2c
->
In°™˚
->
CR2
 &~
FMPI2C_CR2_NACK
;

1187 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1188 
hfmpi2c
->
X„rSize
 = 
Size
;

1189 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1192 
	`__HAL_UNLOCK
(
hfmpi2c
);

1201 
	`__HAL_FMPI2C_ENABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
 | 
FMPI2C_IT_STOPI
 | 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_ADDRI
 | 
FMPI2C_IT_RXI
);

1203  
HAL_OK
;

1207  
HAL_BUSY
;

1209 
	}
}

1220 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Ma°î_Tønsmô_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1222 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1224 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1226  
HAL_ERROR
;

1229 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

1231  
HAL_BUSY
;

1235 
	`__HAL_LOCK
(
hfmpi2c
);

1237 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MASTER_BUSY_TX
;

1238 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1240 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1241 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1242 if(
Size
 > 255)

1244 
hfmpi2c
->
X„rSize
 = 255;

1248 
hfmpi2c
->
X„rSize
 = 
Size
;

1252 
hfmpi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
FMPI2C_DMAMa°îTønsmôC∂t
;

1255 
hfmpi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
FMPI2C_DMAEº‹
;

1258 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hfmpi2c->
In°™˚
->
TXDR
, hfmpi2c->
X„rSize
);

1262 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

1264 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_WRITE
);

1268 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_WRITE
);

1272 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_TXIS
Ë!
HAL_OK
)

1275 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

1277 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

1279  
HAL_ERROR
;

1283  
HAL_TIMEOUT
;

1289 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_TXDMAEN
;

1292 
	`__HAL_UNLOCK
(
hfmpi2c
);

1294  
HAL_OK
;

1298  
HAL_BUSY
;

1300 
	}
}

1311 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Ma°î_Re˚ive_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1313 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1315 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1317  
HAL_ERROR
;

1320 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

1322  
HAL_BUSY
;

1326 
	`__HAL_LOCK
(
hfmpi2c
);

1328 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MASTER_BUSY_RX
;

1329 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1331 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1332 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1333 if(
Size
 > 255)

1335 
hfmpi2c
->
X„rSize
 = 255;

1339 
hfmpi2c
->
X„rSize
 = 
Size
;

1343 
hfmpi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
FMPI2C_DMAMa°îRe˚iveC∂t
;

1346 
hfmpi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
FMPI2C_DMAEº‹
;

1349 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm¨x
, (
uöt32_t
)&hfmpi2c->
In°™˚
->
RXDR
, (uöt32_t)
pD©a
, hfmpi2c->
X„rSize
);

1353 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

1355 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_READ
);

1359 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_READ
);

1363 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
, 
RESET
, 
FMPI2C_TIMEOUT_RXNE
Ë!
HAL_OK
)

1365  
HAL_TIMEOUT
;

1370 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_RXDMAEN
;

1373 
	`__HAL_UNLOCK
(
hfmpi2c
);

1375  
HAL_OK
;

1379  
HAL_BUSY
;

1381 
	}
}

1391 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Sœve_Tønsmô_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1393 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1395 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1397  
HAL_ERROR
;

1400 
	`__HAL_LOCK
(
hfmpi2c
);

1402 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_SLAVE_BUSY_TX
;

1403 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1405 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1406 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1407 
hfmpi2c
->
X„rSize
 = 
Size
;

1410 
hfmpi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
FMPI2C_DMASœveTønsmôC∂t
;

1413 
hfmpi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
FMPI2C_DMAEº‹
;

1416 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hfmpi2c->
In°™˚
->
TXDR
, hfmpi2c->
X„rSize
);

1419 
hfmpi2c
->
In°™˚
->
CR2
 &~
FMPI2C_CR2_NACK
;

1422 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
, 
RESET
, 
FMPI2C_TIMEOUT_ADDR
Ë!
HAL_OK
)

1425 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

1426  
HAL_TIMEOUT
;

1430 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_ADDR
);

1433 if(
hfmpi2c
->
Inô
.
AddªssögMode
 =
FMPI2C_ADDRESSINGMODE_10BIT
)

1436 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
, 
RESET
, 
FMPI2C_TIMEOUT_ADDR
Ë!
HAL_OK
)

1439 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

1440  
HAL_TIMEOUT
;

1444 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_ADDR
);

1448 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_DIR
, 
RESET
, 
FMPI2C_TIMEOUT_BUSY
Ë!
HAL_OK
)

1451 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

1452  
HAL_TIMEOUT
;

1456 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_TXDMAEN
;

1459 
	`__HAL_UNLOCK
(
hfmpi2c
);

1461  
HAL_OK
;

1465  
HAL_BUSY
;

1467 
	}
}

1477 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Sœve_Re˚ive_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1479 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1481 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1483  
HAL_ERROR
;

1486 
	`__HAL_LOCK
(
hfmpi2c
);

1488 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
;

1489 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1491 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1492 
hfmpi2c
->
X„rSize
 = 
Size
;

1493 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1496 
hfmpi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
FMPI2C_DMASœveRe˚iveC∂t
;

1499 
hfmpi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
FMPI2C_DMAEº‹
;

1502 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm¨x
, (
uöt32_t
)&hfmpi2c->
In°™˚
->
RXDR
, (uöt32_t)
pD©a
, 
Size
);

1505 
hfmpi2c
->
In°™˚
->
CR2
 &~
FMPI2C_CR2_NACK
;

1508 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
, 
RESET
, 
FMPI2C_TIMEOUT_ADDR
Ë!
HAL_OK
)

1511 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

1512  
HAL_TIMEOUT
;

1516 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_ADDR
);

1519 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_DIR
, 
SET
, 
FMPI2C_TIMEOUT_DIR
Ë!
HAL_OK
)

1522 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

1523  
HAL_TIMEOUT
;

1527 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_RXDMAEN
;

1530 
	`__HAL_UNLOCK
(
hfmpi2c
);

1532  
HAL_OK
;

1536  
HAL_BUSY
;

1538 
	}
}

1551 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Mem_Wrôe
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

1553 
uöt32_t
 
Sizëmp
 = 0;

1556 
	`as£π_∑øm
(
	`IS_FMPI2C_MEMADD_SIZE
(
MemAddSize
));

1558 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1560 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1562  
HAL_ERROR
;

1565 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

1567  
HAL_BUSY
;

1571 
	`__HAL_LOCK
(
hfmpi2c
);

1573 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MEM_BUSY_TX
;

1574 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1577 if(
	`FMPI2C_Reque°Mem‹yWrôe
(
hfmpi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
Ë!
HAL_OK
)

1579 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

1582 
	`__HAL_UNLOCK
(
hfmpi2c
);

1583  
HAL_ERROR
;

1588 
	`__HAL_UNLOCK
(
hfmpi2c
);

1589  
HAL_TIMEOUT
;

1595 if(
Size
 > 255)

1597 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

1598 
Sizëmp
 = 255;

1602 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
Size
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

1603 
Sizëmp
 = 
Size
;

1609 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

1611 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

1613  
HAL_ERROR
;

1617  
HAL_TIMEOUT
;

1622 
hfmpi2c
->
In°™˚
->
TXDR
 = (*
pD©a
++);

1623 
Sizëmp
--;

1624 
Size
--;

1626 if((
Sizëmp
 =0)&&(
Size
!=0))

1629 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1631  
HAL_TIMEOUT
;

1635 if(
Size
 > 255)

1637 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

1638 
Sizëmp
 = 255;

1642 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
Size
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

1643 
Sizëmp
 = 
Size
;

1647 }
Size
 > 0);

1651 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

1653 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

1655  
HAL_ERROR
;

1659  
HAL_TIMEOUT
;

1664 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

1667 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

1669 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

1672 
	`__HAL_UNLOCK
(
hfmpi2c
);

1674  
HAL_OK
;

1678  
HAL_BUSY
;

1680 
	}
}

1694 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Mem_Ród
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

1696 
uöt32_t
 
Sizëmp
 = 0;

1699 
	`as£π_∑øm
(
	`IS_FMPI2C_MEMADD_SIZE
(
MemAddSize
));

1701 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1703 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1705  
HAL_ERROR
;

1708 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

1710  
HAL_BUSY
;

1714 
	`__HAL_LOCK
(
hfmpi2c
);

1716 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MEM_BUSY_RX
;

1717 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1720 if(
	`FMPI2C_Reque°Mem‹yRód
(
hfmpi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
Ë!
HAL_OK
)

1722 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

1725 
	`__HAL_UNLOCK
(
hfmpi2c
);

1726  
HAL_ERROR
;

1731 
	`__HAL_UNLOCK
(
hfmpi2c
);

1732  
HAL_TIMEOUT
;

1739 if(
Size
 > 255)

1741 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_READ
);

1742 
Sizëmp
 = 255;

1746 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
Size
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_READ
);

1747 
Sizëmp
 = 
Size
;

1753 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1755  
HAL_TIMEOUT
;

1759 (*
pD©a
++Ë
hfmpi2c
->
In°™˚
->
RXDR
;

1762 
Sizëmp
--;

1763 
Size
--;

1765 if((
Sizëmp
 =0)&&(
Size
!=0))

1768 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1770  
HAL_TIMEOUT
;

1773 if(
Size
 > 255)

1775 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

1776 
Sizëmp
 = 255;

1780 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
Size
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

1781 
Sizëmp
 = 
Size
;

1785 }
Size
 > 0);

1789 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

1791 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

1793  
HAL_ERROR
;

1797  
HAL_TIMEOUT
;

1802 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

1805 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

1807 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

1810 
	`__HAL_UNLOCK
(
hfmpi2c
);

1812  
HAL_OK
;

1816  
HAL_BUSY
;

1818 
	}
}

1830 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Mem_Wrôe_IT
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1833 
	`as£π_∑øm
(
	`IS_FMPI2C_MEMADD_SIZE
(
MemAddSize
));

1835 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1837 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1839  
HAL_ERROR
;

1842 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

1844  
HAL_BUSY
;

1848 
	`__HAL_LOCK
(
hfmpi2c
);

1850 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MEM_BUSY_TX
;

1851 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

1853 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1854 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1855 if(
Size
 > 255)

1857 
hfmpi2c
->
X„rSize
 = 255;

1861 
hfmpi2c
->
X„rSize
 = 
Size
;

1865 if(
	`FMPI2C_Reque°Mem‹yWrôe
(
hfmpi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
FMPI2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

1867 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

1870 
	`__HAL_UNLOCK
(
hfmpi2c
);

1871  
HAL_ERROR
;

1876 
	`__HAL_UNLOCK
(
hfmpi2c
);

1877  
HAL_TIMEOUT
;

1883 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

1885 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

1889 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

1893 
	`__HAL_UNLOCK
(
hfmpi2c
);

1902 
	`__HAL_FMPI2C_ENABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_TXI
 );

1904  
HAL_OK
;

1908  
HAL_BUSY
;

1910 
	}
}

1923 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Mem_Ród_IT
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1926 
	`as£π_∑øm
(
	`IS_FMPI2C_MEMADD_SIZE
(
MemAddSize
));

1928 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

1930 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1932  
HAL_ERROR
;

1935 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

1937  
HAL_BUSY
;

1941 
	`__HAL_LOCK
(
hfmpi2c
);

1943 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MEM_BUSY_RX
;

1945 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

1946 
hfmpi2c
->
X„rCou¡
 = 
Size
;

1947 if(
Size
 > 255)

1949 
hfmpi2c
->
X„rSize
 = 255;

1953 
hfmpi2c
->
X„rSize
 = 
Size
;

1957 if(
	`FMPI2C_Reque°Mem‹yRód
(
hfmpi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
FMPI2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

1959 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

1962 
	`__HAL_UNLOCK
(
hfmpi2c
);

1963  
HAL_ERROR
;

1968 
	`__HAL_UNLOCK
(
hfmpi2c
);

1969  
HAL_TIMEOUT
;

1975 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

1977 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_READ
);

1981 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_READ
);

1985 
	`__HAL_UNLOCK
(
hfmpi2c
);

1994 
	`__HAL_FMPI2C_ENABLE_IT
(
hfmpi2c
, 
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_RXI
 );

1996  
HAL_OK
;

2000  
HAL_BUSY
;

2002 
	}
}

2014 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Mem_Wrôe_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2017 
	`as£π_∑øm
(
	`IS_FMPI2C_MEMADD_SIZE
(
MemAddSize
));

2019 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

2021 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

2023  
HAL_ERROR
;

2026 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

2028  
HAL_BUSY
;

2032 
	`__HAL_LOCK
(
hfmpi2c
);

2034 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MEM_BUSY_TX
;

2035 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

2037 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

2038 
hfmpi2c
->
X„rCou¡
 = 
Size
;

2039 if(
Size
 > 255)

2041 
hfmpi2c
->
X„rSize
 = 255;

2045 
hfmpi2c
->
X„rSize
 = 
Size
;

2049 
hfmpi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
FMPI2C_DMAMemTønsmôC∂t
;

2052 
hfmpi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
FMPI2C_DMAEº‹
;

2055 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hfmpi2c->
In°™˚
->
TXDR
, hfmpi2c->
X„rSize
);

2058 if(
	`FMPI2C_Reque°Mem‹yWrôe
(
hfmpi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
FMPI2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

2060 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

2063 
	`__HAL_UNLOCK
(
hfmpi2c
);

2064  
HAL_ERROR
;

2069 
	`__HAL_UNLOCK
(
hfmpi2c
);

2070  
HAL_TIMEOUT
;

2076 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

2078 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

2082 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

2086 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_TXIS
Ë!
HAL_OK
)

2088 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

2090  
HAL_ERROR
;

2094  
HAL_TIMEOUT
;

2099 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_TXDMAEN
;

2102 
	`__HAL_UNLOCK
(
hfmpi2c
);

2104  
HAL_OK
;

2108  
HAL_BUSY
;

2110 
	}
}

2123 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_Mem_Ród_DMA
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2126 
	`as£π_∑øm
(
	`IS_FMPI2C_MEMADD_SIZE
(
MemAddSize
));

2128 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

2130 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

2132  
HAL_ERROR
;

2135 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

2137  
HAL_BUSY
;

2141 
	`__HAL_LOCK
(
hfmpi2c
);

2143 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_MEM_BUSY_RX
;

2145 
hfmpi2c
->
pBuffPå
 = 
pD©a
;

2146 
hfmpi2c
->
X„rCou¡
 = 
Size
;

2147 if(
Size
 > 255)

2149 
hfmpi2c
->
X„rSize
 = 255;

2153 
hfmpi2c
->
X„rSize
 = 
Size
;

2157 
hfmpi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
FMPI2C_DMAMemRe˚iveC∂t
;

2160 
hfmpi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
FMPI2C_DMAEº‹
;

2163 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm¨x
, (
uöt32_t
)&hfmpi2c->
In°™˚
->
RXDR
, (uöt32_t)
pD©a
, hfmpi2c->
X„rSize
);

2166 if(
	`FMPI2C_Reque°Mem‹yRód
(
hfmpi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
FMPI2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

2168 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

2171 
	`__HAL_UNLOCK
(
hfmpi2c
);

2172  
HAL_ERROR
;

2177 
	`__HAL_UNLOCK
(
hfmpi2c
);

2178  
HAL_TIMEOUT
;

2183 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

2185 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_READ
);

2189 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_GENERATE_START_READ
);

2193 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
, 
RESET
, 
FMPI2C_TIMEOUT_RXNE
Ë!
HAL_OK
)

2195  
HAL_TIMEOUT
;

2199 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_RXDMAEN
;

2202 
	`__HAL_UNLOCK
(
hfmpi2c
);

2204  
HAL_OK
;

2208  
HAL_BUSY
;

2210 
	}
}

2222 
HAL_SètusTy≥Def
 
	$HAL_FMPI2C_IsDevi˚Ródy
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
)

2224 
uöt32_t
 
tick°¨t
 = 0;

2226 
__IO
 
uöt32_t
 
FMPI2C_Trüls
 = 0;

2228 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_READY
)

2230 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
Ë=
SET
)

2232  
HAL_BUSY
;

2236 
	`__HAL_LOCK
(
hfmpi2c
);

2238 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_BUSY
;

2239 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

2244 
hfmpi2c
->
In°™˚
->
CR2
 = 
	`__HAL_FMPI2C_GENERATE_START
(hfmpi2c->
Inô
.
AddªssögMode
,
DevAddªss
);

2248 
tick°¨t
 = 
	`HAL_GëTick
();

2249 (
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
Ë=
RESET
Ë&& (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_AF
Ë=RESETË&& (hfmpi2c->
Sèã
 !
HAL_FMPI2C_STATE_TIMEOUT
))

2251 if(
Timeout
 !
HAL_MAX_DELAY
)

2253 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

2256 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

2258 
	`__HAL_UNLOCK
(
hfmpi2c
);

2259  
HAL_TIMEOUT
;

2265 i‡(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
Ë=
RESET
)

2268 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

2270  
HAL_TIMEOUT
;

2274 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

2277 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

2280 
	`__HAL_UNLOCK
(
hfmpi2c
);

2282  
HAL_OK
;

2287 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

2289  
HAL_TIMEOUT
;

2293 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
);

2296 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

2300 i‡(
FMPI2C_Trüls
++ =
Trüls
)

2303 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_STOP
;

2306 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

2308  
HAL_TIMEOUT
;

2312 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

2314 }
FMPI2C_Trüls
 < 
Trüls
);

2316 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

2319 
	`__HAL_UNLOCK
(
hfmpi2c
);

2321  
HAL_TIMEOUT
;

2325  
HAL_BUSY
;

2327 
	}
}

2335 
	$HAL_FMPI2C_EV_IRQH™dÀr
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2338 i‡(((
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TXIS
Ë=
SET
Ë|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_TCR
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_TC
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_STOPF
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_AF
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_ADDR
Ë=SET)Ë&& (
	`__HAL_FMPI2C_GET_IT_SOURCE
(hfmpi2c, (
FMPI2C_IT_TCI
 | 
FMPI2C_IT_STOPI
 | 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_TXI
 | 
FMPI2C_IT_ADDRI
)) == SET))

2341 i‡(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_SLAVE_BUSY_TX
)

2343 
	`FMPI2C_SœveTønsmô_ISR
(
hfmpi2c
);

2347 i‡(((
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TXIS
Ë=
SET
Ë|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_TCR
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_TC
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_STOPF
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_AF
Ë=SET)Ë&& (
	`__HAL_FMPI2C_GET_IT_SOURCE
(hfmpi2c, (
FMPI2C_IT_TCI
 | 
FMPI2C_IT_STOPI
 | 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_TXI
)) == SET))

2350 i‡((
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_MASTER_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MEM_BUSY_TX
))

2352 
	`FMPI2C_Ma°îTønsmô_ISR
(
hfmpi2c
);

2357 i‡(((
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
Ë=
SET
Ë|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_TCR
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_TC
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_STOPF
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_AF
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_ADDR
Ë=SET)Ë&& (
	`__HAL_FMPI2C_GET_IT_SOURCE
(hfmpi2c, (
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_RXI
 | 
FMPI2C_IT_ADDRI
)) == SET))

2360 i‡(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
)

2362 
	`FMPI2C_SœveRe˚ive_ISR
(
hfmpi2c
);

2365 i‡(((
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
Ë=
SET
Ë|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_TCR
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_TC
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_STOPF
Ë=SETË|| (__HAL_FMPI2C_GET_FLAG(hfmpi2c, 
FMPI2C_FLAG_AF
Ë=SET)Ë&& (
	`__HAL_FMPI2C_GET_IT_SOURCE
(hfmpi2c, (
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_RXI
)) == SET))

2368 i‡((
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_MASTER_BUSY_RX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MEM_BUSY_RX
))

2370 
	`FMPI2C_Ma°îRe˚ive_ISR
(
hfmpi2c
);

2373 
	}
}

2381 
	$HAL_FMPI2C_ER_IRQH™dÀr
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2384 if((
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BERR
Ë=
SET
Ë&& (
	`__HAL_FMPI2C_GET_IT_SOURCE
(hfmpi2c, 
FMPI2C_IT_ERRI
) == SET))

2386 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_BERR
;

2389 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_BERR
);

2393 if((
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_OVR
Ë=
SET
Ë&& (
	`__HAL_FMPI2C_GET_IT_SOURCE
(hfmpi2c, 
FMPI2C_IT_ERRI
) == SET))

2395 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_OVR
;

2398 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_OVR
);

2402 if((
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_ARLO
Ë=
SET
Ë&& (
	`__HAL_FMPI2C_GET_IT_SOURCE
(hfmpi2c, 
FMPI2C_IT_ERRI
) == SET))

2404 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_ARLO
;

2407 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_ARLO
);

2411 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

2413 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

2415 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2417 
	}
}

2425 
__wók
 
	$HAL_FMPI2C_Ma°îTxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2430 
	}
}

2438 
__wók
 
	$HAL_FMPI2C_Ma°îRxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2443 
	}
}

2450 
__wók
 
	$HAL_FMPI2C_SœveTxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2455 
	}
}

2463 
__wók
 
	$HAL_FMPI2C_SœveRxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2468 
	}
}

2476 
__wók
 
	$HAL_FMPI2C_MemTxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2481 
	}
}

2489 
__wók
 
	$HAL_FMPI2C_MemRxC∂tCÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2494 
	}
}

2502 
__wók
 
	$HAL_FMPI2C_Eº‹CÆlback
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2507 
	}
}

2533 
HAL_FMPI2C_SèãTy≥Def
 
	$HAL_FMPI2C_GëSèã
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2535  
hfmpi2c
->
Sèã
;

2536 
	}
}

2544 
uöt32_t
 
	$HAL_FMPI2C_GëEº‹
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2546  
hfmpi2c
->
Eº‹Code
;

2547 
	}
}

2559 
HAL_SètusTy≥Def
 
	$FMPI2C_Ma°îTønsmô_ISR
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2561 
uöt16_t
 
DevAddªss
;

2564 
	`__HAL_LOCK
(
hfmpi2c
);

2566 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TXIS
Ë=
SET
)

2569 
hfmpi2c
->
In°™˚
->
TXDR
 = (*hfmpi2c->
pBuffPå
++);

2570 
hfmpi2c
->
X„rSize
--;

2571 
hfmpi2c
->
X„rCou¡
--;

2573 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
Ë=
SET
)

2575 if((
hfmpi2c
->
X„rSize
 =0)&&(hfmpi2c->
X„rCou¡
!=0))

2577 
DevAddªss
 = (
hfmpi2c
->
In°™˚
->
CR2
 & 
FMPI2C_CR2_SADD
);

2579 if(
hfmpi2c
->
X„rCou¡
 > 255)

2581 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

2582 
hfmpi2c
->
X„rSize
 = 255;

2586 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rCou¡
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

2587 
hfmpi2c
->
X„rSize
 = hfmpi2c->
X„rCou¡
;

2593 
	`__HAL_UNLOCK
(
hfmpi2c
);

2596 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_SIZE
;

2597 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2600 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TC
Ë=
SET
)

2602 if(
hfmpi2c
->
X„rCou¡
 == 0)

2605 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_STOP
;

2610 
	`__HAL_UNLOCK
(
hfmpi2c
);

2613 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_SIZE
;

2614 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2617 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
Ë=
SET
)

2620 
	`__HAL_FMPI2C_DISABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_TXI
 );

2623 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

2626 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

2628 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

2631 
	`__HAL_UNLOCK
(
hfmpi2c
);

2633 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_MEM_BUSY_TX
)

2635 
	`HAL_FMPI2C_MemTxC∂tCÆlback
(
hfmpi2c
);

2639 
	`HAL_FMPI2C_Ma°îTxC∂tCÆlback
(
hfmpi2c
);

2642 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
Ë=
SET
)

2645 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
);

2648 
	`__HAL_UNLOCK
(
hfmpi2c
);

2650 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

2651 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2655 
	`__HAL_UNLOCK
(
hfmpi2c
);

2657  
HAL_OK
;

2658 
	}
}

2666 
HAL_SètusTy≥Def
 
	$FMPI2C_Ma°îRe˚ive_ISR
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2668 
uöt16_t
 
DevAddªss
;

2671 
	`__HAL_LOCK
(
hfmpi2c
);

2673 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
Ë=
SET
)

2676 (*
hfmpi2c
->
pBuffPå
++Ëhfmpi2c->
In°™˚
->
RXDR
;

2677 
hfmpi2c
->
X„rSize
--;

2678 
hfmpi2c
->
X„rCou¡
--;

2680 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
Ë=
SET
)

2682 if((
hfmpi2c
->
X„rSize
 =0)&&(hfmpi2c->
X„rCou¡
!=0))

2684 
DevAddªss
 = (
hfmpi2c
->
In°™˚
->
CR2
 & 
FMPI2C_CR2_SADD
);

2686 if(
hfmpi2c
->
X„rCou¡
 > 255)

2688 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,255, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

2689 
hfmpi2c
->
X„rSize
 = 255;

2693 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rCou¡
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

2694 
hfmpi2c
->
X„rSize
 = hfmpi2c->
X„rCou¡
;

2700 
	`__HAL_UNLOCK
(
hfmpi2c
);

2703 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_SIZE
;

2704 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2707 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TC
Ë=
SET
)

2709 if(
hfmpi2c
->
X„rCou¡
 == 0)

2712 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_STOP
;

2717 
	`__HAL_UNLOCK
(
hfmpi2c
);

2720 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_SIZE
;

2721 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2724 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
Ë=
SET
)

2727 
	`__HAL_FMPI2C_DISABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_RXI
 );

2730 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

2733 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

2735 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

2738 
	`__HAL_UNLOCK
(
hfmpi2c
);

2740 if(
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_MEM_BUSY_RX
)

2742 
	`HAL_FMPI2C_MemRxC∂tCÆlback
(
hfmpi2c
);

2746 
	`HAL_FMPI2C_Ma°îRxC∂tCÆlback
(
hfmpi2c
);

2749 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
Ë=
SET
)

2752 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
);

2755 
	`__HAL_UNLOCK
(
hfmpi2c
);

2757 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

2758 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2762 
	`__HAL_UNLOCK
(
hfmpi2c
);

2764  
HAL_OK
;

2766 
	}
}

2774 
HAL_SètusTy≥Def
 
	$FMPI2C_SœveTønsmô_ISR
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2777 
	`__HAL_LOCK
(
hfmpi2c
);

2779 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
Ë!
RESET
)

2785 if(
hfmpi2c
->
X„rCou¡
 == 0)

2788 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
);

2791 
	`__HAL_UNLOCK
(
hfmpi2c
);

2797 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
);

2800 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

2803 
	`__HAL_UNLOCK
(
hfmpi2c
);

2806 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2809 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
Ë=
SET
)

2812 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
);

2818 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
Ë=
SET
)

2821 
	`__HAL_FMPI2C_DISABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_ADDRI
 | 
FMPI2C_IT_RXI
 | 
FMPI2C_IT_TXI
 );

2824 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

2827 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

2829 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

2832 
	`__HAL_UNLOCK
(
hfmpi2c
);

2834 
	`HAL_FMPI2C_SœveTxC∂tCÆlback
(
hfmpi2c
);

2836 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TXIS
Ë=
SET
)

2840 if(
hfmpi2c
->
X„rCou¡
 > 0)

2843 
hfmpi2c
->
In°™˚
->
TXDR
 = (*hfmpi2c->
pBuffPå
++);

2844 
hfmpi2c
->
X„rCou¡
--;

2849 
	`__HAL_UNLOCK
(
hfmpi2c
);

2851  
HAL_OK
;

2852 
	}
}

2860 
HAL_SètusTy≥Def
 
	$FMPI2C_SœveRe˚ive_ISR
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

2863 
	`__HAL_LOCK
(
hfmpi2c
);

2865 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
Ë!
RESET
)

2868 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
);

2871 
	`__HAL_UNLOCK
(
hfmpi2c
);

2873 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

2874 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

2876 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
Ë=
SET
)

2879 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_ADDR
);

2881 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
Ë=
SET
)

2884 (*
hfmpi2c
->
pBuffPå
++Ëhfmpi2c->
In°™˚
->
RXDR
;

2885 
hfmpi2c
->
X„rSize
--;

2886 
hfmpi2c
->
X„rCou¡
--;

2888 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
Ë=
SET
)

2891 
	`__HAL_FMPI2C_DISABLE_IT
(
hfmpi2c
,
FMPI2C_IT_ERRI
 | 
FMPI2C_IT_TCI
| 
FMPI2C_IT_STOPI
| 
FMPI2C_IT_NACKI
 | 
FMPI2C_IT_ADDRI
 | 
FMPI2C_IT_RXI
 | FMPI2C_IT_RXI );

2894 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

2897 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

2899 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

2902 
	`__HAL_UNLOCK
(
hfmpi2c
);

2904 
	`HAL_FMPI2C_SœveRxC∂tCÆlback
(
hfmpi2c
);

2908 
	`__HAL_UNLOCK
(
hfmpi2c
);

2910  
HAL_OK
;

2911 
	}
}

2923 
HAL_SètusTy≥Def
 
	$FMPI2C_Reque°Mem‹yWrôe
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
)

2925 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
MemAddSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_GENERATE_START_WRITE
);

2928 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

2930 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

2932  
HAL_ERROR
;

2936  
HAL_TIMEOUT
;

2941 if(
MemAddSize
 =
FMPI2C_MEMADD_SIZE_8BIT
)

2944 
hfmpi2c
->
In°™˚
->
TXDR
 = 
	`__HAL_FMPI2C_MEM_ADD_LSB
(
MemAddªss
);

2950 
hfmpi2c
->
In°™˚
->
TXDR
 = 
	`__HAL_FMPI2C_MEM_ADD_MSB
(
MemAddªss
);

2953 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

2955 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

2957  
HAL_ERROR
;

2961  
HAL_TIMEOUT
;

2966 
hfmpi2c
->
In°™˚
->
TXDR
 = 
	`__HAL_FMPI2C_MEM_ADD_LSB
(
MemAddªss
);

2970 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

2972  
HAL_TIMEOUT
;

2975  
HAL_OK
;

2976 
	}
}

2988 
HAL_SètusTy≥Def
 
	$FMPI2C_Reque°Mem‹yRód
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
)

2990 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,
MemAddSize
, 
FMPI2C_SOFTEND_MODE
, 
FMPI2C_GENERATE_START_WRITE
);

2993 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

2995 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

2997  
HAL_ERROR
;

3001  
HAL_TIMEOUT
;

3006 if(
MemAddSize
 =
FMPI2C_MEMADD_SIZE_8BIT
)

3009 
hfmpi2c
->
In°™˚
->
TXDR
 = 
	`__HAL_FMPI2C_MEM_ADD_LSB
(
MemAddªss
);

3015 
hfmpi2c
->
In°™˚
->
TXDR
 = 
	`__HAL_FMPI2C_MEM_ADD_MSB
(
MemAddªss
);

3018 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

3020 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3022  
HAL_ERROR
;

3026  
HAL_TIMEOUT
;

3031 
hfmpi2c
->
In°™˚
->
TXDR
 = 
	`__HAL_FMPI2C_MEM_ADD_LSB
(
MemAddªss
);

3035 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TC
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3037  
HAL_TIMEOUT
;

3040  
HAL_OK
;

3041 
	}
}

3049 
	$FMPI2C_DMAMa°îTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3051 
uöt16_t
 
DevAddªss
;

3052 
FMPI2C_H™dÀTy≥Def
* 
hfmpi2c
 = (FMPI2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3056 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

3059 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
FMPI2C_TIMEOUT_TCR
Ë!
HAL_OK
)

3061 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3065 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_TXDMAEN
;

3068 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3072 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3074 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3076 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3080 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3085 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3088 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3090 
hfmpi2c
->
X„rCou¡
 = 0;

3092 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3093 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3097 
hfmpi2c
->
pBuffPå
 +hfmpi2c->
X„rSize
;

3098 
hfmpi2c
->
X„rCou¡
 -hfmpi2c->
X„rSize
;

3099 if(
hfmpi2c
->
X„rCou¡
 > 255)

3101 
hfmpi2c
->
X„rSize
 = 255;

3105 
hfmpi2c
->
X„rSize
 = hfmpi2c->
X„rCou¡
;

3108 
DevAddªss
 = (
hfmpi2c
->
In°™˚
->
CR2
 & 
FMPI2C_CR2_SADD
);

3111 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm©x
, (
uöt32_t
)hfmpi2c->
pBuffPå
, (uöt32_t)&hfmpi2c->
In°™˚
->
TXDR
, hfmpi2c->
X„rSize
);

3115 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

3117 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

3121 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

3125 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_TXIS
Ë!
HAL_OK
)

3129 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3131 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3133 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3137 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3142 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3145 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3147 
hfmpi2c
->
X„rCou¡
 = 0;

3149 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3150 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3155 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_TXDMAEN
;

3163 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3165 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3167 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3171 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3176 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3179 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3182 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_TXDMAEN
;

3184 
hfmpi2c
->
X„rCou¡
 = 0;

3186 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3189 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3191 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3195 
	`HAL_FMPI2C_Ma°îTxC∂tCÆlback
(
hfmpi2c
);

3198 
	}
}

3205 
	$FMPI2C_DMASœveTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3207 
FMPI2C_H™dÀTy≥Def
* 
hfmpi2c
 = (FMPI2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3210 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3212 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3216 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

3220 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3225 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
,
FMPI2C_FLAG_STOPF
);

3228 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
, 
SET
, 
FMPI2C_TIMEOUT_BUSY
Ë!
HAL_OK
)

3230 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3234 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_TXDMAEN
;

3236 
hfmpi2c
->
X„rCou¡
 = 0;

3238 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3241 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3243 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3247 
	`HAL_FMPI2C_SœveTxC∂tCÆlback
(
hfmpi2c
);

3249 
	}
}

3256 
	$FMPI2C_DMAMa°îRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3258 
FMPI2C_H™dÀTy≥Def
* 
hfmpi2c
 = (FMPI2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3259 
uöt16_t
 
DevAddªss
;

3263 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

3266 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
FMPI2C_TIMEOUT_TCR
Ë!
HAL_OK
)

3268 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3272 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_RXDMAEN
;

3275 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3279 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3281 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3283 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3287 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3292 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3295 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3297 
hfmpi2c
->
X„rCou¡
 = 0;

3299 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3300 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3304 
hfmpi2c
->
pBuffPå
 +hfmpi2c->
X„rSize
;

3305 
hfmpi2c
->
X„rCou¡
 -hfmpi2c->
X„rSize
;

3306 if(
hfmpi2c
->
X„rCou¡
 > 255)

3308 
hfmpi2c
->
X„rSize
 = 255;

3312 
hfmpi2c
->
X„rSize
 = hfmpi2c->
X„rCou¡
;

3315 
DevAddªss
 = (
hfmpi2c
->
In°™˚
->
CR2
 & 
FMPI2C_CR2_SADD
);

3318 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm¨x
, (
uöt32_t
)&hfmpi2c->
In°™˚
->
RXDR
, (uöt32_t)hfmpi2c->
pBuffPå
, hfmpi2c->
X„rSize
);

3322 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

3324 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

3328 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

3332 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
, 
RESET
, 
FMPI2C_TIMEOUT_RXNE
Ë!
HAL_OK
)

3334 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3338 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3342 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3344 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3346 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3350 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3355 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3358 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3360 
hfmpi2c
->
X„rCou¡
 = 0;

3362 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3364 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3369 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_RXDMAEN
;

3377 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3379 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3381 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3385 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3390 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3393 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3396 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_RXDMAEN
;

3398 
hfmpi2c
->
X„rCou¡
 = 0;

3400 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3403 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3405 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3409 
	`HAL_FMPI2C_Ma°îRxC∂tCÆlback
(
hfmpi2c
);

3412 
	}
}

3419 
	$FMPI2C_DMASœveRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3421 
FMPI2C_H™dÀTy≥Def
* 
hfmpi2c
 = (FMPI2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3424 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3426 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3428 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3432 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3437 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3440 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_BUSY
, 
SET
, 
FMPI2C_TIMEOUT_BUSY
Ë!
HAL_OK
)

3442 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3446 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_RXDMAEN
;

3449 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

3451 
hfmpi2c
->
X„rCou¡
 = 0;

3453 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3456 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3458 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3462 
	`HAL_FMPI2C_SœveRxC∂tCÆlback
(
hfmpi2c
);

3464 
	}
}

3471 
	$FMPI2C_DMAMemTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3473 
uöt16_t
 
DevAddªss
;

3474 
FMPI2C_H™dÀTy≥Def
* 
hfmpi2c
 = ( FMPI2C_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

3478 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

3481 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
FMPI2C_TIMEOUT_TCR
Ë!
HAL_OK
)

3483 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3487 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_TXDMAEN
;

3490 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3494 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3496 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3498 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3502 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3507 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3510 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3512 
hfmpi2c
->
X„rCou¡
 = 0;

3514 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3515 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3519 
hfmpi2c
->
pBuffPå
 +hfmpi2c->
X„rSize
;

3520 
hfmpi2c
->
X„rCou¡
 -hfmpi2c->
X„rSize
;

3521 if(
hfmpi2c
->
X„rCou¡
 > 255)

3523 
hfmpi2c
->
X„rSize
 = 255;

3527 
hfmpi2c
->
X„rSize
 = hfmpi2c->
X„rCou¡
;

3530 
DevAddªss
 = (
hfmpi2c
->
In°™˚
->
CR2
 & 
FMPI2C_CR2_SADD
);

3533 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm©x
, (
uöt32_t
)hfmpi2c->
pBuffPå
, (uöt32_t)&hfmpi2c->
In°™˚
->
TXDR
, hfmpi2c->
X„rSize
);

3537 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

3539 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

3543 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

3547 if(
	`FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_TXIS
Ë!
HAL_OK
)

3551 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3553 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3555 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3559 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3564 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3567 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3569 
hfmpi2c
->
X„rCou¡
 = 0;

3571 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3572 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3577 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_TXDMAEN
;

3585 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3587 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3589 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3593 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3598 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3601 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3604 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_TXDMAEN
;

3606 
hfmpi2c
->
X„rCou¡
 = 0;

3608 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3611 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3613 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3617 
	`HAL_FMPI2C_MemTxC∂tCÆlback
(
hfmpi2c
);

3620 
	}
}

3627 
	$FMPI2C_DMAMemRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3629 
FMPI2C_H™dÀTy≥Def
* 
hfmpi2c
 = ( FMPI2C_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

3630 
uöt16_t
 
DevAddªss
;

3634 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

3637 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_TCR
, 
RESET
, 
FMPI2C_TIMEOUT_TCR
Ë!
HAL_OK
)

3639 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3643 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_RXDMAEN
;

3646 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3650 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3652 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3654 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3658 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3663 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3666 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3668 
hfmpi2c
->
X„rCou¡
 = 0;

3670 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3671 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3675 
hfmpi2c
->
pBuffPå
 +hfmpi2c->
X„rSize
;

3676 
hfmpi2c
->
X„rCou¡
 -hfmpi2c->
X„rSize
;

3677 if(
hfmpi2c
->
X„rCou¡
 > 255)

3679 
hfmpi2c
->
X„rSize
 = 255;

3683 
hfmpi2c
->
X„rSize
 = hfmpi2c->
X„rCou¡
;

3686 
DevAddªss
 = (
hfmpi2c
->
In°™˚
->
CR2
 & 
FMPI2C_CR2_SADD
);

3689 
	`HAL_DMA_Sèπ_IT
(
hfmpi2c
->
hdm¨x
, (
uöt32_t
)&hfmpi2c->
In°™˚
->
RXDR
, (uöt32_t)hfmpi2c->
pBuffPå
, hfmpi2c->
X„rSize
);

3693 if–(
hfmpi2c
->
X„rSize
 =255Ë&& (hfmpi2c->X„rSizê< hfmpi2c->
X„rCou¡
) )

3695 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_RELOAD_MODE
, 
FMPI2C_NO_STARTSTOP
);

3699 
	`FMPI2C_Tøns„rC⁄fig
(
hfmpi2c
,
DevAddªss
,hfmpi2c->
X„rSize
, 
FMPI2C_AUTOEND_MODE
, 
FMPI2C_NO_STARTSTOP
);

3703 if(
	`FMPI2C_WaôOnFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
, 
RESET
, 
FMPI2C_TIMEOUT_RXNE
Ë!
HAL_OK
)

3705 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3709 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3713 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3715 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3717 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3721 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3726 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3729 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3731 
hfmpi2c
->
X„rCou¡
 = 0;

3733 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3734 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3739 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_RXDMAEN
;

3747 if(
	`FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
hfmpi2c
, 
FMPI2C_TIMEOUT_STOPF
Ë!
HAL_OK
)

3749 if(
hfmpi2c
->
Eº‹Code
 =
HAL_FMPI2C_ERROR_AF
)

3751 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_AF
;

3755 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3760 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3763 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3766 
hfmpi2c
->
In°™˚
->
CR1
 &~
FMPI2C_CR1_RXDMAEN
;

3768 
hfmpi2c
->
X„rCou¡
 = 0;

3770 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3773 if(
hfmpi2c
->
Eº‹Code
 !
HAL_FMPI2C_ERROR_NONE
)

3775 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3779 
	`HAL_FMPI2C_MemRxC∂tCÆlback
(
hfmpi2c
);

3782 
	}
}

3789 
	$FMPI2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

3791 
FMPI2C_H™dÀTy≥Def
* 
hfmpi2c
 = ( FMPI2C_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

3794 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_NACK
;

3796 
hfmpi2c
->
X„rCou¡
 = 0;

3798 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

3800 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_DMA
;

3802 
	`HAL_FMPI2C_Eº‹CÆlback
(
hfmpi2c
);

3803 
	}
}

3814 
HAL_SètusTy≥Def
 
	$FMPI2C_WaôOnFœgU¡ûTimeout
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

3816 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

3819 if(
Sètus
 =
RESET
)

3821 
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
Fœg
Ë=
RESET
)

3824 if(
Timeout
 !
HAL_MAX_DELAY
)

3826 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3828 
hfmpi2c
->
Sèã

HAL_FMPI2C_STATE_READY
;

3830 
	`__HAL_UNLOCK
(
hfmpi2c
);

3831  
HAL_TIMEOUT
;

3838 
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
Fœg
Ë!
RESET
)

3841 if(
Timeout
 !
HAL_MAX_DELAY
)

3843 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3845 
hfmpi2c
->
Sèã

HAL_FMPI2C_STATE_READY
;

3847 
	`__HAL_UNLOCK
(
hfmpi2c
);

3848  
HAL_TIMEOUT
;

3853  
HAL_OK
;

3854 
	}
}

3863 
HAL_SètusTy≥Def
 
	$FMPI2C_WaôOnTXISFœgU¡ûTimeout
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Timeout
)

3865 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

3867 
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_TXIS
Ë=
RESET
)

3870 if(
	`FMPI2C_IsAcknowÀdgeFaûed
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

3872  
HAL_ERROR
;

3876 if(
Timeout
 !
HAL_MAX_DELAY
)

3878 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3880 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3881 
hfmpi2c
->
Sèã

HAL_FMPI2C_STATE_READY
;

3884 
	`__HAL_UNLOCK
(
hfmpi2c
);

3886  
HAL_TIMEOUT
;

3890  
HAL_OK
;

3891 
	}
}

3900 
HAL_SètusTy≥Def
 
	$FMPI2C_WaôOnSTOPFœgU¡ûTimeout
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Timeout
)

3902 
uöt32_t
 
tick°¨t
 = 0x00;

3903 
tick°¨t
 = 
	`HAL_GëTick
();

3905 
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
Ë=
RESET
)

3908 if(
	`FMPI2C_IsAcknowÀdgeFaûed
(
hfmpi2c
, 
Timeout
Ë!
HAL_OK
)

3910  
HAL_ERROR
;

3914 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3916 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3917 
hfmpi2c
->
Sèã

HAL_FMPI2C_STATE_READY
;

3920 
	`__HAL_UNLOCK
(
hfmpi2c
);

3922  
HAL_TIMEOUT
;

3925  
HAL_OK
;

3926 
	}
}

3935 
HAL_SètusTy≥Def
 
	$FMPI2C_WaôOnRXNEFœgU¡ûTimeout
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Timeout
)

3937 
uöt32_t
 
tick°¨t
 = 0x00;

3938 
tick°¨t
 = 
	`HAL_GëTick
();

3940 
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_RXNE
Ë=
RESET
)

3943 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
Ë=
SET
)

3946 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

3949 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

3951 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_NONE
;

3952 
hfmpi2c
->
Sèã

HAL_FMPI2C_STATE_READY
;

3955 
	`__HAL_UNLOCK
(
hfmpi2c
);

3957  
HAL_ERROR
;

3961 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3963 
hfmpi2c
->
Eº‹Code
 |
HAL_FMPI2C_ERROR_TIMEOUT
;

3964 
hfmpi2c
->
Sèã

HAL_FMPI2C_STATE_READY
;

3967 
	`__HAL_UNLOCK
(
hfmpi2c
);

3969  
HAL_TIMEOUT
;

3972  
HAL_OK
;

3973 
	}
}

3982 
HAL_SètusTy≥Def
 
	$FMPI2C_IsAcknowÀdgeFaûed
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
Timeout
)

3984 
uöt32_t
 
tick°¨t
 = 0x00;

3985 
tick°¨t
 = 
	`HAL_GëTick
();

3987 if(
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
Ë=
SET
)

3990 if((
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_MASTER_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MEM_BUSY_TX
)

3991 || (
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_MEM_BUSY_RX
))

3995 if((
hfmpi2c
->
In°™˚
->
CR2
 & 
FMPI2C_AUTOEND_MODE
) != FMPI2C_AUTOEND_MODE)

3998 
hfmpi2c
->
In°™˚
->
CR2
 |
FMPI2C_CR2_STOP
;

4004 
	`__HAL_FMPI2C_GET_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
Ë=
RESET
)

4007 if(
Timeout
 !
HAL_MAX_DELAY
)

4009 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

4011 
hfmpi2c
->
Sèã

HAL_FMPI2C_STATE_READY
;

4013 
	`__HAL_UNLOCK
(
hfmpi2c
);

4014  
HAL_TIMEOUT
;

4020 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_AF
);

4023 
	`__HAL_FMPI2C_CLEAR_FLAG
(
hfmpi2c
, 
FMPI2C_FLAG_STOPF
);

4026 
	`__HAL_FMPI2C_RESET_CR2
(
hfmpi2c
);

4028 
hfmpi2c
->
Eº‹Code
 = 
HAL_FMPI2C_ERROR_AF
;

4029 
hfmpi2c
->
Sèã

HAL_FMPI2C_STATE_READY
;

4032 
	`__HAL_UNLOCK
(
hfmpi2c
);

4034  
HAL_ERROR
;

4036  
HAL_OK
;

4037 
	}
}

4058 
	$FMPI2C_Tøns„rC⁄fig
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 
Size
, 
uöt32_t
 
Mode
, uöt32_à
Reque°
)

4060 
uöt32_t
 
tm¥eg
 = 0;

4063 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_INSTANCE
(
hfmpi2c
->
In°™˚
));

4064 
	`as£π_∑øm
(
	`IS_TRANSFER_MODE
(
Mode
));

4065 
	`as£π_∑øm
(
	`IS_TRANSFER_REQUEST
(
Reque°
));

4068 
tm¥eg
 = 
hfmpi2c
->
In°™˚
->
CR2
;

4071 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
FMPI2C_CR2_SADD
 | 
FMPI2C_CR2_NBYTES
 | 
FMPI2C_CR2_RELOAD
 | 
FMPI2C_CR2_AUTOEND
 | 
FMPI2C_CR2_RD_WRN
 | 
FMPI2C_CR2_START
 | 
FMPI2C_CR2_STOP
));

4074 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
DevAddªss
 & 
FMPI2C_CR2_SADD
Ë| (((uöt32_t)
Size
 << 16 ) & 
FMPI2C_CR2_NBYTES
) | \

4075 (
uöt32_t
)
Mode
 | (uöt32_t)
Reque°
);

4078 
hfmpi2c
->
In°™˚
->
CR2
 = 
tm¥eg
;

4079 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_fmpi2c_ex.c

61 
	~"°m32f4xx_hÆ.h
"

72 #ifde‡
HAL_FMPI2C_MODULE_ENABLED


74 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
)

109 
HAL_SètusTy≥Def
 
	$HAL_FMPI2CEx_A«logFûãr_C⁄fig
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
A«logFûãr
)

112 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_INSTANCE
(
hfmpi2c
->
In°™˚
));

113 
	`as£π_∑øm
(
	`IS_FMPI2C_ANALOG_FILTER
(
A«logFûãr
));

115 if((
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_BUSY
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MASTER_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MASTER_BUSY_RX
)

116 || (
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_SLAVE_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
))

118  
HAL_BUSY
;

122 
	`__HAL_LOCK
(
hfmpi2c
);

124 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_BUSY
;

127 
	`__HAL_FMPI2C_DISABLE
(
hfmpi2c
);

130 
hfmpi2c
->
In°™˚
->
CR1
 &~(
FMPI2C_CR1_ANFOFF
);

133 
hfmpi2c
->
In°™˚
->
CR1
 |
A«logFûãr
;

135 
	`__HAL_FMPI2C_ENABLE
(
hfmpi2c
);

137 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

140 
	`__HAL_UNLOCK
(
hfmpi2c
);

142  
HAL_OK
;

143 
	}
}

152 
HAL_SètusTy≥Def
 
	$HAL_FMPI2CEx_DigôÆFûãr_C⁄fig
(
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
, 
uöt32_t
 
DigôÆFûãr
)

154 
uöt32_t
 
tm¥eg
 = 0;

157 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_INSTANCE
(
hfmpi2c
->
In°™˚
));

158 
	`as£π_∑øm
(
	`IS_FMPI2C_DIGITAL_FILTER
(
DigôÆFûãr
));

160 if((
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_BUSY
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MASTER_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MASTER_BUSY_RX
)

161 || (
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_SLAVE_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
))

163  
HAL_BUSY
;

167 
	`__HAL_LOCK
(
hfmpi2c
);

169 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_BUSY
;

172 
	`__HAL_FMPI2C_DISABLE
(
hfmpi2c
);

175 
tm¥eg
 = 
hfmpi2c
->
In°™˚
->
CR1
;

178 
tm¥eg
 &~(
FMPI2C_CR1_DFN
);

181 
tm¥eg
 |
DigôÆFûãr
 << 8;

184 
hfmpi2c
->
In°™˚
->
CR1
 = 
tm¥eg
;

186 
	`__HAL_FMPI2C_ENABLE
(
hfmpi2c
);

188 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

191 
	`__HAL_UNLOCK
(
hfmpi2c
);

193  
HAL_OK
;

194 
	}
}

202 
HAL_SètusTy≥Def
 
	$HAL_FMPI2CEx_E«bÀWakeUp
 (
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

205 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_INSTANCE
(
hfmpi2c
->
In°™˚
));

207 if((
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_BUSY
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MASTER_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MASTER_BUSY_RX
)

208 || (
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_SLAVE_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
))

210  
HAL_BUSY
;

214 
	`__HAL_LOCK
(
hfmpi2c
);

216 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_BUSY
;

219 
	`__HAL_FMPI2C_DISABLE
(
hfmpi2c
);

222 
hfmpi2c
->
In°™˚
->
CR1
 |
FMPI2C_CR1_WUPEN
;

224 
	`__HAL_FMPI2C_ENABLE
(
hfmpi2c
);

226 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

229 
	`__HAL_UNLOCK
(
hfmpi2c
);

231  
HAL_OK
;

232 
	}
}

241 
HAL_SètusTy≥Def
 
	$HAL_FMPI2CEx_DißbÀWakeUp
 (
FMPI2C_H™dÀTy≥Def
 *
hfmpi2c
)

244 
	`as£π_∑øm
(
	`IS_FMPI2C_ALL_INSTANCE
(
hfmpi2c
->
In°™˚
));

246 if((
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_BUSY
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MASTER_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_MASTER_BUSY_RX
)

247 || (
hfmpi2c
->
Sèã
 =
HAL_FMPI2C_STATE_SLAVE_BUSY_TX
Ë|| (hfmpi2c->Sèã =
HAL_FMPI2C_STATE_SLAVE_BUSY_RX
))

249  
HAL_BUSY
;

253 
	`__HAL_LOCK
(
hfmpi2c
);

255 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_BUSY
;

258 
	`__HAL_FMPI2C_DISABLE
(
hfmpi2c
);

261 
hfmpi2c
->
In°™˚
->
CR1
 &~(
FMPI2C_CR1_WUPEN
);

263 
	`__HAL_FMPI2C_ENABLE
(
hfmpi2c
);

265 
hfmpi2c
->
Sèã
 = 
HAL_FMPI2C_STATE_READY
;

268 
	`__HAL_UNLOCK
(
hfmpi2c
);

270  
HAL_OK
;

271 
	}
}

279 
	$HAL_FMPI2CEx_E«bÀFa°ModePlus
(
uöt32_t
 
C⁄figFa°ModePlus
)

282 
	`as£π_∑øm
(
	`IS_FMPI2C_FASTMODEPLUS
(
C⁄figFa°ModePlus
));

285 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

288 
	`SET_BIT
(
SYSCFG
->
CFGR
, (
uöt32_t
)
C⁄figFa°ModePlus
);

289 
	}
}

297 
	$HAL_FMPI2CEx_DißbÀFa°ModePlus
(
uöt32_t
 
C⁄figFa°ModePlus
)

300 
	`as£π_∑øm
(
	`IS_FMPI2C_FASTMODEPLUS
(
C⁄figFa°ModePlus
));

303 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

306 
	`CLEAR_BIT
(
SYSCFG
->
CFGR
, (
uöt32_t
)
C⁄figFa°ModePlus
);

307 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_gpio.c

126 
	~"°m32f4xx_hÆ.h
"

137 #ifde‡
HAL_GPIO_MODULE_ENABLED


144 
	#GPIO_MODE
 ((
uöt32_t
)0x00000003)

	)

145 
	#EXTI_MODE
 ((
uöt32_t
)0x10000000)

	)

146 
	#GPIO_MODE_IT
 ((
uöt32_t
)0x00010000)

	)

147 
	#GPIO_MODE_EVT
 ((
uöt32_t
)0x00020000)

	)

148 
	#RISING_EDGE
 ((
uöt32_t
)0x00100000)

	)

149 
	#FALLING_EDGE
 ((
uöt32_t
)0x00200000)

	)

150 
	#GPIO_OUTPUT_TYPE
 ((
uöt32_t
)0x00000010)

	)

152 
	#GPIO_NUMBER
 ((
uöt32_t
)16)

	)

189 
	$HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
)

191 
uöt32_t
 
posôi⁄
;

192 
uöt32_t
 
i›osôi⁄
 = 0x00;

193 
uöt32_t
 
iocuºít
 = 0x00;

194 
uöt32_t
 
ãmp
 = 0x00;

197 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

198 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Inô
->
Pö
));

199 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_Inô
->
Mode
));

200 
	`as£π_∑øm
(
	`IS_GPIO_PULL
(
GPIO_Inô
->
PuŒ
));

203 
posôi⁄
 = 0;Öosôi⁄ < 
GPIO_NUMBER
;Öosition++)

206 
i›osôi⁄
 = ((
uöt32_t
)0x01Ë<< 
posôi⁄
;

208 
iocuºít
 = (
uöt32_t
)(
GPIO_Inô
->
Pö
Ë& 
i›osôi⁄
;

210 if(
iocuºít
 =
i›osôi⁄
)

214 if((
GPIO_Inô
->
Mode
 =
GPIO_MODE_AF_PP
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_OD
))

217 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_Inô
->
A…î«ã
));

219 
ãmp
 = 
GPIOx
->
AFR
[
posôi⁄
 >> 3];

220 
ãmp
 &~((
uöt32_t
)0xF << ((uöt32_t)(
posôi⁄
 & (uint32_t)0x07) * 4)) ;

221 
ãmp
 |((
uöt32_t
)(
GPIO_Inô
->
A…î«ã
Ë<< (((uöt32_t)
posôi⁄
 & (uint32_t)0x07) * 4));

222 
GPIOx
->
AFR
[
posôi⁄
 >> 3] = 
ãmp
;

226 
ãmp
 = 
GPIOx
->
MODER
;

227 
ãmp
 &~(
GPIO_MODER_MODER0
 << (
posôi⁄
 * 2));

228 
ãmp
 |((
GPIO_Inô
->
Mode
 & 
GPIO_MODE
Ë<< (
posôi⁄
 * 2));

229 
GPIOx
->
MODER
 = 
ãmp
;

232 if((
GPIO_Inô
->
Mode
 =
GPIO_MODE_OUTPUT_PP
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_PP
) ||

233 (
GPIO_Inô
->
Mode
 =
GPIO_MODE_OUTPUT_OD
Ë|| (GPIO_Inô->Modê=
GPIO_MODE_AF_OD
))

236 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

238 
ãmp
 = 
GPIOx
->
OSPEEDR
;

239 
ãmp
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
posôi⁄
 * 2));

240 
ãmp
 |(
GPIO_Inô
->
S≥ed
 << (
posôi⁄
 * 2));

241 
GPIOx
->
OSPEEDR
 = 
ãmp
;

244 
ãmp
 = 
GPIOx
->
OTYPER
;

245 
ãmp
 &~(
GPIO_OTYPER_OT_0
 << 
posôi⁄
) ;

246 
ãmp
 |(((
GPIO_Inô
->
Mode
 & 
GPIO_OUTPUT_TYPE
Ë>> 4Ë<< 
posôi⁄
);

247 
GPIOx
->
OTYPER
 = 
ãmp
;

251 
ãmp
 = 
GPIOx
->
PUPDR
;

252 
ãmp
 &~(
GPIO_PUPDR_PUPDR0
 << (
posôi⁄
 * 2));

253 
ãmp
 |((
GPIO_Inô
->
PuŒ
Ë<< (
posôi⁄
 * 2));

254 
GPIOx
->
PUPDR
 = 
ãmp
;

258 if((
GPIO_Inô
->
Mode
 & 
EXTI_MODE
) == EXTI_MODE)

261 
	`__HAL_RCC_SYSCFG_CLK_ENABLE
();

263 
ãmp
 = 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2];

264 
ãmp
 &~(((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03)));

265 
ãmp
 |((
uöt32_t
)(
	`GPIO_GET_INDEX
(
GPIOx
)Ë<< (4 * (
posôi⁄
 & 0x03)));

266 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2] = 
ãmp
;

269 
ãmp
 = 
EXTI
->
IMR
;

270 
ãmp
 &~((
uöt32_t
)
iocuºít
);

271 if((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_IT
) == GPIO_MODE_IT)

273 
ãmp
 |
iocuºít
;

275 
EXTI
->
IMR
 = 
ãmp
;

277 
ãmp
 = 
EXTI
->
EMR
;

278 
ãmp
 &~((
uöt32_t
)
iocuºít
);

279 if((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_EVT
) == GPIO_MODE_EVT)

281 
ãmp
 |
iocuºít
;

283 
EXTI
->
EMR
 = 
ãmp
;

286 
ãmp
 = 
EXTI
->
RTSR
;

287 
ãmp
 &~((
uöt32_t
)
iocuºít
);

288 if((
GPIO_Inô
->
Mode
 & 
RISING_EDGE
) == RISING_EDGE)

290 
ãmp
 |
iocuºít
;

292 
EXTI
->
RTSR
 = 
ãmp
;

294 
ãmp
 = 
EXTI
->
FTSR
;

295 
ãmp
 &~((
uöt32_t
)
iocuºít
);

296 if((
GPIO_Inô
->
Mode
 & 
FALLING_EDGE
) == FALLING_EDGE)

298 
ãmp
 |
iocuºít
;

300 
EXTI
->
FTSR
 = 
ãmp
;

304 
	}
}

314 
	$HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
)

316 
uöt32_t
 
posôi⁄
;

317 
uöt32_t
 
i›osôi⁄
 = 0x00;

318 
uöt32_t
 
iocuºít
 = 0x00;

319 
uöt32_t
 
tmp
 = 0x00;

322 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

325 
posôi⁄
 = 0;Öosôi⁄ < 
GPIO_NUMBER
;Öosition++)

328 
i›osôi⁄
 = ((
uöt32_t
)0x01Ë<< 
posôi⁄
;

330 
iocuºít
 = (
GPIO_Pö
Ë& 
i›osôi⁄
;

332 if(
iocuºít
 =
i›osôi⁄
)

336 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
posôi⁄
 * 2));

339 
GPIOx
->
AFR
[
posôi⁄
 >> 3] &~((
uöt32_t
)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;

342 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
posôi⁄
 * 2));

345 
GPIOx
->
OTYPER
 &~(
GPIO_OTYPER_OT_0
 << 
posôi⁄
) ;

348 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << (
posôi⁄
 * 2));

351 
tmp
 = 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2];

352 
tmp
 &(((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03)));

353 if(
tmp
 =((
uöt32_t
)(
	`GPIO_GET_INDEX
(
GPIOx
)Ë<< (4 * (
posôi⁄
 & 0x03))))

356 
tmp
 = ((
uöt32_t
)0x0FË<< (4 * (
posôi⁄
 & 0x03));

357 
SYSCFG
->
EXTICR
[
posôi⁄
 >> 2] &~
tmp
;

360 
EXTI
->
IMR
 &~((
uöt32_t
)
iocuºít
);

361 
EXTI
->
EMR
 &~((
uöt32_t
)
iocuºít
);

364 
EXTI
->
RTSR
 &~((
uöt32_t
)
iocuºít
);

365 
EXTI
->
FTSR
 &~((
uöt32_t
)
iocuºít
);

369 
	}
}

395 
GPIO_PöSèã
 
	$HAL_GPIO_RódPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

397 
GPIO_PöSèã
 
bô°©us
;

400 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

402 if((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
GPIO_PIN_RESET
)

404 
bô°©us
 = 
GPIO_PIN_SET
;

408 
bô°©us
 = 
GPIO_PIN_RESET
;

410  
bô°©us
;

411 
	}
}

430 
	$HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
)

433 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

434 
	`as£π_∑øm
(
	`IS_GPIO_PIN_ACTION
(
PöSèã
));

436 if(
PöSèã
 !
GPIO_PIN_RESET
)

438 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

442 
GPIOx
->
BSRR
 = (
uöt32_t
)
GPIO_Pö
 << 16;

444 
	}
}

453 
	$HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

456 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

458 
GPIOx
->
ODR
 ^
GPIO_Pö
;

459 
	}
}

472 
HAL_SètusTy≥Def
 
	$HAL_GPIO_LockPö
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

474 
__IO
 
uöt32_t
 
tmp
 = 
GPIO_LCKR_LCKK
;

477 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

480 
tmp
 |
GPIO_Pö
;

482 
GPIOx
->
LCKR
 = 
tmp
;

484 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

486 
GPIOx
->
LCKR
 = 
tmp
;

488 
tmp
 = 
GPIOx
->
LCKR
;

490 if((
GPIOx
->
LCKR
 & 
GPIO_LCKR_LCKK
Ë!
RESET
)

492  
HAL_OK
;

496  
HAL_ERROR
;

498 
	}
}

505 
	$HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
)

508 if(
	`__HAL_GPIO_EXTI_GET_IT
(
GPIO_Pö
Ë!
RESET
)

510 
	`__HAL_GPIO_EXTI_CLEAR_IT
(
GPIO_Pö
);

511 
	`HAL_GPIO_EXTI_CÆlback
(
GPIO_Pö
);

513 
	}
}

520 
__wók
 
	$HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
)

525 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_hash.c

99 
	~"°m32f4xx_hÆ.h
"

110 #ifde‡
HAL_HASH_MODULE_ENABLED


112 #i‡
deföed
(
STM32F415xx
Ë|| deföed(
STM32F417xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

122 
HASH_DMAX„rC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

123 
HASH_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

124 
HASH_GëDige°
(
uöt8_t
 *
pMsgDige°
, uöt8_à
Size
);

125 
HASH_WrôeD©a
(
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

140 
	$HASH_DMAX„rC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

142 
HASH_H™dÀTy≥Def
* 
hhash
 = ( HASH_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

143 
uöt32_t
 
öpuèddr
 = 0;

144 
uöt32_t
 
buf„rsize
 = 0;

146 if((
HASH
->
CR
 & 
HASH_CR_MODE
) != HASH_CR_MODE)

149 
HASH
->
CR
 &(
uöt32_t
)(~
HASH_CR_DMAE
);

152 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

155 
	`HAL_HASH_InC∂tCÆlback
(
hhash
);

160 
hhash
->
HashInCou¡
++;

162 
HASH
->
CR
 &(
uöt32_t
)(~
HASH_CR_DMAE
);

164 if(
hhash
->
HashInCou¡
 <= 2)

167 if(
hhash
->
HashInCou¡
 == 1)

169 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

170 
buf„rsize
 = 
hhash
->
HashBuffSize
;

173 if(
hhash
->
HashInCou¡
 == 2)

175 
öpuèddr
 = (
uöt32_t
)
hhash
->
Inô
.
pKey
;

176 
buf„rsize
 = 
hhash
->
Inô
.
KeySize
;

179 
	`MODIFY_REG
(
HASH
->
STR
, 
HASH_STR_NBLW
, 8 * (
buf„rsize
 % 4));

182 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASH_DMAX„rC∂t
;

185 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (
buf„rsize
%4 ? (buffersize+3)/4:buffersize/4));

188 
HASH
->
CR
 |(
HASH_CR_DMAE
);

193 
HASH
->
CR
 &(
uöt32_t
)(~
HASH_CR_DMAE
);

196 
hhash
->
HashInCou¡
 = 0;

199 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

202 
	`HAL_HASH_InC∂tCÆlback
(
hhash
);

205 
	}
}

212 
	$HASH_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

214 
HASH_H™dÀTy≥Def
* 
hhash
 = ( HASH_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

215 
hhash
->
Sèã

HAL_HASH_STATE_READY
;

216 
	`HAL_HASH_Eº‹CÆlback
(
hhash
);

217 
	}
}

225 
	$HASH_WrôeD©a
(
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

227 
uöt32_t
 
buf„rcou¡î
;

228 
uöt32_t
 
öpuèddr
 = (uöt32_tË
pInBuf„r
;

230 
buf„rcou¡î
 = 0; buf„rcou¡î < 
Size
; buffercounter+=4)

232 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

233 
öpuèddr
+=4;

235 
	}
}

243 
	$HASH_GëDige°
(
uöt8_t
 *
pMsgDige°
, uöt8_à
Size
)

245 
uöt32_t
 
msgdige°
 = (uöt32_t)
pMsgDige°
;

247 
Size
)

251 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[0]);

252 
msgdige°
+=4;

253 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[1]);

254 
msgdige°
+=4;

255 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[2]);

256 
msgdige°
+=4;

257 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[3]);

261 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[0]);

262 
msgdige°
+=4;

263 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[1]);

264 
msgdige°
+=4;

265 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[2]);

266 
msgdige°
+=4;

267 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[3]);

268 
msgdige°
+=4;

269 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[4]);

273 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[0]);

274 
msgdige°
+=4;

275 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[1]);

276 
msgdige°
+=4;

277 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[2]);

278 
msgdige°
+=4;

279 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[3]);

280 
msgdige°
+=4;

281 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[4]);

282 
msgdige°
+=4;

283 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[5]);

284 
msgdige°
+=4;

285 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[6]);

289 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[0]);

290 
msgdige°
+=4;

291 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[1]);

292 
msgdige°
+=4;

293 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[2]);

294 
msgdige°
+=4;

295 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[3]);

296 
msgdige°
+=4;

297 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[4]);

298 
msgdige°
+=4;

299 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[5]);

300 
msgdige°
+=4;

301 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[6]);

302 
msgdige°
+=4;

303 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[7]);

308 
	}
}

345 
HAL_SètusTy≥Def
 
	$HAL_HASH_Inô
(
HASH_H™dÀTy≥Def
 *
hhash
)

348 if(
hhash
 =
NULL
)

350  
HAL_ERROR
;

354 
	`as£π_∑øm
(
	`IS_HASH_DATATYPE
(
hhash
->
Inô
.
D©aTy≥
));

356 if(
hhash
->
Sèã
 =
HAL_HASH_STATE_RESET
)

359 
hhash
->
Lock
 = 
HAL_UNLOCKED
;

361 
	`HAL_HASH_M•Inô
(
hhash
);

365 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

368 
hhash
->
HashInCou¡
 = 0;

369 
hhash
->
HashBuffSize
 = 0;

370 
hhash
->
HashITCou¡î
 = 0;

373 
HASH
->
CR
 |(
uöt32_t
Ë(
hhash
->
Inô
.
D©aTy≥
);

376 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

379 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_READY
;

382  
HAL_OK
;

383 
	}
}

392 
HAL_SètusTy≥Def
 
	$HAL_HASH_DeInô
(
HASH_H™dÀTy≥Def
 *
hhash
)

395 if(
hhash
 =
NULL
)

397  
HAL_ERROR
;

401 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

404 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_READY
;

407 
hhash
->
HashInCou¡
 = 0;

408 
hhash
->
HashBuffSize
 = 0;

409 
hhash
->
HashITCou¡î
 = 0;

412 
	`HAL_HASH_M•DeInô
(
hhash
);

415 
hhash
->
Sèã
 = 
HAL_HASH_STATE_RESET
;

418 
	`__HAL_UNLOCK
(
hhash
);

421  
HAL_OK
;

422 
	}
}

430 
__wók
 
	$HAL_HASH_M•Inô
(
HASH_H™dÀTy≥Def
 *
hhash
)

435 
	}
}

443 
__wók
 
	$HAL_HASH_M•DeInô
(
HASH_H™dÀTy≥Def
 *
hhash
)

448 
	}
}

456 
__wók
 
	$HAL_HASH_InC∂tCÆlback
(
HASH_H™dÀTy≥Def
 *
hhash
)

461 
	}
}

469 
__wók
 
	$HAL_HASH_Eº‹CÆlback
(
HASH_H™dÀTy≥Def
 *
hhash
)

474 
	}
}

483 
__wók
 
	$HAL_HASH_Dg°C∂tCÆlback
(
HASH_H™dÀTy≥Def
 *
hhash
)

488 
	}
}

524 
HAL_SètusTy≥Def
 
	$HAL_HASH_MD5_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
)

526 
uöt32_t
 
tick°¨t
 = 0;

529 
	`__HAL_LOCK
(
hhash
);

532 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

535 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

539 
HASH
->
CR
 |
HASH_ALGOSELECTION_MD5
 | 
HASH_CR_INIT
;

543 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

546 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

549 
	`HASH_WrôeD©a
(
pInBuf„r
, 
Size
);

552 
	`__HAL_HASH_START_DIGEST
();

555 
tick°¨t
 = 
	`HAL_GëTick
();

557 
	`HAL_IS_BIT_SET
(
HASH
->
SR
, 
HASH_FLAG_BUSY
))

560 if(
Timeout
 !
HAL_MAX_DELAY
)

562 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

565 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

568 
	`__HAL_UNLOCK
(
hhash
);

570  
HAL_TIMEOUT
;

576 
	`HASH_GëDige°
(
pOutBuf„r
, 16);

579 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

582 
	`__HAL_UNLOCK
(
hhash
);

585  
HAL_OK
;

586 
	}
}

599 
HAL_SètusTy≥Def
 
	$HAL_HASH_MD5_Accumuœã
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

602 
	`__HAL_LOCK
(
hhash
);

605 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

608 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

612 
HASH
->
CR
 |
HASH_ALGOSELECTION_MD5
 | 
HASH_CR_INIT
;

616 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

619 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

622 
	`HASH_WrôeD©a
(
pInBuf„r
, 
Size
);

625 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

628 
	`__HAL_UNLOCK
(
hhash
);

631  
HAL_OK
;

632 
	}
}

646 
HAL_SètusTy≥Def
 
	$HAL_HASH_SHA1_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
)

648 
uöt32_t
 
tick°¨t
 = 0;

651 
	`__HAL_LOCK
(
hhash
);

654 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

657 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

661 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA1
 | 
HASH_CR_INIT
;

665 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

668 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

671 
	`HASH_WrôeD©a
(
pInBuf„r
, 
Size
);

674 
	`__HAL_HASH_START_DIGEST
();

677 
tick°¨t
 = 
	`HAL_GëTick
();

679 
	`HAL_IS_BIT_SET
(
HASH
->
SR
, 
HASH_FLAG_BUSY
))

682 if(
Timeout
 !
HAL_MAX_DELAY
)

684 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

687 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

690 
	`__HAL_UNLOCK
(
hhash
);

692  
HAL_TIMEOUT
;

698 
	`HASH_GëDige°
(
pOutBuf„r
, 20);

701 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

704 
	`__HAL_UNLOCK
(
hhash
);

707  
HAL_OK
;

708 
	}
}

720 
HAL_SètusTy≥Def
 
	$HAL_HASH_SHA1_Accumuœã
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

723 
	`as£π_∑øm
(
	`IS_HASH_SHA1_BUFFER_SIZE
(
Size
));

726 
	`__HAL_LOCK
(
hhash
);

729 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

732 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

736 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA1
 | 
HASH_CR_INIT
;

740 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

743 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

746 
	`HASH_WrôeD©a
(
pInBuf„r
, 
Size
);

749 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

752 
	`__HAL_UNLOCK
(
hhash
);

755  
HAL_OK
;

756 
	}
}

789 
HAL_SètusTy≥Def
 
	$HAL_HASH_MD5_Sèπ_IT
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
)

791 
uöt32_t
 
öpuèddr
;

792 
uöt32_t
 
ouçuèddr
;

793 
uöt32_t
 
buf„rcou¡î
;

794 
uöt32_t
 
öputcou¡î
;

797 
	`__HAL_LOCK
(
hhash
);

799 if(
hhash
->
Sèã
 =
HAL_HASH_STATE_READY
)

802 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

804 
hhash
->
HashInCou¡
 = 
Size
;

805 
hhash
->
pHashInBuffPå
 = 
pInBuf„r
;

806 
hhash
->
pHashOutBuffPå
 = 
pOutBuf„r
;

809 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

812 
HASH
->
CR
 |
HASH_ALGOSELECTION_MD5
;

815 
HASH
->
CR
 |
HASH_CR_INIT
;

818 
hhash
->
HashITCou¡î
 = 0;

821 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

824 
	`__HAL_UNLOCK
(
hhash
);

827 
HASH
->
IMR
 = (
HASH_IT_DINI
 | 
HASH_IT_DCI
);

830  
HAL_OK
;

832 if(
	`__HAL_HASH_GET_FLAG
(
HASH_FLAG_DCIS
))

834 
ouçuèddr
 = (
uöt32_t
)
hhash
->
pHashOutBuffPå
;

836 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[0]);

837 
ouçuèddr
+=4;

838 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[1]);

839 
ouçuèddr
+=4;

840 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[2]);

841 
ouçuèddr
+=4;

842 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[3]);

844 if(
hhash
->
HashInCou¡
 == 0)

847 
HASH
->
IMR
 = 0;

849 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

851 
	`HAL_HASH_Dg°C∂tCÆlback
(
hhash
);

854 
	`__HAL_UNLOCK
(
hhash
);

857  
HAL_OK
;

860 if(
	`__HAL_HASH_GET_FLAG
(
HASH_FLAG_DINIS
))

862 if(
hhash
->
HashInCou¡
 >= 68)

864 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

866 
buf„rcou¡î
 = 0; buffercounter < 64; buffercounter+=4)

868 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

869 
öpuèddr
+=4;

871 if(
hhash
->
HashITCou¡î
 == 0)

873 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

875 if(
hhash
->
HashInCou¡
 >= 68)

878 
hhash
->
HashInCou¡
 -= 68;

879 
hhash
->
pHashInBuffPå
+= 68;

883 
hhash
->
HashInCou¡
 = 0;

884 
hhash
->
pHashInBuffPå
+hhash->
HashInCou¡
;

887 
hhash
->
HashITCou¡î
 = 1;

892 
hhash
->
HashInCou¡
 -= 64;

893 
hhash
->
pHashInBuffPå
+= 64;

899 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

901 
öputcou¡î
 = 
hhash
->
HashInCou¡
;

903 
HASH
->
IMR
 &~(
HASH_IT_DINI
);

905 
	`__HAL_HASH_SET_NBVALIDBITS
(
öputcou¡î
);

907 if((
öputcou¡î
 > 4) && (inputcounter%4))

909 
öputcou¡î
 = (inputcounter+4-inputcounter%4);

911 i‡((
öputcou¡î
 < 4) && (inputcounter != 0))

913 
öputcou¡î
 = 4;

916 
buf„rcou¡î
 = 0; buf„rcou¡î < 
öputcou¡î
/4; buffercounter++)

918 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

919 
öpuèddr
+=4;

922 
	`__HAL_HASH_START_DIGEST
();

924 
hhash
->
HashInCou¡
 = 0;

926 
	`HAL_HASH_InC∂tCÆlback
(
hhash
);

931 
	`__HAL_UNLOCK
(
hhash
);

934  
HAL_OK
;

935 
	}
}

948 
HAL_SètusTy≥Def
 
	$HAL_HASH_SHA1_Sèπ_IT
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
)

950 
uöt32_t
 
öpuèddr
;

951 
uöt32_t
 
ouçuèddr
;

952 
uöt32_t
 
buf„rcou¡î
;

953 
uöt32_t
 
öputcou¡î
;

956 
	`__HAL_LOCK
(
hhash
);

958 if(
hhash
->
Sèã
 =
HAL_HASH_STATE_READY
)

961 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

963 
hhash
->
HashInCou¡
 = 
Size
;

964 
hhash
->
pHashInBuffPå
 = 
pInBuf„r
;

965 
hhash
->
pHashOutBuffPå
 = 
pOutBuf„r
;

968 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

971 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA1
;

974 
HASH
->
CR
 |
HASH_CR_INIT
;

977 
hhash
->
HashITCou¡î
 = 0;

980 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

983 
	`__HAL_UNLOCK
(
hhash
);

986 
HASH
->
IMR
 = (
HASH_IT_DINI
 | 
HASH_IT_DCI
);

989  
HAL_OK
;

991 if(
	`__HAL_HASH_GET_FLAG
(
HASH_FLAG_DCIS
))

993 
ouçuèddr
 = (
uöt32_t
)
hhash
->
pHashOutBuffPå
;

995 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[0]);

996 
ouçuèddr
+=4;

997 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[1]);

998 
ouçuèddr
+=4;

999 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[2]);

1000 
ouçuèddr
+=4;

1001 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[3]);

1002 
ouçuèddr
+=4;

1003 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
HASH
->
HR
[4]);

1004 if(
hhash
->
HashInCou¡
 == 0)

1007 
HASH
->
IMR
 = 0;

1009 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

1011 
	`HAL_HASH_Dg°C∂tCÆlback
(
hhash
);

1014 
	`__HAL_UNLOCK
(
hhash
);

1017  
HAL_OK
;

1020 if(
	`__HAL_HASH_GET_FLAG
(
HASH_FLAG_DINIS
))

1022 if(
hhash
->
HashInCou¡
 >= 68)

1024 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

1026 
buf„rcou¡î
 = 0; buffercounter < 64; buffercounter+=4)

1028 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

1029 
öpuèddr
+=4;

1031 if(
hhash
->
HashITCou¡î
 == 0)

1033 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

1034 if(
hhash
->
HashInCou¡
 >= 68)

1037 
hhash
->
HashInCou¡
 -= 68;

1038 
hhash
->
pHashInBuffPå
+= 68;

1042 
hhash
->
HashInCou¡
 = 0;

1043 
hhash
->
pHashInBuffPå
+hhash->
HashInCou¡
;

1046 
hhash
->
HashITCou¡î
 = 1;

1051 
hhash
->
HashInCou¡
 -= 64;

1052 
hhash
->
pHashInBuffPå
+= 64;

1058 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

1060 
öputcou¡î
 = 
hhash
->
HashInCou¡
;

1062 
HASH
->
IMR
 &~(
HASH_IT_DINI
);

1064 
	`__HAL_HASH_SET_NBVALIDBITS
(
öputcou¡î
);

1066 if((
öputcou¡î
 > 4) && (inputcounter%4))

1068 
öputcou¡î
 = (inputcounter+4-inputcounter%4);

1070 i‡((
öputcou¡î
 < 4) && (inputcounter != 0))

1072 
öputcou¡î
 = 4;

1075 
buf„rcou¡î
 = 0; buf„rcou¡î < 
öputcou¡î
/4; buffercounter++)

1077 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

1078 
öpuèddr
+=4;

1081 
	`__HAL_HASH_START_DIGEST
();

1083 
hhash
->
HashInCou¡
 = 0;

1085 
	`HAL_HASH_InC∂tCÆlback
(
hhash
);

1090 
	`__HAL_UNLOCK
(
hhash
);

1093  
HAL_OK
;

1094 
	}
}

1102 
	$HAL_HASH_IRQH™dÀr
(
HASH_H™dÀTy≥Def
 *
hhash
)

1104 
HASH
->
CR
 & 
HASH_CR_ALGO
)

1106 
HASH_ALGOSELECTION_MD5
:

1107 
	`HAL_HASH_MD5_Sèπ_IT
(
hhash
, 
NULL
, 0, NULL);

1110 
HASH_ALGOSELECTION_SHA1
:

1111 
	`HAL_HASH_SHA1_Sèπ_IT
(
hhash
, 
NULL
, 0, NULL);

1117 
	}
}

1149 
HAL_SètusTy≥Def
 
	$HAL_HASH_MD5_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

1151 
uöt32_t
 
öpuèddr
 = (uöt32_t)
pInBuf„r
;

1154 
	`__HAL_LOCK
(
hhash
);

1157 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1160 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1164 
HASH
->
CR
 |
HASH_ALGOSELECTION_MD5
 | 
HASH_CR_INIT
;

1168 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

1171 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1174 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASH_DMAX„rC∂t
;

1176 
hhash
->
hdmaö
->
X„rEº‹CÆlback
 = 
HASH_DMAEº‹
;

1179 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (
Size
%4 ? (Size+3)/4:Size/4));

1182 
HASH
->
CR
 |(
HASH_CR_DMAE
);

1185 
	`__HAL_UNLOCK
(
hhash
);

1188  
HAL_OK
;

1189 
	}
}

1199 
HAL_SètusTy≥Def
 
	$HAL_HASH_MD5_Föish
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
* 
pOutBuf„r
, 
uöt32_t
 
Timeout
)

1201 
uöt32_t
 
tick°¨t
 = 0;

1204 
	`__HAL_LOCK
(
hhash
);

1207 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1210 
tick°¨t
 = 
	`HAL_GëTick
();

1212 
	`HAL_IS_BIT_CLR
(
HASH
->
SR
, 
HASH_FLAG_DCIS
))

1215 if(
Timeout
 !
HAL_MAX_DELAY
)

1217 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1220 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1223 
	`__HAL_UNLOCK
(
hhash
);

1225  
HAL_TIMEOUT
;

1231 
	`HASH_GëDige°
(
pOutBuf„r
, 16);

1234 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

1237 
	`__HAL_UNLOCK
(
hhash
);

1240  
HAL_OK
;

1241 
	}
}

1253 
HAL_SètusTy≥Def
 
	$HAL_HASH_SHA1_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

1255 
uöt32_t
 
öpuèddr
 = (uöt32_t)
pInBuf„r
;

1258 
	`__HAL_LOCK
(
hhash
);

1261 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1264 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1268 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA1
;

1269 
HASH
->
CR
 |
HASH_CR_INIT
;

1273 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

1276 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1279 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASH_DMAX„rC∂t
;

1281 
hhash
->
hdmaö
->
X„rEº‹CÆlback
 = 
HASH_DMAEº‹
;

1284 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (
Size
%4 ? (Size+3)/4:Size/4));

1287 
HASH
->
CR
 |(
HASH_CR_DMAE
);

1290 
	`__HAL_UNLOCK
(
hhash
);

1293  
HAL_OK
;

1294 
	}
}

1304 
HAL_SètusTy≥Def
 
	$HAL_HASH_SHA1_Föish
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
* 
pOutBuf„r
, 
uöt32_t
 
Timeout
)

1306 
uöt32_t
 
tick°¨t
 = 0;

1309 
	`__HAL_LOCK
(
hhash
);

1312 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1315 
tick°¨t
 = 
	`HAL_GëTick
();

1316 
	`HAL_IS_BIT_CLR
(
HASH
->
SR
, 
HASH_FLAG_DCIS
))

1319 if(
Timeout
 !
HAL_MAX_DELAY
)

1321 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1324 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1327 
	`__HAL_UNLOCK
(
hhash
);

1329  
HAL_TIMEOUT
;

1335 
	`HASH_GëDige°
(
pOutBuf„r
, 20);

1338 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

1341 
	`__HAL_UNLOCK
(
hhash
);

1344  
HAL_OK
;

1345 
	}
}

1380 
HAL_SètusTy≥Def
 
	$HAL_HMAC_MD5_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
)

1382 
uöt32_t
 
tick°¨t
 = 0;

1385 
	`__HAL_LOCK
(
hhash
);

1388 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1391 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1394 if(
hhash
->
Inô
.
KeySize
 > 64)

1397 
HASH
->
CR
 |(
HASH_ALGOSELECTION_MD5
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_HMAC_KEYTYPE_LONGKEY
 | 
HASH_CR_INIT
);

1402 
HASH
->
CR
 |(
HASH_ALGOSELECTION_MD5
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_CR_INIT
);

1407 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1411 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

1414 
	`HASH_WrôeD©a
(
hhash
->
Inô
.
pKey
, hhash->Inô.
KeySize
);

1417 
	`__HAL_HASH_START_DIGEST
();

1420 
tick°¨t
 = 
	`HAL_GëTick
();

1422 
	`HAL_IS_BIT_SET
(
HASH
->
SR
, 
HASH_FLAG_BUSY
))

1425 if(
Timeout
 !
HAL_MAX_DELAY
)

1427 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1430 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1433 
	`__HAL_UNLOCK
(
hhash
);

1435  
HAL_TIMEOUT
;

1441 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

1444 
	`HASH_WrôeD©a
(
pInBuf„r
, 
Size
);

1447 
	`__HAL_HASH_START_DIGEST
();

1450 
tick°¨t
 = 
	`HAL_GëTick
();

1452 
	`HAL_IS_BIT_SET
(
HASH
->
SR
, 
HASH_FLAG_BUSY
))

1455 if(
Timeout
 !
HAL_MAX_DELAY
)

1457 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
Timeout
)

1460 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1463 
	`__HAL_UNLOCK
(
hhash
);

1465  
HAL_TIMEOUT
;

1471 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

1474 
	`HASH_WrôeD©a
(
hhash
->
Inô
.
pKey
, hhash->Inô.
KeySize
);

1477 
	`__HAL_HASH_START_DIGEST
();

1480 
tick°¨t
 = 
	`HAL_GëTick
();

1482 
	`HAL_IS_BIT_SET
(
HASH
->
SR
, 
HASH_FLAG_BUSY
))

1485 if(
Timeout
 !
HAL_MAX_DELAY
)

1487 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
Timeout
)

1490 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1493 
	`__HAL_UNLOCK
(
hhash
);

1495  
HAL_TIMEOUT
;

1501 
	`HASH_GëDige°
(
pOutBuf„r
, 16);

1504 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

1507 
	`__HAL_UNLOCK
(
hhash
);

1510  
HAL_OK
;

1511 
	}
}

1525 
HAL_SètusTy≥Def
 
	$HAL_HMAC_SHA1_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
)

1527 
uöt32_t
 
tick°¨t
 = 0;

1530 
	`__HAL_LOCK
(
hhash
);

1533 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1536 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1539 if(
hhash
->
Inô
.
KeySize
 > 64)

1542 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA1
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_HMAC_KEYTYPE_LONGKEY
 | 
HASH_CR_INIT
);

1547 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA1
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_CR_INIT
);

1552 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1556 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

1559 
	`HASH_WrôeD©a
(
hhash
->
Inô
.
pKey
, hhash->Inô.
KeySize
);

1562 
	`__HAL_HASH_START_DIGEST
();

1565 
tick°¨t
 = 
	`HAL_GëTick
();

1567 
	`HAL_IS_BIT_SET
(
HASH
->
SR
, 
HASH_FLAG_BUSY
))

1570 if(
Timeout
 !
HAL_MAX_DELAY
)

1572 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1575 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1578 
	`__HAL_UNLOCK
(
hhash
);

1580  
HAL_TIMEOUT
;

1586 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

1589 
	`HASH_WrôeD©a
(
pInBuf„r
, 
Size
);

1592 
	`__HAL_HASH_START_DIGEST
();

1595 
tick°¨t
 = 
	`HAL_GëTick
();

1597 
	`HAL_IS_BIT_SET
(
HASH
->
SR
, 
HASH_FLAG_BUSY
))

1600 if(
Timeout
 !
HAL_MAX_DELAY
)

1602 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
Timeout
)

1605 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1608 
	`__HAL_UNLOCK
(
hhash
);

1610  
HAL_TIMEOUT
;

1616 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

1619 
	`HASH_WrôeD©a
(
hhash
->
Inô
.
pKey
, hhash->Inô.
KeySize
);

1622 
	`__HAL_HASH_START_DIGEST
();

1625 
tick°¨t
 = 
	`HAL_GëTick
();

1627 
	`HAL_IS_BIT_SET
(
HASH
->
SR
, 
HASH_FLAG_BUSY
))

1630 if(
Timeout
 !
HAL_MAX_DELAY
)

1632 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
Timeout
)

1635 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1638 
	`__HAL_UNLOCK
(
hhash
);

1640  
HAL_TIMEOUT
;

1645 
	`HASH_GëDige°
(
pOutBuf„r
, 20);

1648 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

1651 
	`__HAL_UNLOCK
(
hhash
);

1654  
HAL_OK
;

1655 
	}
}

1687 
HAL_SètusTy≥Def
 
	$HAL_HMAC_MD5_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

1689 
uöt32_t
 
öpuèddr
 = 0;

1692 
	`__HAL_LOCK
(
hhash
);

1695 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1698 
hhash
->
pHashInBuffPå
 = 
pInBuf„r
;

1699 
hhash
->
HashBuffSize
 = 
Size
;

1700 
hhash
->
HashInCou¡
 = 0;

1703 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1706 if(
hhash
->
Inô
.
KeySize
 > 64)

1709 
HASH
->
CR
 |(
HASH_ALGOSELECTION_MD5
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_HMAC_KEYTYPE_LONGKEY
 | 
HASH_CR_INIT
);

1714 
HASH
->
CR
 |(
HASH_ALGOSELECTION_MD5
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_CR_INIT
);

1719 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1722 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

1725 
öpuèddr
 = (
uöt32_t
)(
hhash
->
Inô
.
pKey
);

1728 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASH_DMAX„rC∂t
;

1730 
hhash
->
hdmaö
->
X„rEº‹CÆlback
 = 
HASH_DMAEº‹
;

1733 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (hhash->
Inô
.
KeySize
%4 ? (hhash->Init.KeySize+3)/4:hhash->Init.KeySize/4));

1735 
HASH
->
CR
 |(
HASH_CR_DMAE
);

1738 
	`__HAL_UNLOCK
(
hhash
);

1741  
HAL_OK
;

1742 
	}
}

1754 
HAL_SètusTy≥Def
 
	$HAL_HMAC_SHA1_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

1756 
uöt32_t
 
öpuèddr
 = 0;

1759 
	`__HAL_LOCK
(
hhash
);

1762 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1765 
hhash
->
pHashInBuffPå
 = 
pInBuf„r
;

1766 
hhash
->
HashBuffSize
 = 
Size
;

1767 
hhash
->
HashInCou¡
 = 0;

1770 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1773 if(
hhash
->
Inô
.
KeySize
 > 64)

1776 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA1
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_HMAC_KEYTYPE_LONGKEY
 | 
HASH_CR_INIT
);

1781 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA1
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_CR_INIT
);

1786 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1789 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

1792 
öpuèddr
 = (
uöt32_t
)(
hhash
->
Inô
.
pKey
);

1795 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASH_DMAX„rC∂t
;

1797 
hhash
->
hdmaö
->
X„rEº‹CÆlback
 = 
HASH_DMAEº‹
;

1800 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (hhash->
Inô
.
KeySize
%4 ? (hhash->Init.KeySize+3)/4:hhash->Init.KeySize/4));

1802 
HASH
->
CR
 |(
HASH_CR_DMAE
);

1805 
	`__HAL_UNLOCK
(
hhash
);

1808  
HAL_OK
;

1809 
	}
}

1835 
HAL_HASH_STATETy≥Def
 
	$HAL_HASH_GëSèã
(
HASH_H™dÀTy≥Def
 *
hhash
)

1837  
hhash
->
Sèã
;

1838 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_hash_ex.c

96 
	~"°m32f4xx_hÆ.h
"

107 #ifde‡
HAL_HASH_MODULE_ENABLED


109 #i‡
deföed
(
STM32F437xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F479xx
)

119 
HASHEx_DMAX„rC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

120 
HASHEx_WrôeD©a
(
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
);

121 
HASHEx_GëDige°
(
uöt8_t
 *
pMsgDige°
, uöt8_à
Size
);

122 
HASHEx_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

139 
	$HASHEx_WrôeD©a
(
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

141 
uöt32_t
 
buf„rcou¡î
;

142 
uöt32_t
 
öpuèddr
 = (uöt32_tË
pInBuf„r
;

144 
buf„rcou¡î
 = 0; buf„rcou¡î < 
Size
; buffercounter+=4)

146 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

147 
öpuèddr
+=4;

149 
	}
}

157 
	$HASHEx_GëDige°
(
uöt8_t
 *
pMsgDige°
, uöt8_à
Size
)

159 
uöt32_t
 
msgdige°
 = (uöt32_t)
pMsgDige°
;

161 
Size
)

165 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[0]);

166 
msgdige°
+=4;

167 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[1]);

168 
msgdige°
+=4;

169 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[2]);

170 
msgdige°
+=4;

171 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[3]);

175 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[0]);

176 
msgdige°
+=4;

177 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[1]);

178 
msgdige°
+=4;

179 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[2]);

180 
msgdige°
+=4;

181 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[3]);

182 
msgdige°
+=4;

183 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[4]);

187 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[0]);

188 
msgdige°
+=4;

189 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[1]);

190 
msgdige°
+=4;

191 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[2]);

192 
msgdige°
+=4;

193 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[3]);

194 
msgdige°
+=4;

195 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[4]);

196 
msgdige°
+=4;

197 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[5]);

198 
msgdige°
+=4;

199 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[6]);

203 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[0]);

204 
msgdige°
+=4;

205 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[1]);

206 
msgdige°
+=4;

207 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[2]);

208 
msgdige°
+=4;

209 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[3]);

210 
msgdige°
+=4;

211 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH
->
HR
[4]);

212 
msgdige°
+=4;

213 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[5]);

214 
msgdige°
+=4;

215 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[6]);

216 
msgdige°
+=4;

217 *(
uöt32_t
*)(
msgdige°
Ë
	`__REV
(
HASH_DIGEST
->
HR
[7]);

222 
	}
}

229 
	$HASHEx_DMAX„rC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

231 
HASH_H™dÀTy≥Def
* 
hhash
 = ( HASH_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

232 
uöt32_t
 
öpuèddr
 = 0;

233 
uöt32_t
 
buf„rsize
 = 0;

235 if((
HASH
->
CR
 & 
HASH_CR_MODE
) != HASH_CR_MODE)

238 
HASH
->
CR
 &(
uöt32_t
)(~
HASH_CR_DMAE
);

241 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

244 
	`HAL_HASH_InC∂tCÆlback
(
hhash
);

249 
hhash
->
HashInCou¡
++;

251 
HASH
->
CR
 &(
uöt32_t
)(~
HASH_CR_DMAE
);

253 if(
hhash
->
HashInCou¡
 <= 2)

256 if(
hhash
->
HashInCou¡
 == 1)

258 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

259 
buf„rsize
 = 
hhash
->
HashBuffSize
;

262 if(
hhash
->
HashInCou¡
 == 2)

264 
öpuèddr
 = (
uöt32_t
)
hhash
->
Inô
.
pKey
;

265 
buf„rsize
 = 
hhash
->
Inô
.
KeySize
;

268 
	`MODIFY_REG
(
HASH
->
STR
, 
HASH_STR_NBLW
, 8 * (
buf„rsize
 % 4));

271 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASHEx_DMAX„rC∂t
;

274 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (
buf„rsize
%4 ? (buffersize+3)/4:buffersize/4));

277 
HASH
->
CR
 |(
HASH_CR_DMAE
);

282 
HASH
->
CR
 &(
uöt32_t
)(~
HASH_CR_DMAE
);

285 
hhash
->
HashInCou¡
 = 0;

288 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

291 
	`HAL_HASH_InC∂tCÆlback
(
hhash
);

294 
	}
}

301 
	$HASHEx_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

303 
HASH_H™dÀTy≥Def
* 
hhash
 = ( HASH_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

304 
hhash
->
Sèã

HAL_HASH_STATE_READY
;

305 
	`HAL_HASH_Eº‹CÆlback
(
hhash
);

306 
	}
}

345 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA224_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
)

347 
uöt32_t
 
tick°¨t
 = 0;

350 
	`__HAL_LOCK
(
hhash
);

353 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

356 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

360 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA224
 | 
HASH_CR_INIT
;

364 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

367 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

370 
	`HASHEx_WrôeD©a
(
pInBuf„r
, 
Size
);

373 
	`__HAL_HASH_START_DIGEST
();

376 
tick°¨t
 = 
	`HAL_GëTick
();

378 (
HASH
->
SR
 & 
HASH_FLAG_BUSY
) == HASH_FLAG_BUSY)

381 if(
Timeout
 !
HAL_MAX_DELAY
)

383 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

386 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

389 
	`__HAL_UNLOCK
(
hhash
);

391  
HAL_TIMEOUT
;

397 
	`HASHEx_GëDige°
(
pOutBuf„r
, 28);

400 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

403 
	`__HAL_UNLOCK
(
hhash
);

406  
HAL_OK
;

407 
	}
}

421 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA256_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
)

423 
uöt32_t
 
tick°¨t
 = 0;

426 
	`__HAL_LOCK
(
hhash
);

429 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

432 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

436 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA256
 | 
HASH_CR_INIT
;

440 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

443 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

446 
	`HASHEx_WrôeD©a
(
pInBuf„r
, 
Size
);

449 
	`__HAL_HASH_START_DIGEST
();

452 
tick°¨t
 = 
	`HAL_GëTick
();

454 (
HASH
->
SR
 & 
HASH_FLAG_BUSY
) == HASH_FLAG_BUSY)

457 if(
Timeout
 !
HAL_MAX_DELAY
)

459 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

462 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

465 
	`__HAL_UNLOCK
(
hhash
);

467  
HAL_TIMEOUT
;

473 
	`HASHEx_GëDige°
(
pOutBuf„r
, 32);

476 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

479 
	`__HAL_UNLOCK
(
hhash
);

482  
HAL_OK
;

483 
	}
}

496 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA224_Accumuœã
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

499 
	`__HAL_LOCK
(
hhash
);

502 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

505 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

509 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA224
 | 
HASH_CR_INIT
;

513 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

516 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

519 
	`HASHEx_WrôeD©a
(
pInBuf„r
, 
Size
);

522 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

525 
	`__HAL_UNLOCK
(
hhash
);

528  
HAL_OK
;

529 
	}
}

542 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA256_Accumuœã
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

545 
	`__HAL_LOCK
(
hhash
);

548 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

551 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

555 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA256
 | 
HASH_CR_INIT
;

559 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

562 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

565 
	`HASHEx_WrôeD©a
(
pInBuf„r
, 
Size
);

568 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

571 
	`__HAL_UNLOCK
(
hhash
);

574  
HAL_OK
;

575 
	}
}

610 
HAL_SètusTy≥Def
 
	$HAL_HMACEx_SHA224_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
)

612 
uöt32_t
 
tick°¨t
 = 0;

615 
	`__HAL_LOCK
(
hhash
);

618 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

621 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

624 if(
hhash
->
Inô
.
KeySize
 > 64)

627 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA224
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_HMAC_KEYTYPE_LONGKEY
 | 
HASH_CR_INIT
);

632 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA224
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_CR_INIT
);

637 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

641 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

644 
	`HASHEx_WrôeD©a
(
hhash
->
Inô
.
pKey
, hhash->Inô.
KeySize
);

647 
	`__HAL_HASH_START_DIGEST
();

650 
tick°¨t
 = 
	`HAL_GëTick
();

652 (
HASH
->
SR
 & 
HASH_FLAG_BUSY
) == HASH_FLAG_BUSY)

655 if(
Timeout
 !
HAL_MAX_DELAY
)

657 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

660 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

663 
	`__HAL_UNLOCK
(
hhash
);

665  
HAL_TIMEOUT
;

671 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

674 
	`HASHEx_WrôeD©a
(
pInBuf„r
, 
Size
);

677 
	`__HAL_HASH_START_DIGEST
();

680 
tick°¨t
 = 
	`HAL_GëTick
();

682 (
HASH
->
SR
 & 
HASH_FLAG_BUSY
) == HASH_FLAG_BUSY)

685 if(
Timeout
 !
HAL_MAX_DELAY
)

687 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
Timeout
)

690 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

693 
	`__HAL_UNLOCK
(
hhash
);

695  
HAL_TIMEOUT
;

701 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

704 
	`HASHEx_WrôeD©a
(
hhash
->
Inô
.
pKey
, hhash->Inô.
KeySize
);

707 
	`__HAL_HASH_START_DIGEST
();

710 
tick°¨t
 = 
	`HAL_GëTick
();

712 (
HASH
->
SR
 & 
HASH_FLAG_BUSY
) == HASH_FLAG_BUSY)

715 if(
Timeout
 !
HAL_MAX_DELAY
)

717 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
Timeout
)

720 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

723 
	`__HAL_UNLOCK
(
hhash
);

725  
HAL_TIMEOUT
;

730 
	`HASHEx_GëDige°
(
pOutBuf„r
, 28);

733 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

736 
	`__HAL_UNLOCK
(
hhash
);

739  
HAL_OK
;

740 
	}
}

754 
HAL_SètusTy≥Def
 
	$HAL_HMACEx_SHA256_Sèπ
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
, uöt32_à
Timeout
)

756 
uöt32_t
 
tick°¨t
 = 0;

759 
	`__HAL_LOCK
(
hhash
);

762 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

765 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

768 if(
hhash
->
Inô
.
KeySize
 > 64)

771 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA256
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_HMAC_KEYTYPE_LONGKEY
);

776 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA256
 | 
HASH_ALGOMODE_HMAC
);

780 
HASH
->
CR
 |
HASH_CR_INIT
;

784 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

788 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

791 
	`HASHEx_WrôeD©a
(
hhash
->
Inô
.
pKey
, hhash->Inô.
KeySize
);

794 
	`__HAL_HASH_START_DIGEST
();

797 
tick°¨t
 = 
	`HAL_GëTick
();

799 (
HASH
->
SR
 & 
HASH_FLAG_BUSY
) == HASH_FLAG_BUSY)

802 if(
Timeout
 !
HAL_MAX_DELAY
)

804 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

807 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

810 
	`__HAL_UNLOCK
(
hhash
);

812  
HAL_TIMEOUT
;

818 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

821 
	`HASHEx_WrôeD©a
(
pInBuf„r
, 
Size
);

824 
	`__HAL_HASH_START_DIGEST
();

827 
tick°¨t
 = 
	`HAL_GëTick
();

829 (
HASH
->
SR
 & 
HASH_FLAG_BUSY
) == HASH_FLAG_BUSY)

832 if(
Timeout
 !
HAL_MAX_DELAY
)

834 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
Timeout
)

837 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

840 
	`__HAL_UNLOCK
(
hhash
);

842  
HAL_TIMEOUT
;

848 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

851 
	`HASHEx_WrôeD©a
(
hhash
->
Inô
.
pKey
, hhash->Inô.
KeySize
);

854 
	`__HAL_HASH_START_DIGEST
();

857 
tick°¨t
 = 
	`HAL_GëTick
();

859 (
HASH
->
SR
 & 
HASH_FLAG_BUSY
) == HASH_FLAG_BUSY)

862 if(
Timeout
 !
HAL_MAX_DELAY
)

864 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
Timeout
)

867 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

870 
	`__HAL_UNLOCK
(
hhash
);

872  
HAL_TIMEOUT
;

877 
	`HASHEx_GëDige°
(
pOutBuf„r
, 32);

880 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

883 
	`__HAL_UNLOCK
(
hhash
);

886  
HAL_OK
;

887 
	}
}

920 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA224_Sèπ_IT
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
)

922 
uöt32_t
 
öpuèddr
;

923 
uöt32_t
 
buf„rcou¡î
;

924 
uöt32_t
 
öputcou¡î
;

927 
	`__HAL_LOCK
(
hhash
);

929 if(
hhash
->
Sèã
 =
HAL_HASH_STATE_READY
)

932 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

934 
hhash
->
HashInCou¡
 = 
Size
;

935 
hhash
->
pHashInBuffPå
 = 
pInBuf„r
;

936 
hhash
->
pHashOutBuffPå
 = 
pOutBuf„r
;

939 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

942 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA224
;

945 
HASH
->
CR
 |
HASH_CR_INIT
;

948 
hhash
->
HashITCou¡î
 = 0;

951 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

954 
	`__HAL_UNLOCK
(
hhash
);

957 
HASH
->
IMR
 = (
HASH_IT_DINI
 | 
HASH_IT_DCI
);

960  
HAL_OK
;

962 if(
	`__HAL_HASH_GET_FLAG
(
HASH_FLAG_DCIS
))

965 
	`HASHEx_GëDige°
(
hhash
->
pHashOutBuffPå
, 28);

966 if(
hhash
->
HashInCou¡
 == 0)

969 
HASH
->
IMR
 = 0;

971 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

973 
	`HAL_HASH_Dg°C∂tCÆlback
(
hhash
);

976 
	`__HAL_UNLOCK
(
hhash
);

979  
HAL_OK
;

982 if(
	`__HAL_HASH_GET_FLAG
(
HASH_FLAG_DINIS
))

984 if(
hhash
->
HashInCou¡
 >= 68)

986 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

988 
buf„rcou¡î
 = 0; buffercounter < 64; buffercounter+=4)

990 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

991 
öpuèddr
+=4;

993 if(
hhash
->
HashITCou¡î
 == 0)

995 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

997 if(
hhash
->
HashInCou¡
 >= 68)

1000 
hhash
->
HashInCou¡
 -= 68;

1001 
hhash
->
pHashInBuffPå
+= 68;

1005 
hhash
->
HashInCou¡
 = 0;

1006 
hhash
->
pHashInBuffPå
+hhash->
HashInCou¡
;

1009 
hhash
->
HashITCou¡î
 = 1;

1014 
hhash
->
HashInCou¡
 -= 64;

1015 
hhash
->
pHashInBuffPå
+= 64;

1021 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

1023 
öputcou¡î
 = 
hhash
->
HashInCou¡
;

1025 
HASH
->
IMR
 &~(
HASH_IT_DINI
);

1027 
	`__HAL_HASH_SET_NBVALIDBITS
(
öputcou¡î
);

1029 if((
öputcou¡î
 > 4) && (inputcounter%4))

1031 
öputcou¡î
 = (inputcounter+4-inputcounter%4);

1033 i‡((
öputcou¡î
 < 4) && (inputcounter != 0))

1035 
öputcou¡î
 = 4;

1038 
buf„rcou¡î
 = 0; buf„rcou¡î < 
öputcou¡î
/4; buffercounter++)

1040 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

1041 
öpuèddr
+=4;

1044 
	`__HAL_HASH_START_DIGEST
();

1046 
hhash
->
HashInCou¡
 = 0;

1048 
	`HAL_HASH_InC∂tCÆlback
(
hhash
);

1053 
	`__HAL_UNLOCK
(
hhash
);

1056  
HAL_OK
;

1057 
	}
}

1071 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA256_Sèπ_IT
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
, uöt8_t* 
pOutBuf„r
)

1073 
uöt32_t
 
öpuèddr
;

1074 
uöt32_t
 
buf„rcou¡î
;

1075 
uöt32_t
 
öputcou¡î
;

1078 
	`__HAL_LOCK
(
hhash
);

1080 if(
hhash
->
Sèã
 =
HAL_HASH_STATE_READY
)

1083 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1085 
hhash
->
HashInCou¡
 = 
Size
;

1086 
hhash
->
pHashInBuffPå
 = 
pInBuf„r
;

1087 
hhash
->
pHashOutBuffPå
 = 
pOutBuf„r
;

1090 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1093 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA256
;

1096 
HASH
->
CR
 |
HASH_CR_INIT
;

1099 
hhash
->
HashITCou¡î
 = 0;

1102 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1105 
	`__HAL_UNLOCK
(
hhash
);

1108 
HASH
->
IMR
 = (
HASH_IT_DINI
 | 
HASH_IT_DCI
);

1111  
HAL_OK
;

1113 if(
	`__HAL_HASH_GET_FLAG
(
HASH_FLAG_DCIS
))

1116 
	`HASHEx_GëDige°
(
hhash
->
pHashOutBuffPå
, 32);

1117 if(
hhash
->
HashInCou¡
 == 0)

1120 
HASH
->
IMR
 = 0;

1122 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

1124 
	`HAL_HASH_Dg°C∂tCÆlback
(
hhash
);

1127 
	`__HAL_UNLOCK
(
hhash
);

1130  
HAL_OK
;

1133 if(
	`__HAL_HASH_GET_FLAG
(
HASH_FLAG_DINIS
))

1135 if(
hhash
->
HashInCou¡
 >= 68)

1137 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

1139 
buf„rcou¡î
 = 0; buffercounter < 64; buffercounter+=4)

1141 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

1142 
öpuèddr
+=4;

1144 if(
hhash
->
HashITCou¡î
 == 0)

1146 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

1148 if(
hhash
->
HashInCou¡
 >= 68)

1151 
hhash
->
HashInCou¡
 -= 68;

1152 
hhash
->
pHashInBuffPå
+= 68;

1156 
hhash
->
HashInCou¡
 = 0;

1157 
hhash
->
pHashInBuffPå
+hhash->
HashInCou¡
;

1160 
hhash
->
HashITCou¡î
 = 1;

1165 
hhash
->
HashInCou¡
 -= 64;

1166 
hhash
->
pHashInBuffPå
+= 64;

1172 
öpuèddr
 = (
uöt32_t
)
hhash
->
pHashInBuffPå
;

1174 
öputcou¡î
 = 
hhash
->
HashInCou¡
;

1176 
HASH
->
IMR
 &~(
HASH_IT_DINI
);

1178 
	`__HAL_HASH_SET_NBVALIDBITS
(
öputcou¡î
);

1180 if((
öputcou¡î
 > 4) && (inputcounter%4))

1182 
öputcou¡î
 = (inputcounter+4-inputcounter%4);

1184 i‡((
öputcou¡î
 < 4) && (inputcounter != 0))

1186 
öputcou¡î
 = 4;

1189 
buf„rcou¡î
 = 0; buf„rcou¡î < 
öputcou¡î
/4; buffercounter++)

1191 
HASH
->
DIN
 = *(
uöt32_t
*)
öpuèddr
;

1192 
öpuèddr
+=4;

1195 
	`__HAL_HASH_START_DIGEST
();

1197 
hhash
->
HashInCou¡
 = 0;

1199 
	`HAL_HASH_InC∂tCÆlback
(
hhash
);

1204 
	`__HAL_UNLOCK
(
hhash
);

1207  
HAL_OK
;

1208 
	}
}

1216 
	$HAL_HASHEx_IRQH™dÀr
(
HASH_H™dÀTy≥Def
 *
hhash
)

1218 
HASH
->
CR
 & 
HASH_CR_ALGO
)

1221 
HASH_ALGOSELECTION_SHA224
:

1222 
	`HAL_HASHEx_SHA224_Sèπ_IT
(
hhash
, 
NULL
, 0, NULL);

1225 
HASH_ALGOSELECTION_SHA256
:

1226 
	`HAL_HASHEx_SHA256_Sèπ_IT
(
hhash
, 
NULL
, 0, NULL);

1232 
	}
}

1265 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA224_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

1267 
uöt32_t
 
öpuèddr
 = (uöt32_t)
pInBuf„r
;

1270 
	`__HAL_LOCK
(
hhash
);

1273 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1276 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1280 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA224
 | 
HASH_CR_INIT
;

1284 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

1287 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1290 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASHEx_DMAX„rC∂t
;

1292 
hhash
->
hdmaö
->
X„rEº‹CÆlback
 = 
HASHEx_DMAEº‹
;

1295 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (
Size
%4 ? (Size+3)/4:Size/4));

1298 
HASH
->
CR
 |(
HASH_CR_DMAE
);

1301 
	`__HAL_UNLOCK
(
hhash
);

1304  
HAL_OK
;

1305 
	}
}

1315 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA224_Föish
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
* 
pOutBuf„r
, 
uöt32_t
 
Timeout
)

1317 
uöt32_t
 
tick°¨t
 = 0;

1320 
	`__HAL_LOCK
(
hhash
);

1323 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1326 
tick°¨t
 = 
	`HAL_GëTick
();

1328 
	`HAL_IS_BIT_CLR
(
HASH
->
SR
, 
HASH_FLAG_DCIS
))

1331 if(
Timeout
 !
HAL_MAX_DELAY
)

1333 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1336 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1339 
	`__HAL_UNLOCK
(
hhash
);

1341  
HAL_TIMEOUT
;

1347 
	`HASHEx_GëDige°
(
pOutBuf„r
, 28);

1350 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

1353 
	`__HAL_UNLOCK
(
hhash
);

1356  
HAL_OK
;

1357 
	}
}

1369 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA256_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

1371 
uöt32_t
 
öpuèddr
 = (uöt32_t)
pInBuf„r
;

1374 
	`__HAL_LOCK
(
hhash
);

1377 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1380 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1384 
HASH
->
CR
 |
HASH_ALGOSELECTION_SHA256
 | 
HASH_CR_INIT
;

1388 
	`__HAL_HASH_SET_NBVALIDBITS
(
Size
);

1391 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1394 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASHEx_DMAX„rC∂t
;

1396 
hhash
->
hdmaö
->
X„rEº‹CÆlback
 = 
HASHEx_DMAEº‹
;

1399 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (
Size
%4 ? (Size+3)/4:Size/4));

1402 
HASH
->
CR
 |(
HASH_CR_DMAE
);

1405 
	`__HAL_UNLOCK
(
hhash
);

1408  
HAL_OK
;

1409 
	}
}

1419 
HAL_SètusTy≥Def
 
	$HAL_HASHEx_SHA256_Föish
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
* 
pOutBuf„r
, 
uöt32_t
 
Timeout
)

1421 
uöt32_t
 
tick°¨t
 = 0;

1424 
	`__HAL_LOCK
(
hhash
);

1427 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1430 
tick°¨t
 = 
	`HAL_GëTick
();

1432 
	`HAL_IS_BIT_CLR
(
HASH
->
SR
, 
HASH_FLAG_DCIS
))

1435 if(
Timeout
 !
HAL_MAX_DELAY
)

1437 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1440 
hhash
->
Sèã
 = 
HAL_HASH_STATE_TIMEOUT
;

1443 
	`__HAL_UNLOCK
(
hhash
);

1445  
HAL_TIMEOUT
;

1451 
	`HASHEx_GëDige°
(
pOutBuf„r
, 32);

1454 
hhash
->
Sèã
 = 
HAL_HASH_STATE_READY
;

1457 
	`__HAL_UNLOCK
(
hhash
);

1460  
HAL_OK
;

1461 
	}
}

1493 
HAL_SètusTy≥Def
 
	$HAL_HMACEx_SHA224_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

1495 
uöt32_t
 
öpuèddr
;

1498 
	`__HAL_LOCK
(
hhash
);

1501 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1504 
hhash
->
pHashInBuffPå
 = 
pInBuf„r
;

1505 
hhash
->
HashBuffSize
 = 
Size
;

1506 
hhash
->
HashInCou¡
 = 0;

1509 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1512 if(
hhash
->
Inô
.
KeySize
 > 64)

1515 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA224
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_HMAC_KEYTYPE_LONGKEY
 | 
HASH_CR_INIT
);

1520 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA224
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_CR_INIT
);

1525 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1528 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

1531 
öpuèddr
 = (
uöt32_t
)(
hhash
->
Inô
.
pKey
);

1534 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASHEx_DMAX„rC∂t
;

1536 
hhash
->
hdmaö
->
X„rEº‹CÆlback
 = 
HASHEx_DMAEº‹
;

1539 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (hhash->
Inô
.
KeySize
%4 ? (hhash->Init.KeySize+3)/4:hhash->Init.KeySize/4));

1541 
HASH
->
CR
 |(
HASH_CR_DMAE
);

1544 
	`__HAL_UNLOCK
(
hhash
);

1547  
HAL_OK
;

1548 
	}
}

1560 
HAL_SètusTy≥Def
 
	$HAL_HMACEx_SHA256_Sèπ_DMA
(
HASH_H™dÀTy≥Def
 *
hhash
, 
uöt8_t
 *
pInBuf„r
, 
uöt32_t
 
Size
)

1562 
uöt32_t
 
öpuèddr
;

1565 
	`__HAL_LOCK
(
hhash
);

1568 
hhash
->
Sèã
 = 
HAL_HASH_STATE_BUSY
;

1571 
hhash
->
pHashInBuffPå
 = 
pInBuf„r
;

1572 
hhash
->
HashBuffSize
 = 
Size
;

1573 
hhash
->
HashInCou¡
 = 0;

1576 if(
hhash
->
Pha£
 =
HAL_HASH_PHASE_READY
)

1579 if(
hhash
->
Inô
.
KeySize
 > 64)

1582 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA256
 | 
HASH_ALGOMODE_HMAC
 | 
HASH_HMAC_KEYTYPE_LONGKEY
);

1587 
HASH
->
CR
 |(
HASH_ALGOSELECTION_SHA256
 | 
HASH_ALGOMODE_HMAC
);

1591 
HASH
->
CR
 |
HASH_CR_INIT
;

1595 
hhash
->
Pha£
 = 
HAL_HASH_PHASE_PROCESS
;

1598 
	`__HAL_HASH_SET_NBVALIDBITS
(
hhash
->
Inô
.
KeySize
);

1601 
öpuèddr
 = (
uöt32_t
)(
hhash
->
Inô
.
pKey
);

1604 
hhash
->
hdmaö
->
X„rC∂tCÆlback
 = 
HASHEx_DMAX„rC∂t
;

1606 
hhash
->
hdmaö
->
X„rEº‹CÆlback
 = 
HASHEx_DMAEº‹
;

1609 
	`HAL_DMA_Sèπ_IT
(
hhash
->
hdmaö
, 
öpuèddr
, (
uöt32_t
)&
HASH
->
DIN
, (hhash->
Inô
.
KeySize
%4 ? (hhash->Init.KeySize+3)/4:hhash->Init.KeySize/4));

1611 
HASH
->
CR
 |(
HASH_CR_DMAE
);

1614 
	`__HAL_UNLOCK
(
hhash
);

1617  
HAL_OK
;

1618 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_hcd.c

75 
	~"°m32f4xx_hÆ.h
"

86 #ifde‡
HAL_HCD_MODULE_ENABLED


87 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

88 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

89 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

90 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

99 
	`HCD_HC_IN_IRQH™dÀr
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
);

100 
	`HCD_HC_OUT_IRQH™dÀr
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
);

101 
	`HCD_RXQLVL_IRQH™dÀr
(
HCD_H™dÀTy≥Def
 *
hhcd
);

102 
	`HCD_P‹t_IRQH™dÀr
(
HCD_H™dÀTy≥Def
 *
hhcd
);

130 
HAL_SètusTy≥Def
 
	$HAL_HCD_Inô
(
HCD_H™dÀTy≥Def
 *
hhcd
)

133 if(
hhcd
 =
NULL
)

135  
HAL_ERROR
;

139 
	`as£π_∑øm
(
	`IS_HCD_ALL_INSTANCE
(
hhcd
->
In°™˚
));

141 
hhcd
->
Sèã
 = 
HAL_HCD_STATE_BUSY
;

144 
	`HAL_HCD_M•Inô
(
hhcd
);

147 
	`__HAL_HCD_DISABLE
(
hhcd
);

150 
	`USB_C‹eInô
(
hhcd
->
In°™˚
, hhcd->
Inô
);

153 
	`USB_SëCuºítMode
(
hhcd
->
In°™˚
 , 
USB_OTG_HOST_MODE
);

156 
	`USB_Ho°Inô
(
hhcd
->
In°™˚
, hhcd->
Inô
);

158 
hhcd
->
Sèã

HAL_HCD_STATE_READY
;

160  
HAL_OK
;

161 
	}
}

187 
HAL_SètusTy≥Def
 
	$HAL_HCD_HC_Inô
(
HCD_H™dÀTy≥Def
 *
hhcd
,

188 
uöt8_t
 
ch_num
,

189 
uöt8_t
 
ïnum
,

190 
uöt8_t
 
dev_addªss
,

191 
uöt8_t
 
•ìd
,

192 
uöt8_t
 
ï_ty≥
,

193 
uöt16_t
 
mps
)

195 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

197 
	`__HAL_LOCK
(
hhcd
);

199 
hhcd
->
hc
[
ch_num
].
dev_addr
 = 
dev_addªss
;

200 
hhcd
->
hc
[
ch_num
].
max_∑ckë
 = 
mps
;

201 
hhcd
->
hc
[
ch_num
].ch_num = ch_num;

202 
hhcd
->
hc
[
ch_num
].
ï_ty≥
 =Ép_type;

203 
hhcd
->
hc
[
ch_num
].
ï_num
 = 
ïnum
 & 0x7F;

204 
hhcd
->
hc
[
ch_num
].
ï_is_ö
 = ((
ïnum
 & 0x80) == 0x80);

205 
hhcd
->
hc
[
ch_num
].
•ìd
 = speed;

207 
°©us
 = 
	`USB_HC_Inô
(
hhcd
->
In°™˚
,

208 
ch_num
,

209 
ïnum
,

210 
dev_addªss
,

211 
•ìd
,

212 
ï_ty≥
,

213 
mps
);

214 
	`__HAL_UNLOCK
(
hhcd
);

216  
°©us
;

217 
	}
}

226 
HAL_SètusTy≥Def
 
	$HAL_HCD_HC_HÆt
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
ch_num
)

228 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

230 
	`__HAL_LOCK
(
hhcd
);

231 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
ch_num
);

232 
	`__HAL_UNLOCK
(
hhcd
);

234  
°©us
;

235 
	}
}

242 
HAL_SètusTy≥Def
 
	$HAL_HCD_DeInô
(
HCD_H™dÀTy≥Def
 *
hhcd
)

245 if(
hhcd
 =
NULL
)

247  
HAL_ERROR
;

250 
hhcd
->
Sèã
 = 
HAL_HCD_STATE_BUSY
;

253 
	`HAL_HCD_M•DeInô
(
hhcd
);

255 
	`__HAL_HCD_DISABLE
(
hhcd
);

257 
hhcd
->
Sèã
 = 
HAL_HCD_STATE_RESET
;

259  
HAL_OK
;

260 
	}
}

267 
__wók
 
	$HAL_HCD_M•Inô
(
HCD_H™dÀTy≥Def
 *
hhcd
)

272 
	}
}

279 
__wók
 
	$HAL_HCD_M•DeInô
(
HCD_H™dÀTy≥Def
 *
hhcd
)

284 
	}
}

328 
HAL_SètusTy≥Def
 
	$HAL_HCD_HC_SubmôReque°
(
HCD_H™dÀTy≥Def
 *
hhcd
,

329 
uöt8_t
 
ch_num
,

330 
uöt8_t
 
dúe˘i⁄
,

331 
uöt8_t
 
ï_ty≥
,

332 
uöt8_t
 
tokí
,

333 
uöt8_t
* 
pbuff
,

334 
uöt16_t
 
Àngth
,

335 
uöt8_t
 
do_pög
)

337 
hhcd
->
hc
[
ch_num
].
ï_is_ö
 = 
dúe˘i⁄
;

338 
hhcd
->
hc
[
ch_num
].
ï_ty≥
 =Ép_type;

340 if(
tokí
 == 0)

342 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_SETUP
;

346 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA1
;

350 
ï_ty≥
)

352 
EP_TYPE_CTRL
:

353 if((
tokí
 =1Ë&& (
dúe˘i⁄
 == 0))

355 i‡–
Àngth
 == 0 )

357 
hhcd
->
hc
[
ch_num
].
toggÀ_out
 = 1;

361 i‡–
hhcd
->
hc
[
ch_num
].
toggÀ_out
 == 0)

363 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA0
;

367 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA1
;

369 if(
hhcd
->
hc
[
ch_num
].
urb_°©e
 !
URB_NOTREADY
)

371 
hhcd
->
hc
[
ch_num
].
do_pög
 = do_ping;

376 
EP_TYPE_BULK
:

377 if(
dúe˘i⁄
 == 0)

380 i‡–
hhcd
->
hc
[
ch_num
].
toggÀ_out
 == 0)

382 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA0
;

386 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA1
;

388 if(
hhcd
->
hc
[
ch_num
].
urb_°©e
 !
URB_NOTREADY
)

390 
hhcd
->
hc
[
ch_num
].
do_pög
 = do_ping;

395 if–
hhcd
->
hc
[
ch_num
].
toggÀ_ö
 == 0)

397 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA0
;

401 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA1
;

406 
EP_TYPE_INTR
:

407 if(
dúe˘i⁄
 == 0)

410 i‡–
hhcd
->
hc
[
ch_num
].
toggÀ_out
 == 0)

412 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA0
;

416 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA1
;

421 if–
hhcd
->
hc
[
ch_num
].
toggÀ_ö
 == 0)

423 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA0
;

427 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA1
;

432 
EP_TYPE_ISOC
:

433 
hhcd
->
hc
[
ch_num
].
d©a_pid
 = 
HC_PID_DATA0
;

437 
hhcd
->
hc
[
ch_num
].
x„r_buff
 = 
pbuff
;

438 
hhcd
->
hc
[
ch_num
].
x„r_Àn
 = 
Àngth
;

439 
hhcd
->
hc
[
ch_num
].
urb_°©e
 = 
URB_IDLE
;

440 
hhcd
->
hc
[
ch_num
].
x„r_cou¡
 = 0;

441 
hhcd
->
hc
[
ch_num
].ch_num = ch_num;

442 
hhcd
->
hc
[
ch_num
].
°©e
 = 
HC_IDLE
;

444  
	`USB_HC_SèπX„r
(
hhcd
->
In°™˚
, &(hhcd->
hc
[
ch_num
]), hhcd->
Inô
.
dma_íabÀ
);

445 
	}
}

452 
	$HAL_HCD_IRQH™dÀr
(
HCD_H™dÀTy≥Def
 *
hhcd
)

454 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hhcd
->
In°™˚
;

455 
uöt32_t
 
i
 = 0 , 
öãºu±
 = 0;

458 i‡(
	`USB_GëMode
(
hhcd
->
In°™˚
Ë=
USB_OTG_MODE_HOST
)

461 if(
	`__HAL_HCD_IS_INVALID_INTERRUPT
(
hhcd
))

466 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
))

469 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
);

472 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_IISOIXFR
))

475 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_IISOIXFR
);

478 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_PTXFE
))

481 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_PTXFE
);

484 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_MMIS
))

487 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_MMIS
);

491 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_DISCINT
))

495 
USBx_HPRT0
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |\

496 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
 );

499 
	`HAL_HCD_Disc⁄√˘_CÆlback
(
hhcd
);

500 
	`USB_InôFSLSPClkSñ
(
hhcd
->
In°™˚
 ,
HCFG_48_MHZ
 );

501 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_DISCINT
);

505 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_HPRTINT
))

507 
	`HCD_P‹t_IRQH™dÀr
 (
hhcd
);

511 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_SOF
))

513 
	`HAL_HCD_SOF_CÆlback
(
hhcd
);

514 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_SOF
);

518 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_HCINT
))

520 
öãºu±
 = 
	`USB_HC_RódI¡îru±
(
hhcd
->
In°™˚
);

521 
i
 = 0; i < 
hhcd
->
Inô
.
Ho°_ch™√ls
; i++)

523 i‡(
öãºu±
 & (1 << 
i
))

525 i‡((
	`USBx_HC
(
i
)->
HCCHAR
Ë& 
USB_OTG_HCCHAR_EPDIR
)

527 
	`HCD_HC_IN_IRQH™dÀr
(
hhcd
, 
i
);

531 
	`HCD_HC_OUT_IRQH™dÀr
 (
hhcd
, 
i
);

535 
	`__HAL_HCD_CLEAR_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_HCINT
);

539 if(
	`__HAL_HCD_GET_FLAG
(
hhcd
, 
USB_OTG_GINTSTS_RXFLVL
))

541 
	`USB_MASK_INTERRUPT
(
hhcd
->
In°™˚
, 
USB_OTG_GINTSTS_RXFLVL
);

543 
	`HCD_RXQLVL_IRQH™dÀr
 (
hhcd
);

545 
	`USB_UNMASK_INTERRUPT
(
hhcd
->
In°™˚
, 
USB_OTG_GINTSTS_RXFLVL
);

548 
	}
}

555 
__wók
 
	$HAL_HCD_SOF_CÆlback
(
HCD_H™dÀTy≥Def
 *
hhcd
)

560 
	}
}

567 
__wók
 
	$HAL_HCD_C⁄√˘_CÆlback
(
HCD_H™dÀTy≥Def
 *
hhcd
)

572 
	}
}

579 
__wók
 
	$HAL_HCD_Disc⁄√˘_CÆlback
(
HCD_H™dÀTy≥Def
 *
hhcd
)

584 
	}
}

601 
__wók
 
	$HAL_HCD_HC_NŸifyURBCh™ge_CÆlback
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
, 
HCD_URBSèãTy≥Def
 
urb_°©e
)

606 
	}
}

632 
HAL_SètusTy≥Def
 
	$HAL_HCD_Sèπ
(
HCD_H™dÀTy≥Def
 *
hhcd
)

634 
	`__HAL_LOCK
(
hhcd
);

635 
	`__HAL_HCD_ENABLE
(
hhcd
);

636 
	`USB_DriveVbus
(
hhcd
->
In°™˚
, 1);

637 
	`__HAL_UNLOCK
(
hhcd
);

638  
HAL_OK
;

639 
	}
}

647 
HAL_SètusTy≥Def
 
	$HAL_HCD_St›
(
HCD_H™dÀTy≥Def
 *
hhcd
)

649 
	`__HAL_LOCK
(
hhcd
);

650 
	`USB_St›Ho°
(
hhcd
->
In°™˚
);

651 
	`__HAL_UNLOCK
(
hhcd
);

652  
HAL_OK
;

653 
	}
}

660 
HAL_SètusTy≥Def
 
	$HAL_HCD_Re£tP‹t
(
HCD_H™dÀTy≥Def
 *
hhcd
)

662  (
	`USB_Re£tP‹t
(
hhcd
->
In°™˚
));

663 
	}
}

689 
HCD_SèãTy≥Def
 
	$HAL_HCD_GëSèã
(
HCD_H™dÀTy≥Def
 *
hhcd
)

691  
hhcd
->
Sèã
;

692 
	}
}

708 
HCD_URBSèãTy≥Def
 
	$HAL_HCD_HC_GëURBSèã
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
)

710  
hhcd
->
hc
[
chnum
].
urb_°©e
;

711 
	}
}

721 
uöt32_t
 
	$HAL_HCD_HC_GëX„rCou¡
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
)

723  
hhcd
->
hc
[
chnum
].
x„r_cou¡
;

724 
	}
}

743 
HCD_HCSèãTy≥Def
 
	$HAL_HCD_HC_GëSèã
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
)

745  
hhcd
->
hc
[
chnum
].
°©e
;

746 
	}
}

753 
uöt32_t
 
	$HAL_HCD_GëCuºítFøme
(
HCD_H™dÀTy≥Def
 *
hhcd
)

755  (
	`USB_GëCuºítFøme
(
hhcd
->
In°™˚
));

756 
	}
}

763 
uöt32_t
 
	$HAL_HCD_GëCuºítS≥ed
(
HCD_H™dÀTy≥Def
 *
hhcd
)

765  (
	`USB_GëHo°S≥ed
(
hhcd
->
In°™˚
));

766 
	}
}

786 
	$HCD_HC_IN_IRQH™dÀr
(
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
)

788 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hhcd
->
In°™˚
;

789 
uöt32_t
 
tm¥eg
 = 0;

791 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_AHBERR
)

793 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_AHBERR
);

794 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

796 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_ACK
)

798 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_ACK
);

801 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_STALL
)

803 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

804 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_STALL
;

805 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_NAK
);

806 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_STALL
);

807 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

809 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_DTERR
)

811 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

812 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

813 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_NAK
);

814 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_DATATGLERR
;

815 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_DTERR
);

818 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_FRMOR
)

820 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

821 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

822 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_FRMOR
);

825 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_XFRC
)

828 i‡(
hhcd
->
Inô
.
dma_íabÀ
)

830 
hhcd
->
hc
[
chnum
].
x„r_cou¡
 = hhcd->hc[chnum].
x„r_Àn
 - \

831 (
	`USBx_HC
(
chnum
)->
HCTSIZ
 & 
USB_OTG_HCTSIZ_XFRSIZ
);

834 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_XFRC
;

835 
hhcd
->
hc
[
chnum
].
EºC¡
 = 0;

836 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_XFRC
);

839 i‡((
hhcd
->
hc
[
chnum
].
ï_ty≥
 =
EP_TYPE_CTRL
)||

840 (
hhcd
->
hc
[
chnum
].
ï_ty≥
 =
EP_TYPE_BULK
))

842 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

843 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

844 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_NAK
);

847 if(
hhcd
->
hc
[
chnum
].
ï_ty≥
 =
EP_TYPE_INTR
)

849 
	`USBx_HC
(
chnum
)->
HCCHAR
 |
USB_OTG_HCCHAR_ODDFRM
;

850 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_DONE
;

851 
	`HAL_HCD_HC_NŸifyURBCh™ge_CÆlback
(
hhcd
, 
chnum
, hhcd->
hc
[chnum].
urb_°©e
);

853 
hhcd
->
hc
[
chnum
].
toggÀ_ö
 ^= 1;

856 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_CHH
)

858 
	`__HAL_HCD_MASK_HALT_HC_INT
(
chnum
);

860 if(
hhcd
->
hc
[
chnum
].
°©e
 =
HC_XFRC
)

862 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_DONE
;

865 i‡(
hhcd
->
hc
[
chnum
].
°©e
 =
HC_STALL
)

867 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_STALL
;

870 if((
hhcd
->
hc
[
chnum
].
°©e
 =
HC_XACTERR
) ||

871 (
hhcd
->
hc
[
chnum
].
°©e
 =
HC_DATATGLERR
))

873 if(
hhcd
->
hc
[
chnum
].
EºC¡
++ > 3)

875 
hhcd
->
hc
[
chnum
].
EºC¡
 = 0;

876 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_ERROR
;

880 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_NOTREADY
;

884 
tm¥eg
 = 
	`USBx_HC
(
chnum
)->
HCCHAR
;

885 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

886 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

887 
	`USBx_HC
(
chnum
)->
HCCHAR
 = 
tm¥eg
;

889 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_CHH
);

890 
	`HAL_HCD_HC_NŸifyURBCh™ge_CÆlback
(
hhcd
, 
chnum
, hhcd->
hc
[chnum].
urb_°©e
);

893 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_TXERR
)

895 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

896 
hhcd
->
hc
[
chnum
].
EºC¡
++;

897 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_XACTERR
;

898 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

899 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_TXERR
);

901 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_NAK
)

903 if(
hhcd
->
hc
[
chnum
].
ï_ty≥
 =
EP_TYPE_INTR
)

905 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

906 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

908 i‡((
hhcd
->
hc
[
chnum
].
ï_ty≥
 =
EP_TYPE_CTRL
)||

909 (
hhcd
->
hc
[
chnum
].
ï_ty≥
 =
EP_TYPE_BULK
))

912 
tm¥eg
 = 
	`USBx_HC
(
chnum
)->
HCCHAR
;

913 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

914 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

915 
	`USBx_HC
(
chnum
)->
HCCHAR
 = 
tm¥eg
;

917 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_NAK
;

918 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_NAK
);

920 
	}
}

929 
	$HCD_HC_OUT_IRQH™dÀr
 (
HCD_H™dÀTy≥Def
 *
hhcd
, 
uöt8_t
 
chnum
)

931 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hhcd
->
In°™˚
;

932 
uöt32_t
 
tm¥eg
 = 0;

934 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_AHBERR
)

936 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_AHBERR
);

937 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

939 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_ACK
)

941 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_ACK
);

943 if–
hhcd
->
hc
[
chnum
].
do_pög
 == 1)

945 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_NYET
;

946 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

947 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

948 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_NOTREADY
;

952 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_NYET
)

954 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_NYET
;

955 
hhcd
->
hc
[
chnum
].
EºC¡
= 0;

956 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

957 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

958 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_NYET
);

962 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_FRMOR
)

964 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

965 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

966 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_FRMOR
);

969 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_XFRC
)

971 
hhcd
->
hc
[
chnum
].
EºC¡
 = 0;

972 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

973 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

974 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_XFRC
);

975 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_XFRC
;

979 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_STALL
)

981 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_STALL
);

982 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

983 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

984 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_STALL
;

987 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_NAK
)

989 
hhcd
->
hc
[
chnum
].
EºC¡
 = 0;

990 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

991 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

992 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_NAK
;

993 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_NAK
);

996 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_TXERR
)

998 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

999 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

1000 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_XACTERR
;

1001 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_TXERR
);

1004 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_DTERR
)

1006 
	`__HAL_HCD_UNMASK_HALT_HC_INT
(
chnum
);

1007 
	`USB_HC_HÆt
(
hhcd
->
In°™˚
, 
chnum
);

1008 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_NAK
);

1009 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_DTERR
);

1010 
hhcd
->
hc
[
chnum
].
°©e
 = 
HC_DATATGLERR
;

1014 i‡((
	`USBx_HC
(
chnum
)->
HCINT
Ë& 
USB_OTG_HCINT_CHH
)

1016 
	`__HAL_HCD_MASK_HALT_HC_INT
(
chnum
);

1018 if(
hhcd
->
hc
[
chnum
].
°©e
 =
HC_XFRC
)

1020 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_DONE
;

1021 i‡(
hhcd
->
hc
[
chnum
].
ï_ty≥
 =
EP_TYPE_BULK
)

1023 
hhcd
->
hc
[
chnum
].
toggÀ_out
 ^= 1;

1026 i‡(
hhcd
->
hc
[
chnum
].
°©e
 =
HC_NAK
)

1028 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_NOTREADY
;

1031 i‡(
hhcd
->
hc
[
chnum
].
°©e
 =
HC_NYET
)

1033 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_NOTREADY
;

1034 
hhcd
->
hc
[
chnum
].
do_pög
 = 0;

1037 i‡(
hhcd
->
hc
[
chnum
].
°©e
 =
HC_STALL
)

1039 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_STALL
;

1042 if((
hhcd
->
hc
[
chnum
].
°©e
 =
HC_XACTERR
) ||

1043 (
hhcd
->
hc
[
chnum
].
°©e
 =
HC_DATATGLERR
))

1045 if(
hhcd
->
hc
[
chnum
].
EºC¡
++ > 3)

1047 
hhcd
->
hc
[
chnum
].
EºC¡
 = 0;

1048 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_ERROR
;

1052 
hhcd
->
hc
[
chnum
].
urb_°©e
 = 
URB_NOTREADY
;

1056 
tm¥eg
 = 
	`USBx_HC
(
chnum
)->
HCCHAR
;

1057 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

1058 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

1059 
	`USBx_HC
(
chnum
)->
HCCHAR
 = 
tm¥eg
;

1062 
	`__HAL_HCD_CLEAR_HC_INT
(
chnum
, 
USB_OTG_HCINT_CHH
);

1063 
	`HAL_HCD_HC_NŸifyURBCh™ge_CÆlback
(
hhcd
, 
chnum
, hhcd->
hc
[chnum].
urb_°©e
);

1065 
	}
}

1072 
	$HCD_RXQLVL_IRQH™dÀr
(
HCD_H™dÀTy≥Def
 *
hhcd
)

1074 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hhcd
->
In°™˚
;

1075 
uöt8_t
 
ch™√ um
 = 0;

1076 
uöt32_t
 
pkt°s
;

1077 
uöt32_t
 
pkt˙t
;

1078 
uöt32_t
 
ãmp
 = 0;

1079 
uöt32_t
 
tm¥eg
 = 0;

1081 
ãmp
 = 
hhcd
->
In°™˚
->
GRXSTSP
;

1082 
ch™√ um
 = 
ãmp
 & 
USB_OTG_GRXSTSP_EPNUM
;

1083 
pkt°s
 = (
ãmp
 & 
USB_OTG_GRXSTSP_PKTSTS
) >> 17;

1084 
pkt˙t
 = (
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

1086 
pkt°s
)

1088 
GRXSTS_PKTSTS_IN
:

1090 i‡((
pkt˙t
 > 0Ë&& (
hhcd
->
hc
[
ch™√ um
].
x„r_buff
 != (*)0))

1093 
	`USB_RódPackë
(
hhcd
->
In°™˚
, hhcd->
hc
[
ch™√ um
].
x„r_buff
, 
pkt˙t
);

1096 
hhcd
->
hc
[
ch™√ um
].
x„r_buff
 +
pkt˙t
;

1097 
hhcd
->
hc
[
ch™√ um
].
x„r_cou¡
 +
pkt˙t
;

1099 if((
	`USBx_HC
(
ch™√ um
)->
HCTSIZ
 & 
USB_OTG_HCTSIZ_PKTCNT
) > 0)

1102 
tm¥eg
 = 
	`USBx_HC
(
ch™√ um
)->
HCCHAR
;

1103 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

1104 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

1105 
	`USBx_HC
(
ch™√ um
)->
HCCHAR
 = 
tm¥eg
;

1106 
hhcd
->
hc
[
ch™√ um
].
toggÀ_ö
 ^= 1;

1111 
GRXSTS_PKTSTS_DATA_TOGGLE_ERR
:

1113 
GRXSTS_PKTSTS_IN_XFER_COMP
:

1114 
GRXSTS_PKTSTS_CH_HALTED
:

1118 
	}
}

1125 
	$HCD_P‹t_IRQH™dÀr
 (
HCD_H™dÀTy≥Def
 *
hhcd
)

1127 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hhcd
->
In°™˚
;

1128 
__IO
 
uöt32_t
 
h¥t0
, 
h¥t0_dup
;

1131 
h¥t0
 = 
USBx_HPRT0
;

1132 
h¥t0_dup
 = 
USBx_HPRT0
;

1134 
h¥t0_dup
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |\

1135 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
 );

1138 if((
h¥t0
 & 
USB_OTG_HPRT_PCDET
) == USB_OTG_HPRT_PCDET)

1140 if((
h¥t0
 & 
USB_OTG_HPRT_PCSTS
) == USB_OTG_HPRT_PCSTS)

1142 
	`USB_MASK_INTERRUPT
(
hhcd
->
In°™˚
, 
USB_OTG_GINTSTS_DISCINT
);

1143 
	`HAL_HCD_C⁄√˘_CÆlback
(
hhcd
);

1145 
h¥t0_dup
 |
USB_OTG_HPRT_PCDET
;

1150 if((
h¥t0
 & 
USB_OTG_HPRT_PENCHNG
) == USB_OTG_HPRT_PENCHNG)

1152 
h¥t0_dup
 |
USB_OTG_HPRT_PENCHNG
;

1154 if((
h¥t0
 & 
USB_OTG_HPRT_PENA
) == USB_OTG_HPRT_PENA)

1156 if(
hhcd
->
Inô
.
phy_ôÁ˚
 =
USB_OTG_EMBEDDED_PHY
)

1158 i‡((
h¥t0
 & 
USB_OTG_HPRT_PSPD
Ë=(
HPRT0_PRTSPD_LOW_SPEED
 << 17))

1160 
	`USB_InôFSLSPClkSñ
(
hhcd
->
In°™˚
 ,
HCFG_6_MHZ
 );

1164 
	`USB_InôFSLSPClkSñ
(
hhcd
->
In°™˚
 ,
HCFG_48_MHZ
 );

1169 if(
hhcd
->
Inô
.
•ìd
 =
HCD_SPEED_FULL
)

1171 
USBx_HOST
->
HFIR
 = (
uöt32_t
)60000;

1174 
	`HAL_HCD_C⁄√˘_CÆlback
(
hhcd
);

1176 if(
hhcd
->
Inô
.
•ìd
 =
HCD_SPEED_HIGH
)

1178 
	`USB_UNMASK_INTERRUPT
(
hhcd
->
In°™˚
, 
USB_OTG_GINTSTS_DISCINT
);

1184 
USBx_HPRT0
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |\

1185 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
 );

1187 
	`USB_UNMASK_INTERRUPT
(
hhcd
->
In°™˚
, 
USB_OTG_GINTSTS_DISCINT
);

1192 if((
h¥t0
 & 
USB_OTG_HPRT_POCCHNG
) == USB_OTG_HPRT_POCCHNG)

1194 
h¥t0_dup
 |
USB_OTG_HPRT_POCCHNG
;

1198 
USBx_HPRT0
 = 
h¥t0_dup
;

1199 
	}
}

1205 
	gSTM32F401xC
 || 
	gSTM32F401xE
 || 
	gSTM32F411xE
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_i2c.c

184 
	~"°m32f4xx_hÆ.h
"

195 #ifde‡
HAL_I2C_MODULE_ENABLED


202 
	#I2C_TIMEOUT_FLAG
 ((
uöt32_t
)35Ë

	)

203 
	#I2C_TIMEOUT_ADDR_SLAVE
 ((
uöt32_t
)10000Ë

	)

204 
	#I2C_TIMEOUT_BUSY_FLAG
 ((
uöt32_t
)10000Ë

	)

215 
I2C_DMAMa°îTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

216 
I2C_DMAMa°îRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

217 
I2C_DMASœveTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

218 
I2C_DMASœveRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

219 
I2C_DMAMemTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

220 
I2C_DMAMemRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

221 
I2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

223 
HAL_SètusTy≥Def
 
I2C_Ma°îReque°Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
);

224 
HAL_SètusTy≥Def
 
I2C_Ma°îReque°Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
);

225 
HAL_SètusTy≥Def
 
I2C_Reque°Mem‹yWrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
);

226 
HAL_SètusTy≥Def
 
I2C_Reque°Mem‹yRód
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
);

227 
HAL_SètusTy≥Def
 
I2C_WaôOnFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

228 
HAL_SètusTy≥Def
 
I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, uöt32_à
Timeout
);

230 
HAL_SètusTy≥Def
 
I2C_Ma°îTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

231 
HAL_SètusTy≥Def
 
I2C_Ma°îTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

232 
HAL_SètusTy≥Def
 
I2C_Ma°îRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

233 
HAL_SètusTy≥Def
 
I2C_Ma°îRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

235 
HAL_SètusTy≥Def
 
I2C_SœveTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

236 
HAL_SètusTy≥Def
 
I2C_SœveTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

237 
HAL_SètusTy≥Def
 
I2C_SœveRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
);

238 
HAL_SètusTy≥Def
 
I2C_SœveRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

239 
HAL_SètusTy≥Def
 
I2C_Sœve_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
);

240 
HAL_SètusTy≥Def
 
I2C_Sœve_STOPF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

241 
HAL_SètusTy≥Def
 
I2C_Sœve_AF
(
I2C_H™dÀTy≥Def
 *
hi2c
);

289 
HAL_SètusTy≥Def
 
	$HAL_I2C_Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

291 
uöt32_t
 
‰eqønge
 = 0;

292 
uöt32_t
 
p˛k1
 = 0;

295 if(
hi2c
 =
NULL
)

297  
HAL_ERROR
;

301 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

302 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
hi2c
->
Inô
.
ClockS≥ed
));

303 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
hi2c
->
Inô
.
DutyCy˛e
));

304 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
hi2c
->
Inô
.
OwnAddªss1
));

305 
	`as£π_∑øm
(
	`IS_I2C_ADDRESSING_MODE
(
hi2c
->
Inô
.
AddªssögMode
));

306 
	`as£π_∑øm
(
	`IS_I2C_DUAL_ADDRESS
(
hi2c
->
Inô
.
DuÆAddªssMode
));

307 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS2
(
hi2c
->
Inô
.
OwnAddªss2
));

308 
	`as£π_∑øm
(
	`IS_I2C_GENERAL_CALL
(
hi2c
->
Inô
.
GíîÆCÆlMode
));

309 
	`as£π_∑øm
(
	`IS_I2C_NO_STRETCH
(
hi2c
->
Inô
.
NoSåëchMode
));

311 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_RESET
)

314 
hi2c
->
Lock
 = 
HAL_UNLOCKED
;

316 
	`HAL_I2C_M•Inô
(
hi2c
);

319 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

322 
	`__HAL_I2C_DISABLE
(
hi2c
);

325 
p˛k1
 = 
	`HAL_RCC_GëPCLK1Fªq
();

328 
‰eqønge
 = 
	`I2C_FREQRANGE
(
p˛k1
);

332 
hi2c
->
In°™˚
->
CR2
 = 
‰eqønge
;

336 
hi2c
->
In°™˚
->
TRISE
 = 
	`I2C_RISE_TIME
(
‰eqønge
, hi2c->
Inô
.
ClockS≥ed
);

340 
hi2c
->
In°™˚
->
CCR
 = 
	`I2C_SPEED
(
p˛k1
, hi2c->
Inô
.
ClockS≥ed
, hi2c->Inô.
DutyCy˛e
);

344 
hi2c
->
In°™˚
->
CR1
 = (hi2c->
Inô
.
GíîÆCÆlMode
 | hi2c->Inô.
NoSåëchMode
);

348 
hi2c
->
In°™˚
->
OAR1
 = (hi2c->
Inô
.
AddªssögMode
 | hi2c->Inô.
OwnAddªss1
);

352 
hi2c
->
In°™˚
->
OAR2
 = (hi2c->
Inô
.
DuÆAddªssMode
 | hi2c->Inô.
OwnAddªss2
);

355 
	`__HAL_I2C_ENABLE
(
hi2c
);

357 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

358 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

360  
HAL_OK
;

361 
	}
}

369 
HAL_SètusTy≥Def
 
	$HAL_I2C_DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

372 if(
hi2c
 =
NULL
)

374  
HAL_ERROR
;

378 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

380 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

383 
	`__HAL_I2C_DISABLE
(
hi2c
);

386 
	`HAL_I2C_M•DeInô
(
hi2c
);

388 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

390 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_RESET
;

393 
	`__HAL_UNLOCK
(
hi2c
);

395  
HAL_OK
;

396 
	}
}

404 
__wók
 
	$HAL_I2C_M•Inô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

409 
	}
}

417 
__wók
 
	$HAL_I2C_M•DeInô
(
I2C_H™dÀTy≥Def
 *
hi2c
)

422 
	}
}

497 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

499 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

501 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

503  
HAL_ERROR
;

507 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

509  
HAL_BUSY
;

513 
	`__HAL_LOCK
(
hi2c
);

516 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

518 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

519 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

522 if(
	`I2C_Ma°îReque°Wrôe
(
hi2c
, 
DevAddªss
, 
Timeout
Ë!
HAL_OK
)

524 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

527 
	`__HAL_UNLOCK
(
hi2c
);

528  
HAL_ERROR
;

533 
	`__HAL_UNLOCK
(
hi2c
);

534  
HAL_TIMEOUT
;

539 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

541 
Size
 > 0)

544 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

546  
HAL_TIMEOUT
;

550 
hi2c
->
In°™˚
->
DR
 = (*
pD©a
++);

551 
Size
--;

553 if((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (
Size
 != 0))

556 
hi2c
->
In°™˚
->
DR
 = (*
pD©a
++);

557 
Size
--;

562 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

564  
HAL_TIMEOUT
;

568 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

570 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

573 
	`__HAL_UNLOCK
(
hi2c
);

575  
HAL_OK
;

579  
HAL_BUSY
;

581 
	}
}

593 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

595 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

597 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

599  
HAL_ERROR
;

603 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

605  
HAL_BUSY
;

609 
	`__HAL_LOCK
(
hi2c
);

612 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

614 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

615 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

618 if(
	`I2C_Ma°îReque°Ród
(
hi2c
, 
DevAddªss
, 
Timeout
Ë!
HAL_OK
)

620 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

623 
	`__HAL_UNLOCK
(
hi2c
);

624  
HAL_ERROR
;

629 
	`__HAL_UNLOCK
(
hi2c
);

630  
HAL_TIMEOUT
;

634 if(
Size
 == 1)

637 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

640 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

643 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

645 if(
Size
 == 2)

648 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

651 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_POS
;

654 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

659 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

662 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

665 
Size
 > 0)

667 if(
Size
 <= 3)

670 if(
Size
 == 1)

673 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

675  
HAL_TIMEOUT
;

679 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

680 
Size
--;

683 if(
Size
 == 2)

686 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

688  
HAL_TIMEOUT
;

692 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

695 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

696 
Size
--;

699 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

700 
Size
--;

706 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

708  
HAL_TIMEOUT
;

712 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

715 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

716 
Size
--;

719 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

721  
HAL_TIMEOUT
;

725 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

728 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

729 
Size
--;

732 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

733 
Size
--;

739 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

741  
HAL_TIMEOUT
;

745 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

746 
Size
--;

748 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
)

751 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

752 
Size
--;

757 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

760 
	`__HAL_UNLOCK
(
hi2c
);

762  
HAL_OK
;

766  
HAL_BUSY
;

768 
	}
}

779 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

781 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

783 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

785  
HAL_ERROR
;

789 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

791  
HAL_BUSY
;

795 
	`__HAL_LOCK
(
hi2c
);

798 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

800 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

801 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

804 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

807 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

809  
HAL_TIMEOUT
;

813 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

816 if(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_10BIT
)

819 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

821  
HAL_TIMEOUT
;

825 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

828 
Size
 > 0)

831 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

833  
HAL_TIMEOUT
;

837 
hi2c
->
In°™˚
->
DR
 = (*
pD©a
++);

838 
Size
--;

840 if((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (
Size
 != 0))

843 
hi2c
->
In°™˚
->
DR
 = (*
pD©a
++);

844 
Size
--;

849 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_AF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

851  
HAL_TIMEOUT
;

855 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

858 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

860 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

863 
	`__HAL_UNLOCK
(
hi2c
);

865  
HAL_OK
;

869  
HAL_BUSY
;

871 
	}
}

882 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

884 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

886 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

888  
HAL_ERROR
;

892 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

894  
HAL_BUSY
;

898 
	`__HAL_LOCK
(
hi2c
);

901 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

903 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

904 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

907 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

910 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

912  
HAL_TIMEOUT
;

916 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

918 
Size
 > 0)

921 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

923  
HAL_TIMEOUT
;

927 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

928 
Size
--;

930 if((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (
Size
 != 0))

933 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

934 
Size
--;

939 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_STOPF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

941  
HAL_TIMEOUT
;

945 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

948 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

950 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

953 
	`__HAL_UNLOCK
(
hi2c
);

955  
HAL_OK
;

959  
HAL_BUSY
;

961 
	}
}

972 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

974 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

976 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

978  
HAL_ERROR
;

982 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

984  
HAL_BUSY
;

988 
	`__HAL_LOCK
(
hi2c
);

991 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

993 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

994 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

996 
hi2c
->
pBuffPå
 = 
pD©a
;

997 
hi2c
->
X„rSize
 = 
Size
;

998 
hi2c
->
X„rCou¡
 = 
Size
;

1001 if(
	`I2C_Ma°îReque°Wrôe
(
hi2c
, 
DevAddªss
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

1003 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1006 
	`__HAL_UNLOCK
(
hi2c
);

1007  
HAL_ERROR
;

1012 
	`__HAL_UNLOCK
(
hi2c
);

1013  
HAL_TIMEOUT
;

1018 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1021 
	`__HAL_UNLOCK
(
hi2c
);

1028 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1030  
HAL_OK
;

1034  
HAL_BUSY
;

1036 
	}
}

1047 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1049 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1051 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1053  
HAL_ERROR
;

1057 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1059  
HAL_BUSY
;

1063 
	`__HAL_LOCK
(
hi2c
);

1066 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1068 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1069 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1071 
hi2c
->
pBuffPå
 = 
pD©a
;

1072 
hi2c
->
X„rSize
 = 
Size
;

1073 
hi2c
->
X„rCou¡
 = 
Size
;

1076 if(
	`I2C_Ma°îReque°Ród
(
hi2c
, 
DevAddªss
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

1078 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1081 
	`__HAL_UNLOCK
(
hi2c
);

1082  
HAL_ERROR
;

1087 
	`__HAL_UNLOCK
(
hi2c
);

1088  
HAL_TIMEOUT
;

1092 if(
hi2c
->
X„rCou¡
 == 1)

1095 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

1098 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1101 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

1103 if(
hi2c
->
X„rCou¡
 == 2)

1106 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

1109 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_POS
;

1112 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1117 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

1120 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1124 
	`__HAL_UNLOCK
(
hi2c
);

1131 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1133  
HAL_OK
;

1137  
HAL_BUSY
;

1139 
	}
}

1149 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1151 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1153 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1155  
HAL_ERROR
;

1159 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1161  
HAL_BUSY
;

1165 
	`__HAL_LOCK
(
hi2c
);

1168 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1170 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1171 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1173 
hi2c
->
pBuffPå
 = 
pD©a
;

1174 
hi2c
->
X„rSize
 = 
Size
;

1175 
hi2c
->
X„rCou¡
 = 
Size
;

1178 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

1181 
	`__HAL_UNLOCK
(
hi2c
);

1188 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1190  
HAL_OK
;

1194  
HAL_BUSY
;

1196 
	}
}

1206 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1208 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1210 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1212  
HAL_ERROR
;

1216 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1218  
HAL_BUSY
;

1222 
	`__HAL_LOCK
(
hi2c
);

1225 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1227 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1228 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1230 
hi2c
->
pBuffPå
 = 
pD©a
;

1231 
hi2c
->
X„rSize
 = 
Size
;

1232 
hi2c
->
X„rCou¡
 = 
Size
;

1235 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

1238 
	`__HAL_UNLOCK
(
hi2c
);

1245 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1247  
HAL_OK
;

1251  
HAL_BUSY
;

1253 
	}
}

1264 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1266 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1268 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1270  
HAL_ERROR
;

1274 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1276  
HAL_BUSY
;

1280 
	`__HAL_LOCK
(
hi2c
);

1283 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1285 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1286 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1288 
hi2c
->
pBuffPå
 = 
pD©a
;

1289 
hi2c
->
X„rSize
 = 
Size
;

1290 
hi2c
->
X„rCou¡
 = 
Size
;

1293 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAMa°îTønsmôC∂t
;

1296 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1299 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hi2c->
In°™˚
->
DR
, 
Size
);

1302 if(
	`I2C_Ma°îReque°Wrôe
(
hi2c
, 
DevAddªss
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

1304 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1307 
	`__HAL_UNLOCK
(
hi2c
);

1308  
HAL_ERROR
;

1313 
	`__HAL_UNLOCK
(
hi2c
);

1314  
HAL_TIMEOUT
;

1319 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

1322 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1325 
	`__HAL_UNLOCK
(
hi2c
);

1327  
HAL_OK
;

1331  
HAL_BUSY
;

1333 
	}
}

1344 
HAL_SètusTy≥Def
 
	$HAL_I2C_Ma°î_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1346 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1348 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1350  
HAL_ERROR
;

1354 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1356  
HAL_BUSY
;

1360 
	`__HAL_LOCK
(
hi2c
);

1363 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1365 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1366 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1368 
hi2c
->
pBuffPå
 = 
pD©a
;

1369 
hi2c
->
X„rSize
 = 
Size
;

1370 
hi2c
->
X„rCou¡
 = 
Size
;

1373 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAMa°îRe˚iveC∂t
;

1376 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1379 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)
pD©a
, 
Size
);

1382 if(
	`I2C_Ma°îReque°Ród
(
hi2c
, 
DevAddªss
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

1384 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1387 
	`__HAL_UNLOCK
(
hi2c
);

1388  
HAL_ERROR
;

1393 
	`__HAL_UNLOCK
(
hi2c
);

1394  
HAL_TIMEOUT
;

1398 if(
Size
 == 1)

1401 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

1406 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_LAST
;

1410 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

1413 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1416 
	`__HAL_UNLOCK
(
hi2c
);

1418  
HAL_OK
;

1422  
HAL_BUSY
;

1424 
	}
}

1434 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Tønsmô_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1436 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1438 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1440  
HAL_ERROR
;

1444 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1446  
HAL_BUSY
;

1450 
	`__HAL_LOCK
(
hi2c
);

1453 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1455 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_TX
;

1456 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1458 
hi2c
->
pBuffPå
 = 
pD©a
;

1459 
hi2c
->
X„rSize
 = 
Size
;

1460 
hi2c
->
X„rCou¡
 = 
Size
;

1463 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMASœveTønsmôC∂t
;

1466 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1469 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hi2c->
In°™˚
->
DR
, 
Size
);

1472 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

1475 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

1478 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
I2C_TIMEOUT_ADDR_SLAVE
Ë!
HAL_OK
)

1480  
HAL_TIMEOUT
;

1484 if(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

1487 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1492 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1495 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
I2C_TIMEOUT_ADDR_SLAVE
Ë!
HAL_OK
)

1497  
HAL_TIMEOUT
;

1501 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1505 
	`__HAL_UNLOCK
(
hi2c
);

1507  
HAL_OK
;

1511  
HAL_BUSY
;

1513 
	}
}

1523 
HAL_SètusTy≥Def
 
	$HAL_I2C_Sœve_Re˚ive_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1525 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1527 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1529  
HAL_ERROR
;

1533 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1535  
HAL_BUSY
;

1539 
	`__HAL_LOCK
(
hi2c
);

1542 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1544 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY_RX
;

1545 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1547 
hi2c
->
pBuffPå
 = 
pD©a
;

1548 
hi2c
->
X„rSize
 = 
Size
;

1549 
hi2c
->
X„rCou¡
 = 
Size
;

1552 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMASœveRe˚iveC∂t
;

1555 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

1558 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)
pD©a
, 
Size
);

1561 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

1564 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

1567 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
RESET
, 
I2C_TIMEOUT_ADDR_SLAVE
Ë!
HAL_OK
)

1569  
HAL_TIMEOUT
;

1573 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1576 
	`__HAL_UNLOCK
(
hi2c
);

1578  
HAL_OK
;

1582  
HAL_BUSY
;

1584 
	}
}

1597 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

1600 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

1602 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1604 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1606  
HAL_ERROR
;

1610 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1612  
HAL_BUSY
;

1616 
	`__HAL_LOCK
(
hi2c
);

1619 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1621 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_MEM_BUSY_TX
;

1622 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1625 if(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
Ë!
HAL_OK
)

1627 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1630 
	`__HAL_UNLOCK
(
hi2c
);

1631  
HAL_ERROR
;

1636 
	`__HAL_UNLOCK
(
hi2c
);

1637  
HAL_TIMEOUT
;

1641 
Size
 > 0)

1644 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1646  
HAL_TIMEOUT
;

1650 
hi2c
->
In°™˚
->
DR
 = (*
pD©a
++);

1651 
Size
--;

1653 if((
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
Ë&& (
Size
 != 0))

1656 
hi2c
->
In°™˚
->
DR
 = (*
pD©a
++);

1657 
Size
--;

1662 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1664  
HAL_TIMEOUT
;

1668 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

1670 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1673 
	`__HAL_UNLOCK
(
hi2c
);

1675  
HAL_OK
;

1679  
HAL_BUSY
;

1681 
	}
}

1695 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

1698 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

1700 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1702 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1704  
HAL_ERROR
;

1708 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1710  
HAL_BUSY
;

1714 
	`__HAL_LOCK
(
hi2c
);

1717 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1719 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_MEM_BUSY_RX
;

1720 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1723 if(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
Timeout
Ë!
HAL_OK
)

1725 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1728 
	`__HAL_UNLOCK
(
hi2c
);

1729  
HAL_ERROR
;

1734 
	`__HAL_UNLOCK
(
hi2c
);

1735  
HAL_TIMEOUT
;

1739 if(
Size
 == 1)

1742 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

1745 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1748 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

1750 if(
Size
 == 2)

1753 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

1756 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_POS
;

1759 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1764 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

1767 
Size
 > 0)

1769 if(
Size
 <= 3)

1772 if(
Size
== 1)

1775 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1777  
HAL_TIMEOUT
;

1781 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

1782 
Size
--;

1785 if(
Size
 == 2)

1788 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1790  
HAL_TIMEOUT
;

1794 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

1797 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

1798 
Size
--;

1801 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

1802 
Size
--;

1808 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1810  
HAL_TIMEOUT
;

1814 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

1817 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

1818 
Size
--;

1821 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1823  
HAL_TIMEOUT
;

1827 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

1830 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

1831 
Size
--;

1834 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

1835 
Size
--;

1841 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

1843  
HAL_TIMEOUT
;

1847 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

1848 
Size
--;

1850 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
Ë=
SET
)

1853 (*
pD©a
++Ë
hi2c
->
In°™˚
->
DR
;

1854 
Size
--;

1859 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

1862 
	`__HAL_UNLOCK
(
hi2c
);

1864  
HAL_OK
;

1868  
HAL_BUSY
;

1870 
	}
}

1882 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1885 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

1887 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1889 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1891  
HAL_ERROR
;

1895 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1897  
HAL_BUSY
;

1901 
	`__HAL_LOCK
(
hi2c
);

1904 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1906 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_MEM_BUSY_TX
;

1907 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1909 
hi2c
->
pBuffPå
 = 
pD©a
;

1910 
hi2c
->
X„rSize
 = 
Size
;

1911 
hi2c
->
X„rCou¡
 = 
Size
;

1914 if(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

1916 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1919 
	`__HAL_UNLOCK
(
hi2c
);

1920  
HAL_ERROR
;

1925 
	`__HAL_UNLOCK
(
hi2c
);

1926  
HAL_TIMEOUT
;

1931 
	`__HAL_UNLOCK
(
hi2c
);

1938 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

1940  
HAL_OK
;

1944  
HAL_BUSY
;

1946 
	}
}

1959 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród_IT
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

1962 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

1964 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

1966 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1968  
HAL_ERROR
;

1972 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

1974  
HAL_BUSY
;

1978 
	`__HAL_LOCK
(
hi2c
);

1981 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

1983 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_MEM_BUSY_RX
;

1984 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

1986 
hi2c
->
pBuffPå
 = 
pD©a
;

1987 
hi2c
->
X„rSize
 = 
Size
;

1988 
hi2c
->
X„rCou¡
 = 
Size
;

1991 if(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

1993 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

1996 
	`__HAL_UNLOCK
(
hi2c
);

1997  
HAL_ERROR
;

2002 
	`__HAL_UNLOCK
(
hi2c
);

2003  
HAL_TIMEOUT
;

2007 if(
hi2c
->
X„rCou¡
 == 1)

2010 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

2013 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2016 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

2018 if(
hi2c
->
X„rCou¡
 == 2)

2021 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

2024 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_POS
;

2027 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2032 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

2035 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2039 
	`__HAL_UNLOCK
(
hi2c
);

2046 
	`__HAL_I2C_ENABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2048  
HAL_OK
;

2052  
HAL_BUSY
;

2054 
	}
}

2066 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Wrôe_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2069 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2071 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2073 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

2075  
HAL_ERROR
;

2079 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

2081  
HAL_BUSY
;

2085 
	`__HAL_LOCK
(
hi2c
);

2088 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

2090 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_MEM_BUSY_TX
;

2091 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2093 
hi2c
->
pBuffPå
 = 
pD©a
;

2094 
hi2c
->
X„rSize
 = 
Size
;

2095 
hi2c
->
X„rCou¡
 = 
Size
;

2098 
hi2c
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2C_DMAMemTønsmôC∂t
;

2101 
hi2c
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2104 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm©x
, (
uöt32_t
)
pD©a
, (uöt32_t)&hi2c->
In°™˚
->
DR
, 
Size
);

2107 if(
	`I2C_Reque°Mem‹yWrôe
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

2109 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2112 
	`__HAL_UNLOCK
(
hi2c
);

2113  
HAL_ERROR
;

2118 
	`__HAL_UNLOCK
(
hi2c
);

2119  
HAL_TIMEOUT
;

2124 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

2127 
	`__HAL_UNLOCK
(
hi2c
);

2129  
HAL_OK
;

2133  
HAL_BUSY
;

2135 
	}
}

2148 
HAL_SètusTy≥Def
 
	$HAL_I2C_Mem_Ród_DMA
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt8_t
 *
pD©a
, uöt16_à
Size
)

2151 
	`as£π_∑øm
(
	`IS_I2C_MEMADD_SIZE
(
MemAddSize
));

2153 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2155 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

2157  
HAL_ERROR
;

2161 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

2163  
HAL_BUSY
;

2167 
	`__HAL_LOCK
(
hi2c
);

2170 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

2172 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_MEM_BUSY_RX
;

2173 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2175 
hi2c
->
pBuffPå
 = 
pD©a
;

2176 
hi2c
->
X„rSize
 = 
Size
;

2177 
hi2c
->
X„rCou¡
 = 
Size
;

2180 
hi2c
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2C_DMAMemRe˚iveC∂t
;

2183 
hi2c
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2C_DMAEº‹
;

2186 
	`HAL_DMA_Sèπ_IT
(
hi2c
->
hdm¨x
, (
uöt32_t
)&hi2c->
In°™˚
->
DR
, (uöt32_t)
pD©a
, 
Size
);

2189 if(
	`I2C_Reque°Mem‹yRód
(
hi2c
, 
DevAddªss
, 
MemAddªss
, 
MemAddSize
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

2191 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2194 
	`__HAL_UNLOCK
(
hi2c
);

2195  
HAL_ERROR
;

2200 
	`__HAL_UNLOCK
(
hi2c
);

2201  
HAL_TIMEOUT
;

2205 if(
Size
 == 1)

2208 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

2213 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_LAST
;

2217 
hi2c
->
In°™˚
->
CR2
 |
I2C_CR2_DMAEN
;

2220 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2223 
	`__HAL_UNLOCK
(
hi2c
);

2225  
HAL_OK
;

2229  
HAL_BUSY
;

2231 
	}
}

2243 
HAL_SètusTy≥Def
 
	$HAL_I2C_IsDevi˚Ródy
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Trüls
, uöt32_à
Timeout
)

2245 
uöt32_t
 
tick°¨t
 = 0, 
tmp1
 = 0, 
tmp2
 = 0, 
tmp3
 = 0, 
I2C_Trüls
 = 1;

2247 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_READY
)

2250 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

2252  
HAL_BUSY
;

2256 
	`__HAL_LOCK
(
hi2c
);

2259 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

2261 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

2262 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_NONE
;

2267 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_START
;

2270 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

2272  
HAL_TIMEOUT
;

2276 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

2280 
tick°¨t
 = 
	`HAL_GëTick
();

2282 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

2283 
tmp2
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

2284 
tmp3
 = 
hi2c
->
Sèã
;

2285 (
tmp1
 =
RESET
Ë&& (
tmp2
 =RESETË&& (
tmp3
 !
HAL_I2C_STATE_TIMEOUT
))

2287 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

2289 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_TIMEOUT
;

2291 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

2292 
tmp2
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

2293 
tmp3
 = 
hi2c
->
Sèã
;

2296 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2299 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
Ë=
SET
)

2302 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

2305 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2308 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

2310  
HAL_TIMEOUT
;

2313 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2316 
	`__HAL_UNLOCK
(
hi2c
);

2318  
HAL_OK
;

2323 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

2326 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

2329 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BUSY
, 
SET
, 
I2C_TIMEOUT_BUSY_FLAG
Ë!
HAL_OK
)

2331  
HAL_TIMEOUT
;

2335 }
I2C_Trüls
++ < 
Trüls
);

2337 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2340 
	`__HAL_UNLOCK
(
hi2c
);

2342  
HAL_ERROR
;

2346  
HAL_BUSY
;

2348 
	}
}

2356 
	$HAL_I2C_EV_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2358 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0, 
tmp3
 = 0, 
tmp4
 = 0;

2360 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_MSL
Ë=
SET
)

2363 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TRA
Ë=
SET
)

2365 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXE
);

2366 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_BUF
);

2367 
tmp3
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
);

2368 
tmp4
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_EVT
);

2370 if((
tmp1
 =
SET
Ë&& (
tmp2
 =SETË&& (
tmp3
 =
RESET
))

2372 
	`I2C_Ma°îTønsmô_TXE
(
hi2c
);

2375 if((
tmp3
 =
SET
Ë&& (
tmp4
 == SET))

2377 
	`I2C_Ma°îTønsmô_BTF
(
hi2c
);

2383 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
);

2384 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_BUF
);

2385 
tmp3
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
);

2386 
tmp4
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_EVT
);

2388 if((
tmp1
 =
SET
Ë&& (
tmp2
 =SETË&& (
tmp3
 =
RESET
))

2390 
	`I2C_Ma°îRe˚ive_RXNE
(
hi2c
);

2393 if((
tmp3
 =
SET
Ë&& (
tmp4
 == SET))

2395 
	`I2C_Ma°îRe˚ive_BTF
(
hi2c
);

2402 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ADDR
);

2403 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, (
I2C_IT_EVT
));

2404 
tmp3
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_STOPF
);

2405 
tmp4
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TRA
);

2407 if((
tmp1
 =
SET
Ë&& (
tmp2
 == SET))

2409 
	`I2C_Sœve_ADDR
(
hi2c
);

2412 if((
tmp3
 =
SET
Ë&& (
tmp2
 == SET))

2414 
	`I2C_Sœve_STOPF
(
hi2c
);

2417 if(
tmp4
 =
SET
)

2419 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_TXE
);

2420 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_BUF
);

2421 
tmp3
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
);

2422 
tmp4
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_EVT
);

2424 if((
tmp1
 =
SET
Ë&& (
tmp2
 =SETË&& (
tmp3
 =
RESET
))

2426 
	`I2C_SœveTønsmô_TXE
(
hi2c
);

2429 if((
tmp3
 =
SET
Ë&& (
tmp4
 == SET))

2431 
	`I2C_SœveTønsmô_BTF
(
hi2c
);

2437 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_RXNE
);

2438 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_BUF
);

2439 
tmp3
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BTF
);

2440 
tmp4
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_EVT
);

2442 if((
tmp1
 =
SET
Ë&& (
tmp2
 =SETË&& (
tmp3
 =
RESET
))

2444 
	`I2C_SœveRe˚ive_RXNE
(
hi2c
);

2447 if((
tmp3
 =
SET
Ë&& (
tmp4
 == SET))

2449 
	`I2C_SœveRe˚ive_BTF
(
hi2c
);

2453 
	}
}

2461 
	$HAL_I2C_ER_IRQH™dÀr
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2463 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0, 
tmp3
 = 0;

2465 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_BERR
);

2466 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_ERR
);

2468 if((
tmp1
 =
SET
Ë&& (
tmp2
 == SET))

2470 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_BERR
;

2473 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_BERR
);

2476 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_ARLO
);

2477 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_ERR
);

2479 if((
tmp1
 =
SET
Ë&& (
tmp2
 == SET))

2481 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_ARLO
;

2484 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_ARLO
);

2487 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

2488 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_ERR
);

2490 if((
tmp1
 =
SET
Ë&& (
tmp2
 == SET))

2492 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_MSL
);

2493 
tmp2
 = 
hi2c
->
X„rCou¡
;

2494 
tmp3
 = 
hi2c
->
Sèã
;

2495 if((
tmp1
 =
RESET
Ë&& (
tmp2
 =0Ë&& (
tmp3
 =
HAL_I2C_STATE_BUSY_TX
))

2497 
	`I2C_Sœve_AF
(
hi2c
);

2501 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_AF
;

2503 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

2507 
tmp1
 = 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_OVR
);

2508 
tmp2
 = 
	`__HAL_I2C_GET_IT_SOURCE
(
hi2c
, 
I2C_IT_ERR
);

2510 if((
tmp1
 =
SET
Ë&& (
tmp2
 == SET))

2512 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_OVR
;

2514 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_OVR
);

2517 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

2519 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2522 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_POS
;

2524 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

2526 
	}
}

2534 
__wók
 
	$HAL_I2C_Ma°îTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2539 
	}
}

2547 
__wók
 
	$HAL_I2C_Ma°îRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2552 
	}
}

2559 
__wók
 
	$HAL_I2C_SœveTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2564 
	}
}

2572 
__wók
 
	$HAL_I2C_SœveRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2577 
	}
}

2585 
__wók
 
	$HAL_I2C_MemTxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2590 
	}
}

2598 
__wók
 
	$HAL_I2C_MemRxC∂tCÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2603 
	}
}

2611 
__wók
 
	$HAL_I2C_Eº‹CÆlback
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2616 
	}
}

2643 
HAL_I2C_SèãTy≥Def
 
	$HAL_I2C_GëSèã
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2645  
hi2c
->
Sèã
;

2646 
	}
}

2654 
uöt32_t
 
	$HAL_I2C_GëEº‹
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2656  
hi2c
->
Eº‹Code
;

2657 
	}
}

2669 
HAL_SètusTy≥Def
 
	$I2C_Ma°îTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2672 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

2673 
hi2c
->
X„rCou¡
--;

2675 if(
hi2c
->
X„rCou¡
 == 0)

2678 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

2681  
HAL_OK
;

2682 
	}
}

2690 
HAL_SètusTy≥Def
 
	$I2C_Ma°îTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2692 if(
hi2c
->
X„rCou¡
 != 0)

2695 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

2696 
hi2c
->
X„rCou¡
--;

2701 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2704 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

2706 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_MEM_BUSY_TX
)

2708 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2710 
	`HAL_I2C_MemTxC∂tCÆlback
(
hi2c
);

2714 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2716 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

2719  
HAL_OK
;

2720 
	}
}

2728 
HAL_SètusTy≥Def
 
	$I2C_Ma°îRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2730 
uöt32_t
 
tmp
 = 0;

2732 
tmp
 = 
hi2c
->
X„rCou¡
;

2733 if(
tmp
 > 3)

2736 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2737 
hi2c
->
X„rCou¡
--;

2739 if((
tmp
 == 2) || (tmp == 3))

2742 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_BUF
);

2747 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2750 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2751 
hi2c
->
X„rCou¡
--;

2753 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_MEM_BUSY_RX
)

2755 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2757 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

2761 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2763 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

2766  
HAL_OK
;

2767 
	}
}

2775 
HAL_SètusTy≥Def
 
	$I2C_Ma°îRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2777 if(
hi2c
->
X„rCou¡
 == 3)

2780 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

2783 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2784 
hi2c
->
X„rCou¡
--;

2786 if(
hi2c
->
X„rCou¡
 == 2)

2789 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

2792 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2793 
hi2c
->
X„rCou¡
--;

2796 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2797 
hi2c
->
X„rCou¡
--;

2800 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_ERR
);

2802 if(
hi2c
->
Sèã
 =
HAL_I2C_STATE_MEM_BUSY_RX
)

2804 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2806 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

2810 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2812 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

2818 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2819 
hi2c
->
X„rCou¡
--;

2821  
HAL_OK
;

2822 
	}
}

2830 
HAL_SètusTy≥Def
 
	$I2C_SœveTønsmô_TXE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2832 if(
hi2c
->
X„rCou¡
 != 0)

2835 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

2836 
hi2c
->
X„rCou¡
--;

2838  
HAL_OK
;

2839 
	}
}

2847 
HAL_SètusTy≥Def
 
	$I2C_SœveTønsmô_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2849 if(
hi2c
->
X„rCou¡
 != 0)

2852 
hi2c
->
In°™˚
->
DR
 = (*hi2c->
pBuffPå
++);

2853 
hi2c
->
X„rCou¡
--;

2855  
HAL_OK
;

2856 
	}
}

2864 
HAL_SètusTy≥Def
 
	$I2C_SœveRe˚ive_RXNE
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2866 if(
hi2c
->
X„rCou¡
 != 0)

2869 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2870 
hi2c
->
X„rCou¡
--;

2872  
HAL_OK
;

2873 
	}
}

2881 
HAL_SètusTy≥Def
 
	$I2C_SœveRe˚ive_BTF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2883 if(
hi2c
->
X„rCou¡
 != 0)

2886 (*
hi2c
->
pBuffPå
++Ëhi2c->
In°™˚
->
DR
;

2887 
hi2c
->
X„rCou¡
--;

2889  
HAL_OK
;

2890 
	}
}

2898 
HAL_SètusTy≥Def
 
	$I2C_Sœve_ADDR
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2901 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

2903  
HAL_OK
;

2904 
	}
}

2912 
HAL_SètusTy≥Def
 
	$I2C_Sœve_STOPF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2915 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2918 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

2921 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

2923 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2925 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

2927  
HAL_OK
;

2928 
	}
}

2935 
HAL_SètusTy≥Def
 
	$I2C_Sœve_AF
(
I2C_H™dÀTy≥Def
 *
hi2c
)

2938 
	`__HAL_I2C_DISABLE_IT
(
hi2c
, 
I2C_IT_EVT
 | 
I2C_IT_BUF
 | 
I2C_IT_ERR
);

2941 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

2944 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

2946 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

2948 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

2950  
HAL_OK
;

2951 
	}
}

2960 
HAL_SètusTy≥Def
 
	$I2C_Ma°îReque°Wrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
)

2963 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_START
;

2966 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

2968  
HAL_TIMEOUT
;

2971 if(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

2974 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

2979 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(
DevAddªss
);

2982 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADD10
, 
Timeout
Ë!
HAL_OK
)

2984 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

2986  
HAL_ERROR
;

2990  
HAL_TIMEOUT
;

2995 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_ADDRESS
(
DevAddªss
);

2999 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
Ë!
HAL_OK
)

3001 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3003  
HAL_ERROR
;

3007  
HAL_TIMEOUT
;

3011  
HAL_OK
;

3012 
	}
}

3022 
HAL_SètusTy≥Def
 
	$I2C_Ma°îReque°Ród
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, 
uöt32_t
 
Timeout
)

3025 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

3028 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_START
;

3031 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3033  
HAL_TIMEOUT
;

3036 if(
hi2c
->
Inô
.
AddªssögMode
 =
I2C_ADDRESSINGMODE_7BIT
)

3039 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(
DevAddªss
);

3044 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_WRITE
(
DevAddªss
);

3047 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADD10
, 
Timeout
Ë!
HAL_OK
)

3049 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3051  
HAL_ERROR
;

3055  
HAL_TIMEOUT
;

3060 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_ADDRESS
(
DevAddªss
);

3063 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
Ë!
HAL_OK
)

3065 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3067  
HAL_ERROR
;

3071  
HAL_TIMEOUT
;

3076 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3079 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_START
;

3082 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3084  
HAL_TIMEOUT
;

3088 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_10BIT_HEADER_READ
(
DevAddªss
);

3092 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
Ë!
HAL_OK
)

3094 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3096  
HAL_ERROR
;

3100  
HAL_TIMEOUT
;

3104  
HAL_OK
;

3105 
	}
}

3117 
HAL_SètusTy≥Def
 
	$I2C_Reque°Mem‹yWrôe
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
)

3120 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_START
;

3123 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3125  
HAL_TIMEOUT
;

3129 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

3132 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
Ë!
HAL_OK
)

3134 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3136  
HAL_ERROR
;

3140  
HAL_TIMEOUT
;

3145 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3148 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3150  
HAL_TIMEOUT
;

3154 if(
MemAddSize
 =
I2C_MEMADD_SIZE_8BIT
)

3157 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

3163 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_MSB
(
MemAddªss
);

3166 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3168  
HAL_TIMEOUT
;

3172 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

3175  
HAL_OK
;

3176 
	}
}

3188 
HAL_SètusTy≥Def
 
	$I2C_Reque°Mem‹yRód
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt16_t
 
DevAddªss
, uöt16_à
MemAddªss
, uöt16_à
MemAddSize
, 
uöt32_t
 
Timeout
)

3191 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_ACK
;

3194 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_START
;

3197 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3199  
HAL_TIMEOUT
;

3203 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_WRITE
(
DevAddªss
);

3206 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
Ë!
HAL_OK
)

3208 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3210  
HAL_ERROR
;

3214  
HAL_TIMEOUT
;

3219 
	`__HAL_I2C_CLEAR_ADDRFLAG
(
hi2c
);

3222 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3224  
HAL_TIMEOUT
;

3228 if(
MemAddSize
 =
I2C_MEMADD_SIZE_8BIT
)

3231 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

3237 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_MSB
(
MemAddªss
);

3240 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3242  
HAL_TIMEOUT
;

3246 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_MEM_ADD_LSB
(
MemAddªss
);

3250 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3252  
HAL_TIMEOUT
;

3256 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_START
;

3259 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_SB
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

3261  
HAL_TIMEOUT
;

3265 
hi2c
->
In°™˚
->
DR
 = 
	`I2C_7BIT_ADD_READ
(
DevAddªss
);

3268 if(
	`I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_ADDR
, 
Timeout
Ë!
HAL_OK
)

3270 if(
hi2c
->
Eº‹Code
 =
HAL_I2C_ERROR_AF
)

3272  
HAL_ERROR
;

3276  
HAL_TIMEOUT
;

3280  
HAL_OK
;

3281 
	}
}

3288 
	$I2C_DMAMa°îTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3290 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3293 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

3295 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3299 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

3302 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_DMAEN
;

3304 
hi2c
->
X„rCou¡
 = 0;

3306 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3309 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

3311 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

3315 
	`HAL_I2C_Ma°îTxC∂tCÆlback
(
hi2c
);

3317 
	}
}

3324 
	$I2C_DMASœveTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3326 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3329 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_AF
, 
RESET
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

3331 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3335 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3338 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

3341 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_DMAEN
;

3343 
hi2c
->
X„rCou¡
 = 0;

3345 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3348 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

3350 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

3354 
	`HAL_I2C_SœveTxC∂tCÆlback
(
hi2c
);

3356 
	}
}

3363 
	$I2C_DMAMa°îRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3365 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3368 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

3371 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

3374 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_LAST
;

3377 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_DMAEN
;

3379 
hi2c
->
X„rCou¡
 = 0;

3381 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3384 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

3386 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

3390 
	`HAL_I2C_Ma°îRxC∂tCÆlback
(
hi2c
);

3392 
	}
}

3399 
	$I2C_DMASœveRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3401 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3404 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_STOPF
, 
RESET
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

3406 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3410 
	`__HAL_I2C_CLEAR_STOPFLAG
(
hi2c
);

3413 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

3416 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_DMAEN
;

3418 
hi2c
->
X„rCou¡
 = 0;

3420 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3423 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

3425 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

3429 
	`HAL_I2C_SœveRxC∂tCÆlback
(
hi2c
);

3431 
	}
}

3438 
	$I2C_DMAMemTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3440 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3443 if(
	`I2C_WaôOnFœgU¡ûTimeout
(
hi2c
, 
I2C_FLAG_BTF
, 
RESET
, 
I2C_TIMEOUT_FLAG
Ë!
HAL_OK
)

3445 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_TIMEOUT
;

3449 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

3452 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_DMAEN
;

3454 
hi2c
->
X„rCou¡
 = 0;

3456 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3459 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

3461 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

3465 
	`HAL_I2C_MemTxC∂tCÆlback
(
hi2c
);

3467 
	}
}

3474 
	$I2C_DMAMemRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

3476 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3479 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

3482 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

3485 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_LAST
;

3488 
hi2c
->
In°™˚
->
CR2
 &~
I2C_CR2_DMAEN
;

3490 
hi2c
->
X„rCou¡
 = 0;

3492 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3495 if(
hi2c
->
Eº‹Code
 !
HAL_I2C_ERROR_NONE
)

3497 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

3501 
	`HAL_I2C_MemRxC∂tCÆlback
(
hi2c
);

3503 
	}
}

3510 
	$I2C_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

3512 
I2C_H™dÀTy≥Def
* 
hi2c
 = (I2C_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

3515 
hi2c
->
In°™˚
->
CR1
 &~
I2C_CR1_ACK
;

3517 
hi2c
->
X„rCou¡
 = 0;

3519 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

3521 
hi2c
->
Eº‹Code
 |
HAL_I2C_ERROR_DMA
;

3523 
	`HAL_I2C_Eº‹CÆlback
(
hi2c
);

3524 
	}
}

3535 
HAL_SètusTy≥Def
 
	$I2C_WaôOnFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

3537 
uöt32_t
 
tick°¨t
 = 0;

3540 
tick°¨t
 = 
	`HAL_GëTick
();

3543 if(
Sètus
 =
RESET
)

3545 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
RESET
)

3548 if(
Timeout
 !
HAL_MAX_DELAY
)

3550 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3552 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

3555 
	`__HAL_UNLOCK
(
hi2c
);

3557  
HAL_TIMEOUT
;

3564 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë!
RESET
)

3567 if(
Timeout
 !
HAL_MAX_DELAY
)

3569 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3571 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

3574 
	`__HAL_UNLOCK
(
hi2c
);

3576  
HAL_TIMEOUT
;

3581  
HAL_OK
;

3582 
	}
}

3592 
HAL_SètusTy≥Def
 
	$I2C_WaôOnMa°îAddªssFœgU¡ûTimeout
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
Fœg
, uöt32_à
Timeout
)

3594 
uöt32_t
 
tick°¨t
 = 0;

3597 
tick°¨t
 = 
	`HAL_GëTick
();

3599 
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
Fœg
Ë=
RESET
)

3601 if(
	`__HAL_I2C_GET_FLAG
(
hi2c
, 
I2C_FLAG_AF
Ë=
SET
)

3604 
hi2c
->
In°™˚
->
CR1
 |
I2C_CR1_STOP
;

3607 
	`__HAL_I2C_CLEAR_FLAG
(
hi2c
, 
I2C_FLAG_AF
);

3609 
hi2c
->
Eº‹Code
 = 
HAL_I2C_ERROR_AF
;

3610 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

3613 
	`__HAL_UNLOCK
(
hi2c
);

3615  
HAL_ERROR
;

3619 if(
Timeout
 !
HAL_MAX_DELAY
)

3621 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

3623 
hi2c
->
Sèã

HAL_I2C_STATE_READY
;

3626 
	`__HAL_UNLOCK
(
hi2c
);

3628  
HAL_TIMEOUT
;

3632  
HAL_OK
;

3633 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_i2c_ex.c

61 
	~"°m32f4xx_hÆ.h
"

72 #ifde‡
HAL_I2C_MODULE_ENABLED


74 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

75 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) ||\

76 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

109 
HAL_SètusTy≥Def
 
	$HAL_I2CEx_C⁄figA«logFûãr
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
A«logFûãr
)

111 
uöt32_t
 
tmp
 = 0;

114 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

115 
	`as£π_∑øm
(
	`IS_I2C_ANALOG_FILTER
(
A«logFûãr
));

117 
tmp
 = 
hi2c
->
Sèã
;

118 if((
tmp
 =
HAL_I2C_STATE_BUSY
Ë|| (tm∞=
HAL_I2C_STATE_BUSY_TX
Ë|| (tm∞=
HAL_I2C_STATE_BUSY_RX
))

120  
HAL_BUSY
;

123 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

126 
	`__HAL_I2C_DISABLE
(
hi2c
);

129 
hi2c
->
In°™˚
->
FLTR
 &~(
I2C_FLTR_ANOFF
);

132 
hi2c
->
In°™˚
->
FLTR
 |
A«logFûãr
;

134 
	`__HAL_I2C_ENABLE
(
hi2c
);

136 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

138  
HAL_OK
;

139 
	}
}

148 
HAL_SètusTy≥Def
 
	$HAL_I2CEx_C⁄figDigôÆFûãr
(
I2C_H™dÀTy≥Def
 *
hi2c
, 
uöt32_t
 
DigôÆFûãr
)

150 
uöt16_t
 
tm¥eg
 = 0;

151 
uöt32_t
 
tmp
 = 0;

154 
	`as£π_∑øm
(
	`IS_I2C_ALL_INSTANCE
(
hi2c
->
In°™˚
));

155 
	`as£π_∑øm
(
	`IS_I2C_DIGITAL_FILTER
(
DigôÆFûãr
));

157 
tmp
 = 
hi2c
->
Sèã
;

158 if((
tmp
 =
HAL_I2C_STATE_BUSY
Ë|| (tm∞=
HAL_I2C_STATE_BUSY_TX
Ë|| (tm∞=
HAL_I2C_STATE_BUSY_RX
))

160  
HAL_BUSY
;

163 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_BUSY
;

166 
	`__HAL_I2C_DISABLE
(
hi2c
);

169 
tm¥eg
 = 
hi2c
->
In°™˚
->
FLTR
;

172 
tm¥eg
 &~(
I2C_FLTR_DNF
);

175 
tm¥eg
 |
DigôÆFûãr
;

178 
hi2c
->
In°™˚
->
FLTR
 = 
tm¥eg
;

180 
	`__HAL_I2C_ENABLE
(
hi2c
);

182 
hi2c
->
Sèã
 = 
HAL_I2C_STATE_READY
;

184  
HAL_OK
;

185 
	}
}

195 
	gSTM32F401xE
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_i2s.c

140 
	~"°m32f4xx_hÆ.h
"

151 #ifde‡
HAL_I2S_MODULE_ENABLED


206 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_I2S_Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

208 
uöt32_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

209 
uöt32_t
 
tmp
 = 0, 
i2s˛k
 = 0;

212 if(
hi2s
 =
NULL
)

214  
HAL_ERROR
;

218 
	`as£π_∑øm
(
	`IS_I2S_ALL_INSTANCE
(
hi2s
->
In°™˚
));

219 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
hi2s
->
Inô
.
Mode
));

220 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
hi2s
->
Inô
.
Sènd¨d
));

221 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
hi2s
->
Inô
.
D©aF‹m©
));

222 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
hi2s
->
Inô
.
MCLKOuçut
));

223 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
hi2s
->
Inô
.
AudioFªq
));

224 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
hi2s
->
Inô
.
CPOL
));

225 
	`as£π_∑øm
(
	`IS_I2S_CLOCKSOURCE
(
hi2s
->
Inô
.
ClockSour˚
));

227 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_RESET
)

230 
hi2s
->
Lock
 = 
HAL_UNLOCKED
;

232 
	`HAL_I2S_M•Inô
(
hi2s
);

235 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY
;

239 
hi2s
->
In°™˚
->
I2SCFGR
 &~(
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CKPOL
 | \

240 
SPI_I2SCFGR_I2SSTD
 | 
SPI_I2SCFGR_PCMSYNC
 | 
SPI_I2SCFGR_I2SCFG
 | \

241 
SPI_I2SCFGR_I2SE
 | 
SPI_I2SCFGR_I2SMOD
);

242 
hi2s
->
In°™˚
->
I2SPR
 = 0x0002;

245 
tm¥eg
 = 
hi2s
->
In°™˚
->
I2SCFGR
;

249 if(
hi2s
->
Inô
.
AudioFªq
 !
I2S_AUDIOFREQ_DEFAULT
)

252 if(
hi2s
->
Inô
.
D©aF‹m©
 !
I2S_DATAFORMAT_16B
)

255 
∑ckëÀngth
 = 2;

261 
i2s˛k
 = 
	`I2S_GëI≈utClock
(
hi2s
);

264 if(
hi2s
->
Inô
.
MCLKOuçut
 =
I2S_MCLKOUTPUT_ENABLE
)

267 
tmp
 = (
uöt32_t
)(((((
i2s˛k
 / 256Ë* 10Ë/ 
hi2s
->
Inô
.
AudioFªq
)) + 5);

272 
tmp
 = (
uöt32_t
)(((((
i2s˛k
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
hi2s
->
Inô
.
AudioFªq
)) + 5);

276 
tmp
 =Åmp / 10;

279 
i2sodd
 = (
uöt32_t
)(
tmp
 & (uint32_t)1);

282 
i2sdiv
 = (
uöt32_t
)((
tmp
 - 
i2sodd
) / 2);

285 
i2sodd
 = (
uöt32_t
) (i2sodd << 8);

289 if((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

292 
i2sdiv
 = 2;

293 
i2sodd
 = 0;

297 
hi2s
->
In°™˚
->
I2SPR
 = (
uöt32_t
)((uöt32_t)
i2sdiv
 | (uöt32_t)(
i2sodd
 | (uöt32_t)hi2s->
Inô
.
MCLKOuçut
));

300 
tm¥eg
 |(
uöt32_t
)(
SPI_I2SCFGR_I2SMOD
 | 
hi2s
->
Inô
.
Mode
 | hi2s->Inô.
Sènd¨d
 | hi2s->Inô.
D©aF‹m©
 | hi2s->Inô.
CPOL
);

302 #i‡
	`deföed
(
SPI_I2SCFGR_ASTRTEN
)

303 i‡(
hi2s
->
Inô
.
Sènd¨d
 =
I2S_STANDARD_PCM_SHORT
)

306 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
 | 
SPI_I2SCFGR_ASTRTEN
;

311 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
;

315 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
;

318 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

319 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

321  
HAL_OK
;

322 
	}
}

330 
HAL_SètusTy≥Def
 
	$HAL_I2S_DeInô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

333 if(
hi2s
 =
NULL
)

335  
HAL_ERROR
;

338 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY
;

341 
	`HAL_I2S_M•DeInô
(
hi2s
);

343 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

344 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_RESET
;

347 
	`__HAL_UNLOCK
(
hi2s
);

349  
HAL_OK
;

350 
	}
}

358 
__wók
 
	$HAL_I2S_M•Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

363 
	}
}

371 
__wók
 
	$HAL_I2S_M•DeInô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

376 
	}
}

438 
HAL_SètusTy≥Def
 
	$HAL_I2S_Tønsmô
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

440 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

441 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

443  
HAL_ERROR
;

446 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

448 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

449 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

450 if((
tmp1
 =
I2S_DATAFORMAT_24B
)|| \

451 (
tmp2
 =
I2S_DATAFORMAT_32B
))

453 
hi2s
->
TxX„rSize
 = 
Size
*2;

454 
hi2s
->
TxX„rCou¡
 = 
Size
*2;

458 
hi2s
->
TxX„rSize
 = 
Size
;

459 
hi2s
->
TxX„rCou¡
 = 
Size
;

463 
	`__HAL_LOCK
(
hi2s
);

465 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX
;

468 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

471 
	`__HAL_I2S_ENABLE
(
hi2s
);

474 
hi2s
->
TxX„rCou¡
 > 0)

476 
hi2s
->
In°™˚
->
DR
 = (*
pD©a
++);

477 
hi2s
->
TxX„rCou¡
--;

479 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

481  
HAL_TIMEOUT
;

485 if(((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_SLAVE_TX
Ë|| ((hi2s->In°™˚->I2SCFGR & SPI_I2SCFGR_I2SCFGË=
I2S_MODE_SLAVE_RX
))

488 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_BSY
, 
SET
, 
Timeout
Ë!
HAL_OK
)

490  
HAL_TIMEOUT
;

493 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

496 
	`__HAL_UNLOCK
(
hi2s
);

498  
HAL_OK
;

502  
HAL_BUSY
;

504 
	}
}

523 
HAL_SètusTy≥Def
 
	$HAL_I2S_Re˚ive
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

525 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

526 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

528  
HAL_ERROR
;

531 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

533 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

534 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

535 if((
tmp1
 =
I2S_DATAFORMAT_24B
)|| \

536 (
tmp2
 =
I2S_DATAFORMAT_32B
))

538 
hi2s
->
RxX„rSize
 = 
Size
*2;

539 
hi2s
->
RxX„rCou¡
 = 
Size
*2;

543 
hi2s
->
RxX„rSize
 = 
Size
;

544 
hi2s
->
RxX„rCou¡
 = 
Size
;

547 
	`__HAL_LOCK
(
hi2s
);

549 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_RX
;

552 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

555 
	`__HAL_I2S_ENABLE
(
hi2s
);

559 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_MASTER_RX
)

563 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

567 
hi2s
->
RxX„rCou¡
 > 0)

570 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

572  
HAL_TIMEOUT
;

575 (*
pD©a
++Ë
hi2s
->
In°™˚
->
DR
;

576 
hi2s
->
RxX„rCou¡
--;

579 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

582 
	`__HAL_UNLOCK
(
hi2s
);

584  
HAL_OK
;

588  
HAL_BUSY
;

590 
	}
}

606 
HAL_SètusTy≥Def
 
	$HAL_I2S_Tønsmô_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
)

608 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

609 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

611 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

613  
HAL_ERROR
;

616 
hi2s
->
pTxBuffPå
 = 
pD©a
;

617 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

618 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

619 if((
tmp1
 =
I2S_DATAFORMAT_24B
)|| \

620 (
tmp2
 =
I2S_DATAFORMAT_32B
))

622 
hi2s
->
TxX„rSize
 = 
Size
*2;

623 
hi2s
->
TxX„rCou¡
 = 
Size
*2;

627 
hi2s
->
TxX„rSize
 = 
Size
;

628 
hi2s
->
TxX„rCou¡
 = 
Size
;

632 
	`__HAL_LOCK
(
hi2s
);

634 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX
;

635 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

638 
	`__HAL_I2S_ENABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

641 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

644 
	`__HAL_I2S_ENABLE
(
hi2s
);

648 
	`__HAL_UNLOCK
(
hi2s
);

650  
HAL_OK
;

654  
HAL_BUSY
;

656 
	}
}

674 
HAL_SètusTy≥Def
 
	$HAL_I2S_Re˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
)

676 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

677 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

679 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

681  
HAL_ERROR
;

684 
hi2s
->
pRxBuffPå
 = 
pD©a
;

685 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

686 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

687 if((
tmp1
 =
I2S_DATAFORMAT_24B
)||\

688 (
tmp2
 =
I2S_DATAFORMAT_32B
))

690 
hi2s
->
RxX„rSize
 = 
Size
*2;

691 
hi2s
->
RxX„rCou¡
 = 
Size
*2;

695 
hi2s
->
RxX„rSize
 = 
Size
;

696 
hi2s
->
RxX„rCou¡
 = 
Size
;

699 
	`__HAL_LOCK
(
hi2s
);

701 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_RX
;

702 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

705 
	`__HAL_I2S_ENABLE_IT
(
hi2s
, (
I2S_IT_RXNE
 | 
I2S_IT_ERR
));

708 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

711 
	`__HAL_I2S_ENABLE
(
hi2s
);

715 
	`__HAL_UNLOCK
(
hi2s
);

717  
HAL_OK
;

722  
HAL_BUSY
;

724 
	}
}

740 
HAL_SètusTy≥Def
 
	$HAL_I2S_Tønsmô_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
)

742 
uöt32_t
 *
tmp
;

743 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

745 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

747  
HAL_ERROR
;

750 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

752 
hi2s
->
pTxBuffPå
 = 
pD©a
;

753 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

754 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

755 if((
tmp1
 =
I2S_DATAFORMAT_24B
)|| \

756 (
tmp2
 =
I2S_DATAFORMAT_32B
))

758 
hi2s
->
TxX„rSize
 = 
Size
*2;

759 
hi2s
->
TxX„rCou¡
 = 
Size
*2;

763 
hi2s
->
TxX„rSize
 = 
Size
;

764 
hi2s
->
TxX„rCou¡
 = 
Size
;

768 
	`__HAL_LOCK
(
hi2s
);

770 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX
;

771 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

774 
hi2s
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
I2S_DMATxHÆfC∂t
;

777 
hi2s
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2S_DMATxC∂t
;

780 
hi2s
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2S_DMAEº‹
;

783 
tmp
 = (
uöt32_t
*)&
pD©a
;

784 
	`HAL_DMA_Sèπ_IT
(
hi2s
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hi2s->
In°™˚
->
DR
, hi2s->
TxX„rSize
);

787 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

790 
	`__HAL_I2S_ENABLE
(
hi2s
);

794 if((
hi2s
->
In°™˚
->
CR2
 & 
SPI_CR2_TXDMAEN
) != SPI_CR2_TXDMAEN)

797 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

801 
	`__HAL_UNLOCK
(
hi2s
);

803  
HAL_OK
;

807  
HAL_BUSY
;

809 
	}
}

825 
HAL_SètusTy≥Def
 
	$HAL_I2S_Re˚ive_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pD©a
, uöt16_à
Size
)

827 
uöt32_t
 *
tmp
;

828 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

830 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

832  
HAL_ERROR
;

835 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

837 
hi2s
->
pRxBuffPå
 = 
pD©a
;

838 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

839 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

840 if((
tmp1
 =
I2S_DATAFORMAT_24B
)|| \

841 (
tmp2
 =
I2S_DATAFORMAT_32B
))

843 
hi2s
->
RxX„rSize
 = 
Size
*2;

844 
hi2s
->
RxX„rCou¡
 = 
Size
*2;

848 
hi2s
->
RxX„rSize
 = 
Size
;

849 
hi2s
->
RxX„rCou¡
 = 
Size
;

852 
	`__HAL_LOCK
(
hi2s
);

854 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_RX
;

855 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

858 
hi2s
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
I2S_DMARxHÆfC∂t
;

861 
hi2s
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2S_DMARxC∂t
;

864 
hi2s
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2S_DMAEº‹
;

867 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_MASTER_RX
)

871 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

875 
tmp
 = (
uöt32_t
*)&
pD©a
;

876 
	`HAL_DMA_Sèπ_IT
(
hi2s
->
hdm¨x
, (
uöt32_t
)&hi2s->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, hi2s->
RxX„rSize
);

879 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

882 
	`__HAL_I2S_ENABLE
(
hi2s
);

886 if((
hi2s
->
In°™˚
->
CR2
 &
SPI_CR2_RXDMAEN
) != SPI_CR2_RXDMAEN)

889 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

893 
	`__HAL_UNLOCK
(
hi2s
);

895  
HAL_OK
;

899  
HAL_BUSY
;

901 
	}
}

909 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMAPau£
(
I2S_H™dÀTy≥Def
 *
hi2s
)

912 
	`__HAL_LOCK
(
hi2s
);

914 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

917 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

919 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

922 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

924 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX_RX
)

926 if((
hi2s
->
Inô
.
Mode
 =
I2S_MODE_SLAVE_TX
)||(hi2s->Inô.Modê=
I2S_MODE_MASTER_TX
))

929 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

934 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

939 
	`__HAL_UNLOCK
(
hi2s
);

941  
HAL_OK
;

942 
	}
}

950 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMAResume
(
I2S_H™dÀTy≥Def
 *
hi2s
)

953 
	`__HAL_LOCK
(
hi2s
);

955 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

958 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

960 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

963 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

965 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX_RX
)

967 if((
hi2s
->
Inô
.
Mode
 =
I2S_MODE_SLAVE_TX
)||(hi2s->Inô.Modê=
I2S_MODE_MASTER_TX
))

970 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

975 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

980 i‡((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) == 0)

983 
	`__HAL_I2S_ENABLE
(
hi2s
);

987 
	`__HAL_UNLOCK
(
hi2s
);

989  
HAL_OK
;

990 
	}
}

998 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMASt›
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1001 
	`__HAL_LOCK
(
hi2s
);

1004 
hi2s
->
In°™˚
->
CR2
 &~
SPI_CR2_TXDMAEN
;

1005 
hi2s
->
In°™˚
->
CR2
 &~
SPI_CR2_RXDMAEN
;

1008 if(
hi2s
->
hdm©x
 !
NULL
)

1010 
	`HAL_DMA_Ab‹t
(
hi2s
->
hdm©x
);

1013 if(
hi2s
->
hdm¨x
 !
NULL
)

1015 
	`HAL_DMA_Ab‹t
(
hi2s
->
hdm¨x
);

1019 
	`__HAL_I2S_DISABLE
(
hi2s
);

1021 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1024 
	`__HAL_UNLOCK
(
hi2s
);

1026  
HAL_OK
;

1027 
	}
}

1035 
__wók
 
	$HAL_I2S_IRQH™dÀr
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1037 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1039 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

1041 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_RXNE
);

1042 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_RXNE
);

1044 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1046 
	`I2S_Re˚ive_IT
(
hi2s
);

1049 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_OVR
);

1050 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_ERR
);

1052 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1054 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

1055 
hi2s
->
Eº‹Code
 |
HAL_I2S_ERROR_OVR
;

1059 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

1061 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_TXE
);

1062 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_TXE
);

1064 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1066 
	`I2S_Tønsmô_IT
(
hi2s
);

1069 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_UDR
);

1070 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_ERR
);

1072 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1074 
	`__HAL_I2S_CLEAR_UDRFLAG
(
hi2s
);

1075 
hi2s
->
Eº‹Code
 |
HAL_I2S_ERROR_UDR
;

1080 if(
hi2s
->
Eº‹Code
 !
HAL_I2S_ERROR_NONE
)

1083 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

1084 
	`HAL_I2S_Eº‹CÆlback
(
hi2s
);

1086 
	}
}

1094 
__wók
 
	$HAL_I2S_TxHÆfC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1099 
	}
}

1107 
__wók
 
	$HAL_I2S_TxC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1112 
	}
}

1120 
__wók
 
	$HAL_I2S_RxHÆfC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1125 
	}
}

1133 
__wók
 
	$HAL_I2S_RxC∂tCÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1138 
	}
}

1146 
__wók
 
	$HAL_I2S_Eº‹CÆlback
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1151 
	}
}

1177 
HAL_I2S_SèãTy≥Def
 
	$HAL_I2S_GëSèã
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1179  
hi2s
->
Sèã
;

1180 
	}
}

1188 
uöt32_t
 
	$HAL_I2S_GëEº‹
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1190  
hi2s
->
Eº‹Code
;

1191 
	}
}

1202 
	$I2S_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1204 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1206 
	`HAL_I2S_TxHÆfC∂tCÆlback
(
hi2s
);

1207 
	}
}

1215 
	$I2S_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1217 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1219 
	`HAL_I2S_RxHÆfC∂tCÆlback
(
hi2s
);

1220 
	}
}

1228 
	$I2S_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1230 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1232 
hi2s
->
TxX„rCou¡
 = 0;

1233 
hi2s
->
RxX„rCou¡
 = 0;

1235 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

1237 
hi2s
->
Eº‹Code
 |
HAL_I2S_ERROR_DMA
;

1238 
	`HAL_I2S_Eº‹CÆlback
(
hi2s
);

1239 
	}
}

1247 
HAL_SètusTy≥Def
 
	$I2S_Tønsmô_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1249 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

1252 
	`__HAL_LOCK
(
hi2s
);

1255 
hi2s
->
In°™˚
->
DR
 = (*hi2s->
pTxBuffPå
++);

1257 
hi2s
->
TxX„rCou¡
--;

1259 if(
hi2s
->
TxX„rCou¡
 == 0)

1262 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

1264 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1267 
	`__HAL_UNLOCK
(
hi2s
);

1268 
	`HAL_I2S_TxC∂tCÆlback
(
hi2s
);

1273 
	`__HAL_UNLOCK
(
hi2s
);

1276  
HAL_OK
;

1281  
HAL_BUSY
;

1283 
	}
}

1291 
HAL_SètusTy≥Def
 
	$I2S_Re˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1293 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

1296 
	`__HAL_LOCK
(
hi2s
);

1299 (*
hi2s
->
pRxBuffPå
++Ëhi2s->
In°™˚
->
DR
;

1301 
hi2s
->
RxX„rCou¡
--;

1304 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_MASTER_RX
)

1308 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

1311 if(
hi2s
->
RxX„rCou¡
 == 0)

1314 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, 
I2S_IT_RXNE
 | 
I2S_IT_ERR
);

1316 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1319 
	`__HAL_UNLOCK
(
hi2s
);

1321 
	`HAL_I2S_RxC∂tCÆlback
(
hi2s
);

1326 
	`__HAL_UNLOCK
(
hi2s
);

1329  
HAL_OK
;

1333  
HAL_BUSY
;

1335 
	}
}

1346 
HAL_SètusTy≥Def
 
	$I2S_WaôFœgSèãU¡ûTimeout
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt32_t
 
Fœg
, uöt32_à
Sètus
, uöt32_à
Timeout
)

1348 
uöt32_t
 
tick°¨t
 = 0;

1351 
tick°¨t
 = 
	`HAL_GëTick
();

1354 if(
Sètus
 =
RESET
)

1356 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
Fœg
Ë=
RESET
)

1358 if(
Timeout
 !
HAL_MAX_DELAY
)

1360 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1363 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

1366 
	`__HAL_UNLOCK
(
hi2s
);

1368  
HAL_TIMEOUT
;

1375 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
Fœg
Ë!
RESET
)

1377 if(
Timeout
 !
HAL_MAX_DELAY
)

1379 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1382 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

1385 
	`__HAL_UNLOCK
(
hi2s
);

1387  
HAL_TIMEOUT
;

1392  
HAL_OK
;

1393 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_i2s_ex.c

105 
	~"°m32f4xx_hÆ.h
"

116 #ifde‡
HAL_I2S_MODULE_ENABLED


173 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

174 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

175 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469xx
) ||\

176 
	$deföed
(
STM32F479xx
)

184 
HAL_SètusTy≥Def
 
	$HAL_I2S_Inô
(
I2S_H™dÀTy≥Def
 *
hi2s
)

186 
uöt32_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

187 
uöt32_t
 
tmp
 = 0, 
i2s˛k
 = 0;

190 if(
hi2s
 =
NULL
)

192  
HAL_ERROR
;

196 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
hi2s
->
Inô
.
Mode
));

197 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
hi2s
->
Inô
.
Sènd¨d
));

198 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
hi2s
->
Inô
.
D©aF‹m©
));

199 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
hi2s
->
Inô
.
MCLKOuçut
));

200 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
hi2s
->
Inô
.
AudioFªq
));

201 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
hi2s
->
Inô
.
CPOL
));

202 
	`as£π_∑øm
(
	`IS_I2S_CLOCKSOURCE
(
hi2s
->
Inô
.
ClockSour˚
));

204 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_RESET
)

207 
hi2s
->
Lock
 = 
HAL_UNLOCKED
;

209 
	`HAL_I2S_M•Inô
(
hi2s
);

212 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY
;

216 
hi2s
->
In°™˚
->
I2SCFGR
 &~(
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CKPOL
 | \

217 
SPI_I2SCFGR_I2SSTD
 | 
SPI_I2SCFGR_PCMSYNC
 | 
SPI_I2SCFGR_I2SCFG
 | \

218 
SPI_I2SCFGR_I2SE
 | 
SPI_I2SCFGR_I2SMOD
);

219 
hi2s
->
In°™˚
->
I2SPR
 = 0x0002;

222 
tm¥eg
 = 
hi2s
->
In°™˚
->
I2SCFGR
;

226 if(
hi2s
->
Inô
.
AudioFªq
 !
I2S_AUDIOFREQ_DEFAULT
)

229 if(
hi2s
->
Inô
.
D©aF‹m©
 !
I2S_DATAFORMAT_16B
)

232 
∑ckëÀngth
 = 2;

236 
i2s˛k
 = 
	`I2S_GëI≈utClock
(
hi2s
);

239 if(
hi2s
->
Inô
.
MCLKOuçut
 =
I2S_MCLKOUTPUT_ENABLE
)

242 
tmp
 = (
uöt32_t
)(((((
i2s˛k
 / 256Ë* 10Ë/ 
hi2s
->
Inô
.
AudioFªq
)) + 5);

247 
tmp
 = (
uöt32_t
)(((((
i2s˛k
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
hi2s
->
Inô
.
AudioFªq
)) + 5);

251 
tmp
 =Åmp / 10;

254 
i2sodd
 = (
uöt32_t
)(
tmp
 & (uint32_t)1);

257 
i2sdiv
 = (
uöt32_t
)((
tmp
 - 
i2sodd
) / 2);

260 
i2sodd
 = (
uöt32_t
) (i2sodd << 8);

264 if((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

267 
i2sdiv
 = 2;

268 
i2sodd
 = 0;

272 
hi2s
->
In°™˚
->
I2SPR
 = (
uöt32_t
)((uöt32_t)
i2sdiv
 | (uöt32_t)(
i2sodd
 | (uöt32_t)hi2s->
Inô
.
MCLKOuçut
));

275 
tm¥eg
 |(
uöt32_t
)(
SPI_I2SCFGR_I2SMOD
 | 
hi2s
->
Inô
.
Mode
 | hi2s->Inô.
Sènd¨d
 | hi2s->Inô.
D©aF‹m©
 | hi2s->Inô.
CPOL
);

277 #i‡
	`deföed
(
SPI_I2SCFGR_ASTRTEN
)

278 i‡(
hi2s
->
Inô
.
Sènd¨d
 =
I2S_STANDARD_PCM_SHORT
)

281 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
 | 
SPI_I2SCFGR_ASTRTEN
;

286 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
;

290 
hi2s
->
In°™˚
->
I2SCFGR
 = 
tm¥eg
;

294 
	`as£π_∑øm
(
	`IS_I2S_FULLDUPLEX_MODE
(
hi2s
->
Inô
.
FuŒDu∂exMode
));

295 if(
hi2s
->
Inô
.
FuŒDu∂exMode
 =
I2S_FULLDUPLEXMODE_ENABLE
)

298 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 &~(
SPI_I2SCFGR_CHLEN
 | 
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CKPOL
 | \

299 
SPI_I2SCFGR_I2SSTD
 | 
SPI_I2SCFGR_PCMSYNC
 | 
SPI_I2SCFGR_I2SCFG
 | \

300 
SPI_I2SCFGR_I2SE
 | 
SPI_I2SCFGR_I2SMOD
);

301 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SPR
 = 2;

304 
tm¥eg
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
;

307 if((
hi2s
->
Inô
.
Mode
 =
I2S_MODE_MASTER_TX
Ë|| (hi2s->Inô.Modê=
I2S_MODE_SLAVE_TX
))

309 
tmp
 = 
I2S_MODE_SLAVE_RX
;

313 if((
hi2s
->
Inô
.
Mode
 =
I2S_MODE_MASTER_RX
Ë|| (hi2s->Inô.Modê=
I2S_MODE_SLAVE_RX
))

315 
tmp
 = 
I2S_MODE_SLAVE_TX
;

320 
tm¥eg
 |(
uöt32_t
)(
SPI_I2SCFGR_I2SMOD
 | 
tmp
 | 
hi2s
->
Inô
.
Sènd¨d
 | hi2s->Inô.
D©aF‹m©
 | hi2s->Inô.
CPOL
);

323 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 = 
tm¥eg
;

326 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

327 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

329  
HAL_OK
;

330 
	}
}

348 
HAL_SètusTy≥Def
 
	$HAL_I2SEx_TønsmôRe˚ive
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pTxD©a
, uöt16_à*
pRxD©a
, uöt16_à
Size
, 
uöt32_t
 
Timeout
)

350 
uöt32_t
 
tick°¨t
 = 0;

351 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

353 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

355  
HAL_ERROR
;

359 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

361 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

362 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

367 if((
tmp1
 =
I2S_DATAFORMAT_24B
)|| \

368 (
tmp2
 =
I2S_DATAFORMAT_32B
))

370 
hi2s
->
TxX„rSize
 = 
Size
*2;

371 
hi2s
->
TxX„rCou¡
 = 
Size
*2;

372 
hi2s
->
RxX„rSize
 = 
Size
*2;

373 
hi2s
->
RxX„rCou¡
 = 
Size
*2;

377 
hi2s
->
TxX„rSize
 = 
Size
;

378 
hi2s
->
TxX„rCou¡
 = 
Size
;

379 
hi2s
->
RxX„rSize
 = 
Size
;

380 
hi2s
->
RxX„rCou¡
 = 
Size
;

384 
	`__HAL_LOCK
(
hi2s
);

387 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX_RX
;

389 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

390 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

392 if((
tmp1
 =
I2S_MODE_MASTER_TX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_TX
))

396 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

399 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

402 
	`__HAL_I2S_ENABLE
(
hi2s
);

405 
hi2s
->
TxX„rCou¡
 > 0)

408 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

410  
HAL_TIMEOUT
;

412 
hi2s
->
In°™˚
->
DR
 = (*
pTxD©a
++);

415 
tick°¨t
 = 
	`HAL_GëTick
();

418 (
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
 & 
SPI_SR_RXNE
) != SPI_SR_RXNE)

420 if(
Timeout
 !
HAL_MAX_DELAY
)

422 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

425 
	`__HAL_UNLOCK
(
hi2s
);

427  
HAL_TIMEOUT
;

431 (*
pRxD©a
++Ë
	`I2SxEXT
(
hi2s
->
In°™˚
)->
DR
;

433 
hi2s
->
TxX„rCou¡
--;

434 
hi2s
->
RxX„rCou¡
--;

441 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

444 
	`__HAL_I2S_ENABLE
(
hi2s
);

447 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

452 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_MASTER_RX
)

456 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

459 
hi2s
->
TxX„rCou¡
 > 0)

462 
tick°¨t
 = 
	`HAL_GëTick
();

465 (
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
 & 
SPI_SR_TXE
) != SPI_SR_TXE)

467 if(
Timeout
 !
HAL_MAX_DELAY
)

469 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

472 
	`__HAL_UNLOCK
(
hi2s
);

474  
HAL_TIMEOUT
;

478 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
DR
 = (*
pTxD©a
++);

481 i‡(
	`I2S_WaôFœgSèãU¡ûTimeout
(
hi2s
, 
I2S_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

483  
HAL_TIMEOUT
;

485 (*
pRxD©a
++Ë
hi2s
->
In°™˚
->
DR
;

487 
hi2s
->
TxX„rCou¡
--;

488 
hi2s
->
RxX„rCou¡
--;

493 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

496 
	`__HAL_UNLOCK
(
hi2s
);

498  
HAL_OK
;

502  
HAL_BUSY
;

504 
	}
}

521 
HAL_SètusTy≥Def
 
	$HAL_I2SEx_TønsmôRe˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pTxD©a
, uöt16_à*
pRxD©a
, uöt16_à
Size
)

523 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

525 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

527 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

529  
HAL_ERROR
;

532 
hi2s
->
pTxBuffPå
 = 
pTxD©a
;

533 
hi2s
->
pRxBuffPå
 = 
pRxD©a
;

535 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

536 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

541 if((
tmp1
 =
I2S_DATAFORMAT_24B
)||\

542 (
tmp2
 =
I2S_DATAFORMAT_32B
))

544 
hi2s
->
TxX„rSize
 = 
Size
*2;

545 
hi2s
->
TxX„rCou¡
 = 
Size
*2;

546 
hi2s
->
RxX„rSize
 = 
Size
*2;

547 
hi2s
->
RxX„rCou¡
 = 
Size
*2;

551 
hi2s
->
TxX„rSize
 = 
Size
;

552 
hi2s
->
TxX„rCou¡
 = 
Size
;

553 
hi2s
->
RxX„rSize
 = 
Size
;

554 
hi2s
->
RxX„rCou¡
 = 
Size
;

558 
	`__HAL_LOCK
(
hi2s
);

560 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX_RX
;

561 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

563 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

564 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

566 if((
tmp1
 =
I2S_MODE_MASTER_TX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_TX
))

569 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 |(
I2S_IT_RXNE
 | 
I2S_IT_ERR
);

572 
	`__HAL_I2S_ENABLE_IT
(
hi2s
, (
I2S_IT_TXE
 | 
I2S_IT_ERR
));

575 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

578 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

581 
	`__HAL_I2S_ENABLE
(
hi2s
);

588 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 |(
I2S_IT_TXE
 |
I2S_IT_ERR
);

591 
	`__HAL_I2S_ENABLE_IT
(
hi2s
, (
I2S_IT_RXNE
 | 
I2S_IT_ERR
));

594 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

597 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_MASTER_RX
)

600 if(
hi2s
->
TxX„rCou¡
 != 0)

603 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
DR
 = (*hi2s->
pTxBuffPå
++);

604 
hi2s
->
TxX„rCou¡
--;

606 if(
hi2s
->
TxX„rCou¡
 == 0)

609 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &~
I2S_IT_TXE
;

614 
	`__HAL_I2S_ENABLE
(
hi2s
);

617 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

621 
	`__HAL_UNLOCK
(
hi2s
);

623  
HAL_OK
;

627  
HAL_BUSY
;

629 
	}
}

646 
HAL_SètusTy≥Def
 
	$HAL_I2SEx_TønsmôRe˚ive_DMA
(
I2S_H™dÀTy≥Def
 *
hi2s
, 
uöt16_t
 *
pTxD©a
, uöt16_à*
pRxD©a
, uöt16_à
Size
)

648 
uöt32_t
 *
tmp
;

649 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

651 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

653  
HAL_ERROR
;

656 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_READY
)

658 
hi2s
->
pTxBuffPå
 = 
pTxD©a
;

659 
hi2s
->
pRxBuffPå
 = 
pRxD©a
;

661 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

662 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & (
SPI_I2SCFGR_DATLEN
 | 
SPI_I2SCFGR_CHLEN
);

667 if((
tmp1
 =
I2S_DATAFORMAT_24B
)||\

668 (
tmp2
 =
I2S_DATAFORMAT_32B
))

670 
hi2s
->
TxX„rSize
 = 
Size
*2;

671 
hi2s
->
TxX„rCou¡
 = 
Size
*2;

672 
hi2s
->
RxX„rSize
 = 
Size
*2;

673 
hi2s
->
RxX„rCou¡
 = 
Size
*2;

677 
hi2s
->
TxX„rSize
 = 
Size
;

678 
hi2s
->
TxX„rCou¡
 = 
Size
;

679 
hi2s
->
RxX„rSize
 = 
Size
;

680 
hi2s
->
RxX„rCou¡
 = 
Size
;

684 
	`__HAL_LOCK
(
hi2s
);

686 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_BUSY_TX_RX
;

687 
hi2s
->
Eº‹Code
 = 
HAL_I2S_ERROR_NONE
;

690 
hi2s
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
I2S_DMARxHÆfC∂t
;

693 
hi2s
->
hdm¨x
->
X„rC∂tCÆlback
 = 
I2S_DMARxC∂t
;

696 
hi2s
->
hdm¨x
->
X„rEº‹CÆlback
 = 
I2S_DMAEº‹
;

699 
hi2s
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
I2S_DMATxHÆfC∂t
;

702 
hi2s
->
hdm©x
->
X„rC∂tCÆlback
 = 
I2S_DMATxC∂t
;

705 
hi2s
->
hdm©x
->
X„rEº‹CÆlback
 = 
I2S_DMAEº‹
;

707 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

708 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

710 if((
tmp1
 =
I2S_MODE_MASTER_TX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_TX
))

713 
tmp
 = (
uöt32_t
*)&
pRxD©a
;

714 
	`HAL_DMA_Sèπ_IT
(
hi2s
->
hdm¨x
, (
uöt32_t
)&
	`I2SxEXT
(hi2s->
In°™˚
)->
DR
, *(uöt32_t*)
tmp
, hi2s->
RxX„rSize
);

717 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 |
SPI_CR2_RXDMAEN
;

720 
tmp
 = (
uöt32_t
*)&
pTxD©a
;

721 
	`HAL_DMA_Sèπ_IT
(
hi2s
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hi2s->
In°™˚
->
DR
, hi2s->
TxX„rSize
);

724 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

727 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

730 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

733 
	`__HAL_I2S_ENABLE
(
hi2s
);

739 
tmp
 = (
uöt32_t
*)&
pTxD©a
;

740 
	`HAL_DMA_Sèπ_IT
(
hi2s
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&
	`I2SxEXT
(hi2s->
In°™˚
)->
DR
, hi2s->
TxX„rSize
);

743 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 |
SPI_CR2_TXDMAEN
;

746 
tmp
 = (
uöt32_t
*)&
pRxD©a
;

747 
	`HAL_DMA_Sèπ_IT
(
hi2s
->
hdm¨x
, (
uöt32_t
)&hi2s->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, hi2s->
RxX„rSize
);

750 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

753 if((
hi2s
->
In°™˚
->
I2SCFGR
 &
SPI_I2SCFGR_I2SE
) != SPI_I2SCFGR_I2SE)

756 
	`__HAL_I2S_ENABLE
(
hi2s
);

759 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

764 if((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
Ë=
I2S_MODE_MASTER_RX
)

768 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

774 
	`__HAL_UNLOCK
(
hi2s
);

776  
HAL_OK
;

780  
HAL_BUSY
;

782 
	}
}

790 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMAPau£
(
I2S_H™dÀTy≥Def
 *
hi2s
)

793 
	`__HAL_LOCK
(
hi2s
);

795 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

798 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

800 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

803 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

805 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX_RX
)

807 if((
hi2s
->
Inô
.
Mode
 =
I2S_MODE_SLAVE_TX
)||(hi2s->Inô.Modê=
I2S_MODE_MASTER_TX
))

810 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

812 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

817 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

819 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

824 
	`__HAL_UNLOCK
(
hi2s
);

826  
HAL_OK
;

827 
	}
}

835 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMAResume
(
I2S_H™dÀTy≥Def
 *
hi2s
)

838 
	`__HAL_LOCK
(
hi2s
);

840 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

843 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

845 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

848 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

850 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX_RX
)

852 if((
hi2s
->
Inô
.
Mode
 =
I2S_MODE_SLAVE_TX
)||(hi2s->Inô.Modê=
I2S_MODE_MASTER_TX
))

855 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

857 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 |
SPI_CR2_RXDMAEN
;

862 
hi2s
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

864 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 |
SPI_CR2_TXDMAEN
;

869 i‡((
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SE
) == 0)

872 
	`__HAL_I2S_ENABLE
(
hi2s
);

876 
	`__HAL_UNLOCK
(
hi2s
);

878  
HAL_OK
;

879 
	}
}

887 
HAL_SètusTy≥Def
 
	$HAL_I2S_DMASt›
(
I2S_H™dÀTy≥Def
 *
hi2s
)

890 
	`__HAL_LOCK
(
hi2s
);

893 
hi2s
->
In°™˚
->
CR2
 &~
SPI_CR2_TXDMAEN
;

894 
hi2s
->
In°™˚
->
CR2
 &~
SPI_CR2_RXDMAEN
;

896 if(
hi2s
->
Inô
.
FuŒDu∂exMode
 =
I2S_FULLDUPLEXMODE_ENABLE
)

899 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

900 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

904 if(
hi2s
->
hdm©x
 !
NULL
)

906 
	`HAL_DMA_Ab‹t
(
hi2s
->
hdm©x
);

909 if(
hi2s
->
hdm¨x
 !
NULL
)

911 
	`HAL_DMA_Ab‹t
(
hi2s
->
hdm¨x
);

915 
	`__HAL_I2S_DISABLE
(
hi2s
);

917 if(
hi2s
->
Inô
.
FuŒDu∂exMode
 =
I2S_FULLDUPLEXMODE_ENABLE
)

920 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
I2SCFGR
 &~
SPI_I2SCFGR_I2SE
;

922 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

925 
	`__HAL_UNLOCK
(
hi2s
);

927  
HAL_OK
;

928 
	}
}

936 
	$HAL_I2S_IRQH™dÀr
(
I2S_H™dÀTy≥Def
 *
hi2s
)

938 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

939 
__IO
 
uöt32_t
 
tm¥eg1
 = 0;

940 if(
hi2s
->
Inô
.
FuŒDu∂exMode
 !
I2S_FULLDUPLEXMODE_ENABLE
)

942 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_RX
)

944 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_RXNE
);

945 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_RXNE
);

947 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

949 
	`I2S_Re˚ive_IT
(
hi2s
);

952 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_OVR
);

953 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_ERR
);

955 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

957 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

958 
hi2s
->
Eº‹Code
 |
HAL_I2S_ERROR_OVR
;

962 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX
)

964 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_TXE
);

965 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_TXE
);

967 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

969 
	`I2S_Tønsmô_IT
(
hi2s
);

972 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_UDR
);

973 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_ERR
);

975 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

977 
	`__HAL_I2S_CLEAR_UDRFLAG
(
hi2s
);

978 
hi2s
->
Eº‹Code
 |
HAL_I2S_ERROR_UDR
;

984 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

985 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

987 if((
tmp1
 =
I2S_MODE_MASTER_TX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_TX
))

989 
tmp1
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
 & 
SPI_SR_RXNE
;

990 
tmp2
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 & 
I2S_IT_RXNE
;

992 if((
tmp1
 =
SPI_SR_RXNE
Ë&& (
tmp2
 =
I2S_IT_RXNE
))

994 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

995 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

998 if((
tmp1
 =
I2S_MODE_MASTER_TX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_TX
))

1000 
	`I2SEx_TønsmôRe˚ive_IT
(
hi2s
);

1004 
tmp1
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
 & 
SPI_SR_OVR
;

1005 
tmp2
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 & 
I2S_IT_ERR
;

1007 if((
tmp1
 =
SPI_SR_OVR
Ë&& (
tmp2
 =
I2S_IT_ERR
))

1010 
tm¥eg1
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
DR
;

1011 
tm¥eg1
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
;

1012 
hi2s
->
Eº‹Code
 |
HAL_I2SEX_ERROR_OVR
;

1013 
	`UNUSED
(
tm¥eg1
);

1016 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_TXE
);

1017 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_TXE
);

1019 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1021 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

1022 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

1025 if((
tmp1
 =
I2S_MODE_MASTER_TX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_TX
))

1027 
	`I2SEx_TønsmôRe˚ive_IT
(
hi2s
);

1031 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_UDR
);

1032 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_ERR
);

1034 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1036 
	`__HAL_I2S_CLEAR_UDRFLAG
(
hi2s
);

1037 
hi2s
->
Eº‹Code
 |
HAL_I2S_ERROR_UDR
;

1043 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_RXNE
);

1044 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_RXNE
);

1046 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1048 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

1049 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

1052 if((
tmp1
 =
I2S_MODE_MASTER_RX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_RX
))

1054 
	`I2SEx_TønsmôRe˚ive_IT
(
hi2s
);

1058 
tmp1
 = 
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_OVR
);

1059 
tmp2
 = 
	`__HAL_I2S_GET_IT_SOURCE
(
hi2s
, 
I2S_IT_ERR
);

1061 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1063 
	`__HAL_I2S_CLEAR_OVRFLAG
(
hi2s
);

1064 
hi2s
->
Eº‹Code
 |
HAL_I2S_ERROR_OVR
;

1067 
tmp1
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
 & 
SPI_SR_TXE
;

1068 
tmp2
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 & 
I2S_IT_TXE
;

1070 if((
tmp1
 =
SPI_SR_TXE
Ë&& (
tmp2
 =
I2S_IT_TXE
))

1072 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

1073 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

1076 if((
tmp1
 =
I2S_MODE_MASTER_RX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_RX
))

1078 
	`I2SEx_TønsmôRe˚ive_IT
(
hi2s
);

1082 
tmp1
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
 & 
SPI_SR_UDR
;

1083 
tmp2
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 & 
I2S_IT_ERR
;

1085 if((
tmp1
 =
SPI_SR_UDR
Ë&& (
tmp2
 =
I2S_IT_ERR
))

1088 
tm¥eg1
 = 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
;

1089 
hi2s
->
Eº‹Code
 |
HAL_I2SEX_ERROR_UDR
;

1090 
	`UNUSED
(
tm¥eg1
);

1096 if(
hi2s
->
Eº‹Code
 !
HAL_I2S_ERROR_NONE
)

1099 
hi2s
->
Sèã

HAL_I2S_STATE_READY
;

1100 
	`HAL_I2S_Eº‹CÆlback
(
hi2s
);

1102 
	}
}

1114 
HAL_SètusTy≥Def
 
	$I2SEx_TønsmôRe˚ive_IT
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1116 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1118 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX_RX
)

1121 
	`__HAL_LOCK
(
hi2s
);

1123 
tmp1
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

1124 
tmp2
 = 
hi2s
->
In°™˚
->
I2SCFGR
 & 
SPI_I2SCFGR_I2SCFG
;

1126 if((
tmp1
 =
I2S_MODE_MASTER_TX
Ë|| (
tmp2
 =
I2S_MODE_SLAVE_TX
))

1128 if(
hi2s
->
TxX„rCou¡
 != 0)

1130 if(
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_TXE
Ë!
RESET
)

1133 
hi2s
->
In°™˚
->
DR
 = (*hi2s->
pTxBuffPå
++);

1134 
hi2s
->
TxX„rCou¡
--;

1136 if(
hi2s
->
TxX„rCou¡
 == 0)

1139 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, 
I2S_IT_TXE
);

1144 if(
hi2s
->
RxX„rCou¡
 != 0)

1146 if((
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
 & 
SPI_SR_RXNE
) == SPI_SR_RXNE)

1149 (*
hi2s
->
pRxBuffPå
++Ë
	`I2SxEXT
(hi2s->
In°™˚
)->
DR
;

1150 
hi2s
->
RxX„rCou¡
--;

1152 if(
hi2s
->
RxX„rCou¡
 == 0)

1155 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &~
I2S_IT_RXNE
;

1163 if(
hi2s
->
TxX„rCou¡
 != 0)

1165 if((
	`I2SxEXT
(
hi2s
->
In°™˚
)->
SR
 & 
SPI_SR_TXE
) == SPI_SR_TXE)

1168 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
DR
 = (*hi2s->
pTxBuffPå
++);

1169 
hi2s
->
TxX„rCou¡
--;

1171 if(
hi2s
->
TxX„rCou¡
 == 0)

1174 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &~
I2S_IT_TXE
;

1176 
	`HAL_I2S_TxC∂tCÆlback
(
hi2s
);

1180 if(
hi2s
->
RxX„rCou¡
 != 0)

1182 if(
	`__HAL_I2S_GET_FLAG
(
hi2s
, 
I2S_FLAG_RXNE
Ë!
RESET
)

1185 (*
hi2s
->
pRxBuffPå
++Ëhi2s->
In°™˚
->
DR
;

1186 
hi2s
->
RxX„rCou¡
--;

1188 if(
hi2s
->
RxX„rCou¡
 == 0)

1191 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, 
I2S_IT_RXNE
);

1193 
	`HAL_I2S_RxC∂tCÆlback
(
hi2s
);

1199 
tmp1
 = 
hi2s
->
RxX„rCou¡
;

1200 
tmp2
 = 
hi2s
->
TxX„rCou¡
;

1201 if((
tmp1
 =0Ë&& (
tmp2
 == 0))

1204 
	`__HAL_I2S_DISABLE_IT
(
hi2s
, 
I2S_IT_ERR
);

1206 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &~
I2S_IT_ERR
;

1208 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1212 
	`__HAL_UNLOCK
(
hi2s
);

1214  
HAL_OK
;

1218  
HAL_BUSY
;

1220 
	}
}

1222 
	gSTM32F411xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

1229 
	$I2S_DMATxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1231 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1233 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1235 
hi2s
->
TxX„rCou¡
 = 0;

1238 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

1239 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

1240 
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

1241 
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469xx
) ||\

1242 
	`deföed
(
STM32F479xx
)

1243 if(
hi2s
->
Inô
.
FuŒDu∂exMode
 =
I2S_FULLDUPLEXMODE_ENABLE
)

1246 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

1249 
STM32F469xx
 || 
STM32F479xx
 */

1250 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX_RX
)

1252 if(
hi2s
->
RxX„rCou¡
 == 0)

1254 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1259 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1262 
	`HAL_I2S_TxC∂tCÆlback
(
hi2s
);

1263 
	}
}

1271 
	$I2S_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1273 
I2S_H™dÀTy≥Def
* 
hi2s
 = (I2S_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1275 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1278 
hi2s
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

1279 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

1280 
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

1281 
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F469xx
) ||\

1282 
	`deföed
(
STM32F479xx
)

1283 if(
hi2s
->
Inô
.
FuŒDu∂exMode
 =
I2S_FULLDUPLEXMODE_ENABLE
)

1286 
	`I2SxEXT
(
hi2s
->
In°™˚
)->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

1289 
STM32F469xx
 || 
STM32F479xx
 */

1290 
hi2s
->
RxX„rCou¡
 = 0;

1291 if(
hi2s
->
Sèã
 =
HAL_I2S_STATE_BUSY_TX_RX
)

1293 if(
hi2s
->
TxX„rCou¡
 == 0)

1295 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1300 
hi2s
->
Sèã
 = 
HAL_I2S_STATE_READY
;

1303 
	`HAL_I2S_RxC∂tCÆlback
(
hi2s
);

1304 
	}
}

1312 
uöt32_t
 
	$I2S_GëI≈utClock
(
I2S_H™dÀTy≥Def
 *
hi2s
)

1315 
uöt32_t
 
vcoöput
 = 0;

1317 
uöt32_t
 
vcoouçut
 = 0;

1319 
uöt32_t
 
i2ssour˚˛ock
 = 0;

1322 #i‡
	`deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
)

1323 
hi2s
->
Inô
.
ClockSour˚
)

1325 
I2S_CLOCK_EXTERNAL
 :

1328 
i2ssour˚˛ock
 = 
EXTERNAL_CLOCK_VALUE
;

1331 #i‡
	`deföed
(
STM32F446xx
)

1332 
I2S_CLOCK_PLL
 :

1336 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSE
)

1339 
vcoöput
 = (
uöt32_t
)(
HSE_VALUE
 / (uöt32_t)(
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SM
));

1344 
vcoöput
 = (
uöt32_t
)(
HSI_VALUE
 / (uöt32_t)(
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SM
));

1348 
vcoouçut
 = (
uöt32_t
)(
vcoöput
 * (((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & (RCC_PLLI2SCFGR_PLLI2SN >> 6)));

1350 
i2ssour˚˛ock
 = (
uöt32_t
)(
vcoouçut
 /(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & (RCC_PLLI2SCFGR_PLLI2SR >> 28)));

1354 
I2S_CLOCK_PLLR
 :

1358 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSE
)

1361 
vcoöput
 = (
uöt32_t
)(
HSE_VALUE
 / (uöt32_t)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
));

1366 
vcoöput
 = (
uöt32_t
)(
HSI_VALUE
 / (uöt32_t)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
));

1370 
vcoouçut
 = (
uöt32_t
)(
vcoöput
 * (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6) & (RCC_PLLCFGR_PLLN >> 6)));

1372 
i2ssour˚˛ock
 = (
uöt32_t
)(
vcoouçut
 /(((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLR
) >> 28) & (RCC_PLLCFGR_PLLR >> 28)));

1375 
I2S_CLOCK_PLLSRC
 :

1379 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSE
)

1382 
i2ssour˚˛ock
 = (
uöt32_t
)(
HSE_VALUE
);

1387 
i2ssour˚˛ock
 = (
uöt32_t
)(
HSI_VALUE
);

1398 #i‡
	`deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

1399 
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

1400 
	`deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1404 if(
hi2s
->
Inô
.
ClockSour˚
 =
I2S_CLOCK_EXTERNAL
)

1407 
i2ssour˚˛ock
 = 
EXTERNAL_CLOCK_VALUE
;

1413 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSE
)

1416 
vcoöput
 = (
uöt32_t
)(
HSE_VALUE
 / (uöt32_t)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
));

1421 
vcoöput
 = (
uöt32_t
)(
HSI_VALUE
 / (uöt32_t)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
));

1425 
vcoouçut
 = (
uöt32_t
)(
vcoöput
 * (((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & (RCC_PLLI2SCFGR_PLLI2SN >> 6)));

1427 
i2ssour˚˛ock
 = (
uöt32_t
)(
vcoouçut
 /(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & (RCC_PLLI2SCFGR_PLLI2SR >> 28)));

1431 #i‡
	`deföed
(
STM32F411xE
)

1435 if(
hi2s
->
Inô
.
ClockSour˚
 =
I2S_CLOCK_EXTERNAL
)

1438 
i2ssour˚˛ock
 = 
EXTERNAL_CLOCK_VALUE
;

1444 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSE
)

1447 
vcoöput
 = (
uöt32_t
)(
HSE_VALUE
 / (uöt32_t)(
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SM
));

1452 
vcoöput
 = (
uöt32_t
)(
HSI_VALUE
 / (uöt32_t)(
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SM
));

1456 
vcoouçut
 = (
uöt32_t
)(
vcoöput
 * (((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & (RCC_PLLI2SCFGR_PLLI2SN >> 6)));

1458 
i2ssour˚˛ock
 = (
uöt32_t
)(
vcoouçut
 /(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & (RCC_PLLI2SCFGR_PLLI2SR >> 28)));

1463  
i2ssour˚˛ock
;

1464 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_irda.c

128 
	~"°m32f4xx_hÆ.h
"

139 #ifde‡
HAL_IRDA_MODULE_ENABLED


146 
	#IRDA_TIMEOUT_VALUE
 22000

	)

156 
IRDA_SëC⁄fig
 (
IRDA_H™dÀTy≥Def
 *
húda
);

157 
HAL_SètusTy≥Def
 
IRDA_Tønsmô_IT
(
IRDA_H™dÀTy≥Def
 *
húda
);

158 
HAL_SètusTy≥Def
 
IRDA_EndTønsmô_IT
(
IRDA_H™dÀTy≥Def
 *
húda
);

159 
HAL_SètusTy≥Def
 
IRDA_Re˚ive_IT
(
IRDA_H™dÀTy≥Def
 *
húda
);

160 
IRDA_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

161 
IRDA_DMATønsmôHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

162 
IRDA_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

163 
IRDA_DMARe˚iveHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

164 
IRDA_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

165 
HAL_SètusTy≥Def
 
IRDA_WaôOnFœgU¡ûTimeout
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

213 
HAL_SètusTy≥Def
 
	$HAL_IRDA_Inô
(
IRDA_H™dÀTy≥Def
 *
húda
)

216 if(
húda
 =
NULL
)

218  
HAL_ERROR
;

222 
	`as£π_∑øm
(
	`IS_IRDA_INSTANCE
(
húda
->
In°™˚
));

224 
	`as£π_∑øm
(
	`IS_IRDA_POWERMODE
(
húda
->
Inô
.
IrDAMode
));

226 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_RESET
)

229 
húda
->
Lock
 = 
HAL_UNLOCKED
;

231 
	`HAL_IRDA_M•Inô
(
húda
);

234 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY
;

237 
	`__HAL_IRDA_DISABLE
(
húda
);

240 
	`IRDA_SëC⁄fig
(
húda
);

245 
húda
->
In°™˚
->
CR2
 &~(
USART_CR2_LINEN
 | 
USART_CR2_STOP
 | 
USART_CR2_CLKEN
);

246 
húda
->
In°™˚
->
CR3
 &~(
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
);

249 
	`__HAL_IRDA_ENABLE
(
húda
);

252 
	`MODIFY_REG
(
húda
->
In°™˚
->
GTPR
, 
USART_GTPR_PSC
, húda->
Inô
.
PªsˇÀr
);

255 
	`MODIFY_REG
(
húda
->
In°™˚
->
CR3
, 
USART_CR3_IRLP
, húda->
Inô
.
IrDAMode
);

258 
húda
->
In°™˚
->
CR3
 |
USART_CR3_IREN
;

261 
húda
->
Eº‹Code
 = 
HAL_IRDA_ERROR_NONE
;

262 
húda
->
Sèã

HAL_IRDA_STATE_READY
;

264  
HAL_OK
;

265 
	}
}

273 
HAL_SètusTy≥Def
 
	$HAL_IRDA_DeInô
(
IRDA_H™dÀTy≥Def
 *
húda
)

276 if(
húda
 =
NULL
)

278  
HAL_ERROR
;

282 
	`as£π_∑øm
(
	`IS_IRDA_INSTANCE
(
húda
->
In°™˚
));

284 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY
;

287 
	`__HAL_IRDA_DISABLE
(
húda
);

290 
	`HAL_IRDA_M•DeInô
(
húda
);

292 
húda
->
Eº‹Code
 = 
HAL_IRDA_ERROR_NONE
;

294 
húda
->
Sèã
 = 
HAL_IRDA_STATE_RESET
;

297 
	`__HAL_UNLOCK
(
húda
);

299  
HAL_OK
;

300 
	}
}

308 
__wók
 
	$HAL_IRDA_M•Inô
(
IRDA_H™dÀTy≥Def
 *
húda
)

313 
	}
}

321 
__wók
 
	$HAL_IRDA_M•DeInô
(
IRDA_H™dÀTy≥Def
 *
húda
)

326 
	}
}

391 
HAL_SètusTy≥Def
 
	$HAL_IRDA_Tønsmô
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

393 
uöt16_t
* 
tmp
;

394 
uöt32_t
 
tmp1
 = 0;

396 
tmp1
 = 
húda
->
Sèã
;

397 if((
tmp1
 =
HAL_IRDA_STATE_READY
Ë|| (tmp1 =
HAL_IRDA_STATE_BUSY_RX
))

399 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

401  
HAL_ERROR
;

405 
	`__HAL_LOCK
(
húda
);

407 
húda
->
Eº‹Code
 = 
HAL_IRDA_ERROR_NONE
;

408 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_RX
)

410 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX_RX
;

414 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX
;

417 
húda
->
TxX„rSize
 = 
Size
;

418 
húda
->
TxX„rCou¡
 = 
Size
;

419 
húda
->
TxX„rCou¡
 > 0)

421 
húda
->
TxX„rCou¡
--;

422 if(
húda
->
Inô
.
W‹dLígth
 =
IRDA_WORDLENGTH_9B
)

424 if(
	`IRDA_WaôOnFœgU¡ûTimeout
(
húda
, 
IRDA_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

426  
HAL_TIMEOUT
;

428 
tmp
 = (
uöt16_t
*Ë
pD©a
;

429 
húda
->
In°™˚
->
DR
 = (*
tmp
 & (
uöt16_t
)0x01FF);

430 if(
húda
->
Inô
.
P¨ôy
 =
IRDA_PARITY_NONE
)

432 
pD©a
 +=2;

436 
pD©a
 +=1;

441 if(
	`IRDA_WaôOnFœgU¡ûTimeout
(
húda
, 
IRDA_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

443  
HAL_TIMEOUT
;

445 
húda
->
In°™˚
->
DR
 = (*
pD©a
++ & (
uöt8_t
)0xFF);

449 if(
	`IRDA_WaôOnFœgU¡ûTimeout
(
húda
, 
IRDA_FLAG_TC
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

451  
HAL_TIMEOUT
;

454 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX_RX
)

456 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_RX
;

460 
húda
->
Sèã
 = 
HAL_IRDA_STATE_READY
;

464 
	`__HAL_UNLOCK
(
húda
);

466  
HAL_OK
;

470  
HAL_BUSY
;

472 
	}
}

483 
HAL_SètusTy≥Def
 
	$HAL_IRDA_Re˚ive
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

485 
uöt16_t
* 
tmp
;

486 
uöt32_t
 
tmp1
 = 0;

488 
tmp1
 = 
húda
->
Sèã
;

489 if((
tmp1
 =
HAL_IRDA_STATE_READY
Ë|| (tmp1 =
HAL_IRDA_STATE_BUSY_TX
))

491 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

493  
HAL_ERROR
;

497 
	`__HAL_LOCK
(
húda
);

499 
húda
->
Eº‹Code
 = 
HAL_IRDA_ERROR_NONE
;

500 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX
)

502 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX_RX
;

506 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_RX
;

508 
húda
->
RxX„rSize
 = 
Size
;

509 
húda
->
RxX„rCou¡
 = 
Size
;

511 
húda
->
RxX„rCou¡
 > 0)

513 
húda
->
RxX„rCou¡
--;

514 if(
húda
->
Inô
.
W‹dLígth
 =
IRDA_WORDLENGTH_9B
)

516 if(
	`IRDA_WaôOnFœgU¡ûTimeout
(
húda
, 
IRDA_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

518  
HAL_TIMEOUT
;

520 
tmp
 = (
uöt16_t
*Ë
pD©a
 ;

521 if(
húda
->
Inô
.
P¨ôy
 =
IRDA_PARITY_NONE
)

523 *
tmp
 = (
uöt16_t
)(
húda
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

524 
pD©a
 +=2;

528 *
tmp
 = (
uöt16_t
)(
húda
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

529 
pD©a
 +=1;

534 if(
	`IRDA_WaôOnFœgU¡ûTimeout
(
húda
, 
IRDA_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

536  
HAL_TIMEOUT
;

538 if(
húda
->
Inô
.
P¨ôy
 =
IRDA_PARITY_NONE
)

540 *
pD©a
++ = (
uöt8_t
)(
húda
->
In°™˚
->
DR
 & (uint8_t)0x00FF);

544 *
pD©a
++ = (
uöt8_t
)(
húda
->
In°™˚
->
DR
 & (uint8_t)0x007F);

548 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX_RX
)

550 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX
;

554 
húda
->
Sèã
 = 
HAL_IRDA_STATE_READY
;

558 
	`__HAL_UNLOCK
(
húda
);

560  
HAL_OK
;

564  
HAL_BUSY
;

566 
	}
}

576 
HAL_SètusTy≥Def
 
	$HAL_IRDA_Tønsmô_IT
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

578 
uöt32_t
 
tmp1
 = 0;

580 
tmp1
 = 
húda
->
Sèã
;

581 if((
tmp1
 =
HAL_IRDA_STATE_READY
Ë|| (tmp1 =
HAL_IRDA_STATE_BUSY_RX
))

583 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

585  
HAL_ERROR
;

588 
	`__HAL_LOCK
(
húda
);

590 
húda
->
pTxBuffPå
 = 
pD©a
;

591 
húda
->
TxX„rSize
 = 
Size
;

592 
húda
->
TxX„rCou¡
 = 
Size
;

593 
húda
->
Eº‹Code
 = 
HAL_IRDA_ERROR_NONE
;

594 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_RX
)

596 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX_RX
;

600 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX
;

604 
	`__HAL_UNLOCK
(
húda
);

607 
	`__HAL_IRDA_ENABLE_IT
(
húda
, 
IRDA_IT_ERR
);

610 
	`__HAL_IRDA_ENABLE_IT
(
húda
, 
IRDA_IT_TXE
);

612  
HAL_OK
;

616  
HAL_BUSY
;

618 
	}
}

628 
HAL_SètusTy≥Def
 
	$HAL_IRDA_Re˚ive_IT
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

630 
uöt32_t
 
tmp1
 = 0;

632 
tmp1
 = 
húda
->
Sèã
;

633 if((
tmp1
 =
HAL_IRDA_STATE_READY
Ë|| (tmp1 =
HAL_IRDA_STATE_BUSY_TX
))

635 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

637  
HAL_ERROR
;

641 
	`__HAL_LOCK
(
húda
);

643 
húda
->
pRxBuffPå
 = 
pD©a
;

644 
húda
->
RxX„rSize
 = 
Size
;

645 
húda
->
RxX„rCou¡
 = 
Size
;

646 
húda
->
Eº‹Code
 = 
HAL_IRDA_ERROR_NONE
;

647 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX
)

649 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX_RX
;

653 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_RX
;

657 
	`__HAL_UNLOCK
(
húda
);

660 
	`__HAL_IRDA_ENABLE_IT
(
húda
, 
IRDA_IT_RXNE
);

663 
	`__HAL_IRDA_ENABLE_IT
(
húda
, 
IRDA_IT_PE
);

666 
	`__HAL_IRDA_ENABLE_IT
(
húda
, 
IRDA_IT_ERR
);

668  
HAL_OK
;

672  
HAL_BUSY
;

674 
	}
}

684 
HAL_SètusTy≥Def
 
	$HAL_IRDA_Tønsmô_DMA
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

686 
uöt32_t
 *
tmp
;

687 
uöt32_t
 
tmp1
 = 0;

689 
tmp1
 = 
húda
->
Sèã
;

690 if((
tmp1
 =
HAL_IRDA_STATE_READY
Ë|| (tmp1 =
HAL_IRDA_STATE_BUSY_RX
))

692 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

694  
HAL_ERROR
;

698 
	`__HAL_LOCK
(
húda
);

700 
húda
->
pTxBuffPå
 = 
pD©a
;

701 
húda
->
TxX„rSize
 = 
Size
;

702 
húda
->
TxX„rCou¡
 = 
Size
;

703 
húda
->
Eº‹Code
 = 
HAL_IRDA_ERROR_NONE
;

705 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_RX
)

707 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX_RX
;

711 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX
;

715 
húda
->
hdm©x
->
X„rC∂tCÆlback
 = 
IRDA_DMATønsmôC∂t
;

718 
húda
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
IRDA_DMATønsmôHÆfC∂t
;

721 
húda
->
hdm©x
->
X„rEº‹CÆlback
 = 
IRDA_DMAEº‹
;

724 
tmp
 = (
uöt32_t
*)&
pD©a
;

725 
	`HAL_DMA_Sèπ_IT
(
húda
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&húda->
In°™˚
->
DR
, 
Size
);

728 
	`__HAL_IRDA_CLEAR_FLAG
(
húda
, 
IRDA_FLAG_TC
);

732 
húda
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

735 
	`__HAL_UNLOCK
(
húda
);

737  
HAL_OK
;

741  
HAL_BUSY
;

743 
	}
}

754 
HAL_SètusTy≥Def
 
	$HAL_IRDA_Re˚ive_DMA
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

756 
uöt32_t
 *
tmp
;

757 
uöt32_t
 
tmp1
 = 0;

759 
tmp1
 = 
húda
->
Sèã
;

760 if((
tmp1
 =
HAL_IRDA_STATE_READY
Ë|| (tmp1 =
HAL_IRDA_STATE_BUSY_TX
))

762 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

764  
HAL_ERROR
;

768 
	`__HAL_LOCK
(
húda
);

770 
húda
->
pRxBuffPå
 = 
pD©a
;

771 
húda
->
RxX„rSize
 = 
Size
;

772 
húda
->
Eº‹Code
 = 
HAL_IRDA_ERROR_NONE
;

773 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX
)

775 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX_RX
;

779 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_RX
;

783 
húda
->
hdm¨x
->
X„rC∂tCÆlback
 = 
IRDA_DMARe˚iveC∂t
;

786 
húda
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
IRDA_DMARe˚iveHÆfC∂t
;

789 
húda
->
hdm¨x
->
X„rEº‹CÆlback
 = 
IRDA_DMAEº‹
;

792 
tmp
 = (
uöt32_t
*)&
pD©a
;

793 
	`HAL_DMA_Sèπ_IT
(
húda
->
hdm¨x
, (
uöt32_t
)&húda->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, 
Size
);

797 
húda
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

800 
	`__HAL_UNLOCK
(
húda
);

802  
HAL_OK
;

806  
HAL_BUSY
;

808 
	}
}

816 
HAL_SètusTy≥Def
 
	$HAL_IRDA_DMAPau£
(
IRDA_H™dÀTy≥Def
 *
húda
)

819 
	`__HAL_LOCK
(
húda
);

821 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX
)

824 
húda
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAT
);

826 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_RX
)

829 
húda
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAR
);

831 i‡(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX_RX
)

834 
húda
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAT
);

835 
húda
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAR
);

840 
	`__HAL_UNLOCK
(
húda
);

842  
HAL_ERROR
;

846 
	`__HAL_UNLOCK
(
húda
);

848  
HAL_OK
;

849 
	}
}

857 
HAL_SètusTy≥Def
 
	$HAL_IRDA_DMAResume
(
IRDA_H™dÀTy≥Def
 *
húda
)

860 
	`__HAL_LOCK
(
húda
);

862 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX
)

865 
húda
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

867 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_RX
)

870 
	`__HAL_IRDA_CLEAR_OREFLAG
(
húda
);

872 
húda
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

874 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX_RX
)

877 
	`__HAL_IRDA_CLEAR_OREFLAG
(
húda
);

879 
húda
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

880 
húda
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

885 
	`__HAL_UNLOCK
(
húda
);

887  
HAL_ERROR
;

891 
	`__HAL_UNLOCK
(
húda
);

893  
HAL_OK
;

894 
	}
}

902 
HAL_SètusTy≥Def
 
	$HAL_IRDA_DMASt›
(
IRDA_H™dÀTy≥Def
 *
húda
)

911 
húda
->
In°™˚
->
CR3
 &~
USART_CR3_DMAT
;

912 
húda
->
In°™˚
->
CR3
 &~
USART_CR3_DMAR
;

915 if(
húda
->
hdm©x
 !
NULL
)

917 
	`HAL_DMA_Ab‹t
(
húda
->
hdm©x
);

920 if(
húda
->
hdm¨x
 !
NULL
)

922 
	`HAL_DMA_Ab‹t
(
húda
->
hdm¨x
);

925 
húda
->
Sèã
 = 
HAL_IRDA_STATE_READY
;

927  
HAL_OK
;

928 
	}
}

936 
	$HAL_IRDA_IRQH™dÀr
(
IRDA_H™dÀTy≥Def
 *
húda
)

938 
uöt32_t
 
tmp1
 = 0, 
tmp2
 =0;

940 
tmp1
 = 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
IRDA_FLAG_PE
);

941 
tmp2
 = 
	`__HAL_IRDA_GET_IT_SOURCE
(
húda
, 
IRDA_IT_PE
);

943 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

945 
	`__HAL_IRDA_CLEAR_PEFLAG
(
húda
);

946 
húda
->
Eº‹Code
 |
HAL_IRDA_ERROR_PE
;

949 
tmp1
 = 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
IRDA_FLAG_FE
);

950 
tmp2
 = 
	`__HAL_IRDA_GET_IT_SOURCE
(
húda
, 
IRDA_IT_ERR
);

952 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

954 
	`__HAL_IRDA_CLEAR_FEFLAG
(
húda
);

955 
húda
->
Eº‹Code
 |
HAL_IRDA_ERROR_FE
;

958 
tmp1
 = 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
IRDA_FLAG_NE
);

959 
tmp2
 = 
	`__HAL_IRDA_GET_IT_SOURCE
(
húda
, 
IRDA_IT_ERR
);

961 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

963 
	`__HAL_IRDA_CLEAR_NEFLAG
(
húda
);

964 
húda
->
Eº‹Code
 |
HAL_IRDA_ERROR_NE
;

967 
tmp1
 = 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
IRDA_FLAG_ORE
);

968 
tmp2
 = 
	`__HAL_IRDA_GET_IT_SOURCE
(
húda
, 
IRDA_IT_ERR
);

970 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

972 
	`__HAL_IRDA_CLEAR_OREFLAG
(
húda
);

973 
húda
->
Eº‹Code
 |
HAL_IRDA_ERROR_ORE
;

977 if(
húda
->
Eº‹Code
 !
HAL_IRDA_ERROR_NONE
)

980 
húda
->
Sèã
 = 
HAL_IRDA_STATE_READY
;

981 
	`HAL_IRDA_Eº‹CÆlback
(
húda
);

984 
tmp1
 = 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
IRDA_FLAG_RXNE
);

985 
tmp2
 = 
	`__HAL_IRDA_GET_IT_SOURCE
(
húda
, 
IRDA_IT_RXNE
);

987 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

989 
	`IRDA_Re˚ive_IT
(
húda
);

992 
tmp1
 = 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
IRDA_FLAG_TXE
);

993 
tmp2
 = 
	`__HAL_IRDA_GET_IT_SOURCE
(
húda
, 
IRDA_IT_TXE
);

995 if((
tmp1
 !
RESET
Ë&&(
tmp2
 != RESET))

997 
	`IRDA_Tønsmô_IT
(
húda
);

1000 
tmp1
 = 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
IRDA_FLAG_TC
);

1001 
tmp2
 = 
	`__HAL_IRDA_GET_IT_SOURCE
(
húda
, 
IRDA_IT_TC
);

1003 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1005 
	`IRDA_EndTønsmô_IT
(
húda
);

1007 
	}
}

1015 
__wók
 
	$HAL_IRDA_TxC∂tCÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
)

1020 
	}
}

1028 
__wók
 
	$HAL_IRDA_TxHÆfC∂tCÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
)

1033 
	}
}

1041 
__wók
 
	$HAL_IRDA_RxC∂tCÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
)

1046 
	}
}

1054 
__wók
 
	$HAL_IRDA_RxHÆfC∂tCÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
)

1059 
	}
}

1067 
__wók
 
	$HAL_IRDA_Eº‹CÆlback
(
IRDA_H™dÀTy≥Def
 *
húda
)

1072 
	}
}

1101 
HAL_IRDA_SèãTy≥Def
 
	$HAL_IRDA_GëSèã
(
IRDA_H™dÀTy≥Def
 *
húda
)

1103  
húda
->
Sèã
;

1104 
	}
}

1112 
uöt32_t
 
	$HAL_IRDA_GëEº‹
(
IRDA_H™dÀTy≥Def
 *
húda
)

1114  
húda
->
Eº‹Code
;

1115 
	}
}

1126 
	$IRDA_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1128 
IRDA_H™dÀTy≥Def
* 
húda
 = ( IRDA_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1130 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1132 
húda
->
TxX„rCou¡
 = 0;

1136 
húda
->
In°™˚
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_DMAT
);

1139 
	`__HAL_IRDA_ENABLE_IT
(
húda
, 
IRDA_IT_TC
);

1144 
	`HAL_IRDA_TxC∂tCÆlback
(
húda
);

1146 
	}
}

1154 
	$IRDA_DMATønsmôHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1156 
IRDA_H™dÀTy≥Def
* 
húda
 = ( IRDA_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1158 
	`HAL_IRDA_TxHÆfC∂tCÆlback
(
húda
);

1159 
	}
}

1166 
	$IRDA_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1168 
IRDA_H™dÀTy≥Def
* 
húda
 = ( IRDA_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1170 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1172 
húda
->
RxX„rCou¡
 = 0;

1176 
húda
->
In°™˚
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_DMAR
);

1178 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX_RX
)

1180 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX
;

1184 
húda
->
Sèã
 = 
HAL_IRDA_STATE_READY
;

1188 
	`HAL_IRDA_RxC∂tCÆlback
(
húda
);

1189 
	}
}

1197 
	$IRDA_DMARe˚iveHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1199 
IRDA_H™dÀTy≥Def
* 
húda
 = ( IRDA_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1201 
	`HAL_IRDA_RxHÆfC∂tCÆlback
(
húda
);

1202 
	}
}

1209 
	$IRDA_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1211 
IRDA_H™dÀTy≥Def
* 
húda
 = ( IRDA_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1213 
húda
->
RxX„rCou¡
 = 0;

1214 
húda
->
TxX„rCou¡
 = 0;

1215 
húda
->
Eº‹Code
 |
HAL_IRDA_ERROR_DMA
;

1216 
húda
->
Sèã

HAL_IRDA_STATE_READY
;

1218 
	`HAL_IRDA_Eº‹CÆlback
(
húda
);

1219 
	}
}

1230 
HAL_SètusTy≥Def
 
	$IRDA_WaôOnFœgU¡ûTimeout
(
IRDA_H™dÀTy≥Def
 *
húda
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

1232 
uöt32_t
 
tick°¨t
 = 0;

1235 
tick°¨t
 = 
	`HAL_GëTick
();

1238 if(
Sètus
 =
RESET
)

1240 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
Fœg
Ë=
RESET
)

1243 if(
Timeout
 !
HAL_MAX_DELAY
)

1245 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1248 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_TXE
);

1249 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_RXNE
);

1250 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_PE
);

1251 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_ERR
);

1253 
húda
->
Sèã

HAL_IRDA_STATE_READY
;

1256 
	`__HAL_UNLOCK
(
húda
);

1258  
HAL_TIMEOUT
;

1265 
	`__HAL_IRDA_GET_FLAG
(
húda
, 
Fœg
Ë!
RESET
)

1268 if(
Timeout
 !
HAL_MAX_DELAY
)

1270 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1273 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_TXE
);

1274 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_RXNE
);

1275 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_PE
);

1276 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_ERR
);

1278 
húda
->
Sèã

HAL_IRDA_STATE_READY
;

1281 
	`__HAL_UNLOCK
(
húda
);

1283  
HAL_TIMEOUT
;

1288  
HAL_OK
;

1289 
	}
}

1297 
HAL_SètusTy≥Def
 
	$IRDA_Tønsmô_IT
(
IRDA_H™dÀTy≥Def
 *
húda
)

1299 
uöt16_t
* 
tmp
;

1300 
uöt32_t
 
tmp1
 = 0;

1302 
tmp1
 = 
húda
->
Sèã
;

1303 if((
tmp1
 =
HAL_IRDA_STATE_BUSY_TX
Ë|| (tmp1 =
HAL_IRDA_STATE_BUSY_TX_RX
))

1305 if(
húda
->
Inô
.
W‹dLígth
 =
IRDA_WORDLENGTH_9B
)

1307 
tmp
 = (
uöt16_t
*Ë
húda
->
pTxBuffPå
;

1308 
húda
->
In°™˚
->
DR
 = (
uöt16_t
)(*
tmp
 & (uint16_t)0x01FF);

1309 if(
húda
->
Inô
.
P¨ôy
 =
IRDA_PARITY_NONE
)

1311 
húda
->
pTxBuffPå
 += 2;

1315 
húda
->
pTxBuffPå
 += 1;

1320 
húda
->
In°™˚
->
DR
 = (
uöt8_t
)(*húda->
pTxBuffPå
++ & (uint8_t)0x00FF);

1323 if(--
húda
->
TxX„rCou¡
 == 0)

1326 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_TXE
);

1329 
	`__HAL_IRDA_ENABLE_IT
(
húda
, 
IRDA_IT_TC
);

1332  
HAL_OK
;

1336  
HAL_BUSY
;

1338 
	}
}

1346 
HAL_SètusTy≥Def
 
	$IRDA_EndTønsmô_IT
(
IRDA_H™dÀTy≥Def
 *
húda
)

1349 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_TC
);

1352 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX_RX
)

1354 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_RX
;

1359 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_ERR
);

1361 
húda
->
Sèã
 = 
HAL_IRDA_STATE_READY
;

1364 
	`HAL_IRDA_TxC∂tCÆlback
(
húda
);

1366  
HAL_OK
;

1367 
	}
}

1375 
HAL_SètusTy≥Def
 
	$IRDA_Re˚ive_IT
(
IRDA_H™dÀTy≥Def
 *
húda
)

1377 
uöt16_t
* 
tmp
;

1378 
uöt32_t
 
tmp1
 = 0;

1380 
tmp1
 = 
húda
->
Sèã
;

1381 if((
tmp1
 =
HAL_IRDA_STATE_BUSY_RX
Ë|| (tmp1 =
HAL_IRDA_STATE_BUSY_TX_RX
))

1383 if(
húda
->
Inô
.
W‹dLígth
 =
IRDA_WORDLENGTH_9B
)

1385 
tmp
 = (
uöt16_t
*Ë
húda
->
pRxBuffPå
;

1386 if(
húda
->
Inô
.
P¨ôy
 =
IRDA_PARITY_NONE
)

1388 *
tmp
 = (
uöt16_t
)(
húda
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

1389 
húda
->
pRxBuffPå
 += 2;

1393 *
tmp
 = (
uöt16_t
)(
húda
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

1394 
húda
->
pRxBuffPå
 += 1;

1399 if(
húda
->
Inô
.
P¨ôy
 =
IRDA_PARITY_NONE
)

1401 *
húda
->
pRxBuffPå
++ = (
uöt8_t
)(húda->
In°™˚
->
DR
 & (uint8_t)0x00FF);

1405 *
húda
->
pRxBuffPå
++ = (
uöt8_t
)(húda->
In°™˚
->
DR
 & (uint8_t)0x007F);

1409 if(--
húda
->
RxX„rCou¡
 == 0)

1412 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_RXNE
);

1414 if(
húda
->
Sèã
 =
HAL_IRDA_STATE_BUSY_TX_RX
)

1416 
húda
->
Sèã
 = 
HAL_IRDA_STATE_BUSY_TX
;

1421 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_PE
);

1424 
	`__HAL_IRDA_DISABLE_IT
(
húda
, 
IRDA_IT_ERR
);

1426 
húda
->
Sèã
 = 
HAL_IRDA_STATE_READY
;

1428 
	`HAL_IRDA_RxC∂tCÆlback
(
húda
);

1430  
HAL_OK
;

1432  
HAL_OK
;

1436  
HAL_BUSY
;

1438 
	}
}

1446 
	$IRDA_SëC⁄fig
(
IRDA_H™dÀTy≥Def
 *
húda
)

1448 
uöt32_t
 
tm¥eg
 = 0x00;

1451 
	`as£π_∑øm
(
	`IS_IRDA_INSTANCE
(
húda
->
In°™˚
));

1452 
	`as£π_∑øm
(
	`IS_IRDA_BAUDRATE
(
húda
->
Inô
.
BaudR©e
));

1453 
	`as£π_∑øm
(
	`IS_IRDA_WORD_LENGTH
(
húda
->
Inô
.
W‹dLígth
));

1454 
	`as£π_∑øm
(
	`IS_IRDA_PARITY
(
húda
->
Inô
.
P¨ôy
));

1455 
	`as£π_∑øm
(
	`IS_IRDA_MODE
(
húda
->
Inô
.
Mode
));

1459 
húda
->
In°™˚
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

1462 
tm¥eg
 = 
húda
->
In°™˚
->
CR1
;

1465 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

1466 
USART_CR1_RE
));

1472 
tm¥eg
 |(
uöt32_t
)
húda
->
Inô
.
W‹dLígth
 | húda->Inô.
P¨ôy
 | húda->Inô.
Mode
;

1475 
húda
->
In°™˚
->
CR1
 = (
uöt32_t
)
tm¥eg
;

1479 
húda
->
In°™˚
->
CR3
 &(
uöt32_t
)~((uöt32_t)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

1482 if((
húda
->
In°™˚
 =
USART1
Ë|| (húda->In°™˚ =
USART6
))

1484 
húda
->
In°™˚
->
BRR
 = 
	`IRDA_BRR
(
	`HAL_RCC_GëPCLK2Fªq
(), húda->
Inô
.
BaudR©e
);

1488 
húda
->
In°™˚
->
BRR
 = 
	`IRDA_BRR
(
	`HAL_RCC_GëPCLK1Fªq
(), húda->
Inô
.
BaudR©e
);

1490 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_iwdg.c

113 
	~"°m32f4xx_hÆ.h
"

124 #ifde‡
HAL_IWDG_MODULE_ENABLED


131 
	#IWDG_TIMEOUT_FLAG
 ((
uöt32_t
)1000Ë

	)

168 
HAL_SètusTy≥Def
 
	$HAL_IWDG_Inô
(
IWDG_H™dÀTy≥Def
 *
hiwdg
)

171 if(
hiwdg
 =
NULL
)

173  
HAL_ERROR
;

177 
	`as£π_∑øm
(
	`IS_IWDG_ALL_INSTANCE
(
hiwdg
->
In°™˚
));

178 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
hiwdg
->
Inô
.
PªsˇÀr
));

179 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
hiwdg
->
Inô
.
Rñﬂd
));

181 if(
hiwdg
->
Sèã
 =
HAL_IWDG_STATE_RESET
)

184 
hiwdg
->
Lock
 = 
HAL_UNLOCKED
;

186 
	`HAL_IWDG_M•Inô
(
hiwdg
);

190 
hiwdg
->
Sèã
 = 
HAL_IWDG_STATE_BUSY
;

193 
	`IWDG_ENABLE_WRITE_ACCESS
(
hiwdg
);

196 
	`MODIFY_REG
(
hiwdg
->
In°™˚
->
PR
, 
IWDG_PR_PR
, hiwdg->
Inô
.
PªsˇÀr
);

197 
	`MODIFY_REG
(
hiwdg
->
In°™˚
->
RLR
, 
IWDG_RLR_RL
, hiwdg->
Inô
.
Rñﬂd
);

200 
hiwdg
->
Sèã
 = 
HAL_IWDG_STATE_READY
;

203  
HAL_OK
;

204 
	}
}

212 
__wók
 
	$HAL_IWDG_M•Inô
(
IWDG_H™dÀTy≥Def
 *
hiwdg
)

217 
	}
}

244 
HAL_SètusTy≥Def
 
	$HAL_IWDG_Sèπ
(
IWDG_H™dÀTy≥Def
 *
hiwdg
)

247 
	`__HAL_LOCK
(
hiwdg
);

250 
hiwdg
->
Sèã
 = 
HAL_IWDG_STATE_BUSY
;

253 
	`__HAL_IWDG_START
(
hiwdg
);

256 
	`__HAL_IWDG_RELOAD_COUNTER
(
hiwdg
);

259 
hiwdg
->
Sèã
 = 
HAL_IWDG_STATE_READY
;

262 
	`__HAL_UNLOCK
(
hiwdg
);

265  
HAL_OK
;

266 
	}
}

274 
HAL_SètusTy≥Def
 
	$HAL_IWDG_Re‰esh
(
IWDG_H™dÀTy≥Def
 *
hiwdg
)

276 
uöt32_t
 
tick°¨t
 = 0;

279 
	`__HAL_LOCK
(
hiwdg
);

282 
hiwdg
->
Sèã
 = 
HAL_IWDG_STATE_BUSY
;

284 
tick°¨t
 = 
	`HAL_GëTick
();

287 
	`__HAL_IWDG_GET_FLAG
(
hiwdg
, 
IWDG_FLAG_RVU
Ë!
RESET
)

289 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
IWDG_TIMEOUT_FLAG
)

292 
hiwdg
->
Sèã
 = 
HAL_IWDG_STATE_TIMEOUT
;

295 
	`__HAL_UNLOCK
(
hiwdg
);

297  
HAL_TIMEOUT
;

302 
	`__HAL_IWDG_RELOAD_COUNTER
(
hiwdg
);

305 
hiwdg
->
Sèã
 = 
HAL_IWDG_STATE_READY
;

308 
	`__HAL_UNLOCK
(
hiwdg
);

311  
HAL_OK
;

312 
	}
}

339 
HAL_IWDG_SèãTy≥Def
 
	$HAL_IWDG_GëSèã
(
IWDG_H™dÀTy≥Def
 *
hiwdg
)

341  
hiwdg
->
Sèã
;

342 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_lptim.c

124 
	~"°m32f4xx_hÆ.h
"

135 #ifde‡
HAL_LPTIM_MODULE_ENABLED


136 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

229 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Inô
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

231 
uöt32_t
 
tmpcfgr
 = 0;

234 if(
hÕtim
 =
NULL
)

236  
HAL_ERROR
;

240 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

242 
	`as£π_∑øm
(
	`IS_LPTIM_CLOCK_SOURCE
(
hÕtim
->
Inô
.
Clock
.
Sour˚
));

243 
	`as£π_∑øm
(
	`IS_LPTIM_CLOCK_PRESCALER
(
hÕtim
->
Inô
.
Clock
.
PªsˇÀr
));

244 i‡((
hÕtim
->
Inô
.
Clock
.
Sour˚
Ë=
LPTIM_CLOCKSOURCE_ULPTIM
)

246 
	`as£π_∑øm
(
	`IS_LPTIM_CLOCK_POLARITY
(
hÕtim
->
Inô
.
U…øLowPowîClock
.
Pﬁ¨ôy
));

247 
	`as£π_∑øm
(
	`IS_LPTIM_CLOCK_SAMPLE_TIME
(
hÕtim
->
Inô
.
U…øLowPowîClock
.
Sam∂eTime
));

249 
	`as£π_∑øm
(
	`IS_LPTIM_TRG_SOURCE
(
hÕtim
->
Inô
.
Triggî
.
Sour˚
));

250 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

252 
	`as£π_∑øm
(
	`IS_LPTIM_TRIG_SAMPLE_TIME
(
hÕtim
->
Inô
.
Triggî
.
Sam∂eTime
));

253 
	`as£π_∑øm
(
	`IS_LPTIM_EXT_TRG_POLARITY
(
hÕtim
->
Inô
.
Triggî
.
A˘iveEdge
));

255 
	`as£π_∑øm
(
	`IS_LPTIM_OUTPUT_POLARITY
(
hÕtim
->
Inô
.
OuçutPﬁ¨ôy
));

256 
	`as£π_∑øm
(
	`IS_LPTIM_UPDATE_MODE
(
hÕtim
->
Inô
.
Upd©eMode
));

257 
	`as£π_∑øm
(
	`IS_LPTIM_COUNTER_SOURCE
(
hÕtim
->
Inô
.
Cou¡îSour˚
));

259 if(
hÕtim
->
Sèã
 =
HAL_LPTIM_STATE_RESET
)

262 
hÕtim
->
Lock
 = 
HAL_UNLOCKED
;

264 
	`HAL_LPTIM_M•Inô
(
hÕtim
);

268 
hÕtim
->
Sèã
 = 
HAL_LPTIM_STATE_BUSY
;

271 
tmpcfgr
 = 
hÕtim
->
In°™˚
->
CFGR
;

273 i‡((
hÕtim
->
Inô
.
Clock
.
Sour˚
Ë=
LPTIM_CLOCKSOURCE_ULPTIM
)

275 
tmpcfgr
 &(
uöt32_t
)(~(
LPTIM_CFGR_CKPOL
 | 
LPTIM_CFGR_CKFLT
));

277 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

279 
tmpcfgr
 &(
uöt32_t
)(~ (
LPTIM_CFGR_TRGFLT
 | 
LPTIM_CFGR_TRIGSEL
));

283 
tmpcfgr
 &(
uöt32_t
)(~(
LPTIM_CFGR_CKSEL
 | 
LPTIM_CFGR_TRIGEN
 | 
LPTIM_CFGR_PRELOAD
 |

284 
LPTIM_CFGR_WAVPOL
 | 
LPTIM_CFGR_PRESC
 | 
LPTIM_CFGR_COUNTMODE
 ));

287 
tmpcfgr
 |(
hÕtim
->
Inô
.
Clock
.
Sour˚
 |

288 
hÕtim
->
Inô
.
Clock
.
PªsˇÀr
 |

289 
hÕtim
->
Inô
.
OuçutPﬁ¨ôy
 |

290 
hÕtim
->
Inô
.
Upd©eMode
 |

291 
hÕtim
->
Inô
.
Cou¡îSour˚
);

293 i‡((
hÕtim
->
Inô
.
Clock
.
Sour˚
Ë=
LPTIM_CLOCKSOURCE_ULPTIM
)

295 
tmpcfgr
 |(
hÕtim
->
Inô
.
U…øLowPowîClock
.
Pﬁ¨ôy
 |

296 
hÕtim
->
Inô
.
U…øLowPowîClock
.
Sam∂eTime
);

299 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

302 
tmpcfgr
 |(
hÕtim
->
Inô
.
Triggî
.
Sour˚
 |

303 
hÕtim
->
Inô
.
Triggî
.
A˘iveEdge
 |

304 
hÕtim
->
Inô
.
Triggî
.
Sam∂eTime
);

308 
hÕtim
->
In°™˚
->
CFGR
 = 
tmpcfgr
;

311 
hÕtim
->
Sèã
 = 
HAL_LPTIM_STATE_READY
;

314  
HAL_OK
;

315 
	}
}

322 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_DeInô
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

325 if(
hÕtim
 =
NULL
)

327  
HAL_ERROR
;

331 
hÕtim
->
Sèã
 = 
HAL_LPTIM_STATE_BUSY
;

334 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

337 
	`HAL_LPTIM_M•DeInô
(
hÕtim
);

340 
hÕtim
->
Sèã
 = 
HAL_LPTIM_STATE_RESET
;

343 
	`__HAL_UNLOCK
(
hÕtim
);

346  
HAL_OK
;

347 
	}
}

354 
__wók
 
	$HAL_LPTIM_M•Inô
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

359 
	}
}

366 
__wók
 
	$HAL_LPTIM_M•DeInô
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

371 
	}
}

412 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_PWM_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
)

415 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

416 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

417 
	`as£π_∑øm
(
	`IS_LPTIM_PULSE
(
Pul£
));

420 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

423 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_WAVE
;

426 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

429 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

432 
	`__HAL_LPTIM_COMPARE_SET
(
hÕtim
, 
Pul£
);

435 
	`__HAL_LPTIM_START_CONTINUOUS
(
hÕtim
);

438 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

441  
HAL_OK
;

442 
	}
}

449 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_PWM_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

452 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

455 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

458 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

461 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

464  
HAL_OK
;

465 
	}
}

476 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_PWM_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
)

479 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

480 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

481 
	`as£π_∑øm
(
	`IS_LPTIM_PULSE
(
Pul£
));

484 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

487 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_WAVE
;

490 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_ARROK
);

493 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPOK
);

496 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_ARRM
);

499 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPM
);

502 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

505 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_EXTTRIG
);

509 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

512 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

515 
	`__HAL_LPTIM_COMPARE_SET
(
hÕtim
, 
Pul£
);

518 
	`__HAL_LPTIM_START_CONTINUOUS
(
hÕtim
);

521 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

524  
HAL_OK
;

525 
	}
}

532 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_PWM_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

535 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

538 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

541 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

544 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_ARROK
);

547 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPOK
);

550 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_ARRM
);

553 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPM
);

556 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

559 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_EXTTRIG
);

563 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

566  
HAL_OK
;

567 
	}
}

578 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_O√Pul£_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
)

581 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

582 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

583 
	`as£π_∑øm
(
	`IS_LPTIM_PULSE
(
Pul£
));

586 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

589 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_WAVE
;

592 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

595 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

598 
	`__HAL_LPTIM_COMPARE_SET
(
hÕtim
, 
Pul£
);

601 
	`__HAL_LPTIM_START_SINGLE
(
hÕtim
);

604 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

607  
HAL_OK
;

608 
	}
}

615 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_O√Pul£_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

618 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

621 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

624 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

627 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

630  
HAL_OK
;

631 
	}
}

642 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_O√Pul£_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
)

645 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

646 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

647 
	`as£π_∑øm
(
	`IS_LPTIM_PULSE
(
Pul£
));

650 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

653 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_WAVE
;

656 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_ARROK
);

659 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPOK
);

662 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_ARRM
);

665 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPM
);

668 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

671 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_EXTTRIG
);

675 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

678 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

681 
	`__HAL_LPTIM_COMPARE_SET
(
hÕtim
, 
Pul£
);

684 
	`__HAL_LPTIM_START_SINGLE
(
hÕtim
);

687 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

690  
HAL_OK
;

691 
	}
}

698 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_O√Pul£_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

701 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

704 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

707 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

710 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_ARROK
);

713 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPOK
);

716 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_ARRM
);

719 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPM
);

722 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

725 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_EXTTRIG
);

729 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

732  
HAL_OK
;

733 
	}
}

744 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_SëOn˚_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
)

747 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

748 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

749 
	`as£π_∑øm
(
	`IS_LPTIM_PULSE
(
Pul£
));

752 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

755 
hÕtim
->
In°™˚
->
CFGR
 |
LPTIM_CFGR_WAVE
;

758 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

761 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

764 
	`__HAL_LPTIM_COMPARE_SET
(
hÕtim
, 
Pul£
);

767 
	`__HAL_LPTIM_START_SINGLE
(
hÕtim
);

770 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

773  
HAL_OK
;

774 
	}
}

781 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_SëOn˚_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

784 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

787 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

790 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

793 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

796  
HAL_OK
;

797 
	}
}

808 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_SëOn˚_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Pul£
)

811 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

812 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

813 
	`as£π_∑øm
(
	`IS_LPTIM_PULSE
(
Pul£
));

816 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

819 
hÕtim
->
In°™˚
->
CFGR
 |
LPTIM_CFGR_WAVE
;

822 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_ARROK
);

825 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPOK
);

828 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_ARRM
);

831 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPM
);

834 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

837 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_EXTTRIG
);

841 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

844 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

847 
	`__HAL_LPTIM_COMPARE_SET
(
hÕtim
, 
Pul£
);

850 
	`__HAL_LPTIM_START_SINGLE
(
hÕtim
);

853 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

856  
HAL_OK
;

857 
	}
}

864 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_SëOn˚_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

867 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

870 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

873 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

876 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_ARROK
);

879 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPOK
);

882 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_ARRM
);

885 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPM
);

888 i‡((
hÕtim
->
Inô
.
Triggî
.
Sour˚
Ë!
LPTIM_TRIGSOURCE_SOFTWARE
)

891 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_EXTTRIG
);

895 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

898  
HAL_OK
;

899 
	}
}

908 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Encodî_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
)

910 
uöt32_t
 
tmpcfgr
 = 0;

913 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

914 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

915 
	`as£π_∑øm
(
hÕtim
->
Inô
.
Clock
.
Sour˚
 =
LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC
);

916 
	`as£π_∑øm
(
hÕtim
->
Inô
.
Clock
.
PªsˇÀr
 =
LPTIM_PRESCALER_DIV1
);

917 
	`as£π_∑øm
(
	`IS_LPTIM_CLOCK_POLARITY
(
hÕtim
->
Inô
.
U…øLowPowîClock
.
Pﬁ¨ôy
));

920 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

923 
tmpcfgr
 = 
hÕtim
->
In°™˚
->
CFGR
;

926 
tmpcfgr
 &(
uöt32_t
)(~
LPTIM_CFGR_CKPOL
);

929 
tmpcfgr
 |
hÕtim
->
Inô
.
U…øLowPowîClock
.
Pﬁ¨ôy
;

932 
hÕtim
->
In°™˚
->
CFGR
 = 
tmpcfgr
;

935 
hÕtim
->
In°™˚
->
CFGR
 |
LPTIM_CFGR_ENC
;

938 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

941 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

944 
	`__HAL_LPTIM_START_CONTINUOUS
(
hÕtim
);

947 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

950  
HAL_OK
;

951 
	}
}

958 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Encodî_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

961 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

964 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

967 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

970 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_ENC
;

973 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

976  
HAL_OK
;

977 
	}
}

986 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Encodî_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
)

988 
uöt32_t
 
tmpcfgr
 = 0;

991 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

992 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

993 
	`as£π_∑øm
(
hÕtim
->
Inô
.
Clock
.
Sour˚
 =
LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC
);

994 
	`as£π_∑øm
(
hÕtim
->
Inô
.
Clock
.
PªsˇÀr
 =
LPTIM_PRESCALER_DIV1
);

995 
	`as£π_∑øm
(
	`IS_LPTIM_CLOCK_POLARITY
(
hÕtim
->
Inô
.
U…øLowPowîClock
.
Pﬁ¨ôy
));

998 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1002 
tmpcfgr
 = 
hÕtim
->
In°™˚
->
CFGR
;

1005 
tmpcfgr
 &(
uöt32_t
)(~
LPTIM_CFGR_CKPOL
);

1008 
tmpcfgr
 |
hÕtim
->
Inô
.
U…øLowPowîClock
.
Pﬁ¨ôy
;

1011 
hÕtim
->
In°™˚
->
CFGR
 = 
tmpcfgr
;

1014 
hÕtim
->
In°™˚
->
CFGR
 |
LPTIM_CFGR_ENC
;

1017 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_DOWN
);

1020 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_UP
);

1023 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

1026 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

1029 
	`__HAL_LPTIM_START_CONTINUOUS
(
hÕtim
);

1032 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1035  
HAL_OK
;

1036 
	}
}

1043 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Encodî_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1046 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1049 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1052 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

1055 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_ENC
;

1058 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_DOWN
);

1061 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_UP
);

1064 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1067  
HAL_OK
;

1068 
	}
}

1081 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_TimeOut_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Timeout
)

1084 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1085 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

1086 
	`as£π_∑øm
(
	`IS_LPTIM_PULSE
(
Timeout
));

1089 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1092 
hÕtim
->
In°™˚
->
CFGR
 |
LPTIM_CFGR_TIMOUT
;

1095 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

1098 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

1101 
	`__HAL_LPTIM_COMPARE_SET
(
hÕtim
, 
Timeout
);

1104 
	`__HAL_LPTIM_START_CONTINUOUS
(
hÕtim
);

1107 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1110  
HAL_OK
;

1111 
	}
}

1118 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_TimeOut_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1121 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1124 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1127 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

1130 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_TIMOUT
;

1133 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1136  
HAL_OK
;

1137 
	}
}

1150 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_TimeOut_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
, uöt32_à
Timeout
)

1153 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1154 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

1155 
	`as£π_∑øm
(
	`IS_LPTIM_PULSE
(
Timeout
));

1158 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1161 
hÕtim
->
In°™˚
->
CFGR
 |
LPTIM_CFGR_TIMOUT
;

1164 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPM
);

1167 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

1170 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

1173 
	`__HAL_LPTIM_COMPARE_SET
(
hÕtim
, 
Timeout
);

1176 
	`__HAL_LPTIM_START_CONTINUOUS
(
hÕtim
);

1179 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1182  
HAL_OK
;

1183 
	}
}

1190 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_TimeOut_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1193 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1196 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1199 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

1202 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_TIMOUT
;

1205 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_CMPM
);

1208 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1211  
HAL_OK
;

1212 
	}
}

1221 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Cou¡î_Sèπ
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
)

1224 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1225 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

1228 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1231 if((
hÕtim
->
Inô
.
Clock
.
Sour˚
 !
LPTIM_CLOCKSOURCE_ULPTIM
Ë&& (hÕtim->Inô.
Cou¡îSour˚
 =
LPTIM_COUNTERSOURCE_EXTERNAL
))

1234 
	`as£π_∑øm
(
	`IS_LPTIM_CLOCK_PRESCALERDIV1
(
hÕtim
->
Inô
.
Clock
.
PªsˇÀr
));

1236 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_PRESC
;

1240 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

1243 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

1246 
	`__HAL_LPTIM_START_CONTINUOUS
(
hÕtim
);

1249 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1252  
HAL_OK
;

1253 
	}
}

1260 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Cou¡î_St›
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1263 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1266 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1269 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

1272 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1275  
HAL_OK
;

1276 
	}
}

1285 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Cou¡î_Sèπ_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
, 
uöt32_t
 
Pîiod
)

1288 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1289 
	`as£π_∑øm
(
	`IS_LPTIM_PERIOD
(
Pîiod
));

1292 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1295 if((
hÕtim
->
Inô
.
Clock
.
Sour˚
 !
LPTIM_CLOCKSOURCE_ULPTIM
Ë&& (hÕtim->Inô.
Cou¡îSour˚
 =
LPTIM_COUNTERSOURCE_EXTERNAL
))

1298 
	`as£π_∑øm
(
	`IS_LPTIM_CLOCK_PRESCALERDIV1
(
hÕtim
->
Inô
.
Clock
.
PªsˇÀr
));

1300 
hÕtim
->
In°™˚
->
CFGR
 &~
LPTIM_CFGR_PRESC
;

1304 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_ARROK
);

1307 
	`__HAL_LPTIM_ENABLE_IT
(
hÕtim
, 
LPTIM_IT_ARRM
);

1310 
	`__HAL_LPTIM_ENABLE
(
hÕtim
);

1313 
	`__HAL_LPTIM_AUTORELOAD_SET
(
hÕtim
, 
Pîiod
);

1316 
	`__HAL_LPTIM_START_CONTINUOUS
(
hÕtim
);

1319 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1322  
HAL_OK
;

1323 
	}
}

1330 
HAL_SètusTy≥Def
 
	$HAL_LPTIM_Cou¡î_St›_IT
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1333 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1336 
hÕtim
->
Sèã

HAL_LPTIM_STATE_BUSY
;

1339 
	`__HAL_LPTIM_DISABLE
(
hÕtim
);

1342 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_ARROK
);

1345 
	`__HAL_LPTIM_DISABLE_IT
(
hÕtim
, 
LPTIM_IT_ARRM
);

1348 
hÕtim
->
Sèã

HAL_LPTIM_STATE_READY
;

1351  
HAL_OK
;

1352 
	}
}

1378 
uöt32_t
 
	$HAL_LPTIM_RódCou¡î
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1381 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1383  (
hÕtim
->
In°™˚
->
CNT
);

1384 
	}
}

1391 
uöt32_t
 
	$HAL_LPTIM_RódAutoRñﬂd
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1394 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1396  (
hÕtim
->
In°™˚
->
ARR
);

1397 
	}
}

1404 
uöt32_t
 
	$HAL_LPTIM_RódCom∑ª
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1407 
	`as£π_∑øm
(
	`IS_LPTIM_INSTANCE
(
hÕtim
->
In°™˚
));

1409  (
hÕtim
->
In°™˚
->
CMP
);

1410 
	}
}

1436 
	$HAL_LPTIM_IRQH™dÀr
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1439 if(
	`__HAL_LPTIM_GET_FLAG
(
hÕtim
, 
LPTIM_FLAG_CMPM
Ë!
RESET
)

1441 if(
	`__HAL_LPTIM_GET_IT_SOURCE
(
hÕtim
, 
LPTIM_IT_CMPM
Ë!=
RESET
)

1444 
	`__HAL_LPTIM_CLEAR_FLAG
(
hÕtim
, 
LPTIM_FLAG_CMPM
);

1446 
	`HAL_LPTIM_Com∑ªM©chCÆlback
(
hÕtim
);

1451 if(
	`__HAL_LPTIM_GET_FLAG
(
hÕtim
, 
LPTIM_FLAG_ARRM
Ë!
RESET
)

1453 if(
	`__HAL_LPTIM_GET_IT_SOURCE
(
hÕtim
, 
LPTIM_IT_ARRM
Ë!=
RESET
)

1456 
	`__HAL_LPTIM_CLEAR_FLAG
(
hÕtim
, 
LPTIM_FLAG_ARRM
);

1458 
	`HAL_LPTIM_AutoRñﬂdM©chCÆlback
(
hÕtim
);

1463 if(
	`__HAL_LPTIM_GET_FLAG
(
hÕtim
, 
LPTIM_FLAG_EXTTRIG
Ë!
RESET
)

1465 if(
	`__HAL_LPTIM_GET_IT_SOURCE
(
hÕtim
, 
LPTIM_IT_EXTTRIG
Ë!=
RESET
)

1468 
	`__HAL_LPTIM_CLEAR_FLAG
(
hÕtim
, 
LPTIM_FLAG_EXTTRIG
);

1470 
	`HAL_LPTIM_TriggîCÆlback
(
hÕtim
);

1475 if(
	`__HAL_LPTIM_GET_FLAG
(
hÕtim
, 
LPTIM_FLAG_CMPOK
Ë!
RESET
)

1477 if(
	`__HAL_LPTIM_GET_IT_SOURCE
(
hÕtim
, 
LPTIM_FLAG_CMPM
Ë!=
RESET
)

1480 
	`__HAL_LPTIM_CLEAR_FLAG
(
hÕtim
, 
LPTIM_FLAG_CMPOK
);

1482 
	`HAL_LPTIM_Com∑ªWrôeCÆlback
(
hÕtim
);

1487 if(
	`__HAL_LPTIM_GET_FLAG
(
hÕtim
, 
LPTIM_FLAG_ARROK
Ë!
RESET
)

1489 if(
	`__HAL_LPTIM_GET_IT_SOURCE
(
hÕtim
, 
LPTIM_IT_ARROK
Ë!=
RESET
)

1492 
	`__HAL_LPTIM_CLEAR_FLAG
(
hÕtim
, 
LPTIM_FLAG_ARROK
);

1494 
	`HAL_LPTIM_AutoRñﬂdWrôeCÆlback
(
hÕtim
);

1499 if(
	`__HAL_LPTIM_GET_FLAG
(
hÕtim
, 
LPTIM_FLAG_UP
Ë!
RESET
)

1501 if(
	`__HAL_LPTIM_GET_IT_SOURCE
(
hÕtim
, 
LPTIM_IT_UP
Ë!=
RESET
)

1504 
	`__HAL_LPTIM_CLEAR_FLAG
(
hÕtim
, 
LPTIM_FLAG_UP
);

1506 
	`HAL_LPTIM_Dúe˘i⁄UpCÆlback
(
hÕtim
);

1511 if(
	`__HAL_LPTIM_GET_FLAG
(
hÕtim
, 
LPTIM_FLAG_DOWN
Ë!
RESET
)

1513 if(
	`__HAL_LPTIM_GET_IT_SOURCE
(
hÕtim
, 
LPTIM_IT_DOWN
Ë!=
RESET
)

1516 
	`__HAL_LPTIM_CLEAR_FLAG
(
hÕtim
, 
LPTIM_FLAG_DOWN
);

1518 
	`HAL_LPTIM_Dúe˘i⁄DownCÆlback
(
hÕtim
);

1521 
	`__HAL_LPTIM_WAKEUPTIMER_EXTI_CLEAR_FLAG
();

1522 
	}
}

1529 
__wók
 
	$HAL_LPTIM_Com∑ªM©chCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1534 
	}
}

1541 
__wók
 
	$HAL_LPTIM_AutoRñﬂdM©chCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1546 
	}
}

1553 
__wók
 
	$HAL_LPTIM_TriggîCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1558 
	}
}

1565 
__wók
 
	$HAL_LPTIM_Com∑ªWrôeCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1570 
	}
}

1577 
__wók
 
	$HAL_LPTIM_AutoRñﬂdWrôeCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1582 
	}
}

1589 
__wók
 
	$HAL_LPTIM_Dúe˘i⁄UpCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1594 
	}
}

1601 
__wók
 
	$HAL_LPTIM_Dúe˘i⁄DownCÆlback
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1606 
	}
}

1631 
HAL_LPTIM_SèãTy≥Def
 
	$HAL_LPTIM_GëSèã
(
LPTIM_H™dÀTy≥Def
 *
hÕtim
)

1633  
hÕtim
->
Sèã
;

1634 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_ltdc.c

100 
	~"°m32f4xx_hÆ.h
"

110 #ifde‡
HAL_LTDC_MODULE_ENABLED


112 #i‡
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

119 
LTDC_SëC⁄fig
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
, 
uöt32_t
 
LayîIdx
);

148 
HAL_SètusTy≥Def
 
	$HAL_LTDC_Inô
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

150 
uöt32_t
 
tmp
 = 0, 
tmp1
 = 0;

153 if(
h…dc
 =
NULL
)

155  
HAL_ERROR
;

159 
	`as£π_∑øm
(
	`IS_LTDC_ALL_INSTANCE
(
h…dc
->
In°™˚
));

160 
	`as£π_∑øm
(
	`IS_LTDC_HSYNC
(
h…dc
->
Inô
.
H‹iz⁄èlSync
));

161 
	`as£π_∑øm
(
	`IS_LTDC_VSYNC
(
h…dc
->
Inô
.
VîtiˇlSync
));

162 
	`as£π_∑øm
(
	`IS_LTDC_AHBP
(
h…dc
->
Inô
.
AccumuœãdHBP
));

163 
	`as£π_∑øm
(
	`IS_LTDC_AVBP
(
h…dc
->
Inô
.
AccumuœãdVBP
));

164 
	`as£π_∑øm
(
	`IS_LTDC_AAH
(
h…dc
->
Inô
.
AccumuœãdA˘iveH
));

165 
	`as£π_∑øm
(
	`IS_LTDC_AAW
(
h…dc
->
Inô
.
AccumuœãdA˘iveW
));

166 
	`as£π_∑øm
(
	`IS_LTDC_TOTALH
(
h…dc
->
Inô
.
TŸÆHeigh
));

167 
	`as£π_∑øm
(
	`IS_LTDC_TOTALW
(
h…dc
->
Inô
.
TŸÆWidth
));

168 
	`as£π_∑øm
(
	`IS_LTDC_HSPOL
(
h…dc
->
Inô
.
HSPﬁ¨ôy
));

169 
	`as£π_∑øm
(
	`IS_LTDC_VSPOL
(
h…dc
->
Inô
.
VSPﬁ¨ôy
));

170 
	`as£π_∑øm
(
	`IS_LTDC_DEPOL
(
h…dc
->
Inô
.
DEPﬁ¨ôy
));

171 
	`as£π_∑øm
(
	`IS_LTDC_PCPOL
(
h…dc
->
Inô
.
PCPﬁ¨ôy
));

173 if(
h…dc
->
Sèã
 =
HAL_LTDC_STATE_RESET
)

176 
h…dc
->
Lock
 = 
HAL_UNLOCKED
;

178 
	`HAL_LTDC_M•Inô
(
h…dc
);

182 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

185 
h…dc
->
In°™˚
->
GCR
 &~(
LTDC_GCR_HSPOL
 | 
LTDC_GCR_VSPOL
 | 
LTDC_GCR_DEPOL
 | 
LTDC_GCR_PCPOL
);

186 
h…dc
->
In°™˚
->
GCR
 |(
uöt32_t
)(h…dc->
Inô
.
HSPﬁ¨ôy
 | h…dc->Inô.
VSPﬁ¨ôy
 | \

187 
h…dc
->
Inô
.
DEPﬁ¨ôy
 | h…dc->Inô.
PCPﬁ¨ôy
);

190 
h…dc
->
In°™˚
->
SSCR
 &~(
LTDC_SSCR_VSH
 | 
LTDC_SSCR_HSW
);

191 
tmp
 = (
h…dc
->
Inô
.
H‹iz⁄èlSync
 << 16);

192 
h…dc
->
In°™˚
->
SSCR
 |(
tmp
 | h…dc->
Inô
.
VîtiˇlSync
);

195 
h…dc
->
In°™˚
->
BPCR
 &~(
LTDC_BPCR_AVBP
 | 
LTDC_BPCR_AHBP
);

196 
tmp
 = (
h…dc
->
Inô
.
AccumuœãdHBP
 << 16);

197 
h…dc
->
In°™˚
->
BPCR
 |(
tmp
 | h…dc->
Inô
.
AccumuœãdVBP
);

200 
h…dc
->
In°™˚
->
AWCR
 &~(
LTDC_AWCR_AAH
 | 
LTDC_AWCR_AAW
);

201 
tmp
 = (
h…dc
->
Inô
.
AccumuœãdA˘iveW
 << 16);

202 
h…dc
->
In°™˚
->
AWCR
 |(
tmp
 | h…dc->
Inô
.
AccumuœãdA˘iveH
);

205 
h…dc
->
In°™˚
->
TWCR
 &~(
LTDC_TWCR_TOTALH
 | 
LTDC_TWCR_TOTALW
);

206 
tmp
 = (
h…dc
->
Inô
.
TŸÆWidth
 << 16);

207 
h…dc
->
In°™˚
->
TWCR
 |(
tmp
 | h…dc->
Inô
.
TŸÆHeigh
);

210 
tmp
 = ((
uöt32_t
)(
h…dc
->
Inô
.
Backcﬁ‹
.
Gªí
) << 8);

211 
tmp1
 = ((
uöt32_t
)(
h…dc
->
Inô
.
Backcﬁ‹
.
Red
) << 16);

212 
h…dc
->
In°™˚
->
BCCR
 &~(
LTDC_BCCR_BCBLUE
 | 
LTDC_BCCR_BCGREEN
 | 
LTDC_BCCR_BCRED
);

213 
h…dc
->
In°™˚
->
BCCR
 |(
tmp1
 | 
tmp
 | h…dc->
Inô
.
Backcﬁ‹
.
Blue
);

216 
	`__HAL_LTDC_ENABLE_IT
(
h…dc
, 
LTDC_IT_TE
);

219 
	`__HAL_LTDC_ENABLE_IT
(
h…dc
, 
LTDC_IT_FU
);

222 
	`__HAL_LTDC_ENABLE
(
h…dc
);

225 
h…dc
->
Eº‹Code
 = 
HAL_LTDC_ERROR_NONE
;

228 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

230  
HAL_OK
;

231 
	}
}

241 
HAL_SètusTy≥Def
 
	$HAL_LTDC_DeInô
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

244 
	`HAL_LTDC_M•DeInô
(
h…dc
);

247 
h…dc
->
Eº‹Code
 = 
HAL_LTDC_ERROR_NONE
;

250 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_RESET
;

253 
	`__HAL_UNLOCK
(
h…dc
);

255  
HAL_OK
;

256 
	}
}

264 
__wók
 
	$HAL_LTDC_M•Inô
(
LTDC_H™dÀTy≥Def
* 
h…dc
)

269 
	}
}

277 
__wók
 
	$HAL_LTDC_M•DeInô
(
LTDC_H™dÀTy≥Def
* 
h…dc
)

282 
	}
}

307 
	$HAL_LTDC_IRQH™dÀr
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

310 if(
	`__HAL_LTDC_GET_FLAG
(
h…dc
, 
LTDC_FLAG_TE
Ë!
RESET
)

312 if(
	`__HAL_LTDC_GET_IT_SOURCE
(
h…dc
, 
LTDC_IT_TE
Ë!
RESET
)

315 
	`__HAL_LTDC_DISABLE_IT
(
h…dc
, 
LTDC_IT_TE
);

318 
	`__HAL_LTDC_CLEAR_FLAG
(
h…dc
, 
LTDC_FLAG_TE
);

321 
h…dc
->
Eº‹Code
 |
HAL_LTDC_ERROR_TE
;

324 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_ERROR
;

327 
	`__HAL_UNLOCK
(
h…dc
);

330 
	`HAL_LTDC_Eº‹CÆlback
(
h…dc
);

334 if(
	`__HAL_LTDC_GET_FLAG
(
h…dc
, 
LTDC_FLAG_FU
Ë!
RESET
)

336 if(
	`__HAL_LTDC_GET_IT_SOURCE
(
h…dc
, 
LTDC_IT_FU
Ë!
RESET
)

339 
	`__HAL_LTDC_DISABLE_IT
(
h…dc
, 
LTDC_IT_FU
);

342 
	`__HAL_LTDC_CLEAR_FLAG
(
h…dc
, 
LTDC_FLAG_FU
);

345 
h…dc
->
Eº‹Code
 |
HAL_LTDC_ERROR_FU
;

348 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_ERROR
;

351 
	`__HAL_UNLOCK
(
h…dc
);

354 
	`HAL_LTDC_Eº‹CÆlback
(
h…dc
);

358 if(
	`__HAL_LTDC_GET_FLAG
(
h…dc
, 
LTDC_FLAG_LI
Ë!
RESET
)

360 if(
	`__HAL_LTDC_GET_IT_SOURCE
(
h…dc
, 
LTDC_IT_LI
Ë!
RESET
)

363 
	`__HAL_LTDC_DISABLE_IT
(
h…dc
, 
LTDC_IT_LI
);

366 
	`__HAL_LTDC_CLEAR_FLAG
(
h…dc
, 
LTDC_FLAG_LI
);

369 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

372 
	`__HAL_UNLOCK
(
h…dc
);

375 
	`HAL_LTDC_LöeEvítCÆlback
(
h…dc
);

378 
	}
}

386 
__wók
 
	$HAL_LTDC_Eº‹CÆlback
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

391 
	}
}

399 
__wók
 
	$HAL_LTDC_LöeEvítCÆlback
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

404 
	}
}

446 
HAL_SètusTy≥Def
 
	$HAL_LTDC_C⁄figLayî
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
, 
uöt32_t
 
LayîIdx
)

449 
	`__HAL_LOCK
(
h…dc
);

452 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

455 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

456 
	`as£π_∑øm
(
	`IS_LTDC_PIXEL_FORMAT
(
pLayîCfg
->
PixñF‹m©
));

457 
	`as£π_∑øm
(
	`IS_LTDC_BLENDING_FACTOR1
(
pLayîCfg
->
BÀndögFa˘‹1
));

458 
	`as£π_∑øm
(
	`IS_LTDC_BLENDING_FACTOR2
(
pLayîCfg
->
BÀndögFa˘‹2
));

459 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGST
(
pLayîCfg
->
WödowX0
));

460 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGSP
(
pLayîCfg
->
WödowX1
));

461 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGST
(
pLayîCfg
->
WödowY0
));

462 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGSP
(
pLayîCfg
->
WödowY1
));

463 
	`as£π_∑øm
(
	`IS_LTDC_ALPHA
(
pLayîCfg
->
AÕha0
));

464 
	`as£π_∑øm
(
	`IS_LTDC_CFBLL
(
pLayîCfg
->
ImageWidth
));

465 
	`as£π_∑øm
(
	`IS_LTDC_CFBLNBR
(
pLayîCfg
->
ImageHeight
));

468 
h…dc
->
LayîCfg
[
LayîIdx
] = *
pLayîCfg
;

471 
	`LTDC_SëC⁄fig
(
h…dc
, 
pLayîCfg
, 
LayîIdx
);

474 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

477 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

480 
	`__HAL_UNLOCK
(
h…dc
);

482  
HAL_OK
;

483 
	}
}

495 
HAL_SètusTy≥Def
 
	$HAL_LTDC_C⁄figCﬁ‹Keyög
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
RGBVÆue
, uöt32_à
LayîIdx
)

498 
	`__HAL_LOCK
(
h…dc
);

501 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

504 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

507 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CKCR
 &~(
LTDC_LxCKCR_CKBLUE
 | 
LTDC_LxCKCR_CKGREEN
 | 
LTDC_LxCKCR_CKRED
);

508 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CKCR
 = 
RGBVÆue
;

511 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

514 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

517 
	`__HAL_UNLOCK
(
h…dc
);

519  
HAL_OK
;

520 
	}
}

533 
HAL_SètusTy≥Def
 
	$HAL_LTDC_C⁄figCLUT
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 *
pCLUT
, uöt32_à
CLUTSize
, uöt32_à
LayîIdx
)

535 
uöt32_t
 
tmp
 = 0;

536 
uöt32_t
 
cou¡î
 = 0;

537 
uöt32_t
 
pcou¡î
 = 0;

540 
	`__HAL_LOCK
(
h…dc
);

543 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

546 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

548 
cou¡î
 = 0; (cou¡î < 
CLUTSize
); counter++)

550 if(
h…dc
->
LayîCfg
[
LayîIdx
].
PixñF‹m©
 =
LTDC_PIXEL_FORMAT_AL44
)

552 
tmp
 = (((
cou¡î
 + 16*cou¡îË<< 24Ë| ((
uöt32_t
)(*
pCLUT
) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));

556 
tmp
 = ((
cou¡î
 << 24Ë| ((
uöt32_t
)(*
pCLUT
) & 0xFF) | ((uint32_t)(*pCLUT) & 0xFF00) | ((uint32_t)(*pCLUT) & 0xFF0000));

558 
pcou¡î
 = (
uöt32_t
)
pCLUT
 + (*pCLUT);

559 
pCLUT
 = (
uöt32_t
 *)
pcou¡î
;

562 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CLUTWR
 = 
tmp
;

566 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

569 
	`__HAL_UNLOCK
(
h…dc
);

571  
HAL_OK
;

572 
	}
}

583 
HAL_SètusTy≥Def
 
	$HAL_LTDC_E«bÀCﬁ‹Keyög
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LayîIdx
)

586 
	`__HAL_LOCK
(
h…dc
);

589 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

592 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

595 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CR
 |(
uöt32_t
)
LTDC_LxCR_COLKEN
;

598 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

601 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

604 
	`__HAL_UNLOCK
(
h…dc
);

606  
HAL_OK
;

607 
	}
}

618 
HAL_SètusTy≥Def
 
	$HAL_LTDC_DißbÀCﬁ‹Keyög
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LayîIdx
)

621 
	`__HAL_LOCK
(
h…dc
);

624 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

627 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

630 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CR
 &~(
uöt32_t
)
LTDC_LxCR_COLKEN
;

633 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

636 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

639 
	`__HAL_UNLOCK
(
h…dc
);

641  
HAL_OK
;

642 
	}
}

653 
HAL_SètusTy≥Def
 
	$HAL_LTDC_E«bÀCLUT
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LayîIdx
)

657 
	`__HAL_LOCK
(
h…dc
);

660 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

663 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

666 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CR
 |(
uöt32_t
)
LTDC_LxCR_CLUTEN
;

669 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

672 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

675 
	`__HAL_UNLOCK
(
h…dc
);

677  
HAL_OK
;

678 
	}
}

689 
HAL_SètusTy≥Def
 
	$HAL_LTDC_DißbÀCLUT
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LayîIdx
)

693 
	`__HAL_LOCK
(
h…dc
);

696 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

699 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

702 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CR
 &~(
uöt32_t
)
LTDC_LxCR_CLUTEN
;

705 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

708 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

711 
	`__HAL_UNLOCK
(
h…dc
);

713  
HAL_OK
;

714 
	}
}

723 
HAL_SètusTy≥Def
 
	$HAL_LTDC_E«bÀDôhî
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

726 
	`__HAL_LOCK
(
h…dc
);

729 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

732 
LTDC
->
GCR
 |(
uöt32_t
)
LTDC_GCR_DTEN
;

735 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

738 
	`__HAL_UNLOCK
(
h…dc
);

740  
HAL_OK
;

741 
	}
}

750 
HAL_SètusTy≥Def
 
	$HAL_LTDC_DißbÀDôhî
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

753 
	`__HAL_LOCK
(
h…dc
);

756 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

759 
LTDC
->
GCR
 &~(
uöt32_t
)
LTDC_GCR_DTEN
;

762 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

765 
	`__HAL_UNLOCK
(
h…dc
);

767  
HAL_OK
;

768 
	}
}

781 
HAL_SètusTy≥Def
 
	$HAL_LTDC_SëWödowSize
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
XSize
, uöt32_à
YSize
, uöt32_à
LayîIdx
)

783 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
;

786 
	`__HAL_LOCK
(
h…dc
);

789 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

792 
pLayîCfg
 = &
h…dc
->
LayîCfg
[
LayîIdx
];

795 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

796 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGST
(
pLayîCfg
->
WödowX0
));

797 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGSP
(
pLayîCfg
->
WödowX1
));

798 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGST
(
pLayîCfg
->
WödowY0
));

799 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGSP
(
pLayîCfg
->
WödowY1
));

800 
	`as£π_∑øm
(
	`IS_LTDC_CFBLL
(
XSize
));

801 
	`as£π_∑øm
(
	`IS_LTDC_CFBLNBR
(
YSize
));

804 
pLayîCfg
->
WödowX0
 = 0;

805 
pLayîCfg
->
WödowX1
 = 
XSize
 +ÖLayîCfg->
WödowX0
;

808 
pLayîCfg
->
WödowY0
 = 0;

809 
pLayîCfg
->
WödowY1
 = 
YSize
 +ÖLayîCfg->
WödowY0
;

812 
pLayîCfg
->
ImageWidth
 = 
XSize
;

815 
pLayîCfg
->
ImageHeight
 = 
YSize
;

818 
	`LTDC_SëC⁄fig
(
h…dc
, 
pLayîCfg
, 
LayîIdx
);

821 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

824 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

827 
	`__HAL_UNLOCK
(
h…dc
);

829  
HAL_OK
;

830 
	}
}

843 
HAL_SètusTy≥Def
 
	$HAL_LTDC_SëWödowPosôi⁄
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
X0
, uöt32_à
Y0
, uöt32_à
LayîIdx
)

845 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
;

848 
	`__HAL_LOCK
(
h…dc
);

851 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

854 
pLayîCfg
 = &
h…dc
->
LayîCfg
[
LayîIdx
];

857 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

858 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGST
(
pLayîCfg
->
WödowX0
));

859 
	`as£π_∑øm
(
	`IS_LTDC_HCONFIGSP
(
pLayîCfg
->
WödowX1
));

860 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGST
(
pLayîCfg
->
WödowY0
));

861 
	`as£π_∑øm
(
	`IS_LTDC_VCONFIGSP
(
pLayîCfg
->
WödowY1
));

864 
pLayîCfg
->
WödowX0
 = 
X0
;

865 
pLayîCfg
->
WödowX1
 = 
X0
 +ÖLayîCfg->
ImageWidth
;

868 
pLayîCfg
->
WödowY0
 = 
Y0
;

869 
pLayîCfg
->
WödowY1
 = 
Y0
 +ÖLayîCfg->
ImageHeight
;

872 
	`LTDC_SëC⁄fig
(
h…dc
, 
pLayîCfg
, 
LayîIdx
);

875 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_VBR
;

878 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

881 
	`__HAL_UNLOCK
(
h…dc
);

883  
HAL_OK
;

884 
	}
}

896 
HAL_SètusTy≥Def
 
	$HAL_LTDC_SëPixñF‹m©
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
Pixñf‹m©
, uöt32_à
LayîIdx
)

898 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
;

901 
	`__HAL_LOCK
(
h…dc
);

904 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

907 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

908 
	`as£π_∑øm
(
	`IS_LTDC_PIXEL_FORMAT
(
Pixñf‹m©
));

911 
pLayîCfg
 = &
h…dc
->
LayîCfg
[
LayîIdx
];

914 
pLayîCfg
->
PixñF‹m©
 = 
Pixñf‹m©
;

917 
	`LTDC_SëC⁄fig
(
h…dc
, 
pLayîCfg
, 
LayîIdx
);

920 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

923 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

926 
	`__HAL_UNLOCK
(
h…dc
);

928  
HAL_OK
;

929 
	}
}

941 
HAL_SètusTy≥Def
 
	$HAL_LTDC_SëAÕha
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
AÕha
, uöt32_à
LayîIdx
)

943 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
;

946 
	`__HAL_LOCK
(
h…dc
);

949 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

952 
	`as£π_∑øm
(
	`IS_LTDC_ALPHA
(
AÕha
));

953 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

956 
pLayîCfg
 = &
h…dc
->
LayîCfg
[
LayîIdx
];

959 
pLayîCfg
->
AÕha
 = Alpha;

962 
	`LTDC_SëC⁄fig
(
h…dc
, 
pLayîCfg
, 
LayîIdx
);

965 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

968 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

971 
	`__HAL_UNLOCK
(
h…dc
);

973  
HAL_OK
;

974 
	}
}

985 
HAL_SètusTy≥Def
 
	$HAL_LTDC_SëAddªss
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
Addªss
, uöt32_à
LayîIdx
)

987 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
;

990 
	`__HAL_LOCK
(
h…dc
);

993 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

996 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

999 
pLayîCfg
 = &
h…dc
->
LayîCfg
[
LayîIdx
];

1002 
pLayîCfg
->
FBSèπAdªss
 = 
Addªss
;

1005 
	`LTDC_SëC⁄fig
(
h…dc
, 
pLayîCfg
, 
LayîIdx
);

1008 
h…dc
->
In°™˚
->
SRCR
 = 
LTDC_SRCR_IMR
;

1011 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

1014 
	`__HAL_UNLOCK
(
h…dc
);

1016  
HAL_OK
;

1017 
	}
}

1032 
HAL_SètusTy≥Def
 
	$HAL_LTDC_SëPôch
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
LöePôchInPixñs
, uöt32_à
LayîIdx
)

1034 
uöt32_t
 
tmp
 = 0;

1035 
uöt32_t
 
pôchUpd©e
 = 0;

1036 
uöt32_t
 
pixñF‹m©
 = 0;

1039 
	`__HAL_LOCK
(
h…dc
);

1042 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

1045 
	`as£π_∑øm
(
	`IS_LTDC_LAYER
(
LayîIdx
));

1048 
pixñF‹m©
 = 
h…dc
->
LayîCfg
[
LayîIdx
].
PixñF‹m©
;

1050 if(
pixñF‹m©
 =
LTDC_PIXEL_FORMAT_ARGB8888
)

1052 
tmp
 = 4;

1054 i‡(
pixñF‹m©
 =
LTDC_PIXEL_FORMAT_RGB888
)

1056 
tmp
 = 3;

1058 if((
pixñF‹m©
 =
LTDC_PIXEL_FORMAT_ARGB4444
) || \

1059 (
pixñF‹m©
 =
LTDC_PIXEL_FORMAT_RGB565
) || \

1060 (
pixñF‹m©
 =
LTDC_PIXEL_FORMAT_ARGB1555
) || \

1061 (
pixñF‹m©
 =
LTDC_PIXEL_FORMAT_AL88
))

1063 
tmp
 = 2;

1067 
tmp
 = 1;

1070 
pôchUpd©e
 = ((
LöePôchInPixñs
 * 
tmp
) << 16);

1073 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CFBLR
 &~
LTDC_LxCFBLR_CFBP
;

1076 
LTDC
->
SRCR
 |
LTDC_SRCR_IMR
;

1079 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CFBLR
 |
pôchUpd©e
;

1082 
LTDC
->
SRCR
 |
LTDC_SRCR_IMR
;

1085 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

1088 
	`__HAL_UNLOCK
(
h…dc
);

1090  
HAL_OK
;

1091 
	}
}

1100 
HAL_SètusTy≥Def
 
	$HAL_LTDC_ProgømLöeEvít
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
uöt32_t
 
Löe
)

1103 
	`__HAL_LOCK
(
h…dc
);

1106 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_BUSY
;

1109 
	`as£π_∑øm
(
	`IS_LTDC_LIPOS
(
Löe
));

1112 
	`__HAL_LTDC_ENABLE_IT
(
h…dc
, 
LTDC_IT_LI
);

1115 
LTDC
->
LIPCR
 = (
uöt32_t
)
Löe
;

1118 
h…dc
->
Sèã
 = 
HAL_LTDC_STATE_READY
;

1121 
	`__HAL_UNLOCK
(
h…dc
);

1123  
HAL_OK
;

1124 
	}
}

1152 
HAL_LTDC_SèãTy≥Def
 
	$HAL_LTDC_GëSèã
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

1154  
h…dc
->
Sèã
;

1155 
	}
}

1163 
uöt32_t
 
	$HAL_LTDC_GëEº‹
(
LTDC_H™dÀTy≥Def
 *
h…dc
)

1165  
h…dc
->
Eº‹Code
;

1166 
	}
}

1181 
	$LTDC_SëC⁄fig
(
LTDC_H™dÀTy≥Def
 *
h…dc
, 
LTDC_LayîCfgTy≥Def
 *
pLayîCfg
, 
uöt32_t
 
LayîIdx
)

1183 
uöt32_t
 
tmp
 = 0;

1184 
uöt32_t
 
tmp1
 = 0;

1185 
uöt32_t
 
tmp2
 = 0;

1188 
tmp
 = ((
pLayîCfg
->
WödowX1
 + ((
h…dc
->
In°™˚
->
BPCR
 & 
LTDC_BPCR_AHBP
) >> 16)) << 16);

1189 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
WHPCR
 &~(
LTDC_LxWHPCR_WHSTPOS
 | 
LTDC_LxWHPCR_WHSPPOS
);

1190 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
WHPCR
 = ((
pLayîCfg
->
WödowX0
 + ((h…dc->
In°™˚
->
BPCR
 & 
LTDC_BPCR_AHBP
Ë>> 16Ë+ 1Ë| 
tmp
);

1193 
tmp
 = ((
pLayîCfg
->
WödowY1
 + (
h…dc
->
In°™˚
->
BPCR
 & 
LTDC_BPCR_AVBP
)) << 16);

1194 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
WVPCR
 &~(
LTDC_LxWVPCR_WVSTPOS
 | 
LTDC_LxWVPCR_WVSPPOS
);

1195 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
WVPCR
 = ((
pLayîCfg
->
WödowY0
 + (h…dc->
In°™˚
->
BPCR
 & 
LTDC_BPCR_AVBP
Ë+ 1Ë| 
tmp
);

1198 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
PFCR
 &~(
LTDC_LxPFCR_PF
);

1199 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
PFCR
 = (
pLayîCfg
->
PixñF‹m©
);

1202 
tmp
 = ((
uöt32_t
)(
pLayîCfg
->
Backcﬁ‹
.
Gªí
) << 8);

1203 
tmp1
 = ((
uöt32_t
)(
pLayîCfg
->
Backcﬁ‹
.
Red
) << 16);

1204 
tmp2
 = (
pLayîCfg
->
AÕha0
 << 24);

1205 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
DCCR
 &~(
LTDC_LxDCCR_DCBLUE
 | 
LTDC_LxDCCR_DCGREEN
 | 
LTDC_LxDCCR_DCRED
 | 
LTDC_LxDCCR_DCALPHA
);

1206 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
DCCR
 = (
pLayîCfg
->
Backcﬁ‹
.
Blue
 | 
tmp
 | 
tmp1
 | 
tmp2
);

1209 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CACR
 &~(
LTDC_LxCACR_CONSTA
);

1210 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CACR
 = (
pLayîCfg
->
AÕha
);

1213 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
BFCR
 &~(
LTDC_LxBFCR_BF2
 | 
LTDC_LxBFCR_BF1
);

1214 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
BFCR
 = (
pLayîCfg
->
BÀndögFa˘‹1
 |ÖLayîCfg->
BÀndögFa˘‹2
);

1217 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CFBAR
 &~(
LTDC_LxCFBAR_CFBADD
);

1218 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CFBAR
 = (
pLayîCfg
->
FBSèπAdªss
);

1220 if(
pLayîCfg
->
PixñF‹m©
 =
LTDC_PIXEL_FORMAT_ARGB8888
)

1222 
tmp
 = 4;

1224 i‡(
pLayîCfg
->
PixñF‹m©
 =
LTDC_PIXEL_FORMAT_RGB888
)

1226 
tmp
 = 3;

1228 if((
pLayîCfg
->
PixñF‹m©
 =
LTDC_PIXEL_FORMAT_ARGB4444
) || \

1229 (
pLayîCfg
->
PixñF‹m©
 =
LTDC_PIXEL_FORMAT_RGB565
) || \

1230 (
pLayîCfg
->
PixñF‹m©
 =
LTDC_PIXEL_FORMAT_ARGB1555
) || \

1231 (
pLayîCfg
->
PixñF‹m©
 =
LTDC_PIXEL_FORMAT_AL88
))

1233 
tmp
 = 2;

1237 
tmp
 = 1;

1241 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CFBLR
 &~(
LTDC_LxCFBLR_CFBLL
 | 
LTDC_LxCFBLR_CFBP
);

1242 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CFBLR
 = (((
pLayîCfg
->
ImageWidth
 * 
tmp
Ë<< 16Ë| ((’LayîCfg->
WödowX1
 -ÖLayîCfg->
WödowX0
) *Åmp) + 3));

1245 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CFBLNR
 &~(
LTDC_LxCFBLNR_CFBLNBR
);

1246 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CFBLNR
 = (
pLayîCfg
->
ImageHeight
);

1249 
	`LTDC_LAYER
(
h…dc
, 
LayîIdx
)->
CR
 |(
uöt32_t
)
LTDC_LxCR_LEN
;

1250 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_ltdc_ex.c

39 
	~"°m32f4xx_hÆ.h
"

49 #ifde‡
HAL_LTDC_MODULE_ENABLED


75 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

86 
HAL_SètusTy≥Def
 
	$HAL_LTDC_Såu˘InôFromVideoC⁄fig
(
LTDC_H™dÀTy≥Def
* 
h…dc
, 
DSI_VidCfgTy≥Def
 *
VidCfg
)

96 
h…dc
->
Inô
.
DEPﬁ¨ôy
 = (
VidCfg
->DEPﬁ¨ôy =
DSI_DATA_ENABLE_ACTIVE_HIGH
Ë? 
LTDC_DEPOLARITY_AL
 : 
LTDC_DEPOLARITY_AH
;

97 
h…dc
->
Inô
.
VSPﬁ¨ôy
 = (
VidCfg
->VSPﬁ¨ôy =
DSI_VSYNC_ACTIVE_HIGH
Ë? 
LTDC_VSPOLARITY_AL
 : 
LTDC_VSPOLARITY_AH
;

98 
h…dc
->
Inô
.
HSPﬁ¨ôy
 = (
VidCfg
->HSPﬁ¨ôy =
DSI_HSYNC_ACTIVE_HIGH
Ë? 
LTDC_HSPOLARITY_AL
 : 
LTDC_HSPOLARITY_AH
;

106 
h…dc
->
Inô
.
VîtiˇlSync
 = 
VidCfg
->
VîtiˇlSyncA˘ive
 - 1;

107 
h…dc
->
Inô
.
AccumuœãdVBP
 = 
VidCfg
->
VîtiˇlSyncA˘ive
 + VidCfg->
VîtiˇlBackP‹ch
 - 1;

108 
h…dc
->
Inô
.
AccumuœãdA˘iveH
 = 
VidCfg
->
VîtiˇlSyncA˘ive
 + VidCfg->
VîtiˇlBackP‹ch
 + VidCfg->
VîtiˇlA˘ive
 - 1;

109 
h…dc
->
Inô
.
TŸÆHeigh
 = 
VidCfg
->
VîtiˇlSyncA˘ive
 + VidCfg->
VîtiˇlBackP‹ch
 + VidCfg->
VîtiˇlA˘ive
 + VidCfg->
VîtiˇlFr⁄tP‹ch
 - 1;

111  
HAL_OK
;

112 
	}
}

124 
HAL_SètusTy≥Def
 
	$HAL_LTDC_Såu˘InôFromAd≠ãdComm™dC⁄fig
(
LTDC_H™dÀTy≥Def
* 
h…dc
, 
DSI_CmdCfgTy≥Def
 *
CmdCfg
)

134 
h…dc
->
Inô
.
DEPﬁ¨ôy
 = (
CmdCfg
->DEPﬁ¨ôy =
DSI_DATA_ENABLE_ACTIVE_HIGH
Ë? 
LTDC_DEPOLARITY_AL
 : 
LTDC_DEPOLARITY_AH
;

135 
h…dc
->
Inô
.
VSPﬁ¨ôy
 = (
CmdCfg
->VSPﬁ¨ôy =
DSI_VSYNC_ACTIVE_HIGH
Ë? 
LTDC_VSPOLARITY_AL
 : 
LTDC_VSPOLARITY_AH
;

136 
h…dc
->
Inô
.
HSPﬁ¨ôy
 = (
CmdCfg
->HSPﬁ¨ôy =
DSI_HSYNC_ACTIVE_HIGH
Ë? 
LTDC_HSPOLARITY_AL
 : 
LTDC_HSPOLARITY_AH
;

143  
HAL_OK
;

144 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_msp_template.c

41 
	~"°m32f4xx_hÆ.h
"

69 
	$HAL_M•Inô
()

72 
	}
}

80 
	$HAL_M•DeInô
()

83 
	}
}

91 
	$HAL_PPP_M•Inô
()

94 
	}
}

102 
	$HAL_PPP_M•DeInô
()

105 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_nand.c

86 
	~"°m32f4xx_hÆ.h
"

93 #ifde‡
HAL_NAND_MODULE_ENABLED


95 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

96 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

97 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

152 
HAL_SètusTy≥Def
 
	$HAL_NAND_Inô
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
FMC_NAND_PCC_TimögTy≥Def
 *
ComS∑˚_Timög
, FMC_NAND_PCC_TimögTy≥De‡*
AâS∑˚_Timög
)

155 if(
h«nd
 =
NULL
)

157  
HAL_ERROR
;

160 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_RESET
)

163 
h«nd
->
Lock
 = 
HAL_UNLOCKED
;

165 
	`HAL_NAND_M•Inô
(
h«nd
);

169 
	`FMC_NAND_Inô
(
h«nd
->
In°™˚
, &(h«nd->
Inô
));

172 
	`FMC_NAND_Comm⁄S∑˚_Timög_Inô
(
h«nd
->
In°™˚
, 
ComS∑˚_Timög
, h«nd->
Inô
.
N™dB™k
);

175 
	`FMC_NAND_AâribuãS∑˚_Timög_Inô
(
h«nd
->
In°™˚
, 
AâS∑˚_Timög
, h«nd->
Inô
.
N™dB™k
);

178 
	`__FMC_NAND_ENABLE
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
);

181 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

183  
HAL_OK
;

184 
	}
}

192 
HAL_SètusTy≥Def
 
	$HAL_NAND_DeInô
(
NAND_H™dÀTy≥Def
 *
h«nd
)

195 
	`HAL_NAND_M•DeInô
(
h«nd
);

198 
	`FMC_NAND_DeInô
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
);

201 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_RESET
;

204 
	`__HAL_UNLOCK
(
h«nd
);

206  
HAL_OK
;

207 
	}
}

215 
__wók
 
	$HAL_NAND_M•Inô
(
NAND_H™dÀTy≥Def
 *
h«nd
)

220 
	}
}

228 
__wók
 
	$HAL_NAND_M•DeInô
(
NAND_H™dÀTy≥Def
 *
h«nd
)

233 
	}
}

242 
	$HAL_NAND_IRQH™dÀr
(
NAND_H™dÀTy≥Def
 *
h«nd
)

245 if(
	`__FMC_NAND_GET_FLAG
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
, 
FMC_FLAG_RISING_EDGE
))

248 
	`HAL_NAND_ITCÆlback
(
h«nd
);

251 
	`__FMC_NAND_CLEAR_FLAG
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
, 
FMC_FLAG_RISING_EDGE
);

255 if(
	`__FMC_NAND_GET_FLAG
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
, 
FMC_FLAG_LEVEL
))

258 
	`HAL_NAND_ITCÆlback
(
h«nd
);

261 
	`__FMC_NAND_CLEAR_FLAG
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
, 
FMC_FLAG_LEVEL
);

265 if(
	`__FMC_NAND_GET_FLAG
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
, 
FMC_FLAG_FALLING_EDGE
))

268 
	`HAL_NAND_ITCÆlback
(
h«nd
);

271 
	`__FMC_NAND_CLEAR_FLAG
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
, 
FMC_FLAG_FALLING_EDGE
);

275 if(
	`__FMC_NAND_GET_FLAG
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
, 
FMC_FLAG_FEMPT
))

278 
	`HAL_NAND_ITCÆlback
(
h«nd
);

281 
	`__FMC_NAND_CLEAR_FLAG
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
, 
FMC_FLAG_FEMPT
);

284 
	}
}

292 
__wók
 
	$HAL_NAND_ITCÆlback
(
NAND_H™dÀTy≥Def
 *
h«nd
)

297 
	}
}

325 
HAL_SètusTy≥Def
 
	$HAL_NAND_Ród_ID
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_IDTy≥Def
 *
pNAND_ID
)

327 
__IO
 
uöt32_t
 
d©a
 = 0;

328 
uöt32_t
 
devi˚addªss
 = 0;

331 
	`__HAL_LOCK
(
h«nd
);

334 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

336  
HAL_BUSY
;

340 if(
h«nd
->
Inô
.
N™dB™k
 =
FMC_NAND_BANK2
)

342 
devi˚addªss
 = 
NAND_DEVICE1
;

346 
devi˚addªss
 = 
NAND_DEVICE2
;

350 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

353 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_READID
;

354 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)) = 0x00;

357 
d©a
 = *(
__IO
 
uöt32_t
 *)
devi˚addªss
;

360 
pNAND_ID
->
Makî_Id
 = 
	`ADDR_1ST_CYCLE
(
d©a
);

361 
pNAND_ID
->
Devi˚_Id
 = 
	`ADDR_2ND_CYCLE
(
d©a
);

362 
pNAND_ID
->
Thúd_Id
 = 
	`ADDR_3RD_CYCLE
(
d©a
);

363 
pNAND_ID
->
Fouπh_Id
 = 
	`ADDR_4TH_CYCLE
(
d©a
);

366 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

369 
	`__HAL_UNLOCK
(
h«nd
);

371  
HAL_OK
;

372 
	}
}

380 
HAL_SètusTy≥Def
 
	$HAL_NAND_Re£t
(
NAND_H™dÀTy≥Def
 *
h«nd
)

382 
uöt32_t
 
devi˚addªss
 = 0;

385 
	`__HAL_LOCK
(
h«nd
);

388 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

390  
HAL_BUSY
;

394 if(
h«nd
->
Inô
.
N™dB™k
 =
FMC_NAND_BANK2
)

396 
devi˚addªss
 = 
NAND_DEVICE1
;

400 
devi˚addªss
 = 
NAND_DEVICE2
;

404 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

407 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)) = 0xFF;

411 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

414 
	`__HAL_UNLOCK
(
h«nd
);

416  
HAL_OK
;

418 
	}
}

429 
HAL_SètusTy≥Def
 
	$HAL_NAND_Ród_Page
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
NumPageToRód
)

431 
__IO
 
uöt32_t
 
ödex
 = 0;

432 
uöt32_t
 
devi˚addªss
 = 0, 
size
 = 0, 
num∑ge§ód
 = 0, 
addªss°©us
 = 
NAND_VALID_ADDRESS
;

433 
NAND_AddªssTy≥Def
 
«ndaddªss
;

434 
uöt32_t
 
addªssoff£t
 = 0;

437 
	`__HAL_LOCK
(
h«nd
);

440 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

442  
HAL_BUSY
;

446 if(
h«nd
->
Inô
.
N™dB™k
 =
FMC_NAND_BANK2
)

448 
devi˚addªss
 = 
NAND_DEVICE1
;

452 
devi˚addªss
 = 
NAND_DEVICE2
;

456 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

459 
«ndaddªss
.
Block
 = 
pAddªss
->Block;

460 
«ndaddªss
.
Page
 = 
pAddªss
->Page;

461 
«ndaddªss
.
Z⁄e
 = 
pAddªss
->Zone;

464 (
NumPageToRód
 !0Ë&& (
addªss°©us
 =
NAND_VALID_ADDRESS
))

467 
size
 = 
h«nd
->
Info
.
PageSize
 + ((h«nd->Info.PageSizeË* 
num∑ge§ód
);

470 
addªssoff£t
 = 
	`ARRAY_ADDRESS
(&
«ndaddªss
, 
h«nd
);

473 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_AREA_A
;

475 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)) = 0x00;

476 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_1ST_CYCLE
(
addªssoff£t
);

477 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_2ND_CYCLE
(
addªssoff£t
);

478 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_3RD_CYCLE
(
addªssoff£t
);

481 if(
h«nd
->
Info
.
BlockNbr
 >= 1024)

483 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_4TH_CYCLE
(
addªssoff£t
);

486 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_AREA_TRUE1
;

489 
ödex
 = 
size
; index != 0; index--)

491 *(
uöt8_t
 *)
pBuf„r
++ = *(uöt8_à*)
devi˚addªss
;

495 
num∑ge§ód
++;

498 
NumPageToRód
--;

501 
addªss°©us
 = 
	`HAL_NAND_Addªss_Inc
(
h«nd
, &
«ndaddªss
);

505 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

508 
	`__HAL_UNLOCK
(
h«nd
);

510  
HAL_OK
;

512 
	}
}

523 
HAL_SètusTy≥Def
 
	$HAL_NAND_Wrôe_Page
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
NumPageToWrôe
)

525 
__IO
 
uöt32_t
 
ödex
 = 0;

526 
uöt32_t
 
tick°¨t
 = 0;

527 
uöt32_t
 
devi˚addªss
 = 0 , 
size
 = 0, 
num∑geswrôãn
 = 0, 
addªss°©us
 = 
NAND_VALID_ADDRESS
;

528 
NAND_AddªssTy≥Def
 
«ndaddªss
;

529 
uöt32_t
 
addªssoff£t
 = 0;

532 
	`__HAL_LOCK
(
h«nd
);

535 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

537  
HAL_BUSY
;

541 if(
h«nd
->
Inô
.
N™dB™k
 =
FMC_NAND_BANK2
)

543 
devi˚addªss
 = 
NAND_DEVICE1
;

547 
devi˚addªss
 = 
NAND_DEVICE2
;

551 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

554 
«ndaddªss
.
Block
 = 
pAddªss
->Block;

555 
«ndaddªss
.
Page
 = 
pAddªss
->Page;

556 
«ndaddªss
.
Z⁄e
 = 
pAddªss
->Zone;

559 (
NumPageToWrôe
 !0Ë&& (
addªss°©us
 =
NAND_VALID_ADDRESS
))

562 
size
 = 
h«nd
->
Info
.
PageSize
 + ((h«nd->Info.PageSizeË* 
num∑geswrôãn
);

565 
addªssoff£t
 = 
	`ARRAY_ADDRESS
(&
«ndaddªss
, 
h«nd
);

568 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_AREA_A
;

569 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_WRITE0
;

571 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)) = 0x00;

572 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_1ST_CYCLE
(
addªssoff£t
);

573 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_2ND_CYCLE
(
addªssoff£t
);

574 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_3RD_CYCLE
(
addªssoff£t
);

577 if(
h«nd
->
Info
.
BlockNbr
 >= 1024)

579 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_4TH_CYCLE
(
addªssoff£t
);

583 
ödex
 = 
size
; index != 0; index--)

585 *(
__IO
 
uöt8_t
 *)
devi˚addªss
 = *(uöt8_à*)
pBuf„r
++;

588 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_WRITE_TRUE1
;

591 
tick°¨t
 = 
	`HAL_GëTick
();

594 
	`HAL_NAND_Ród_Sètus
(
h«nd
Ë!
NAND_READY
)

596 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
NAND_WRITE_TIMEOUT
)

598  
HAL_TIMEOUT
;

603 
num∑geswrôãn
++;

606 
NumPageToWrôe
--;

609 
addªss°©us
 = 
	`HAL_NAND_Addªss_Inc
(
h«nd
, &
«ndaddªss
);

613 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

616 
	`__HAL_UNLOCK
(
h«nd
);

618  
HAL_OK
;

619 
	}
}

630 
HAL_SètusTy≥Def
 
	$HAL_NAND_Ród_S∑ªAªa
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
NumS∑ªAªaToRód
)

632 
__IO
 
uöt32_t
 
ödex
 = 0;

633 
uöt32_t
 
devi˚addªss
 = 0, 
size
 = 0, 
num_•¨e_¨ó_ªad
 = 0, 
addªss°©us
 = 
NAND_VALID_ADDRESS
;

634 
NAND_AddªssTy≥Def
 
«ndaddªss
;

635 
uöt32_t
 
addªssoff£t
 = 0;

638 
	`__HAL_LOCK
(
h«nd
);

641 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

643  
HAL_BUSY
;

647 if(
h«nd
->
Inô
.
N™dB™k
 =
FMC_NAND_BANK2
)

649 
devi˚addªss
 = 
NAND_DEVICE1
;

653 
devi˚addªss
 = 
NAND_DEVICE2
;

657 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

660 
«ndaddªss
.
Block
 = 
pAddªss
->Block;

661 
«ndaddªss
.
Page
 = 
pAddªss
->Page;

662 
«ndaddªss
.
Z⁄e
 = 
pAddªss
->Zone;

665 (
NumS∑ªAªaToRód
 !0Ë&& (
addªss°©us
 =
NAND_VALID_ADDRESS
))

668 
size
 = (
h«nd
->
Info
.
S∑ªAªaSize
Ë+ ((h«nd->Info.S∑ªAªaSizeË* 
num_•¨e_¨ó_ªad
);

671 
addªssoff£t
 = 
	`ARRAY_ADDRESS
(&
«ndaddªss
, 
h«nd
);

674 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_AREA_C
;

676 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)) = 0x00;

677 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_1ST_CYCLE
(
addªssoff£t
);

678 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_2ND_CYCLE
(
addªssoff£t
);

679 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_3RD_CYCLE
(
addªssoff£t
);

682 if(
h«nd
->
Info
.
BlockNbr
 >= 1024)

684 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_4TH_CYCLE
(
addªssoff£t
);

687 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_AREA_TRUE1
;

690 
ödex
 = 
size
 ;index != 0; index--)

692 *(
uöt8_t
 *)
pBuf„r
++ = *(uöt8_à*)
devi˚addªss
;

696 
num_•¨e_¨ó_ªad
++;

699 
NumS∑ªAªaToRód
--;

702 
addªss°©us
 = 
	`HAL_NAND_Addªss_Inc
(
h«nd
, &
«ndaddªss
);

706 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

709 
	`__HAL_UNLOCK
(
h«nd
);

711  
HAL_OK
;

712 
	}
}

723 
HAL_SètusTy≥Def
 
	$HAL_NAND_Wrôe_S∑ªAªa
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
, 
uöt8_t
 *
pBuf„r
, 
uöt32_t
 
NumS∑ªAªaTowrôe
)

725 
__IO
 
uöt32_t
 
ödex
 = 0;

726 
uöt32_t
 
tick°¨t
 = 0;

727 
uöt32_t
 
devi˚addªss
 = 0, 
size
 = 0, 
num_•¨e_¨ó_wrôãn
 = 0, 
addªss°©us
 = 
NAND_VALID_ADDRESS
;

728 
NAND_AddªssTy≥Def
 
«ndaddªss
;

729 
uöt32_t
 
addªssoff£t
 = 0;

732 
	`__HAL_LOCK
(
h«nd
);

735 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

737  
HAL_BUSY
;

741 if(
h«nd
->
Inô
.
N™dB™k
 =
FMC_NAND_BANK2
)

743 
devi˚addªss
 = 
NAND_DEVICE1
;

747 
devi˚addªss
 = 
NAND_DEVICE2
;

751 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

754 
«ndaddªss
.
Block
 = 
pAddªss
->Block;

755 
«ndaddªss
.
Page
 = 
pAddªss
->Page;

756 
«ndaddªss
.
Z⁄e
 = 
pAddªss
->Zone;

759 (
NumS∑ªAªaTowrôe
 !0Ë&& (
addªss°©us
 =
NAND_VALID_ADDRESS
))

762 
size
 = (
h«nd
->
Info
.
S∑ªAªaSize
Ë+ ((h«nd->Info.S∑ªAªaSizeË* 
num_•¨e_¨ó_wrôãn
);

765 
addªssoff£t
 = 
	`ARRAY_ADDRESS
(&
«ndaddªss
, 
h«nd
);

768 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_AREA_C
;

769 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_WRITE0
;

771 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)) = 0x00;

772 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_1ST_CYCLE
(
addªssoff£t
);

773 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_2ND_CYCLE
(
addªssoff£t
);

774 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_3RD_CYCLE
(
addªssoff£t
);

777 if(
h«nd
->
Info
.
BlockNbr
 >= 1024)

779 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_4TH_CYCLE
(
addªssoff£t
);

783 ; 
ödex
 < 
size
; index++)

785 *(
__IO
 
uöt8_t
 *)
devi˚addªss
 = *(uöt8_à*)
pBuf„r
++;

788 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_WRITE_TRUE1
;

791 
tick°¨t
 = 
	`HAL_GëTick
();

794 
	`HAL_NAND_Ród_Sètus
(
h«nd
Ë!
NAND_READY
)

796 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
NAND_WRITE_TIMEOUT
)

798  
HAL_TIMEOUT
;

803 
num_•¨e_¨ó_wrôãn
++;

806 
NumS∑ªAªaTowrôe
--;

809 
addªss°©us
 = 
	`HAL_NAND_Addªss_Inc
(
h«nd
, &
«ndaddªss
);

813 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

816 
	`__HAL_UNLOCK
(
h«nd
);

818  
HAL_OK
;

819 
	}
}

828 
HAL_SètusTy≥Def
 
	$HAL_NAND_Eø£_Block
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
)

830 
uöt32_t
 
devi˚addªss
 = 0;

831 
uöt32_t
 
tick°¨t
 = 0;

834 
	`__HAL_LOCK
(
h«nd
);

837 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

839  
HAL_BUSY
;

843 if(
h«nd
->
Inô
.
N™dB™k
 =
FMC_NAND_BANK2
)

845 
devi˚addªss
 = 
NAND_DEVICE1
;

849 
devi˚addªss
 = 
NAND_DEVICE2
;

853 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

856 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_ERASE0
;

858 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_1ST_CYCLE
(
	`ARRAY_ADDRESS
(
pAddªss
, 
h«nd
));

859 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_2ND_CYCLE
(
	`ARRAY_ADDRESS
(
pAddªss
, 
h«nd
));

860 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_3RD_CYCLE
(
	`ARRAY_ADDRESS
(
pAddªss
, 
h«nd
));

863 if(
h«nd
->
Info
.
BlockNbr
 >= 1024)

865 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
ADDR_AREA
)Ë
	`ADDR_4TH_CYCLE
(
	`ARRAY_ADDRESS
(
pAddªss
, 
h«nd
));

868 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_ERASE1
;

871 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

874 
tick°¨t
 = 
	`HAL_GëTick
();

877 
	`HAL_NAND_Ród_Sètus
(
h«nd
Ë!
NAND_READY
)

879 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
NAND_WRITE_TIMEOUT
)

882 
	`__HAL_UNLOCK
(
h«nd
);

884  
HAL_TIMEOUT
;

889 
	`__HAL_UNLOCK
(
h«nd
);

891  
HAL_OK
;

892 
	}
}

900 
uöt32_t
 
	$HAL_NAND_Ród_Sètus
(
NAND_H™dÀTy≥Def
 *
h«nd
)

902 
uöt32_t
 
d©a
 = 0;

903 
uöt32_t
 
devi˚addªss
 = 0;

906 if(
h«nd
->
Inô
.
N™dB™k
 =
FMC_NAND_BANK2
)

908 
devi˚addªss
 = 
NAND_DEVICE1
;

912 
devi˚addªss
 = 
NAND_DEVICE2
;

916 *(
__IO
 
uöt8_t
 *)((
uöt32_t
)(
devi˚addªss
 | 
CMD_AREA
)Ë
NAND_CMD_STATUS
;

919 
d©a
 = *(
__IO
 
uöt8_t
 *)
devi˚addªss
;

922 if((
d©a
 & 
NAND_ERROR
) == NAND_ERROR)

924  
NAND_ERROR
;

926 if((
d©a
 & 
NAND_READY
) == NAND_READY)

928  
NAND_READY
;

931  
NAND_BUSY
;

932 
	}
}

943 
uöt32_t
 
	$HAL_NAND_Addªss_Inc
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
NAND_AddªssTy≥Def
 *
pAddªss
)

945 
uöt32_t
 
°©us
 = 
NAND_VALID_ADDRESS
;

948 
pAddªss
->
Page
++;

951 if(
pAddªss
->
Page
 =
h«nd
->
Info
.
BlockSize
)

953 
pAddªss
->
Page
 = 0;

954 
pAddªss
->
Block
++;

956 if(
pAddªss
->
Block
 =
h«nd
->
Info
.
Z⁄eSize
)

958 
pAddªss
->
Block
 = 0;

959 
pAddªss
->
Z⁄e
++;

961 if(
pAddªss
->
Z⁄e
 =(
h«nd
->
Info
.
Z⁄eSize
/ h«nd->Info.
BlockNbr
))

963 
°©us
 = 
NAND_INVALID_ADDRESS
;

968  (
°©us
);

969 
	}
}

996 
HAL_SètusTy≥Def
 
	$HAL_NAND_ECC_E«bÀ
(
NAND_H™dÀTy≥Def
 *
h«nd
)

999 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

1001  
HAL_BUSY
;

1005 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

1008 
	`FMC_NAND_ECC_E«bÀ
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
);

1011 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

1013  
HAL_OK
;

1014 
	}
}

1022 
HAL_SètusTy≥Def
 
	$HAL_NAND_ECC_DißbÀ
(
NAND_H™dÀTy≥Def
 *
h«nd
)

1025 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

1027  
HAL_BUSY
;

1031 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

1034 
	`FMC_NAND_ECC_DißbÀ
(
h«nd
->
In°™˚
, h«nd->
Inô
.
N™dB™k
);

1037 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

1039  
HAL_OK
;

1040 
	}
}

1050 
HAL_SètusTy≥Def
 
	$HAL_NAND_GëECC
(
NAND_H™dÀTy≥Def
 *
h«nd
, 
uöt32_t
 *
ECCvÆ
, uöt32_à
Timeout
)

1052 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1055 if(
h«nd
->
Sèã
 =
HAL_NAND_STATE_BUSY
)

1057  
HAL_BUSY
;

1061 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_BUSY
;

1064 
°©us
 = 
	`FMC_NAND_GëECC
(
h«nd
->
In°™˚
, 
ECCvÆ
, h«nd->
Inô
.
N™dB™k
, 
Timeout
);

1067 
h«nd
->
Sèã
 = 
HAL_NAND_STATE_READY
;

1069  
°©us
;

1070 
	}
}

1098 
HAL_NAND_SèãTy≥Def
 
	$HAL_NAND_GëSèã
(
NAND_H™dÀTy≥Def
 *
h«nd
)

1100  
h«nd
->
Sèã
;

1101 
	}
}

1116 
	gSTM32F427xx
 || 
	gSTM32F437xx
 || 
	gSTM32F429xx
 || 
	gSTM32F439xx
 ||\

1117 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_nor.c

86 
	~"°m32f4xx_hÆ.h
"

96 #ifde‡
HAL_NOR_MODULE_ENABLED


97 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

98 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

99 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

108 
	#NOR_CMD_ADDRESS_FIRST
 (
uöt16_t
)0x0555

	)

109 
	#NOR_CMD_ADDRESS_FIRST_CFI
 (
uöt16_t
)0x0055

	)

110 
	#NOR_CMD_ADDRESS_SECOND
 (
uöt16_t
)0x02AA

	)

111 
	#NOR_CMD_ADDRESS_THIRD
 (
uöt16_t
)0x0555

	)

112 
	#NOR_CMD_ADDRESS_FOURTH
 (
uöt16_t
)0x0555

	)

113 
	#NOR_CMD_ADDRESS_FIFTH
 (
uöt16_t
)0x02AA

	)

114 
	#NOR_CMD_ADDRESS_SIXTH
 (
uöt16_t
)0x0555

	)

117 
	#NOR_CMD_DATA_READ_RESET
 (
uöt16_t
)0x00F0

	)

118 
	#NOR_CMD_DATA_FIRST
 (
uöt16_t
)0x00AA

	)

119 
	#NOR_CMD_DATA_SECOND
 (
uöt16_t
)0x0055

	)

120 
	#NOR_CMD_DATA_AUTO_SELECT
 (
uöt16_t
)0x0090

	)

121 
	#NOR_CMD_DATA_PROGRAM
 (
uöt16_t
)0x00A0

	)

122 
	#NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD
 (
uöt16_t
)0x0080

	)

123 
	#NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH
 (
uöt16_t
)0x00AA

	)

124 
	#NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH
 (
uöt16_t
)0x0055

	)

125 
	#NOR_CMD_DATA_CHIP_ERASE
 (
uöt16_t
)0x0010

	)

126 
	#NOR_CMD_DATA_CFI
 (
uöt16_t
)0x0098

	)

128 
	#NOR_CMD_DATA_BUFFER_AND_PROG
 (
uöt8_t
)0x25

	)

129 
	#NOR_CMD_DATA_BUFFER_AND_PROG_CONFIRM
 (
uöt8_t
)0x29

	)

130 
	#NOR_CMD_DATA_BLOCK_ERASE
 (
uöt8_t
)0x30

	)

133 
	#NOR_MASK_STATUS_DQ5
 (
uöt16_t
)0x0020

	)

134 
	#NOR_MASK_STATUS_DQ6
 (
uöt16_t
)0x0040

	)

170 
HAL_SètusTy≥Def
 
	$HAL_NOR_Inô
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
FMC_NORSRAM_TimögTy≥Def
 *
Timög
, FMC_NORSRAM_TimögTy≥De‡*
ExtTimög
)

173 if(
hn‹
 =
NULL
)

175  
HAL_ERROR
;

178 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_RESET
)

181 
hn‹
->
Lock
 = 
HAL_UNLOCKED
;

183 
	`HAL_NOR_M•Inô
(
hn‹
);

187 
	`FMC_NORSRAM_Inô
(
hn‹
->
In°™˚
, &(hn‹->
Inô
));

190 
	`FMC_NORSRAM_Timög_Inô
(
hn‹
->
In°™˚
, 
Timög
, hn‹->
Inô
.
NSB™k
);

193 
	`FMC_NORSRAM_Exãnded_Timög_Inô
(
hn‹
->
Exãnded
, 
ExtTimög
, hn‹->
Inô
.
NSB™k
, hn‹->Inô.
ExãndedMode
);

196 
	`__FMC_NORSRAM_ENABLE
(
hn‹
->
In°™˚
, hn‹->
Inô
.
NSB™k
);

199 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

201  
HAL_OK
;

202 
	}
}

210 
HAL_SètusTy≥Def
 
	$HAL_NOR_DeInô
(
NOR_H™dÀTy≥Def
 *
hn‹
)

213 
	`HAL_NOR_M•DeInô
(
hn‹
);

216 
	`FMC_NORSRAM_DeInô
(
hn‹
->
In°™˚
, hn‹->
Exãnded
, hn‹->
Inô
.
NSB™k
);

219 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_RESET
;

222 
	`__HAL_UNLOCK
(
hn‹
);

224  
HAL_OK
;

225 
	}
}

233 
__wók
 
	$HAL_NOR_M•Inô
(
NOR_H™dÀTy≥Def
 *
hn‹
)

238 
	}
}

246 
__wók
 
	$HAL_NOR_M•DeInô
(
NOR_H™dÀTy≥Def
 *
hn‹
)

251 
	}
}

260 
__wók
 
	$HAL_NOR_M•Waô
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
Timeout
)

265 
	}
}

291 
HAL_SètusTy≥Def
 
	$HAL_NOR_Ród_ID
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
NOR_IDTy≥Def
 *
pNOR_ID
)

293 
uöt32_t
 
devi˚addªss
 = 0;

296 
	`__HAL_LOCK
(
hn‹
);

299 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

301  
HAL_BUSY
;

305 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

307 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

309 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

311 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

313 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

315 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

319 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

323 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

326 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

327 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

328 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_THIRD
), 
NOR_CMD_DATA_AUTO_SELECT
);

331 
pNOR_ID
->
M™uÁ˘uªr_Code
 = *(
__IO
 
uöt16_t
 *Ë
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
MC_ADDRESS
);

332 
pNOR_ID
->
Devi˚_Code1
 = *(
__IO
 
uöt16_t
 *Ë
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
DEVICE_CODE1_ADDR
);

333 
pNOR_ID
->
Devi˚_Code2
 = *(
__IO
 
uöt16_t
 *Ë
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
DEVICE_CODE2_ADDR
);

334 
pNOR_ID
->
Devi˚_Code3
 = *(
__IO
 
uöt16_t
 *Ë
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
DEVICE_CODE3_ADDR
);

337 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

340 
	`__HAL_UNLOCK
(
hn‹
);

342  
HAL_OK
;

343 
	}
}

350 
HAL_SètusTy≥Def
 
	$HAL_NOR_Rëu∫ToRódMode
(
NOR_H™dÀTy≥Def
 *
hn‹
)

352 
uöt32_t
 
devi˚addªss
 = 0;

355 
	`__HAL_LOCK
(
hn‹
);

358 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

360  
HAL_BUSY
;

364 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

366 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

368 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

370 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

372 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

374 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

378 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

381 
	`NOR_WRITE
(
devi˚addªss
, 
NOR_CMD_DATA_READ_RESET
);

384 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

387 
	`__HAL_UNLOCK
(
hn‹
);

389  
HAL_OK
;

390 
	}
}

399 
HAL_SètusTy≥Def
 
	$HAL_NOR_Ród
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pD©a
)

401 
uöt32_t
 
devi˚addªss
 = 0;

404 
	`__HAL_LOCK
(
hn‹
);

407 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

409  
HAL_BUSY
;

413 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

415 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

417 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

419 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

421 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

423 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

427 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

431 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

434 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

435 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

436 
	`NOR_WRITE
((
uöt32_t
)
pAddªss
, 
NOR_CMD_DATA_READ_RESET
);

439 *
pD©a
 = *(
__IO
 
uöt32_t
 *)(uöt32_t)
pAddªss
;

442 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

445 
	`__HAL_UNLOCK
(
hn‹
);

447  
HAL_OK
;

448 
	}
}

457 
HAL_SètusTy≥Def
 
	$HAL_NOR_Progøm
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pD©a
)

459 
uöt32_t
 
devi˚addªss
 = 0;

462 
	`__HAL_LOCK
(
hn‹
);

465 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

467  
HAL_BUSY
;

471 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

473 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

475 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

477 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

479 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

481 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

485 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

489 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

492 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

493 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

494 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_THIRD
), 
NOR_CMD_DATA_PROGRAM
);

497 
	`NOR_WRITE
(
pAddªss
, *
pD©a
);

500 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

503 
	`__HAL_UNLOCK
(
hn‹
);

505  
HAL_OK
;

506 
	}
}

517 
HAL_SètusTy≥Def
 
	$HAL_NOR_RódBuf„r
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
uwAddªss
, 
uöt16_t
 *
pD©a
, uöt32_à
uwBuf„rSize
)

519 
uöt32_t
 
devi˚addªss
 = 0;

522 
	`__HAL_LOCK
(
hn‹
);

525 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

527  
HAL_BUSY
;

531 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

533 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

535 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

537 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

539 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

541 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

545 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

549 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

552 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

553 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

554 
	`NOR_WRITE
(
uwAddªss
, 0x00F0);

557  
uwBuf„rSize
 > 0)

559 *
pD©a
++ = *(
__IO
 
uöt16_t
 *)
uwAddªss
;

560 
uwAddªss
 += 2;

561 
uwBuf„rSize
--;

565 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

568 
	`__HAL_UNLOCK
(
hn‹
);

570  
HAL_OK
;

571 
	}
}

582 
HAL_SètusTy≥Def
 
	$HAL_NOR_ProgømBuf„r
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
uwAddªss
, 
uöt16_t
 *
pD©a
, uöt32_à
uwBuf„rSize
)

584 
uöt16_t
 * 
p_cuºíèddªss
 = (uöt16_à*)
NULL
;

585 
uöt16_t
 * 
p_ídaddªss
 = (uöt16_à*)
NULL
;

586 
uöt32_t
 
œ°lﬂdedaddªss
 = 0, 
devi˚addªss
 = 0;

589 
	`__HAL_LOCK
(
hn‹
);

592 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

594  
HAL_BUSY
;

598 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

600 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

602 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

604 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

606 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

608 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

612 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

616 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

619 
p_cuºíèddªss
 = (
uöt16_t
*)((
uöt32_t
)(
uwAddªss
));

620 
p_ídaddªss
 = 
p_cuºíèddªss
 + (
uwBuf„rSize
-1);

621 
œ°lﬂdedaddªss
 = (
uöt32_t
)(
uwAddªss
);

624 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

625 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

628 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
uwAddªss
), 
NOR_CMD_DATA_BUFFER_AND_PROG
);

629 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
uwAddªss
), (
uwBuf„rSize
 - 1));

632 
p_cuºíèddªss
 <
p_ídaddªss
)

635 
œ°lﬂdedaddªss
 = (
uöt32_t
)
p_cuºíèddªss
;

637 
	`NOR_WRITE
(
p_cuºíèddªss
, *
pD©a
++);

639 
p_cuºíèddªss
 ++;

642 
	`NOR_WRITE
((
uöt32_t
)(
œ°lﬂdedaddªss
), 
NOR_CMD_DATA_BUFFER_AND_PROG_CONFIRM
);

645 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

648 
	`__HAL_UNLOCK
(
hn‹
);

650  
HAL_OK
;

652 
	}
}

661 
HAL_SètusTy≥Def
 
	$HAL_NOR_Eø£_Block
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
BlockAddªss
, uöt32_à
Addªss
)

663 
uöt32_t
 
devi˚addªss
 = 0;

666 
	`__HAL_LOCK
(
hn‹
);

669 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

671  
HAL_BUSY
;

675 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

677 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

679 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

681 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

683 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

685 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

689 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

693 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

696 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

697 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

698 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_THIRD
), 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD
);

699 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FOURTH
), 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH
);

700 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIFTH
), 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH
);

701 
	`NOR_WRITE
((
uöt32_t
)(
BlockAddªss
 + 
Addªss
), 
NOR_CMD_DATA_BLOCK_ERASE
);

704 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

707 
	`__HAL_UNLOCK
(
hn‹
);

709  
HAL_OK
;

711 
	}
}

719 
HAL_SètusTy≥Def
 
	$HAL_NOR_Eø£_Chù
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
Addªss
)

721 
uöt32_t
 
devi˚addªss
 = 0;

724 
	`__HAL_LOCK
(
hn‹
);

727 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

729  
HAL_BUSY
;

733 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

735 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

737 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

739 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

741 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

743 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

747 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

751 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

754 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIRST
), 
NOR_CMD_DATA_FIRST
);

755 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_SECOND
), 
NOR_CMD_DATA_SECOND
);

756 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_THIRD
), 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_THIRD
);

757 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FOURTH
), 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_FOURTH
);

758 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIFTH
), 
NOR_CMD_DATA_CHIP_BLOCK_ERASE_FIFTH
);

759 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_SIXTH
), 
NOR_CMD_DATA_CHIP_ERASE
);

762 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

765 
	`__HAL_UNLOCK
(
hn‹
);

767  
HAL_OK
;

768 
	}
}

776 
HAL_SètusTy≥Def
 
	$HAL_NOR_Ród_CFI
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
NOR_CFITy≥Def
 *
pNOR_CFI
)

778 
uöt32_t
 
devi˚addªss
 = 0;

781 
	`__HAL_LOCK
(
hn‹
);

784 if(
hn‹
->
Sèã
 =
HAL_NOR_STATE_BUSY
)

786  
HAL_BUSY
;

790 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK1
)

792 
devi˚addªss
 = 
NOR_MEMORY_ADRESS1
;

794 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK2
)

796 
devi˚addªss
 = 
NOR_MEMORY_ADRESS2
;

798 i‡(
hn‹
->
Inô
.
NSB™k
 =
FMC_NORSRAM_BANK3
)

800 
devi˚addªss
 = 
NOR_MEMORY_ADRESS3
;

804 
devi˚addªss
 = 
NOR_MEMORY_ADRESS4
;

808 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

811 
	`NOR_WRITE
(
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
NOR_CMD_ADDRESS_FIRST_CFI
), 
NOR_CMD_DATA_CFI
);

814 
pNOR_CFI
->
CFI_1
 = *(
__IO
 
uöt16_t
 *Ë
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
CFI1_ADDRESS
);

815 
pNOR_CFI
->
CFI_2
 = *(
__IO
 
uöt16_t
 *Ë
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
CFI2_ADDRESS
);

816 
pNOR_CFI
->
CFI_3
 = *(
__IO
 
uöt16_t
 *Ë
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
CFI3_ADDRESS
);

817 
pNOR_CFI
->
CFI_4
 = *(
__IO
 
uöt16_t
 *Ë
	`NOR_ADDR_SHIFT
(
devi˚addªss
, 
NOR_MEMORY_8B
, 
CFI4_ADDRESS
);

820 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

823 
	`__HAL_UNLOCK
(
hn‹
);

825  
HAL_OK
;

826 
	}
}

852 
HAL_SètusTy≥Def
 
	$HAL_NOR_WrôeO≥øti⁄_E«bÀ
(
NOR_H™dÀTy≥Def
 *
hn‹
)

855 
	`__HAL_LOCK
(
hn‹
);

858 
	`FMC_NORSRAM_WrôeO≥øti⁄_E«bÀ
(
hn‹
->
In°™˚
, hn‹->
Inô
.
NSB™k
);

861 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_READY
;

864 
	`__HAL_UNLOCK
(
hn‹
);

866  
HAL_OK
;

867 
	}
}

874 
HAL_SètusTy≥Def
 
	$HAL_NOR_WrôeO≥øti⁄_DißbÀ
(
NOR_H™dÀTy≥Def
 *
hn‹
)

877 
	`__HAL_LOCK
(
hn‹
);

880 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_BUSY
;

883 
	`FMC_NORSRAM_WrôeO≥øti⁄_DißbÀ
(
hn‹
->
In°™˚
, hn‹->
Inô
.
NSB™k
);

886 
hn‹
->
Sèã
 = 
HAL_NOR_STATE_PROTECTED
;

889 
	`__HAL_UNLOCK
(
hn‹
);

891  
HAL_OK
;

892 
	}
}

918 
HAL_NOR_SèãTy≥Def
 
	$HAL_NOR_GëSèã
(
NOR_H™dÀTy≥Def
 *
hn‹
)

920  
hn‹
->
Sèã
;

921 
	}
}

931 
HAL_NOR_SètusTy≥Def
 
	$HAL_NOR_GëSètus
(
NOR_H™dÀTy≥Def
 *
hn‹
, 
uöt32_t
 
Addªss
, uöt32_à
Timeout
)

933 
HAL_NOR_SètusTy≥Def
 
°©us
 = 
HAL_NOR_STATUS_ONGOING
;

934 
uöt16_t
 
tmpSR1
 = 0, 
tmpSR2
 = 0;

935 
uöt32_t
 
tick°¨t
 = 0;

938 
	`HAL_NOR_M•Waô
(
hn‹
, 
Timeout
);

943 
tick°¨t
 = 
	`HAL_GëTick
();

944 (
°©us
 !
HAL_NOR_STATUS_SUCCESS
 ) && (°©u†!
HAL_NOR_STATUS_TIMEOUT
))

947 if(
Timeout
 !
HAL_MAX_DELAY
)

949 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

951 
°©us
 = 
HAL_NOR_STATUS_TIMEOUT
;

956 
tmpSR1
 = *(
__IO
 
uöt16_t
 *)
Addªss
;

957 
tmpSR2
 = *(
__IO
 
uöt16_t
 *)
Addªss
;

960 if((
tmpSR1
 & 
NOR_MASK_STATUS_DQ6
Ë=(
tmpSR2
 & NOR_MASK_STATUS_DQ6))

962  
HAL_NOR_STATUS_SUCCESS
 ;

965 if((
tmpSR1
 & 
NOR_MASK_STATUS_DQ5
) == NOR_MASK_STATUS_DQ5)

967 
°©us
 = 
HAL_NOR_STATUS_ONGOING
;

970 
tmpSR1
 = *(
__IO
 
uöt16_t
 *)
Addªss
;

971 
tmpSR2
 = *(
__IO
 
uöt16_t
 *)
Addªss
;

974 if((
tmpSR1
 & 
NOR_MASK_STATUS_DQ6
Ë=(
tmpSR2
 & NOR_MASK_STATUS_DQ6))

976  
HAL_NOR_STATUS_SUCCESS
;

978 if((
tmpSR1
 & 
NOR_MASK_STATUS_DQ5
) == NOR_MASK_STATUS_DQ5)

980  
HAL_NOR_STATUS_ERROR
;

985  
°©us
;

986 
	}
}

997 
	gSTM32F437xx
 || 
	gSTM32F429xx
 || 
	gSTM32F439xx
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 ||\

998 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pccard.c

81 
	~"°m32f4xx_hÆ.h
"

87 #ifde‡
HAL_PCCARD_MODULE_ENABLED


88 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

89 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| 
	$deföed
(
STM32F439xx
)

100 
	#PCCARD_TIMEOUT_READ_ID
 (
uöt32_t
)0x0000FFFF

	)

101 
	#PCCARD_TIMEOUT_READ_WRITE_SECTOR
 (
uöt32_t
)0x0000FFFF

	)

102 
	#PCCARD_TIMEOUT_ERASE_SECTOR
 (
uöt32_t
)0x00000400

	)

103 
	#PCCARD_TIMEOUT_STATUS
 (
uöt32_t
)0x01000000

	)

105 
	#PCCARD_STATUS_OK
 (
uöt8_t
)0x58

	)

106 
	#PCCARD_STATUS_WRITE_OK
 (
uöt8_t
)0x50

	)

143 
HAL_SètusTy≥Def
 
	$HAL_PCCARD_Inô
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
FMC_NAND_PCC_TimögTy≥Def
 *
ComS∑˚Timög
, FMC_NAND_PCC_TimögTy≥De‡*
AâS∑˚Timög
, FMC_NAND_PCC_TimögTy≥De‡*
IOS∑˚Timög
)

146 if(
hpcˇrd
 =
NULL
)

148  
HAL_ERROR
;

151 if(
hpcˇrd
->
Sèã
 =
HAL_PCCARD_STATE_RESET
)

154 
hpcˇrd
->
Lock
 = 
HAL_UNLOCKED
;

156 
	`HAL_PCCARD_M•Inô
(
hpcˇrd
);

160 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_BUSY
;

163 
	`FMC_PCCARD_Inô
(
hpcˇrd
->
In°™˚
, &(hpcˇrd->
Inô
));

166 
	`FMC_PCCARD_Comm⁄S∑˚_Timög_Inô
(
hpcˇrd
->
In°™˚
, 
ComS∑˚Timög
);

169 
	`FMC_PCCARD_AâribuãS∑˚_Timög_Inô
(
hpcˇrd
->
In°™˚
, 
AâS∑˚Timög
);

172 
	`FMC_PCCARD_IOS∑˚_Timög_Inô
(
hpcˇrd
->
In°™˚
, 
IOS∑˚Timög
);

175 
	`__FMC_PCCARD_ENABLE
(
hpcˇrd
->
In°™˚
);

178 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_READY
;

180  
HAL_OK
;

182 
	}
}

190 
HAL_SètusTy≥Def
 
	$HAL_PCCARD_DeInô
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

193 
	`HAL_PCCARD_M•DeInô
(
hpcˇrd
);

196 
	`FMC_PCCARD_DeInô
(
hpcˇrd
->
In°™˚
);

199 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_RESET
;

202 
	`__HAL_UNLOCK
(
hpcˇrd
);

204  
HAL_OK
;

205 
	}
}

213 
__wók
 
	$HAL_PCCARD_M•Inô
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

218 
	}
}

226 
__wók
 
	$HAL_PCCARD_M•DeInô
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

231 
	}
}

260 
HAL_SètusTy≥Def
 
	$HAL_PCCARD_Ród_ID
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
uöt8_t
 
Com∑˘Fœsh_ID
[], uöt8_à*
pSètus
)

262 
uöt32_t
 
timeout
 = 
PCCARD_TIMEOUT_READ_ID
, 
ödex
 = 0;

263 
uöt8_t
 
°©us
 = 0;

266 
	`__HAL_LOCK
(
hpcˇrd
);

269 if(
hpcˇrd
->
Sèã
 =
HAL_PCCARD_STATE_BUSY
)

271  
HAL_BUSY
;

275 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_BUSY
;

278 *
pSètus
 = 
PCCARD_READY
;

281 *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD
) = 0xECEC;

287 
°©us
 = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

289 
timeout
--;

290 }(
°©us
 !
PCCARD_STATUS_OK
Ë&& 
timeout
);

292 if(
timeout
 == 0)

294 *
pSètus
 = 
PCCARD_TIMEOUT_ERROR
;

299 
ödex
 = 0; index < 16; index++)

301 
Com∑˘Fœsh_ID
[
ödex
] = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_DATA
);

306 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_READY
;

309 
	`__HAL_UNLOCK
(
hpcˇrd
);

311  
HAL_OK
;

312 
	}
}

323 
HAL_SètusTy≥Def
 
	$HAL_PCCARD_Ród_Se˘‹
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
uöt16_t
 *
pBuf„r
, uöt16_à
Se˘‹Addªss
, 
uöt8_t
 *
pSètus
)

325 
uöt32_t
 
timeout
 = 
PCCARD_TIMEOUT_READ_WRITE_SECTOR
, 
ödex
 = 0;

326 
uöt8_t
 
°©us
 = 0;

329 
	`__HAL_LOCK
(
hpcˇrd
);

332 if(
hpcˇrd
->
Sèã
 =
HAL_PCCARD_STATE_BUSY
)

334  
HAL_BUSY
;

338 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_BUSY
;

341 *
pSètus
 = 
PCCARD_READY
;

344 *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CYLINDER_HIGH
) = (uint16_t)0x00;

345 *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_SECTOR_COUNT
Ë((uöt16_t)0x0100 ) | ((uöt16_t)
Se˘‹Addªss
);

346 *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD
) = (uint16_t)0xE4A0;

351 
°©us
 = *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

352 
timeout
--;

353 }(
°©us
 =0x80Ë&& 
timeout
);

355 if(
timeout
 == 0)

357 *
pSètus
 = 
PCCARD_TIMEOUT_ERROR
;

360 
timeout
 = 
PCCARD_TIMEOUT_READ_WRITE_SECTOR
;

365 
°©us
 = *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

366 
timeout
--;

367 }(
°©us
 !
PCCARD_STATUS_OK
Ë&& 
timeout
);

369 if(
timeout
 == 0)

371 *
pSètus
 = 
PCCARD_TIMEOUT_ERROR
;

375 ; 
ödex
 < 
PCCARD_SECTOR_SIZE
; index++)

377 *(
uöt16_t
 *)
pBuf„r
++ = *(uöt16_à*)(
PCCARD_IO_SPACE_PRIMARY_ADDR
);

381 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_READY
;

384 
	`__HAL_UNLOCK
(
hpcˇrd
);

386  
HAL_OK
;

387 
	}
}

399 
HAL_SètusTy≥Def
 
	$HAL_PCCARD_Wrôe_Se˘‹
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
uöt16_t
 *
pBuf„r
, uöt16_à
Se˘‹Addªss
, 
uöt8_t
 *
pSètus
)

401 
uöt32_t
 
timeout
 = 
PCCARD_TIMEOUT_READ_WRITE_SECTOR
, 
ödex
 = 0;

402 
uöt8_t
 
°©us
 = 0;

405 
	`__HAL_LOCK
(
hpcˇrd
);

408 if(
hpcˇrd
->
Sèã
 =
HAL_PCCARD_STATE_BUSY
)

410  
HAL_BUSY
;

414 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_BUSY
;

417 *
pSètus
 = 
PCCARD_READY
;

420 *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CYLINDER_HIGH
) = (uint16_t)0x00;

421 *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_SECTOR_COUNT
Ë((uöt16_t)0x0100 ) | ((uöt16_t)
Se˘‹Addªss
);

422 *(
__IO
 
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD
) = (uint16_t)0x30A0;

427 
°©us
 = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

428 
timeout
--;

429 }(
°©us
 !
PCCARD_STATUS_OK
Ë&& 
timeout
);

431 if(
timeout
 == 0)

433 *
pSètus
 = 
PCCARD_TIMEOUT_ERROR
;

437 ; 
ödex
 < 
PCCARD_SECTOR_SIZE
; index++)

439 *(
uöt16_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
Ë*(uöt16_à*)
pBuf„r
++;

445 
°©us
 = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

446 
timeout
--;

447 }(
°©us
 !
PCCARD_STATUS_WRITE_OK
Ë&& 
timeout
);

449 if(
timeout
 == 0)

451 *
pSètus
 = 
PCCARD_TIMEOUT_ERROR
;

455 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_READY
;

458 
	`__HAL_UNLOCK
(
hpcˇrd
);

460  
HAL_OK
;

461 
	}
}

472 
HAL_SètusTy≥Def
 
	$HAL_PCCARD_Eø£_Se˘‹
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
, 
uöt16_t
 
Se˘‹Addªss
, 
uöt8_t
 *
pSètus
)

474 
uöt32_t
 
timeout
 = 
PCCARD_TIMEOUT_ERASE_SECTOR
;

475 
uöt8_t
 
°©us
 = 0;

478 
	`__HAL_LOCK
(
hpcˇrd
);

481 if(
hpcˇrd
->
Sèã
 =
HAL_PCCARD_STATE_BUSY
)

483  
HAL_BUSY
;

487 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_BUSY
;

490 *
pSètus
 = 
PCCARD_READY
;

493 *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CYLINDER_LOW
) = 0x00;

494 *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CYLINDER_HIGH
) = 0x00;

495 *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_SECTOR_NUMBER
Ë
Se˘‹Addªss
;

496 *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_SECTOR_COUNT
) = 0x01;

497 *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_CARD_HEAD
) = 0xA0;

498 *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD
Ë
ATA_ERASE_SECTOR_CMD
;

501 
°©us
 = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

503 (
°©us
 !
PCCARD_STATUS_WRITE_OK
Ë&& 
timeout
)

505 
°©us
 = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

506 
timeout
--;

509 if(
timeout
 == 0)

511 *
pSètus
 = 
PCCARD_TIMEOUT_ERROR
;

515 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_READY
;

518 
	`__HAL_UNLOCK
(
hpcˇrd
);

520  
HAL_OK
;

521 
	}
}

529 
HAL_SètusTy≥Def
 
	$HAL_PCCARD_Re£t
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

532 
	`__HAL_LOCK
(
hpcˇrd
);

535 if(
hpcˇrd
->
Sèã
 =
HAL_PCCARD_STATE_BUSY
)

537  
HAL_BUSY
;

548 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_BUSY
;

550 *(
__IO
 
uöt8_t
 *)(
PCCARD_ATTRIBUTE_SPACE_ADDRESS
 | 
ATA_CARD_CONFIGURATION
 ) = 0x01;

553 
hpcˇrd
->
Sèã
 = 
HAL_PCCARD_STATE_READY
;

556 
	`__HAL_UNLOCK
(
hpcˇrd
);

558  
HAL_OK
;

559 
	}
}

567 
	$HAL_PCCARD_IRQH™dÀr
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

570 if(
	`__FMC_PCCARD_GET_FLAG
(
hpcˇrd
->
In°™˚
, 
FMC_FLAG_RISING_EDGE
))

573 
	`HAL_PCCARD_ITCÆlback
(
hpcˇrd
);

576 
	`__FMC_PCCARD_CLEAR_FLAG
(
hpcˇrd
->
In°™˚
, 
FMC_FLAG_RISING_EDGE
);

580 if(
	`__FMC_PCCARD_GET_FLAG
(
hpcˇrd
->
In°™˚
, 
FMC_FLAG_LEVEL
))

583 
	`HAL_PCCARD_ITCÆlback
(
hpcˇrd
);

586 
	`__FMC_PCCARD_CLEAR_FLAG
(
hpcˇrd
->
In°™˚
, 
FMC_FLAG_LEVEL
);

590 if(
	`__FMC_PCCARD_GET_FLAG
(
hpcˇrd
->
In°™˚
, 
FMC_FLAG_FALLING_EDGE
))

593 
	`HAL_PCCARD_ITCÆlback
(
hpcˇrd
);

596 
	`__FMC_PCCARD_CLEAR_FLAG
(
hpcˇrd
->
In°™˚
, 
FMC_FLAG_FALLING_EDGE
);

600 if(
	`__FMC_PCCARD_GET_FLAG
(
hpcˇrd
->
In°™˚
, 
FMC_FLAG_FEMPT
))

603 
	`HAL_PCCARD_ITCÆlback
(
hpcˇrd
);

606 
	`__FMC_PCCARD_CLEAR_FLAG
(
hpcˇrd
->
In°™˚
, 
FMC_FLAG_FEMPT
);

608 
	}
}

616 
__wók
 
	$HAL_PCCARD_ITCÆlback
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

621 
	}
}

648 
HAL_PCCARD_SèãTy≥Def
 
	$HAL_PCCARD_GëSèã
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

650  
hpcˇrd
->
Sèã
;

651 
	}
}

662 
HAL_PCCARD_SètusTy≥Def
 
	$HAL_PCCARD_GëSètus
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

664 
uöt32_t
 
timeout
 = 
PCCARD_TIMEOUT_STATUS
, 
°©us_pcˇrd
 = 0;

667 if(
hpcˇrd
->
Sèã
 =
HAL_PCCARD_STATE_BUSY
)

669  
HAL_PCCARD_STATUS_ONGOING
;

672 
°©us_pcˇrd
 = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

674 (
°©us_pcˇrd
 =
PCCARD_BUSY
Ë&& 
timeout
)

676 
°©us_pcˇrd
 = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

677 
timeout
--;

680 if(
timeout
 == 0)

682 
°©us_pcˇrd
 = 
PCCARD_TIMEOUT_ERROR
;

686  (
HAL_PCCARD_SètusTy≥Def
Ë
°©us_pcˇrd
;

687 
	}
}

698 
HAL_PCCARD_SètusTy≥Def
 
	$HAL_PCCARD_RódSètus
(
PCCARD_H™dÀTy≥Def
 *
hpcˇrd
)

700 
uöt8_t
 
d©a
 = 0, 
°©us_pcˇrd
 = 
PCCARD_BUSY
;

703 if(
hpcˇrd
->
Sèã
 =
HAL_PCCARD_STATE_BUSY
)

705  
HAL_PCCARD_STATUS_ONGOING
;

709 
d©a
 = *(
__IO
 
uöt8_t
 *)(
PCCARD_IO_SPACE_PRIMARY_ADDR
 | 
ATA_STATUS_CMD_ALTERNATE
);

711 if((
d©a
 & 
PCCARD_TIMEOUT_ERROR
) == PCCARD_TIMEOUT_ERROR)

713 
°©us_pcˇrd
 = 
PCCARD_TIMEOUT_ERROR
;

715 if((
d©a
 & 
PCCARD_READY
) == PCCARD_READY)

717 
°©us_pcˇrd
 = 
PCCARD_READY
;

720  (
HAL_PCCARD_SètusTy≥Def
Ë
°©us_pcˇrd
;

721 
	}
}

731 
	gSTM32F427xx
 || 
	gSTM32F437xx
 || 
	gSTM32F429xx
 || 
	gSTM32F439xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pcd.c

76 
	~"°m32f4xx_hÆ.h
"

87 #ifde‡
HAL_PCD_MODULE_ENABLED


88 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

89 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

90 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

91 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

99 
	#PCD_MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

100 
	#PCD_MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

109 
HAL_SètusTy≥Def
 
	`PCD_WrôeEm±yTxFifo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
);

138 
HAL_SètusTy≥Def
 
	$HAL_PCD_Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

140 
uöt32_t
 
i
 = 0;

143 if(
hpcd
 =
NULL
)

145  
HAL_ERROR
;

149 
	`as£π_∑øm
(
	`IS_PCD_ALL_INSTANCE
(
hpcd
->
In°™˚
));

151 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_BUSY
;

154 
	`HAL_PCD_M•Inô
(
hpcd
);

157 
	`__HAL_PCD_DISABLE
(
hpcd
);

160 
	`USB_C‹eInô
(
hpcd
->
In°™˚
, hpcd->
Inô
);

163 
	`USB_SëCuºítMode
(
hpcd
->
In°™˚
 , 
USB_OTG_DEVICE_MODE
);

166 
i
 = 0; i < 15 ; i++)

169 
hpcd
->
IN_ï
[
i
].
is_ö
 = 1;

170 
hpcd
->
IN_ï
[
i
].
num
 = i;

171 
hpcd
->
IN_ï
[
i
].
tx_fifo_num
 = i;

173 
hpcd
->
IN_ï
[
i
].
ty≥
 = 
EP_TYPE_CTRL
;

174 
hpcd
->
IN_ï
[
i
].
max∑ckë
 = 0;

175 
hpcd
->
IN_ï
[
i
].
x„r_buff
 = 0;

176 
hpcd
->
IN_ï
[
i
].
x„r_Àn
 = 0;

179 
i
 = 0; i < 15 ; i++)

181 
hpcd
->
OUT_ï
[
i
].
is_ö
 = 0;

182 
hpcd
->
OUT_ï
[
i
].
num
 = i;

183 
hpcd
->
IN_ï
[
i
].
tx_fifo_num
 = i;

185 
hpcd
->
OUT_ï
[
i
].
ty≥
 = 
EP_TYPE_CTRL
;

186 
hpcd
->
OUT_ï
[
i
].
max∑ckë
 = 0;

187 
hpcd
->
OUT_ï
[
i
].
x„r_buff
 = 0;

188 
hpcd
->
OUT_ï
[
i
].
x„r_Àn
 = 0;

190 
hpcd
->
In°™˚
->
DIEPTXF
[
i
] = 0;

194 
	`USB_DevInô
(
hpcd
->
In°™˚
, hpcd->
Inô
);

196 
hpcd
->
Sèã

HAL_PCD_STATE_READY
;

198 #ifde‡
USB_OTG_GLPMCFG_LPMEN


200 i‡(
hpcd
->
Inô
.
Õm_íabÀ
 == 1)

202 
	`HAL_PCDEx_A˘iv©eLPM
(
hpcd
);

206 #ifde‡
USB_OTG_GCCFG_BCDEN


208 i‡(
hpcd
->
Inô
.
b©ãry_ch¨gög_íabÀ
 ==1)

210 
	`HAL_PCDEx_A˘iv©eBCD
(
hpcd
);

214 
	`USB_DevDisc⁄√˘
 (
hpcd
->
In°™˚
);

215  
HAL_OK
;

216 
	}
}

223 
HAL_SètusTy≥Def
 
	$HAL_PCD_DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

226 if(
hpcd
 =
NULL
)

228  
HAL_ERROR
;

231 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_BUSY
;

234 
	`HAL_PCD_St›
(
hpcd
);

237 
	`HAL_PCD_M•DeInô
(
hpcd
);

239 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_RESET
;

241  
HAL_OK
;

242 
	}
}

249 
__wók
 
	$HAL_PCD_M•Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

254 
	}
}

261 
__wók
 
	$HAL_PCD_M•DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

266 
	}
}

292 
HAL_SètusTy≥Def
 
	$HAL_PCD_Sèπ
(
PCD_H™dÀTy≥Def
 *
hpcd
)

294 
	`__HAL_LOCK
(
hpcd
);

295 
	`USB_DevC⁄√˘
 (
hpcd
->
In°™˚
);

296 
	`__HAL_PCD_ENABLE
(
hpcd
);

297 
	`__HAL_UNLOCK
(
hpcd
);

298  
HAL_OK
;

299 
	}
}

306 
HAL_SètusTy≥Def
 
	$HAL_PCD_St›
(
PCD_H™dÀTy≥Def
 *
hpcd
)

308 
	`__HAL_LOCK
(
hpcd
);

309 
	`__HAL_PCD_DISABLE
(
hpcd
);

310 
	`USB_St›Devi˚
(
hpcd
->
In°™˚
);

311 
	`USB_DevDisc⁄√˘
(
hpcd
->
In°™˚
);

312 
	`__HAL_UNLOCK
(
hpcd
);

313  
HAL_OK
;

314 
	}
}

321 
	$HAL_PCD_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

323 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

324 
uöt32_t
 
i
 = 0, 
ï_öå
 = 0, 
ïöt
 = 0, 
ïnum
 = 0;

325 
uöt32_t
 
fif€m±ymsk
 = 0, 
ãmp
 = 0;

326 
USB_OTG_EPTy≥Def
 *
ï
;

329 i‡(
	`USB_GëMode
(
hpcd
->
In°™˚
Ë=
USB_OTG_MODE_DEVICE
)

332 if(
	`__HAL_PCD_IS_INVALID_INTERRUPT
(
hpcd
))

337 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_MMIS
))

340 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_MMIS
);

343 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_OEPINT
))

345 
ïnum
 = 0;

348 
ï_öå
 = 
	`USB_RódDevAŒOutEpI¡îru±
(
hpcd
->
In°™˚
);

350  
ï_öå
 )

352 i‡(
ï_öå
 & 0x1)

354 
ïöt
 = 
	`USB_RódDevOutEPI¡îru±
(
hpcd
->
In°™˚
, 
ïnum
);

356 if(–
ïöt
 & 
USB_OTG_DOEPINT_XFRC
) == USB_OTG_DOEPINT_XFRC)

358 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_XFRC
);

360 if(
hpcd
->
Inô
.
dma_íabÀ
 == 1)

362 
hpcd
->
OUT_ï
[
ïnum
].
x„r_cou¡
 = hpcd->OUT_ï[ïnum].
max∑ckë
- (
	`USBx_OUTEP
”≤um)->
DOEPTSIZ
 & 
USB_OTG_DOEPTSIZ_XFRSIZ
);

363 
hpcd
->
OUT_ï
[
ïnum
].
x„r_buff
 +hpcd->OUT_ï[ïnum].
max∑ckë
;

366 
	`HAL_PCD_D©aOutSègeCÆlback
(
hpcd
, 
ïnum
);

367 if(
hpcd
->
Inô
.
dma_íabÀ
 == 1)

369 if((
ïnum
 =0Ë&& (
hpcd
->
OUT_ï
[ïnum].
x„r_Àn
 == 0))

372 
	`USB_EP0_OutSèπ
(
hpcd
->
In°™˚
, 1, (
uöt8_t
 *)hpcd->
Sëup
);

377 if(–
ïöt
 & 
USB_OTG_DOEPINT_STUP
) == USB_OTG_DOEPINT_STUP)

380 
	`HAL_PCD_SëupSègeCÆlback
(
hpcd
);

381 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_STUP
);

384 if(–
ïöt
 & 
USB_OTG_DOEPINT_OTEPDIS
) == USB_OTG_DOEPINT_OTEPDIS)

386 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_OTEPDIS
);

389 
ïnum
++;

390 
ï_öå
 >>= 1;

394 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IEPINT
))

397 
ï_öå
 = 
	`USB_RódDevAŒInEpI¡îru±
(
hpcd
->
In°™˚
);

399 
ïnum
 = 0;

401  
ï_öå
 )

403 i‡(
ï_öå
 & 0x1)

405 
ïöt
 = 
	`USB_RódDevInEPI¡îru±
(
hpcd
->
In°™˚
, 
ïnum
);

407 if(–
ïöt
 & 
USB_OTG_DIEPINT_XFRC
) == USB_OTG_DIEPINT_XFRC)

409 
fif€m±ymsk
 = 0x1 << 
ïnum
;

410 
USBx_DEVICE
->
DIEPEMPMSK
 &~
fif€m±ymsk
;

412 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_XFRC
);

414 i‡(
hpcd
->
Inô
.
dma_íabÀ
 == 1)

416 
hpcd
->
IN_ï
[
ïnum
].
x„r_buff
 +hpcd->IN_ï[ïnum].
max∑ckë
;

419 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, 
ïnum
);

421 i‡(
hpcd
->
Inô
.
dma_íabÀ
 == 1)

424 if((
ïnum
 =0Ë&& (
hpcd
->
IN_ï
[ïnum].
x„r_Àn
 == 0))

427 
	`USB_EP0_OutSèπ
(
hpcd
->
In°™˚
, 1, (
uöt8_t
 *)hpcd->
Sëup
);

431 if(–
ïöt
 & 
USB_OTG_DIEPINT_TOC
) == USB_OTG_DIEPINT_TOC)

433 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_TOC
);

435 if(–
ïöt
 & 
USB_OTG_DIEPINT_ITTXFE
) == USB_OTG_DIEPINT_ITTXFE)

437 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_ITTXFE
);

439 if(–
ïöt
 & 
USB_OTG_DIEPINT_INEPNE
) == USB_OTG_DIEPINT_INEPNE)

441 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_INEPNE
);

443 if(–
ïöt
 & 
USB_OTG_DIEPINT_EPDISD
) == USB_OTG_DIEPINT_EPDISD)

445 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_EPDISD
);

447 if(–
ïöt
 & 
USB_OTG_DIEPINT_TXFE
) == USB_OTG_DIEPINT_TXFE)

449 
	`PCD_WrôeEm±yTxFifo
(
hpcd
 , 
ïnum
);

452 
ïnum
++;

453 
ï_öå
 >>= 1;

458 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_WKUINT
))

461 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_RWUSIG
;

463 #ifde‡
USB_OTG_GLPMCFG_LPMEN


464 if(
hpcd
->
LPM_Sèã
 =
LPM_L1
)

466 
hpcd
->
LPM_Sèã
 = 
LPM_L0
;

467 
	`HAL_PCDEx_LPM_CÆlback
(
hpcd
, 
PCD_LPM_L0_ACTIVE
);

472 
	`HAL_PCD_ResumeCÆlback
(
hpcd
);

475 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_WKUINT
);

479 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBSUSP
))

481 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_SUSPSTS
) == USB_OTG_DSTS_SUSPSTS)

484 
	`HAL_PCD_Su•ídCÆlback
(
hpcd
);

486 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBSUSP
);

489 #ifde‡
USB_OTG_GLPMCFG_LPMEN


491 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_LPMINT
))

493 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_LPMINT
);

494 if–
hpcd
->
LPM_Sèã
 =
LPM_L0
)

496 
hpcd
->
LPM_Sèã
 = 
LPM_L1
;

497 
hpcd
->
BESL
 = (hpcd->
In°™˚
->
GLPMCFG
 & 
USB_OTG_GLPMCFG_BESL
) >>2 ;

498 
	`HAL_PCDEx_LPM_CÆlback
(
hpcd
, 
PCD_LPM_L1_ACTIVE
);

502 
	`HAL_PCD_Su•ídCÆlback
(
hpcd
);

508 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBRST
))

510 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_RWUSIG
;

511 
	`USB_FlushTxFifo
(
hpcd
->
In°™˚
 , 0 );

513 
i
 = 0; i < 
hpcd
->
Inô
.
dev_ídpoöts
 ; i++)

515 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFF;

516 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFF;

518 
USBx_DEVICE
->
DAINT
 = 0xFFFFFFFF;

519 
USBx_DEVICE
->
DAINTMSK
 |= 0x10001;

521 if(
hpcd
->
Inô
.
u£_dediˇãd_ï1
)

523 
USBx_DEVICE
->
DOUTEP1MSK
 |(
USB_OTG_DOEPMSK_STUPM
 | 
USB_OTG_DOEPMSK_XFRCM
 | 
USB_OTG_DOEPMSK_EPDM
);

524 
USBx_DEVICE
->
DINEP1MSK
 |(
USB_OTG_DIEPMSK_TOM
 | 
USB_OTG_DIEPMSK_XFRCM
 | 
USB_OTG_DIEPMSK_EPDM
);

528 
USBx_DEVICE
->
DOEPMSK
 |(
USB_OTG_DOEPMSK_STUPM
 | 
USB_OTG_DOEPMSK_XFRCM
 | 
USB_OTG_DOEPMSK_EPDM
);

529 
USBx_DEVICE
->
DIEPMSK
 |(
USB_OTG_DIEPMSK_TOM
 | 
USB_OTG_DIEPMSK_XFRCM
 | 
USB_OTG_DIEPMSK_EPDM
);

533 
USBx_DEVICE
->
DCFG
 &~
USB_OTG_DCFG_DAD
;

536 
	`USB_EP0_OutSèπ
(
hpcd
->
In°™˚
, hpcd->
Inô
.
dma_íabÀ
, (
uöt8_t
 *)hpcd->
Sëup
);

538 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBRST
);

542 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_ENUMDNE
))

544 
	`USB_A˘iv©eSëup
(
hpcd
->
In°™˚
);

545 
hpcd
->
In°™˚
->
GUSBCFG
 &~
USB_OTG_GUSBCFG_TRDT
;

547 i‡–
	`USB_GëDevS≥ed
(
hpcd
->
In°™˚
Ë=
USB_OTG_SPEED_HIGH
)

549 
hpcd
->
Inô
.
•ìd
 = 
USB_OTG_SPEED_HIGH
;

550 
hpcd
->
Inô
.
ï0_mps
 = 
USB_OTG_HS_MAX_PACKET_SIZE
 ;

551 
hpcd
->
In°™˚
->
GUSBCFG
 |(
uöt32_t
)((
USBD_HS_TRDT_VALUE
 << 10Ë& 
USB_OTG_GUSBCFG_TRDT
);

555 
hpcd
->
Inô
.
•ìd
 = 
USB_OTG_SPEED_FULL
;

556 
hpcd
->
Inô
.
ï0_mps
 = 
USB_OTG_FS_MAX_PACKET_SIZE
 ;

557 
hpcd
->
In°™˚
->
GUSBCFG
 |(
uöt32_t
)((
USBD_FS_TRDT_VALUE
 << 10Ë& 
USB_OTG_GUSBCFG_TRDT
);

560 
	`HAL_PCD_Re£tCÆlback
(
hpcd
);

562 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_ENUMDNE
);

566 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_RXFLVL
))

568 
	`USB_MASK_INTERRUPT
(
hpcd
->
In°™˚
, 
USB_OTG_GINTSTS_RXFLVL
);

570 
ãmp
 = 
USBx
->
GRXSTSP
;

572 
ï
 = &
hpcd
->
OUT_ï
[
ãmp
 & 
USB_OTG_GRXSTSP_EPNUM
];

574 if(((
ãmp
 & 
USB_OTG_GRXSTSP_PKTSTS
Ë>> 17Ë=
STS_DATA_UPDT
)

576 if((
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) != 0)

578 
	`USB_RódPackë
(
USBx
, 
ï
->
x„r_buff
, (
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4);

579 
ï
->
x„r_buff
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

580 
ï
->
x„r_cou¡
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

583 i‡(((
ãmp
 & 
USB_OTG_GRXSTSP_PKTSTS
Ë>> 17Ë=
STS_SETUP_UPDT
)

585 
	`USB_RódPackë
(
USBx
, (
uöt8_t
 *)
hpcd
->
Sëup
, 8);

586 
ï
->
x„r_cou¡
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

588 
	`USB_UNMASK_INTERRUPT
(
hpcd
->
In°™˚
, 
USB_OTG_GINTSTS_RXFLVL
);

592 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SOF
))

594 
	`HAL_PCD_SOFCÆlback
(
hpcd
);

595 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SOF
);

599 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IISOIXFR
))

601 
	`HAL_PCD_ISOINIncom∂ëeCÆlback
(
hpcd
, 
ïnum
);

602 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IISOIXFR
);

606 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
))

608 
	`HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
hpcd
, 
ïnum
);

609 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
);

613 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SRQINT
))

615 
	`HAL_PCD_C⁄√˘CÆlback
(
hpcd
);

616 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SRQINT
);

620 if(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_OTGINT
))

622 
ãmp
 = 
hpcd
->
In°™˚
->
GOTGINT
;

624 if((
ãmp
 & 
USB_OTG_GOTGINT_SEDET
) == USB_OTG_GOTGINT_SEDET)

626 
	`HAL_PCD_Disc⁄√˘CÆlback
(
hpcd
);

628 
hpcd
->
In°™˚
->
GOTGINT
 |
ãmp
;

631 
	}
}

639 
__wók
 
	$HAL_PCD_D©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

644 
	}
}

652 
__wók
 
	$HAL_PCD_D©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

657 
	}
}

663 
__wók
 
	$HAL_PCD_SëupSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

668 
	}
}

675 
__wók
 
	$HAL_PCD_SOFCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

680 
	}
}

687 
__wók
 
	$HAL_PCD_Re£tCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

692 
	}
}

699 
__wók
 
	$HAL_PCD_Su•ídCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

704 
	}
}

711 
__wók
 
	$HAL_PCD_ResumeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

716 
	}
}

724 
__wók
 
	$HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

729 
	}
}

737 
__wók
 
	$HAL_PCD_ISOINIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

742 
	}
}

749 
__wók
 
	$HAL_PCD_C⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

754 
	}
}

761 
__wók
 
	$HAL_PCD_Disc⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

766 
	}
}

792 
HAL_SètusTy≥Def
 
	$HAL_PCD_DevC⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
)

794 
	`__HAL_LOCK
(
hpcd
);

795 
	`USB_DevC⁄√˘
(
hpcd
->
In°™˚
);

796 
	`__HAL_UNLOCK
(
hpcd
);

797  
HAL_OK
;

798 
	}
}

805 
HAL_SètusTy≥Def
 
	$HAL_PCD_DevDisc⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
)

807 
	`__HAL_LOCK
(
hpcd
);

808 
	`USB_DevDisc⁄√˘
(
hpcd
->
In°™˚
);

809 
	`__HAL_UNLOCK
(
hpcd
);

810  
HAL_OK
;

811 
	}
}

819 
HAL_SètusTy≥Def
 
	$HAL_PCD_SëAddªss
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
addªss
)

821 
	`__HAL_LOCK
(
hpcd
);

822 
	`USB_SëDevAddªss
(
hpcd
->
In°™˚
, 
addªss
);

823 
	`__HAL_UNLOCK
(
hpcd
);

824  
HAL_OK
;

825 
	}
}

834 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_O≥n
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, 
uöt16_t
 
ï_mps
, uöt8_à
ï_ty≥
)

836 
HAL_SètusTy≥Def
 
ªt
 = 
HAL_OK
;

837 
USB_OTG_EPTy≥Def
 *
ï
;

839 i‡((
ï_addr
 & 0x80) == 0x80)

841 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

845 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F];

847 
ï
->
num
 = 
ï_addr
 & 0x7F;

849 
ï
->
is_ö
 = (0x80 & 
ï_addr
) != 0;

850 
ï
->
max∑ckë
 = 
ï_mps
;

851 
ï
->
ty≥
 = 
ï_ty≥
;

852 i‡(
ï
->
is_ö
)

855 
ï
->
tx_fifo_num
 =Ép->
num
;

858 i‡(
ï_ty≥
 =
EP_TYPE_BULK
 )

860 
ï
->
d©a_pid_°¨t
 = 0;

863 
	`__HAL_LOCK
(
hpcd
);

864 
	`USB_A˘iv©eEndpoöt
(
hpcd
->
In°™˚
 , 
ï
);

865 
	`__HAL_UNLOCK
(
hpcd
);

866  
ªt
;

867 
	}
}

876 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Clo£
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

878 
USB_OTG_EPTy≥Def
 *
ï
;

880 i‡((
ï_addr
 & 0x80) == 0x80)

882 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

886 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F];

888 
ï
->
num
 = 
ï_addr
 & 0x7F;

890 
ï
->
is_ö
 = (0x80 & 
ï_addr
) != 0;

892 
	`__HAL_LOCK
(
hpcd
);

893 
	`USB_Dó˘iv©eEndpoöt
(
hpcd
->
In°™˚
 , 
ï
);

894 
	`__HAL_UNLOCK
(
hpcd
);

895  
HAL_OK
;

896 
	}
}

907 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Re˚ive
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
)

909 
USB_OTG_EPTy≥Def
 *
ï
;

911 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F];

914 
ï
->
x„r_buff
 = 
pBuf
;

915 
ï
->
x„r_Àn
 = 
Àn
;

916 
ï
->
x„r_cou¡
 = 0;

917 
ï
->
is_ö
 = 0;

918 
ï
->
num
 = 
ï_addr
 & 0x7F;

920 i‡(
hpcd
->
Inô
.
dma_íabÀ
 == 1)

922 
ï
->
dma_addr
 = (
uöt32_t
)
pBuf
;

925 
	`__HAL_LOCK
(
hpcd
);

927 i‡((
ï_addr
 & 0x7F) == 0 )

929 
	`USB_EP0SèπX„r
(
hpcd
->
In°™˚
 , 
ï
, hpcd->
Inô
.
dma_íabÀ
);

933 
	`USB_EPSèπX„r
(
hpcd
->
In°™˚
 , 
ï
, hpcd->
Inô
.
dma_íabÀ
);

935 
	`__HAL_UNLOCK
(
hpcd
);

937  
HAL_OK
;

938 
	}
}

946 
uöt16_t
 
	$HAL_PCD_EP_GëRxCou¡
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

948  
hpcd
->
OUT_ï
[
ï_addr
 & 0x7F].
x„r_cou¡
;

949 
	}
}

958 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Tønsmô
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
)

960 
USB_OTG_EPTy≥Def
 *
ï
;

962 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

965 
ï
->
x„r_buff
 = 
pBuf
;

966 
ï
->
x„r_Àn
 = 
Àn
;

967 
ï
->
x„r_cou¡
 = 0;

968 
ï
->
is_ö
 = 1;

969 
ï
->
num
 = 
ï_addr
 & 0x7F;

971 i‡(
hpcd
->
Inô
.
dma_íabÀ
 == 1)

973 
ï
->
dma_addr
 = (
uöt32_t
)
pBuf
;

976 
	`__HAL_LOCK
(
hpcd
);

978 i‡((
ï_addr
 & 0x7F) == 0 )

980 
	`USB_EP0SèπX„r
(
hpcd
->
In°™˚
 , 
ï
, hpcd->
Inô
.
dma_íabÀ
);

984 
	`USB_EPSèπX„r
(
hpcd
->
In°™˚
 , 
ï
, hpcd->
Inô
.
dma_íabÀ
);

987 
	`__HAL_UNLOCK
(
hpcd
);

989  
HAL_OK
;

990 
	}
}

998 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_SëSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1000 
USB_OTG_EPTy≥Def
 *
ï
;

1002 i‡((0x80 & 
ï_addr
) == 0x80)

1004 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

1008 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
];

1011 
ï
->
is_°Æl
 = 1;

1012 
ï
->
num
 = 
ï_addr
 & 0x7F;

1013 
ï
->
is_ö
 = ((
ï_addr
 & 0x80) == 0x80);

1016 
	`__HAL_LOCK
(
hpcd
);

1017 
	`USB_EPSëSèŒ
(
hpcd
->
In°™˚
 , 
ï
);

1018 if((
ï_addr
 & 0x7F) == 0)

1020 
	`USB_EP0_OutSèπ
(
hpcd
->
In°™˚
, hpcd->
Inô
.
dma_íabÀ
, (
uöt8_t
 *)hpcd->
Sëup
);

1022 
	`__HAL_UNLOCK
(
hpcd
);

1024  
HAL_OK
;

1025 
	}
}

1033 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_CÃSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1035 
USB_OTG_EPTy≥Def
 *
ï
;

1037 i‡((0x80 & 
ï_addr
) == 0x80)

1039 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 0x7F];

1043 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
];

1046 
ï
->
is_°Æl
 = 0;

1047 
ï
->
num
 = 
ï_addr
 & 0x7F;

1048 
ï
->
is_ö
 = ((
ï_addr
 & 0x80) == 0x80);

1050 
	`__HAL_LOCK
(
hpcd
);

1051 
	`USB_EPCÀ¨SèŒ
(
hpcd
->
In°™˚
 , 
ï
);

1052 
	`__HAL_UNLOCK
(
hpcd
);

1054  
HAL_OK
;

1055 
	}
}

1063 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Flush
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1065 
	`__HAL_LOCK
(
hpcd
);

1067 i‡((
ï_addr
 & 0x80) == 0x80)

1069 
	`USB_FlushTxFifo
(
hpcd
->
In°™˚
, 
ï_addr
 & 0x7F);

1073 
	`USB_FlushRxFifo
(
hpcd
->
In°™˚
);

1076 
	`__HAL_UNLOCK
(
hpcd
);

1078  
HAL_OK
;

1079 
	}
}

1086 
HAL_SètusTy≥Def
 
	$HAL_PCD_A˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1088 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

1090 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_SUSPSTS
) == USB_OTG_DSTS_SUSPSTS)

1093 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_RWUSIG
;

1095  
HAL_OK
;

1096 
	}
}

1103 
HAL_SètusTy≥Def
 
	$HAL_PCD_DeA˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1105 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

1108 
USBx_DEVICE
->
DCTL
 &~(
USB_OTG_DCTL_RWUSIG
);

1109  
HAL_OK
;

1110 
	}
}

1135 
PCD_SèãTy≥Def
 
	$HAL_PCD_GëSèã
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1137  
hpcd
->
Sèã
;

1138 
	}
}

1158 
HAL_SètusTy≥Def
 
	$PCD_WrôeEm±yTxFifo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
)

1160 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

1161 
USB_OTG_EPTy≥Def
 *
ï
;

1162 
öt32_t
 
Àn
 = 0;

1163 
uöt32_t
 
Àn32b
;

1164 
uöt32_t
 
fif€m±ymsk
 = 0;

1166 
ï
 = &
hpcd
->
IN_ï
[
ïnum
];

1167 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

1169 i‡(
Àn
 > 
ï
->
max∑ckë
)

1171 
Àn
 = 
ï
->
max∑ckë
;

1175 
Àn32b
 = (
Àn
 + 3) / 4;

1177  (
	`USBx_INEP
(
ïnum
)->
DTXFSTS
 & 
USB_OTG_DTXFSTS_INEPTFSAV
Ë> 
Àn32b
 &&

1178 
ï
->
x„r_cou¡
 <Ép->
x„r_Àn
 &&

1179 
ï
->
x„r_Àn
 != 0)

1182 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

1184 i‡(
Àn
 > 
ï
->
max∑ckë
)

1186 
Àn
 = 
ï
->
max∑ckë
;

1188 
Àn32b
 = (
Àn
 + 3) / 4;

1190 
	`USB_WrôePackë
(
USBx
, 
ï
->
x„r_buff
, 
ïnum
, 
Àn
, 
hpcd
->
Inô
.
dma_íabÀ
);

1192 
ï
->
x„r_buff
 +
Àn
;

1193 
ï
->
x„r_cou¡
 +
Àn
;

1196 if(
Àn
 <= 0)

1198 
fif€m±ymsk
 = 0x1 << 
ïnum
;

1199 
USBx_DEVICE
->
DIEPEMPMSK
 &~
fif€m±ymsk
;

1203  
HAL_OK
;

1204 
	}
}

1210 
	gSTM32F401xC
 || 
	gSTM32F401xE
 || 
	gSTM32F411xE
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pcd_ex.c

43 
	~"°m32f4xx_hÆ.h
"

53 #ifde‡
HAL_PCD_MODULE_ENABLED


54 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

55 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

56 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

57 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

90 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_SëTxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
fifo
, 
uöt16_t
 
size
)

92 
uöt8_t
 
i
 = 0;

93 
uöt32_t
 
Tx_Off£t
 = 0;

105 
Tx_Off£t
 = 
hpcd
->
In°™˚
->
GRXFSIZ
;

107 if(
fifo
 == 0)

109 
hpcd
->
In°™˚
->
DIEPTXF0_HNPTXFSIZ
 = (
uöt32_t
)(((uöt32_t)
size
 << 16Ë| 
Tx_Off£t
);

113 
Tx_Off£t
 +(
hpcd
->
In°™˚
->
DIEPTXF0_HNPTXFSIZ
) >> 16;

114 
i
 = 0; i < (
fifo
 - 1); i++)

116 
Tx_Off£t
 +(
hpcd
->
In°™˚
->
DIEPTXF
[
i
] >> 16);

120 
hpcd
->
In°™˚
->
DIEPTXF
[
fifo
 - 1] = (
uöt32_t
)(((uöt32_t)
size
 << 16Ë| 
Tx_Off£t
);

123  
HAL_OK
;

124 
	}
}

132 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_SëRxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt16_t
 
size
)

134 
hpcd
->
In°™˚
->
GRXFSIZ
 = 
size
;

136  
HAL_OK
;

137 
	}
}

139 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

145 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_A˘iv©eLPM
(
PCD_H™dÀTy≥Def
 *
hpcd
)

147 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

149 
hpcd
->
Õm_a˘ive
 = 
ENABLE
;

150 
hpcd
->
LPM_Sèã
 = 
LPM_L0
;

151 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_LPMINTM
;

152 
USBx
->
GLPMCFG
 |(
USB_OTG_GLPMCFG_LPMEN
 | 
USB_OTG_GLPMCFG_LPMACK
 | 
USB_OTG_GLPMCFG_ENBESL
);

154  
HAL_OK
;

155 
	}
}

162 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_DeA˘iv©eLPM
(
PCD_H™dÀTy≥Def
 *
hpcd
)

164 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

166 
hpcd
->
Õm_a˘ive
 = 
DISABLE
;

167 
USBx
->
GINTMSK
 &~
USB_OTG_GINTMSK_LPMINTM
;

168 
USBx
->
GLPMCFG
 &~(
USB_OTG_GLPMCFG_LPMEN
 | 
USB_OTG_GLPMCFG_LPMACK
 | 
USB_OTG_GLPMCFG_ENBESL
);

170  
HAL_OK
;

171 
	}
}

179 
__wók
 
	$HAL_PCDEx_LPM_CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
PCD_LPM_MsgTy≥Def
 
msg
)

181 
	}
}

193 
	gSTM32F401xC
 || 
	gSTM32F401xE
 || 
	gSTM32F411xE
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pwr.c

44 
	~"°m32f4xx_hÆ.h
"

55 #ifde‡
HAL_PWR_MODULE_ENABLED


66 
	#PVD_MODE_IT
 ((
uöt32_t
)0x00010000)

	)

67 
	#PVD_MODE_EVT
 ((
uöt32_t
)0x00020000)

	)

68 
	#PVD_RISING_EDGE
 ((
uöt32_t
)0x00000001)

	)

69 
	#PVD_FALLING_EDGE
 ((
uöt32_t
)0x00000002)

	)

110 
	$HAL_PWR_DeInô
()

112 
	`__HAL_RCC_PWR_FORCE_RESET
();

113 
	`__HAL_RCC_PWR_RELEASE_RESET
();

114 
	}
}

123 
	$HAL_PWR_E«bÀBkUpAc˚ss
()

125 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
ENABLE
;

126 
	}
}

135 
	$HAL_PWR_DißbÀBkUpAc˚ss
()

137 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
DISABLE
;

138 
	}
}

270 
	$HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
)

273 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
sC⁄figPVD
->
PVDLevñ
));

274 
	`as£π_∑øm
(
	`IS_PWR_PVD_MODE
(
sC⁄figPVD
->
Mode
));

277 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
sC⁄figPVD
->
PVDLevñ
);

280 
	`__HAL_PWR_PVD_EXTI_DISABLE_EVENT
();

281 
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
();

282 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();

283 
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

286 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_IT
) == PVD_MODE_IT)

288 
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
();

292 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_EVT
) == PVD_MODE_EVT)

294 
	`__HAL_PWR_PVD_EXTI_ENABLE_EVENT
();

298 if((
sC⁄figPVD
->
Mode
 & 
PVD_RISING_EDGE
) == PVD_RISING_EDGE)

300 
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();

303 if((
sC⁄figPVD
->
Mode
 & 
PVD_FALLING_EDGE
) == PVD_FALLING_EDGE)

305 
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

307 
	}
}

313 
	$HAL_PWR_E«bÀPVD
()

315 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
ENABLE
;

316 
	}
}

322 
	$HAL_PWR_DißbÀPVD
()

324 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
DISABLE
;

325 
	}
}

336 
	$HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

339 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

342 
	`SET_BIT
(
PWR
->
CSR
, 
WakeUpPöx
);

343 
	}
}

354 
	$HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

357 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

360 
	`CLEAR_BIT
(
PWR
->
CSR
, 
WakeUpPöx
);

361 
	}
}

383 
	$HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
)

386 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

387 
	`as£π_∑øm
(
	`IS_PWR_SLEEP_ENTRY
(
SLEEPE¡ry
));

390 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

393 if(
SLEEPE¡ry
 =
PWR_SLEEPENTRY_WFI
)

396 
	`__WFI
();

401 
	`__SEV
();

402 
	`__WFE
();

403 
	`__WFE
();

405 
	}
}

426 
	$HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
)

429 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

430 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
STOPE¡ry
));

433 
	`MODIFY_REG
(
PWR
->
CR
, (
PWR_CR_PDDS
 | 
PWR_CR_LPDS
), 
Reguœt‹
);

436 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

439 if(
STOPE¡ry
 =
PWR_STOPENTRY_WFI
)

442 
	`__WFI
();

447 
	`__SEV
();

448 
	`__WFE
();

449 
	`__WFE
();

452 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

453 
	}
}

465 
	$HAL_PWR_E¡îSTANDBYMode
()

468 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

471 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

474 #i‡
	`deföed
 ( 
__CC_ARM
)

475 
	`__f‹˚_°‹es
();

478 
	`__WFI
();

479 
	}
}

486 
	$HAL_PWR_PVD_IRQH™dÀr
()

489 if(
	`__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë!
RESET
)

492 
	`HAL_PWR_PVDCÆlback
();

495 
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
();

497 
	}
}

503 
__wók
 
	$HAL_PWR_PVDCÆlback
()

508 
	}
}

518 
	$HAL_PWR_E«bÀSÀïOnExô
()

521 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

522 
	}
}

530 
	$HAL_PWR_DißbÀSÀïOnExô
()

533 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

534 
	}
}

542 
	$HAL_PWR_E«bÀSEVOnPíd
()

545 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

546 
	}
}

554 
	$HAL_PWR_DißbÀSEVOnPíd
()

557 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

558 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pwr_ex.c

43 
	~"°m32f4xx_hÆ.h
"

54 #ifde‡
HAL_PWR_MODULE_ENABLED


61 
	#PWR_OVERDRIVE_TIMEOUT_VALUE
 1000

	)

62 
	#PWR_UDERDRIVE_TIMEOUT_VALUE
 1000

	)

63 
	#PWR_BKPREG_TIMEOUT_VALUE
 1000

	)

64 
	#PWR_VOSRDY_TIMEOUT_VALUE
 1000

	)

161 
HAL_SètusTy≥Def
 
	$HAL_PWREx_E«bÀBkUpReg
()

163 
uöt32_t
 
tick°¨t
 = 0;

165 *(
__IO
 
uöt32_t
 *Ë
CSR_BRE_BB
 = (uöt32_t)
ENABLE
;

168 
tick°¨t
 = 
	`HAL_GëTick
();

171 
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_BRR
Ë=
RESET
)

173 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_BKPREG_TIMEOUT_VALUE
)

175  
HAL_TIMEOUT
;

178  
HAL_OK
;

179 
	}
}

185 
HAL_SètusTy≥Def
 
	$HAL_PWREx_DißbÀBkUpReg
()

187 
uöt32_t
 
tick°¨t
 = 0;

189 *(
__IO
 
uöt32_t
 *Ë
CSR_BRE_BB
 = (uöt32_t)
DISABLE
;

192 
tick°¨t
 = 
	`HAL_GëTick
();

195 
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_BRR
Ë!
RESET
)

197 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_BKPREG_TIMEOUT_VALUE
)

199  
HAL_TIMEOUT
;

202  
HAL_OK
;

203 
	}
}

209 
	$HAL_PWREx_E«bÀFœshPowîDown
()

211 *(
__IO
 
uöt32_t
 *Ë
CR_FPDS_BB
 = (uöt32_t)
ENABLE
;

212 
	}
}

218 
	$HAL_PWREx_DißbÀFœshPowîDown
()

220 *(
__IO
 
uöt32_t
 *Ë
CR_FPDS_BB
 = (uöt32_t)
DISABLE
;

221 
	}
}

231 
uöt32_t
 
	$HAL_PWREx_GëVﬁègeR™ge
()

233  (
PWR
->
CR
 & 
PWR_CR_VOS
);

234 
	}
}

236 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

252 
HAL_SètusTy≥Def
 
	$HAL_PWREx_C⁄åﬁVﬁègeSˇlög
(
uöt32_t
 
VﬁègeSˇlög
)

254 
uöt32_t
 
tick°¨t
 = 0;

256 
	`as£π_∑øm
(
	`IS_PWR_VOLTAGE_SCALING_RANGE
(
VﬁègeSˇlög
));

259 
	`__HAL_RCC_PWR_CLK_ENABLE
();

262 
	`__HAL_PWR_VOLTAGESCALING_CONFIG
(
VﬁègeSˇlög
);

265 
tick°¨t
 = 
	`HAL_GëTick
();

266 (
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_VOSRDY
Ë=
RESET
))

268 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_VOSRDY_TIMEOUT_VALUE
)

270  
HAL_TIMEOUT
;

274  
HAL_OK
;

275 
	}
}

277 #ñi‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

278 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
) || \

279 
deföed
(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
) || \

280 
	$deföed
(
STM32F479xx
)

307 
HAL_SètusTy≥Def
 
	$HAL_PWREx_C⁄åﬁVﬁègeSˇlög
(
uöt32_t
 
VﬁègeSˇlög
)

309 
uöt32_t
 
tick°¨t
 = 0;

311 
	`as£π_∑øm
(
	`IS_PWR_VOLTAGE_SCALING_RANGE
(
VﬁègeSˇlög
));

314 
	`__HAL_RCC_PWR_CLK_ENABLE
();

317 if(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_CFGR_SWS_PLL
)

320 
	`__HAL_RCC_PLL_DISABLE
();

323 
tick°¨t
 = 
	`HAL_GëTick
();

325 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

327 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

329  
HAL_TIMEOUT
;

334 
	`__HAL_PWR_VOLTAGESCALING_CONFIG
(
VﬁègeSˇlög
);

337 
	`__HAL_RCC_PLL_ENABLE
();

340 
tick°¨t
 = 
	`HAL_GëTick
();

342 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

344 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

346  
HAL_TIMEOUT
;

351 
tick°¨t
 = 
	`HAL_GëTick
();

352 (
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_VOSRDY
Ë=
RESET
))

354 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_VOSRDY_TIMEOUT_VALUE
)

356  
HAL_TIMEOUT
;

362  
HAL_ERROR
;

365  
HAL_OK
;

366 
	}
}

369 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

374 
	$HAL_PWREx_E«bÀWakeUpPöPﬁ¨ôyRisögEdge
()

376 *(
__IO
 
uöt32_t
 *Ë
CSR_WUPP_BB
 = (uöt32_t)
DISABLE
;

377 
	}
}

383 
	$HAL_PWREx_E«bÀWakeUpPöPﬁ¨ôyFÆlögEdge
()

385 *(
__IO
 
uöt32_t
 *Ë
CSR_WUPP_BB
 = (uöt32_t)
ENABLE
;

386 
	}
}

389 #i‡
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
) ||\

390 
	$deföed
(
STM32F411xE
)

396 
	$HAL_PWREx_E«bÀMaöReguœt‹LowVﬁège
()

398 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
ENABLE
;

399 
	}
}

406 
	$HAL_PWREx_DißbÀMaöReguœt‹LowVﬁège
()

408 *(
__IO
 
uöt32_t
 *Ë
CR_MRLVDS_BB
 = (uöt32_t)
DISABLE
;

409 
	}
}

416 
	$HAL_PWREx_E«bÀLowReguœt‹LowVﬁège
()

418 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
ENABLE
;

419 
	}
}

426 
	$HAL_PWREx_DißbÀLowReguœt‹LowVﬁège
()

428 *(
__IO
 
uöt32_t
 *Ë
CR_LPLVDS_BB
 = (uöt32_t)
DISABLE
;

429 
	}
}

433 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

434 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

446 
HAL_SètusTy≥Def
 
	$HAL_PWREx_E«bÀOvîDrive
()

448 
uöt32_t
 
tick°¨t
 = 0;

450 
	`__HAL_RCC_PWR_CLK_ENABLE
();

453 
	`__HAL_PWR_OVERDRIVE_ENABLE
();

456 
tick°¨t
 = 
	`HAL_GëTick
();

458 !
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_ODRDY
))

460 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_OVERDRIVE_TIMEOUT_VALUE
)

462  
HAL_TIMEOUT
;

467 
	`__HAL_PWR_OVERDRIVESWITCHING_ENABLE
();

470 
tick°¨t
 = 
	`HAL_GëTick
();

472 !
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_ODSWRDY
))

474 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_OVERDRIVE_TIMEOUT_VALUE
)

476  
HAL_TIMEOUT
;

479  
HAL_OK
;

480 
	}
}

493 
HAL_SètusTy≥Def
 
	$HAL_PWREx_DißbÀOvîDrive
()

495 
uöt32_t
 
tick°¨t
 = 0;

497 
	`__HAL_RCC_PWR_CLK_ENABLE
();

500 
	`__HAL_PWR_OVERDRIVESWITCHING_DISABLE
();

503 
tick°¨t
 = 
	`HAL_GëTick
();

505 
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_ODSWRDY
))

507 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_OVERDRIVE_TIMEOUT_VALUE
)

509  
HAL_TIMEOUT
;

514 
	`__HAL_PWR_OVERDRIVE_DISABLE
();

517 
tick°¨t
 = 
	`HAL_GëTick
();

519 
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_ODRDY
))

521 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_OVERDRIVE_TIMEOUT_VALUE
)

523  
HAL_TIMEOUT
;

527  
HAL_OK
;

528 
	}
}

569 
HAL_SètusTy≥Def
 
	$HAL_PWREx_E¡îUndîDriveSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
)

571 
uöt32_t
 
tm¥eg1
 = 0;

572 
uöt32_t
 
tick°¨t
 = 0;

575 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_UNDERDRIVE
(
Reguœt‹
));

576 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
STOPE¡ry
));

579 
	`__HAL_RCC_PWR_CLK_ENABLE
();

582 
	`__HAL_PWR_CLEAR_ODRUDR_FLAG
();

585 
	`__HAL_PWR_UNDERDRIVE_ENABLE
();

588 
tick°¨t
 = 
	`HAL_GëTick
();

591 
	`__HAL_PWR_GET_FLAG
(
PWR_FLAG_UDRDY
))

593 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PWR_UDERDRIVE_TIMEOUT_VALUE
)

595  
HAL_TIMEOUT
;

600 
tm¥eg1
 = 
PWR
->
CR
;

602 
tm¥eg1
 &(
uöt32_t
)~(
PWR_CR_PDDS
 | 
PWR_CR_LPDS
 | 
PWR_CR_LPUDS
 | 
PWR_CR_MRUDS
);

605 
tm¥eg1
 |
Reguœt‹
;

608 
PWR
->
CR
 = 
tm¥eg1
;

611 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

614 if(
STOPE¡ry
 =
PWR_SLEEPENTRY_WFI
)

617 
	`__WFI
();

622 
	`__WFE
();

625 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

627  
HAL_OK
;

628 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_qspi.c

157 
	~"°m32f4xx_hÆ.h
"

167 #ifde‡
HAL_QSPI_MODULE_ENABLED


169 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

176 
	#QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE
 ((
uöt32_t
)0x00000000Ë

	)

177 
	#QSPI_FUNCTIONAL_MODE_INDIRECT_READ
 ((
uöt32_t
)
QUADSPI_CCR_FMODE_0
Ë

	)

178 
	#QSPI_FUNCTIONAL_MODE_AUTO_POLLING
 ((
uöt32_t
)
QUADSPI_CCR_FMODE_1
Ë

	)

179 
	#QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED
 ((
uöt32_t
)
QUADSPI_CCR_FMODE
Ë

	)

188 
	#IS_QSPI_FUNCTIONAL_MODE
(
MODE
Ë(((MODEË=
QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE
) || \

189 ((
MODE
Ë=
QSPI_FUNCTIONAL_MODE_INDIRECT_READ
) || \

190 ((
MODE
Ë=
QSPI_FUNCTIONAL_MODE_AUTO_POLLING
) || \

191 ((
MODE
Ë=
QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED
))

	)

201 
QSPI_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

202 
QSPI_DMATxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

203 
QSPI_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

204 
QSPI_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

205 
QSPI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

206 
HAL_SètusTy≥Def
 
QSPI_WaôFœgSèãU¡ûTimeout
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sèã
, uöt32_à
Timeout
);

207 
QSPI_C⁄fig
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
uöt32_t
 
Fun˘i⁄ÆMode
);

240 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Inô
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

242 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

245 if(
hq•i
 =
NULL
)

247  
HAL_ERROR
;

251 
	`as£π_∑øm
(
	`IS_QSPI_ALL_INSTANCE
(
hq•i
->
In°™˚
));

252 
	`as£π_∑øm
(
	`IS_QSPI_CLOCK_PRESCALER
(
hq•i
->
Inô
.
ClockPªsˇÀr
));

253 
	`as£π_∑øm
(
	`IS_QSPI_FIFO_THRESHOLD
(
hq•i
->
Inô
.
FifoThªshﬁd
));

254 
	`as£π_∑øm
(
	`IS_QSPI_SSHIFT
(
hq•i
->
Inô
.
Sam∂eShi·ög
));

255 
	`as£π_∑øm
(
	`IS_QSPI_FLASH_SIZE
(
hq•i
->
Inô
.
FœshSize
));

256 
	`as£π_∑øm
(
	`IS_QSPI_CS_HIGH_TIME
(
hq•i
->
Inô
.
ChùSñe˘HighTime
));

257 
	`as£π_∑øm
(
	`IS_QSPI_CLOCK_MODE
(
hq•i
->
Inô
.
ClockMode
));

258 
	`as£π_∑øm
(
	`IS_QSPI_DUAL_FLASH_MODE
(
hq•i
->
Inô
.
DuÆFœsh
));

260 i‡(
hq•i
->
Inô
.
DuÆFœsh
 !
QSPI_DUALFLASH_ENABLE
 )

262 
	`as£π_∑øm
(
	`IS_QSPI_FLASH_ID
(
hq•i
->
Inô
.
FœshID
));

266 
	`__HAL_LOCK
(
hq•i
);

268 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_RESET
)

271 
hq•i
->
Lock
 = 
HAL_UNLOCKED
;

274 
	`HAL_QSPI_M•Inô
(
hq•i
);

277 
	`HAL_QSPI_SëTimeout
(
hq•i
, 
HAL_QPSI_TIMEOUT_DEFAULT_VALUE
);

281 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CR
, 
QUADSPI_CR_FTHRES
, ((hq•i->
Inô
.
FifoThªshﬁd
 - 1) << 8));

284 
°©us
 = 
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_BUSY
, 
RESET
, hq•i->
Timeout
);

286 if(
°©us
 =
HAL_OK
)

290 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CR
,(
QUADSPI_CR_PRESCALER
 | 
QUADSPI_CR_SSHIFT
 | 
QUADSPI_CR_FSEL
 | 
QUADSPI_CR_DFM
), ((hq•i->
Inô
.
ClockPªsˇÀr
 << 24)| hq•i->Inô.
Sam∂eShi·ög
 | hq•i->Inô.
FœshID
| hq•i->Inô.
DuÆFœsh
 ));

293 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
DCR
, (
QUADSPI_DCR_FSIZE
 | 
QUADSPI_DCR_CSHT
 | 
QUADSPI_DCR_CKMODE
),

294 ((
hq•i
->
Inô
.
FœshSize
 << 16Ë| hq•i->Inô.
ChùSñe˘HighTime
 | hq•i->Inô.
ClockMode
));

297 
	`__HAL_QSPI_ENABLE
(
hq•i
);

300 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

303 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

307 
	`__HAL_UNLOCK
(
hq•i
);

310  
°©us
;

311 
	}
}

318 
HAL_SètusTy≥Def
 
	$HAL_QSPI_DeInô
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

321 if(
hq•i
 =
NULL
)

323  
HAL_ERROR
;

327 
	`__HAL_LOCK
(
hq•i
);

330 
	`__HAL_QSPI_DISABLE
(
hq•i
);

333 
	`HAL_QSPI_M•DeInô
(
hq•i
);

336 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

339 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_RESET
;

342 
	`__HAL_UNLOCK
(
hq•i
);

344  
HAL_OK
;

345 
	}
}

352 
__wók
 
	$HAL_QSPI_M•Inô
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

357 
	}
}

364 
__wók
 
	$HAL_QSPI_M•DeInô
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

369 
	}
}

400 
	$HAL_QSPI_IRQH™dÀr
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

402 
__IO
 
uöt32_t
 *
d©a_ªg
;

403 
uöt32_t
 
Êag
 = 0, 
ôsour˚
 = 0;

406 
Êag
 = 
	`__HAL_QSPI_GET_FLAG
(
hq•i
, 
QSPI_FLAG_FT
);

407 
ôsour˚
 = 
	`__HAL_QSPI_GET_IT_SOURCE
(
hq•i
, 
QSPI_IT_FT
);

409 if((
Êag
 !
RESET
Ë&& (
ôsour˚
 != RESET))

411 
d©a_ªg
 = &
hq•i
->
In°™˚
->
DR
;

413 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_BUSY_INDIRECT_TX
)

416 
	`__HAL_QSPI_GET_FLAG
(
hq•i
, 
QSPI_FLAG_FT
) != 0)

418 i‡(
hq•i
->
TxX„rCou¡
 > 0)

421 *(
__IO
 
uöt8_t
 *)
d©a_ªg
 = *
hq•i
->
pTxBuffPå
++;

422 
hq•i
->
TxX„rCou¡
--;

431 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_BUSY_INDIRECT_RX
)

434 
	`__HAL_QSPI_GET_FLAG
(
hq•i
, 
QSPI_FLAG_FT
) != 0)

436 i‡(
hq•i
->
RxX„rCou¡
 > 0)

439 *
hq•i
->
pRxBuffPå
++ = *(
__IO
 
uöt8_t
 *)
d©a_ªg
;

440 
hq•i
->
RxX„rCou¡
--;

451 
	`HAL_QSPI_FifoThªshﬁdCÆlback
(
hq•i
);

455 
Êag
 = 
	`__HAL_QSPI_GET_FLAG
(
hq•i
, 
QSPI_FLAG_TC
);

456 
ôsour˚
 = 
	`__HAL_QSPI_GET_IT_SOURCE
(
hq•i
, 
QSPI_IT_TC
);

458 if((
Êag
 !
RESET
Ë&& (
ôsour˚
 != RESET))

461 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TC
);

464 
	`__HAL_QSPI_DISABLE_IT
(
hq•i
, 
QSPI_IT_TC
 | 
QSPI_IT_TE
 | 
QSPI_IT_FT
);

467 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_BUSY_INDIRECT_TX
)

470 
	`HAL_QSPI_Ab‹t
(
hq•i
);

473 
	`HAL_QSPI_TxC∂tCÆlback
(
hq•i
);

475 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_BUSY_INDIRECT_RX
)

477 
d©a_ªg
 = &
hq•i
->
In°™˚
->
DR
;

478 
	`READ_BIT
(
hq•i
->
In°™˚
->
SR
, 
QUADSPI_SR_FLEVEL
) != 0)

480 i‡(
hq•i
->
RxX„rCou¡
 > 0)

483 *
hq•i
->
pRxBuffPå
++ = *(
__IO
 
uöt8_t
 *)
d©a_ªg
;

484 
hq•i
->
RxX„rCou¡
--;

494 
	`HAL_QSPI_Ab‹t
(
hq•i
);

497 
	`HAL_QSPI_RxC∂tCÆlback
(
hq•i
);

499 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_BUSY
)

502 
	`HAL_QSPI_CmdC∂tCÆlback
(
hq•i
);

506 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

510 
Êag
 = 
	`__HAL_QSPI_GET_FLAG
(
hq•i
, 
QSPI_FLAG_SM
);

511 
ôsour˚
 = 
	`__HAL_QSPI_GET_IT_SOURCE
(
hq•i
, 
QSPI_IT_SM
);

513 if((
Êag
 !
RESET
Ë&& (
ôsour˚
 != RESET))

516 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_SM
);

519 if(
	`READ_BIT
(
hq•i
->
In°™˚
->
CR
, 
QUADSPI_CR_APMS
) != 0)

522 
	`__HAL_QSPI_DISABLE_IT
(
hq•i
, 
QSPI_IT_SM
 | 
QSPI_IT_FT
 | 
QSPI_IT_TE
);

525 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

529 
	`HAL_QSPI_SètusM©chCÆlback
(
hq•i
);

533 
Êag
 = 
	`__HAL_QSPI_GET_FLAG
(
hq•i
, 
QSPI_FLAG_TE
);

534 
ôsour˚
 = 
	`__HAL_QSPI_GET_IT_SOURCE
(
hq•i
, 
QSPI_IT_TE
);

536 if((
Êag
 !
RESET
Ë&& (
ôsour˚
 != RESET))

539 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TE
);

542 
	`__HAL_QSPI_DISABLE_IT
(
hq•i
, 
QSPI_IT_SM
 | 
QSPI_IT_TC
 | 
QSPI_IT_TE
 | 
QSPI_IT_FT
);

545 
hq•i
->
Eº‹Code
 |
HAL_QSPI_ERROR_TRANSFER
;

548 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_ERROR
;

551 
	`HAL_QSPI_Eº‹CÆlback
(
hq•i
);

555 
Êag
 = 
	`__HAL_QSPI_GET_FLAG
(
hq•i
, 
QSPI_FLAG_TO
);

556 
ôsour˚
 = 
	`__HAL_QSPI_GET_IT_SOURCE
(
hq•i
, 
QSPI_IT_TO
);

558 if((
Êag
 !
RESET
Ë&& (
ôsour˚
 != RESET))

561 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TO
);

564 
	`HAL_QSPI_TimeOutCÆlback
(
hq•i
);

566 
	}
}

576 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Comm™d
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
uöt32_t
 
Timeout
)

578 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

581 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION_MODE
(
cmd
->
In°ru˘i⁄Mode
));

582 i‡(
cmd
->
In°ru˘i⁄Mode
 !
QSPI_INSTRUCTION_NONE
)

584 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION
(
cmd
->
In°ru˘i⁄
));

587 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_MODE
(
cmd
->
AddªssMode
));

588 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

590 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_SIZE
(
cmd
->
AddªssSize
));

593 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_MODE
(
cmd
->
A…î«ãByãMode
));

594 i‡(
cmd
->
A…î«ãByãMode
 !
QSPI_ALTERNATE_BYTES_NONE
)

596 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_SIZE
(
cmd
->
A…î«ãByãsSize
));

599 
	`as£π_∑øm
(
	`IS_QSPI_DUMMY_CYCLES
(
cmd
->
DummyCy˛es
));

600 
	`as£π_∑øm
(
	`IS_QSPI_DATA_MODE
(
cmd
->
D©aMode
));

602 
	`as£π_∑øm
(
	`IS_QSPI_DDR_MODE
(
cmd
->
DdrMode
));

603 
	`as£π_∑øm
(
	`IS_QSPI_DDR_HHC
(
cmd
->
DdrHﬁdHÆfCy˛e
));

604 
	`as£π_∑øm
(
	`IS_QSPI_SIOO_MODE
(
cmd
->
SIOOMode
));

607 
	`__HAL_LOCK
(
hq•i
);

609 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

611 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

614 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY
;

617 
°©us
 = 
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_BUSY
, 
RESET
, 
Timeout
);

619 i‡(
°©us
 =
HAL_OK
)

622 
	`QSPI_C⁄fig
(
hq•i
, 
cmd
, 
QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE
);

624 i‡(
cmd
->
D©aMode
 =
QSPI_DATA_NONE
)

628 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_TC
, 
SET
, 
Timeout
Ë!
HAL_OK
)

630 
°©us
 = 
HAL_TIMEOUT
;

634 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TC
);

637 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

644 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

650 
°©us
 = 
HAL_BUSY
;

654 
	`__HAL_UNLOCK
(
hq•i
);

657  
°©us
;

658 
	}
}

667 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Comm™d_IT
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
)

669 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

672 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION_MODE
(
cmd
->
In°ru˘i⁄Mode
));

673 i‡(
cmd
->
In°ru˘i⁄Mode
 !
QSPI_INSTRUCTION_NONE
)

675 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION
(
cmd
->
In°ru˘i⁄
));

678 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_MODE
(
cmd
->
AddªssMode
));

679 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

681 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_SIZE
(
cmd
->
AddªssSize
));

684 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_MODE
(
cmd
->
A…î«ãByãMode
));

685 i‡(
cmd
->
A…î«ãByãMode
 !
QSPI_ALTERNATE_BYTES_NONE
)

687 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_SIZE
(
cmd
->
A…î«ãByãsSize
));

690 
	`as£π_∑øm
(
	`IS_QSPI_DUMMY_CYCLES
(
cmd
->
DummyCy˛es
));

691 
	`as£π_∑øm
(
	`IS_QSPI_DATA_MODE
(
cmd
->
D©aMode
));

693 
	`as£π_∑øm
(
	`IS_QSPI_DDR_MODE
(
cmd
->
DdrMode
));

694 
	`as£π_∑øm
(
	`IS_QSPI_DDR_HHC
(
cmd
->
DdrHﬁdHÆfCy˛e
));

695 
	`as£π_∑øm
(
	`IS_QSPI_SIOO_MODE
(
cmd
->
SIOOMode
));

698 
	`__HAL_LOCK
(
hq•i
);

700 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

702 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

705 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY
;

708 
°©us
 = 
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_BUSY
, 
RESET
, hq•i->
Timeout
);

710 i‡(
°©us
 =
HAL_OK
)

712 i‡(
cmd
->
D©aMode
 =
QSPI_DATA_NONE
)

717 
	`__HAL_QSPI_ENABLE_IT
(
hq•i
, 
QSPI_IT_TE
 | 
QSPI_IT_TC
);

721 
	`QSPI_C⁄fig
(
hq•i
, 
cmd
, 
QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE
);

723 i‡(
cmd
->
D©aMode
 !
QSPI_DATA_NONE
)

726 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

732 
°©us
 = 
HAL_BUSY
;

736 
	`__HAL_UNLOCK
(
hq•i
);

739  
°©us
;

740 
	}
}

750 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Tønsmô
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
, 
uöt32_t
 
Timeout
)

752 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

753 
__IO
 
uöt32_t
 *
d©a_ªg
 = &
hq•i
->
In°™˚
->
DR
;

756 
	`__HAL_LOCK
(
hq•i
);

758 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

760 if(
pD©a
 !
NULL
 )

762 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

765 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_INDIRECT_TX
;

768 
hq•i
->
TxX„rCou¡
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

769 
hq•i
->
TxX„rSize
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

770 
hq•i
->
pTxBuffPå
 = 
pD©a
;

773 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CCR
, 
QUADSPI_CCR_FMODE
, 
QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE
);

775 
hq•i
->
TxX„rCou¡
 > 0)

778 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_FT
, 
SET
, 
Timeout
Ë!
HAL_OK
)

780 
°©us
 = 
HAL_TIMEOUT
;

784 *(
__IO
 
uöt8_t
 *)
d©a_ªg
 = *
hq•i
->
pTxBuffPå
++;

785 
hq•i
->
TxX„rCou¡
--;

788 i‡(
°©us
 =
HAL_OK
)

791 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_TC
, 
SET
, 
Timeout
Ë!
HAL_OK
)

793 
°©us
 = 
HAL_TIMEOUT
;

798 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TC
);

801 
°©us
 = 
	`HAL_QSPI_Ab‹t
(
hq•i
);

806 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

810 
°©us
 = 
HAL_ERROR
;

815 
°©us
 = 
HAL_BUSY
;

819 
	`__HAL_UNLOCK
(
hq•i
);

821  
°©us
;

822 
	}
}

833 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Re˚ive
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
, 
uöt32_t
 
Timeout
)

835 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

836 
uöt32_t
 
addr_ªg
 = 
	`READ_REG
(
hq•i
->
In°™˚
->
AR
);

837 
__IO
 
uöt32_t
 *
d©a_ªg
 = &
hq•i
->
In°™˚
->
DR
;

840 
	`__HAL_LOCK
(
hq•i
);

842 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

844 if(
pD©a
 !
NULL
 )

846 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

849 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_INDIRECT_RX
;

852 
hq•i
->
RxX„rCou¡
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

853 
hq•i
->
RxX„rSize
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

854 
hq•i
->
pRxBuffPå
 = 
pD©a
;

857 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CCR
, 
QUADSPI_CCR_FMODE
, 
QSPI_FUNCTIONAL_MODE_INDIRECT_READ
);

860 
	`WRITE_REG
(
hq•i
->
In°™˚
->
AR
, 
addr_ªg
);

862 
hq•i
->
RxX„rCou¡
 > 0)

865 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, (
QSPI_FLAG_FT
 | 
QSPI_FLAG_TC
), 
SET
, 
Timeout
Ë!
HAL_OK
)

867 
°©us
 = 
HAL_TIMEOUT
;

871 *
hq•i
->
pRxBuffPå
++ = *(
__IO
 
uöt8_t
 *)
d©a_ªg
;

872 
hq•i
->
RxX„rCou¡
--;

875 i‡(
°©us
 =
HAL_OK
)

878 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_TC
, 
SET
, 
Timeout
Ë!
HAL_OK
)

880 
°©us
 = 
HAL_TIMEOUT
;

885 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TC
);

888 
°©us
 = 
	`HAL_QSPI_Ab‹t
(
hq•i
);

893 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

897 
°©us
 = 
HAL_ERROR
;

902 
°©us
 = 
HAL_BUSY
;

906 
	`__HAL_UNLOCK
(
hq•i
);

908  
°©us
;

909 
	}
}

918 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Tønsmô_IT
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
)

920 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

923 
	`__HAL_LOCK
(
hq•i
);

925 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

927 if(
pD©a
 !
NULL
 )

929 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

932 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_INDIRECT_TX
;

935 
hq•i
->
TxX„rCou¡
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

936 
hq•i
->
TxX„rSize
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

937 
hq•i
->
pTxBuffPå
 = 
pD©a
;

940 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CCR
, 
QUADSPI_CCR_FMODE
, 
QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE
);

943 
	`__HAL_QSPI_ENABLE_IT
(
hq•i
, 
QSPI_IT_TE
 | 
QSPI_IT_FT
 | 
QSPI_IT_TC
);

948 
°©us
 = 
HAL_ERROR
;

953 
°©us
 = 
HAL_BUSY
;

957 
	`__HAL_UNLOCK
(
hq•i
);

959  
°©us
;

960 
	}
}

969 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Re˚ive_IT
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
)

971 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

972 
uöt32_t
 
addr_ªg
 = 
	`READ_REG
(
hq•i
->
In°™˚
->
AR
);

975 
	`__HAL_LOCK
(
hq•i
);

977 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

979 if(
pD©a
 !
NULL
 )

981 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

984 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_INDIRECT_RX
;

987 
hq•i
->
RxX„rCou¡
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

988 
hq•i
->
RxX„rSize
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

989 
hq•i
->
pRxBuffPå
 = 
pD©a
;

992 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CCR
, 
QUADSPI_CCR_FMODE
, 
QSPI_FUNCTIONAL_MODE_INDIRECT_READ
);

995 
	`WRITE_REG
(
hq•i
->
In°™˚
->
AR
, 
addr_ªg
);

998 
	`__HAL_QSPI_ENABLE_IT
(
hq•i
, 
QSPI_IT_TE
 | 
QSPI_IT_FT
 | 
QSPI_IT_TC
);

1002 
°©us
 = 
HAL_ERROR
;

1007 
°©us
 = 
HAL_BUSY
;

1011 
	`__HAL_UNLOCK
(
hq•i
);

1013  
°©us
;

1014 
	}
}

1023 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Tønsmô_DMA
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
)

1025 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1026 
uöt32_t
 *
tmp
;

1029 
	`__HAL_LOCK
(
hq•i
);

1031 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

1033 if(
pD©a
 !
NULL
 )

1035 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

1038 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_INDIRECT_TX
;

1041 
hq•i
->
TxX„rCou¡
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

1042 
hq•i
->
TxX„rSize
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

1043 
hq•i
->
pTxBuffPå
 = 
pD©a
;

1046 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CCR
, 
QUADSPI_CCR_FMODE
, 
QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE
);

1049 
hq•i
->
hdma
->
X„rC∂tCÆlback
 = 
QSPI_DMATxC∂t
;

1052 
hq•i
->
hdma
->
X„rHÆfC∂tCÆlback
 = 
QSPI_DMATxHÆfC∂t
;

1055 
hq•i
->
hdma
->
X„rEº‹CÆlback
 = 
QSPI_DMAEº‹
;

1058 
hq•i
->
hdma
->
Inô
.
Dúe˘i⁄
 = 
DMA_MEMORY_TO_PERIPH
;

1059 
	`MODIFY_REG
(
hq•i
->
hdma
->
In°™˚
->
CR
, 
DMA_SxCR_DIR
, hq•i->hdma->
Inô
.
Dúe˘i⁄
);

1062 
tmp
 = (
uöt32_t
*)&
pD©a
;

1063 
	`HAL_DMA_Sèπ_IT
(
hq•i
->
hdma
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hq•i->
In°™˚
->
DR
, hq•i->
TxX„rSize
);

1066 
	`SET_BIT
(
hq•i
->
In°™˚
->
CR
, 
QUADSPI_CR_DMAEN
);

1070 
°©us
 = 
HAL_OK
;

1075 
°©us
 = 
HAL_BUSY
;

1079 
	`__HAL_UNLOCK
(
hq•i
);

1081  
°©us
;

1082 
	}
}

1091 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Re˚ive_DMA
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt8_t
 *
pD©a
)

1093 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1094 
uöt32_t
 *
tmp
;

1095 
uöt32_t
 
addr_ªg
 = 
	`READ_REG
(
hq•i
->
In°™˚
->
AR
);

1098 
	`__HAL_LOCK
(
hq•i
);

1100 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

1102 if(
pD©a
 !
NULL
 )

1104 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

1107 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_INDIRECT_RX
;

1110 
hq•i
->
RxX„rCou¡
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

1111 
hq•i
->
RxX„rSize
 = 
	`READ_REG
(hq•i->
In°™˚
->
DLR
) + 1;

1112 
hq•i
->
pRxBuffPå
 = 
pD©a
;

1115 
hq•i
->
hdma
->
X„rC∂tCÆlback
 = 
QSPI_DMARxC∂t
;

1118 
hq•i
->
hdma
->
X„rHÆfC∂tCÆlback
 = 
QSPI_DMARxHÆfC∂t
;

1121 
hq•i
->
hdma
->
X„rEº‹CÆlback
 = 
QSPI_DMAEº‹
;

1124 
hq•i
->
hdma
->
Inô
.
Dúe˘i⁄
 = 
DMA_PERIPH_TO_MEMORY
;

1125 
	`MODIFY_REG
(
hq•i
->
hdma
->
In°™˚
->
CR
, 
DMA_SxCR_DIR
, hq•i->hdma->
Inô
.
Dúe˘i⁄
);

1128 
tmp
 = (
uöt32_t
*)&
pD©a
;

1129 
	`HAL_DMA_Sèπ_IT
(
hq•i
->
hdma
, (
uöt32_t
)&hq•i->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, hq•i->
RxX„rSize
);

1132 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CCR
, 
QUADSPI_CCR_FMODE
, 
QSPI_FUNCTIONAL_MODE_INDIRECT_READ
);

1135 
	`WRITE_REG
(
hq•i
->
In°™˚
->
AR
, 
addr_ªg
);

1138 
	`SET_BIT
(
hq•i
->
In°™˚
->
CR
, 
QUADSPI_CR_DMAEN
);

1142 
°©us
 = 
HAL_ERROR
;

1147 
°©us
 = 
HAL_BUSY
;

1151 
	`__HAL_UNLOCK
(
hq•i
);

1153  
°©us
;

1154 
	}
}

1165 
HAL_SètusTy≥Def
 
	$HAL_QSPI_AutoPﬁlög
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
QSPI_AutoPﬁlögTy≥Def
 *
cfg
, 
uöt32_t
 
Timeout
)

1167 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

1170 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION_MODE
(
cmd
->
In°ru˘i⁄Mode
));

1171 i‡(
cmd
->
In°ru˘i⁄Mode
 !
QSPI_INSTRUCTION_NONE
)

1173 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION
(
cmd
->
In°ru˘i⁄
));

1176 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_MODE
(
cmd
->
AddªssMode
));

1177 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

1179 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_SIZE
(
cmd
->
AddªssSize
));

1182 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_MODE
(
cmd
->
A…î«ãByãMode
));

1183 i‡(
cmd
->
A…î«ãByãMode
 !
QSPI_ALTERNATE_BYTES_NONE
)

1185 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_SIZE
(
cmd
->
A…î«ãByãsSize
));

1188 
	`as£π_∑øm
(
	`IS_QSPI_DUMMY_CYCLES
(
cmd
->
DummyCy˛es
));

1189 
	`as£π_∑øm
(
	`IS_QSPI_DATA_MODE
(
cmd
->
D©aMode
));

1191 
	`as£π_∑øm
(
	`IS_QSPI_DDR_MODE
(
cmd
->
DdrMode
));

1192 
	`as£π_∑øm
(
	`IS_QSPI_DDR_HHC
(
cmd
->
DdrHﬁdHÆfCy˛e
));

1193 
	`as£π_∑øm
(
	`IS_QSPI_SIOO_MODE
(
cmd
->
SIOOMode
));

1195 
	`as£π_∑øm
(
	`IS_QSPI_INTERVAL
(
cfg
->
I¡îvÆ
));

1196 
	`as£π_∑øm
(
	`IS_QSPI_STATUS_BYTES_SIZE
(
cfg
->
SètusByãsSize
));

1197 
	`as£π_∑øm
(
	`IS_QSPI_MATCH_MODE
(
cfg
->
M©chMode
));

1200 
	`__HAL_LOCK
(
hq•i
);

1202 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

1205 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

1208 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_AUTO_POLLING
;

1211 
°©us
 = 
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_BUSY
, 
RESET
, 
Timeout
);

1213 i‡(
°©us
 =
HAL_OK
)

1216 
	`WRITE_REG
(
hq•i
->
In°™˚
->
PSMAR
, 
cfg
->
M©ch
);

1219 
	`WRITE_REG
(
hq•i
->
In°™˚
->
PSMKR
, 
cfg
->
Mask
);

1222 
	`WRITE_REG
(
hq•i
->
In°™˚
->
PIR
, 
cfg
->
I¡îvÆ
);

1226 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CR
, (
QUADSPI_CR_PMM
 | 
QUADSPI_CR_APMS
),

1227 (
cfg
->
M©chMode
 | 
QSPI_AUTOMATIC_STOP_ENABLE
));

1230 
cmd
->
NbD©a
 = 
cfg
->
SètusByãsSize
;

1231 
	`QSPI_C⁄fig
(
hq•i
, 
cmd
, 
QSPI_FUNCTIONAL_MODE_AUTO_POLLING
);

1234 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_SM
, 
SET
, 
Timeout
Ë!
HAL_OK
)

1236 
°©us
 = 
HAL_TIMEOUT
;

1240 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_SM
);

1243 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

1249 
°©us
 = 
HAL_BUSY
;

1252 
	`__HAL_UNLOCK
(
hq•i
);

1255  
°©us
;

1256 
	}
}

1266 
HAL_SètusTy≥Def
 
	$HAL_QSPI_AutoPﬁlög_IT
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
QSPI_AutoPﬁlögTy≥Def
 *
cfg
)

1268 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

1271 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION_MODE
(
cmd
->
In°ru˘i⁄Mode
));

1272 i‡(
cmd
->
In°ru˘i⁄Mode
 !
QSPI_INSTRUCTION_NONE
)

1274 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION
(
cmd
->
In°ru˘i⁄
));

1277 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_MODE
(
cmd
->
AddªssMode
));

1278 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

1280 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_SIZE
(
cmd
->
AddªssSize
));

1283 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_MODE
(
cmd
->
A…î«ãByãMode
));

1284 i‡(
cmd
->
A…î«ãByãMode
 !
QSPI_ALTERNATE_BYTES_NONE
)

1286 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_SIZE
(
cmd
->
A…î«ãByãsSize
));

1289 
	`as£π_∑øm
(
	`IS_QSPI_DUMMY_CYCLES
(
cmd
->
DummyCy˛es
));

1290 
	`as£π_∑øm
(
	`IS_QSPI_DATA_MODE
(
cmd
->
D©aMode
));

1292 
	`as£π_∑øm
(
	`IS_QSPI_DDR_MODE
(
cmd
->
DdrMode
));

1293 
	`as£π_∑øm
(
	`IS_QSPI_DDR_HHC
(
cmd
->
DdrHﬁdHÆfCy˛e
));

1294 
	`as£π_∑øm
(
	`IS_QSPI_SIOO_MODE
(
cmd
->
SIOOMode
));

1296 
	`as£π_∑øm
(
	`IS_QSPI_INTERVAL
(
cfg
->
I¡îvÆ
));

1297 
	`as£π_∑øm
(
	`IS_QSPI_STATUS_BYTES_SIZE
(
cfg
->
SètusByãsSize
));

1298 
	`as£π_∑øm
(
	`IS_QSPI_MATCH_MODE
(
cfg
->
M©chMode
));

1299 
	`as£π_∑øm
(
	`IS_QSPI_AUTOMATIC_STOP
(
cfg
->
Autom©icSt›
));

1302 
	`__HAL_LOCK
(
hq•i
);

1304 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

1306 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

1309 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_AUTO_POLLING
;

1312 
°©us
 = 
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_BUSY
, 
RESET
, hq•i->
Timeout
);

1314 i‡(
°©us
 =
HAL_OK
)

1317 
	`WRITE_REG
(
hq•i
->
In°™˚
->
PSMAR
, 
cfg
->
M©ch
);

1320 
	`WRITE_REG
(
hq•i
->
In°™˚
->
PSMKR
, 
cfg
->
Mask
);

1323 
	`WRITE_REG
(
hq•i
->
In°™˚
->
PIR
, 
cfg
->
I¡îvÆ
);

1326 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CR
, (
QUADSPI_CR_PMM
 | 
QUADSPI_CR_APMS
),

1327 (
cfg
->
M©chMode
 | cfg->
Autom©icSt›
));

1330 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TE
 | 
QSPI_FLAG_SM
);

1333 
	`__HAL_QSPI_ENABLE_IT
(
hq•i
, (
QSPI_IT_SM
 | 
QSPI_IT_TE
));

1336 
cmd
->
NbD©a
 = 
cfg
->
SètusByãsSize
;

1337 
	`QSPI_C⁄fig
(
hq•i
, 
cmd
, 
QSPI_FUNCTIONAL_MODE_AUTO_POLLING
);

1342 
°©us
 = 
HAL_BUSY
;

1346 
	`__HAL_UNLOCK
(
hq•i
);

1349  
°©us
;

1350 
	}
}

1360 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Mem‹yM≠≥d
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
QSPI_Mem‹yM≠≥dTy≥Def
 *
cfg
)

1362 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

1365 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION_MODE
(
cmd
->
In°ru˘i⁄Mode
));

1366 i‡(
cmd
->
In°ru˘i⁄Mode
 !
QSPI_INSTRUCTION_NONE
)

1368 
	`as£π_∑øm
(
	`IS_QSPI_INSTRUCTION
(
cmd
->
In°ru˘i⁄
));

1371 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_MODE
(
cmd
->
AddªssMode
));

1372 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

1374 
	`as£π_∑øm
(
	`IS_QSPI_ADDRESS_SIZE
(
cmd
->
AddªssSize
));

1377 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_MODE
(
cmd
->
A…î«ãByãMode
));

1378 i‡(
cmd
->
A…î«ãByãMode
 !
QSPI_ALTERNATE_BYTES_NONE
)

1380 
	`as£π_∑øm
(
	`IS_QSPI_ALTERNATE_BYTES_SIZE
(
cmd
->
A…î«ãByãsSize
));

1383 
	`as£π_∑øm
(
	`IS_QSPI_DUMMY_CYCLES
(
cmd
->
DummyCy˛es
));

1384 
	`as£π_∑øm
(
	`IS_QSPI_DATA_MODE
(
cmd
->
D©aMode
));

1386 
	`as£π_∑øm
(
	`IS_QSPI_DDR_MODE
(
cmd
->
DdrMode
));

1387 
	`as£π_∑øm
(
	`IS_QSPI_DDR_HHC
(
cmd
->
DdrHﬁdHÆfCy˛e
));

1388 
	`as£π_∑øm
(
	`IS_QSPI_SIOO_MODE
(
cmd
->
SIOOMode
));

1390 
	`as£π_∑øm
(
	`IS_QSPI_TIMEOUT_ACTIVATION
(
cfg
->
TimeOutA˘iv©i⁄
));

1393 
	`__HAL_LOCK
(
hq•i
);

1395 if(
hq•i
->
Sèã
 =
HAL_QSPI_STATE_READY
)

1397 
hq•i
->
Eº‹Code
 = 
HAL_QSPI_ERROR_NONE
;

1400 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_BUSY_MEM_MAPPED
;

1403 
°©us
 = 
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_BUSY
, 
RESET
, hq•i->
Timeout
);

1405 i‡(
°©us
 =
HAL_OK
)

1408 
	`MODIFY_REG
(
hq•i
->
In°™˚
->
CR
, 
QUADSPI_CR_TCEN
, 
cfg
->
TimeOutA˘iv©i⁄
);

1410 i‡(
cfg
->
TimeOutA˘iv©i⁄
 =
QSPI_TIMEOUT_COUNTER_ENABLE
)

1412 
	`as£π_∑øm
(
	`IS_QSPI_TIMEOUT_PERIOD
(
cfg
->
TimeOutPîiod
));

1415 
	`WRITE_REG
(
hq•i
->
In°™˚
->
LPTR
, 
cfg
->
TimeOutPîiod
);

1418 
	`__HAL_QSPI_ENABLE_IT
(
hq•i
, 
QSPI_IT_TO
);

1422 
	`QSPI_C⁄fig
(
hq•i
, 
cmd
, 
QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED
);

1428 
°©us
 = 
HAL_BUSY
;

1433 
	`__HAL_UNLOCK
(
hq•i
);

1436  
°©us
;

1437 
	}
}

1444 
__wók
 
	$HAL_QSPI_Eº‹CÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1449 
	}
}

1456 
__wók
 
	$HAL_QSPI_CmdC∂tCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1461 
	}
}

1468 
__wók
 
	$HAL_QSPI_RxC∂tCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1473 
	}
}

1480 
__wók
 
	$HAL_QSPI_TxC∂tCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1485 
	}
}

1492 
__wók
 
	$HAL_QSPI_RxHÆfC∂tCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1497 
	}
}

1504 
__wók
 
	$HAL_QSPI_TxHÆfC∂tCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1509 
	}
}

1516 
__wók
 
	$HAL_QSPI_FifoThªshﬁdCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1521 
	}
}

1528 
__wók
 
	$HAL_QSPI_SètusM©chCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1533 
	}
}

1540 
__wók
 
	$HAL_QSPI_TimeOutCÆlback
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1545 
	}
}

1573 
HAL_QSPI_SèãTy≥Def
 
	$HAL_QSPI_GëSèã
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1575  
hq•i
->
Sèã
;

1576 
	}
}

1583 
uöt32_t
 
	$HAL_QSPI_GëEº‹
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1585  
hq•i
->
Eº‹Code
;

1586 
	}
}

1593 
HAL_SètusTy≥Def
 
	$HAL_QSPI_Ab‹t
(
QSPI_H™dÀTy≥Def
 *
hq•i
)

1595 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

1598 
	`SET_BIT
(
hq•i
->
In°™˚
->
CR
, 
QUADSPI_CR_ABORT
);

1601 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_TC
, 
SET
, hq•i->
Timeout
Ë!
HAL_OK
)

1603 
°©us
 = 
HAL_TIMEOUT
;

1607 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TC
);

1610 
°©us
 = 
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_BUSY
, 
RESET
, hq•i->
Timeout
);

1613 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

1616  
°©us
;

1617 
	}
}

1624 
	$HAL_QSPI_SëTimeout
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt32_t
 
Timeout
)

1626 
hq•i
->
Timeout
 = Timeout;

1627 
	}
}

1640 
	$QSPI_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1642 
QSPI_H™dÀTy≥Def
* 
hq•i
 = ( QSPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1643 
hq•i
->
RxX„rCou¡
 = 0;

1646 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_TC
, 
SET
, hq•i->
Timeout
Ë!
HAL_OK
)

1649 
	`HAL_QSPI_Eº‹CÆlback
(
hq•i
);

1654 
	`CLEAR_BIT
(
hq•i
->
In°™˚
->
CR
, 
QUADSPI_CR_DMAEN
);

1657 
	`HAL_DMA_Ab‹t
(
hdma
);

1660 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TC
);

1663 
	`HAL_QSPI_Ab‹t
(
hq•i
);

1666 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

1668 
	`HAL_QSPI_RxC∂tCÆlback
(
hq•i
);

1670 
	}
}

1677 
	$QSPI_DMATxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1679 
QSPI_H™dÀTy≥Def
* 
hq•i
 = ( QSPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1680 
hq•i
->
TxX„rCou¡
 = 0;

1683 if(
	`QSPI_WaôFœgSèãU¡ûTimeout
(
hq•i
, 
QSPI_FLAG_TC
, 
SET
, hq•i->
Timeout
Ë!
HAL_OK
)

1686 
	`HAL_QSPI_Eº‹CÆlback
(
hq•i
);

1691 
	`CLEAR_BIT
(
hq•i
->
In°™˚
->
CR
, 
QUADSPI_CR_DMAEN
);

1694 
	`HAL_DMA_Ab‹t
(
hdma
);

1697 
	`__HAL_QSPI_CLEAR_FLAG
(
hq•i
, 
QSPI_FLAG_TC
);

1700 
	`HAL_QSPI_Ab‹t
(
hq•i
);

1703 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_READY
;

1705 
	`HAL_QSPI_TxC∂tCÆlback
(
hq•i
);

1707 
	}
}

1714 
	$QSPI_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1716 
QSPI_H™dÀTy≥Def
* 
hq•i
 = (QSPI_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1718 
	`HAL_QSPI_RxHÆfC∂tCÆlback
(
hq•i
);

1719 
	}
}

1726 
	$QSPI_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1728 
QSPI_H™dÀTy≥Def
* 
hq•i
 = (QSPI_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1730 
	`HAL_QSPI_TxHÆfC∂tCÆlback
(
hq•i
);

1731 
	}
}

1738 
	$QSPI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1740 
QSPI_H™dÀTy≥Def
* 
hq•i
 = ( QSPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1742 
hq•i
->
RxX„rCou¡
 = 0;

1743 
hq•i
->
TxX„rCou¡
 = 0;

1744 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_ERROR
;

1745 
hq•i
->
Eº‹Code
 |
HAL_QSPI_ERROR_DMA
;

1747 
	`HAL_QSPI_Eº‹CÆlback
(
hq•i
);

1748 
	}
}

1758 
HAL_SètusTy≥Def
 
	$QSPI_WaôFœgSèãU¡ûTimeout
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
uöt32_t
 
Fœg
,

1759 
FœgSètus
 
Sèã
, 
uöt32_t
 
Timeout
)

1761 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1764 (
FœgSètus
)(
	`__HAL_QSPI_GET_FLAG
(
hq•i
, 
Fœg
)Ë!
Sèã
)

1767 i‡(
Timeout
 !
HAL_MAX_DELAY
)

1769 if((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

1771 
hq•i
->
Sèã
 = 
HAL_QSPI_STATE_ERROR
;

1772 
hq•i
->
Eº‹Code
 |
HAL_QSPI_ERROR_TIMEOUT
;

1774  
HAL_TIMEOUT
;

1778  
HAL_OK
;

1779 
	}
}

1793 
	$QSPI_C⁄fig
(
QSPI_H™dÀTy≥Def
 *
hq•i
, 
QSPI_Comm™dTy≥Def
 *
cmd
, 
uöt32_t
 
Fun˘i⁄ÆMode
)

1795 
	`as£π_∑øm
(
	`IS_QSPI_FUNCTIONAL_MODE
(
Fun˘i⁄ÆMode
));

1797 i‡((
cmd
->
D©aMode
 !
QSPI_DATA_NONE
Ë&& (
Fun˘i⁄ÆMode
 !
QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED
))

1800 
	`WRITE_REG
(
hq•i
->
In°™˚
->
DLR
, (
cmd
->
NbD©a
 - 1));

1803 i‡(
cmd
->
In°ru˘i⁄Mode
 !
QSPI_INSTRUCTION_NONE
)

1805 i‡(
cmd
->
A…î«ãByãMode
 !
QSPI_ALTERNATE_BYTES_NONE
)

1808 
	`WRITE_REG
(
hq•i
->
In°™˚
->
ABR
, 
cmd
->
A…î«ãByãs
);

1810 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

1814 
	`WRITE_REG
(
hq•i
->
In°™˚
->
CCR
, (
cmd
->
DdrMode
 | cmd->
DdrHﬁdHÆfCy˛e
 | cmd->
SIOOMode
 |

1815 
cmd
->
D©aMode
 | (cmd->
DummyCy˛es
 << 18Ë| cmd->
A…î«ãByãsSize
 |

1816 
cmd
->
A…î«ãByãMode
 | cmd->
AddªssSize
 | cmd->
AddªssMode
 |

1817 
cmd
->
In°ru˘i⁄Mode
 | cmd->
In°ru˘i⁄
 | 
Fun˘i⁄ÆMode
));

1819 i‡(
Fun˘i⁄ÆMode
 !
QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED
)

1822 
	`WRITE_REG
(
hq•i
->
In°™˚
->
AR
, 
cmd
->
Addªss
);

1829 
	`WRITE_REG
(
hq•i
->
In°™˚
->
CCR
, (
cmd
->
DdrMode
 | cmd->
DdrHﬁdHÆfCy˛e
 | cmd->
SIOOMode
 |

1830 
cmd
->
D©aMode
 | (cmd->
DummyCy˛es
 << 18Ë| cmd->
A…î«ãByãsSize
 |

1831 
cmd
->
A…î«ãByãMode
 | cmd->
AddªssMode
 | cmd->
In°ru˘i⁄Mode
 |

1832 
cmd
->
In°ru˘i⁄
 | 
Fun˘i⁄ÆMode
));

1837 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

1841 
	`WRITE_REG
(
hq•i
->
In°™˚
->
CCR
, (
cmd
->
DdrMode
 | cmd->
DdrHﬁdHÆfCy˛e
 | cmd->
SIOOMode
 |

1842 
cmd
->
D©aMode
 | (cmd->
DummyCy˛es
 << 18Ë| cmd->
A…î«ãByãMode
 |

1843 
cmd
->
AddªssSize
 | cmd->
AddªssMode
 | cmd->
In°ru˘i⁄Mode
 |

1844 
cmd
->
In°ru˘i⁄
 | 
Fun˘i⁄ÆMode
));

1846 i‡(
Fun˘i⁄ÆMode
 !
QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED
)

1849 
	`WRITE_REG
(
hq•i
->
In°™˚
->
AR
, 
cmd
->
Addªss
);

1856 
	`WRITE_REG
(
hq•i
->
In°™˚
->
CCR
, (
cmd
->
DdrMode
 | cmd->
DdrHﬁdHÆfCy˛e
 | cmd->
SIOOMode
 |

1857 
cmd
->
D©aMode
 | (cmd->
DummyCy˛es
 << 18Ë| cmd->
A…î«ãByãMode
 |

1858 
cmd
->
AddªssMode
 | cmd->
In°ru˘i⁄Mode
 | cmd->
In°ru˘i⁄
 |

1859 
Fun˘i⁄ÆMode
));

1865 i‡(
cmd
->
A…î«ãByãMode
 !
QSPI_ALTERNATE_BYTES_NONE
)

1868 
	`WRITE_REG
(
hq•i
->
In°™˚
->
ABR
, 
cmd
->
A…î«ãByãs
);

1870 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

1874 
	`WRITE_REG
(
hq•i
->
In°™˚
->
CCR
, (
cmd
->
DdrMode
 | cmd->
DdrHﬁdHÆfCy˛e
 | cmd->
SIOOMode
 |

1875 
cmd
->
D©aMode
 | (cmd->
DummyCy˛es
 << 18Ë| cmd->
A…î«ãByãsSize
 |

1876 
cmd
->
A…î«ãByãMode
 | cmd->
AddªssSize
 | cmd->
AddªssMode
 |

1877 
cmd
->
In°ru˘i⁄Mode
 | 
Fun˘i⁄ÆMode
));

1879 i‡(
Fun˘i⁄ÆMode
 !
QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED
)

1882 
	`WRITE_REG
(
hq•i
->
In°™˚
->
AR
, 
cmd
->
Addªss
);

1889 
	`WRITE_REG
(
hq•i
->
In°™˚
->
CCR
, (
cmd
->
DdrMode
 | cmd->
DdrHﬁdHÆfCy˛e
 | cmd->
SIOOMode
 |

1890 
cmd
->
D©aMode
 | (cmd->
DummyCy˛es
 << 18Ë| cmd->
A…î«ãByãsSize
 |

1891 
cmd
->
A…î«ãByãMode
 | cmd->
AddªssMode
 | cmd->
In°ru˘i⁄Mode
 |

1892 
Fun˘i⁄ÆMode
));

1897 i‡(
cmd
->
AddªssMode
 !
QSPI_ADDRESS_NONE
)

1901 
	`WRITE_REG
(
hq•i
->
In°™˚
->
CCR
, (
cmd
->
DdrMode
 | cmd->
DdrHﬁdHÆfCy˛e
 | cmd->
SIOOMode
 |

1902 
cmd
->
D©aMode
 | (cmd->
DummyCy˛es
 << 18Ë| cmd->
A…î«ãByãMode
 |

1903 
cmd
->
AddªssSize
 | cmd->
AddªssMode
 | cmd->
In°ru˘i⁄Mode
 |

1904 
Fun˘i⁄ÆMode
));

1906 i‡(
Fun˘i⁄ÆMode
 !
QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED
)

1909 
	`WRITE_REG
(
hq•i
->
In°™˚
->
AR
, 
cmd
->
Addªss
);

1915 i‡(
cmd
->
D©aMode
 !
QSPI_DATA_NONE
)

1918 
	`WRITE_REG
(
hq•i
->
In°™˚
->
CCR
, (
cmd
->
DdrMode
 | cmd->
DdrHﬁdHÆfCy˛e
 | cmd->
SIOOMode
 |

1919 
cmd
->
D©aMode
 | (cmd->
DummyCy˛es
 << 18Ë| cmd->
A…î«ãByãMode
 |

1920 
cmd
->
AddªssMode
 | cmd->
In°ru˘i⁄Mode
 | 
Fun˘i⁄ÆMode
));

1925 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc.c

89 
	~"°m32f4xx_hÆ.h
"

100 #ifde‡
HAL_RCC_MODULE_ENABLED


107 
	#CLOCKSWITCH_TIMEOUT_VALUE
 ((
uöt32_t
)5000Ë

	)

110 
	#__MCO1_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOA_CLK_ENABLE
()

	)

111 
	#MCO1_GPIO_PORT
 
GPIOA


	)

112 
	#MCO1_PIN
 
GPIO_PIN_8


	)

114 
	#__MCO2_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOC_CLK_ENABLE
()

	)

115 
	#MCO2_GPIO_PORT
 
GPIOC


	)

116 
	#MCO2_PIN
 
GPIO_PIN_9


	)

125 c⁄° 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

240 
__wók
 
	$HAL_RCC_DeInô
()

241 {
	}
}

251 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

253 
uöt32_t
 
tick°¨t
 = 0;

256 
	`as£π_∑øm
(
	`IS_RCC_OSCILLATORTYPE
(
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
));

258 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE)

261 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_OscInôSåu˘
->
HSESèã
));

263 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_HSE
) ||\

264 ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_PLL
Ë&& ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSE
)))

266 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSESèã
 =
RCC_HSE_OFF
))

268  
HAL_ERROR
;

274 
	`__HAL_RCC_HSE_CONFIG
(
RCC_HSE_OFF
);

277 
tick°¨t
 = 
	`HAL_GëTick
();

280 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

282 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

284  
HAL_TIMEOUT
;

289 
	`__HAL_RCC_HSE_CONFIG
(
RCC_OscInôSåu˘
->
HSESèã
);

292 if((
RCC_OscInôSåu˘
->
HSESèã
Ë!
RCC_HSE_OFF
)

295 
tick°¨t
 = 
	`HAL_GëTick
();

298 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

300 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

302  
HAL_TIMEOUT
;

309 
tick°¨t
 = 
	`HAL_GëTick
();

312 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

314 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

316  
HAL_TIMEOUT
;

323 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI)

326 
	`as£π_∑øm
(
	`IS_RCC_HSI
(
RCC_OscInôSåu˘
->
HSISèã
));

327 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
));

330 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_HSI
) ||\

331 ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_PLL
Ë&& ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSI
)))

334 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_ON
))

336  
HAL_ERROR
;

342 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

348 if((
RCC_OscInôSåu˘
->
HSISèã
)!
RCC_HSI_OFF
)

351 
	`__HAL_RCC_HSI_ENABLE
();

354 
tick°¨t
 = 
	`HAL_GëTick
();

357 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

359 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

361  
HAL_TIMEOUT
;

366 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

371 
	`__HAL_RCC_HSI_DISABLE
();

374 
tick°¨t
 = 
	`HAL_GëTick
();

377 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
)

379 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

381  
HAL_TIMEOUT
;

388 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI)

391 
	`as£π_∑øm
(
	`IS_RCC_LSI
(
RCC_OscInôSåu˘
->
LSISèã
));

394 if((
RCC_OscInôSåu˘
->
LSISèã
)!
RCC_LSI_OFF
)

397 
	`__HAL_RCC_LSI_ENABLE
();

400 
tick°¨t
 = 
	`HAL_GëTick
();

403 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë=
RESET
)

405 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

407  
HAL_TIMEOUT
;

414 
	`__HAL_RCC_LSI_DISABLE
();

417 
tick°¨t
 = 
	`HAL_GëTick
();

420 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë!
RESET
)

422 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

424  
HAL_TIMEOUT
;

430 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE)

433 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_OscInôSåu˘
->
LSESèã
));

436 
	`__HAL_RCC_PWR_CLK_ENABLE
();

439 
PWR
->
CR
 |
PWR_CR_DBP
;

442 
tick°¨t
 = 
	`HAL_GëTick
();

444 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

446 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_DBP_TIMEOUT_VALUE
)

448  
HAL_TIMEOUT
;

453 
	`__HAL_RCC_LSE_CONFIG
(
RCC_LSE_OFF
);

456 
tick°¨t
 = 
	`HAL_GëTick
();

459 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

461 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

463  
HAL_TIMEOUT
;

468 
	`__HAL_RCC_LSE_CONFIG
(
RCC_OscInôSåu˘
->
LSESèã
);

470 if((
RCC_OscInôSåu˘
->
LSESèã
Ë!
RCC_LSE_OFF
)

473 
tick°¨t
 = 
	`HAL_GëTick
();

476 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

478 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

480  
HAL_TIMEOUT
;

487 
tick°¨t
 = 
	`HAL_GëTick
();

490 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

492 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

494  
HAL_TIMEOUT
;

501 
	`as£π_∑øm
(
	`IS_RCC_PLL
(
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
));

502 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë!
RCC_PLL_NONE
)

505 if(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_CFGR_SWS_PLL
)

507 if((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_ON
)

510 
	`as£π_∑øm
(
	`IS_RCC_PLLSOURCE
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
));

511 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLM
));

512 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLN
));

513 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLP
));

514 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLQ
));

517 
	`__HAL_RCC_PLL_DISABLE
();

520 
tick°¨t
 = 
	`HAL_GëTick
();

523 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

525 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

527  
HAL_TIMEOUT
;

532 
	`WRITE_REG
(
RCC
->
PLLCFGR
, (
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 | \

533 
RCC_OscInôSåu˘
->
PLL
.
PLLM
 | \

534 (
RCC_OscInôSåu˘
->
PLL
.
PLLN
 << 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLN
)) | \

535 (((
RCC_OscInôSåu˘
->
PLL
.
PLLP
 >> 1Ë-1Ë<< 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLP
)) | \

536 (
RCC_OscInôSåu˘
->
PLL
.
PLLQ
 << 
	`POSITION_VAL
(
RCC_PLLCFGR_PLLQ
))));

538 
	`__HAL_RCC_PLL_ENABLE
();

541 
tick°¨t
 = 
	`HAL_GëTick
();

544 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

546 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

548  
HAL_TIMEOUT
;

555 
	`__HAL_RCC_PLL_DISABLE
();

558 
tick°¨t
 = 
	`HAL_GëTick
();

561 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

563 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

565  
HAL_TIMEOUT
;

572  
HAL_ERROR
;

575  
HAL_OK
;

576 
	}
}

603 
HAL_SètusTy≥Def
 
	$HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
)

605 
uöt32_t
 
tick°¨t
 = 0;

608 
	`as£π_∑øm
(
	`IS_RCC_CLOCKTYPE
(
RCC_ClkInôSåu˘
->
ClockTy≥
));

609 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FL©ícy
));

616 if(
FL©ícy
 > (
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
))

619 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

623 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
FL©ícy
)

625  
HAL_ERROR
;

629 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

631 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_ClkInôSåu˘
->
AHBCLKDividî
));

632 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkInôSåu˘
->
AHBCLKDividî
);

636 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

638 
	`as£π_∑øm
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
));

641 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

644 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

646  
HAL_ERROR
;

650 if((
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
) ||

651 (
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLRCLK
))

654 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

656  
HAL_ERROR
;

663 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

665  
HAL_ERROR
;

669 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
);

671 
tick°¨t
 = 
	`HAL_GëTick
();

673 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

675 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSE
)

677 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

679  
HAL_TIMEOUT
;

683 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

685 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

687 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

689  
HAL_TIMEOUT
;

693 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLRCLK
)

695 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLRCLK
)

697 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

699  
HAL_TIMEOUT
;

705 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSI
)

707 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

709  
HAL_TIMEOUT
;

719 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

721 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_ClkInôSåu˘
->
AHBCLKDividî
));

722 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkInôSåu˘
->
AHBCLKDividî
);

726 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

728 
	`as£π_∑øm
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
));

731 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

734 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

736  
HAL_ERROR
;

740 if((
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
) ||

741 (
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLRCLK
))

744 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

746  
HAL_ERROR
;

753 if(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

755  
HAL_ERROR
;

758 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
);

760 
tick°¨t
 = 
	`HAL_GëTick
();

762 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

764 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSE
)

766 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

768  
HAL_TIMEOUT
;

772 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

774 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

776 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

778  
HAL_TIMEOUT
;

782 if(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLRCLK
)

784 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLRCLK
)

786 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

788  
HAL_TIMEOUT
;

794 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_HSI
)

796 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
CLOCKSWITCH_TIMEOUT_VALUE
)

798  
HAL_TIMEOUT
;

805 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

809 if((
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
Ë!
FL©ícy
)

811  
HAL_ERROR
;

816 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

818 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB1CLKDividî
));

819 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_ClkInôSåu˘
->
APB1CLKDividî
);

823 if(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

825 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB2CLKDividî
));

826 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, ((
RCC_ClkInôSåu˘
->
APB2CLKDividî
) << 3));

830 
	`HAL_InôTick
 (
TICK_INT_PRIORITY
);

832  
HAL_OK
;

833 
	}
}

883 
	$HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
)

885 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

887 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCOx
));

888 
	`as£π_∑øm
(
	`IS_RCC_MCODIV
(
RCC_MCODiv
));

890 if(
RCC_MCOx
 =
RCC_MCO1
)

892 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCOSour˚
));

895 
	`__MCO1_CLK_ENABLE
();

898 
GPIO_InôSåu˘
.
Pö
 = 
MCO1_PIN
;

899 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

900 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_HIGH
;

901 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

902 
GPIO_InôSåu˘
.
A…î«ã
 = 
GPIO_AF0_MCO
;

903 
	`HAL_GPIO_Inô
(
MCO1_GPIO_PORT
, &
GPIO_InôSåu˘
);

906 
	`MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_MCO1
 | 
RCC_CFGR_MCO1PRE
), (
RCC_MCOSour˚
 | 
RCC_MCODiv
));

909 #i‡
	`deföed
(
RCC_CFGR_MCO1EN
)

910 
	`__HAL_RCC_MCO1_ENABLE
();

915 
	`as£π_∑øm
(
	`IS_RCC_MCO2SOURCE
(
RCC_MCOSour˚
));

918 
	`__MCO2_CLK_ENABLE
();

921 
GPIO_InôSåu˘
.
Pö
 = 
MCO2_PIN
;

922 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

923 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_HIGH
;

924 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

925 
GPIO_InôSåu˘
.
A…î«ã
 = 
GPIO_AF0_MCO
;

926 
	`HAL_GPIO_Inô
(
MCO2_GPIO_PORT
, &
GPIO_InôSåu˘
);

929 
	`MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_MCO2
 | 
RCC_CFGR_MCO2PRE
), (
RCC_MCOSour˚
 | (
RCC_MCODiv
 << 3)));

932 #i‡
	`deföed
(
RCC_CFGR_MCO2EN
)

933 
	`__HAL_RCC_MCO2_ENABLE
();

936 
	}
}

947 
	$HAL_RCC_E«bÀCSS
()

949 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
ENABLE
;

950 
	}
}

956 
	$HAL_RCC_DißbÀCSS
()

958 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
DISABLE
;

959 
	}
}

991 
__wók
 
uöt32_t
 
	$HAL_RCC_GëSysClockFªq
()

993 
uöt32_t
 
∂lm
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 0;

994 
uöt32_t
 
sys˛ock‰eq
 = 0;

997 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
)

999 
RCC_CFGR_SWS_HSI
:

1001 
sys˛ock‰eq
 = 
HSI_VALUE
;

1004 
RCC_CFGR_SWS_HSE
:

1006 
sys˛ock‰eq
 = 
HSE_VALUE
;

1009 
RCC_CFGR_SWS_PLL
:

1013 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

1014 if(
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë!
RCC_PLLSOURCE_HSI
)

1017 
∂lvco
 = ((
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLN)));

1022 
∂lvco
 = ((
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLN)));

1024 
∂Õ
 = ((((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLP)) + 1 ) *2);

1026 
sys˛ock‰eq
 = 
∂lvco
/
∂Õ
;

1031 
sys˛ock‰eq
 = 
HSI_VALUE
;

1035  
sys˛ock‰eq
;

1036 
	}
}

1047 
uöt32_t
 
	$HAL_RCC_GëHCLKFªq
()

1049 
Sy°emC‹eClock
 = 
	`HAL_RCC_GëSysClockFªq
(Ë>> 
APBAHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
)>> 
	`POSITION_VAL
(RCC_CFGR_HPRE)];

1050  
Sy°emC‹eClock
;

1051 
	}
}

1059 
uöt32_t
 
	$HAL_RCC_GëPCLK1Fªq
()

1062  (
	`HAL_RCC_GëHCLKFªq
(Ë>> 
APBAHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
)>> 
	`POSITION_VAL
(RCC_CFGR_PPRE1)]);

1063 
	}
}

1071 
uöt32_t
 
	$HAL_RCC_GëPCLK2Fªq
()

1074  (
	`HAL_RCC_GëHCLKFªq
()>> 
APBAHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
)>> 
	`POSITION_VAL
(RCC_CFGR_PPRE2)]);

1075 
	}
}

1084 
__wók
 
	$HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

1087 
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_HSI
 | 
RCC_OSCILLATORTYPE_LSE
 | 
RCC_OSCILLATORTYPE_LSI
;

1090 if((
RCC
->
CR
 &
RCC_CR_HSEBYP
) == RCC_CR_HSEBYP)

1092 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_BYPASS
;

1094 if((
RCC
->
CR
 &
RCC_CR_HSEON
) == RCC_CR_HSEON)

1096 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_ON
;

1100 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_OFF
;

1104 if((
RCC
->
CR
 &
RCC_CR_HSION
) == RCC_CR_HSION)

1106 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_ON
;

1110 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_OFF
;

1113 
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
CR
 &
RCC_CR_HSITRIM
Ë>> 
	`POSITION_VAL
(RCC_CR_HSITRIM));

1116 if((
RCC
->
BDCR
 &
RCC_BDCR_LSEBYP
) == RCC_BDCR_LSEBYP)

1118 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_BYPASS
;

1120 if((
RCC
->
BDCR
 &
RCC_BDCR_LSEON
) == RCC_BDCR_LSEON)

1122 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_ON
;

1126 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_OFF
;

1130 if((
RCC
->
CSR
 &
RCC_CSR_LSION
) == RCC_CSR_LSION)

1132 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_ON
;

1136 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_OFF
;

1140 if((
RCC
->
CR
 &
RCC_CR_PLLON
) == RCC_CR_PLLON)

1142 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

1146 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_OFF
;

1148 
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
);

1149 
RCC_OscInôSåu˘
->
PLL
.
PLLM
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
);

1150 
RCC_OscInôSåu˘
->
PLL
.
PLLN
 = (
uöt32_t
)((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLN));

1151 
RCC_OscInôSåu˘
->
PLL
.
PLLP
 = (
uöt32_t
)((((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
Ë+ 
RCC_PLLCFGR_PLLP_0
Ë<< 1Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLP));

1152 
RCC_OscInôSåu˘
->
PLL
.
PLLQ
 = (
uöt32_t
)((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLQ
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLQ));

1153 
	}
}

1163 
	$HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
)

1166 
RCC_ClkInôSåu˘
->
ClockTy≥
 = 
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
;

1169 
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SW
);

1172 
RCC_ClkInôSåu˘
->
AHBCLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
);

1175 
RCC_ClkInôSåu˘
->
APB1CLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
);

1178 
RCC_ClkInôSåu˘
->
APB2CLKDividî
 = (
uöt32_t
)((
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
) >> 3);

1181 *
pFL©ícy
 = (
uöt32_t
)(
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
);

1182 
	}
}

1189 
	$HAL_RCC_NMI_IRQH™dÀr
()

1192 if(
	`__HAL_RCC_GET_IT
(
RCC_IT_CSS
))

1195 
	`HAL_RCC_CSSCÆlback
();

1198 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_CSS
);

1200 
	}
}

1206 
__wók
 
	$HAL_RCC_CSSCÆlback
()

1211 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc_ex.c

43 
	~"°m32f4xx_hÆ.h
"

54 #ifde‡
HAL_RCC_MODULE_ENABLED


91 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

92 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

93 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

94 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

108 
	$HAL_RCC_DeInô
()

111 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
 | 
RCC_CR_HSITRIM_4
);

114 
	`CLEAR_REG
(
RCC
->
CFGR
);

117 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
 | 
RCC_CR_CSSON
 | 
RCC_CR_PLLON
| 
RCC_CR_PLLI2SON
);

120 
	`CLEAR_REG
(
RCC
->
PLLCFGR
);

121 
	`SET_BIT
(
RCC
->
PLLCFGR
, 
RCC_PLLCFGR_PLLM_4
 | 
RCC_PLLCFGR_PLLN_6
 | 
RCC_PLLCFGR_PLLN_7
 | 
RCC_PLLCFGR_PLLQ_2
);

124 
	`CLEAR_REG
(
RCC
->
PLLI2SCFGR
);

125 
	`SET_BIT
(
RCC
->
PLLI2SCFGR
, 
RCC_PLLI2SCFGR_PLLI2SN_6
 | 
RCC_PLLI2SCFGR_PLLI2SN_7
 | 
RCC_PLLI2SCFGR_PLLI2SR_1
);

128 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

131 
	`CLEAR_REG
(
RCC
->
CIR
);

132 
	}
}

134 
	gSTM32F401xC
 || 
	gSTM32F401xE
 || 
	gSTM32F411xE
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

136 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

150 
	$HAL_RCC_DeInô
()

153 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
 | 
RCC_CR_HSITRIM_4
);

156 
	`CLEAR_REG
(
RCC
->
CFGR
);

159 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
 | 
RCC_CR_CSSON
 | 
RCC_CR_PLLON
);

162 
	`CLEAR_REG
(
RCC
->
PLLCFGR
);

163 
	`SET_BIT
(
RCC
->
PLLCFGR
, 
RCC_PLLCFGR_PLLR_1
 | 
RCC_PLLCFGR_PLLM_4
 | 
RCC_PLLCFGR_PLLN_6
 | 
RCC_PLLCFGR_PLLN_7
 | 
RCC_PLLCFGR_PLLQ_2
);

166 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

169 
	`CLEAR_REG
(
RCC
->
CIR
);

170 
	}
}

173 #i‡
deföed
(
STM32F446xx
)

188 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

190 
uöt32_t
 
tick°¨t
 = 0;

191 
uöt32_t
 
tm¥eg1
 = 0;

192 
uöt32_t
 
∂li2•
 = 0;

193 
uöt32_t
 
∂li2sq
 = 0;

194 
uöt32_t
 
∂li2§
 = 0;

195 
uöt32_t
 
∂lßù
 = 0;

196 
uöt32_t
 
∂lßiq
 = 0;

197 
uöt32_t
 
∂li2su£d
 = 0;

198 
uöt32_t
 
∂lßiu£d
 = 0;

201 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

204 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S_APB1
) == (RCC_PERIPHCLK_I2S_APB1))

207 
	`as£π_∑øm
(
	`IS_RCC_I2SAPB1CLKSOURCE
(
PîùhClkInô
->
I2sApb1ClockSñe˘i⁄
));

210 
	`__HAL_RCC_I2S_APB1_CONFIG
(
PîùhClkInô
->
I2sApb1ClockSñe˘i⁄
);

212 if(
PîùhClkInô
->
I2sApb1ClockSñe˘i⁄
 =
RCC_I2SAPB1CLKSOURCE_PLLI2S
)

214 
∂li2su£d
 = 1;

220 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S_APB2
) == (RCC_PERIPHCLK_I2S_APB2))

223 
	`as£π_∑øm
(
	`IS_RCC_I2SAPB2CLKSOURCE
(
PîùhClkInô
->
I2sApb2ClockSñe˘i⁄
));

226 
	`__HAL_RCC_I2S_APB2_CONFIG
(
PîùhClkInô
->
I2sApb2ClockSñe˘i⁄
);

228 if(
PîùhClkInô
->
I2sApb2ClockSñe˘i⁄
 =
RCC_I2SAPB2CLKSOURCE_PLLI2S
)

230 
∂li2su£d
 = 1;

236 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI1
) == (RCC_PERIPHCLK_SAI1))

239 
	`as£π_∑øm
(
	`IS_RCC_SAI1CLKSOURCE
(
PîùhClkInô
->
Sai1ClockSñe˘i⁄
));

242 
	`__HAL_RCC_SAI1_CONFIG
(
PîùhClkInô
->
Sai1ClockSñe˘i⁄
);

244 if(
PîùhClkInô
->
Sai1ClockSñe˘i⁄
 =
RCC_SAI1CLKSOURCE_PLLI2S
)

246 
∂li2su£d
 = 1;

249 if(
PîùhClkInô
->
Sai1ClockSñe˘i⁄
 =
RCC_SAI1CLKSOURCE_PLLSAI
)

251 
∂lßiu£d
 = 1;

257 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI2
) == (RCC_PERIPHCLK_SAI2))

260 
	`as£π_∑øm
(
	`IS_RCC_SAI2CLKSOURCE
(
PîùhClkInô
->
Sai2ClockSñe˘i⁄
));

263 
	`__HAL_RCC_SAI2_CONFIG
(
PîùhClkInô
->
Sai2ClockSñe˘i⁄
);

266 if(
PîùhClkInô
->
Sai2ClockSñe˘i⁄
 =
RCC_SAI2CLKSOURCE_PLLI2S
)

268 
∂li2su£d
 = 1;

271 if(
PîùhClkInô
->
Sai2ClockSñe˘i⁄
 =
RCC_SAI2CLKSOURCE_PLLSAI
)

273 
∂lßiu£d
 = 1;

279 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == (RCC_PERIPHCLK_RTC))

282 
	`__HAL_RCC_PWR_CLK_ENABLE
();

285 
PWR
->
CR
 |
PWR_CR_DBP
;

288 
tick°¨t
 = 
	`HAL_GëTick
();

290 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

292 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_DBP_TIMEOUT_VALUE
)

294  
HAL_TIMEOUT
;

298 if((
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
Ë!(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & RCC_BDCR_RTCSEL))

301 
tm¥eg1
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

303 
	`__HAL_RCC_BACKUPRESET_FORCE
();

304 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

306 
RCC
->
BDCR
 = 
tm¥eg1
;

309 if(
	`HAL_IS_BIT_SET
(
tm¥eg1
, 
RCC_BDCR_LSERDY
))

312 
tick°¨t
 = 
	`HAL_GëTick
();

315 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

317 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

319  
HAL_TIMEOUT
;

323 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

329 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_TIM
) == (RCC_PERIPHCLK_TIM))

332 
	`__HAL_RCC_TIMCLKPRESCALER
(
PîùhClkInô
->
TIMPªsSñe˘i⁄
);

337 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_FMPI2C1
) == RCC_PERIPHCLK_FMPI2C1)

340 
	`as£π_∑øm
(
	`IS_RCC_FMPI2C1CLKSOURCE
(
PîùhClkInô
->
Fmpi2c1ClockSñe˘i⁄
));

343 
	`__HAL_RCC_FMPI2C1_CONFIG
(
PîùhClkInô
->
Fmpi2c1ClockSñe˘i⁄
);

348 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_CEC
) == RCC_PERIPHCLK_CEC)

351 
	`as£π_∑øm
(
	`IS_RCC_CECCLKSOURCE
(
PîùhClkInô
->
CecClockSñe˘i⁄
));

354 
	`__HAL_RCC_CEC_CONFIG
(
PîùhClkInô
->
CecClockSñe˘i⁄
);

359 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_CK48
) == RCC_PERIPHCLK_CK48)

362 
	`as£π_∑øm
(
	`IS_RCC_CK48CLKSOURCE
(
PîùhClkInô
->
Clk48ClockSñe˘i⁄
));

365 
	`__HAL_RCC_CLK48_CONFIG
(
PîùhClkInô
->
Clk48ClockSñe˘i⁄
);

368 if(
PîùhClkInô
->
Clk48ClockSñe˘i⁄
 =
RCC_CK48CLKSOURCE_PLLSAIP
)

370 
∂lßiu£d
 = 1;

376 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SDIO
) == RCC_PERIPHCLK_SDIO)

379 
	`as£π_∑øm
(
	`IS_RCC_SDIOCLKSOURCE
(
PîùhClkInô
->
SdioClockSñe˘i⁄
));

382 
	`__HAL_RCC_SDIO_CONFIG
(
PîùhClkInô
->
SdioClockSñe˘i⁄
);

387 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SPDIFRX
) == RCC_PERIPHCLK_SPDIFRX)

390 
	`as£π_∑øm
(
	`IS_RCC_SPDIFRXCLKSOURCE
(
PîùhClkInô
->
SpdifClockSñe˘i⁄
));

393 
	`__HAL_RCC_SPDIFRX_CONFIG
(
PîùhClkInô
->
SpdifClockSñe˘i⁄
);

395 if(
PîùhClkInô
->
SpdifClockSñe˘i⁄
 =
RCC_SPDIFRXCLKSOURCE_PLLI2SP
)

397 
∂li2su£d
 = 1;

405 if((
∂li2su£d
 =1Ë|| (
PîùhClkInô
->
PîùhClockSñe˘i⁄
 =
RCC_PERIPHCLK_PLLI2S
))

408 
	`__HAL_RCC_PLLI2S_DISABLE
();

410 
tick°¨t
 = 
	`HAL_GëTick
();

412 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

414 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

417  
HAL_TIMEOUT
;

422 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SM_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SM
));

423 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
));

426 if(((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S_APB1
Ë=RCC_PERIPHCLK_I2S_APB1Ë&& (PîùhClkInô->
I2sApb1ClockSñe˘i⁄
 =
RCC_I2SAPB1CLKSOURCE_PLLI2S
)) ||

427 ((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S_APB2
Ë=RCC_PERIPHCLK_I2S_APB2Ë&& (PîùhClkInô->
I2sApb2ClockSñe˘i⁄
 =
RCC_I2SAPB2CLKSOURCE_PLLI2S
)))

430 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SR
));

433 
∂li2•
 = ((((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SP
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SP)) + 1) << 1);

434 
∂li2sq
 = ((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SQ
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SQ));

438 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SM
, PîùhClkInô->PLLI2S.
PLLI2SN
 , 
∂li2•
, 
∂li2sq
, PîùhClkInô->PLLI2S.
PLLI2SR
);

442 if(((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI1
Ë=RCC_PERIPHCLK_SAI1Ë&& (PîùhClkInô->
Sai1ClockSñe˘i⁄
 =
RCC_SAI1CLKSOURCE_PLLI2S
)) ||

443 ((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI2
Ë=RCC_PERIPHCLK_SAI2Ë&& (PîùhClkInô->
Sai2ClockSñe˘i⁄
 =
RCC_SAI2CLKSOURCE_PLLI2S
)))

446 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SQ
));

448 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_DIVQ_VALUE
(
PîùhClkInô
->
PLLI2SDivQ
));

451 
∂li2•
 = ((((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SP
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SP)) + 1) << 1);

452 
∂li2§
 = ((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SR));

457 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SM
, PîùhClkInô->PLLI2S.
PLLI2SN
 , 
∂li2•
, PîùhClkInô->PLLI2S.
PLLI2SQ
, 
∂li2§
);

460 
	`__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG
(
PîùhClkInô
->
PLLI2SDivQ
);

464 if((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SPDIFRX
Ë=RCC_PERIPHCLK_SPDIFRXË&& (PîùhClkInô->
SpdifClockSñe˘i⁄
 =
RCC_SPDIFRXCLKSOURCE_PLLI2SP
))

467 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SP_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SP
));

469 
∂li2sq
 = ((((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SP
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SP)) + 1) << 1);

470 
∂li2§
 = ((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SR));

474 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SM
, PîùhClkInô->PLLI2S.
PLLI2SN
 , PîùhClkInô->PLLI2S.
PLLI2SP
, 
∂li2sq
, 
∂li2§
);

478 if((
PîùhClkInô
->
PîùhClockSñe˘i⁄
 & 
RCC_PERIPHCLK_PLLI2S
) == RCC_PERIPHCLK_PLLI2S)

481 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SP_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SP
));

482 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SR
));

483 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SQ
));

487 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SM
, PîùhClkInô->PLLI2S.
PLLI2SN
 , PîùhClkInô->PLLI2S.
PLLI2SP
, PîùhClkInô->PLLI2S.
PLLI2SQ
, PîùhClkInô->PLLI2S.
PLLI2SR
);

491 
	`__HAL_RCC_PLLI2S_ENABLE
();

493 
tick°¨t
 = 
	`HAL_GëTick
();

495 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

497 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

500  
HAL_TIMEOUT
;

508 if(
∂lßiu£d
 == 1)

511 
	`__HAL_RCC_PLLSAI_DISABLE
();

513 
tick°¨t
 = 
	`HAL_GëTick
();

515 
	`__HAL_RCC_PLLSAI_GET_FLAG
(Ë!
RESET
)

517 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLSAI_TIMEOUT_VALUE
)

520  
HAL_TIMEOUT
;

525 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIM_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIM
));

526 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIN
));

529 if(((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI1
Ë=RCC_PERIPHCLK_SAI1Ë&& (PîùhClkInô->
Sai1ClockSñe˘i⁄
 =
RCC_SAI1CLKSOURCE_PLLSAI
)) ||

530 ((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI2
Ë=RCC_PERIPHCLK_SAI2Ë&& (PîùhClkInô->
Sai2ClockSñe˘i⁄
 =
RCC_SAI2CLKSOURCE_PLLSAI
)))

533 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIQ_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIQ
));

535 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVQ_VALUE
(
PîùhClkInô
->
PLLSAIDivQ
));

538 
∂lßù
 = ((((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIP
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIP)) + 1) << 1);

542 
	`__HAL_RCC_PLLSAI_CONFIG
(
PîùhClkInô
->
PLLSAI
.
PLLSAIM
, PîùhClkInô->PLLSAI.
PLLSAIN
 , 
∂lßù
, PîùhClkInô->PLLSAI.
PLLSAIQ
, 0);

545 
	`__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG
(
PîùhClkInô
->
PLLSAIDivQ
);

550 if((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_CK48
Ë=RCC_PERIPHCLK_CK48Ë&& (PîùhClkInô->
Clk48ClockSñe˘i⁄
 =
RCC_CK48CLKSOURCE_PLLSAIP
))

553 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIP_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIP
));

555 
∂lßiq
 = ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIQ));

559 
	`__HAL_RCC_PLLSAI_CONFIG
(
PîùhClkInô
->
PLLSAI
.
PLLSAIM
, PîùhClkInô->PLLSAI.
PLLSAIN
 , PîùhClkInô->PLLSAI.
PLLSAIP
, 
∂lßiq
, 0);

563 
	`__HAL_RCC_PLLSAI_ENABLE
();

565 
tick°¨t
 = 
	`HAL_GëTick
();

567 
	`__HAL_RCC_PLLSAI_GET_FLAG
(Ë=
RESET
)

569 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLSAI_TIMEOUT_VALUE
)

572  
HAL_TIMEOUT
;

576  
HAL_OK
;

577 
	}
}

586 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

588 
uöt32_t
 
ãm¥eg
;

591 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_I2S_APB1
 | 
RCC_PERIPHCLK_I2S_APB2
 |\

592 
RCC_PERIPHCLK_SAI1
 | 
RCC_PERIPHCLK_SAI2
 |\

593 
RCC_PERIPHCLK_TIM
 | 
RCC_PERIPHCLK_RTC
 |\

594 
RCC_PERIPHCLK_CEC
 | 
RCC_PERIPHCLK_FMPI2C1
 |\

595 
RCC_PERIPHCLK_CK48
 | 
RCC_PERIPHCLK_SDIO
 |\

596 
RCC_PERIPHCLK_SPDIFRX
;

599 
PîùhClkInô
->
PLLI2S
.
PLLI2SM
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SM
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SM));

600 
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SN));

601 
PîùhClkInô
->
PLLI2S
.
PLLI2SP
 = (
uöt32_t
)((((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SP
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SP)) + 1) << 1);

602 
PîùhClkInô
->
PLLI2S
.
PLLI2SQ
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SQ
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SQ));

603 
PîùhClkInô
->
PLLI2S
.
PLLI2SR
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SR));

605 
PîùhClkInô
->
PLLSAI
.
PLLSAIM
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIM
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIM));

606 
PîùhClkInô
->
PLLSAI
.
PLLSAIN
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIN
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIN));

607 
PîùhClkInô
->
PLLSAI
.
PLLSAIP
 = (
uöt32_t
)((((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIP
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIP)) + 1) << 1);

608 
PîùhClkInô
->
PLLSAI
.
PLLSAIQ
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIQ));

610 
PîùhClkInô
->
PLLI2SDivQ
 = (
uöt32_t
)((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLI2SDIVQ
Ë>> 
	`POSITION_VAL
(RCC_DCKCFGR_PLLI2SDIVQ));

611 
PîùhClkInô
->
PLLSAIDivQ
 = (
uöt32_t
)((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLSAIDIVQ
Ë>> 
	`POSITION_VAL
(RCC_DCKCFGR_PLLSAIDIVQ));

614 
PîùhClkInô
->
Sai1ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_SAI1_SOURCE
();

617 
PîùhClkInô
->
Sai2ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_SAI2_SOURCE
();

620 
PîùhClkInô
->
I2sApb1ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S_APB1_SOURCE
();

623 
PîùhClkInô
->
I2sApb2ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S_APB2_SOURCE
();

626 
ãm¥eg
 = (
RCC
->
CFGR
 & 
RCC_CFGR_RTCPRE
);

627 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = (
uöt32_t
)((
ãm¥eg
Ë| (
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
));

630 
PîùhClkInô
->
CecClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_CEC_SOURCE
();

633 
PîùhClkInô
->
Fmpi2c1ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_FMPI2C1_SOURCE
();

636 
PîùhClkInô
->
Clk48ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_CLK48_SOURCE
();

639 
PîùhClkInô
->
SdioClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_SDIO_SOURCE
();

642 
PîùhClkInô
->
SpdifClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_SPDIFRX_SOURCE
();

645 i‡((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_TIMPRE
Ë=
RESET
)

647 
PîùhClkInô
->
TIMPªsSñe˘i⁄
 = 
RCC_TIMPRES_DESACTIVATED
;

651 
PîùhClkInô
->
TIMPªsSñe˘i⁄
 = 
RCC_TIMPRES_ACTIVATED
;

653 
	}
}

664 
uöt32_t
 
	$HAL_RCCEx_GëPîùhCLKFªq
(
uöt32_t
 
PîùhClk
)

666 
uöt32_t
 
tm¥eg1
 = 0;

668 
uöt32_t
 
‰equícy
 = 0;

670 
uöt32_t
 
vcoöput
 = 0;

672 
uöt32_t
 
ßi˛ocksour˚
 = 0;

673 i‡((
PîùhClk
 =
RCC_PERIPHCLK_SAI1
Ë|| (PîùhClk =
RCC_PERIPHCLK_SAI2
))

675 
ßi˛ocksour˚
 = 
RCC
->
DCKCFGR
;

676 
ßi˛ocksour˚
 &(
RCC_DCKCFGR_SAI1SRC
 | 
RCC_DCKCFGR_SAI2SRC
);

677 
ßi˛ocksour˚
)

683 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSI
)

686 
vcoöput
 = (
HSI_VALUE
 / (
uöt32_t
)(
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIM
));

691 
vcoöput
 = ((
HSE_VALUE
 / (
uöt32_t
)(
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIM
)));

695 
tm¥eg1
 = (
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
) >> 24;

696 
‰equícy
 = (
vcoöput
 * ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIN
Ë>> 6))/(
tm¥eg1
);

699 
tm¥eg1
 = (((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLSAIDIVQ
) >> 8) + 1);

700 
‰equícy
 = fªquícy/(
tm¥eg1
);

703 
RCC_DCKCFGR_SAI1SRC_0
:

704 
RCC_DCKCFGR_SAI2SRC_0
:

708 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSI
)

711 
vcoöput
 = (
HSI_VALUE
 / (
uöt32_t
)(
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SM
));

716 
vcoöput
 = ((
HSE_VALUE
 / (
uöt32_t
)(
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SM
)));

721 
tm¥eg1
 = (
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SQ
) >> 24;

722 
‰equícy
 = (
vcoöput
 * ((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
Ë>> 6))/(
tm¥eg1
);

725 
tm¥eg1
 = ((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLI2SDIVQ
) + 1);

726 
‰equícy
 = fªquícy/(
tm¥eg1
);

729 
RCC_DCKCFGR_SAI1SRC_1
:

730 
RCC_DCKCFGR_SAI2SRC_1
:

734 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSI
)

737 
vcoöput
 = (
HSI_VALUE
 / (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
));

742 
vcoöput
 = ((
HSE_VALUE
 / (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
)));

747 
tm¥eg1
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLR
) >> 28;

748 
‰equícy
 = (
vcoöput
 * ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 6))/(
tm¥eg1
);

751 
RCC_DCKCFGR_SAI1SRC
:

753 
‰equícy
 = 
EXTERNAL_CLOCK_VALUE
;

756 
RCC_DCKCFGR_SAI2SRC
:

758 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSI
)

761 
‰equícy
 = (
uöt32_t
)(
HSI_VALUE
);

766 
‰equícy
 = (
uöt32_t
)(
HSE_VALUE
);

776  
‰equícy
;

777 
	}
}

781 #i‡
deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

796 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

798 
uöt32_t
 
tick°¨t
 = 0;

799 
uöt32_t
 
tm¥eg1
 = 0;

800 
uöt32_t
 
∂lßù
 = 0;

801 
uöt32_t
 
∂lßiq
 = 0;

802 
uöt32_t
 
∂lßú
 = 0;

805 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

808 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_CK48
) == RCC_PERIPHCLK_CK48)

811 
	`as£π_∑øm
(
	`IS_RCC_CK48CLKSOURCE
(
PîùhClkInô
->
Clk48ClockSñe˘i⁄
));

814 
	`__HAL_RCC_CLK48_CONFIG
(
PîùhClkInô
->
Clk48ClockSñe˘i⁄
);

819 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SDIO
) == RCC_PERIPHCLK_SDIO)

822 
	`as£π_∑øm
(
	`IS_RCC_SDIOCLKSOURCE
(
PîùhClkInô
->
SdioClockSñe˘i⁄
));

825 
	`__HAL_RCC_SDIO_CONFIG
(
PîùhClkInô
->
SdioClockSñe˘i⁄
);

833 if((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S
) == RCC_PERIPHCLK_I2S) ||

834 (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI_PLLI2S
) == RCC_PERIPHCLK_SAI_PLLI2S) ||

835 (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_PLLI2S
) == RCC_PERIPHCLK_PLLI2S))

838 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
));

841 
	`__HAL_RCC_PLLI2S_DISABLE
();

843 
tick°¨t
 = 
	`HAL_GëTick
();

845 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

847 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

850  
HAL_TIMEOUT
;

857 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S
) == (RCC_PERIPHCLK_I2S))

860 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SR
));

864 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 , PîùhClkInô->PLLI2S.
PLLI2SR
);

870 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI_PLLI2S
) == (RCC_PERIPHCLK_SAI_PLLI2S))

873 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SQ
));

874 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_DIVQ_VALUE
(
PîùhClkInô
->
PLLI2SDivQ
));

877 
tm¥eg1
 = ((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SR));

882 
	`__HAL_RCC_PLLI2S_SAICLK_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 , PîùhClkInô->PLLI2S.
PLLI2SQ
 , 
tm¥eg1
);

884 
	`__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG
(
PîùhClkInô
->
PLLI2SDivQ
);

888 if((
PîùhClkInô
->
PîùhClockSñe˘i⁄
 & 
RCC_PERIPHCLK_PLLI2S
) == RCC_PERIPHCLK_PLLI2S)

891 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SQ
));

892 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SR
));

895 
	`__HAL_RCC_PLLI2S_SAICLK_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
, PîùhClkInô->PLLI2S.
PLLI2SQ
, PîùhClkInô->PLLI2S.
PLLI2SR
);

899 
	`__HAL_RCC_PLLI2S_ENABLE
();

901 
tick°¨t
 = 
	`HAL_GëTick
();

903 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

905 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

908  
HAL_TIMEOUT
;

918 if((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI_PLLSAI
) == RCC_PERIPHCLK_SAI_PLLSAI) ||

919 (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LTDC
) == RCC_PERIPHCLK_LTDC) ||

920 ((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_CK48
) == RCC_PERIPHCLK_CK48) &&

921 (
PîùhClkInô
->
Clk48ClockSñe˘i⁄
 =
RCC_CK48CLKSOURCE_PLLSAIP
)))

924 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIN
));

927 
	`__HAL_RCC_PLLSAI_DISABLE
();

929 
tick°¨t
 = 
	`HAL_GëTick
();

931 
	`__HAL_RCC_PLLSAI_GET_FLAG
(Ë!
RESET
)

933 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLSAI_TIMEOUT_VALUE
)

936  
HAL_TIMEOUT
;

943 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI_PLLSAI
) == (RCC_PERIPHCLK_SAI_PLLSAI))

945 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIQ_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIQ
));

946 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVQ_VALUE
(
PîùhClkInô
->
PLLSAIDivQ
));

949 
∂lßù
 = ((((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIP
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIP)) + 1) << 1);

951 
∂lßú
 = ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIR
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIR));

955 
	`__HAL_RCC_PLLSAI_CONFIG
(
PîùhClkInô
->
PLLSAI
.
PLLSAIN
, 
∂lßù
, PîùhClkInô->PLLSAI.
PLLSAIQ
, 
∂lßú
);

957 
	`__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG
(
PîùhClkInô
->
PLLSAIDivQ
);

961 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LTDC
) == (RCC_PERIPHCLK_LTDC))

963 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIR_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIR
));

964 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVR_VALUE
(
PîùhClkInô
->
PLLSAIDivR
));

967 
∂lßù
 = ((((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIP
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIP)) + 1) << 1);

969 
∂lßiq
 = ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIQ));

973 
	`__HAL_RCC_PLLSAI_CONFIG
(
PîùhClkInô
->
PLLSAI
.
PLLSAIN
, 
∂lßù
, 
∂lßiq
, PîùhClkInô->PLLSAI.
PLLSAIR
);

975 
	`__HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG
(
PîùhClkInô
->
PLLSAIDivR
);

980 if((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_CK48
) == (RCC_PERIPHCLK_CK48)) &&

981 (
PîùhClkInô
->
Clk48ClockSñe˘i⁄
 =
RCC_CK48CLKSOURCE_PLLSAIP
))

983 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIP_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIP
));

986 
∂lßiq
 = ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIQ));

988 
∂lßú
 = ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIR
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIR));

992 
	`__HAL_RCC_PLLSAI_CONFIG
(
PîùhClkInô
->
PLLSAI
.
PLLSAIN
, PîùhClkInô->PLLSAI.
PLLSAIP
, 
∂lßiq
, 
∂lßú
);

996 
	`__HAL_RCC_PLLSAI_ENABLE
();

998 
tick°¨t
 = 
	`HAL_GëTick
();

1000 
	`__HAL_RCC_PLLSAI_GET_FLAG
(Ë=
RESET
)

1002 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLSAI_TIMEOUT_VALUE
)

1005  
HAL_TIMEOUT
;

1013 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == (RCC_PERIPHCLK_RTC))

1016 
	`__HAL_RCC_PWR_CLK_ENABLE
();

1019 
PWR
->
CR
 |
PWR_CR_DBP
;

1022 
tick°¨t
 = 
	`HAL_GëTick
();

1024 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

1026 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_DBP_TIMEOUT_VALUE
)

1028  
HAL_TIMEOUT
;

1032 if((
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
Ë!(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & RCC_BDCR_RTCSEL))

1035 
tm¥eg1
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

1037 
	`__HAL_RCC_BACKUPRESET_FORCE
();

1038 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

1040 
RCC
->
BDCR
 = 
tm¥eg1
;

1043 if(
	`HAL_IS_BIT_SET
(
tm¥eg1
, 
RCC_BDCR_LSERDY
))

1046 
tick°¨t
 = 
	`HAL_GëTick
();

1049 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

1051 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

1053  
HAL_TIMEOUT
;

1057 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

1063 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_TIM
) == (RCC_PERIPHCLK_TIM))

1065 
	`__HAL_RCC_TIMCLKPRESCALER
(
PîùhClkInô
->
TIMPªsSñe˘i⁄
);

1067  
HAL_OK
;

1068 
	}
}

1077 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

1079 
uöt32_t
 
ãm¥eg
;

1082 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_I2S
 | 
RCC_PERIPHCLK_SAI_PLLSAI
 |\

1083 
RCC_PERIPHCLK_SAI_PLLI2S
 | 
RCC_PERIPHCLK_LTDC
 |\

1084 
RCC_PERIPHCLK_TIM
 | 
RCC_PERIPHCLK_RTC
 |\

1085 
RCC_PERIPHCLK_CK48
 | 
RCC_PERIPHCLK_SDIO
;

1088 
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SN));

1089 
PîùhClkInô
->
PLLI2S
.
PLLI2SR
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SR));

1090 
PîùhClkInô
->
PLLI2S
.
PLLI2SQ
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SQ
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SQ));

1092 
PîùhClkInô
->
PLLSAI
.
PLLSAIN
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIN
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIN));

1093 
PîùhClkInô
->
PLLSAI
.
PLLSAIR
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIR
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIR));

1094 
PîùhClkInô
->
PLLSAI
.
PLLSAIQ
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIQ));

1096 
PîùhClkInô
->
PLLI2SDivQ
 = (
uöt32_t
)((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLI2SDIVQ
Ë>> 
	`POSITION_VAL
(RCC_DCKCFGR_PLLI2SDIVQ));

1097 
PîùhClkInô
->
PLLSAIDivQ
 = (
uöt32_t
)((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLSAIDIVQ
Ë>> 
	`POSITION_VAL
(RCC_DCKCFGR_PLLSAIDIVQ));

1098 
PîùhClkInô
->
PLLSAIDivR
 = (
uöt32_t
)(
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLSAIDIVR
);

1100 
ãm¥eg
 = (
RCC
->
CFGR
 & 
RCC_CFGR_RTCPRE
);

1101 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = (
uöt32_t
)((
ãm¥eg
Ë| (
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
));

1104 
PîùhClkInô
->
Clk48ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_CLK48_SOURCE
();

1107 
PîùhClkInô
->
SdioClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_SDIO_SOURCE
();

1109 i‡((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_TIMPRE
Ë=
RESET
)

1111 
PîùhClkInô
->
TIMPªsSñe˘i⁄
 = 
RCC_TIMPRES_DESACTIVATED
;

1115 
PîùhClkInô
->
TIMPªsSñe˘i⁄
 = 
RCC_TIMPRES_ACTIVATED
;

1117 
	}
}

1120 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
)

1133 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

1135 
uöt32_t
 
tick°¨t
 = 0;

1136 
uöt32_t
 
tm¥eg1
 = 0;

1139 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

1142 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == (RCC_PERIPHCLK_RTC))

1145 
	`__HAL_RCC_PWR_CLK_ENABLE
();

1148 
PWR
->
CR
 |
PWR_CR_DBP
;

1151 
tick°¨t
 = 
	`HAL_GëTick
();

1153 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

1155 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_DBP_TIMEOUT_VALUE
)

1157  
HAL_TIMEOUT
;

1161 if((
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
Ë!(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & RCC_BDCR_RTCSEL))

1164 
tm¥eg1
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

1166 
	`__HAL_RCC_BACKUPRESET_FORCE
();

1167 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

1169 
RCC
->
BDCR
 = 
tm¥eg1
;

1172 if(
	`HAL_IS_BIT_SET
(
tm¥eg1
, 
RCC_BDCR_LSERDY
))

1175 
tick°¨t
 = 
	`HAL_GëTick
();

1178 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

1180 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

1182  
HAL_TIMEOUT
;

1186 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

1192 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_TIM
) == (RCC_PERIPHCLK_TIM))

1194 
	`__HAL_RCC_TIMCLKPRESCALER
(
PîùhClkInô
->
TIMPªsSñe˘i⁄
);

1199 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_FMPI2C1
) == RCC_PERIPHCLK_FMPI2C1)

1202 
	`as£π_∑øm
(
	`IS_RCC_FMPI2C1CLKSOURCE
(
PîùhClkInô
->
Fmpi2c1ClockSñe˘i⁄
));

1205 
	`__HAL_RCC_FMPI2C1_CONFIG
(
PîùhClkInô
->
Fmpi2c1ClockSñe˘i⁄
);

1210 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LPTIM1
) == RCC_PERIPHCLK_LPTIM1)

1213 
	`as£π_∑øm
(
	`IS_RCC_LPTIM1CLKSOURCE
(
PîùhClkInô
->
L±im1ClockSñe˘i⁄
));

1216 
	`__HAL_RCC_LPTIM1_CONFIG
(
PîùhClkInô
->
L±im1ClockSñe˘i⁄
);

1220 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S
) == RCC_PERIPHCLK_I2S)

1223 
	`as£π_∑øm
(
	`IS_RCC_I2SAPBCLKSOURCE
(
PîùhClkInô
->
I2SClockSñe˘i⁄
));

1226 
	`__HAL_RCC_I2S_CONFIG
(
PîùhClkInô
->
I2SClockSñe˘i⁄
);

1229  
HAL_OK
;

1230 
	}
}

1239 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

1241 
uöt32_t
 
ãm¥eg
;

1244 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_FMPI2C1
 | 
RCC_PERIPHCLK_LPTIM1
 | 
RCC_PERIPHCLK_TIM
 | 
RCC_PERIPHCLK_RTC
;

1246 
ãm¥eg
 = (
RCC
->
CFGR
 & 
RCC_CFGR_RTCPRE
);

1247 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = (
uöt32_t
)((
ãm¥eg
Ë| (
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
));

1249 i‡((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_TIMPRE
Ë=
RESET
)

1251 
PîùhClkInô
->
TIMPªsSñe˘i⁄
 = 
RCC_TIMPRES_DESACTIVATED
;

1255 
PîùhClkInô
->
TIMPªsSñe˘i⁄
 = 
RCC_TIMPRES_ACTIVATED
;

1258 
PîùhClkInô
->
Fmpi2c1ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_FMPI2C1_SOURCE
();

1261 
PîùhClkInô
->
I2SClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S_SOURCE
();

1264 
	}
}

1267 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

1282 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

1284 
uöt32_t
 
tick°¨t
 = 0;

1285 
uöt32_t
 
tm¥eg1
 = 0;

1288 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

1294 if((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S
) == RCC_PERIPHCLK_I2S) ||

1295 (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI_PLLI2S
) == RCC_PERIPHCLK_SAI_PLLI2S))

1298 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
));

1301 
	`__HAL_RCC_PLLI2S_DISABLE
();

1303 
tick°¨t
 = 
	`HAL_GëTick
();

1305 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

1307 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

1310  
HAL_TIMEOUT
;

1317 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S
) == (RCC_PERIPHCLK_I2S))

1320 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SR
));

1324 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 , PîùhClkInô->PLLI2S.
PLLI2SR
);

1330 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI_PLLI2S
) == (RCC_PERIPHCLK_SAI_PLLI2S))

1333 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SQ_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SQ
));

1334 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_DIVQ_VALUE
(
PîùhClkInô
->
PLLI2SDivQ
));

1337 
tm¥eg1
 = ((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SR));

1342 
	`__HAL_RCC_PLLI2S_SAICLK_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 , PîùhClkInô->PLLI2S.
PLLI2SQ
 , 
tm¥eg1
);

1344 
	`__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG
(
PîùhClkInô
->
PLLI2SDivQ
);

1348 
	`__HAL_RCC_PLLI2S_ENABLE
();

1350 
tick°¨t
 = 
	`HAL_GëTick
();

1352 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

1354 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

1357  
HAL_TIMEOUT
;

1367 if((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI_PLLSAI
) == RCC_PERIPHCLK_SAI_PLLSAI) ||

1368 (((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LTDC
) == RCC_PERIPHCLK_LTDC))

1371 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIN_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIN
));

1374 
	`__HAL_RCC_PLLSAI_DISABLE
();

1376 
tick°¨t
 = 
	`HAL_GëTick
();

1378 
	`__HAL_RCC_PLLSAI_GET_FLAG
(Ë!
RESET
)

1380 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLSAI_TIMEOUT_VALUE
)

1383  
HAL_TIMEOUT
;

1390 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_SAI_PLLSAI
) == (RCC_PERIPHCLK_SAI_PLLSAI))

1392 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIQ_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIQ
));

1393 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVQ_VALUE
(
PîùhClkInô
->
PLLSAIDivQ
));

1396 
tm¥eg1
 = ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIR
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIR));

1400 
	`__HAL_RCC_PLLSAI_CONFIG
(
PîùhClkInô
->
PLLSAI
.
PLLSAIN
 , PîùhClkInô->PLLSAI.
PLLSAIQ
, 
tm¥eg1
);

1402 
	`__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG
(
PîùhClkInô
->
PLLSAIDivQ
);

1406 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_LTDC
) == (RCC_PERIPHCLK_LTDC))

1408 
	`as£π_∑øm
(
	`IS_RCC_PLLSAIR_VALUE
(
PîùhClkInô
->
PLLSAI
.
PLLSAIR
));

1409 
	`as£π_∑øm
(
	`IS_RCC_PLLSAI_DIVR_VALUE
(
PîùhClkInô
->
PLLSAIDivR
));

1412 
tm¥eg1
 = ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIQ));

1416 
	`__HAL_RCC_PLLSAI_CONFIG
(
PîùhClkInô
->
PLLSAI
.
PLLSAIN
 , 
tm¥eg1
, PîùhClkInô->PLLSAI.
PLLSAIR
);

1418 
	`__HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG
(
PîùhClkInô
->
PLLSAIDivR
);

1421 
	`__HAL_RCC_PLLSAI_ENABLE
();

1423 
tick°¨t
 = 
	`HAL_GëTick
();

1425 
	`__HAL_RCC_PLLSAI_GET_FLAG
(Ë=
RESET
)

1427 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLSAI_TIMEOUT_VALUE
)

1430  
HAL_TIMEOUT
;

1437 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == (RCC_PERIPHCLK_RTC))

1440 
	`__HAL_RCC_PWR_CLK_ENABLE
();

1443 
PWR
->
CR
 |
PWR_CR_DBP
;

1446 
tick°¨t
 = 
	`HAL_GëTick
();

1448 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

1450 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_DBP_TIMEOUT_VALUE
)

1452  
HAL_TIMEOUT
;

1457 if((
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
Ë!(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & RCC_BDCR_RTCSEL))

1460 
tm¥eg1
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

1462 
	`__HAL_RCC_BACKUPRESET_FORCE
();

1463 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

1465 
RCC
->
BDCR
 = 
tm¥eg1
;

1468 if(
	`HAL_IS_BIT_SET
(
tm¥eg1
, 
RCC_BDCR_LSERDY
))

1471 
tick°¨t
 = 
	`HAL_GëTick
();

1474 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

1476 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

1478  
HAL_TIMEOUT
;

1482 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

1488 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_TIM
) == (RCC_PERIPHCLK_TIM))

1490 
	`__HAL_RCC_TIMCLKPRESCALER
(
PîùhClkInô
->
TIMPªsSñe˘i⁄
);

1492  
HAL_OK
;

1493 
	}
}

1502 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

1504 
uöt32_t
 
ãm¥eg
;

1507 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_I2S
 | 
RCC_PERIPHCLK_SAI_PLLSAI
 | 
RCC_PERIPHCLK_SAI_PLLI2S
 | 
RCC_PERIPHCLK_LTDC
 | 
RCC_PERIPHCLK_TIM
 | 
RCC_PERIPHCLK_RTC
;

1510 
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SN));

1511 
PîùhClkInô
->
PLLI2S
.
PLLI2SR
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SR));

1512 
PîùhClkInô
->
PLLI2S
.
PLLI2SQ
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SQ
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SQ));

1514 
PîùhClkInô
->
PLLSAI
.
PLLSAIN
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIN
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIN));

1515 
PîùhClkInô
->
PLLSAI
.
PLLSAIR
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIR
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIR));

1516 
PîùhClkInô
->
PLLSAI
.
PLLSAIQ
 = (
uöt32_t
)((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
Ë>> 
	`POSITION_VAL
(RCC_PLLSAICFGR_PLLSAIQ));

1518 
PîùhClkInô
->
PLLI2SDivQ
 = (
uöt32_t
)((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLI2SDIVQ
Ë>> 
	`POSITION_VAL
(RCC_DCKCFGR_PLLI2SDIVQ));

1519 
PîùhClkInô
->
PLLSAIDivQ
 = (
uöt32_t
)((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLSAIDIVQ
Ë>> 
	`POSITION_VAL
(RCC_DCKCFGR_PLLSAIDIVQ));

1520 
PîùhClkInô
->
PLLSAIDivR
 = (
uöt32_t
)(
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLSAIDIVR
);

1522 
ãm¥eg
 = (
RCC
->
CFGR
 & 
RCC_CFGR_RTCPRE
);

1523 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = (
uöt32_t
)((
ãm¥eg
Ë| (
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
));

1525 i‡((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_TIMPRE
Ë=
RESET
)

1527 
PîùhClkInô
->
TIMPªsSñe˘i⁄
 = 
RCC_TIMPRES_DESACTIVATED
;

1531 
PîùhClkInô
->
TIMPªsSñe˘i⁄
 = 
RCC_TIMPRES_ACTIVATED
;

1533 
	}
}

1537 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
)|| deföed(
STM32F417xx
) ||\

1538 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| 
	$deföed
(
STM32F411xE
)

1551 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

1553 
uöt32_t
 
tick°¨t
 = 0;

1554 
uöt32_t
 
tm¥eg1
 = 0;

1557 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

1560 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S
) == (RCC_PERIPHCLK_I2S))

1563 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SR
));

1564 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
));

1565 #i‡
	`deföed
(
STM32F411xE
)

1566 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SM_VALUE
(
PîùhClkInô
->
PLLI2S
.
PLLI2SM
));

1569 
	`__HAL_RCC_PLLI2S_DISABLE
();

1571 
tick°¨t
 = 
	`HAL_GëTick
();

1573 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

1575 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

1578  
HAL_TIMEOUT
;

1582 #i‡
	`deföed
(
STM32F411xE
)

1586 
	`__HAL_RCC_PLLI2S_I2SCLK_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SM
, PîùhClkInô->PLLI2S.
PLLI2SN
, PîùhClkInô->PLLI2S.
PLLI2SR
);

1591 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 , PîùhClkInô->PLLI2S.
PLLI2SR
);

1595 
	`__HAL_RCC_PLLI2S_ENABLE
();

1597 
tick°¨t
 = 
	`HAL_GëTick
();

1599 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

1601 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLLI2S_TIMEOUT_VALUE
)

1604  
HAL_TIMEOUT
;

1610 if(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == (RCC_PERIPHCLK_RTC))

1613 
	`__HAL_RCC_PWR_CLK_ENABLE
();

1616 
PWR
->
CR
 |
PWR_CR_DBP
;

1619 
tick°¨t
 = 
	`HAL_GëTick
();

1621 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

1623 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_DBP_TIMEOUT_VALUE
)

1625  
HAL_TIMEOUT
;

1630 if((
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
Ë!(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & RCC_BDCR_RTCSEL))

1633 
tm¥eg1
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

1635 
	`__HAL_RCC_BACKUPRESET_FORCE
();

1636 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

1638 
RCC
->
BDCR
 = 
tm¥eg1
;

1641 if(
	`HAL_IS_BIT_SET
(
tm¥eg1
, 
RCC_BDCR_LSERDY
))

1644 
tick°¨t
 = 
	`HAL_GëTick
();

1647 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

1649 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

1651  
HAL_TIMEOUT
;

1655 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

1659  
HAL_OK
;

1660 
	}
}

1669 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

1671 
uöt32_t
 
ãm¥eg
;

1674 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_I2S
 | 
RCC_PERIPHCLK_RTC
;

1677 
PîùhClkInô
->
PLLI2S
.
PLLI2SN
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SN));

1678 
PîùhClkInô
->
PLLI2S
.
PLLI2SR
 = (
uöt32_t
)((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
Ë>> 
	`POSITION_VAL
(RCC_PLLI2SCFGR_PLLI2SR));

1679 #i‡
	`deföed
(
STM32F411xE
)

1680 
PîùhClkInô
->
PLLI2S
.
PLLI2SM
 = (
uöt32_t
)(
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SM
);

1683 
ãm¥eg
 = (
RCC
->
CFGR
 & 
RCC_CFGR_RTCPRE
);

1684 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = (
uöt32_t
)((
ãm¥eg
Ë| (
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
));

1686 
	}
}

1689 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1700 
HAL_SètusTy≥Def
 
	$HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

1702 
uöt32_t
 
tick°¨t
 = 0;

1705 
	`as£π_∑øm
(
	`IS_RCC_OSCILLATORTYPE
(
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
));

1707 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE)

1710 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_OscInôSåu˘
->
HSESèã
));

1712 #i‡
	`deföed
(
STM32F446xx
)

1713 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_HSE
) ||\

1714 ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_PLL
Ë&& ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSE
)) ||\

1715 ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_PLLR
Ë&& ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSE
)))

1717 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_HSE
) ||\

1718 ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_PLL
Ë&& ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSE
)))

1721 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSESèã
 =
RCC_HSE_OFF
))

1723  
HAL_ERROR
;

1729 
	`__HAL_RCC_HSE_CONFIG
(
RCC_HSE_OFF
);

1732 
tick°¨t
 = 
	`HAL_GëTick
();

1735 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

1737 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

1739  
HAL_TIMEOUT
;

1744 
	`__HAL_RCC_HSE_CONFIG
(
RCC_OscInôSåu˘
->
HSESèã
);

1747 if((
RCC_OscInôSåu˘
->
HSESèã
Ë!
RCC_HSE_OFF
)

1750 
tick°¨t
 = 
	`HAL_GëTick
();

1753 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

1755 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

1757  
HAL_TIMEOUT
;

1764 
tick°¨t
 = 
	`HAL_GëTick
();

1767 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

1769 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSE_TIMEOUT_VALUE
)

1771  
HAL_TIMEOUT
;

1778 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI)

1781 
	`as£π_∑øm
(
	`IS_RCC_HSI
(
RCC_OscInôSåu˘
->
HSISèã
));

1782 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
));

1785 #i‡
	`deföed
(
STM32F446xx
)

1786 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_HSI
) ||\

1787 ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_PLL
Ë&& ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSI
)) ||\

1788 ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_PLLR
Ë&& ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSI
)))

1790 if((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_HSI
) ||\

1791 ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_CFGR_SWS_PLL
Ë&& ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLCFGR_PLLSRC_HSI
)))

1795 if((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_ON
))

1797  
HAL_ERROR
;

1803 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

1809 if((
RCC_OscInôSåu˘
->
HSISèã
)!
RCC_HSI_OFF
)

1812 
	`__HAL_RCC_HSI_ENABLE
();

1815 
tick°¨t
 = 
	`HAL_GëTick
();

1818 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

1820 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

1822  
HAL_TIMEOUT
;

1827 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

1832 
	`__HAL_RCC_HSI_DISABLE
();

1835 
tick°¨t
 = 
	`HAL_GëTick
();

1838 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
)

1840 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
HSI_TIMEOUT_VALUE
)

1842  
HAL_TIMEOUT
;

1849 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI)

1852 
	`as£π_∑øm
(
	`IS_RCC_LSI
(
RCC_OscInôSåu˘
->
LSISèã
));

1855 if((
RCC_OscInôSåu˘
->
LSISèã
)!
RCC_LSI_OFF
)

1858 
	`__HAL_RCC_LSI_ENABLE
();

1861 
tick°¨t
 = 
	`HAL_GëTick
();

1864 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë=
RESET
)

1866 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

1868  
HAL_TIMEOUT
;

1875 
	`__HAL_RCC_LSI_DISABLE
();

1878 
tick°¨t
 = 
	`HAL_GëTick
();

1881 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë!
RESET
)

1883 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
LSI_TIMEOUT_VALUE
)

1885  
HAL_TIMEOUT
;

1891 if(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE)

1894 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_OscInôSåu˘
->
LSESèã
));

1897 
	`__HAL_RCC_PWR_CLK_ENABLE
();

1900 
PWR
->
CR
 |
PWR_CR_DBP
;

1903 
tick°¨t
 = 
	`HAL_GëTick
();

1905 (
PWR
->
CR
 & 
PWR_CR_DBP
Ë=
RESET
)

1907 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_DBP_TIMEOUT_VALUE
)

1909  
HAL_TIMEOUT
;

1914 
	`__HAL_RCC_LSE_CONFIG
(
RCC_LSE_OFF
);

1917 
tick°¨t
 = 
	`HAL_GëTick
();

1920 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

1922 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

1924  
HAL_TIMEOUT
;

1929 
	`__HAL_RCC_LSE_CONFIG
(
RCC_OscInôSåu˘
->
LSESèã
);

1931 if((
RCC_OscInôSåu˘
->
LSESèã
Ë!
RCC_LSE_OFF
)

1934 
tick°¨t
 = 
	`HAL_GëTick
();

1937 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

1939 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

1941  
HAL_TIMEOUT
;

1948 
tick°¨t
 = 
	`HAL_GëTick
();

1951 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

1953 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RCC_LSE_TIMEOUT_VALUE
)

1955  
HAL_TIMEOUT
;

1962 
	`as£π_∑øm
(
	`IS_RCC_PLL
(
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
));

1963 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë!
RCC_PLL_NONE
)

1966 if(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_CFGR_SWS_PLL
)

1968 if((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_ON
)

1971 
	`as£π_∑øm
(
	`IS_RCC_PLLSOURCE
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
));

1972 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLM
));

1973 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLN
));

1974 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLP
));

1975 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLQ
));

1976 
	`as£π_∑øm
(
	`IS_RCC_PLLR_VALUE
(
RCC_OscInôSåu˘
->
PLL
.
PLLR
));

1979 
	`__HAL_RCC_PLL_DISABLE
();

1982 
tick°¨t
 = 
	`HAL_GëTick
();

1985 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

1987 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

1989  
HAL_TIMEOUT
;

1994 
	`__HAL_RCC_PLL_CONFIG
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
,

1995 
RCC_OscInôSåu˘
->
PLL
.
PLLM
,

1996 
RCC_OscInôSåu˘
->
PLL
.
PLLN
,

1997 
RCC_OscInôSåu˘
->
PLL
.
PLLP
,

1998 
RCC_OscInôSåu˘
->
PLL
.
PLLQ
,

1999 
RCC_OscInôSåu˘
->
PLL
.
PLLR
);

2002 
	`__HAL_RCC_PLL_ENABLE
();

2005 
tick°¨t
 = 
	`HAL_GëTick
();

2008 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

2010 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

2012  
HAL_TIMEOUT
;

2019 
	`__HAL_RCC_PLL_DISABLE
();

2022 
tick°¨t
 = 
	`HAL_GëTick
();

2025 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

2027 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
PLL_TIMEOUT_VALUE
)

2029  
HAL_TIMEOUT
;

2036  
HAL_ERROR
;

2039  
HAL_OK
;

2040 
	}
}

2051 
	$HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

2054 
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_HSI
 | 
RCC_OSCILLATORTYPE_LSE
 | 
RCC_OSCILLATORTYPE_LSI
;

2057 if((
RCC
->
CR
 &
RCC_CR_HSEBYP
) == RCC_CR_HSEBYP)

2059 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_BYPASS
;

2061 if((
RCC
->
CR
 &
RCC_CR_HSEON
) == RCC_CR_HSEON)

2063 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_ON
;

2067 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_OFF
;

2071 if((
RCC
->
CR
 &
RCC_CR_HSION
) == RCC_CR_HSION)

2073 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_ON
;

2077 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_OFF
;

2080 
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
CR
 &
RCC_CR_HSITRIM
Ë>> 
	`POSITION_VAL
(RCC_CR_HSITRIM));

2083 if((
RCC
->
BDCR
 &
RCC_BDCR_LSEBYP
) == RCC_BDCR_LSEBYP)

2085 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_BYPASS
;

2087 if((
RCC
->
BDCR
 &
RCC_BDCR_LSEON
) == RCC_BDCR_LSEON)

2089 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_ON
;

2093 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_OFF
;

2097 if((
RCC
->
CSR
 &
RCC_CSR_LSION
) == RCC_CSR_LSION)

2099 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_ON
;

2103 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_OFF
;

2107 if((
RCC
->
CR
 &
RCC_CR_PLLON
) == RCC_CR_PLLON)

2109 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

2113 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_OFF
;

2115 
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
);

2116 
RCC_OscInôSåu˘
->
PLL
.
PLLM
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
);

2117 
RCC_OscInôSåu˘
->
PLL
.
PLLN
 = (
uöt32_t
)((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLN));

2118 
RCC_OscInôSåu˘
->
PLL
.
PLLP
 = (
uöt32_t
)((((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
Ë+ 
RCC_PLLCFGR_PLLP_0
Ë<< 1Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLP));

2119 
RCC_OscInôSåu˘
->
PLL
.
PLLQ
 = (
uöt32_t
)((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLQ
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLQ));

2120 
RCC_OscInôSåu˘
->
PLL
.
PLLR
 = (
uöt32_t
)((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLR
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLR));

2121 
	}
}

2124 #i‡
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

2136 
	$HAL_RCCEx_Sñe˘LSEMode
(
uöt8_t
 
Mode
)

2139 
	`as£π_∑øm
(
	`IS_RCC_LSE_MODE
(
Mode
));

2140 if(
Mode
 =
RCC_LSE_HIGHDRIVE_MODE
)

2142 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2146 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEMOD
);

2148 
	}
}

2152 #i‡
deföed
(
STM32F446xx
)

2186 
uöt32_t
 
	$HAL_RCC_GëSysClockFªq
()

2188 
uöt32_t
 
∂lm
 = 0;

2189 
uöt32_t
 
∂lvco
 = 0;

2190 
uöt32_t
 
∂Õ
 = 0;

2191 
uöt32_t
 
∂Ã
 = 0;

2192 
uöt32_t
 
sys˛ock‰eq
 = 0;

2195 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
)

2197 
RCC_CFGR_SWS_HSI
:

2199 
sys˛ock‰eq
 = 
HSI_VALUE
;

2202 
RCC_CFGR_SWS_HSE
:

2204 
sys˛ock‰eq
 = 
HSE_VALUE
;

2207 
RCC_CFGR_SWS_PLL
:

2211 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

2212 if(
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë!
RCC_PLLSOURCE_HSI
)

2215 
∂lvco
 = ((
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLN)));

2220 
∂lvco
 = ((
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLN)));

2222 
∂Õ
 = ((((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLP)) + 1 ) *2);

2224 
sys˛ock‰eq
 = 
∂lvco
/
∂Õ
;

2227 
RCC_CFGR_SWS_PLLR
:

2231 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

2232 if(
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë!
RCC_PLLSOURCE_HSI
)

2235 
∂lvco
 = ((
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLN)));

2240 
∂lvco
 = ((
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLN)));

2242 
∂Ã
 = ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLR
Ë>> 
	`POSITION_VAL
(RCC_PLLCFGR_PLLR));

2244 
sys˛ock‰eq
 = 
∂lvco
/
∂Ã
;

2249 
sys˛ock‰eq
 = 
HSI_VALUE
;

2253  
sys˛ock‰eq
;

2254 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rng.c

60 
	~"°m32f4xx_hÆ.h
"

70 #ifde‡
HAL_RNG_MODULE_ENABLED


72 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

73 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

74 
deföed
(
STM32F410Tx
Ë|| deföed(
STM32F410Cx
Ë|| deföed(
STM32F410Rx
Ë|| deföed(
STM32F469xx
) ||\

75 
	$deföed
(
STM32F479xx
)

85 
	#RNG_TIMEOUT_VALUE
 2

	)

122 
HAL_SètusTy≥Def
 
	$HAL_RNG_Inô
(
RNG_H™dÀTy≥Def
 *
h∫g
)

125 if(
h∫g
 =
NULL
)

127  
HAL_ERROR
;

130 
	`__HAL_LOCK
(
h∫g
);

132 if(
h∫g
->
Sèã
 =
HAL_RNG_STATE_RESET
)

135 
h∫g
->
Lock
 = 
HAL_UNLOCKED
;

137 
	`HAL_RNG_M•Inô
(
h∫g
);

141 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_BUSY
;

144 
	`__HAL_RNG_ENABLE
(
h∫g
);

147 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_READY
;

149 
	`__HAL_UNLOCK
(
h∫g
);

152  
HAL_OK
;

153 
	}
}

161 
HAL_SètusTy≥Def
 
	$HAL_RNG_DeInô
(
RNG_H™dÀTy≥Def
 *
h∫g
)

164 if(
h∫g
 =
NULL
)

166  
HAL_ERROR
;

169 
	`CLEAR_BIT
(
h∫g
->
In°™˚
->
CR
, 
RNG_CR_IE
 | 
RNG_CR_RNGEN
);

172 
	`CLEAR_BIT
(
h∫g
->
In°™˚
->
SR
, 
RNG_SR_CEIS
 | 
RNG_SR_SEIS
);

175 
	`HAL_RNG_M•DeInô
(
h∫g
);

178 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_RESET
;

181 
	`__HAL_UNLOCK
(
h∫g
);

184  
HAL_OK
;

185 
	}
}

193 
__wók
 
	$HAL_RNG_M•Inô
(
RNG_H™dÀTy≥Def
 *
h∫g
)

198 
	}
}

206 
__wók
 
	$HAL_RNG_M•DeInô
(
RNG_H™dÀTy≥Def
 *
h∫g
)

211 
	}
}

243 
HAL_SètusTy≥Def
 
	$HAL_RNG_Gíî©eR™domNumbî
(
RNG_H™dÀTy≥Def
 *
h∫g
, 
uöt32_t
 *
øndom32bô
)

245 
uöt32_t
 
tick°¨t
 = 0;

246 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

249 
	`__HAL_LOCK
(
h∫g
);

252 if(
h∫g
->
Sèã
 =
HAL_RNG_STATE_READY
)

255 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_BUSY
;

258 
tick°¨t
 = 
	`HAL_GëTick
();

261 
	`__HAL_RNG_GET_FLAG
(
h∫g
, 
RNG_FLAG_DRDY
Ë=
RESET
)

263 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RNG_TIMEOUT_VALUE
)

265 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_ERROR
;

268 
	`__HAL_UNLOCK
(
h∫g
);

270  
HAL_TIMEOUT
;

275 
h∫g
->
R™domNumbî
 = h∫g->
In°™˚
->
DR
;

276 *
øndom32bô
 = 
h∫g
->
R™domNumbî
;

278 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_READY
;

282 
°©us
 = 
HAL_ERROR
;

286 
	`__HAL_UNLOCK
(
h∫g
);

288  
°©us
;

289 
	}
}

297 
HAL_SètusTy≥Def
 
	$HAL_RNG_Gíî©eR™domNumbî_IT
(
RNG_H™dÀTy≥Def
 *
h∫g
)

299 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

302 
	`__HAL_LOCK
(
h∫g
);

305 if(
h∫g
->
Sèã
 =
HAL_RNG_STATE_READY
)

308 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_BUSY
;

311 
	`__HAL_UNLOCK
(
h∫g
);

314 
	`__HAL_RNG_ENABLE_IT
(
h∫g
);

319 
	`__HAL_UNLOCK
(
h∫g
);

321 
°©us
 = 
HAL_ERROR
;

324  
°©us
;

325 
	}
}

348 
	$HAL_RNG_IRQH™dÀr
(
RNG_H™dÀTy≥Def
 *
h∫g
)

351 if((
	`__HAL_RNG_GET_IT
(
h∫g
, 
RNG_IT_CEI
Ë!
RESET
Ë|| (__HAL_RNG_GET_IT(h∫g, 
RNG_IT_SEI
) != RESET))

354 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_ERROR
;

356 
	`HAL_RNG_Eº‹CÆlback
(
h∫g
);

359 
	`__HAL_RNG_CLEAR_IT
(
h∫g
, 
RNG_IT_CEI
|
RNG_IT_SEI
);

364 if(
	`__HAL_RNG_GET_IT
(
h∫g
, 
RNG_IT_DRDY
Ë!
RESET
)

367 
	`__HAL_RNG_DISABLE_IT
(
h∫g
);

370 
h∫g
->
R™domNumbî
 = h∫g->
In°™˚
->
DR
;

372 if(
h∫g
->
Sèã
 !
HAL_RNG_STATE_ERROR
)

375 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_READY
;

378 
	`HAL_RNG_RódyD©aCÆlback
(
h∫g
, h∫g->
R™domNumbî
);

381 
	}
}

390 
uöt32_t
 
	$HAL_RNG_GëR™domNumbî
(
RNG_H™dÀTy≥Def
 *
h∫g
)

392 if(
	`HAL_RNG_Gíî©eR™domNumbî
(
h∫g
, &(h∫g->
R™domNumbî
)Ë=
HAL_OK
)

394  
h∫g
->
R™domNumbî
;

400 
	}
}

409 
uöt32_t
 
	$HAL_RNG_GëR™domNumbî_IT
(
RNG_H™dÀTy≥Def
 *
h∫g
)

411 
uöt32_t
 
øndom32bô
 = 0;

414 
	`__HAL_LOCK
(
h∫g
);

417 
h∫g
->
Sèã
 = 
HAL_RNG_STATE_BUSY
;

420 
øndom32bô
 = 
h∫g
->
In°™˚
->
DR
;

423 
	`__HAL_RNG_ENABLE_IT
(
h∫g
);

426  
øndom32bô
;

427 
	}
}

435 
uöt32_t
 
	$HAL_RNG_RódLa°R™domNumbî
(
RNG_H™dÀTy≥Def
 *
h∫g
)

437 (
h∫g
->
R™domNumbî
);

438 
	}
}

447 
__wók
 
	$HAL_RNG_RódyD©aCÆlback
(
RNG_H™dÀTy≥Def
 *
h∫g
, 
uöt32_t
 
øndom32bô
)

452 
	}
}

460 
__wók
 
	$HAL_RNG_Eº‹CÆlback
(
RNG_H™dÀTy≥Def
 *
h∫g
)

465 
	}
}

492 
HAL_RNG_SèãTy≥Def
 
	$HAL_RNG_GëSèã
(
RNG_H™dÀTy≥Def
 *
h∫g
)

494  
h∫g
->
Sèã
;

495 
	}
}

506 
	gSTM32F429xx
 || 
	gSTM32F439xx
 || 
	gSTM32F410xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rtc.c

139 
	~"°m32f4xx_hÆ.h
"

150 #ifde‡
HAL_RTC_MODULE_ENABLED


203 
HAL_SètusTy≥Def
 
	$HAL_RTC_Inô
(
RTC_H™dÀTy≥Def
 *
hπc
)

206 if(
hπc
 =
NULL
)

208  
HAL_ERROR
;

212 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
hπc
->
Inô
.
HourF‹m©
));

213 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
hπc
->
Inô
.
AsynchPªdiv
));

214 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
hπc
->
Inô
.
SynchPªdiv
));

215 
	`as£π_∑øm
 (
	`IS_RTC_OUTPUT
(
hπc
->
Inô
.
OutPut
));

216 
	`as£π_∑øm
 (
	`IS_RTC_OUTPUT_POL
(
hπc
->
Inô
.
OutPutPﬁ¨ôy
));

217 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
hπc
->
Inô
.
OutPutTy≥
));

219 if(
hπc
->
Sèã
 =
HAL_RTC_STATE_RESET
)

222 
hπc
->
Lock
 = 
HAL_UNLOCKED
;

224 
	`HAL_RTC_M•Inô
(
hπc
);

228 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

231 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

234 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

237 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

240 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

242  
HAL_ERROR
;

247 
hπc
->
In°™˚
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
 | 
RTC_CR_OSEL
 | 
RTC_CR_POL
));

249 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)(hπc->
Inô
.
HourF‹m©
 | hπc->Inô.
OutPut
 | hπc->Inô.
OutPutPﬁ¨ôy
);

252 
hπc
->
In°™˚
->
PRER
 = (
uöt32_t
)(hπc->
Inô
.
SynchPªdiv
);

253 
hπc
->
In°™˚
->
PRER
 |(
uöt32_t
)(hπc->
Inô
.
AsynchPªdiv
 << 16);

256 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

258 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_ALARMOUTTYPE
;

259 
hπc
->
In°™˚
->
TAFCR
 |(
uöt32_t
)(hπc->
Inô
.
OutPutTy≥
);

262 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

265 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

267  
HAL_OK
;

269 
	}
}

278 
HAL_SètusTy≥Def
 
	$HAL_RTC_DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
)

280 
uöt32_t
 
tick°¨t
 = 0;

283 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

286 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

289 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

292 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

295 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

297  
HAL_ERROR
;

302 
hπc
->
In°™˚
->
TR
 = (
uöt32_t
)0x00000000;

303 
hπc
->
In°™˚
->
DR
 = (
uöt32_t
)0x00002101;

305 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)0x00000007;

308 
tick°¨t
 = 
	`HAL_GëTick
();

311 ((
hπc
->
In°™˚
->
ISR
Ë& 
RTC_ISR_WUTWF
Ë=(
uöt32_t
)
RESET
)

313 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

316 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

319 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

321  
HAL_TIMEOUT
;

326 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)0x00000000;

327 
hπc
->
In°™˚
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

328 
hπc
->
In°™˚
->
PRER
 = (
uöt32_t
)0x007F00FF;

329 
hπc
->
In°™˚
->
CALIBR
 = (
uöt32_t
)0x00000000;

330 
hπc
->
In°™˚
->
ALRMAR
 = (
uöt32_t
)0x00000000;

331 
hπc
->
In°™˚
->
ALRMBR
 = (
uöt32_t
)0x00000000;

332 
hπc
->
In°™˚
->
SHIFTR
 = (
uöt32_t
)0x00000000;

333 
hπc
->
In°™˚
->
CALR
 = (
uöt32_t
)0x00000000;

334 
hπc
->
In°™˚
->
ALRMASSR
 = (
uöt32_t
)0x00000000;

335 
hπc
->
In°™˚
->
ALRMBSSR
 = (
uöt32_t
)0x00000000;

338 
hπc
->
In°™˚
->
ISR
 = (
uöt32_t
)0x00000000;

341 
hπc
->
In°™˚
->
TAFCR
 = 0x00000000;

344 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

346 if(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

349 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

351 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

353  
HAL_ERROR
;

359 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

362 
	`HAL_RTC_M•DeInô
(
hπc
);

364 
hπc
->
Sèã
 = 
HAL_RTC_STATE_RESET
;

367 
	`__HAL_UNLOCK
(
hπc
);

369  
HAL_OK
;

370 
	}
}

378 
__wók
 
	$HAL_RTC_M•Inô
(
RTC_H™dÀTy≥Def
* 
hπc
)

383 
	}
}

391 
__wók
 
	$HAL_RTC_M•DeInô
(
RTC_H™dÀTy≥Def
* 
hπc
)

396 
	}
}

427 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
)

429 
uöt32_t
 
tm¥eg
 = 0;

432 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

433 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
sTime
->
DayLightSavög
));

434 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
sTime
->
St‹eO≥øti⁄
));

437 
	`__HAL_LOCK
(
hπc
);

439 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

441 if(
F‹m©
 =
RTC_FORMAT_BIN
)

443 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

445 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
sTime
->
Hours
));

446 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sTime
->
TimeF‹m©
));

450 
sTime
->
TimeF‹m©
 = 0x00;

451 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sTime
->
Hours
));

453 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sTime
->
Möuãs
));

454 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sTime
->
Sec⁄ds
));

456 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
sTime
->
Hours
) << 16) | \

457 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sTime
->
Möuãs
) << 8) | \

458 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sTime
->
Sec⁄ds
)) | \

459 (((
uöt32_t
)
sTime
->
TimeF‹m©
) << 16));

463 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

465 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sTime
->
Hours
);

466 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

467 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sTime
->
TimeF‹m©
));

471 
sTime
->
TimeF‹m©
 = 0x00;

472 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sTime
->
Hours
)));

474 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sTime
->
Möuãs
)));

475 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sTime
->
Sec⁄ds
)));

476 
tm¥eg
 = (((
uöt32_t
)(
sTime
->
Hours
) << 16) | \

477 ((
uöt32_t
)(
sTime
->
Möuãs
) << 8) | \

478 ((
uöt32_t
)
sTime
->
Sec⁄ds
) | \

479 ((
uöt32_t
)(
sTime
->
TimeF‹m©
) << 16));

483 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

486 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

489 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

492 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

495 
	`__HAL_UNLOCK
(
hπc
);

497  
HAL_ERROR
;

502 
hπc
->
In°™˚
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

505 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)~
RTC_CR_BCK
;

508 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)(
sTime
->
DayLightSavög
 | sTime->
St‹eO≥øti⁄
);

511 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

514 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

516 if(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

519 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

521 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

524 
	`__HAL_UNLOCK
(
hπc
);

526  
HAL_ERROR
;

531 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

533 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

535 
	`__HAL_UNLOCK
(
hπc
);

537  
HAL_OK
;

539 
	}
}

559 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
)

561 
uöt32_t
 
tm¥eg
 = 0;

564 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

567 
sTime
->
SubSec⁄ds
 = (
uöt32_t
)(
hπc
->
In°™˚
->
SSR
);

570 
sTime
->
Sec⁄dFø˘i⁄
 = (
uöt32_t
)(
hπc
->
In°™˚
->
PRER
 & 
RTC_PRER_PREDIV_S
);

573 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
TR
 & 
RTC_TR_RESERVED_MASK
);

576 
sTime
->
Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

577 
sTime
->
Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

578 
sTime
->
Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

579 
sTime
->
TimeF‹m©
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

582 if(
F‹m©
 =
RTC_FORMAT_BIN
)

585 
sTime
->
Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTime->Hours);

586 
sTime
->
Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTime->Minutes);

587 
sTime
->
Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTime->Seconds);

590  
HAL_OK
;

591 
	}
}

604 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
)

606 
uöt32_t
 
d©ëm¥eg
 = 0;

609 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

612 
	`__HAL_LOCK
(
hπc
);

614 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

616 if((
F‹m©
 =
RTC_FORMAT_BIN
Ë&& ((
sD©e
->
M⁄th
 & 0x10) == 0x10))

618 
sD©e
->
M⁄th
 = (
uöt8_t
)((sDate->Month & (uint8_t)~(0x10)) + (uint8_t)0x0A);

621 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
sD©e
->
WìkDay
));

623 if(
F‹m©
 =
RTC_FORMAT_BIN
)

625 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
sD©e
->
Yór
));

626 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
sD©e
->
M⁄th
));

627 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
sD©e
->
D©e
));

629 
d©ëm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
sD©e
->
Yór
) << 16) | \

630 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sD©e
->
M⁄th
) << 8) | \

631 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sD©e
->
D©e
)) | \

632 ((
uöt32_t
)
sD©e
->
WìkDay
 << 13));

636 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
sD©e
->
Yór
)));

637 
d©ëm¥eg
 = 
	`RTC_Bcd2ToByã
(
sD©e
->
M⁄th
);

638 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
d©ëm¥eg
));

639 
d©ëm¥eg
 = 
	`RTC_Bcd2ToByã
(
sD©e
->
D©e
);

640 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
d©ëm¥eg
));

642 
d©ëm¥eg
 = ((((
uöt32_t
)
sD©e
->
Yór
) << 16) | \

643 (((
uöt32_t
)
sD©e
->
M⁄th
) << 8) | \

644 ((
uöt32_t
)
sD©e
->
D©e
) | \

645 (((
uöt32_t
)
sD©e
->
WìkDay
) << 13));

649 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

652 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

655 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

658 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

661 
	`__HAL_UNLOCK
(
hπc
);

663  
HAL_ERROR
;

668 
hπc
->
In°™˚
->
DR
 = (
uöt32_t
)(
d©ëm¥eg
 & 
RTC_DR_RESERVED_MASK
);

671 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

674 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

676 if(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

679 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

681 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

684 
	`__HAL_UNLOCK
(
hπc
);

686  
HAL_ERROR
;

691 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

693 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
 ;

696 
	`__HAL_UNLOCK
(
hπc
);

698  
HAL_OK
;

700 
	}
}

716 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
)

718 
uöt32_t
 
d©ëm¥eg
 = 0;

721 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

724 
d©ëm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
DR
 & 
RTC_DR_RESERVED_MASK
);

727 
sD©e
->
Yór
 = (
uöt8_t
)((
d©ëm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

728 
sD©e
->
M⁄th
 = (
uöt8_t
)((
d©ëm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

729 
sD©e
->
D©e
 = (
uöt8_t
)(
d©ëm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

730 
sD©e
->
WìkDay
 = (
uöt8_t
)((
d©ëm¥eg
 & (
RTC_DR_WDU
)) >> 13);

733 if(
F‹m©
 =
RTC_FORMAT_BIN
)

736 
sD©e
->
Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sDate->Year);

737 
sD©e
->
M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sDate->Month);

738 
sD©e
->
D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sDate->Date);

740  
HAL_OK
;

741 
	}
}

771 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
)

773 
uöt32_t
 
tick°¨t
 = 0;

774 
uöt32_t
 
tm¥eg
 = 0, 
sub£c⁄dtm¥eg
 = 0;

777 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

778 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
sAœrm
->
Aœrm
));

779 
	`as£π_∑øm
(
	`IS_RTC_ALARM_MASK
(
sAœrm
->
AœrmMask
));

780 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
sAœrm
->
AœrmD©eWìkDaySñ
));

781 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
sAœrm
->
AœrmTime
.
SubSec⁄ds
));

782 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
sAœrm
->
AœrmSubSec⁄dMask
));

785 
	`__HAL_LOCK
(
hπc
);

787 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

789 if(
F‹m©
 =
RTC_FORMAT_BIN
)

791 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

793 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
sAœrm
->
AœrmTime
.
Hours
));

794 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sAœrm
->
AœrmTime
.
TimeF‹m©
));

798 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = 0x00;

799 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sAœrm
->
AœrmTime
.
Hours
));

801 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sAœrm
->
AœrmTime
.
Möuãs
));

802 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sAœrm
->
AœrmTime
.
Sec⁄ds
));

804 if(
sAœrm
->
AœrmD©eWìkDaySñ
 =
RTC_ALARMDATEWEEKDAYSEL_DATE
)

806 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
sAœrm
->
AœrmD©eWìkDay
));

810 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
sAœrm
->
AœrmD©eWìkDay
));

813 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Hours
) << 16) | \

814 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Möuãs
) << 8) | \

815 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)) | \

816 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
TimeF‹m©
) << 16) | \

817 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmD©eWìkDay
) << 24) | \

818 ((
uöt32_t
)
sAœrm
->
AœrmD©eWìkDaySñ
) | \

819 ((
uöt32_t
)
sAœrm
->
AœrmMask
));

823 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

825 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
);

826 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

827 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sAœrm
->
AœrmTime
.
TimeF‹m©
));

831 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = 0x00;

832 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
)));

835 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Möuãs
)));

836 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)));

838 if(
sAœrm
->
AœrmD©eWìkDaySñ
 =
RTC_ALARMDATEWEEKDAYSEL_DATE
)

840 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmD©eWìkDay
);

841 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

845 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmD©eWìkDay
);

846 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

849 
tm¥eg
 = (((
uöt32_t
)(
sAœrm
->
AœrmTime
.
Hours
) << 16) | \

850 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
Möuãs
) << 8) | \

851 ((
uöt32_t
Ë
sAœrm
->
AœrmTime
.
Sec⁄ds
) | \

852 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
TimeF‹m©
) << 16) | \

853 ((
uöt32_t
)(
sAœrm
->
AœrmD©eWìkDay
) << 24) | \

854 ((
uöt32_t
)
sAœrm
->
AœrmD©eWìkDaySñ
) | \

855 ((
uöt32_t
)
sAœrm
->
AœrmMask
));

859 
sub£c⁄dtm¥eg
 = (
uöt32_t
)((uöt32_t)(
sAœrm
->
AœrmTime
.
SubSec⁄ds
Ë| (uöt32_t)(sAœrm->
AœrmSubSec⁄dMask
));

862 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

865 if(
sAœrm
->
Aœrm
 =
RTC_ALARM_A
)

868 
	`__HAL_RTC_ALARMA_DISABLE
(
hπc
);

871 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
, 
RTC_IT_ALRA
);

874 
tick°¨t
 = 
	`HAL_GëTick
();

877 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAWF
Ë=
RESET
)

879 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

882 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

884 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

887 
	`__HAL_UNLOCK
(
hπc
);

889  
HAL_TIMEOUT
;

893 
hπc
->
In°™˚
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

895 
hπc
->
In°™˚
->
ALRMASSR
 = 
sub£c⁄dtm¥eg
;

897 
	`__HAL_RTC_ALARMA_ENABLE
(
hπc
);

902 
	`__HAL_RTC_ALARMB_DISABLE
(
hπc
);

905 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
, 
RTC_IT_ALRB
);

908 
tick°¨t
 = 
	`HAL_GëTick
();

911 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBWF
Ë=
RESET
)

913 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

916 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

918 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

921 
	`__HAL_UNLOCK
(
hπc
);

923  
HAL_TIMEOUT
;

927 
hπc
->
In°™˚
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

929 
hπc
->
In°™˚
->
ALRMBSSR
 = 
sub£c⁄dtm¥eg
;

931 
	`__HAL_RTC_ALARMB_ENABLE
(
hπc
);

935 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

938 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

941 
	`__HAL_UNLOCK
(
hπc
);

943  
HAL_OK
;

944 
	}
}

957 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëAœrm_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
)

959 
uöt32_t
 
tick°¨t
 = 0;

960 
uöt32_t
 
tm¥eg
 = 0, 
sub£c⁄dtm¥eg
 = 0;

963 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

964 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
sAœrm
->
Aœrm
));

965 
	`as£π_∑øm
(
	`IS_RTC_ALARM_MASK
(
sAœrm
->
AœrmMask
));

966 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
sAœrm
->
AœrmD©eWìkDaySñ
));

967 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
sAœrm
->
AœrmTime
.
SubSec⁄ds
));

968 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
sAœrm
->
AœrmSubSec⁄dMask
));

971 
	`__HAL_LOCK
(
hπc
);

973 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

975 if(
F‹m©
 =
RTC_FORMAT_BIN
)

977 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

979 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
sAœrm
->
AœrmTime
.
Hours
));

980 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sAœrm
->
AœrmTime
.
TimeF‹m©
));

984 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = 0x00;

985 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sAœrm
->
AœrmTime
.
Hours
));

987 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sAœrm
->
AœrmTime
.
Möuãs
));

988 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sAœrm
->
AœrmTime
.
Sec⁄ds
));

990 if(
sAœrm
->
AœrmD©eWìkDaySñ
 =
RTC_ALARMDATEWEEKDAYSEL_DATE
)

992 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
sAœrm
->
AœrmD©eWìkDay
));

996 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
sAœrm
->
AœrmD©eWìkDay
));

998 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Hours
) << 16) | \

999 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Möuãs
) << 8) | \

1000 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)) | \

1001 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
TimeF‹m©
) << 16) | \

1002 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
sAœrm
->
AœrmD©eWìkDay
) << 24) | \

1003 ((
uöt32_t
)
sAœrm
->
AœrmD©eWìkDaySñ
) | \

1004 ((
uöt32_t
)
sAœrm
->
AœrmMask
));

1008 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1010 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
);

1011 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1012 
	`as£π_∑øm
(
	`IS_RTC_HOURFORMAT12
(
sAœrm
->
AœrmTime
.
TimeF‹m©
));

1016 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = 0x00;

1017 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
)));

1020 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Möuãs
)));

1021 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)));

1023 if(
sAœrm
->
AœrmD©eWìkDaySñ
 =
RTC_ALARMDATEWEEKDAYSEL_DATE
)

1025 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmD©eWìkDay
);

1026 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1030 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmD©eWìkDay
);

1031 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1033 
tm¥eg
 = (((
uöt32_t
)(
sAœrm
->
AœrmTime
.
Hours
) << 16) | \

1034 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
Möuãs
) << 8) | \

1035 ((
uöt32_t
Ë
sAœrm
->
AœrmTime
.
Sec⁄ds
) | \

1036 ((
uöt32_t
)(
sAœrm
->
AœrmTime
.
TimeF‹m©
) << 16) | \

1037 ((
uöt32_t
)(
sAœrm
->
AœrmD©eWìkDay
) << 24) | \

1038 ((
uöt32_t
)
sAœrm
->
AœrmD©eWìkDaySñ
) | \

1039 ((
uöt32_t
)
sAœrm
->
AœrmMask
));

1042 
sub£c⁄dtm¥eg
 = (
uöt32_t
)((uöt32_t)(
sAœrm
->
AœrmTime
.
SubSec⁄ds
Ë| (uöt32_t)(sAœrm->
AœrmSubSec⁄dMask
));

1045 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1048 if(
sAœrm
->
Aœrm
 =
RTC_ALARM_A
)

1051 
	`__HAL_RTC_ALARMA_DISABLE
(
hπc
);

1054 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

1057 
tick°¨t
 = 
	`HAL_GëTick
();

1060 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAWF
Ë=
RESET
)

1062 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1065 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1067 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1070 
	`__HAL_UNLOCK
(
hπc
);

1072  
HAL_TIMEOUT
;

1076 
hπc
->
In°™˚
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1078 
hπc
->
In°™˚
->
ALRMASSR
 = 
sub£c⁄dtm¥eg
;

1080 
	`__HAL_RTC_ALARMA_ENABLE
(
hπc
);

1082 
	`__HAL_RTC_ALARM_ENABLE_IT
(
hπc
,
RTC_IT_ALRA
);

1087 
	`__HAL_RTC_ALARMB_DISABLE
(
hπc
);

1090 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRBF
);

1093 
tick°¨t
 = 
	`HAL_GëTick
();

1096 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBWF
Ë=
RESET
)

1098 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1101 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1103 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1106 
	`__HAL_UNLOCK
(
hπc
);

1108  
HAL_TIMEOUT
;

1112 
hπc
->
In°™˚
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1114 
hπc
->
In°™˚
->
ALRMBSSR
 = 
sub£c⁄dtm¥eg
;

1116 
	`__HAL_RTC_ALARMB_ENABLE
(
hπc
);

1118 
	`__HAL_RTC_ALARM_ENABLE_IT
(
hπc
, 
RTC_IT_ALRB
);

1122 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
();

1124 
EXTI
->
RTSR
 |
RTC_EXTI_LINE_ALARM_EVENT
;

1127 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1129 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1132 
	`__HAL_UNLOCK
(
hπc
);

1134  
HAL_OK
;

1135 
	}
}

1147 
HAL_SètusTy≥Def
 
	$HAL_RTC_Dó˘iv©eAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Aœrm
)

1149 
uöt32_t
 
tick°¨t
 = 0;

1152 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
Aœrm
));

1155 
	`__HAL_LOCK
(
hπc
);

1157 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1160 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1162 if(
Aœrm
 =
RTC_ALARM_A
)

1165 
	`__HAL_RTC_ALARMA_DISABLE
(
hπc
);

1168 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
, 
RTC_IT_ALRA
);

1171 
tick°¨t
 = 
	`HAL_GëTick
();

1174 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAWF
Ë=
RESET
)

1176 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1179 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1181 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1184 
	`__HAL_UNLOCK
(
hπc
);

1186  
HAL_TIMEOUT
;

1193 
	`__HAL_RTC_ALARMB_DISABLE
(
hπc
);

1196 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
,
RTC_IT_ALRB
);

1199 
tick°¨t
 = 
	`HAL_GëTick
();

1202 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBWF
Ë=
RESET
)

1204 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1207 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1209 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1212 
	`__HAL_UNLOCK
(
hπc
);

1214  
HAL_TIMEOUT
;

1219 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1221 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1224 
	`__HAL_UNLOCK
(
hπc
);

1226  
HAL_OK
;

1227 
	}
}

1244 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
Aœrm
, uöt32_à
F‹m©
)

1246 
uöt32_t
 
tm¥eg
 = 0, 
sub£c⁄dtm¥eg
 = 0;

1249 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

1250 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
Aœrm
));

1252 if(
Aœrm
 =
RTC_ALARM_A
)

1255 
sAœrm
->
Aœrm
 = 
RTC_ALARM_A
;

1257 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
ALRMAR
);

1258 
sub£c⁄dtm¥eg
 = (
uöt32_t
)((
hπc
->
In°™˚
->
ALRMASSR
 ) & 
RTC_ALRMASSR_SS
);

1262 
sAœrm
->
Aœrm
 = 
RTC_ALARM_B
;

1264 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
ALRMBR
);

1265 
sub£c⁄dtm¥eg
 = (
uöt32_t
)((
hπc
->
In°™˚
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1269 
sAœrm
->
AœrmTime
.
Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | 
RTC_ALRMAR_HU
)) >> 16);

1270 
sAœrm
->
AœrmTime
.
Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | 
RTC_ALRMAR_MNU
)) >> 8);

1271 
sAœrm
->
AœrmTime
.
Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | 
RTC_ALRMAR_SU
));

1272 
sAœrm
->
AœrmTime
.
TimeF‹m©
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1273 
sAœrm
->
AœrmTime
.
SubSec⁄ds
 = (
uöt32_t
Ë
sub£c⁄dtm¥eg
;

1274 
sAœrm
->
AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1275 
sAœrm
->
AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1276 
sAœrm
->
AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALARMMASK_ALL
);

1278 if(
F‹m©
 =
RTC_FORMAT_BIN
)

1280 
sAœrm
->
AœrmTime
.
Hours
 = 
	`RTC_Bcd2ToByã
(sAlarm->AlarmTime.Hours);

1281 
sAœrm
->
AœrmTime
.
Möuãs
 = 
	`RTC_Bcd2ToByã
(sAlarm->AlarmTime.Minutes);

1282 
sAœrm
->
AœrmTime
.
Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(sAlarm->AlarmTime.Seconds);

1283 
sAœrm
->
AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(sAlarm->AlarmDateWeekDay);

1286  
HAL_OK
;

1287 
	}
}

1295 
	$HAL_RTC_AœrmIRQH™dÀr
(
RTC_H™dÀTy≥Def
* 
hπc
)

1297 if(
	`__HAL_RTC_ALARM_GET_IT
(
hπc
, 
RTC_IT_ALRA
))

1300 if((
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & 
RTC_IT_ALRA
Ë!(uöt32_t)
RESET
)

1303 
	`HAL_RTC_AœrmAEvítCÆlback
(
hπc
);

1306 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
,
RTC_FLAG_ALRAF
);

1310 if(
	`__HAL_RTC_ALARM_GET_IT
(
hπc
, 
RTC_IT_ALRB
))

1313 if((
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & 
RTC_IT_ALRB
Ë!(uöt32_t)
RESET
)

1316 
	`HAL_RTCEx_AœrmBEvítCÆlback
(
hπc
);

1319 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
,
RTC_FLAG_ALRBF
);

1324 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
();

1327 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1328 
	}
}

1336 
__wók
 
	$HAL_RTC_AœrmAEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1341 
	}
}

1350 
HAL_SètusTy≥Def
 
	$HAL_RTC_PﬁlF‹AœrmAEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1352 
uöt32_t
 
tick°¨t
 = 0;

1355 
tick°¨t
 = 
	`HAL_GëTick
();

1357 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
Ë=
RESET
)

1359 if(
Timeout
 !
HAL_MAX_DELAY
)

1361 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1363 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1364  
HAL_TIMEOUT
;

1370 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

1373 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1375  
HAL_OK
;

1376 
	}
}

1412 
HAL_SètusTy≥Def
 
	$HAL_RTC_WaôF‹Synchro
(
RTC_H™dÀTy≥Def
* 
hπc
)

1414 
uöt32_t
 
tick°¨t
 = 0;

1417 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

1420 
tick°¨t
 = 
	`HAL_GëTick
();

1423 (
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_RSF
Ë=(
uöt32_t
)
RESET
)

1425 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1427  
HAL_TIMEOUT
;

1431  
HAL_OK
;

1432 
	}
}

1458 
HAL_RTCSèãTy≥Def
 
	$HAL_RTC_GëSèã
(
RTC_H™dÀTy≥Def
* 
hπc
)

1460  
hπc
->
Sèã
;

1461 
	}
}

1475 
HAL_SètusTy≥Def
 
	$RTC_E¡îInôMode
(
RTC_H™dÀTy≥Def
* 
hπc
)

1477 
uöt32_t
 
tick°¨t
 = 0;

1480 if((
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

1483 
hπc
->
In°™˚
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

1486 
tick°¨t
 = 
	`HAL_GëTick
();

1489 (
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

1491 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1493  
HAL_TIMEOUT
;

1498  
HAL_OK
;

1499 
	}
}

1507 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

1509 
uöt32_t
 
bcdhigh
 = 0;

1511 
VÆue
 >= 10)

1513 
bcdhigh
++;

1514 
VÆue
 -= 10;

1517  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

1518 
	}
}

1525 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

1527 
uöt32_t
 
tmp
 = 0;

1528 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

1529  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

1530 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rtc_ex.c

100 
	~"°m32f4xx_hÆ.h
"

111 #ifde‡
HAL_RTC_MODULE_ENABLED


158 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
TimeSèmpEdge
, uöt32_à
RTC_TimeSèmpPö
)

160 
uöt32_t
 
tm¥eg
 = 0;

163 
	`as£π_∑øm
(
	`IS_TIMESTAMP_EDGE
(
TimeSèmpEdge
));

164 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_PIN
(
RTC_TimeSèmpPö
));

167 
	`__HAL_LOCK
(
hπc
);

169 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

172 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

174 
tm¥eg
|
TimeSèmpEdge
;

177 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

179 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TSINSEL
;

180 
hπc
->
In°™˚
->
TAFCR
 |(
uöt32_t
)(
RTC_TimeSèmpPö
);

183 
hπc
->
In°™˚
->
CR
 = (
uöt32_t
)
tm¥eg
;

185 
	`__HAL_RTC_TIMESTAMP_ENABLE
(
hπc
);

188 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

191 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

194 
	`__HAL_UNLOCK
(
hπc
);

196  
HAL_OK
;

197 
	}
}

218 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTimeSèmp_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
TimeSèmpEdge
, uöt32_à
RTC_TimeSèmpPö
)

220 
uöt32_t
 
tm¥eg
 = 0;

223 
	`as£π_∑øm
(
	`IS_TIMESTAMP_EDGE
(
TimeSèmpEdge
));

224 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_PIN
(
RTC_TimeSèmpPö
));

227 
	`__HAL_LOCK
(
hπc
);

229 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

232 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

234 
tm¥eg
 |
TimeSèmpEdge
;

237 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

240 
hπc
->
In°™˚
->
CR
 = (
uöt32_t
)
tm¥eg
;

242 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TSINSEL
;

243 
hπc
->
In°™˚
->
TAFCR
 |(
uöt32_t
)(
RTC_TimeSèmpPö
);

245 
	`__HAL_RTC_TIMESTAMP_ENABLE
(
hπc
);

248 
	`__HAL_RTC_TIMESTAMP_ENABLE_IT
(
hπc
,
RTC_IT_TS
);

251 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
();

253 
EXTI
->
RTSR
 |
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
;

256 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

258 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

261 
	`__HAL_UNLOCK
(
hπc
);

263  
HAL_OK
;

264 
	}
}

272 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
)

274 
uöt32_t
 
tm¥eg
 = 0;

277 
	`__HAL_LOCK
(
hπc
);

279 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

282 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

285 
	`__HAL_RTC_TIMESTAMP_DISABLE_IT
(
hπc
, 
RTC_IT_TS
);

288 
tm¥eg
 = (
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

291 
hπc
->
In°™˚
->
CR
 = (
uöt32_t
)
tm¥eg
;

294 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

296 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

299 
	`__HAL_UNLOCK
(
hπc
);

301  
HAL_OK
;

302 
	}
}

316 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_GëTimeSèmp
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
* 
sTimeSèmp
, 
RTC_D©eTy≥Def
* 
sTimeSèmpD©e
, 
uöt32_t
 
F‹m©
)

318 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

321 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

324 
tm±ime
 = (
uöt32_t
)(
hπc
->
In°™˚
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

325 
tmpd©e
 = (
uöt32_t
)(
hπc
->
In°™˚
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

328 
sTimeSèmp
->
Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

329 
sTimeSèmp
->
Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

330 
sTimeSèmp
->
Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

331 
sTimeSèmp
->
TimeF‹m©
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

332 
sTimeSèmp
->
SubSec⁄ds
 = (
uöt32_t
Ë
hπc
->
In°™˚
->
TSSSR
;

335 
sTimeSèmpD©e
->
Yór
 = 0;

336 
sTimeSèmpD©e
->
M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

337 
sTimeSèmpD©e
->
D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

338 
sTimeSèmpD©e
->
WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

341 if(
F‹m©
 =
RTC_FORMAT_BIN
)

344 
sTimeSèmp
->
Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStamp->Hours);

345 
sTimeSèmp
->
Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStamp->Minutes);

346 
sTimeSèmp
->
Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStamp->Seconds);

349 
sTimeSèmpD©e
->
M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStampDate->Month);

350 
sTimeSèmpD©e
->
D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStampDate->Date);

351 
sTimeSèmpD©e
->
WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(sTimeStampDate->WeekDay);

355 
	`__HAL_RTC_TIMESTAMP_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TSF
);

357  
HAL_OK
;

358 
	}
}

368 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
* 
sTam≥r
)

370 
uöt32_t
 
tm¥eg
 = 0;

373 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
sTam≥r
->
Tam≥r
));

374 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PIN
(
sTam≥r
->
PöSñe˘i⁄
));

375 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
sTam≥r
->
Triggî
));

376 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
sTam≥r
->
Fûãr
));

377 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
sTam≥r
->
Sam∂ögFªquícy
));

378 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
sTam≥r
->
Pªch¨geDuøti⁄
));

379 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PULLUP_STATE
(
sTam≥r
->
Tam≥rPuŒUp
));

380 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION
(
sTam≥r
->
TimeSèmpOnTam≥rDëe˘i⁄
));

383 
	`__HAL_LOCK
(
hπc
);

385 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

387 if(
sTam≥r
->
Triggî
 !
RTC_TAMPERTRIGGER_RISINGEDGE
)

389 
sTam≥r
->
Triggî
 = (
uöt32_t
)(sTam≥r->
Tam≥r
 << 1);

392 
tm¥eg
 = ((
uöt32_t
)
sTam≥r
->
Tam≥r
 | (uöt32_t)sTam≥r->
PöSñe˘i⁄
 | (uöt32_t)sTam≥r->
Triggî
 |\

393 (
uöt32_t
)
sTam≥r
->
Fûãr
 | (uöt32_t)sTam≥r->
Sam∂ögFªquícy
 | (uöt32_t)sTam≥r->
Pªch¨geDuøti⁄
 |\

394 (
uöt32_t
)
sTam≥r
->
Tam≥rPuŒUp
 | sTam≥r->
TimeSèmpOnTam≥rDëe˘i⁄
);

396 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~((uöt32_t)
sTam≥r
->
Tam≥r
 | (uöt32_t)(sTam≥r->Tam≥∏<< 1Ë| (uöt32_t)
RTC_TAFCR_TAMPTS
 |\

397 (
uöt32_t
)
RTC_TAFCR_TAMPFREQ
 | (uöt32_t)
RTC_TAFCR_TAMPFLT
 | (uöt32_t)
RTC_TAFCR_TAMPPRCH
 |\

398 (
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
 | (uöt32_t)
RTC_TAFCR_TAMPINSEL
 | (uöt32_t)
RTC_TAFCR_TAMPIE
);

400 
hπc
->
In°™˚
->
TAFCR
 |
tm¥eg
;

402 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

405 
	`__HAL_UNLOCK
(
hπc
);

407  
HAL_OK
;

408 
	}
}

418 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTam≥r_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
* 
sTam≥r
)

420 
uöt32_t
 
tm¥eg
 = 0;

423 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
sTam≥r
->
Tam≥r
));

424 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PIN
(
sTam≥r
->
PöSñe˘i⁄
));

425 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
sTam≥r
->
Triggî
));

426 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
sTam≥r
->
Fûãr
));

427 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
sTam≥r
->
Sam∂ögFªquícy
));

428 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
sTam≥r
->
Pªch¨geDuøti⁄
));

429 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PULLUP_STATE
(
sTam≥r
->
Tam≥rPuŒUp
));

430 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION
(
sTam≥r
->
TimeSèmpOnTam≥rDëe˘i⁄
));

433 
	`__HAL_LOCK
(
hπc
);

435 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

438 if(
sTam≥r
->
Triggî
 !
RTC_TAMPERTRIGGER_RISINGEDGE
)

440 
sTam≥r
->
Triggî
 = (
uöt32_t
)(sTam≥r->
Tam≥r
 << 1);

443 
tm¥eg
 = ((
uöt32_t
)
sTam≥r
->
Tam≥r
 | (uöt32_t)sTam≥r->
PöSñe˘i⁄
 | (uöt32_t)sTam≥r->
Triggî
 |\

444 (
uöt32_t
)
sTam≥r
->
Fûãr
 | (uöt32_t)sTam≥r->
Sam∂ögFªquícy
 | (uöt32_t)sTam≥r->
Pªch¨geDuøti⁄
 |\

445 (
uöt32_t
)
sTam≥r
->
Tam≥rPuŒUp
 | sTam≥r->
TimeSèmpOnTam≥rDëe˘i⁄
);

447 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~((uöt32_t)
sTam≥r
->
Tam≥r
 | (uöt32_t)(sTam≥r->Tam≥∏<< 1Ë| (uöt32_t)
RTC_TAFCR_TAMPTS
 |\

448 (
uöt32_t
)
RTC_TAFCR_TAMPFREQ
 | (uöt32_t)
RTC_TAFCR_TAMPFLT
 | (uöt32_t)
RTC_TAFCR_TAMPPRCH
 |\

449 (
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
 | (uöt32_t)
RTC_TAFCR_TAMPINSEL
);

451 
hπc
->
In°™˚
->
TAFCR
 |
tm¥eg
;

454 
hπc
->
In°™˚
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPIE
;

457 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
();

459 
EXTI
->
RTSR
 |
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT
;

461 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

464 
	`__HAL_UNLOCK
(
hπc
);

466  
HAL_OK
;

467 
	}
}

477 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Tam≥r
)

479 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
Tam≥r
));

482 
	`__HAL_LOCK
(
hπc
);

484 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

487 
hπc
->
In°™˚
->
TAFCR
 &(
uöt32_t
)~
Tam≥r
;

489 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

492 
	`__HAL_UNLOCK
(
hπc
);

494  
HAL_OK
;

495 
	}
}

503 
	$HAL_RTCEx_Tam≥rTimeSèmpIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
)

505 if(
	`__HAL_RTC_TIMESTAMP_GET_IT
(
hπc
, 
RTC_IT_TS
))

508 if((
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & 
RTC_IT_TS
Ë!(uöt32_t)
RESET
)

511 
	`HAL_RTCEx_TimeSèmpEvítCÆlback
(
hπc
);

514 
	`__HAL_RTC_TIMESTAMP_CLEAR_FLAG
(
hπc
,
RTC_FLAG_TSF
);

519 if(
	`__HAL_RTC_TAMPER_GET_IT
(
hπc
,
RTC_IT_TAMP1
))

522 if(((
hπc
->
In°™˚
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
))Ë!(
uöt32_t
)
RESET
)

525 
	`HAL_RTCEx_Tam≥r1EvítCÆlback
(
hπc
);

528 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
,
RTC_FLAG_TAMP1F
);

533 if(
	`__HAL_RTC_TAMPER_GET_IT
(
hπc
, 
RTC_IT_TAMP2
))

536 if(((
hπc
->
In°™˚
->
TAFCR
 & 
RTC_TAFCR_TAMPIE
)Ë!(
uöt32_t
)
RESET
)

539 
	`HAL_RTCEx_Tam≥r2EvítCÆlback
(
hπc
);

542 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TAMP2F
);

546 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
();

549 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

550 
	}
}

558 
__wók
 
	$HAL_RTCEx_TimeSèmpEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

563 
	}
}

571 
__wók
 
	$HAL_RTCEx_Tam≥r1EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

576 
	}
}

584 
__wók
 
	$HAL_RTCEx_Tam≥r2EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

589 
	}
}

598 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹TimeSèmpEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

600 
uöt32_t
 
tick°¨t
 = 0;

603 
tick°¨t
 = 
	`HAL_GëTick
();

605 
	`__HAL_RTC_TIMESTAMP_GET_FLAG
(
hπc
, 
RTC_FLAG_TSF
Ë=
RESET
)

607 if(
	`__HAL_RTC_TIMESTAMP_GET_FLAG
(
hπc
, 
RTC_FLAG_TSOVF
Ë!
RESET
)

610 
	`__HAL_RTC_TIMESTAMP_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TSOVF
);

613 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

615  
HAL_ERROR
;

618 if(
Timeout
 !
HAL_MAX_DELAY
)

620 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

622 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

623  
HAL_TIMEOUT
;

629 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

631  
HAL_OK
;

632 
	}
}

641 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹Tam≥r1Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

643 
uöt32_t
 
tick°¨t
 = 0;

646 
tick°¨t
 = 
	`HAL_GëTick
();

649 
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
, 
RTC_FLAG_TAMP1F
)=
RESET
)

651 if(
Timeout
 !
HAL_MAX_DELAY
)

653 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

655 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

656  
HAL_TIMEOUT
;

662 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
,
RTC_FLAG_TAMP1F
);

665 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

667  
HAL_OK
;

668 
	}
}

677 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹Tam≥r2Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

679 
uöt32_t
 
tick°¨t
 = 0;

682 
tick°¨t
 = 
	`HAL_GëTick
();

685 
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
, 
RTC_FLAG_TAMP2F
Ë=
RESET
)

687 if(
Timeout
 !
HAL_MAX_DELAY
)

689 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

691 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

692  
HAL_TIMEOUT
;

698 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
,
RTC_FLAG_TAMP2F
);

701 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

703  
HAL_OK
;

704 
	}
}

732 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
WakeUpCou¡î
, uöt32_à
WakeUpClock
)

734 
uöt32_t
 
tick°¨t
 = 0;

737 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
WakeUpClock
));

738 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
WakeUpCou¡î
));

741 
	`__HAL_LOCK
(
hπc
);

743 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

746 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

749 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_WUTE
Ë!
RESET
)

751 
tick°¨t
 = 
	`HAL_GëTick
();

754 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
SET
)

756 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

759 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

761 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

764 
	`__HAL_UNLOCK
(
hπc
);

766  
HAL_TIMEOUT
;

771 
	`__HAL_RTC_WAKEUPTIMER_DISABLE
(
hπc
);

773 
tick°¨t
 = 
	`HAL_GëTick
();

776 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
RESET
)

778 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

781 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

783 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

786 
	`__HAL_UNLOCK
(
hπc
);

788  
HAL_TIMEOUT
;

793 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

796 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)
WakeUpClock
;

799 
hπc
->
In°™˚
->
WUTR
 = (
uöt32_t
)
WakeUpCou¡î
;

802 
	`__HAL_RTC_WAKEUPTIMER_ENABLE
(
hπc
);

805 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

807 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

810 
	`__HAL_UNLOCK
(
hπc
);

812  
HAL_OK
;

813 
	}
}

823 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëWakeUpTimî_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
WakeUpCou¡î
, uöt32_à
WakeUpClock
)

825 
uöt32_t
 
tick°¨t
 = 0;

828 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
WakeUpClock
));

829 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
WakeUpCou¡î
));

832 
	`__HAL_LOCK
(
hπc
);

834 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

837 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

840 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_WUTE
Ë!
RESET
)

842 
tick°¨t
 = 
	`HAL_GëTick
();

845 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
SET
)

847 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

850 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

852 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

855 
	`__HAL_UNLOCK
(
hπc
);

857  
HAL_TIMEOUT
;

862 
	`__HAL_RTC_WAKEUPTIMER_DISABLE
(
hπc
);

864 
tick°¨t
 = 
	`HAL_GëTick
();

867 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
RESET
)

869 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

872 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

874 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

877 
	`__HAL_UNLOCK
(
hπc
);

879  
HAL_TIMEOUT
;

884 
hπc
->
In°™˚
->
WUTR
 = (
uöt32_t
)
WakeUpCou¡î
;

887 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

890 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)
WakeUpClock
;

893 
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
();

895 
EXTI
->
RTSR
 |
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
;

898 
	`__HAL_RTC_WAKEUPTIMER_ENABLE_IT
(
hπc
,
RTC_IT_WUT
);

901 
	`__HAL_RTC_WAKEUPTIMER_ENABLE
(
hπc
);

904 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

906 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

909 
	`__HAL_UNLOCK
(
hπc
);

911  
HAL_OK
;

912 
	}
}

920 
uöt32_t
 
	$HAL_RTCEx_Dó˘iv©eWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
)

922 
uöt32_t
 
tick°¨t
 = 0;

925 
	`__HAL_LOCK
(
hπc
);

927 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

930 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

933 
	`__HAL_RTC_WAKEUPTIMER_DISABLE
(
hπc
);

936 
	`__HAL_RTC_WAKEUPTIMER_DISABLE_IT
(
hπc
,
RTC_IT_WUT
);

939 
tick°¨t
 = 
	`HAL_GëTick
();

942 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTWF
Ë=
RESET
)

944 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

947 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

949 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

952 
	`__HAL_UNLOCK
(
hπc
);

954  
HAL_TIMEOUT
;

959 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

961 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

964 
	`__HAL_UNLOCK
(
hπc
);

966  
HAL_OK
;

967 
	}
}

975 
uöt32_t
 
	$HAL_RTCEx_GëWakeUpTimî
(
RTC_H™dÀTy≥Def
 *
hπc
)

978  ((
uöt32_t
)(
hπc
->
In°™˚
->
WUTR
 & 
RTC_WUTR_WUT
));

979 
	}
}

987 
	$HAL_RTCEx_WakeUpTimîIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
)

989 if(
	`__HAL_RTC_WAKEUPTIMER_GET_IT
(
hπc
, 
RTC_IT_WUT
))

992 if((
uöt32_t
)(
hπc
->
In°™˚
->
CR
 & 
RTC_IT_WUT
Ë!(uöt32_t)
RESET
)

995 
	`HAL_RTCEx_WakeUpTimîEvítCÆlback
(
hπc
);

998 
	`__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_WUTF
);

1003 
	`__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
();

1006 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1007 
	}
}

1015 
__wók
 
	$HAL_RTCEx_WakeUpTimîEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1020 
	}
}

1029 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹WakeUpTimîEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1031 
uöt32_t
 
tick°¨t
 = 0;

1034 
tick°¨t
 = 
	`HAL_GëTick
();

1036 
	`__HAL_RTC_WAKEUPTIMER_GET_FLAG
(
hπc
, 
RTC_FLAG_WUTF
Ë=
RESET
)

1038 if(
Timeout
 !
HAL_MAX_DELAY
)

1040 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1042 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1044  
HAL_TIMEOUT
;

1050 
	`__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_WUTF
);

1053 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1055  
HAL_OK
;

1056 
	}
}

1099 
	$HAL_RTCEx_BKUPWrôe
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
BackupRegi°î
, uöt32_à
D©a
)

1101 
uöt32_t
 
tmp
 = 0;

1104 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
BackupRegi°î
));

1106 
tmp
 = (
uöt32_t
)&(
hπc
->
In°™˚
->
BKP0R
);

1107 
tmp
 +(
BackupRegi°î
 * 4);

1110 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

1111 
	}
}

1122 
uöt32_t
 
	$HAL_RTCEx_BKUPRód
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
BackupRegi°î
)

1124 
uöt32_t
 
tmp
 = 0;

1127 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
BackupRegi°î
));

1129 
tmp
 = (
uöt32_t
)&(
hπc
->
In°™˚
->
BKP0R
);

1130 
tmp
 +(
BackupRegi°î
 * 4);

1133  (*(
__IO
 
uöt32_t
 *)
tmp
);

1134 
	}
}

1153 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëCﬂr£CÆib
(
RTC_H™dÀTy≥Def
* 
hπc
, 
uöt32_t
 
CÆibSign
, uöt32_à
VÆue
)

1156 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
CÆibSign
));

1157 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1160 
	`__HAL_LOCK
(
hπc
);

1162 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1165 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1168 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

1171 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1174 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1177 
	`__HAL_UNLOCK
(
hπc
);

1179  
HAL_ERROR
;

1184 
	`__HAL_RTC_COARSE_CALIB_ENABLE
(
hπc
);

1187 
hπc
->
In°™˚
->
CALIBR
 = (
uöt32_t
)(
CÆibSign
|
VÆue
);

1190 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

1194 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1197 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1200 
	`__HAL_UNLOCK
(
hπc
);

1202  
HAL_OK
;

1203 
	}
}

1211 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eCﬂr£CÆib
(
RTC_H™dÀTy≥Def
* 
hπc
)

1214 
	`__HAL_LOCK
(
hπc
);

1216 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1219 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1222 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

1225 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1228 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1231 
	`__HAL_UNLOCK
(
hπc
);

1233  
HAL_ERROR
;

1238 
	`__HAL_RTC_COARSE_CALIB_DISABLE
(
hπc
);

1241 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

1245 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1248 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1251 
	`__HAL_UNLOCK
(
hπc
);

1253  
HAL_OK
;

1254 
	}
}

1276 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëSmoŸhCÆib
(
RTC_H™dÀTy≥Def
* 
hπc
, 
uöt32_t
 
SmoŸhCÆibPîiod
, uöt32_à
SmoŸhCÆibPlusPul£s
, uöt32_à
SmouthCÆibMöusPul£sVÆue
)

1278 
uöt32_t
 
tick°¨t
 = 0;

1281 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
SmoŸhCÆibPîiod
));

1282 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
SmoŸhCÆibPlusPul£s
));

1283 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
SmouthCÆibMöusPul£sVÆue
));

1286 
	`__HAL_LOCK
(
hπc
);

1288 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1291 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1294 if((
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1297 
tick°¨t
 = 
	`HAL_GëTick
();

1300 (
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1302 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1305 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1308 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1311 
	`__HAL_UNLOCK
(
hπc
);

1313  
HAL_TIMEOUT
;

1319 
hπc
->
In°™˚
->
CALR
 = (
uöt32_t
)((uöt32_t)
SmoŸhCÆibPîiod
 | (uöt32_t)
SmoŸhCÆibPlusPul£s
 | (uöt32_t)
SmouthCÆibMöusPul£sVÆue
);

1322 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1325 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1328 
	`__HAL_UNLOCK
(
hπc
);

1330  
HAL_OK
;

1331 
	}
}

1346 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëSynchroShi·
(
RTC_H™dÀTy≥Def
* 
hπc
, 
uöt32_t
 
Shi·Add1S
, uöt32_à
Shi·SubFS
)

1348 
uöt32_t
 
tick°¨t
 = 0;

1351 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
Shi·Add1S
));

1352 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
Shi·SubFS
));

1355 
	`__HAL_LOCK
(
hπc
);

1357 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1360 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1363 
tick°¨t
 = 
	`HAL_GëTick
();

1366 (
hπc
->
In°™˚
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

1368 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
RTC_TIMEOUT_VALUE
)

1371 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1373 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1376 
	`__HAL_UNLOCK
(
hπc
);

1378  
HAL_TIMEOUT
;

1383 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

1386 
hπc
->
In°™˚
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
Shi·SubFS
Ë| (uöt32_t)(
Shi·Add1S
);

1389 if((
hπc
->
In°™˚
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

1391 if(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

1394 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1396 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1399 
	`__HAL_UNLOCK
(
hπc
);

1401  
HAL_ERROR
;

1408 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1411 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1414 
	`__HAL_UNLOCK
(
hπc
);

1416  
HAL_ERROR
;

1420 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1423 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1426 
	`__HAL_UNLOCK
(
hπc
);

1428  
HAL_OK
;

1429 
	}
}

1441 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëCÆibøti⁄OutPut
(
RTC_H™dÀTy≥Def
* 
hπc
, 
uöt32_t
 
CÆibOuçut
)

1444 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
CÆibOuçut
));

1447 
	`__HAL_LOCK
(
hπc
);

1449 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1452 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1455 
hπc
->
In°™˚
->
CR
 &(
uöt32_t
)~
RTC_CR_COSEL
;

1458 
hπc
->
In°™˚
->
CR
 |(
uöt32_t
)
CÆibOuçut
;

1460 
	`__HAL_RTC_CALIBRATION_OUTPUT_ENABLE
(
hπc
);

1463 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1466 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1469 
	`__HAL_UNLOCK
(
hπc
);

1471  
HAL_OK
;

1472 
	}
}

1480 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eCÆibøti⁄OutPut
(
RTC_H™dÀTy≥Def
* 
hπc
)

1483 
	`__HAL_LOCK
(
hπc
);

1485 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1488 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1490 
	`__HAL_RTC_CALIBRATION_OUTPUT_DISABLE
(
hπc
);

1493 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1496 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1499 
	`__HAL_UNLOCK
(
hπc
);

1501  
HAL_OK
;

1502 
	}
}

1510 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëRefClock
(
RTC_H™dÀTy≥Def
* 
hπc
)

1513 
	`__HAL_LOCK
(
hπc
);

1515 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1518 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1521 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

1524 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1527 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1530 
	`__HAL_UNLOCK
(
hπc
);

1532  
HAL_ERROR
;

1536 
	`__HAL_RTC_CLOCKREF_DETECTION_ENABLE
(
hπc
);

1539 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

1543 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1546 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1549 
	`__HAL_UNLOCK
(
hπc
);

1551  
HAL_OK
;

1552 
	}
}

1560 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eRefClock
(
RTC_H™dÀTy≥Def
* 
hπc
)

1563 
	`__HAL_LOCK
(
hπc
);

1565 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1568 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1571 if(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

1574 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1577 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1580 
	`__HAL_UNLOCK
(
hπc
);

1582  
HAL_ERROR
;

1586 
	`__HAL_RTC_CLOCKREF_DETECTION_DISABLE
(
hπc
);

1589 
hπc
->
In°™˚
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

1593 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1596 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1599 
	`__HAL_UNLOCK
(
hπc
);

1601  
HAL_OK
;

1602 
	}
}

1612 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_E«bÀBy∑ssShadow
(
RTC_H™dÀTy≥Def
* 
hπc
)

1615 
	`__HAL_LOCK
(
hπc
);

1617 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1620 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1623 
hπc
->
In°™˚
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

1626 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1629 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1632 
	`__HAL_UNLOCK
(
hπc
);

1634  
HAL_OK
;

1635 
	}
}

1645 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_DißbÀBy∑ssShadow
(
RTC_H™dÀTy≥Def
* 
hπc
)

1648 
	`__HAL_LOCK
(
hπc
);

1650 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1653 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1656 
hπc
->
In°™˚
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

1659 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1662 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1665 
	`__HAL_UNLOCK
(
hπc
);

1667  
HAL_OK
;

1668 
	}
}

1695 
__wók
 
	$HAL_RTCEx_AœrmBEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1700 
	}
}

1709 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹AœrmBEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1711 
uöt32_t
 
tick°¨t
 = 0;

1714 
tick°¨t
 = 
	`HAL_GëTick
();

1716 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRBF
Ë=
RESET
)

1718 if(
Timeout
 !
HAL_MAX_DELAY
)

1720 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1722 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1723  
HAL_TIMEOUT
;

1729 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRBF
);

1732 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1734  
HAL_OK
;

1735 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sai.c

163 
	~"°m32f4xx_hÆ.h
"

174 #ifde‡
HAL_SAI_MODULE_ENABLED


176 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

177 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

184 
SAI_MODE_DMA
,

185 
SAI_MODE_IT


186 }
	tSAI_ModeTy≥def
;

194 
	#SAI_FIFO_SIZE
 8

	)

195 
	#SAI_DEFAULT_TIMEOUT
 4

	)

201 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFF04C010)

	)

202 
	#FRCR_CLEAR_MASK
 ((
uöt32_t
)0xFFF88000)

	)

203 
	#SLOTR_CLEAR_MASK
 ((
uöt32_t
)0x0000F020)

	)

205 
	#SAI_TIMEOUT_VALUE
 10

	)

209 
	`SAI_FûlFifo
(
SAI_H™dÀTy≥Def
 *
hßi
);

210 
uöt32_t
 
	`SAI_I¡îru±Fœg
(
SAI_H™dÀTy≥Def
 *
hßi
, uöt32_à
mode
);

211 
HAL_SètusTy≥Def
 
	`SAI_InôI2S
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt32_t
 
¥Ÿocﬁ
, uöt32_à
d©asize
, uöt32_à
nb¶Ÿ
);

212 
HAL_SètusTy≥Def
 
	`SAI_InôPCM
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt32_t
 
¥Ÿocﬁ
, uöt32_à
d©asize
, uöt32_à
nb¶Ÿ
);

214 
HAL_SètusTy≥Def
 
	`SAI_DißbÀ
(
SAI_H™dÀTy≥Def
 *
hßi
);

215 
	`SAI_Tønsmô_IT8Bô
(
SAI_H™dÀTy≥Def
 *
hßi
);

216 
	`SAI_Tønsmô_IT16Bô
(
SAI_H™dÀTy≥Def
 *
hßi
);

217 
	`SAI_Tønsmô_IT32Bô
(
SAI_H™dÀTy≥Def
 *
hßi
);

218 
	`SAI_Re˚ive_IT8Bô
(
SAI_H™dÀTy≥Def
 *
hßi
);

219 
	`SAI_Re˚ive_IT16Bô
(
SAI_H™dÀTy≥Def
 *
hßi
);

220 
	`SAI_Re˚ive_IT32Bô
(
SAI_H™dÀTy≥Def
 *
hßi
);

222 
	`SAI_DMATxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

223 
	`SAI_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

224 
	`SAI_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

225 
	`SAI_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

226 
	`SAI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

277 
HAL_SètusTy≥Def
 
	$HAL_SAI_InôPrŸocﬁ
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt32_t
 
¥Ÿocﬁ
, uöt32_à
d©asize
, uöt32_à
nb¶Ÿ
)

279 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

282 
	`as£π_∑øm
(
	`IS_SAI_SUPPORTED_PROTOCOL
(
¥Ÿocﬁ
));

283 
	`as£π_∑øm
(
	`IS_SAI_PROTOCOL_DATASIZE
(
d©asize
));

285 
¥Ÿocﬁ
)

287 
SAI_I2S_STANDARD
 :

288 
SAI_I2S_MSBJUSTIFIED
 :

289 
SAI_I2S_LSBJUSTIFIED
 :

290 
°©us
 = 
	`SAI_InôI2S
(
hßi
, 
¥Ÿocﬁ
, 
d©asize
, 
nb¶Ÿ
);

292 
SAI_PCM_LONG
 :

293 
SAI_PCM_SHORT
 :

294 
°©us
 = 
	`SAI_InôPCM
(
hßi
, 
¥Ÿocﬁ
, 
d©asize
, 
nb¶Ÿ
);

297 
°©us
 = 
HAL_ERROR
;

301 if(
°©us
 =
HAL_OK
)

303 
°©us
 = 
	`HAL_SAI_Inô
(
hßi
);

306  
°©us
;

307 
	}
}

316 
HAL_SètusTy≥Def
 
	$HAL_SAI_Inô
(
SAI_H™dÀTy≥Def
 *
hßi
)

318 
uöt32_t
 
tmp˛ock
 = 0;

321 
uöt32_t
 
‰eq
 = 0;

324 if(
hßi
 =
NULL
)

326  
HAL_ERROR
;

330 
	`as£π_∑øm
(
	`IS_SAI_AUDIO_FREQUENCY
(
hßi
->
Inô
.
AudioFªquícy
));

331 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_PROTOCOL
(
hßi
->
Inô
.
PrŸocﬁ
));

332 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MODE
(
hßi
->
Inô
.
AudioMode
));

333 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SYNCEXT
(
hßi
->
Inô
.
SynchroExt
));

334 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_DATASIZE
(
hßi
->
Inô
.
D©aSize
));

335 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIRST_BIT
(
hßi
->
Inô
.
Fú°Bô
));

336 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_CLOCK_STROBING
(
hßi
->
Inô
.
ClockSåobög
));

337 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SYNCHRO
(
hßi
->
Inô
.
Synchro
));

338 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_OUTPUT_DRIVE
(
hßi
->
Inô
.
OuçutDrive
));

339 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_NODIVIDER
(
hßi
->
Inô
.
NoDividî
));

340 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIFO_THRESHOLD
(
hßi
->
Inô
.
FIFOThªshﬁd
));

341 
	`as£π_∑øm
(
	`IS_SAI_MONO_STEREO_MODE
(
hßi
->
Inô
.
M⁄oSãªoMode
));

342 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_COMPANDING_MODE
(
hßi
->
Inô
.
Com∑ndögMode
));

343 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_TRISTATE_MANAGEMENT
(
hßi
->
Inô
.
TriSèã
));

346 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FRAME_LENGTH
(
hßi
->
FømeInô
.
FømeLígth
));

347 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_ACTIVE_FRAME
(
hßi
->
FømeInô
.
A˘iveFømeLígth
));

348 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_DEFINITION
(
hßi
->
FømeInô
.
FSDeföôi⁄
));

349 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_POLARITY
(
hßi
->
FømeInô
.
FSPﬁ¨ôy
));

350 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FS_OFFSET
(
hßi
->
FømeInô
.
FSOff£t
));

353 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_FIRSTBIT_OFFSET
(
hßi
->
SlŸInô
.
Fú°BôOff£t
));

354 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SLOT_SIZE
(
hßi
->
SlŸInô
.
SlŸSize
));

355 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_SLOT_NUMBER
(
hßi
->
SlŸInô
.
SlŸNumbî
));

356 
	`as£π_∑øm
(
	`IS_SAI_SLOT_ACTIVE
(
hßi
->
SlŸInô
.
SlŸA˘ive
));

358 if(
hßi
->
Sèã
 =
HAL_SAI_STATE_RESET
)

361 
hßi
->
Lock
 = 
HAL_UNLOCKED
;

364 
	`HAL_SAI_M•Inô
(
hßi
);

367 
hßi
->
Sèã
 = 
HAL_SAI_STATE_BUSY
;

370 
	`SAI_DißbÀ
(
hßi
);

373 
	`SAI_BlockSynchroC⁄fig
(
hßi
);

379 if(
hßi
->
Inô
.
AudioFªquícy
 !
SAI_AUDIO_FREQUENCY_MCKDIV
)

382 
‰eq
 = 
	`SAI_GëI≈utClock
(
hßi
);

385 
tmp˛ock
 = (((
‰eq
 * 10Ë/ ((
hßi
->
Inô
.
AudioFªquícy
) * 512)));

387 
hßi
->
Inô
.
Mckdiv
 = 
tmp˛ock
 / 10;

390 if((
tmp˛ock
 % 10) > 8)

392 
hßi
->
Inô
.
Mckdiv
+= 1;

398 
hßi
->
In°™˚
->
CR1
&=~(
SAI_xCR1_MODE
 | 
SAI_xCR1_PRTCFG
 | 
SAI_xCR1_DS
 | \

399 
SAI_xCR1_LSBFIRST
 | 
SAI_xCR1_CKSTR
 | 
SAI_xCR1_SYNCEN
 |\

400 
SAI_xCR1_MONO
 | 
SAI_xCR1_OUTDRIV
 | 
SAI_xCR1_DMAEN
 | \

401 
SAI_xCR1_NODIV
 | 
SAI_xCR1_MCKDIV
);

403 
hßi
->
In°™˚
->
CR1
|(hßi->
Inô
.
AudioMode
 | hßi->Inô.
PrŸocﬁ
 | \

404 
hßi
->
Inô
.
D©aSize
 | hßi->Inô.
Fú°Bô
 | \

405 
hßi
->
Inô
.
ClockSåobög
 | hßi->Inô.
Synchro
 | \

406 
hßi
->
Inô
.
M⁄oSãªoMode
 | hßi->Inô.
OuçutDrive
 | \

407 
hßi
->
Inô
.
NoDividî
 | (hßi->Inô.
Mckdiv
 << 20Ë| hßi->Inô.
Com∑ndögMode
);

410 
hßi
->
In°™˚
->
CR2
&~(
SAI_xCR2_FTH
 | 
SAI_xCR2_FFLUSH
 | 
SAI_xCR2_COMP
);

411 
hßi
->
In°™˚
->
CR2
|(hßi->
Inô
.
FIFOThªshﬁd
 | hßi->Inô.
Com∑ndögMode
 | hßi->Inô.
TriSèã
);

415 
hßi
->
In°™˚
->
FRCR
&=(~(
SAI_xFRCR_FRL
 | 
SAI_xFRCR_FSALL
 | 
SAI_xFRCR_FSDEF
 | \

416 
SAI_xFRCR_FSPO
 | 
SAI_xFRCR_FSOFF
));

417 
hßi
->
In°™˚
->
FRCR
|=((hßi->
FømeInô
.
FømeLígth
 - 1) |

418 
hßi
->
FømeInô
.
FSOff£t
 |

419 
hßi
->
FømeInô
.
FSDeföôi⁄
 |

420 
hßi
->
FømeInô
.
FSPﬁ¨ôy
 |

421 ((
hßi
->
FømeInô
.
A˘iveFømeLígth
 - 1) << 8));

425 
hßi
->
In°™˚
->
SLOTR
&(~(
SAI_xSLOTR_FBOFF
 | 
SAI_xSLOTR_SLOTSZ
 | \

426 
SAI_xSLOTR_NBSLOT
 | 
SAI_xSLOTR_SLOTEN
 ));

428 
hßi
->
In°™˚
->
SLOTR
|hßi->
SlŸInô
.
Fú°BôOff£t
 | hßi->SlŸInô.
SlŸSize


429 | 
hßi
->
SlŸInô
.
SlŸA˘ive
 | ((hßi->SlŸInô.
SlŸNumbî
 - 1) << 8);

432 
hßi
->
Eº‹Code
 = 
HAL_SAI_ERROR_NONE
;

435 
hßi
->
Sèã

HAL_SAI_STATE_READY
;

438 
	`__HAL_UNLOCK
(
hßi
);

440  
HAL_OK
;

441 
	}
}

449 
HAL_SètusTy≥Def
 
	$HAL_SAI_DeInô
(
SAI_H™dÀTy≥Def
 *
hßi
)

452 if(
hßi
 =
NULL
)

454  
HAL_ERROR
;

457 
hßi
->
Sèã
 = 
HAL_SAI_STATE_BUSY
;

460 
hßi
->
In°™˚
->
IMR
 = 0;

461 
hßi
->
In°™˚
->
CLRFR
 = 0xFFFFFFFF;

464 
	`SAI_DißbÀ
(
hßi
);

467 
	`SET_BIT
(
hßi
->
In°™˚
->
CR2
, 
SAI_xCR2_FFLUSH
);

470 
	`HAL_SAI_M•DeInô
(
hßi
);

473 
hßi
->
Eº‹Code
 = 
HAL_SAI_ERROR_NONE
;

476 
hßi
->
Sèã
 = 
HAL_SAI_STATE_RESET
;

479 
	`__HAL_UNLOCK
(
hßi
);

481  
HAL_OK
;

482 
	}
}

490 
__wók
 
	$HAL_SAI_M•Inô
(
SAI_H™dÀTy≥Def
 *
hßi
)

495 
	}
}

503 
__wók
 
	$HAL_SAI_M•DeInô
(
SAI_H™dÀTy≥Def
 *
hßi
)

508 
	}
}

568 
HAL_SètusTy≥Def
 
	$HAL_SAI_Tønsmô
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
* 
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

570 
uöt32_t
 
tick°¨t
 = 0;

572 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

574  
HAL_ERROR
;

577 if(
hßi
->
Sèã
 =
HAL_SAI_STATE_READY
)

580 
	`__HAL_LOCK
(
hßi
);

582 
hßi
->
Sèã
 = 
HAL_SAI_STATE_BUSY_TX
;

583 
hßi
->
Eº‹Code
 = 
HAL_SAI_ERROR_NONE
;

584 
hßi
->
X„rSize
 = 
Size
;

585 
hßi
->
X„rCou¡
 = 
Size
;

586 
hßi
->
pBuffPå
 = 
pD©a
;

589 if((
hßi
->
In°™˚
->
CR1
 & 
SAI_xCR1_SAIEN
) != SAI_xCR1_SAIEN)

592 
	`SAI_FûlFifo
(
hßi
);

594 
	`__HAL_SAI_ENABLE
(
hßi
);

597 
hßi
->
X„rCou¡
 > 0)

600 if((
hßi
->
In°™˚
->
SR
 & 
SAI_xSR_FLVL
Ë!
SAI_FIFOSTATUS_FULL
)

602 if((
hßi
->
Inô
.
D©aSize
 =
SAI_DATASIZE_8
Ë&& (hßi->Inô.
Com∑ndögMode
 =
SAI_NOCOMPANDING
))

604 
hßi
->
In°™˚
->
DR
 = (*hßi->
pBuffPå
++);

606 if(
hßi
->
Inô
.
D©aSize
 <
SAI_DATASIZE_16
)

608 
hßi
->
In°™˚
->
DR
 = *((
uöt16_t
 *)hßi->
pBuffPå
);

609 
hßi
->
pBuffPå
+= 2;

613 
hßi
->
In°™˚
->
DR
 = *((
uöt32_t
 *)hßi->
pBuffPå
);

614 
hßi
->
pBuffPå
+= 4;

616 
hßi
->
X„rCou¡
--;

621 
tick°¨t
 = 
	`HAL_GëTick
();

623 if(
Timeout
 !
HAL_MAX_DELAY
)

625 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

628 
hßi
->
Eº‹Code
 |
HAL_SAI_ERROR_TIMEOUT
;

631 
	`__HAL_UNLOCK
(
hßi
);

634 
hßi
->
Sèã
 = 
HAL_SAI_STATE_TIMEOUT
;

636  
HAL_TIMEOUT
;

642 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

645 
	`__HAL_UNLOCK
(
hßi
);

647  
HAL_OK
;

651  
HAL_BUSY
;

653 
	}
}

664 
HAL_SètusTy≥Def
 
	$HAL_SAI_Re˚ive
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

666 
uöt32_t
 
tick°¨t
 = 0;

668 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

670  
HAL_ERROR
;

673 if(
hßi
->
Sèã
 =
HAL_SAI_STATE_READY
)

676 
	`__HAL_LOCK
(
hßi
);

678 
hßi
->
Sèã
 = 
HAL_SAI_STATE_BUSY_RX
;

679 
hßi
->
Eº‹Code
 = 
HAL_SAI_ERROR_NONE
;

680 
hßi
->
pBuffPå
 = 
pD©a
;

681 
hßi
->
X„rSize
 = 
Size
;

682 
hßi
->
X„rCou¡
 = 
Size
;

685 if((
hßi
->
In°™˚
->
CR1
 & 
SAI_xCR1_SAIEN
) != SAI_xCR1_SAIEN)

688 
	`__HAL_SAI_ENABLE
(
hßi
);

692 
hßi
->
X„rCou¡
 > 0)

695 if((
hßi
->
In°™˚
->
SR
 & 
SAI_xSR_FLVL
Ë!
SAI_FIFOSTATUS_EMPTY
)

697 if((
hßi
->
Inô
.
D©aSize
 =
SAI_DATASIZE_8
Ë&& (hßi->Inô.
Com∑ndögMode
 =
SAI_NOCOMPANDING
))

699 (*
hßi
->
pBuffPå
++Ëhßi->
In°™˚
->
DR
;

701 if(
hßi
->
Inô
.
D©aSize
 <
SAI_DATASIZE_16
)

703 *((
uöt16_t
*)
hßi
->
pBuffPå
Ëhßi->
In°™˚
->
DR
;

704 
hßi
->
pBuffPå
+= 2;

708 *((
uöt32_t
*)
hßi
->
pBuffPå
Ëhßi->
In°™˚
->
DR
;

709 
hßi
->
pBuffPå
+= 4;

711 
hßi
->
X„rCou¡
--;

716 
tick°¨t
 = 
	`HAL_GëTick
();

718 if(
Timeout
 !
HAL_MAX_DELAY
)

720 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

723 
hßi
->
Eº‹Code
 |
HAL_SAI_ERROR_TIMEOUT
;

726 
	`__HAL_UNLOCK
(
hßi
);

729 
hßi
->
Sèã
 = 
HAL_SAI_STATE_TIMEOUT
;

731  
HAL_TIMEOUT
;

737 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

740 
	`__HAL_UNLOCK
(
hßi
);

742  
HAL_OK
;

746  
HAL_BUSY
;

748 
	}
}

758 
HAL_SètusTy≥Def
 
	$HAL_SAI_Tønsmô_IT
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

760 if(
hßi
->
Sèã
 =
HAL_SAI_STATE_READY
)

762 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

764  
HAL_ERROR
;

767 
hßi
->
pBuffPå
 = 
pD©a
;

768 
hßi
->
X„rSize
 = 
Size
;

769 
hßi
->
X„rCou¡
 = 
Size
;

772 
	`__HAL_LOCK
(
hßi
);

774 
hßi
->
Sèã
 = 
HAL_SAI_STATE_BUSY_TX
;

776 if((
hßi
->
Inô
.
D©aSize
 =
SAI_DATASIZE_8
Ë&& (hßi->Inô.
Com∑ndögMode
 =
SAI_NOCOMPANDING
))

778 
hßi
->
I¡îru±Sîvi˚Routöe
 = 
SAI_Tønsmô_IT8Bô
;

780 if(
hßi
->
Inô
.
D©aSize
 <
SAI_DATASIZE_16
)

782 
hßi
->
I¡îru±Sîvi˚Routöe
 = 
SAI_Tønsmô_IT16Bô
;

786 
hßi
->
I¡îru±Sîvi˚Routöe
 = 
SAI_Tønsmô_IT32Bô
;

790 
	`__HAL_SAI_ENABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_IT
));

793 if((
hßi
->
In°™˚
->
CR1
 & 
SAI_xCR1_SAIEN
) != SAI_xCR1_SAIEN)

796 
	`SAI_FûlFifo
(
hßi
);

799 
	`__HAL_SAI_ENABLE
(
hßi
);

802 
	`__HAL_UNLOCK
(
hßi
);

804  
HAL_OK
;

808  
HAL_BUSY
;

810 
	}
}

820 
HAL_SètusTy≥Def
 
	$HAL_SAI_Re˚ive_IT
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

823 if(
hßi
->
Sèã
 =
HAL_SAI_STATE_READY
)

825 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

827  
HAL_ERROR
;

830 
hßi
->
pBuffPå
 = 
pD©a
;

831 
hßi
->
X„rSize
 = 
Size
;

832 
hßi
->
X„rCou¡
 = 
Size
;

835 
	`__HAL_LOCK
(
hßi
);

837 
hßi
->
Sèã
 = 
HAL_SAI_STATE_BUSY_RX
;

839 if((
hßi
->
Inô
.
D©aSize
 =
SAI_DATASIZE_8
Ë&& (hßi->Inô.
Com∑ndögMode
 =
SAI_NOCOMPANDING
))

841 
hßi
->
I¡îru±Sîvi˚Routöe
 = 
SAI_Re˚ive_IT8Bô
;

843 if(
hßi
->
Inô
.
D©aSize
 <
SAI_DATASIZE_16
)

845 
hßi
->
I¡îru±Sîvi˚Routöe
 = 
SAI_Re˚ive_IT16Bô
;

849 
hßi
->
I¡îru±Sîvi˚Routöe
 = 
SAI_Re˚ive_IT32Bô
;

852 
	`__HAL_SAI_ENABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_IT
));

855 if((
hßi
->
In°™˚
->
CR1
 & 
SAI_xCR1_SAIEN
) != SAI_xCR1_SAIEN)

858 
	`__HAL_SAI_ENABLE
(
hßi
);

862 
	`__HAL_UNLOCK
(
hßi
);

864  
HAL_OK
;

868  
HAL_BUSY
;

870 
	}
}

878 
HAL_SètusTy≥Def
 
	$HAL_SAI_DMAPau£
(
SAI_H™dÀTy≥Def
 *
hßi
)

881 
	`__HAL_LOCK
(
hßi
);

884 
hßi
->
In°™˚
->
CR1
 &~
SAI_xCR1_DMAEN
;

887 
	`__HAL_UNLOCK
(
hßi
);

889  
HAL_OK
;

890 
	}
}

898 
HAL_SètusTy≥Def
 
	$HAL_SAI_DMAResume
(
SAI_H™dÀTy≥Def
 *
hßi
)

901 
	`__HAL_LOCK
(
hßi
);

904 
hßi
->
In°™˚
->
CR1
 |
SAI_xCR1_DMAEN
;

907 i‡((
hßi
->
In°™˚
->
CR1
 & 
SAI_xCR1_SAIEN
Ë=
RESET
)

910 
	`__HAL_SAI_ENABLE
(
hßi
);

914 
	`__HAL_UNLOCK
(
hßi
);

916  
HAL_OK
;

917 
	}
}

925 
HAL_SètusTy≥Def
 
	$HAL_SAI_DMASt›
(
SAI_H™dÀTy≥Def
 *
hßi
)

928 
	`__HAL_LOCK
(
hßi
);

931 
hßi
->
In°™˚
->
CR1
 &~
SAI_xCR1_DMAEN
;

934 if(
hßi
->
hdm©x
 !
NULL
)

936 
	`HAL_DMA_Ab‹t
(
hßi
->
hdm©x
);

939 if(
hßi
->
hdm¨x
 !
NULL
)

941 
	`HAL_DMA_Ab‹t
(
hßi
->
hdm¨x
);

945 
	`SAI_DißbÀ
(
hßi
);

947 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

950 
	`__HAL_UNLOCK
(
hßi
);

952  
HAL_OK
;

953 
	}
}

961 
HAL_SètusTy≥Def
 
	$HAL_SAI_Ab‹t
(
SAI_H™dÀTy≥Def
 *
hßi
)

964 
hßi
->
In°™˚
->
CR1
 &~
SAI_xCR1_DMAEN
;

967 if(
hßi
->
hdm©x
 !
NULL
)

969 
	`HAL_DMA_Ab‹t
(
hßi
->
hdm©x
);

972 if(
hßi
->
hdm¨x
 !
NULL
)

974 
	`HAL_DMA_Ab‹t
(
hßi
->
hdm¨x
);

978 
hßi
->
In°™˚
->
IMR
 = 0;

979 
hßi
->
In°™˚
->
CLRFR
 = 0xFFFFFFFF;

982 
	`SAI_DißbÀ
(
hßi
);

985 
	`SET_BIT
(
hßi
->
In°™˚
->
CR2
, 
SAI_xCR2_FFLUSH
);

987 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

990 
	`__HAL_UNLOCK
(
hßi
);

992  
HAL_OK
;

993 
	}
}

1003 
HAL_SètusTy≥Def
 
	$HAL_SAI_Tønsmô_DMA
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1005 
uöt32_t
 *
tmp
;

1007 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1009  
HAL_ERROR
;

1012 if(
hßi
->
Sèã
 =
HAL_SAI_STATE_READY
)

1014 
hßi
->
pBuffPå
 = 
pD©a
;

1015 
hßi
->
X„rSize
 = 
Size
;

1016 
hßi
->
X„rCou¡
 = 
Size
;

1019 
	`__HAL_LOCK
(
hßi
);

1021 
hßi
->
Sèã
 = 
HAL_SAI_STATE_BUSY_TX
;

1024 
hßi
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
SAI_DMATxHÆfC∂t
;

1027 
hßi
->
hdm©x
->
X„rC∂tCÆlback
 = 
SAI_DMATxC∂t
;

1030 
hßi
->
hdm©x
->
X„rEº‹CÆlback
 = 
SAI_DMAEº‹
;

1033 
tmp
 = (
uöt32_t
*)&
pD©a
;

1034 
	`HAL_DMA_Sèπ_IT
(
hßi
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hßi->
In°™˚
->
DR
, hßi->
X„rSize
);

1037 if((
hßi
->
In°™˚
->
CR1
 & 
SAI_xCR1_SAIEN
) != SAI_xCR1_SAIEN)

1040 
	`__HAL_SAI_ENABLE
(
hßi
);

1044 
	`__HAL_SAI_ENABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_DMA
));

1047 
hßi
->
In°™˚
->
CR1
 |
SAI_xCR1_DMAEN
;

1050 
	`__HAL_UNLOCK
(
hßi
);

1052  
HAL_OK
;

1056  
HAL_BUSY
;

1058 
	}
}

1068 
HAL_SètusTy≥Def
 
	$HAL_SAI_Re˚ive_DMA
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1070 
uöt32_t
 *
tmp
;

1072 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1074  
HAL_ERROR
;

1077 if(
hßi
->
Sèã
 =
HAL_SAI_STATE_READY
)

1079 
hßi
->
pBuffPå
 = 
pD©a
;

1080 
hßi
->
X„rSize
 = 
Size
;

1081 
hßi
->
X„rCou¡
 = 
Size
;

1084 
	`__HAL_LOCK
(
hßi
);

1086 
hßi
->
Sèã
 = 
HAL_SAI_STATE_BUSY_RX
;

1089 
hßi
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SAI_DMARxHÆfC∂t
;

1092 
hßi
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SAI_DMARxC∂t
;

1095 
hßi
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SAI_DMAEº‹
;

1098 
tmp
 = (
uöt32_t
*)&
pD©a
;

1099 
	`HAL_DMA_Sèπ_IT
(
hßi
->
hdm¨x
, (
uöt32_t
)&hßi->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, hßi->
X„rSize
);

1102 if((
hßi
->
In°™˚
->
CR1
 & 
SAI_xCR1_SAIEN
) != SAI_xCR1_SAIEN)

1105 
	`__HAL_SAI_ENABLE
(
hßi
);

1109 
	`__HAL_SAI_ENABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_DMA
));

1112 
hßi
->
In°™˚
->
CR1
 |
SAI_xCR1_DMAEN
;

1115 
	`__HAL_UNLOCK
(
hßi
);

1117  
HAL_OK
;

1121  
HAL_BUSY
;

1123 
	}
}

1132 
HAL_SètusTy≥Def
 
	$HAL_SAI_E«bÀTxMuãMode
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt16_t
 
vÆ
)

1134 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MUTE_VALUE
(
vÆ
));

1136 if(
hßi
->
Sèã
 !
HAL_SAI_STATE_RESET
)

1138 
	`CLEAR_BIT
(
hßi
->
In°™˚
->
CR2
, 
SAI_xCR2_MUTEVAL
 | 
SAI_xCR2_MUTE
);

1139 
	`SET_BIT
(
hßi
->
In°™˚
->
CR2
, 
SAI_xCR2_MUTE
 | 
vÆ
);

1140  
HAL_OK
;

1142  
HAL_ERROR
;

1143 
	}
}

1151 
HAL_SètusTy≥Def
 
	$HAL_SAI_DißbÀTxMuãMode
(
SAI_H™dÀTy≥Def
 *
hßi
)

1153 if(
hßi
->
Sèã
 !
HAL_SAI_STATE_RESET
)

1155 
	`CLEAR_BIT
(
hßi
->
In°™˚
->
CR2
, 
SAI_xCR2_MUTEVAL
 | 
SAI_xCR2_MUTE
);

1156  
HAL_OK
;

1158  
HAL_ERROR
;

1159 
	}
}

1169 
HAL_SètusTy≥Def
 
	$HAL_SAI_E«bÀRxMuãMode
(
SAI_H™dÀTy≥Def
 *
hßi
, 
SAIˇŒback
 
ˇŒback
, 
uöt16_t
 
cou¡î
)

1171 
	`as£π_∑øm
(
	`IS_SAI_BLOCK_MUTE_COUNTER
(
cou¡î
));

1173 if(
hßi
->
Sèã
 !
HAL_SAI_STATE_RESET
)

1176 
	`CLEAR_BIT
(
hßi
->
In°™˚
->
CR2
, 
SAI_xCR2_MUTECNT
);

1177 
	`SET_BIT
(
hßi
->
In°™˚
->
CR2
, (
uöt32_t
)((uöt32_t)
cou¡î
 << 6));

1178 
hßi
->
muãˇŒback
 = 
ˇŒback
;

1180 
	`__HAL_SAI_ENABLE_IT
(
hßi
, 
SAI_IT_MUTEDET
);

1181  
HAL_OK
;

1183  
HAL_ERROR
;

1184 
	}
}

1192 
HAL_SètusTy≥Def
 
	$HAL_SAI_DißbÀRxMuãMode
(
SAI_H™dÀTy≥Def
 *
hßi
)

1194 if(
hßi
->
Sèã
 !
HAL_SAI_STATE_RESET
)

1197 
hßi
->
muãˇŒback
 = (
SAIˇŒback
)
NULL
;

1199 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
SAI_IT_MUTEDET
);

1200  
HAL_OK
;

1202  
HAL_ERROR
;

1203 
	}
}

1211 
	$HAL_SAI_IRQH™dÀr
(
SAI_H™dÀTy≥Def
 *
hßi
)

1213 if(
hßi
->
Sèã
 !
HAL_SAI_STATE_RESET
)

1215 
uöt32_t
 
tmpFœg
 = 
hßi
->
In°™˚
->
SR
;

1216 
uöt32_t
 
tmpItSour˚
 = 
hßi
->
In°™˚
->
IMR
;

1218 if(((
tmpFœg
 & 
SAI_xSR_FREQ
Ë=SAI_xSR_FREQË&& ((
tmpItSour˚
 & 
SAI_IT_FREQ
) == SAI_IT_FREQ))

1220 
hßi
->
	`I¡îru±Sîvi˚Routöe
(hsai);

1224 if(
tmpFœg
 != 0x00000000)

1227 if(((
tmpFœg
 & 
SAI_FLAG_OVRUDR
Ë=SAI_FLAG_OVRUDRË&& ((
tmpItSour˚
 & 
SAI_IT_OVRUDR
) == SAI_IT_OVRUDR))

1230 
	`__HAL_SAI_CLEAR_FLAG
(
hßi
, 
SAI_FLAG_OVRUDR
);

1232 
hßi
->
Eº‹Code
 = ((hßi->
Sèã
 =
HAL_SAI_STATE_BUSY_RX
Ë? 
HAL_SAI_ERROR_OVR
 : 
HAL_SAI_ERROR_UDR
);

1234 
	`HAL_SAI_Eº‹CÆlback
(
hßi
);

1238 if(((
tmpFœg
 & 
SAI_FLAG_MUTEDET
Ë=SAI_FLAG_MUTEDETË&& ((
tmpItSour˚
 & 
SAI_IT_MUTEDET
) == SAI_IT_MUTEDET))

1241 
	`__HAL_SAI_CLEAR_FLAG
(
hßi
, 
SAI_FLAG_MUTEDET
);

1243 if(
hßi
->
muãˇŒback
 !(
SAIˇŒback
)
NULL
)

1246 
hßi
->
	`muãˇŒback
();

1251 if(((
tmpFœg
 & 
SAI_FLAG_AFSDET
Ë=SAI_FLAG_AFSDETË&& ((
tmpItSour˚
 & 
SAI_IT_AFSDET
) == SAI_IT_AFSDET))

1254 
hßi
->
Eº‹Code
 = 
HAL_SAI_ERROR_AFSDET
;

1255 
	`HAL_SAI_Ab‹t
(
hßi
);

1256 
	`HAL_SAI_Eº‹CÆlback
(
hßi
);

1260 if(((
tmpFœg
 & 
SAI_FLAG_LFSDET
Ë=SAI_FLAG_LFSDETË&& ((
tmpItSour˚
 & 
SAI_IT_LFSDET
) == SAI_IT_LFSDET))

1263 
hßi
->
Eº‹Code
 = 
HAL_SAI_ERROR_LFSDET
;

1264 
	`HAL_SAI_Ab‹t
(
hßi
);

1265 
	`HAL_SAI_Eº‹CÆlback
(
hßi
);

1269 if(((
tmpFœg
 & 
SAI_FLAG_WCKCFG
Ë=SAI_FLAG_WCKCFGË&& ((
tmpItSour˚
 & 
SAI_IT_WCKCFG
) == SAI_IT_WCKCFG))

1272 
hßi
->
Eº‹Code
 = 
HAL_SAI_ERROR_WCKCFG
;

1273 
	`HAL_SAI_Ab‹t
(
hßi
);

1274 
	`HAL_SAI_Eº‹CÆlback
(
hßi
);

1278 
	}
}

1286 
__wók
 
	$HAL_SAI_TxC∂tCÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
)

1291 
	}
}

1299 
__wók
 
	$HAL_SAI_TxHÆfC∂tCÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
)

1304 
	}
}

1312 
__wók
 
	$HAL_SAI_RxC∂tCÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
)

1317 
	}
}

1325 
__wók
 
	$HAL_SAI_RxHÆfC∂tCÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
)

1330 
	}
}

1338 
__wók
 
	$HAL_SAI_Eº‹CÆlback
(
SAI_H™dÀTy≥Def
 *
hßi
)

1343 
	}
}

1371 
HAL_SAI_SèãTy≥Def
 
	$HAL_SAI_GëSèã
(
SAI_H™dÀTy≥Def
 *
hßi
)

1373  
hßi
->
Sèã
;

1374 
	}
}

1382 
uöt32_t
 
	$HAL_SAI_GëEº‹
(
SAI_H™dÀTy≥Def
 *
hßi
)

1384  
hßi
->
Eº‹Code
;

1385 
	}
}

1402 
HAL_SètusTy≥Def
 
	$SAI_InôI2S
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt32_t
 
¥Ÿocﬁ
, uöt32_à
d©asize
, uöt32_à
nb¶Ÿ
)

1405 
	`as£π_∑øm
(
	`IS_SAI_SUPPORTED_PROTOCOL
(
¥Ÿocﬁ
));

1406 
	`as£π_∑øm
(
	`IS_SAI_PROTOCOL_DATASIZE
(
d©asize
));

1408 
hßi
->
Inô
.
PrŸocﬁ
 = 
SAI_FREE_PROTOCOL
;

1409 
hßi
->
Inô
.
Fú°Bô
 = 
SAI_FIRSTBIT_MSB
;

1410 
hßi
->
Inô
.
ClockSåobög
 = 
SAI_CLOCKSTROBING_FALLINGEDGE
;

1411 
hßi
->
FømeInô
.
FSDeföôi⁄
 = 
SAI_FS_CHANNEL_IDENTIFICATION
;

1412 
hßi
->
SlŸInô
.
SlŸA˘ive
 = 
SAI_SLOTACTIVE_ALL
;

1413 
hßi
->
SlŸInô
.
Fú°BôOff£t
 = 0;

1414 
hßi
->
SlŸInô
.
SlŸNumbî
 = 
nb¶Ÿ
;

1417 if((
nb¶Ÿ
 & 0x1) != 0 )

1419  
HAL_ERROR
;

1422 
¥Ÿocﬁ
)

1424 
SAI_I2S_STANDARD
 :

1425 
hßi
->
FømeInô
.
FSPﬁ¨ôy
 = 
SAI_FS_ACTIVE_LOW
;

1426 
hßi
->
FømeInô
.
FSOff£t
 = 
SAI_FS_BEFOREFIRSTBIT
;

1428 
SAI_I2S_MSBJUSTIFIED
 :

1429 
SAI_I2S_LSBJUSTIFIED
 :

1430 
hßi
->
FømeInô
.
FSPﬁ¨ôy
 = 
SAI_FS_ACTIVE_HIGH
;

1431 
hßi
->
FømeInô
.
FSOff£t
 = 
SAI_FS_FIRSTBIT
;

1434  
HAL_ERROR
;

1438 
hßi
->
Inô
.
D©aSize
 = 0xFFFFFFFF;

1439 
d©asize
)

1441 
SAI_PROTOCOL_DATASIZE_16BIT
:

1442 
hßi
->
Inô
.
D©aSize
 = 
SAI_DATASIZE_16
;

1443 
hßi
->
FømeInô
.
FømeLígth
 = 32*(
nb¶Ÿ
/2);

1444 
hßi
->
FømeInô
.
A˘iveFømeLígth
 = 16*(
nb¶Ÿ
/2);

1445 
hßi
->
SlŸInô
.
SlŸSize
 = 
SAI_SLOTSIZE_16B
;

1447 
SAI_PROTOCOL_DATASIZE_16BITEXTENDED
 :

1448 if(
hßi
->
Inô
.
D©aSize
 == 0xFFFFFFFF)

1450 
hßi
->
Inô
.
D©aSize
 = 
SAI_DATASIZE_16
;

1453 
SAI_PROTOCOL_DATASIZE_24BIT
:

1454 if(
hßi
->
Inô
.
D©aSize
 == 0xFFFFFFFF)

1456 
hßi
->
Inô
.
D©aSize
 = 
SAI_DATASIZE_24
;

1459 
SAI_PROTOCOL_DATASIZE_32BIT
:

1460 if(
hßi
->
Inô
.
D©aSize
 == 0xFFFFFFFF)

1462 
hßi
->
Inô
.
D©aSize
 = 
SAI_DATASIZE_32
;

1464 
hßi
->
FømeInô
.
FømeLígth
 = 64*(
nb¶Ÿ
/2);

1465 
hßi
->
FømeInô
.
A˘iveFømeLígth
 = 32*(
nb¶Ÿ
/2);

1466 
hßi
->
SlŸInô
.
SlŸSize
 = 
SAI_SLOTSIZE_32B
;

1467 if(
¥Ÿocﬁ
 =
SAI_I2S_LSBJUSTIFIED
)

1469 i‡(
d©asize
 =
SAI_PROTOCOL_DATASIZE_16BITEXTENDED
)

1471 
hßi
->
SlŸInô
.
Fú°BôOff£t
 = 16;

1473 i‡(
d©asize
 =
SAI_PROTOCOL_DATASIZE_24BIT
)

1475 
hßi
->
SlŸInô
.
Fú°BôOff£t
 = 8;

1480  
HAL_ERROR
;

1483  
HAL_OK
;

1484 
	}
}

1496 
HAL_SètusTy≥Def
 
	$SAI_InôPCM
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt32_t
 
¥Ÿocﬁ
, uöt32_à
d©asize
, uöt32_à
nb¶Ÿ
)

1499 
	`as£π_∑øm
(
	`IS_SAI_SUPPORTED_PROTOCOL
(
¥Ÿocﬁ
));

1500 
	`as£π_∑øm
(
	`IS_SAI_PROTOCOL_DATASIZE
(
d©asize
));

1502 
hßi
->
Inô
.
PrŸocﬁ
 = 
SAI_FREE_PROTOCOL
;

1503 
hßi
->
Inô
.
Fú°Bô
 = 
SAI_FIRSTBIT_MSB
;

1504 
hßi
->
Inô
.
ClockSåobög
 = 
SAI_CLOCKSTROBING_FALLINGEDGE
;

1505 
hßi
->
FømeInô
.
FSDeföôi⁄
 = 
SAI_FS_STARTFRAME
;

1506 
hßi
->
FømeInô
.
FSPﬁ¨ôy
 = 
SAI_FS_ACTIVE_HIGH
;

1507 
hßi
->
FømeInô
.
FSOff£t
 = 
SAI_FS_BEFOREFIRSTBIT
;

1508 
hßi
->
SlŸInô
.
Fú°BôOff£t
 = 0;

1509 
hßi
->
SlŸInô
.
SlŸNumbî
 = 
nb¶Ÿ
;

1510 
hßi
->
SlŸInô
.
SlŸA˘ive
 = 
SAI_SLOTACTIVE_ALL
;

1512 
¥Ÿocﬁ
)

1514 
SAI_PCM_SHORT
 :

1515 
hßi
->
FømeInô
.
A˘iveFømeLígth
 = 1;

1517 
SAI_PCM_LONG
 :

1518 
hßi
->
FømeInô
.
A˘iveFømeLígth
 = 13;

1521  
HAL_ERROR
;

1524 
d©asize
)

1526 
SAI_PROTOCOL_DATASIZE_16BIT
:

1527 
hßi
->
Inô
.
D©aSize
 = 
SAI_DATASIZE_16
;

1528 
hßi
->
FømeInô
.
FømeLígth
 = 16 * 
nb¶Ÿ
;

1529 
hßi
->
SlŸInô
.
SlŸSize
 = 
SAI_SLOTSIZE_16B
;

1531 
SAI_PROTOCOL_DATASIZE_16BITEXTENDED
 :

1532 
hßi
->
Inô
.
D©aSize
 = 
SAI_DATASIZE_16
;

1533 
hßi
->
FømeInô
.
FømeLígth
 = 32 * 
nb¶Ÿ
;

1534 
hßi
->
SlŸInô
.
SlŸSize
 = 
SAI_SLOTSIZE_32B
;

1537 
SAI_PROTOCOL_DATASIZE_32BIT
:

1538 
hßi
->
Inô
.
D©aSize
 = 
SAI_DATASIZE_32
;

1539 
hßi
->
FømeInô
.
FømeLígth
 = 32 * 
nb¶Ÿ
;

1540 
hßi
->
SlŸInô
.
SlŸSize
 = 
SAI_SLOTSIZE_32B
;

1543  
HAL_ERROR
;

1546  
HAL_OK
;

1547 
	}
}

1555 
	$SAI_FûlFifo
(
SAI_H™dÀTy≥Def
 *
hßi
)

1558 (
hßi
->
In°™˚
->
SR
 & 
SAI_xSR_FLVL
Ë!
SAI_FIFOSTATUS_FULL
)

1560 if((
hßi
->
Inô
.
D©aSize
 =
SAI_DATASIZE_8
Ë&& (hßi->Inô.
Com∑ndögMode
 =
SAI_NOCOMPANDING
))

1562 
hßi
->
In°™˚
->
DR
 = (*hßi->
pBuffPå
++);

1564 if(
hßi
->
Inô
.
D©aSize
 <
SAI_DATASIZE_16
)

1566 
hßi
->
In°™˚
->
DR
 = *((
uöt32_t
 *)hßi->
pBuffPå
);

1567 
hßi
->
pBuffPå
+= 2;

1571 
hßi
->
In°™˚
->
DR
 = *((
uöt32_t
 *)hßi->
pBuffPå
);

1572 
hßi
->
pBuffPå
+= 4;

1574 
hßi
->
X„rCou¡
--;

1576 
	}
}

1585 
uöt32_t
 
	$SAI_I¡îru±Fœg
(
SAI_H™dÀTy≥Def
 *
hßi
, 
uöt32_t
 
mode
)

1587 
uöt32_t
 
tmpIT
 = 
SAI_IT_OVRUDR
;

1589 if(
mode
 =
SAI_MODE_IT
)

1591 
tmpIT
|
SAI_IT_FREQ
;

1594 if((
hßi
->
Inô
.
AudioMode
 =
SAI_MODESLAVE_RX
Ë|| (hßi->Inô.AudioModê=
SAI_MODESLAVE_TX
))

1596 
tmpIT
|
SAI_IT_AFSDET
 | 
SAI_IT_LFSDET
;

1601 
tmpIT
|
SAI_IT_WCKCFG
;

1603  
tmpIT
;

1604 
	}
}

1612 
HAL_SètusTy≥Def
 
	$SAI_DißbÀ
(
SAI_H™dÀTy≥Def
 *
hßi
)

1614 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1615 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1617 
	`__HAL_SAI_DISABLE
(
hßi
);

1618 (
hßi
->
In°™˚
->
CR1
 & 
SAI_xCR1_SAIEN
Ë!
RESET
)

1621 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
SAI_TIMEOUT_VALUE
)

1624 
hßi
->
Eº‹Code
 |
HAL_SAI_ERROR_TIMEOUT
;

1626 
°©us
 = 
HAL_TIMEOUT
;

1629 
	`HAL_SAI_Eº‹CÆlback
(
hßi
);

1632  
°©us
;

1633 
	}
}

1641 
	$SAI_Tønsmô_IT8Bô
(
SAI_H™dÀTy≥Def
 *
hßi
)

1644 
hßi
->
In°™˚
->
DR
 = (*hßi->
pBuffPå
++);

1645 
hßi
->
X„rCou¡
--;

1648 if(
hßi
->
X„rCou¡
 == 0)

1651 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_IT
));

1652 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

1653 
	`HAL_SAI_TxC∂tCÆlback
(
hßi
);

1655 
	}
}

1663 
	$SAI_Tønsmô_IT16Bô
(
SAI_H™dÀTy≥Def
 *
hßi
)

1666 
hßi
->
In°™˚
->
DR
 = *(
uöt16_t
 *)hßi->
pBuffPå
;

1667 
hßi
->
pBuffPå
+=2;

1668 
hßi
->
X„rCou¡
--;

1671 if(
hßi
->
X„rCou¡
 == 0)

1674 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_IT
));

1675 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

1676 
	`HAL_SAI_TxC∂tCÆlback
(
hßi
);

1678 
	}
}

1686 
	$SAI_Tønsmô_IT32Bô
(
SAI_H™dÀTy≥Def
 *
hßi
)

1689 
hßi
->
In°™˚
->
DR
 = *(
uöt32_t
 *)hßi->
pBuffPå
;

1690 
hßi
->
pBuffPå
+=4;

1691 
hßi
->
X„rCou¡
--;

1694 if(
hßi
->
X„rCou¡
 == 0)

1697 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_IT
));

1698 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

1699 
	`HAL_SAI_TxC∂tCÆlback
(
hßi
);

1701 
	}
}

1709 
	$SAI_Re˚ive_IT8Bô
(
SAI_H™dÀTy≥Def
 *
hßi
)

1712 (*
hßi
->
pBuffPå
++Ëhßi->
In°™˚
->
DR
;

1713 
hßi
->
X„rCou¡
--;

1716 if(
hßi
->
X„rCou¡
 == 0)

1719 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_IT
));

1722 
	`__HAL_SAI_CLEAR_FLAG
(
hßi
, 
SAI_FLAG_OVRUDR
);

1724 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

1725 
	`HAL_SAI_RxC∂tCÆlback
(
hßi
);

1727 
	}
}

1735 
	$SAI_Re˚ive_IT16Bô
(
SAI_H™dÀTy≥Def
 *
hßi
)

1738 *(
uöt16_t
*)
hßi
->
pBuffPå
 = hßi->
In°™˚
->
DR
;

1739 
hßi
->
pBuffPå
+=2;

1740 
hßi
->
X„rCou¡
--;

1743 if(
hßi
->
X„rCou¡
 == 0)

1746 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_IT
));

1749 
	`__HAL_SAI_CLEAR_FLAG
(
hßi
, 
SAI_FLAG_OVRUDR
);

1751 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

1752 
	`HAL_SAI_RxC∂tCÆlback
(
hßi
);

1754 
	}
}

1761 
	$SAI_Re˚ive_IT32Bô
(
SAI_H™dÀTy≥Def
 *
hßi
)

1764 *(
uöt32_t
*)
hßi
->
pBuffPå
 = hßi->
In°™˚
->
DR
;

1765 
hßi
->
pBuffPå
+=4;

1766 
hßi
->
X„rCou¡
--;

1769 if(
hßi
->
X„rCou¡
 == 0)

1772 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_IT
));

1775 
	`__HAL_SAI_CLEAR_FLAG
(
hßi
, 
SAI_FLAG_OVRUDR
);

1777 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

1778 
	`HAL_SAI_RxC∂tCÆlback
(
hßi
);

1780 
	}
}

1788 
	$SAI_DMATxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1790 
uöt32_t
 
tick°¨t
 = 0;

1792 
SAI_H™dÀTy≥Def
* 
hßi
 = (SAI_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1794 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1796 
hßi
->
X„rCou¡
 = 0;

1799 
hßi
->
In°™˚
->
CR1
 &(
uöt32_t
)(~
SAI_xCR1_DMAEN
);

1802 
tick°¨t
 = 
	`HAL_GëTick
();

1806 
	`__HAL_SAI_GET_FLAG
(
hßi
, 
SAI_xSR_FLVL
Ë!
RESET
)

1809 if((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > 
SAI_TIMEOUT_VALUE
)

1812 
hßi
->
Eº‹Code
 |
HAL_SAI_ERROR_TIMEOUT
;

1815 
	`HAL_SAI_Eº‹CÆlback
(
hßi
);

1820 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_DMA
));

1822 
hßi
->
Sèã

HAL_SAI_STATE_READY
;

1824 
	`HAL_SAI_TxC∂tCÆlback
(
hßi
);

1825 
	}
}

1833 
	$SAI_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1835 
SAI_H™dÀTy≥Def
* 
hßi
 = (SAI_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1837 
	`HAL_SAI_TxHÆfC∂tCÆlback
(
hßi
);

1838 
	}
}

1846 
	$SAI_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1848 
SAI_H™dÀTy≥Def
* 
hßi
 = ( SAI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1849 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1852 
hßi
->
In°™˚
->
CR1
 &(
uöt32_t
)(~
SAI_xCR1_DMAEN
);

1853 
hßi
->
X„rCou¡
 = 0;

1856 
	`__HAL_SAI_DISABLE_IT
(
hßi
, 
	`SAI_I¡îru±Fœg
(hßi, 
SAI_MODE_DMA
));

1858 
hßi
->
Sèã
 = 
HAL_SAI_STATE_READY
;

1860 
	`HAL_SAI_RxC∂tCÆlback
(
hßi
);

1861 
	}
}

1869 
	$SAI_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1871 
SAI_H™dÀTy≥Def
* 
hßi
 = (SAI_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1873 
	`HAL_SAI_RxHÆfC∂tCÆlback
(
hßi
);

1874 
	}
}

1881 
	$SAI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1883 
SAI_H™dÀTy≥Def
* 
hßi
 = ( SAI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1886 
	`HAL_SAI_DMASt›
(
hßi
);

1889 
hßi
->
Sèã

HAL_SAI_STATE_READY
;

1890 
	`HAL_SAI_Eº‹CÆlback
(
hßi
);

1892 
hßi
->
X„rCou¡
 = 0;

1893 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sai_ex.c

58 
	~"°m32f4xx_hÆ.h
"

69 #ifde‡
HAL_SAI_MODULE_ENABLED


71 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

72 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

115 
	$SAI_BlockSynchroC⁄fig
(
SAI_H™dÀTy≥Def
 *
hßi
)

117 
uöt32_t
 
tm¥egi°îGCR
 = 0;

119 #i‡
	`deföed
(
STM32F446xx
)

121 
hßi
->
Inô
.
SynchroExt
)

123 
SAI_SYNCEXT_DISABLE
 :

124 
tm¥egi°îGCR
 = 0;

126 
SAI_SYNCEXT_IN_ENABLE
 :

127 
tm¥egi°îGCR
 = 
SAI_GCR_SYNCIN_0
;

129 
SAI_SYNCEXT_OUTBLOCKA_ENABLE
 :

130 
tm¥egi°îGCR
 = 
SAI_GCR_SYNCOUT_0
;

132 
SAI_SYNCEXT_OUTBLOCKB_ENABLE
 :

133 
tm¥egi°îGCR
 = 
SAI_GCR_SYNCOUT_1
;

137 if((
hßi
->
In°™˚
 =
SAI1_Block_A
Ë|| (hßi->In°™˚ =
SAI1_Block_B
))

139 
SAI1
->
GCR
 = 
tm¥egi°îGCR
;

143 
SAI2
->
GCR
 = 
tm¥egi°îGCR
;

146 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

147 
	`deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

149 
hßi
->
Inô
.
SynchroExt
)

151 
SAI_SYNCEXT_DISABLE
 :

152 
tm¥egi°îGCR
 = 0;

154 
SAI_SYNCEXT_OUTBLOCKA_ENABLE
 :

155 
tm¥egi°îGCR
 = 
SAI_GCR_SYNCOUT_0
;

157 
SAI_SYNCEXT_OUTBLOCKB_ENABLE
 :

158 
tm¥egi°îGCR
 = 
SAI_GCR_SYNCOUT_1
;

161 
SAI1
->
GCR
 = 
tm¥egi°îGCR
;

163 
	}
}

170 
uöt32_t
 
	$SAI_GëI≈utClock
(
SAI_H™dÀTy≥Def
 *
hßi
)

173 
uöt32_t
 
ßi˛ocksour˚
 = 0;

175 #i‡
	`deföed
(
STM32F446xx
)

176 i‡((
hßi
->
In°™˚
 =
SAI1_Block_A
Ë|| (hßi->In°™˚ =
SAI1_Block_B
))

178 
ßi˛ocksour˚
 = 
	`HAL_RCCEx_GëPîùhCLKFªq
(
RCC_PERIPHCLK_SAI1
);

182 
ßi˛ocksour˚
 = 
	`HAL_RCCEx_GëPîùhCLKFªq
(
RCC_PERIPHCLK_SAI2
);

185 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

186 
	`deföed
(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

187 
uöt32_t
 
vcoöput
 = 0, 
tm¥eg
 = 0;

190 
	`as£π_∑øm
(
	`IS_SAI_CLK_SOURCE
(
hßi
->
Inô
.
ClockSour˚
));

193 if(
hßi
->
In°™˚
 =
SAI1_Block_A
)

195 
	`__HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG
(
hßi
->
Inô
.
ClockSour˚
);

199 
	`__HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG
((
uöt32_t
)(
hßi
->
Inô
.
ClockSour˚
 << 2));

203 if((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
Ë=
RCC_PLLSOURCE_HSI
)

206 
vcoöput
 = (
HSI_VALUE
 / (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
));

211 
vcoöput
 = ((
HSE_VALUE
 / (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
)));

215 if(
hßi
->
Inô
.
ClockSour˚
 =
SAI_CLKSOURCE_PLLSAI
)

221 
tm¥eg
 = (
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIQ
) >> 24;

222 
ßi˛ocksour˚
 = (
vcoöput
 * ((
RCC
->
PLLSAICFGR
 & 
RCC_PLLSAICFGR_PLLSAIN
Ë>> 6))/(
tm¥eg
);

225 
tm¥eg
 = (((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLSAIDIVQ
) >> 8) + 1);

226 
ßi˛ocksour˚
 = sai˛ocksour˚/(
tm¥eg
);

229 if(
hßi
->
Inô
.
ClockSour˚
 =
SAI_CLKSOURCE_PLLI2S
)

235 
tm¥eg
 = (
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SQ
) >> 24;

236 
ßi˛ocksour˚
 = (
vcoöput
 * ((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
Ë>> 6))/(
tm¥eg
);

239 
tm¥eg
 = ((
RCC
->
DCKCFGR
 & 
RCC_DCKCFGR_PLLI2SDIVQ
) + 1);

240 
ßi˛ocksour˚
 = sai˛ocksour˚/(
tm¥eg
);

245 
	`__HAL_RCC_I2S_CONFIG
(
RCC_I2SCLKSOURCE_EXT
);

247 
ßi˛ocksour˚
 = 
EXTERNAL_CLOCK_VALUE
;

251  
ßi˛ocksour˚
;

252 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sd.c

180 
	~"°m32f4xx_hÆ.h
"

182 #ifde‡
HAL_SD_MODULE_ENABLED


183 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

184 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

185 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

186 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

203 
	#DATA_BLOCK_SIZE
 ((
uöt32_t
)(9 << 4))

	)

207 
	#SDIO_STATIC_FLAGS
 ((
uöt32_t
)(
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_CTIMEOUT
 |\

208 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_RXOVERR
 |\

209 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CMDSENT
 | 
SDIO_FLAG_DATAEND
 |\

210 
SDIO_FLAG_DBCKEND
))

	)

212 
	#SDIO_CMD0TIMEOUT
 ((
uöt32_t
)0x00010000)

	)

217 
	#SD_OCR_ADDR_OUT_OF_RANGE
 ((
uöt32_t
)0x80000000)

	)

218 
	#SD_OCR_ADDR_MISALIGNED
 ((
uöt32_t
)0x40000000)

	)

219 
	#SD_OCR_BLOCK_LEN_ERR
 ((
uöt32_t
)0x20000000)

	)

220 
	#SD_OCR_ERASE_SEQ_ERR
 ((
uöt32_t
)0x10000000)

	)

221 
	#SD_OCR_BAD_ERASE_PARAM
 ((
uöt32_t
)0x08000000)

	)

222 
	#SD_OCR_WRITE_PROT_VIOLATION
 ((
uöt32_t
)0x04000000)

	)

223 
	#SD_OCR_LOCK_UNLOCK_FAILED
 ((
uöt32_t
)0x01000000)

	)

224 
	#SD_OCR_COM_CRC_FAILED
 ((
uöt32_t
)0x00800000)

	)

225 
	#SD_OCR_ILLEGAL_CMD
 ((
uöt32_t
)0x00400000)

	)

226 
	#SD_OCR_CARD_ECC_FAILED
 ((
uöt32_t
)0x00200000)

	)

227 
	#SD_OCR_CC_ERROR
 ((
uöt32_t
)0x00100000)

	)

228 
	#SD_OCR_GENERAL_UNKNOWN_ERROR
 ((
uöt32_t
)0x00080000)

	)

229 
	#SD_OCR_STREAM_READ_UNDERRUN
 ((
uöt32_t
)0x00040000)

	)

230 
	#SD_OCR_STREAM_WRITE_OVERRUN
 ((
uöt32_t
)0x00020000)

	)

231 
	#SD_OCR_CID_CSD_OVERWRITE
 ((
uöt32_t
)0x00010000)

	)

232 
	#SD_OCR_WP_ERASE_SKIP
 ((
uöt32_t
)0x00008000)

	)

233 
	#SD_OCR_CARD_ECC_DISABLED
 ((
uöt32_t
)0x00004000)

	)

234 
	#SD_OCR_ERASE_RESET
 ((
uöt32_t
)0x00002000)

	)

235 
	#SD_OCR_AKE_SEQ_ERROR
 ((
uöt32_t
)0x00000008)

	)

236 
	#SD_OCR_ERRORBITS
 ((
uöt32_t
)0xFDFFE008)

	)

241 
	#SD_R6_GENERAL_UNKNOWN_ERROR
 ((
uöt32_t
)0x00002000)

	)

242 
	#SD_R6_ILLEGAL_CMD
 ((
uöt32_t
)0x00004000)

	)

243 
	#SD_R6_COM_CRC_FAILED
 ((
uöt32_t
)0x00008000)

	)

245 
	#SD_VOLTAGE_WINDOW_SD
 ((
uöt32_t
)0x80100000)

	)

246 
	#SD_HIGH_CAPACITY
 ((
uöt32_t
)0x40000000)

	)

247 
	#SD_STD_CAPACITY
 ((
uöt32_t
)0x00000000)

	)

248 
	#SD_CHECK_PATTERN
 ((
uöt32_t
)0x000001AA)

	)

250 
	#SD_MAX_VOLT_TRIAL
 ((
uöt32_t
)0x0000FFFF)

	)

251 
	#SD_ALLZERO
 ((
uöt32_t
)0x00000000)

	)

253 
	#SD_WIDE_BUS_SUPPORT
 ((
uöt32_t
)0x00040000)

	)

254 
	#SD_SINGLE_BUS_SUPPORT
 ((
uöt32_t
)0x00010000)

	)

255 
	#SD_CARD_LOCKED
 ((
uöt32_t
)0x02000000)

	)

257 
	#SD_DATATIMEOUT
 ((
uöt32_t
)0xFFFFFFFF)

	)

258 
	#SD_0TO7BITS
 ((
uöt32_t
)0x000000FF)

	)

259 
	#SD_8TO15BITS
 ((
uöt32_t
)0x0000FF00)

	)

260 
	#SD_16TO23BITS
 ((
uöt32_t
)0x00FF0000)

	)

261 
	#SD_24TO31BITS
 ((
uöt32_t
)0xFF000000)

	)

262 
	#SD_MAX_DATA_LENGTH
 ((
uöt32_t
)0x01FFFFFF)

	)

264 
	#SD_HALFFIFO
 ((
uöt32_t
)0x00000008)

	)

265 
	#SD_HALFFIFOBYTES
 ((
uöt32_t
)0x00000020)

	)

270 
	#SD_CCCC_LOCK_UNLOCK
 ((
uöt32_t
)0x00000080)

	)

271 
	#SD_CCCC_WRITE_PROT
 ((
uöt32_t
)0x00000040)

	)

272 
	#SD_CCCC_ERASE
 ((
uöt32_t
)0x00000020)

	)

278 
	#SD_SDIO_SEND_IF_COND
 ((
uöt32_t
)
SD_CMD_HS_SEND_EXT_CSD
)

	)

290 
HAL_SD_Eº‹Ty≥def
 
	`SD_Inôülize_C¨ds
(
SD_H™dÀTy≥Def
 *
hsd
);

291 
HAL_SD_Eº‹Ty≥def
 
	`SD_Sñe˘_De£À˘
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt64_t
 
addr
);

292 
HAL_SD_Eº‹Ty≥def
 
	`SD_PowîON
(
SD_H™dÀTy≥Def
 *
hsd
);

293 
HAL_SD_Eº‹Ty≥def
 
	`SD_PowîOFF
(
SD_H™dÀTy≥Def
 *
hsd
);

294 
HAL_SD_Eº‹Ty≥def
 
	`SD_SídSètus
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pC¨dSètus
);

295 
HAL_SD_C¨dSèãTy≥def
 
	`SD_GëSèã
(
SD_H™dÀTy≥Def
 *
hsd
);

296 
HAL_SD_Eº‹Ty≥def
 
	`SD_IsC¨dProgømmög
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt8_t
 *
pSètus
);

297 
HAL_SD_Eº‹Ty≥def
 
	`SD_CmdEº‹
(
SD_H™dÀTy≥Def
 *
hsd
);

298 
HAL_SD_Eº‹Ty≥def
 
	`SD_CmdRe•1Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt8_t
 
SD_CMD
);

299 
HAL_SD_Eº‹Ty≥def
 
	`SD_CmdRe•7Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
);

300 
HAL_SD_Eº‹Ty≥def
 
	`SD_CmdRe•3Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
);

301 
HAL_SD_Eº‹Ty≥def
 
	`SD_CmdRe•2Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
);

302 
HAL_SD_Eº‹Ty≥def
 
	`SD_CmdRe•6Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt8_t
 
SD_CMD
, 
uöt16_t
 *
pRCA
);

303 
HAL_SD_Eº‹Ty≥def
 
	`SD_WideBus_E«bÀ
(
SD_H™dÀTy≥Def
 *
hsd
);

304 
HAL_SD_Eº‹Ty≥def
 
	`SD_WideBus_DißbÀ
(
SD_H™dÀTy≥Def
 *
hsd
);

305 
HAL_SD_Eº‹Ty≥def
 
	`SD_FödSCR
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pSCR
);

306 
	`SD_DMA_RxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

307 
	`SD_DMA_RxEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

308 
	`SD_DMA_TxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

309 
	`SD_DMA_TxEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

341 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_Inô
(
SD_H™dÀTy≥Def
 *
hsd
, 
HAL_SD_C¨dInfoTy≥def
 *
SDC¨dInfo
)

343 
__IO
 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

344 
SD_InôTy≥Def
 
tmpöô
;

347 
hsd
->
Lock
 = 
HAL_UNLOCKED
;

349 
	`HAL_SD_M•Inô
(
hsd
);

352 
tmpöô
.
ClockEdge
 = 
SDIO_CLOCK_EDGE_RISING
;

353 
tmpöô
.
ClockBy∑ss
 = 
SDIO_CLOCK_BYPASS_DISABLE
;

354 
tmpöô
.
ClockPowîSave
 = 
SDIO_CLOCK_POWER_SAVE_DISABLE
;

355 
tmpöô
.
BusWide
 = 
SDIO_BUS_WIDE_1B
;

356 
tmpöô
.
H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_HARDWARE_FLOW_CONTROL_DISABLE
;

357 
tmpöô
.
ClockDiv
 = 
SDIO_INIT_CLK_DIV
;

360 
	`SDIO_Inô
(
hsd
->
In°™˚
, 
tmpöô
);

363 
îr‹°©e
 = 
	`SD_PowîON
(
hsd
);

365 if(
îr‹°©e
 !
SD_OK
)

367  
îr‹°©e
;

371 
îr‹°©e
 = 
	`SD_Inôülize_C¨ds
(
hsd
);

373 i‡(
îr‹°©e
 !
SD_OK
)

375  
îr‹°©e
;

379 
îr‹°©e
 = 
	`HAL_SD_Gë_C¨dInfo
(
hsd
, 
SDC¨dInfo
);

381 i‡(
îr‹°©e
 =
SD_OK
)

384 
îr‹°©e
 = 
	`SD_Sñe˘_De£À˘
(
hsd
, (
uöt32_t
)(((uöt32_t)
SDC¨dInfo
->
RCA
) << 16));

388 
	`SDIO_Inô
(
hsd
->
In°™˚
, hsd->
Inô
);

390  
îr‹°©e
;

391 
	}
}

398 
HAL_SètusTy≥Def
 
	$HAL_SD_DeInô
(
SD_H™dÀTy≥Def
 *
hsd
)

402 
	`SD_PowîOFF
(
hsd
);

405 
	`HAL_SD_M•DeInô
(
hsd
);

407  
HAL_OK
;

408 
	}
}

416 
__wók
 
	$HAL_SD_M•Inô
(
SD_H™dÀTy≥Def
 *
hsd
)

421 
	}
}

428 
__wók
 
	$HAL_SD_M•DeInô
(
SD_H™dÀTy≥Def
 *
hsd
)

433 
	}
}

465 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_RódBlocks
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pRódBuf„r
, 
uöt64_t
 
RódAddr
, uöt32_à
BlockSize
, uöt32_à
NumbîOfBlocks
)

467 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

468 
SDIO_D©aInôTy≥Def
 
sdio_d©aöô°ru˘uª
;

469 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

470 
uöt32_t
 
cou¡
 = 0, *
ãmpbuff
 = (uöt32_à*)
pRódBuf„r
;

473 
hsd
->
In°™˚
->
DCTRL
 = 0;

475 i‡(
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
)

477 
BlockSize
 = 512;

478 
RódAddr
 /= 512;

482 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
Ë
BlockSize
;

483 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SET_BLOCKLEN
;

484 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

485 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

486 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

487 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

490 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SET_BLOCKLEN
);

492 i‡(
îr‹°©e
 !
SD_OK
)

494  
îr‹°©e
;

498 
sdio_d©aöô°ru˘uª
.
D©aTimeOut
 = 
SD_DATATIMEOUT
;

499 
sdio_d©aöô°ru˘uª
.
D©aLígth
 = 
NumbîOfBlocks
 * 
BlockSize
;

500 
sdio_d©aöô°ru˘uª
.
D©aBlockSize
 = 
DATA_BLOCK_SIZE
;

501 
sdio_d©aöô°ru˘uª
.
Tøns„rDú
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

502 
sdio_d©aöô°ru˘uª
.
Tøns„rMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

503 
sdio_d©aöô°ru˘uª
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

504 
	`SDIO_D©aC⁄fig
(
hsd
->
In°™˚
, &
sdio_d©aöô°ru˘uª
);

506 if(
NumbîOfBlocks
 > 1)

509 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_READ_MULT_BLOCK
;

514 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_READ_SINGLE_BLOCK
;

517 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
RódAddr
;

518 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

521 if(
NumbîOfBlocks
 > 1)

524 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_READ_MULT_BLOCK
);

526 i‡(
îr‹°©e
 !
SD_OK
)

528  
îr‹°©e
;

532 #ifde‡
SDIO_STA_STBITERR


533 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DATAEND
 | 
SDIO_FLAG_STBITERR
))

535 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DATAEND
))

538 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXFIFOHF
))

541 
cou¡
 = 0; count < 8; count++)

543 *(
ãmpbuff
 + 
cou¡
Ë
	`SDIO_RódFIFO
(
hsd
->
In°™˚
);

546 
ãmpbuff
 += 8;

553 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_READ_SINGLE_BLOCK
);

555 i‡(
îr‹°©e
 !
SD_OK
)

557  
îr‹°©e
;

561 #ifde‡
SDIO_STA_STBITERR


562 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
 | 
SDIO_FLAG_STBITERR
))

564 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
))

567 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXFIFOHF
))

570 
cou¡
 = 0; count < 8; count++)

572 *(
ãmpbuff
 + 
cou¡
Ë
	`SDIO_RódFIFO
(
hsd
->
In°™˚
);

575 
ãmpbuff
 += 8;

581 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DATAEND
Ë&& (
NumbîOfBlocks
 > 1))

583 i‡((
hsd
->
C¨dTy≥
 =
STD_CAPACITY_SD_CARD_V1_1
) ||\

584 (
hsd
->
C¨dTy≥
 =
STD_CAPACITY_SD_CARD_V2_0
) ||\

585 (
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
))

588 
îr‹°©e
 = 
	`HAL_SD_St›Tøns„r
(
hsd
);

593 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

595 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
);

597 
îr‹°©e
 = 
SD_DATA_TIMEOUT
;

599  
îr‹°©e
;

601 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

603 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
);

605 
îr‹°©e
 = 
SD_DATA_CRC_FAIL
;

607  
îr‹°©e
;

609 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
))

611 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
);

613 
îr‹°©e
 = 
SD_RX_OVERRUN
;

615  
îr‹°©e
;

617 #ifde‡
SDIO_STA_STBITERR


618 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
))

620 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
);

622 
îr‹°©e
 = 
SD_START_BIT_ERR
;

624  
îr‹°©e
;

632 
cou¡
 = 
SD_DATATIMEOUT
;

635 (
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXDAVL
)Ë&& (
cou¡
 > 0))

637 *
ãmpbuff
 = 
	`SDIO_RódFIFO
(
hsd
->
In°™˚
);

638 
ãmpbuff
++;

639 
cou¡
--;

643 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

645  
îr‹°©e
;

646 
	}
}

659 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_WrôeBlocks
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pWrôeBuf„r
, 
uöt64_t
 
WrôeAddr
, uöt32_à
BlockSize
, uöt32_à
NumbîOfBlocks
)

661 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

662 
SDIO_D©aInôTy≥Def
 
sdio_d©aöô°ru˘uª
;

663 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

664 
uöt32_t
 
tŸÆnumbîofbyãs
 = 0, 
byã°øns„ºed
 = 0, 
cou¡
 = 0, 
ª°w‹ds
 = 0;

665 
uöt32_t
 *
ãmpbuff
 = (uöt32_à*)
pWrôeBuf„r
;

666 
uöt8_t
 
ˇrd°©e
 = 0;

669 
hsd
->
In°™˚
->
DCTRL
 = 0;

671 i‡(
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
)

673 
BlockSize
 = 512;

674 
WrôeAddr
 /= 512;

678 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
BlockSize
;

679 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SET_BLOCKLEN
;

680 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

681 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

682 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

683 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

686 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SET_BLOCKLEN
);

688 i‡(
îr‹°©e
 !
SD_OK
)

690  
îr‹°©e
;

693 if(
NumbîOfBlocks
 > 1)

696 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_WRITE_MULT_BLOCK
;

701 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_WRITE_SINGLE_BLOCK
;

704 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
WrôeAddr
;

705 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

708 if(
NumbîOfBlocks
 > 1)

710 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_WRITE_MULT_BLOCK
);

714 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_WRITE_SINGLE_BLOCK
);

717 i‡(
îr‹°©e
 !
SD_OK
)

719  
îr‹°©e
;

723 
tŸÆnumbîofbyãs
 = 
NumbîOfBlocks
 * 
BlockSize
;

726 
sdio_d©aöô°ru˘uª
.
D©aTimeOut
 = 
SD_DATATIMEOUT
;

727 
sdio_d©aöô°ru˘uª
.
D©aLígth
 = 
NumbîOfBlocks
 * 
BlockSize
;

728 
sdio_d©aöô°ru˘uª
.
D©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

729 
sdio_d©aöô°ru˘uª
.
Tøns„rDú
 = 
SDIO_TRANSFER_DIR_TO_CARD
;

730 
sdio_d©aöô°ru˘uª
.
Tøns„rMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

731 
sdio_d©aöô°ru˘uª
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

732 
	`SDIO_D©aC⁄fig
(
hsd
->
In°™˚
, &
sdio_d©aöô°ru˘uª
);

735 if(
NumbîOfBlocks
 > 1)

737 #ifde‡
SDIO_STA_STBITERR


738 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DATAEND
 | 
SDIO_FLAG_STBITERR
))

740 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DATAEND
))

743 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXFIFOHE
))

745 i‡((
tŸÆnumbîofbyãs
 - 
byã°øns„ºed
) < 32)

747 
ª°w‹ds
 = ((
tŸÆnumbîofbyãs
 - 
byã°øns„ºed
) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : ((Åotalnumberofbytes - bytestransferred) / 4 + 1);

750 
cou¡
 = 0; cou¡ < 
ª°w‹ds
; count++)

752 
	`SDIO_WrôeFIFO
(
hsd
->
In°™˚
, 
ãmpbuff
);

753 
ãmpbuff
++;

754 
byã°øns„ºed
 += 4;

760 
cou¡
 = 0; count < 8; count++)

762 
	`SDIO_WrôeFIFO
(
hsd
->
In°™˚
, (
ãmpbuff
 + 
cou¡
));

765 
ãmpbuff
 += 8;

766 
byã°øns„ºed
 += 32;

774 #ifde‡
SDIO_STA_STBITERR


775 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
 | 
SDIO_FLAG_STBITERR
))

777 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
))

780 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXFIFOHE
))

782 i‡((
tŸÆnumbîofbyãs
 - 
byã°øns„ºed
) < 32)

784 
ª°w‹ds
 = ((
tŸÆnumbîofbyãs
 - 
byã°øns„ºed
) % 4 == 0) ? ((totalnumberofbytes - bytestransferred) / 4) : ((Åotalnumberofbytes - bytestransferred) / 4 + 1);

787 
cou¡
 = 0; cou¡ < 
ª°w‹ds
; count++)

789 
	`SDIO_WrôeFIFO
(
hsd
->
In°™˚
, 
ãmpbuff
);

790 
ãmpbuff
++;

791 
byã°øns„ºed
 += 4;

797 
cou¡
 = 0; count < 8; count++)

799 
	`SDIO_WrôeFIFO
(
hsd
->
In°™˚
, (
ãmpbuff
 + 
cou¡
));

802 
ãmpbuff
 += 8;

803 
byã°øns„ºed
 += 32;

810 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DATAEND
Ë&& (
NumbîOfBlocks
 > 1))

812 i‡((
hsd
->
C¨dTy≥
 =
STD_CAPACITY_SD_CARD_V1_1
Ë|| (hsd->C¨dTy≥ =
STD_CAPACITY_SD_CARD_V2_0
) ||\

813 (
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
))

816 
îr‹°©e
 = 
	`HAL_SD_St›Tøns„r
(
hsd
);

821 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

823 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
);

825 
îr‹°©e
 = 
SD_DATA_TIMEOUT
;

827  
îr‹°©e
;

829 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

831 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
);

833 
îr‹°©e
 = 
SD_DATA_CRC_FAIL
;

835  
îr‹°©e
;

837 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
))

839 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
);

841 
îr‹°©e
 = 
SD_TX_UNDERRUN
;

843  
îr‹°©e
;

845 #ifde‡
SDIO_STA_STBITERR


846 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
))

848 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
);

850 
îr‹°©e
 = 
SD_START_BIT_ERR
;

852  
îr‹°©e
;

861 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

864 
îr‹°©e
 = 
	`SD_IsC¨dProgømmög
(
hsd
, &
ˇrd°©e
);

866 (
îr‹°©e
 =
SD_OK
Ë&& ((
ˇrd°©e
 =
SD_CARD_PROGRAMMING
Ë|| (ˇrd°©ê=
SD_CARD_RECEIVING
)))

868 
îr‹°©e
 = 
	`SD_IsC¨dProgømmög
(
hsd
, &
ˇrd°©e
);

871  
îr‹°©e
;

872 
	}
}

887 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_RódBlocks_DMA
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pRódBuf„r
, 
uöt64_t
 
RódAddr
, uöt32_à
BlockSize
, uöt32_à
NumbîOfBlocks
)

889 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

890 
SDIO_D©aInôTy≥Def
 
sdio_d©aöô°ru˘uª
;

891 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

894 
hsd
->
In°™˚
->
DCTRL
 = 0;

897 
hsd
->
SdTøns„rC∂t
 = 0;

898 
hsd
->
DmaTøns„rC∂t
 = 0;

899 
hsd
->
SdTøns„rEº
 = 
SD_OK
;

902 if(
NumbîOfBlocks
 > 1)

904 
hsd
->
SdO≥øti⁄
 = 
SD_READ_MULTIPLE_BLOCK
;

908 
hsd
->
SdO≥øti⁄
 = 
SD_READ_SINGLE_BLOCK
;

912 #ifde‡
SDIO_STA_STBITERR


913 
	`__HAL_SD_SDIO_ENABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 |\

914 
SDIO_IT_DTIMEOUT
 |\

915 
SDIO_IT_DATAEND
 |\

916 
SDIO_IT_RXOVERR
 |\

917 
SDIO_IT_STBITERR
));

919 
	`__HAL_SD_SDIO_ENABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 |\

920 
SDIO_IT_DTIMEOUT
 |\

921 
SDIO_IT_DATAEND
 |\

922 
SDIO_IT_RXOVERR
));

926 
	`__HAL_SD_SDIO_DMA_ENABLE
();

929 
hsd
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SD_DMA_RxC∂t
;

930 
hsd
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SD_DMA_RxEº‹
;

933 
	`HAL_DMA_Sèπ_IT
(
hsd
->
hdm¨x
, (
uöt32_t
)&hsd->
In°™˚
->
FIFO
, (uöt32_t)
pRódBuf„r
, (uöt32_t)(
BlockSize
 * 
NumbîOfBlocks
)/4);

935 i‡(
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
)

937 
BlockSize
 = 512;

938 
RódAddr
 /= 512;

942 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
BlockSize
;

943 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SET_BLOCKLEN
;

944 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

945 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

946 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

947 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

950 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SET_BLOCKLEN
);

952 i‡(
îr‹°©e
 !
SD_OK
)

954  
îr‹°©e
;

958 
sdio_d©aöô°ru˘uª
.
D©aTimeOut
 = 
SD_DATATIMEOUT
;

959 
sdio_d©aöô°ru˘uª
.
D©aLígth
 = 
BlockSize
 * 
NumbîOfBlocks
;

960 
sdio_d©aöô°ru˘uª
.
D©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

961 
sdio_d©aöô°ru˘uª
.
Tøns„rDú
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

962 
sdio_d©aöô°ru˘uª
.
Tøns„rMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

963 
sdio_d©aöô°ru˘uª
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

964 
	`SDIO_D©aC⁄fig
(
hsd
->
In°™˚
, &
sdio_d©aöô°ru˘uª
);

967 if(
NumbîOfBlocks
 > 1)

970 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_READ_MULT_BLOCK
;

975 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_READ_SINGLE_BLOCK
;

978 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
RódAddr
;

979 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

982 if(
NumbîOfBlocks
 > 1)

984 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_READ_MULT_BLOCK
);

988 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_READ_SINGLE_BLOCK
);

992 
hsd
->
SdTøns„rEº
 = 
îr‹°©e
;

994  
îr‹°©e
;

995 
	}
}

1011 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_WrôeBlocks_DMA
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pWrôeBuf„r
, 
uöt64_t
 
WrôeAddr
, uöt32_à
BlockSize
, uöt32_à
NumbîOfBlocks
)

1013 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

1014 
SDIO_D©aInôTy≥Def
 
sdio_d©aöô°ru˘uª
;

1015 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

1018 
hsd
->
In°™˚
->
DCTRL
 = 0;

1021 
hsd
->
SdTøns„rC∂t
 = 0;

1022 
hsd
->
DmaTøns„rC∂t
 = 0;

1023 
hsd
->
SdTøns„rEº
 = 
SD_OK
;

1026 if(
NumbîOfBlocks
 > 1)

1028 
hsd
->
SdO≥øti⁄
 = 
SD_WRITE_MULTIPLE_BLOCK
;

1032 
hsd
->
SdO≥øti⁄
 = 
SD_WRITE_SINGLE_BLOCK
;

1036 #ifde‡
SDIO_STA_STBITERR


1037 
	`__HAL_SD_SDIO_ENABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 |\

1038 
SDIO_IT_DTIMEOUT
 |\

1039 
SDIO_IT_DATAEND
 |\

1040 
SDIO_IT_TXUNDERR
 |\

1041 
SDIO_IT_STBITERR
));

1043 
	`__HAL_SD_SDIO_ENABLE_IT
(
hsd
, (
SDIO_IT_DCRCFAIL
 |\

1044 
SDIO_IT_DTIMEOUT
 |\

1045 
SDIO_IT_DATAEND
 |\

1046 
SDIO_IT_TXUNDERR
));

1050 
hsd
->
hdm©x
->
X„rC∂tCÆlback
 = 
SD_DMA_TxC∂t
;

1051 
hsd
->
hdm©x
->
X„rEº‹CÆlback
 = 
SD_DMA_TxEº‹
;

1054 
	`HAL_DMA_Sèπ_IT
(
hsd
->
hdm©x
, (
uöt32_t
)
pWrôeBuf„r
, (uöt32_t)&hsd->
In°™˚
->
FIFO
, (uöt32_t)(
BlockSize
 * 
NumbîOfBlocks
)/4);

1057 
	`__HAL_SD_SDIO_DMA_ENABLE
();

1059 i‡(
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
)

1061 
BlockSize
 = 512;

1062 
WrôeAddr
 /= 512;

1066 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
BlockSize
;

1067 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SET_BLOCKLEN
;

1068 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

1069 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

1070 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1071 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

1074 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SET_BLOCKLEN
);

1076 i‡(
îr‹°©e
 !
SD_OK
)

1078  
îr‹°©e
;

1082 if(
NumbîOfBlocks
 <= 1)

1085 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_WRITE_SINGLE_BLOCK
;

1090 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_WRITE_MULT_BLOCK
;

1093 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
WrôeAddr
;

1094 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

1097 if(
NumbîOfBlocks
 > 1)

1099 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_WRITE_MULT_BLOCK
);

1103 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_WRITE_SINGLE_BLOCK
);

1106 i‡(
îr‹°©e
 !
SD_OK
)

1108  
îr‹°©e
;

1112 
sdio_d©aöô°ru˘uª
.
D©aTimeOut
 = 
SD_DATATIMEOUT
;

1113 
sdio_d©aöô°ru˘uª
.
D©aLígth
 = 
BlockSize
 * 
NumbîOfBlocks
;

1114 
sdio_d©aöô°ru˘uª
.
D©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_512B
;

1115 
sdio_d©aöô°ru˘uª
.
Tøns„rDú
 = 
SDIO_TRANSFER_DIR_TO_CARD
;

1116 
sdio_d©aöô°ru˘uª
.
Tøns„rMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1117 
sdio_d©aöô°ru˘uª
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1118 
	`SDIO_D©aC⁄fig
(
hsd
->
In°™˚
, &
sdio_d©aöô°ru˘uª
);

1120 
hsd
->
SdTøns„rEº
 = 
îr‹°©e
;

1122  
îr‹°©e
;

1123 
	}
}

1134 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_CheckRódO≥øti⁄
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 
Timeout
)

1136 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

1137 
uöt32_t
 
timeout
 = 
Timeout
;

1138 
uöt32_t
 
tmp1
, 
tmp2
;

1139 
HAL_SD_Eº‹Ty≥def
 
tmp3
;

1142 
tmp1
 = 
hsd
->
DmaTøns„rC∂t
;

1143 
tmp2
 = 
hsd
->
SdTøns„rC∂t
;

1144 
tmp3
 = (
HAL_SD_Eº‹Ty≥def
)
hsd
->
SdTøns„rEº
;

1146 (
tmp1
 =0Ë&& (
tmp2
 =0Ë&& (
tmp3
 =
SD_OK
Ë&& (
timeout
 > 0))

1148 
tmp1
 = 
hsd
->
DmaTøns„rC∂t
;

1149 
tmp2
 = 
hsd
->
SdTøns„rC∂t
;

1150 
tmp3
 = (
HAL_SD_Eº‹Ty≥def
)
hsd
->
SdTøns„rEº
;

1151 
timeout
--;

1154 
timeout
 = 
Timeout
;

1157 (
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXACT
)Ë&& (
timeout
 > 0))

1159 
timeout
--;

1163 i‡(
hsd
->
SdO≥øti⁄
 =
SD_READ_MULTIPLE_BLOCK
)

1165 
îr‹°©e
 = 
	`HAL_SD_St›Tøns„r
(
hsd
);

1168 i‡((
timeout
 =0Ë&& (
îr‹°©e
 =
SD_OK
))

1170 
îr‹°©e
 = 
SD_DATA_TIMEOUT
;

1174 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1177 i‡(
hsd
->
SdTøns„rEº
 !
SD_OK
)

1179  (
HAL_SD_Eº‹Ty≥def
)(
hsd
->
SdTøns„rEº
);

1182  
îr‹°©e
;

1183 
	}
}

1194 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_CheckWrôeO≥øti⁄
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 
Timeout
)

1196 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

1197 
uöt32_t
 
timeout
 = 
Timeout
;

1198 
uöt32_t
 
tmp1
, 
tmp2
;

1199 
HAL_SD_Eº‹Ty≥def
 
tmp3
;

1202 
tmp1
 = 
hsd
->
DmaTøns„rC∂t
;

1203 
tmp2
 = 
hsd
->
SdTøns„rC∂t
;

1204 
tmp3
 = (
HAL_SD_Eº‹Ty≥def
)
hsd
->
SdTøns„rEº
;

1206 (
tmp1
 =0Ë&& (
tmp2
 =0Ë&& (
tmp3
 =
SD_OK
Ë&& (
timeout
 > 0))

1208 
tmp1
 = 
hsd
->
DmaTøns„rC∂t
;

1209 
tmp2
 = 
hsd
->
SdTøns„rC∂t
;

1210 
tmp3
 = (
HAL_SD_Eº‹Ty≥def
)
hsd
->
SdTøns„rEº
;

1211 
timeout
--;

1214 
timeout
 = 
Timeout
;

1217 (
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_TXACT
)Ë&& (
timeout
 > 0))

1219 
timeout
--;

1223 i‡(
hsd
->
SdO≥øti⁄
 =
SD_WRITE_MULTIPLE_BLOCK
)

1225 
îr‹°©e
 = 
	`HAL_SD_St›Tøns„r
(
hsd
);

1228 i‡((
timeout
 =0Ë&& (
îr‹°©e
 =
SD_OK
))

1230 
îr‹°©e
 = 
SD_DATA_TIMEOUT
;

1234 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1237 i‡(
hsd
->
SdTøns„rEº
 !
SD_OK
)

1239  (
HAL_SD_Eº‹Ty≥def
)(
hsd
->
SdTøns„rEº
);

1243 
	`HAL_SD_GëSètus
(
hsd
Ë!
SD_TRANSFER_OK
)

1247  
îr‹°©e
;

1248 
	}
}

1257 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_Eø£
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt64_t
 
°¨èddr
, uöt64_à
ídaddr
)

1259 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

1260 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

1262 
uöt32_t
 
dñay
 = 0;

1263 
__IO
 
uöt32_t
 
maxdñay
 = 0;

1264 
uöt8_t
 
ˇrd°©e
 = 0;

1267 i‡(((
hsd
->
CSD
[1] >> 20Ë& 
SD_CCCC_ERASE
) == 0)

1269 
îr‹°©e
 = 
SD_REQUEST_NOT_APPLICABLE
;

1271  
îr‹°©e
;

1275 
maxdñay
 = 120000 / (((
hsd
->
In°™˚
->
CLKCR
) & 0xFF) + 2);

1277 if((
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
Ë& 
SD_CARD_LOCKED
) == SD_CARD_LOCKED)

1279 
îr‹°©e
 = 
SD_LOCK_UNLOCK_FAILED
;

1281  
îr‹°©e
;

1285 i‡(
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
)

1287 
°¨èddr
 /= 512;

1288 
ídaddr
 /= 512;

1292 i‡((
hsd
->
C¨dTy≥
 =
STD_CAPACITY_SD_CARD_V1_1
Ë|| (hsd->C¨dTy≥ =
STD_CAPACITY_SD_CARD_V2_0
) ||\

1293 (
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
))

1296 
sdio_cmdöô°ru˘uª
.
Argumít
 =(
uöt32_t
)
°¨èddr
;

1297 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SD_ERASE_GRP_START
;

1298 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

1299 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

1300 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1301 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

1304 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SD_ERASE_GRP_START
);

1306 i‡(
îr‹°©e
 !
SD_OK
)

1308  
îr‹°©e
;

1312 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
ídaddr
;

1313 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SD_ERASE_GRP_END
;

1314 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

1317 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SD_ERASE_GRP_END
);

1319 i‡(
îr‹°©e
 !
SD_OK
)

1321  
îr‹°©e
;

1326 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

1327 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_ERASE
;

1328 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

1331 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_ERASE
);

1333 i‡(
îr‹°©e
 !
SD_OK
)

1335  
îr‹°©e
;

1338 ; 
dñay
 < 
maxdñay
; delay++)

1343 
îr‹°©e
 = 
	`SD_IsC¨dProgømmög
(
hsd
, &
ˇrd°©e
);

1345 
dñay
 = 
SD_DATATIMEOUT
;

1347 (
dñay
 > 0Ë&& (
îr‹°©e
 =
SD_OK
Ë&& ((
ˇrd°©e
 =
SD_CARD_PROGRAMMING
Ë|| (ˇrd°©ê=
SD_CARD_RECEIVING
)))

1349 
îr‹°©e
 = 
	`SD_IsC¨dProgømmög
(
hsd
, &
ˇrd°©e
);

1350 
dñay
--;

1353  
îr‹°©e
;

1354 
	}
}

1361 
	$HAL_SD_IRQH™dÀr
(
SD_H™dÀTy≥Def
 *
hsd
)

1364 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_IT_DATAEND
))

1366 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_IT_DATAEND
);

1369 
hsd
->
SdTøns„rC∂t
 = 1;

1372 
hsd
->
SdTøns„rEº
 = 
SD_OK
;

1374 
	`HAL_SD_X„rC∂tCÆlback
(
hsd
);

1376 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_IT_DCRCFAIL
))

1378 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
);

1380 
hsd
->
SdTøns„rEº
 = 
SD_DATA_CRC_FAIL
;

1382 
	`HAL_SD_X„rEº‹CÆlback
(
hsd
);

1385 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_IT_DTIMEOUT
))

1387 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
);

1389 
hsd
->
SdTøns„rEº
 = 
SD_DATA_TIMEOUT
;

1391 
	`HAL_SD_X„rEº‹CÆlback
(
hsd
);

1393 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_IT_RXOVERR
))

1395 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
);

1397 
hsd
->
SdTøns„rEº
 = 
SD_RX_OVERRUN
;

1399 
	`HAL_SD_X„rEº‹CÆlback
(
hsd
);

1401 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_IT_TXUNDERR
))

1403 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_TXUNDERR
);

1405 
hsd
->
SdTøns„rEº
 = 
SD_TX_UNDERRUN
;

1407 
	`HAL_SD_X„rEº‹CÆlback
(
hsd
);

1409 #ifde‡
SDIO_STA_STBITERR


1410 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_IT_STBITERR
))

1412 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
);

1414 
hsd
->
SdTøns„rEº
 = 
SD_START_BIT_ERR
;

1416 
	`HAL_SD_X„rEº‹CÆlback
(
hsd
);

1425 #ifde‡
SDIO_STA_STBITERR


1426 
	`__HAL_SD_SDIO_DISABLE_IT
(
hsd
, 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_DATAEND
 |\

1427 
SDIO_IT_TXFIFOHE
 | 
SDIO_IT_RXFIFOHF
 | 
SDIO_IT_TXUNDERR
 |\

1428 
SDIO_IT_RXOVERR
 | 
SDIO_IT_STBITERR
);

1430 
	`__HAL_SD_SDIO_DISABLE_IT
(
hsd
, 
SDIO_IT_DCRCFAIL
 | 
SDIO_IT_DTIMEOUT
 | 
SDIO_IT_DATAEND
 |\

1431 
SDIO_IT_TXFIFOHE
 | 
SDIO_IT_RXFIFOHF
 | 
SDIO_IT_TXUNDERR
 |\

1432 
SDIO_IT_RXOVERR
);

1434 
	}
}

1442 
__wók
 
	$HAL_SD_X„rC∂tCÆlback
(
SD_H™dÀTy≥Def
 *
hsd
)

1447 
	}
}

1454 
__wók
 
	$HAL_SD_X„rEº‹CÆlback
(
SD_H™dÀTy≥Def
 *
hsd
)

1459 
	}
}

1467 
__wók
 
	$HAL_SD_DMA_RxC∂tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

1472 
	}
}

1480 
__wók
 
	$HAL_SD_DMA_RxEº‹CÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

1485 
	}
}

1493 
__wók
 
	$HAL_SD_DMA_TxC∂tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

1498 
	}
}

1506 
__wók
 
	$HAL_SD_DMA_TxEº‹CÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

1511 
	}
}

1539 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_Gë_C¨dInfo
(
SD_H™dÀTy≥Def
 *
hsd
, 
HAL_SD_C¨dInfoTy≥def
 *
pC¨dInfo
)

1541 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

1542 
uöt32_t
 
tmp
 = 0;

1544 
pC¨dInfo
->
C¨dTy≥
 = (
uöt8_t
)(
hsd
->CardType);

1545 
pC¨dInfo
->
RCA
 = (
uöt16_t
)(
hsd
->RCA);

1548 
tmp
 = (
hsd
->
CSD
[0] & 0xFF000000) >> 24;

1549 
pC¨dInfo
->
SD_csd
.
CSDSåu˘
 = (
uöt8_t
)((
tmp
 & 0xC0) >> 6);

1550 
pC¨dInfo
->
SD_csd
.
SysS≥cVîsi⁄
 = (
uöt8_t
)((
tmp
 & 0x3C) >> 2);

1551 
pC¨dInfo
->
SD_csd
.
Re£rved1
 = 
tmp
 & 0x03;

1554 
tmp
 = (
hsd
->
CSD
[0] & 0x00FF0000) >> 16;

1555 
pC¨dInfo
->
SD_csd
.
TAAC
 = (
uöt8_t
)
tmp
;

1558 
tmp
 = (
hsd
->
CSD
[0] & 0x0000FF00) >> 8;

1559 
pC¨dInfo
->
SD_csd
.
NSAC
 = (
uöt8_t
)
tmp
;

1562 
tmp
 = 
hsd
->
CSD
[0] & 0x000000FF;

1563 
pC¨dInfo
->
SD_csd
.
MaxBusClkFªc
 = (
uöt8_t
)
tmp
;

1566 
tmp
 = (
hsd
->
CSD
[1] & 0xFF000000) >> 24;

1567 
pC¨dInfo
->
SD_csd
.
C¨dComdCœs£s
 = (
uöt16_t
)(
tmp
 << 4);

1570 
tmp
 = (
hsd
->
CSD
[1] & 0x00FF0000) >> 16;

1571 
pC¨dInfo
->
SD_csd
.
C¨dComdCœs£s
 |(
uöt16_t
)((
tmp
 & 0xF0) >> 4);

1572 
pC¨dInfo
->
SD_csd
.
RdBlockLí
 = (
uöt8_t
)(
tmp
 & 0x0F);

1575 
tmp
 = (
hsd
->
CSD
[1] & 0x0000FF00) >> 8;

1576 
pC¨dInfo
->
SD_csd
.
P¨tBlockRód
 = (
uöt8_t
)((
tmp
 & 0x80) >> 7);

1577 
pC¨dInfo
->
SD_csd
.
WrBlockMißlign
 = (
uöt8_t
)((
tmp
 & 0x40) >> 6);

1578 
pC¨dInfo
->
SD_csd
.
RdBlockMißlign
 = (
uöt8_t
)((
tmp
 & 0x20) >> 5);

1579 
pC¨dInfo
->
SD_csd
.
DSRIm∂
 = (
uöt8_t
)((
tmp
 & 0x10) >> 4);

1580 
pC¨dInfo
->
SD_csd
.
Re£rved2
 = 0;

1582 i‡((
hsd
->
C¨dTy≥
 =
STD_CAPACITY_SD_CARD_V1_1
Ë|| (hsd->C¨dTy≥ =
STD_CAPACITY_SD_CARD_V2_0
))

1584 
pC¨dInfo
->
SD_csd
.
Devi˚Size
 = (
tmp
 & 0x03) << 10;

1587 
tmp
 = (
uöt8_t
)(
hsd
->
CSD
[1] & 0x000000FF);

1588 
pC¨dInfo
->
SD_csd
.
Devi˚Size
 |(
tmp
) << 2;

1591 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[2] & 0xFF000000) >> 24);

1592 
pC¨dInfo
->
SD_csd
.
Devi˚Size
 |(
tmp
 & 0xC0) >> 6;

1594 
pC¨dInfo
->
SD_csd
.
MaxRdCuºítVDDMö
 = (
tmp
 & 0x38) >> 3;

1595 
pC¨dInfo
->
SD_csd
.
MaxRdCuºítVDDMax
 = (
tmp
 & 0x07);

1598 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[2] & 0x00FF0000) >> 16);

1599 
pC¨dInfo
->
SD_csd
.
MaxWrCuºítVDDMö
 = (
tmp
 & 0xE0) >> 5;

1600 
pC¨dInfo
->
SD_csd
.
MaxWrCuºítVDDMax
 = (
tmp
 & 0x1C) >> 2;

1601 
pC¨dInfo
->
SD_csd
.
Devi˚SizeMul
 = (
tmp
 & 0x03) << 1;

1603 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[2] & 0x0000FF00) >> 8);

1604 
pC¨dInfo
->
SD_csd
.
Devi˚SizeMul
 |(
tmp
 & 0x80) >> 7;

1606 
pC¨dInfo
->
C¨dC≠acôy
 = (pC¨dInfo->
SD_csd
.
Devi˚Size
 + 1) ;

1607 
pC¨dInfo
->
C¨dC≠acôy
 *(1 << (pC¨dInfo->
SD_csd
.
Devi˚SizeMul
 + 2));

1608 
pC¨dInfo
->
C¨dBlockSize
 = 1 << (pC¨dInfo->
SD_csd
.
RdBlockLí
);

1609 
pC¨dInfo
->
C¨dC≠acôy
 *pC¨dInfo->
C¨dBlockSize
;

1611 i‡(
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
)

1614 
tmp
 = (
uöt8_t
)(
hsd
->
CSD
[1] & 0x000000FF);

1615 
pC¨dInfo
->
SD_csd
.
Devi˚Size
 = (
tmp
 & 0x3F) << 16;

1618 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[2] & 0xFF000000) >> 24);

1620 
pC¨dInfo
->
SD_csd
.
Devi˚Size
 |(
tmp
 << 8);

1623 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[2] & 0x00FF0000) >> 16);

1625 
pC¨dInfo
->
SD_csd
.
Devi˚Size
 |(
tmp
);

1628 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[2] & 0x0000FF00) >> 8);

1630 
pC¨dInfo
->
C¨dC≠acôy
 = (
uöt64_t
)((((uöt64_tÌC¨dInfo->
SD_csd
.
Devi˚Size
 + 1)) * 512 * 1024);

1631 
pC¨dInfo
->
C¨dBlockSize
 = 512;

1636 
îr‹°©e
 = 
SD_ERROR
;

1639 
pC¨dInfo
->
SD_csd
.
Eø£GrSize
 = (
tmp
 & 0x40) >> 6;

1640 
pC¨dInfo
->
SD_csd
.
Eø£GrMul
 = (
tmp
 & 0x3F) << 1;

1643 
tmp
 = (
uöt8_t
)(
hsd
->
CSD
[2] & 0x000000FF);

1644 
pC¨dInfo
->
SD_csd
.
Eø£GrMul
 |(
tmp
 & 0x80) >> 7;

1645 
pC¨dInfo
->
SD_csd
.
WrPrŸe˘GrSize
 = (
tmp
 & 0x7F);

1648 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[3] & 0xFF000000) >> 24);

1649 
pC¨dInfo
->
SD_csd
.
WrPrŸe˘GrE«bÀ
 = (
tmp
 & 0x80) >> 7;

1650 
pC¨dInfo
->
SD_csd
.
M™DeÊECC
 = (
tmp
 & 0x60) >> 5;

1651 
pC¨dInfo
->
SD_csd
.
WrS≥edFa˘
 = (
tmp
 & 0x1C) >> 2;

1652 
pC¨dInfo
->
SD_csd
.
MaxWrBlockLí
 = (
tmp
 & 0x03) << 2;

1655 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[3] & 0x00FF0000) >> 16);

1656 
pC¨dInfo
->
SD_csd
.
MaxWrBlockLí
 |(
tmp
 & 0xC0) >> 6;

1657 
pC¨dInfo
->
SD_csd
.
WrôeBlockPaP¨tül
 = (
tmp
 & 0x20) >> 5;

1658 
pC¨dInfo
->
SD_csd
.
Re£rved3
 = 0;

1659 
pC¨dInfo
->
SD_csd
.
C⁄ã¡PrŸe˘Aµli
 = (
tmp
 & 0x01);

1662 
tmp
 = (
uöt8_t
)((
hsd
->
CSD
[3] & 0x0000FF00) >> 8);

1663 
pC¨dInfo
->
SD_csd
.
FûeF‹m©Grou›
 = (
tmp
 & 0x80) >> 7;

1664 
pC¨dInfo
->
SD_csd
.
C›yFœg
 = (
tmp
 & 0x40) >> 6;

1665 
pC¨dInfo
->
SD_csd
.
PîmWrPrŸe˘
 = (
tmp
 & 0x20) >> 5;

1666 
pC¨dInfo
->
SD_csd
.
TempWrPrŸe˘
 = (
tmp
 & 0x10) >> 4;

1667 
pC¨dInfo
->
SD_csd
.
FûeF‹m©
 = (
tmp
 & 0x0C) >> 2;

1668 
pC¨dInfo
->
SD_csd
.
ECC
 = (
tmp
 & 0x03);

1671 
tmp
 = (
uöt8_t
)(
hsd
->
CSD
[3] & 0x000000FF);

1672 
pC¨dInfo
->
SD_csd
.
CSD_CRC
 = (
tmp
 & 0xFE) >> 1;

1673 
pC¨dInfo
->
SD_csd
.
Re£rved4
 = 1;

1676 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[0] & 0xFF000000) >> 24);

1677 
pC¨dInfo
->
SD_cid
.
M™uÁ˘uªrID
 = 
tmp
;

1680 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[0] & 0x00FF0000) >> 16);

1681 
pC¨dInfo
->
SD_cid
.
OEM_AµliID
 = 
tmp
 << 8;

1684 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[0] & 0x000000FF00) >> 8);

1685 
pC¨dInfo
->
SD_cid
.
OEM_AµliID
 |
tmp
;

1688 
tmp
 = (
uöt8_t
)(
hsd
->
CID
[0] & 0x000000FF);

1689 
pC¨dInfo
->
SD_cid
.
ProdName1
 = 
tmp
 << 24;

1692 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[1] & 0xFF000000) >> 24);

1693 
pC¨dInfo
->
SD_cid
.
ProdName1
 |
tmp
 << 16;

1696 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[1] & 0x00FF0000) >> 16);

1697 
pC¨dInfo
->
SD_cid
.
ProdName1
 |
tmp
 << 8;

1700 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[1] & 0x0000FF00) >> 8);

1701 
pC¨dInfo
->
SD_cid
.
ProdName1
 |
tmp
;

1704 
tmp
 = (
uöt8_t
)(
hsd
->
CID
[1] & 0x000000FF);

1705 
pC¨dInfo
->
SD_cid
.
ProdName2
 = 
tmp
;

1708 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[2] & 0xFF000000) >> 24);

1709 
pC¨dInfo
->
SD_cid
.
ProdRev
 = 
tmp
;

1712 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[2] & 0x00FF0000) >> 16);

1713 
pC¨dInfo
->
SD_cid
.
ProdSN
 = 
tmp
 << 24;

1716 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[2] & 0x0000FF00) >> 8);

1717 
pC¨dInfo
->
SD_cid
.
ProdSN
 |
tmp
 << 16;

1720 
tmp
 = (
uöt8_t
)(
hsd
->
CID
[2] & 0x000000FF);

1721 
pC¨dInfo
->
SD_cid
.
ProdSN
 |
tmp
 << 8;

1724 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[3] & 0xFF000000) >> 24);

1725 
pC¨dInfo
->
SD_cid
.
ProdSN
 |
tmp
;

1728 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[3] & 0x00FF0000) >> 16);

1729 
pC¨dInfo
->
SD_cid
.
Re£rved1
 |(
tmp
 & 0xF0) >> 4;

1730 
pC¨dInfo
->
SD_cid
.
M™uÁ˘D©e
 = (
tmp
 & 0x0F) << 8;

1733 
tmp
 = (
uöt8_t
)((
hsd
->
CID
[3] & 0x0000FF00) >> 8);

1734 
pC¨dInfo
->
SD_cid
.
M™uÁ˘D©e
 |
tmp
;

1737 
tmp
 = (
uöt8_t
)(
hsd
->
CID
[3] & 0x000000FF);

1738 
pC¨dInfo
->
SD_cid
.
CID_CRC
 = (
tmp
 & 0xFE) >> 1;

1739 
pC¨dInfo
->
SD_cid
.
Re£rved2
 = 1;

1741  
îr‹°©e
;

1742 
	}
}

1755 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_WideBusO≥øti⁄_C⁄fig
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 
WideMode
)

1757 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

1758 
SDIO_InôTy≥Def
 
tmpöô
;

1761 i‡(
hsd
->
C¨dTy≥
 =
MULTIMEDIA_CARD
)

1763 
îr‹°©e
 = 
SD_UNSUPPORTED_FEATURE
;

1765  
îr‹°©e
;

1767 i‡((
hsd
->
C¨dTy≥
 =
STD_CAPACITY_SD_CARD_V1_1
Ë|| (hsd->C¨dTy≥ =
STD_CAPACITY_SD_CARD_V2_0
) ||\

1768 (
hsd
->
C¨dTy≥
 =
HIGH_CAPACITY_SD_CARD
))

1770 i‡(
WideMode
 =
SDIO_BUS_WIDE_8B
)

1772 
îr‹°©e
 = 
SD_UNSUPPORTED_FEATURE
;

1774 i‡(
WideMode
 =
SDIO_BUS_WIDE_4B
)

1776 
îr‹°©e
 = 
	`SD_WideBus_E«bÀ
(
hsd
);

1778 i‡(
WideMode
 =
SDIO_BUS_WIDE_1B
)

1780 
îr‹°©e
 = 
	`SD_WideBus_DißbÀ
(
hsd
);

1785 
îr‹°©e
 = 
SD_INVALID_PARAMETER
;

1788 i‡(
îr‹°©e
 =
SD_OK
)

1791 
tmpöô
.
ClockEdge
 = 
hsd
->
Inô
.ClockEdge;

1792 
tmpöô
.
ClockBy∑ss
 = 
hsd
->
Inô
.ClockBypass;

1793 
tmpöô
.
ClockPowîSave
 = 
hsd
->
Inô
.ClockPowerSave;

1794 
tmpöô
.
BusWide
 = 
WideMode
;

1795 
tmpöô
.
H¨dw¨eFlowC⁄åﬁ
 = 
hsd
->
Inô
.HardwareFlowControl;

1796 
tmpöô
.
ClockDiv
 = 
hsd
->
Inô
.ClockDiv;

1797 
	`SDIO_Inô
(
hsd
->
In°™˚
, 
tmpöô
);

1801  
îr‹°©e
;

1802 
	}
}

1809 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_St›Tøns„r
(
SD_H™dÀTy≥Def
 *
hsd
)

1811 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

1812 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

1815 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

1816 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_STOP_TRANSMISSION
;

1817 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

1818 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

1819 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1820 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

1823 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_STOP_TRANSMISSION
);

1825  
îr‹°©e
;

1826 
	}
}

1836 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_HighS≥ed
 (
SD_H™dÀTy≥Def
 *
hsd
)

1838 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

1839 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

1840 
SDIO_D©aInôTy≥Def
 
sdio_d©aöô°ru˘uª
;

1842 
uöt8_t
 
SD_hs
[64] = {0};

1843 
uöt32_t
 
SD_s¸
[2] = {0, 0};

1844 
uöt32_t
 
SD_SPEC
 = 0 ;

1845 
uöt32_t
 
cou¡
 = 0, *
ãmpbuff
 = (uöt32_à*)
SD_hs
;

1848 
hsd
->
In°™˚
->
DCTRL
 = 0;

1851 
îr‹°©e
 = 
	`SD_FödSCR
(
hsd
, 
SD_s¸
);

1853 i‡(
îr‹°©e
 !
SD_OK
)

1855  
îr‹°©e
;

1859 
SD_SPEC
 = (
SD_s¸
[1] & 0x01000000) | (SD_scr[1] & 0x02000000);

1861 i‡(
SD_SPEC
 !
SD_ALLZERO
)

1864 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)64;

1865 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SET_BLOCKLEN
;

1866 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

1867 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

1868 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

1869 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

1872 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SET_BLOCKLEN
);

1874 i‡(
îr‹°©e
 !
SD_OK
)

1876  
îr‹°©e
;

1880 
sdio_d©aöô°ru˘uª
.
D©aTimeOut
 = 
SD_DATATIMEOUT
;

1881 
sdio_d©aöô°ru˘uª
.
D©aLígth
 = 64;

1882 
sdio_d©aöô°ru˘uª
.
D©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_64B
 ;

1883 
sdio_d©aöô°ru˘uª
.
Tøns„rDú
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

1884 
sdio_d©aöô°ru˘uª
.
Tøns„rMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

1885 
sdio_d©aöô°ru˘uª
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

1886 
	`SDIO_D©aC⁄fig
(
hsd
->
In°™˚
, &
sdio_d©aöô°ru˘uª
);

1889 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0x80FFFF01;

1890 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_HS_SWITCH
;

1891 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

1894 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_HS_SWITCH
);

1896 i‡(
îr‹°©e
 !
SD_OK
)

1898  
îr‹°©e
;

1900 #ifde‡
SDIO_STA_STBITERR


1901 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
 | 
SDIO_FLAG_STBITERR
))

1903 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
))

1906 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXFIFOHF
))

1908 
cou¡
 = 0; count < 8; count++)

1910 *(
ãmpbuff
 + 
cou¡
Ë
	`SDIO_RódFIFO
(
hsd
->
In°™˚
);

1913 
ãmpbuff
 += 8;

1917 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

1919 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
);

1921 
îr‹°©e
 = 
SD_DATA_TIMEOUT
;

1923  
îr‹°©e
;

1925 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

1927 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
);

1929 
îr‹°©e
 = 
SD_DATA_CRC_FAIL
;

1931  
îr‹°©e
;

1933 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
))

1935 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
);

1937 
îr‹°©e
 = 
SD_RX_OVERRUN
;

1939  
îr‹°©e
;

1941 #ifde‡
SDIO_STA_STBITERR


1942 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
))

1944 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
);

1946 
îr‹°©e
 = 
SD_START_BIT_ERR
;

1948  
îr‹°©e
;

1956 
cou¡
 = 
SD_DATATIMEOUT
;

1958 (
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXDAVL
)Ë&& (
cou¡
 > 0))

1960 *
ãmpbuff
 = 
	`SDIO_RódFIFO
(
hsd
->
In°™˚
);

1961 
ãmpbuff
++;

1962 
cou¡
--;

1966 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

1969 i‡((
SD_hs
[13]& 2) != 2)

1971 
îr‹°©e
 = 
SD_UNSUPPORTED_FEATURE
;

1975  
îr‹°©e
;

1976 
	}
}

2004 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_SídSDSètus
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pSD°©us
)

2006 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

2007 
SDIO_D©aInôTy≥Def
 
sdio_d©aöô°ru˘uª
;

2008 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2009 
uöt32_t
 
cou¡
 = 0;

2012 i‡((
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
Ë& 
SD_CARD_LOCKED
) == SD_CARD_LOCKED)

2014 
îr‹°©e
 = 
SD_LOCK_UNLOCK_FAILED
;

2016  
îr‹°©e
;

2020 
sdio_cmdöô°ru˘uª
.
Argumít
 = 64;

2021 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SET_BLOCKLEN
;

2022 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

2023 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

2024 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

2025 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2028 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SET_BLOCKLEN
);

2030 i‡(
îr‹°©e
 !
SD_OK
)

2032  
îr‹°©e
;

2036 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)(
hsd
->
RCA
 << 16);

2037 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_APP_CMD
;

2038 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2041 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_APP_CMD
);

2043 i‡(
îr‹°©e
 !
SD_OK
)

2045  
îr‹°©e
;

2049 
sdio_d©aöô°ru˘uª
.
D©aTimeOut
 = 
SD_DATATIMEOUT
;

2050 
sdio_d©aöô°ru˘uª
.
D©aLígth
 = 64;

2051 
sdio_d©aöô°ru˘uª
.
D©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_64B
;

2052 
sdio_d©aöô°ru˘uª
.
Tøns„rDú
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

2053 
sdio_d©aöô°ru˘uª
.
Tøns„rMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

2054 
sdio_d©aöô°ru˘uª
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

2055 
	`SDIO_D©aC⁄fig
(
hsd
->
In°™˚
, &
sdio_d©aöô°ru˘uª
);

2058 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

2059 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SD_APP_STATUS
;

2060 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2063 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SD_APP_STATUS
);

2065 i‡(
îr‹°©e
 !
SD_OK
)

2067  
îr‹°©e
;

2071 #ifde‡
SDIO_STA_STBITERR


2072 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
 | 
SDIO_FLAG_STBITERR
))

2074 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
))

2077 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXFIFOHF
))

2079 
cou¡
 = 0; count < 8; count++)

2081 *(
pSD°©us
 + 
cou¡
Ë
	`SDIO_RódFIFO
(
hsd
->
In°™˚
);

2084 
pSD°©us
 += 8;

2088 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

2090 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
);

2092 
îr‹°©e
 = 
SD_DATA_TIMEOUT
;

2094  
îr‹°©e
;

2096 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

2098 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
);

2100 
îr‹°©e
 = 
SD_DATA_CRC_FAIL
;

2102  
îr‹°©e
;

2104 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
))

2106 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
);

2108 
îr‹°©e
 = 
SD_RX_OVERRUN
;

2110  
îr‹°©e
;

2112 #ifde‡
SDIO_STA_STBITERR


2113 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
))

2115 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
);

2117 
îr‹°©e
 = 
SD_START_BIT_ERR
;

2119  
îr‹°©e
;

2127 
cou¡
 = 
SD_DATATIMEOUT
;

2128 (
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXDAVL
)Ë&& (
cou¡
 > 0))

2130 *
pSD°©us
 = 
	`SDIO_RódFIFO
(
hsd
->
In°™˚
);

2131 
pSD°©us
++;

2132 
cou¡
--;

2136 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2138  
îr‹°©e
;

2139 
	}
}

2146 
HAL_SD_Tøns„rSèãTy≥def
 
	$HAL_SD_GëSètus
(
SD_H™dÀTy≥Def
 *
hsd
)

2148 
HAL_SD_C¨dSèãTy≥def
 
ˇrd°©e
 = 
SD_CARD_TRANSFER
;

2151 
ˇrd°©e
 = 
	`SD_GëSèã
(
hsd
);

2154 i‡(
ˇrd°©e
 =
SD_CARD_TRANSFER
)

2156  
SD_TRANSFER_OK
;

2158 if(
ˇrd°©e
 =
SD_CARD_ERROR
)

2160  
SD_TRANSFER_ERROR
;

2164  
SD_TRANSFER_BUSY
;

2166 
	}
}

2175 
HAL_SD_Eº‹Ty≥def
 
	$HAL_SD_GëC¨dSètus
(
SD_H™dÀTy≥Def
 *
hsd
, 
HAL_SD_C¨dSètusTy≥def
 *
pC¨dSètus
)

2177 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2178 
uöt32_t
 
tmp
 = 0;

2179 
uöt32_t
 
sd_°©us
[16];

2181 
îr‹°©e
 = 
	`HAL_SD_SídSDSètus
(
hsd
, 
sd_°©us
);

2183 i‡(
îr‹°©e
 !
SD_OK
)

2185  
îr‹°©e
;

2189 
tmp
 = (
sd_°©us
[0] & 0xC0) >> 6;

2190 
pC¨dSètus
->
DAT_BUS_WIDTH
 = (
uöt8_t
)
tmp
;

2193 
tmp
 = (
sd_°©us
[0] & 0x20) >> 5;

2194 
pC¨dSètus
->
SECURED_MODE
 = (
uöt8_t
)
tmp
;

2197 
tmp
 = (
sd_°©us
[2] & 0xFF);

2198 
pC¨dSètus
->
SD_CARD_TYPE
 = (
uöt8_t
)(
tmp
 << 8);

2201 
tmp
 = (
sd_°©us
[3] & 0xFF);

2202 
pC¨dSètus
->
SD_CARD_TYPE
 |(
uöt8_t
)
tmp
;

2205 
tmp
 = (
sd_°©us
[4] & 0xFF);

2206 
pC¨dSètus
->
SIZE_OF_PROTECTED_AREA
 = (
uöt8_t
)(
tmp
 << 24);

2209 
tmp
 = (
sd_°©us
[5] & 0xFF);

2210 
pC¨dSètus
->
SIZE_OF_PROTECTED_AREA
 |(
uöt8_t
)(
tmp
 << 16);

2213 
tmp
 = (
sd_°©us
[6] & 0xFF);

2214 
pC¨dSètus
->
SIZE_OF_PROTECTED_AREA
 |(
uöt8_t
)(
tmp
 << 8);

2217 
tmp
 = (
sd_°©us
[7] & 0xFF);

2218 
pC¨dSètus
->
SIZE_OF_PROTECTED_AREA
 |(
uöt8_t
)
tmp
;

2221 
tmp
 = (
sd_°©us
[8] & 0xFF);

2222 
pC¨dSètus
->
SPEED_CLASS
 = (
uöt8_t
)
tmp
;

2225 
tmp
 = (
sd_°©us
[9] & 0xFF);

2226 
pC¨dSètus
->
PERFORMANCE_MOVE
 = (
uöt8_t
)
tmp
;

2229 
tmp
 = (
sd_°©us
[10] & 0xF0) >> 4;

2230 
pC¨dSètus
->
AU_SIZE
 = (
uöt8_t
)
tmp
;

2233 
tmp
 = (
sd_°©us
[11] & 0xFF);

2234 
pC¨dSètus
->
ERASE_SIZE
 = (
uöt8_t
)(
tmp
 << 8);

2237 
tmp
 = (
sd_°©us
[12] & 0xFF);

2238 
pC¨dSètus
->
ERASE_SIZE
 |(
uöt8_t
)
tmp
;

2241 
tmp
 = (
sd_°©us
[13] & 0xFC) >> 2;

2242 
pC¨dSètus
->
ERASE_TIMEOUT
 = (
uöt8_t
)
tmp
;

2245 
tmp
 = (
sd_°©us
[13] & 0x3);

2246 
pC¨dSètus
->
ERASE_OFFSET
 = (
uöt8_t
)
tmp
;

2248  
îr‹°©e
;

2249 
	}
}

2270 
	$SD_DMA_RxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2272 
SD_H™dÀTy≥Def
 *
hsd
 = (SD_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

2275 
hsd
->
DmaTøns„rC∂t
 = 1;

2278 
hsd
->
SdTøns„rC∂t
 == 0)

2283 
	`HAL_DMA_Ab‹t
(
hdma
);

2286 
	`HAL_SD_DMA_RxC∂tCÆlback
(
hsd
->
hdm¨x
);

2287 
	}
}

2295 
	$SD_DMA_RxEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

2297 
SD_H™dÀTy≥Def
 *
hsd
 = (SD_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

2300 
	`HAL_SD_DMA_RxEº‹CÆlback
(
hsd
->
hdm¨x
);

2301 
	}
}

2309 
	$SD_DMA_TxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2311 
SD_H™dÀTy≥Def
 *
hsd
 = (SD_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

2314 
hsd
->
DmaTøns„rC∂t
 = 1;

2317 
hsd
->
SdTøns„rC∂t
 == 0)

2322 
	`HAL_DMA_Ab‹t
(
hdma
);

2325 
	`HAL_SD_DMA_TxC∂tCÆlback
(
hsd
->
hdm©x
);

2326 
	}
}

2334 
	$SD_DMA_TxEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

2336 
SD_H™dÀTy≥Def
 *
hsd
 = ( SD_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2339 
	`HAL_SD_DMA_TxEº‹CÆlback
(
hsd
->
hdm©x
);

2340 
	}
}

2347 
HAL_SD_C¨dSèãTy≥def
 
	$SD_GëSèã
(
SD_H™dÀTy≥Def
 *
hsd
)

2349 
uöt32_t
 
ª•1
 = 0;

2351 i‡(
	`SD_SídSètus
(
hsd
, &
ª•1
Ë!
SD_OK
)

2353  
SD_CARD_ERROR
;

2357  (
HAL_SD_C¨dSèãTy≥def
)((
ª•1
 >> 9) & 0x0F);

2359 
	}
}

2367 
HAL_SD_Eº‹Ty≥def
 
	$SD_Inôülize_C¨ds
(
SD_H™dÀTy≥Def
 *
hsd
)

2369 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

2370 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2371 
uöt16_t
 
sd_rˇ
 = 1;

2373 if(
	`SDIO_GëPowîSèã
(
hsd
->
In°™˚
) == 0)

2375 
îr‹°©e
 = 
SD_REQUEST_NOT_APPLICABLE
;

2377  
îr‹°©e
;

2380 if(
hsd
->
C¨dTy≥
 !
SECURE_DIGITAL_IO_CARD
)

2383 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

2384 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_ALL_SEND_CID
;

2385 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_LONG
;

2386 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

2387 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

2388 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2391 
îr‹°©e
 = 
	`SD_CmdRe•2Eº‹
(
hsd
);

2393 if(
îr‹°©e
 !
SD_OK
)

2395  
îr‹°©e
;

2399 
hsd
->
CID
[0] = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
);

2400 
hsd
->
CID
[1] = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP2
);

2401 
hsd
->
CID
[2] = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP3
);

2402 
hsd
->
CID
[3] = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP4
);

2405 if((
hsd
->
C¨dTy≥
 =
STD_CAPACITY_SD_CARD_V1_1
Ë|| (hsd->C¨dTy≥ =
STD_CAPACITY_SD_CARD_V2_0
) ||\

2406 (
hsd
->
C¨dTy≥
 =
SECURE_DIGITAL_IO_COMBO_CARD
Ë|| (hsd->C¨dTy≥ =
HIGH_CAPACITY_SD_CARD
))

2410 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SET_REL_ADDR
;

2411 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

2412 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2415 
îr‹°©e
 = 
	`SD_CmdRe•6Eº‹
(
hsd
, 
SD_CMD_SET_REL_ADDR
, &
sd_rˇ
);

2417 if(
îr‹°©e
 !
SD_OK
)

2419  
îr‹°©e
;

2423 i‡(
hsd
->
C¨dTy≥
 !
SECURE_DIGITAL_IO_CARD
)

2426 
hsd
->
RCA
 = 
sd_rˇ
;

2429 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)(
hsd
->
RCA
 << 16);

2430 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SEND_CSD
;

2431 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_LONG
;

2432 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2435 
îr‹°©e
 = 
	`SD_CmdRe•2Eº‹
(
hsd
);

2437 if(
îr‹°©e
 !
SD_OK
)

2439  
îr‹°©e
;

2443 
hsd
->
CSD
[0] = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
);

2444 
hsd
->
CSD
[1] = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP2
);

2445 
hsd
->
CSD
[2] = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP3
);

2446 
hsd
->
CSD
[3] = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP4
);

2450  
îr‹°©e
;

2451 
	}
}

2459 
HAL_SD_Eº‹Ty≥def
 
	$SD_Sñe˘_De£À˘
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt64_t
 
addr
)

2461 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

2462 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2465 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)
addr
;

2466 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SEL_DESEL_CARD
;

2467 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

2468 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

2469 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

2470 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2473 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SEL_DESEL_CARD
);

2475  
îr‹°©e
;

2476 
	}
}

2485 
HAL_SD_Eº‹Ty≥def
 
	$SD_PowîON
(
SD_H™dÀTy≥Def
 *
hsd
)

2487 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

2488 
__IO
 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2489 
uöt32_t
 
ª•⁄£
 = 0, 
cou¡
 = 0, 
vÆidvﬁège
 = 0;

2490 
uöt32_t
 
sdty≥
 = 
SD_STD_CAPACITY
;

2494 
	`__HAL_SD_SDIO_DISABLE
();

2497 
	`SDIO_PowîSèã_ON
(
hsd
->
In°™˚
);

2501 
	`HAL_Dñay
(1);

2504 
	`__HAL_SD_SDIO_ENABLE
();

2508 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

2509 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_GO_IDLE_STATE
;

2510 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_NO
;

2511 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

2512 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

2513 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2516 
îr‹°©e
 = 
	`SD_CmdEº‹
(
hsd
);

2518 if(
îr‹°©e
 !
SD_OK
)

2521  
îr‹°©e
;

2530 
sdio_cmdöô°ru˘uª
.
Argumít
 = 
SD_CHECK_PATTERN
;

2531 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_SDIO_SEND_IF_COND
;

2532 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

2533 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2536 
îr‹°©e
 = 
	`SD_CmdRe•7Eº‹
(
hsd
);

2538 i‡(
îr‹°©e
 =
SD_OK
)

2541 
hsd
->
C¨dTy≥
 = 
STD_CAPACITY_SD_CARD_V2_0
;

2542 
sdty≥
 = 
SD_HIGH_CAPACITY
;

2546 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

2547 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_APP_CMD
;

2548 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2551 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_APP_CMD
);

2556 if(
îr‹°©e
 =
SD_OK
)

2560 (!
vÆidvﬁège
Ë&& (
cou¡
 < 
SD_MAX_VOLT_TRIAL
))

2564 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

2565 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_APP_CMD
;

2566 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

2567 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

2568 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

2569 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2572 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_APP_CMD
);

2574 if(
îr‹°©e
 !
SD_OK
)

2576  
îr‹°©e
;

2580 
sdio_cmdöô°ru˘uª
.
Argumít
 = 
SD_VOLTAGE_WINDOW_SD
 | 
sdty≥
;

2581 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SD_APP_OP_COND
;

2582 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

2583 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

2584 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

2585 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2588 
îr‹°©e
 = 
	`SD_CmdRe•3Eº‹
(
hsd
);

2590 if(
îr‹°©e
 !
SD_OK
)

2592  
îr‹°©e
;

2596 
ª•⁄£
 = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
);

2599 
vÆidvﬁège
 = (((
ª•⁄£
 >> 31) == 1) ? 1 : 0);

2601 
cou¡
++;

2604 if(
cou¡
 >
SD_MAX_VOLT_TRIAL
)

2606 
îr‹°©e
 = 
SD_INVALID_VOLTRANGE
;

2608  
îr‹°©e
;

2611 if((
ª•⁄£
 & 
SD_HIGH_CAPACITY
) == SD_HIGH_CAPACITY)

2613 
hsd
->
C¨dTy≥
 = 
HIGH_CAPACITY_SD_CARD
;

2618  
îr‹°©e
;

2619 
	}
}

2626 
HAL_SD_Eº‹Ty≥def
 
	$SD_PowîOFF
(
SD_H™dÀTy≥Def
 *
hsd
)

2628 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2631 
	`SDIO_PowîSèã_OFF
(
hsd
->
In°™˚
);

2633  
îr‹°©e
;

2634 
	}
}

2643 
HAL_SD_Eº‹Ty≥def
 
	$SD_SídSètus
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pC¨dSètus
)

2645 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

2646 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2648 if(
pC¨dSètus
 =
NULL
)

2650 
îr‹°©e
 = 
SD_INVALID_PARAMETER
;

2652  
îr‹°©e
;

2656 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)(
hsd
->
RCA
 << 16);

2657 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SEND_STATUS
;

2658 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

2659 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

2660 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

2661 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

2664 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SEND_STATUS
);

2666 if(
îr‹°©e
 !
SD_OK
)

2668  
îr‹°©e
;

2672 *
pC¨dSètus
 = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
);

2674  
îr‹°©e
;

2675 
	}
}

2682 
HAL_SD_Eº‹Ty≥def
 
	$SD_CmdEº‹
(
SD_H™dÀTy≥Def
 *
hsd
)

2684 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2685 
uöt32_t
 
timeout
, 
tmp
;

2687 
timeout
 = 
SDIO_CMD0TIMEOUT
;

2689 
tmp
 = 
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CMDSENT
);

2691 (
timeout
 > 0Ë&& (!
tmp
))

2693 
tmp
 = 
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CMDSENT
);

2694 
timeout
--;

2697 if(
timeout
 == 0)

2699 
îr‹°©e
 = 
SD_CMD_RSP_TIMEOUT
;

2700  
îr‹°©e
;

2704 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2706  
îr‹°©e
;

2707 
	}
}

2714 
HAL_SD_Eº‹Ty≥def
 
	$SD_CmdRe•7Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
)

2716 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_ERROR
;

2717 
uöt32_t
 
timeout
 = 
SDIO_CMD0TIMEOUT
, 
tmp
;

2719 
tmp
 = 
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
);

2721 (!
tmp
Ë&& (
timeout
 > 0))

2723 
tmp
 = 
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
);

2724 
timeout
--;

2727 
tmp
 = 
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
);

2729 if((
timeout
 =0Ë|| 
tmp
)

2732 
îr‹°©e
 = 
SD_CMD_RSP_TIMEOUT
;

2734 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
);

2736  
îr‹°©e
;

2739 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CMDREND
))

2742 
îr‹°©e
 = 
SD_OK
;

2744 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CMDREND
);

2746  
îr‹°©e
;

2749  
îr‹°©e
;

2750 
	}
}

2758 
HAL_SD_Eº‹Ty≥def
 
	$SD_CmdRe•1Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt8_t
 
SD_CMD
)

2760 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2761 
uöt32_t
 
ª•⁄£_r1
;

2763 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
))

2767 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
))

2769 
îr‹°©e
 = 
SD_CMD_RSP_TIMEOUT
;

2771 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
);

2773  
îr‹°©e
;

2775 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
))

2777 
îr‹°©e
 = 
SD_CMD_CRC_FAIL
;

2779 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
);

2781  
îr‹°©e
;

2785 if(
	`SDIO_GëComm™dRe•⁄£
(
hsd
->
In°™˚
Ë!
SD_CMD
)

2787 
îr‹°©e
 = 
SD_ILLEGAL_CMD
;

2789  
îr‹°©e
;

2793 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2796 
ª•⁄£_r1
 = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
);

2798 if((
ª•⁄£_r1
 & 
SD_OCR_ERRORBITS
Ë=
SD_ALLZERO
)

2800  
îr‹°©e
;

2803 if((
ª•⁄£_r1
 & 
SD_OCR_ADDR_OUT_OF_RANGE
) == SD_OCR_ADDR_OUT_OF_RANGE)

2805 (
SD_ADDR_OUT_OF_RANGE
);

2808 if((
ª•⁄£_r1
 & 
SD_OCR_ADDR_MISALIGNED
) == SD_OCR_ADDR_MISALIGNED)

2810 (
SD_ADDR_MISALIGNED
);

2813 if((
ª•⁄£_r1
 & 
SD_OCR_BLOCK_LEN_ERR
) == SD_OCR_BLOCK_LEN_ERR)

2815 (
SD_BLOCK_LEN_ERR
);

2818 if((
ª•⁄£_r1
 & 
SD_OCR_ERASE_SEQ_ERR
) == SD_OCR_ERASE_SEQ_ERR)

2820 (
SD_ERASE_SEQ_ERR
);

2823 if((
ª•⁄£_r1
 & 
SD_OCR_BAD_ERASE_PARAM
) == SD_OCR_BAD_ERASE_PARAM)

2825 (
SD_BAD_ERASE_PARAM
);

2828 if((
ª•⁄£_r1
 & 
SD_OCR_WRITE_PROT_VIOLATION
) == SD_OCR_WRITE_PROT_VIOLATION)

2830 (
SD_WRITE_PROT_VIOLATION
);

2833 if((
ª•⁄£_r1
 & 
SD_OCR_LOCK_UNLOCK_FAILED
) == SD_OCR_LOCK_UNLOCK_FAILED)

2835 (
SD_LOCK_UNLOCK_FAILED
);

2838 if((
ª•⁄£_r1
 & 
SD_OCR_COM_CRC_FAILED
) == SD_OCR_COM_CRC_FAILED)

2840 (
SD_COM_CRC_FAILED
);

2843 if((
ª•⁄£_r1
 & 
SD_OCR_ILLEGAL_CMD
) == SD_OCR_ILLEGAL_CMD)

2845 (
SD_ILLEGAL_CMD
);

2848 if((
ª•⁄£_r1
 & 
SD_OCR_CARD_ECC_FAILED
) == SD_OCR_CARD_ECC_FAILED)

2850 (
SD_CARD_ECC_FAILED
);

2853 if((
ª•⁄£_r1
 & 
SD_OCR_CC_ERROR
) == SD_OCR_CC_ERROR)

2855 (
SD_CC_ERROR
);

2858 if((
ª•⁄£_r1
 & 
SD_OCR_GENERAL_UNKNOWN_ERROR
) == SD_OCR_GENERAL_UNKNOWN_ERROR)

2860 (
SD_GENERAL_UNKNOWN_ERROR
);

2863 if((
ª•⁄£_r1
 & 
SD_OCR_STREAM_READ_UNDERRUN
) == SD_OCR_STREAM_READ_UNDERRUN)

2865 (
SD_STREAM_READ_UNDERRUN
);

2868 if((
ª•⁄£_r1
 & 
SD_OCR_STREAM_WRITE_OVERRUN
) == SD_OCR_STREAM_WRITE_OVERRUN)

2870 (
SD_STREAM_WRITE_OVERRUN
);

2873 if((
ª•⁄£_r1
 & 
SD_OCR_CID_CSD_OVERWRITE
) == SD_OCR_CID_CSD_OVERWRITE)

2875 (
SD_CID_CSD_OVERWRITE
);

2878 if((
ª•⁄£_r1
 & 
SD_OCR_WP_ERASE_SKIP
) == SD_OCR_WP_ERASE_SKIP)

2880 (
SD_WP_ERASE_SKIP
);

2883 if((
ª•⁄£_r1
 & 
SD_OCR_CARD_ECC_DISABLED
) == SD_OCR_CARD_ECC_DISABLED)

2885 (
SD_CARD_ECC_DISABLED
);

2888 if((
ª•⁄£_r1
 & 
SD_OCR_ERASE_RESET
) == SD_OCR_ERASE_RESET)

2890 (
SD_ERASE_RESET
);

2893 if((
ª•⁄£_r1
 & 
SD_OCR_AKE_SEQ_ERROR
) == SD_OCR_AKE_SEQ_ERROR)

2895 (
SD_AKE_SEQ_ERROR
);

2898  
îr‹°©e
;

2899 
	}
}

2906 
HAL_SD_Eº‹Ty≥def
 
	$SD_CmdRe•3Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
)

2908 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2910 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
))

2914 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
))

2916 
îr‹°©e
 = 
SD_CMD_RSP_TIMEOUT
;

2918 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
);

2920  
îr‹°©e
;

2924 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2926  
îr‹°©e
;

2927 
	}
}

2934 
HAL_SD_Eº‹Ty≥def
 
	$SD_CmdRe•2Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
)

2936 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2938 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
))

2942 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
))

2944 
îr‹°©e
 = 
SD_CMD_RSP_TIMEOUT
;

2946 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
);

2948  
îr‹°©e
;

2950 i‡(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
))

2952 
îr‹°©e
 = 
SD_CMD_CRC_FAIL
;

2954 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
);

2956  
îr‹°©e
;

2964 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

2966  
îr‹°©e
;

2967 
	}
}

2977 
HAL_SD_Eº‹Ty≥def
 
	$SD_CmdRe•6Eº‹
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt8_t
 
SD_CMD
, 
uöt16_t
 *
pRCA
)

2979 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

2980 
uöt32_t
 
ª•⁄£_r1
;

2982 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
))

2986 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
))

2988 
îr‹°©e
 = 
SD_CMD_RSP_TIMEOUT
;

2990 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
);

2992  
îr‹°©e
;

2994 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
))

2996 
îr‹°©e
 = 
SD_CMD_CRC_FAIL
;

2998 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
);

3000  
îr‹°©e
;

3008 if(
	`SDIO_GëComm™dRe•⁄£
(
hsd
->
In°™˚
Ë!
SD_CMD
)

3010 
îr‹°©e
 = 
SD_ILLEGAL_CMD
;

3012  
îr‹°©e
;

3016 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

3019 
ª•⁄£_r1
 = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
);

3021 if((
ª•⁄£_r1
 & (
SD_R6_GENERAL_UNKNOWN_ERROR
 | 
SD_R6_ILLEGAL_CMD
 | 
SD_R6_COM_CRC_FAILED
)Ë=
SD_ALLZERO
)

3023 *
pRCA
 = (
uöt16_t
Ë(
ª•⁄£_r1
 >> 16);

3025  
îr‹°©e
;

3028 if((
ª•⁄£_r1
 & 
SD_R6_GENERAL_UNKNOWN_ERROR
) == SD_R6_GENERAL_UNKNOWN_ERROR)

3030 (
SD_GENERAL_UNKNOWN_ERROR
);

3033 if((
ª•⁄£_r1
 & 
SD_R6_ILLEGAL_CMD
) == SD_R6_ILLEGAL_CMD)

3035 (
SD_ILLEGAL_CMD
);

3038 if((
ª•⁄£_r1
 & 
SD_R6_COM_CRC_FAILED
) == SD_R6_COM_CRC_FAILED)

3040 (
SD_COM_CRC_FAILED
);

3043  
îr‹°©e
;

3044 
	}
}

3051 
HAL_SD_Eº‹Ty≥def
 
	$SD_WideBus_E«bÀ
(
SD_H™dÀTy≥Def
 *
hsd
)

3053 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

3054 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

3056 
uöt32_t
 
s¸
[2] = {0, 0};

3058 if((
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
Ë& 
SD_CARD_LOCKED
) == SD_CARD_LOCKED)

3060 
îr‹°©e
 = 
SD_LOCK_UNLOCK_FAILED
;

3062  
îr‹°©e
;

3066 
îr‹°©e
 = 
	`SD_FödSCR
(
hsd
, 
s¸
);

3068 if(
îr‹°©e
 !
SD_OK
)

3070  
îr‹°©e
;

3074 if((
s¸
[1] & 
SD_WIDE_BUS_SUPPORT
Ë!
SD_ALLZERO
)

3077 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)(
hsd
->
RCA
 << 16);

3078 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_APP_CMD
;

3079 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

3080 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

3081 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

3082 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

3085 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_APP_CMD
);

3087 if(
îr‹°©e
 !
SD_OK
)

3089  
îr‹°©e
;

3093 
sdio_cmdöô°ru˘uª
.
Argumít
 = 2;

3094 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_APP_SD_SET_BUSWIDTH
;

3095 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

3098 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_APP_SD_SET_BUSWIDTH
);

3100 if(
îr‹°©e
 !
SD_OK
)

3102  
îr‹°©e
;

3105  
îr‹°©e
;

3109 
îr‹°©e
 = 
SD_REQUEST_NOT_APPLICABLE
;

3111  
îr‹°©e
;

3113 
	}
}

3120 
HAL_SD_Eº‹Ty≥def
 
	$SD_WideBus_DißbÀ
(
SD_H™dÀTy≥Def
 *
hsd
)

3122 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

3123 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

3125 
uöt32_t
 
s¸
[2] = {0, 0};

3127 if((
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
Ë& 
SD_CARD_LOCKED
) == SD_CARD_LOCKED)

3129 
îr‹°©e
 = 
SD_LOCK_UNLOCK_FAILED
;

3131  
îr‹°©e
;

3135 
îr‹°©e
 = 
	`SD_FödSCR
(
hsd
, 
s¸
);

3137 if(
îr‹°©e
 !
SD_OK
)

3139  
îr‹°©e
;

3143 if((
s¸
[1] & 
SD_SINGLE_BUS_SUPPORT
Ë!
SD_ALLZERO
)

3146 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)(
hsd
->
RCA
 << 16);

3147 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_APP_CMD
;

3148 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

3149 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

3150 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

3151 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

3154 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_APP_CMD
);

3156 if(
îr‹°©e
 !
SD_OK
)

3158  
îr‹°©e
;

3162 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

3163 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_APP_SD_SET_BUSWIDTH
;

3164 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

3167 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_APP_SD_SET_BUSWIDTH
);

3169 if(
îr‹°©e
 !
SD_OK
)

3171  
îr‹°©e
;

3174  
îr‹°©e
;

3178 
îr‹°©e
 = 
SD_REQUEST_NOT_APPLICABLE
;

3180  
îr‹°©e
;

3182 
	}
}

3191 
HAL_SD_Eº‹Ty≥def
 
	$SD_FödSCR
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt32_t
 *
pSCR
)

3193 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

3194 
SDIO_D©aInôTy≥Def
 
sdio_d©aöô°ru˘uª
;

3195 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

3196 
uöt32_t
 
ödex
 = 0;

3197 
uöt32_t
 
ãmps¸
[2] = {0, 0};

3201 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)8;

3202 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SET_BLOCKLEN
;

3203 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

3204 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

3205 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

3206 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

3209 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SET_BLOCKLEN
);

3211 if(
îr‹°©e
 !
SD_OK
)

3213  
îr‹°©e
;

3217 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)((
hsd
->
RCA
) << 16);

3218 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_APP_CMD
;

3219 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

3222 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_APP_CMD
);

3224 if(
îr‹°©e
 !
SD_OK
)

3226  
îr‹°©e
;

3228 
sdio_d©aöô°ru˘uª
.
D©aTimeOut
 = 
SD_DATATIMEOUT
;

3229 
sdio_d©aöô°ru˘uª
.
D©aLígth
 = 8;

3230 
sdio_d©aöô°ru˘uª
.
D©aBlockSize
 = 
SDIO_DATABLOCK_SIZE_8B
;

3231 
sdio_d©aöô°ru˘uª
.
Tøns„rDú
 = 
SDIO_TRANSFER_DIR_TO_SDIO
;

3232 
sdio_d©aöô°ru˘uª
.
Tøns„rMode
 = 
SDIO_TRANSFER_MODE_BLOCK
;

3233 
sdio_d©aöô°ru˘uª
.
DPSM
 = 
SDIO_DPSM_ENABLE
;

3234 
	`SDIO_D©aC⁄fig
(
hsd
->
In°™˚
, &
sdio_d©aöô°ru˘uª
);

3237 
sdio_cmdöô°ru˘uª
.
Argumít
 = 0;

3238 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SD_APP_SEND_SCR
;

3239 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

3242 
îr‹°©e
 = 
	`SD_CmdRe•1Eº‹
(
hsd
, 
SD_CMD_SD_APP_SEND_SCR
);

3244 if(
îr‹°©e
 !
SD_OK
)

3246  
îr‹°©e
;

3248 #ifde‡
SDIO_STA_STBITERR


3249 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
 | 
SDIO_FLAG_STBITERR
))

3251 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
 | 
SDIO_FLAG_DCRCFAIL
 | 
SDIO_FLAG_DTIMEOUT
 | 
SDIO_FLAG_DBCKEND
))

3254 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXDAVL
))

3256 *(
ãmps¸
 + 
ödex
Ë
	`SDIO_RódFIFO
(
hsd
->
In°™˚
);

3257 
ödex
++;

3261 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
))

3263 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DTIMEOUT
);

3265 
îr‹°©e
 = 
SD_DATA_TIMEOUT
;

3267  
îr‹°©e
;

3269 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
))

3271 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_DCRCFAIL
);

3273 
îr‹°©e
 = 
SD_DATA_CRC_FAIL
;

3275  
îr‹°©e
;

3277 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
))

3279 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_RXOVERR
);

3281 
îr‹°©e
 = 
SD_RX_OVERRUN
;

3283  
îr‹°©e
;

3285 #ifde‡
SDIO_STA_STBITERR


3286 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
))

3288 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_STBITERR
);

3290 
îr‹°©e
 = 
SD_START_BIT_ERR
;

3292  
îr‹°©e
;

3301 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

3303 *(
pSCR
 + 1Ë((
ãmps¸
[0] & 
SD_0TO7BITS
Ë<< 24Ë| (—emps¸[0] & 
SD_8TO15BITS
) << 8) |\

3304 ((
ãmps¸
[0] & 
SD_16TO23BITS
Ë>> 8Ë| (—emps¸[0] & 
SD_24TO31BITS
) >> 24);

3306 *(
pSCR
Ë((
ãmps¸
[1] & 
SD_0TO7BITS
Ë<< 24Ë| (—emps¸[1] & 
SD_8TO15BITS
) << 8) |\

3307 ((
ãmps¸
[1] & 
SD_16TO23BITS
Ë>> 8Ë| (—emps¸[1] & 
SD_24TO31BITS
) >> 24);

3309  
îr‹°©e
;

3310 
	}
}

3318 
HAL_SD_Eº‹Ty≥def
 
	$SD_IsC¨dProgømmög
(
SD_H™dÀTy≥Def
 *
hsd
, 
uöt8_t
 *
pSètus
)

3320 
SDIO_CmdInôTy≥Def
 
sdio_cmdöô°ru˘uª
;

3321 
HAL_SD_Eº‹Ty≥def
 
îr‹°©e
 = 
SD_OK
;

3322 
__IO
 
uöt32_t
 
ª•⁄£R1
 = 0;

3324 
sdio_cmdöô°ru˘uª
.
Argumít
 = (
uöt32_t
)(
hsd
->
RCA
 << 16);

3325 
sdio_cmdöô°ru˘uª
.
CmdIndex
 = 
SD_CMD_SEND_STATUS
;

3326 
sdio_cmdöô°ru˘uª
.
Re•⁄£
 = 
SDIO_RESPONSE_SHORT
;

3327 
sdio_cmdöô°ru˘uª
.
WaôF‹I¡îru±
 = 
SDIO_WAIT_NO
;

3328 
sdio_cmdöô°ru˘uª
.
CPSM
 = 
SDIO_CPSM_ENABLE
;

3329 
	`SDIO_SídComm™d
(
hsd
->
In°™˚
, &
sdio_cmdöô°ru˘uª
);

3331 !
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
 | 
SDIO_FLAG_CMDREND
 | 
SDIO_FLAG_CTIMEOUT
))

3335 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
))

3337 
îr‹°©e
 = 
SD_CMD_RSP_TIMEOUT
;

3339 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CTIMEOUT
);

3341  
îr‹°©e
;

3343 if(
	`__HAL_SD_SDIO_GET_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
))

3345 
îr‹°©e
 = 
SD_CMD_CRC_FAIL
;

3347 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_FLAG_CCRCFAIL
);

3349  
îr‹°©e
;

3357 if((
uöt32_t
)
	`SDIO_GëComm™dRe•⁄£
(
hsd
->
In°™˚
Ë!
SD_CMD_SEND_STATUS
)

3359 
îr‹°©e
 = 
SD_ILLEGAL_CMD
;

3361  
îr‹°©e
;

3365 
	`__HAL_SD_SDIO_CLEAR_FLAG
(
hsd
, 
SDIO_STATIC_FLAGS
);

3369 
ª•⁄£R1
 = 
	`SDIO_GëRe•⁄£
(
SDIO_RESP1
);

3372 *
pSètus
 = (
uöt8_t
)((
ª•⁄£R1
 >> 9) & 0x0000000F);

3374 if((
ª•⁄£R1
 & 
SD_OCR_ERRORBITS
Ë=
SD_ALLZERO
)

3376  
îr‹°©e
;

3379 if((
ª•⁄£R1
 & 
SD_OCR_ADDR_OUT_OF_RANGE
) == SD_OCR_ADDR_OUT_OF_RANGE)

3381 (
SD_ADDR_OUT_OF_RANGE
);

3384 if((
ª•⁄£R1
 & 
SD_OCR_ADDR_MISALIGNED
) == SD_OCR_ADDR_MISALIGNED)

3386 (
SD_ADDR_MISALIGNED
);

3389 if((
ª•⁄£R1
 & 
SD_OCR_BLOCK_LEN_ERR
) == SD_OCR_BLOCK_LEN_ERR)

3391 (
SD_BLOCK_LEN_ERR
);

3394 if((
ª•⁄£R1
 & 
SD_OCR_ERASE_SEQ_ERR
) == SD_OCR_ERASE_SEQ_ERR)

3396 (
SD_ERASE_SEQ_ERR
);

3399 if((
ª•⁄£R1
 & 
SD_OCR_BAD_ERASE_PARAM
) == SD_OCR_BAD_ERASE_PARAM)

3401 (
SD_BAD_ERASE_PARAM
);

3404 if((
ª•⁄£R1
 & 
SD_OCR_WRITE_PROT_VIOLATION
) == SD_OCR_WRITE_PROT_VIOLATION)

3406 (
SD_WRITE_PROT_VIOLATION
);

3409 if((
ª•⁄£R1
 & 
SD_OCR_LOCK_UNLOCK_FAILED
) == SD_OCR_LOCK_UNLOCK_FAILED)

3411 (
SD_LOCK_UNLOCK_FAILED
);

3414 if((
ª•⁄£R1
 & 
SD_OCR_COM_CRC_FAILED
) == SD_OCR_COM_CRC_FAILED)

3416 (
SD_COM_CRC_FAILED
);

3419 if((
ª•⁄£R1
 & 
SD_OCR_ILLEGAL_CMD
) == SD_OCR_ILLEGAL_CMD)

3421 (
SD_ILLEGAL_CMD
);

3424 if((
ª•⁄£R1
 & 
SD_OCR_CARD_ECC_FAILED
) == SD_OCR_CARD_ECC_FAILED)

3426 (
SD_CARD_ECC_FAILED
);

3429 if((
ª•⁄£R1
 & 
SD_OCR_CC_ERROR
) == SD_OCR_CC_ERROR)

3431 (
SD_CC_ERROR
);

3434 if((
ª•⁄£R1
 & 
SD_OCR_GENERAL_UNKNOWN_ERROR
) == SD_OCR_GENERAL_UNKNOWN_ERROR)

3436 (
SD_GENERAL_UNKNOWN_ERROR
);

3439 if((
ª•⁄£R1
 & 
SD_OCR_STREAM_READ_UNDERRUN
) == SD_OCR_STREAM_READ_UNDERRUN)

3441 (
SD_STREAM_READ_UNDERRUN
);

3444 if((
ª•⁄£R1
 & 
SD_OCR_STREAM_WRITE_OVERRUN
) == SD_OCR_STREAM_WRITE_OVERRUN)

3446 (
SD_STREAM_WRITE_OVERRUN
);

3449 if((
ª•⁄£R1
 & 
SD_OCR_CID_CSD_OVERWRITE
) == SD_OCR_CID_CSD_OVERWRITE)

3451 (
SD_CID_CSD_OVERWRITE
);

3454 if((
ª•⁄£R1
 & 
SD_OCR_WP_ERASE_SKIP
) == SD_OCR_WP_ERASE_SKIP)

3456 (
SD_WP_ERASE_SKIP
);

3459 if((
ª•⁄£R1
 & 
SD_OCR_CARD_ECC_DISABLED
) == SD_OCR_CARD_ECC_DISABLED)

3461 (
SD_CARD_ECC_DISABLED
);

3464 if((
ª•⁄£R1
 & 
SD_OCR_ERASE_RESET
) == SD_OCR_ERASE_RESET)

3466 (
SD_ERASE_RESET
);

3469 if((
ª•⁄£R1
 & 
SD_OCR_AKE_SEQ_ERROR
) == SD_OCR_AKE_SEQ_ERROR)

3471 (
SD_AKE_SEQ_ERROR
);

3474  
îr‹°©e
;

3475 
	}
}

3481 
	gSTM32F401xC
 || 
	gSTM32F401xE
 || 
	gSTM32F411xE
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sdram.c

94 
	~"°m32f4xx_hÆ.h
"

104 #ifde‡
HAL_SDRAM_MODULE_ENABLED


105 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

106 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

140 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Inô
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
FMC_SDRAM_TimögTy≥Def
 *
Timög
)

143 if(
hsdøm
 =
NULL
)

145  
HAL_ERROR
;

148 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_RESET
)

151 
hsdøm
->
Lock
 = 
HAL_UNLOCKED
;

153 
	`HAL_SDRAM_M•Inô
(
hsdøm
);

157 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_BUSY
;

160 
	`FMC_SDRAM_Inô
(
hsdøm
->
In°™˚
, &(hsdøm->
Inô
));

163 
	`FMC_SDRAM_Timög_Inô
(
hsdøm
->
In°™˚
, 
Timög
, hsdøm->
Inô
.
SDB™k
);

166 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_READY
;

168  
HAL_OK
;

169 
	}
}

177 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_DeInô
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

180 
	`HAL_SDRAM_M•DeInô
(
hsdøm
);

183 
	`FMC_SDRAM_DeInô
(
hsdøm
->
In°™˚
, hsdøm->
Inô
.
SDB™k
);

186 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_RESET
;

189 
	`__HAL_UNLOCK
(
hsdøm
);

191  
HAL_OK
;

192 
	}
}

200 
__wók
 
	$HAL_SDRAM_M•Inô
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

205 
	}
}

213 
__wók
 
	$HAL_SDRAM_M•DeInô
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

218 
	}
}

226 
	$HAL_SDRAM_IRQH™dÀr
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

229 if(
	`__FMC_SDRAM_GET_FLAG
(
hsdøm
->
In°™˚
, 
FMC_SDRAM_FLAG_REFRESH_IT
))

232 
	`HAL_SDRAM_Re‰eshEº‹CÆlback
(
hsdøm
);

235 
	`__FMC_SDRAM_CLEAR_FLAG
(
hsdøm
->
In°™˚
, 
FMC_SDRAM_FLAG_REFRESH_ERROR
);

237 
	}
}

245 
__wók
 
	$HAL_SDRAM_Re‰eshEº‹CÆlback
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

250 
	}
}

258 
__wók
 
	$HAL_SDRAM_DMA_X„rC∂tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

263 
	}
}

270 
__wók
 
	$HAL_SDRAM_DMA_X„rEº‹CÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

275 
	}
}

303 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Ród_8b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, 
uöt8_t
 *
pD°Buf„r
, uöt32_à
Buf„rSize
)

305 
__IO
 
uöt8_t
 *
pSdømAddªss
 = (uöt8_à*)
pAddªss
;

308 
	`__HAL_LOCK
(
hsdøm
);

311 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_BUSY
)

313  
HAL_BUSY
;

315 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_PRECHARGED
)

317  
HAL_ERROR
;

321 ; 
Buf„rSize
 != 0; BufferSize--)

323 *
pD°Buf„r
 = *(
__IO
 
uöt8_t
 *)
pSdømAddªss
;

324 
pD°Buf„r
++;

325 
pSdømAddªss
++;

329 
	`__HAL_UNLOCK
(
hsdøm
);

331  
HAL_OK
;

332 
	}
}

343 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Wrôe_8b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, 
uöt8_t
 *
pSrcBuf„r
, uöt32_à
Buf„rSize
)

345 
__IO
 
uöt8_t
 *
pSdømAddªss
 = (uöt8_à*)
pAddªss
;

346 
uöt32_t
 
tmp
 = 0;

349 
	`__HAL_LOCK
(
hsdøm
);

352 
tmp
 = 
hsdøm
->
Sèã
;

354 if(
tmp
 =
HAL_SDRAM_STATE_BUSY
)

356  
HAL_BUSY
;

358 if((
tmp
 =
HAL_SDRAM_STATE_PRECHARGED
Ë|| (tm∞=
HAL_SDRAM_STATE_WRITE_PROTECTED
))

360  
HAL_ERROR
;

364 ; 
Buf„rSize
 != 0; BufferSize--)

366 *(
__IO
 
uöt8_t
 *)
pSdømAddªss
 = *
pSrcBuf„r
;

367 
pSrcBuf„r
++;

368 
pSdømAddªss
++;

372 
	`__HAL_UNLOCK
(
hsdøm
);

374  
HAL_OK
;

375 
	}
}

386 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Ród_16b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pD°Buf„r
, uöt32_à
Buf„rSize
)

388 
__IO
 
uöt16_t
 *
pSdømAddªss
 = (uöt16_à*)
pAddªss
;

391 
	`__HAL_LOCK
(
hsdøm
);

394 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_BUSY
)

396  
HAL_BUSY
;

398 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_PRECHARGED
)

400  
HAL_ERROR
;

404 ; 
Buf„rSize
 != 0; BufferSize--)

406 *
pD°Buf„r
 = *(
__IO
 
uöt16_t
 *)
pSdømAddªss
;

407 
pD°Buf„r
++;

408 
pSdømAddªss
++;

412 
	`__HAL_UNLOCK
(
hsdøm
);

414  
HAL_OK
;

415 
	}
}

426 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Wrôe_16b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pSrcBuf„r
, uöt32_à
Buf„rSize
)

428 
__IO
 
uöt16_t
 *
pSdømAddªss
 = (uöt16_à*)
pAddªss
;

429 
uöt32_t
 
tmp
 = 0;

432 
	`__HAL_LOCK
(
hsdøm
);

435 
tmp
 = 
hsdøm
->
Sèã
;

437 if(
tmp
 =
HAL_SDRAM_STATE_BUSY
)

439  
HAL_BUSY
;

441 if((
tmp
 =
HAL_SDRAM_STATE_PRECHARGED
Ë|| (tm∞=
HAL_SDRAM_STATE_WRITE_PROTECTED
))

443  
HAL_ERROR
;

447 ; 
Buf„rSize
 != 0; BufferSize--)

449 *(
__IO
 
uöt16_t
 *)
pSdømAddªss
 = *
pSrcBuf„r
;

450 
pSrcBuf„r
++;

451 
pSdømAddªss
++;

455 
	`__HAL_UNLOCK
(
hsdøm
);

457  
HAL_OK
;

458 
	}
}

469 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Ród_32b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pD°Buf„r
, uöt32_à
Buf„rSize
)

471 
__IO
 
uöt32_t
 *
pSdømAddªss
 = (uöt32_à*)
pAddªss
;

474 
	`__HAL_LOCK
(
hsdøm
);

477 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_BUSY
)

479  
HAL_BUSY
;

481 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_PRECHARGED
)

483  
HAL_ERROR
;

487 ; 
Buf„rSize
 != 0; BufferSize--)

489 *
pD°Buf„r
 = *(
__IO
 
uöt32_t
 *)
pSdømAddªss
;

490 
pD°Buf„r
++;

491 
pSdømAddªss
++;

495 
	`__HAL_UNLOCK
(
hsdøm
);

497  
HAL_OK
;

498 
	}
}

509 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Wrôe_32b
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pSrcBuf„r
, uöt32_à
Buf„rSize
)

511 
__IO
 
uöt32_t
 *
pSdømAddªss
 = (uöt32_à*)
pAddªss
;

512 
uöt32_t
 
tmp
 = 0;

515 
	`__HAL_LOCK
(
hsdøm
);

518 
tmp
 = 
hsdøm
->
Sèã
;

520 if(
tmp
 =
HAL_SDRAM_STATE_BUSY
)

522  
HAL_BUSY
;

524 if((
tmp
 =
HAL_SDRAM_STATE_PRECHARGED
Ë|| (tm∞=
HAL_SDRAM_STATE_WRITE_PROTECTED
))

526  
HAL_ERROR
;

530 ; 
Buf„rSize
 != 0; BufferSize--)

532 *(
__IO
 
uöt32_t
 *)
pSdømAddªss
 = *
pSrcBuf„r
;

533 
pSrcBuf„r
++;

534 
pSdømAddªss
++;

538 
	`__HAL_UNLOCK
(
hsdøm
);

540  
HAL_OK
;

541 
	}
}

552 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Ród_DMA
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pD°Buf„r
, uöt32_à
Buf„rSize
)

554 
uöt32_t
 
tmp
 = 0;

557 
	`__HAL_LOCK
(
hsdøm
);

560 
tmp
 = 
hsdøm
->
Sèã
;

562 if(
tmp
 =
HAL_SDRAM_STATE_BUSY
)

564  
HAL_BUSY
;

566 if(
tmp
 =
HAL_SDRAM_STATE_PRECHARGED
)

568  
HAL_ERROR
;

572 
hsdøm
->
hdma
->
X„rC∂tCÆlback
 = 
HAL_SDRAM_DMA_X„rC∂tCÆlback
;

573 
hsdøm
->
hdma
->
X„rEº‹CÆlback
 = 
HAL_SDRAM_DMA_X„rEº‹CÆlback
;

576 
	`HAL_DMA_Sèπ_IT
(
hsdøm
->
hdma
, (
uöt32_t
)
pAddªss
, (uöt32_t)
pD°Buf„r
, (uöt32_t)
Buf„rSize
);

579 
	`__HAL_UNLOCK
(
hsdøm
);

581  
HAL_OK
;

582 
	}
}

593 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_Wrôe_DMA
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pSrcBuf„r
, uöt32_à
Buf„rSize
)

595 
uöt32_t
 
tmp
 = 0;

598 
	`__HAL_LOCK
(
hsdøm
);

601 
tmp
 = 
hsdøm
->
Sèã
;

603 if(
tmp
 =
HAL_SDRAM_STATE_BUSY
)

605  
HAL_BUSY
;

607 if((
tmp
 =
HAL_SDRAM_STATE_PRECHARGED
Ë|| (tm∞=
HAL_SDRAM_STATE_WRITE_PROTECTED
))

609  
HAL_ERROR
;

613 
hsdøm
->
hdma
->
X„rC∂tCÆlback
 = 
HAL_SDRAM_DMA_X„rC∂tCÆlback
;

614 
hsdøm
->
hdma
->
X„rEº‹CÆlback
 = 
HAL_SDRAM_DMA_X„rEº‹CÆlback
;

617 
	`HAL_DMA_Sèπ_IT
(
hsdøm
->
hdma
, (
uöt32_t
)
pSrcBuf„r
, (uöt32_t)
pAddªss
, (uöt32_t)
Buf„rSize
);

620 
	`__HAL_UNLOCK
(
hsdøm
);

622  
HAL_OK
;

623 
	}
}

649 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_WrôePrŸe˘i⁄_E«bÀ
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

652 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_BUSY
)

654  
HAL_BUSY
;

658 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_BUSY
;

661 
	`FMC_SDRAM_WrôePrŸe˘i⁄_E«bÀ
(
hsdøm
->
In°™˚
, hsdøm->
Inô
.
SDB™k
);

664 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_WRITE_PROTECTED
;

666  
HAL_OK
;

667 
	}
}

675 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_WrôePrŸe˘i⁄_DißbÀ
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

678 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_BUSY
)

680  
HAL_BUSY
;

684 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_BUSY
;

687 
	`FMC_SDRAM_WrôePrŸe˘i⁄_DißbÀ
(
hsdøm
->
In°™˚
, hsdøm->
Inô
.
SDB™k
);

690 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_READY
;

692  
HAL_OK
;

693 
	}
}

703 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_SídComm™d
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
FMC_SDRAM_Comm™dTy≥Def
 *
Comm™d
, 
uöt32_t
 
Timeout
)

706 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_BUSY
)

708  
HAL_BUSY
;

712 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_BUSY
;

715 
	`FMC_SDRAM_SídComm™d
(
hsdøm
->
In°™˚
, 
Comm™d
, 
Timeout
);

718 if(
Comm™d
->
Comm™dMode
 =
FMC_SDRAM_CMD_PALL
)

720 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_PRECHARGED
;

724 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_READY
;

727  
HAL_OK
;

728 
	}
}

737 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_ProgømRe‰eshR©e
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 
Re‰eshR©e
)

740 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_BUSY
)

742  
HAL_BUSY
;

746 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_BUSY
;

749 
	`FMC_SDRAM_ProgømRe‰eshR©e
(
hsdøm
->
In°™˚
 ,
Re‰eshR©e
);

752 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_READY
;

754  
HAL_OK
;

755 
	}
}

764 
HAL_SètusTy≥Def
 
	$HAL_SDRAM_SëAutoRe‰eshNumbî
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
, 
uöt32_t
 
AutoRe‰eshNumbî
)

767 if(
hsdøm
->
Sèã
 =
HAL_SDRAM_STATE_BUSY
)

769  
HAL_BUSY
;

773 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_BUSY
;

776 
	`FMC_SDRAM_SëAutoRe‰eshNumbî
(
hsdøm
->
In°™˚
 ,
AutoRe‰eshNumbî
);

779 
hsdøm
->
Sèã
 = 
HAL_SDRAM_STATE_READY
;

781  
HAL_OK
;

782 
	}
}

790 
uöt32_t
 
	$HAL_SDRAM_GëModeSètus
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

793 (
	`FMC_SDRAM_GëModeSètus
(
hsdøm
->
In°™˚
, hsdøm->
Inô
.
SDB™k
));

794 
	}
}

821 
HAL_SDRAM_SèãTy≥Def
 
	$HAL_SDRAM_GëSèã
(
SDRAM_H™dÀTy≥Def
 *
hsdøm
)

823  
hsdøm
->
Sèã
;

824 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_smartcard.c

131 
	~"°m32f4xx_hÆ.h
"

141 #ifde‡
HAL_SMARTCARD_MODULE_ENABLED


147 
	#SMARTCARD_TIMEOUT_VALUE
 22000

	)

157 
SMARTCARD_SëC⁄fig
 (
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

158 
HAL_SètusTy≥Def
 
SMARTCARD_Tønsmô_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

159 
HAL_SètusTy≥Def
 
SMARTCARD_EndTønsmô_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsm¨tˇrd
);

160 
HAL_SètusTy≥Def
 
SMARTCARD_Re˚ive_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
);

161 
SMARTCARD_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

162 
SMARTCARD_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

163 
SMARTCARD_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

164 
HAL_SètusTy≥Def
 
SMARTCARD_WaôOnFœgU¡ûTimeout
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

236 
HAL_SètusTy≥Def
 
	$HAL_SMARTCARD_Inô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

239 if(
hsc
 =
NULL
)

241  
HAL_ERROR
;

245 
	`as£π_∑øm
(
	`IS_SMARTCARD_INSTANCE
(
hsc
->
In°™˚
));

246 
	`as£π_∑øm
(
	`IS_SMARTCARD_NACK_STATE
(
hsc
->
Inô
.
NACKSèã
));

248 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_RESET
)

251 
hsc
->
Lock
 = 
HAL_UNLOCKED
;

253 
	`HAL_SMARTCARD_M•Inô
(
hsc
);

256 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY
;

259 
	`MODIFY_REG
(
hsc
->
In°™˚
->
GTPR
, 
USART_GTPR_PSC
, hsc->
Inô
.
PªsˇÀr
);

262 
	`MODIFY_REG
(
hsc
->
In°™˚
->
GTPR
, 
USART_GTPR_GT
, ((hsc->
Inô
.
Gu¨dTime
)<<8));

265 
	`SMARTCARD_SëC⁄fig
(
hsc
);

270 
hsc
->
In°™˚
->
CR2
 &~
USART_CR2_LINEN
;

271 
hsc
->
In°™˚
->
CR3
 &~(
USART_CR3_IREN
 | 
USART_CR3_HDSEL
);

274 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_PE
);

277 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_ERR
);

280 
	`__HAL_SMARTCARD_ENABLE
(
hsc
);

283 
	`MODIFY_REG
(
hsc
->
In°™˚
->
CR3
, 
USART_CR3_NACK
, hsc->
Inô
.
NACKSèã
);

286 
hsc
->
In°™˚
->
CR3
 |(
USART_CR3_SCEN
);

289 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_NONE
;

290 
hsc
->
Sèã

HAL_SMARTCARD_STATE_READY
;

292  
HAL_OK
;

293 
	}
}

301 
HAL_SètusTy≥Def
 
	$HAL_SMARTCARD_DeInô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

304 if(
hsc
 =
NULL
)

306  
HAL_ERROR
;

310 
	`as£π_∑øm
(
	`IS_SMARTCARD_INSTANCE
(
hsc
->
In°™˚
));

312 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY
;

315 
	`__HAL_SMARTCARD_DISABLE
(
hsc
);

318 
	`HAL_SMARTCARD_M•DeInô
(
hsc
);

320 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_NONE
;

321 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_RESET
;

324 
	`__HAL_UNLOCK
(
hsc
);

326  
HAL_OK
;

327 
	}
}

335 
__wók
 
	$HAL_SMARTCARD_M•Inô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

340 
	}
}

348 
__wók
 
	$HAL_SMARTCARD_M•DeInô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

353 
	}
}

418 
HAL_SètusTy≥Def
 
	$HAL_SMARTCARD_Tønsmô
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

420 
uöt16_t
* 
tmp
;

421 
uöt32_t
 
tmp1
 = 0;

423 
tmp1
 = 
hsc
->
Sèã
;

424 if((
tmp1
 =
HAL_SMARTCARD_STATE_READY
Ë|| (tmp1 =
HAL_SMARTCARD_STATE_BUSY_RX
))

426 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

428  
HAL_ERROR
;

432 
	`__HAL_LOCK
(
hsc
);

434 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_NONE
;

436 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_RX
)

438 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX_RX
;

442 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

445 
hsc
->
TxX„rSize
 = 
Size
;

446 
hsc
->
TxX„rCou¡
 = 
Size
;

447 
hsc
->
TxX„rCou¡
 > 0)

449 
hsc
->
TxX„rCou¡
--;

450 if(
	`SMARTCARD_WaôOnFœgU¡ûTimeout
(
hsc
, 
SMARTCARD_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

452  
HAL_TIMEOUT
;

454 
tmp
 = (
uöt16_t
*Ë
pD©a
;

455 
hsc
->
In°™˚
->
DR
 = (*
tmp
 & (
uöt16_t
)0x01FF);

456 
pD©a
 +=1;

459 if(
	`SMARTCARD_WaôOnFœgU¡ûTimeout
(
hsc
, 
SMARTCARD_FLAG_TC
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

461  
HAL_TIMEOUT
;

465 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_TX_RX
)

467 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_RX
;

471 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_READY
;

474 
	`__HAL_UNLOCK
(
hsc
);

476  
HAL_OK
;

480  
HAL_BUSY
;

482 
	}
}

493 
HAL_SètusTy≥Def
 
	$HAL_SMARTCARD_Re˚ive
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

495 
uöt16_t
* 
tmp
;

496 
uöt32_t
 
tmp1
 = 0;

498 
tmp1
 = 
hsc
->
Sèã
;

499 if((
tmp1
 =
HAL_SMARTCARD_STATE_READY
Ë|| (tmp1 =
HAL_SMARTCARD_STATE_BUSY_TX
))

501 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

503  
HAL_ERROR
;

507 
	`__HAL_LOCK
(
hsc
);

509 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_NONE
;

512 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_TX
)

514 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX_RX
;

518 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_RX
;

521 
hsc
->
RxX„rSize
 = 
Size
;

522 
hsc
->
RxX„rCou¡
 = 
Size
;

525 
hsc
->
RxX„rCou¡
 > 0)

527 
hsc
->
RxX„rCou¡
--;

528 if(
	`SMARTCARD_WaôOnFœgU¡ûTimeout
(
hsc
, 
SMARTCARD_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

530  
HAL_TIMEOUT
;

532 
tmp
 = (
uöt16_t
*Ë
pD©a
;

533 *
tmp
 = (
uöt16_t
)(
hsc
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

534 
pD©a
 +=1;

538 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_TX_RX
)

540 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

544 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_READY
;

548 
	`__HAL_UNLOCK
(
hsc
);

550  
HAL_OK
;

554  
HAL_BUSY
;

556 
	}
}

566 
HAL_SètusTy≥Def
 
	$HAL_SMARTCARD_Tønsmô_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

568 
uöt32_t
 
tmp1
 = 0;

570 
tmp1
 = 
hsc
->
Sèã
;

571 if((
tmp1
 =
HAL_SMARTCARD_STATE_READY
Ë|| (tmp1 =
HAL_SMARTCARD_STATE_BUSY_RX
))

573 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

575  
HAL_ERROR
;

579 
	`__HAL_LOCK
(
hsc
);

581 
hsc
->
pTxBuffPå
 = 
pD©a
;

582 
hsc
->
TxX„rSize
 = 
Size
;

583 
hsc
->
TxX„rCou¡
 = 
Size
;

585 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_NONE
;

587 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_RX
)

589 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX_RX
;

593 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

597 
	`__HAL_UNLOCK
(
hsc
);

600 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_PE
);

603 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_ERR
);

606 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_TXE
);

608  
HAL_OK
;

612  
HAL_BUSY
;

614 
	}
}

624 
HAL_SètusTy≥Def
 
	$HAL_SMARTCARD_Re˚ive_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

626 
uöt32_t
 
tmp1
 = 0;

628 
tmp1
 = 
hsc
->
Sèã
;

629 if((
tmp1
 =
HAL_SMARTCARD_STATE_READY
Ë|| (tmp1 =
HAL_SMARTCARD_STATE_BUSY_TX
))

631 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

633  
HAL_ERROR
;

637 
	`__HAL_LOCK
(
hsc
);

639 
hsc
->
pRxBuffPå
 = 
pD©a
;

640 
hsc
->
RxX„rSize
 = 
Size
;

641 
hsc
->
RxX„rCou¡
 = 
Size
;

643 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_NONE
;

645 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_TX
)

647 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX_RX
;

651 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_RX
;

654 
	`__HAL_UNLOCK
(
hsc
);

657 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_RXNE
);

660 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_PE
);

663 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_ERR
);

665  
HAL_OK
;

669  
HAL_BUSY
;

671 
	}
}

681 
HAL_SètusTy≥Def
 
	$HAL_SMARTCARD_Tønsmô_DMA
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

683 
uöt32_t
 *
tmp
;

684 
uöt32_t
 
tmp1
 = 0;

686 
tmp1
 = 
hsc
->
Sèã
;

687 if((
tmp1
 =
HAL_SMARTCARD_STATE_READY
Ë|| (tmp1 =
HAL_SMARTCARD_STATE_BUSY_RX
))

689 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

691  
HAL_ERROR
;

695 
	`__HAL_LOCK
(
hsc
);

697 
hsc
->
pTxBuffPå
 = 
pD©a
;

698 
hsc
->
TxX„rSize
 = 
Size
;

699 
hsc
->
TxX„rCou¡
 = 
Size
;

701 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_NONE
;

703 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_RX
)

705 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX_RX
;

709 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

713 
hsc
->
hdm©x
->
X„rC∂tCÆlback
 = 
SMARTCARD_DMATønsmôC∂t
;

716 
hsc
->
hdm©x
->
X„rEº‹CÆlback
 = 
SMARTCARD_DMAEº‹
;

719 
tmp
 = (
uöt32_t
*)&
pD©a
;

720 
	`HAL_DMA_Sèπ_IT
(
hsc
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hsc->
In°™˚
->
DR
, 
Size
);

723 
	`__HAL_SMARTCARD_CLEAR_FLAG
(
hsc
, 
SMARTCARD_FLAG_TC
);

727 
hsc
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

730 
	`__HAL_UNLOCK
(
hsc
);

732  
HAL_OK
;

736  
HAL_BUSY
;

738 
	}
}

749 
HAL_SètusTy≥Def
 
	$HAL_SMARTCARD_Re˚ive_DMA
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

751 
uöt32_t
 *
tmp
;

752 
uöt32_t
 
tmp1
 = 0;

754 
tmp1
 = 
hsc
->
Sèã
;

755 if((
tmp1
 =
HAL_SMARTCARD_STATE_READY
Ë|| (tmp1 =
HAL_SMARTCARD_STATE_BUSY_TX
))

757 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

759  
HAL_ERROR
;

763 
	`__HAL_LOCK
(
hsc
);

765 
hsc
->
pRxBuffPå
 = 
pD©a
;

766 
hsc
->
RxX„rSize
 = 
Size
;

768 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_NONE
;

770 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_TX
)

772 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX_RX
;

776 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_RX
;

780 
hsc
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SMARTCARD_DMARe˚iveC∂t
;

783 
hsc
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SMARTCARD_DMAEº‹
;

786 
tmp
 = (
uöt32_t
*)&
pD©a
;

787 
	`HAL_DMA_Sèπ_IT
(
hsc
->
hdm¨x
, (
uöt32_t
)&hsc->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, 
Size
);

791 
hsc
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

794 
	`__HAL_UNLOCK
(
hsc
);

796  
HAL_OK
;

800  
HAL_BUSY
;

802 
	}
}

810 
	$HAL_SMARTCARD_IRQH™dÀr
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

812 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

814 
tmp1
 = 
hsc
->
In°™˚
->
SR
;

815 
tmp2
 = 
	`__HAL_SMARTCARD_GET_IT_SOURCE
(
hsc
, 
SMARTCARD_IT_PE
);

818 if(((
tmp1
 & 
SMARTCARD_FLAG_PE
Ë!
RESET
Ë&& (
tmp2
 != RESET))

820 
	`__HAL_SMARTCARD_CLEAR_PEFLAG
(
hsc
);

821 
hsc
->
Eº‹Code
 |
HAL_SMARTCARD_ERROR_PE
;

824 
tmp2
 = 
	`__HAL_SMARTCARD_GET_IT_SOURCE
(
hsc
, 
SMARTCARD_IT_ERR
);

826 if(((
tmp1
 & 
SMARTCARD_FLAG_FE
Ë!
RESET
Ë&& (
tmp2
 != RESET))

828 
	`__HAL_SMARTCARD_CLEAR_FEFLAG
(
hsc
);

829 
hsc
->
Eº‹Code
 |
HAL_SMARTCARD_ERROR_FE
;

832 
tmp2
 = 
	`__HAL_SMARTCARD_GET_IT_SOURCE
(
hsc
, 
SMARTCARD_IT_ERR
);

834 if(((
tmp1
 & 
SMARTCARD_FLAG_NE
Ë!
RESET
Ë&& (
tmp2
 != RESET))

836 
	`__HAL_SMARTCARD_CLEAR_NEFLAG
(
hsc
);

837 
hsc
->
Eº‹Code
 |
HAL_SMARTCARD_ERROR_NE
;

840 
tmp2
 = 
	`__HAL_SMARTCARD_GET_IT_SOURCE
(
hsc
, 
SMARTCARD_IT_ERR
);

842 if(((
tmp1
 & 
SMARTCARD_FLAG_ORE
Ë!
RESET
Ë&& (
tmp2
 != RESET))

844 
	`__HAL_SMARTCARD_CLEAR_OREFLAG
(
hsc
);

845 
hsc
->
Eº‹Code
 |
HAL_SMARTCARD_ERROR_ORE
;

848 
tmp2
 = 
	`__HAL_SMARTCARD_GET_IT_SOURCE
(
hsc
, 
SMARTCARD_IT_RXNE
);

850 if(((
tmp1
 & 
SMARTCARD_FLAG_RXNE
Ë!
RESET
Ë&& (
tmp2
 != RESET))

852 
	`SMARTCARD_Re˚ive_IT
(
hsc
);

855 
tmp2
 = 
	`__HAL_SMARTCARD_GET_IT_SOURCE
(
hsc
, 
SMARTCARD_IT_TXE
);

857 if(((
tmp1
 & 
SMARTCARD_FLAG_TXE
Ë!
RESET
Ë&& (
tmp2
 != RESET))

859 
	`SMARTCARD_Tønsmô_IT
(
hsc
);

862 
tmp2
 = 
	`__HAL_SMARTCARD_GET_IT_SOURCE
(
hsc
, 
SMARTCARD_IT_TC
);

864 if(((
tmp1
 & 
SMARTCARD_FLAG_TC
Ë!
RESET
Ë&& (
tmp2
 != RESET))

866 
	`SMARTCARD_EndTønsmô_IT
(
hsc
);

870 if(
hsc
->
Eº‹Code
 !
HAL_SMARTCARD_ERROR_NONE
)

873 
hsc
->
Sèã

HAL_SMARTCARD_STATE_READY
;

874 
	`HAL_SMARTCARD_Eº‹CÆlback
(
hsc
);

876 
	}
}

884 
__wók
 
	$HAL_SMARTCARD_TxC∂tCÆlback
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

889 
	}
}

897 
__wók
 
	$HAL_SMARTCARD_RxC∂tCÆlback
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

902 
	}
}

910 
__wók
 
	$HAL_SMARTCARD_Eº‹CÆlback
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

915 
	}
}

942 
HAL_SMARTCARD_SèãTy≥Def
 
	$HAL_SMARTCARD_GëSèã
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

944  
hsc
->
Sèã
;

945 
	}
}

953 
uöt32_t
 
	$HAL_SMARTCARD_GëEº‹
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

955  
hsc
->
Eº‹Code
;

956 
	}
}

968 
	$SMARTCARD_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

970 
SMARTCARD_H™dÀTy≥Def
* 
hsc
 = ( SMARTCARD_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

972 
hsc
->
TxX„rCou¡
 = 0;

976 
hsc
->
In°™˚
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_DMAT
);

979 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_TC
);

980 
	}
}

988 
	$SMARTCARD_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

990 
SMARTCARD_H™dÀTy≥Def
* 
hsc
 = ( SMARTCARD_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

992 
hsc
->
RxX„rCou¡
 = 0;

996 
hsc
->
In°™˚
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_DMAR
);

999 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_TX_RX
)

1001 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

1005 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_READY
;

1008 
	`HAL_SMARTCARD_RxC∂tCÆlback
(
hsc
);

1009 
	}
}

1017 
	$SMARTCARD_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1019 
SMARTCARD_H™dÀTy≥Def
* 
hsc
 = ( SMARTCARD_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1021 
hsc
->
RxX„rCou¡
 = 0;

1022 
hsc
->
TxX„rCou¡
 = 0;

1023 
hsc
->
Eº‹Code
 = 
HAL_SMARTCARD_ERROR_DMA
;

1024 
hsc
->
Sèã

HAL_SMARTCARD_STATE_READY
;

1026 
	`HAL_SMARTCARD_Eº‹CÆlback
(
hsc
);

1027 
	}
}

1037 
HAL_SètusTy≥Def
 
	$SMARTCARD_WaôOnFœgU¡ûTimeout
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

1039 
uöt32_t
 
tick°¨t
 = 0;

1042 
tick°¨t
 = 
	`HAL_GëTick
();

1045 if(
Sètus
 =
RESET
)

1047 
	`__HAL_SMARTCARD_GET_FLAG
(
hsc
, 
Fœg
Ë=
RESET
)

1050 if(
Timeout
 !
HAL_MAX_DELAY
)

1052 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1055 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_TXE
);

1056 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_RXNE
);

1058 
hsc
->
Sèã

HAL_SMARTCARD_STATE_READY
;

1061 
	`__HAL_UNLOCK
(
hsc
);

1063  
HAL_TIMEOUT
;

1070 
	`__HAL_SMARTCARD_GET_FLAG
(
hsc
, 
Fœg
Ë!
RESET
)

1073 if(
Timeout
 !
HAL_MAX_DELAY
)

1075 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1078 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_TXE
);

1079 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_RXNE
);

1081 
hsc
->
Sèã

HAL_SMARTCARD_STATE_READY
;

1084 
	`__HAL_UNLOCK
(
hsc
);

1086  
HAL_TIMEOUT
;

1091  
HAL_OK
;

1092 
	}
}

1100 
HAL_SètusTy≥Def
 
	$SMARTCARD_Tønsmô_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

1102 
uöt16_t
* 
tmp
;

1103 
uöt32_t
 
tmp1
 = 0;

1105 
tmp1
 = 
hsc
->
Sèã
;

1106 if((
tmp1
 =
HAL_SMARTCARD_STATE_BUSY_TX
Ë|| (tmp1 =
HAL_SMARTCARD_STATE_BUSY_TX_RX
))

1108 
tmp
 = (
uöt16_t
*Ë
hsc
->
pTxBuffPå
;

1109 
hsc
->
In°™˚
->
DR
 = (
uöt16_t
)(*
tmp
 & (uint16_t)0x01FF);

1110 
hsc
->
pTxBuffPå
 += 1;

1112 if(--
hsc
->
TxX„rCou¡
 == 0)

1115 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_TXE
);

1118 
	`__HAL_SMARTCARD_ENABLE_IT
(
hsc
, 
SMARTCARD_IT_TC
);

1121  
HAL_OK
;

1125  
HAL_BUSY
;

1127 
	}
}

1135 
HAL_SètusTy≥Def
 
	$SMARTCARD_EndTønsmô_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsm¨tˇrd
)

1138 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsm¨tˇrd
, 
SMARTCARD_IT_TC
);

1141 if(
hsm¨tˇrd
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_TX_RX
)

1143 
hsm¨tˇrd
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_RX
;

1148 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsm¨tˇrd
, 
SMARTCARD_IT_ERR
);

1150 
hsm¨tˇrd
->
Sèã
 = 
HAL_SMARTCARD_STATE_READY
;

1153 
	`HAL_SMARTCARD_TxC∂tCÆlback
(
hsm¨tˇrd
);

1155  
HAL_OK
;

1156 
	}
}

1164 
HAL_SètusTy≥Def
 
	$SMARTCARD_Re˚ive_IT
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

1166 
uöt16_t
* 
tmp
;

1167 
uöt32_t
 
tmp1
 = 0;

1169 
tmp1
 = 
hsc
->
Sèã
;

1170 if((
tmp1
 =
HAL_SMARTCARD_STATE_BUSY_RX
Ë|| (tmp1 =
HAL_SMARTCARD_STATE_BUSY_TX_RX
))

1172 
tmp
 = (
uöt16_t
*Ë
hsc
->
pRxBuffPå
;

1173 *
tmp
 = (
uöt16_t
)(
hsc
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

1174 
hsc
->
pRxBuffPå
 += 1;

1176 if(--
hsc
->
RxX„rCou¡
 == 0)

1178 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_RXNE
);

1181 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_PE
);

1184 
	`__HAL_SMARTCARD_DISABLE_IT
(
hsc
, 
SMARTCARD_IT_ERR
);

1187 if(
hsc
->
Sèã
 =
HAL_SMARTCARD_STATE_BUSY_TX_RX
)

1189 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_BUSY_TX
;

1193 
hsc
->
Sèã
 = 
HAL_SMARTCARD_STATE_READY
;

1196 
	`HAL_SMARTCARD_RxC∂tCÆlback
(
hsc
);

1198  
HAL_OK
;

1200  
HAL_OK
;

1204  
HAL_BUSY
;

1206 
	}
}

1214 
	$SMARTCARD_SëC⁄fig
(
SMARTCARD_H™dÀTy≥Def
 *
hsc
)

1216 
uöt32_t
 
tm¥eg
 = 0x00;

1219 
	`as£π_∑øm
(
	`IS_SMARTCARD_INSTANCE
(
hsc
->
In°™˚
));

1220 
	`as£π_∑øm
(
	`IS_SMARTCARD_POLARITY
(
hsc
->
Inô
.
CLKPﬁ¨ôy
));

1221 
	`as£π_∑øm
(
	`IS_SMARTCARD_PHASE
(
hsc
->
Inô
.
CLKPha£
));

1222 
	`as£π_∑øm
(
	`IS_SMARTCARD_LASTBIT
(
hsc
->
Inô
.
CLKLa°Bô
));

1223 
	`as£π_∑øm
(
	`IS_SMARTCARD_BAUDRATE
(
hsc
->
Inô
.
BaudR©e
));

1224 
	`as£π_∑øm
(
	`IS_SMARTCARD_WORD_LENGTH
(
hsc
->
Inô
.
W‹dLígth
));

1225 
	`as£π_∑øm
(
	`IS_SMARTCARD_STOPBITS
(
hsc
->
Inô
.
St›Bôs
));

1226 
	`as£π_∑øm
(
	`IS_SMARTCARD_PARITY
(
hsc
->
Inô
.
P¨ôy
));

1227 
	`as£π_∑øm
(
	`IS_SMARTCARD_MODE
(
hsc
->
Inô
.
Mode
));

1228 
	`as£π_∑øm
(
	`IS_SMARTCARD_NACK_STATE
(
hsc
->
Inô
.
NACKSèã
));

1232 
hsc
->
In°™˚
->
CR1
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_TE
 | 
USART_CR1_RE
));

1235 
tm¥eg
 = 
hsc
->
In°™˚
->
CR2
;

1237 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR2_CPHA
 | 
USART_CR2_CPOL
 | 
USART_CR2_CLKEN
 | 
USART_CR2_LBCL
));

1243 
tm¥eg
 |(
uöt32_t
)(
USART_CR2_CLKEN
 | 
hsc
->
Inô
.
CLKPﬁ¨ôy
 |

1244 
hsc
->
Inô
.
CLKPha£
| hsc->Inô.
CLKLa°Bô
 | hsc->Inô.
St›Bôs
);

1246 
hsc
->
In°™˚
->
CR2
 = (
uöt32_t
)
tm¥eg
;

1248 
tm¥eg
 = 
hsc
->
In°™˚
->
CR2
;

1251 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

1254 
tm¥eg
 |(
uöt32_t
)(
hsc
->
Inô
.
St›Bôs
);

1257 
hsc
->
In°™˚
->
CR2
 = (
uöt32_t
)
tm¥eg
;

1260 
tm¥eg
 = 
hsc
->
In°™˚
->
CR1
;

1263 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

1264 
USART_CR1_RE
));

1270 
tm¥eg
 |(
uöt32_t
)
hsc
->
Inô
.
W‹dLígth
 | hsc->Inô.
P¨ôy
 | hsc->Inô.
Mode
;

1273 
hsc
->
In°™˚
->
CR1
 = (
uöt32_t
)
tm¥eg
;

1277 
hsc
->
In°™˚
->
CR3
 &(
uöt32_t
)~((uöt32_t)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

1280 if((
hsc
->
In°™˚
 =
USART1
Ë|| (hsc->In°™˚ =
USART6
))

1282 
hsc
->
In°™˚
->
BRR
 = 
	`SMARTCARD_BRR
(
	`HAL_RCC_GëPCLK2Fªq
(), hsc->
Inô
.
BaudR©e
);

1286 
hsc
->
In°™˚
->
BRR
 = 
	`SMARTCARD_BRR
(
	`HAL_RCC_GëPCLK1Fªq
(), hsc->
Inô
.
BaudR©e
);

1288 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_spdifrx.c

125 
	~"°m32f4xx_hÆ.h
"

135 #ifde‡
HAL_SPDIFRX_MODULE_ENABLED


137 #i‡
deföed
(
STM32F446xx
)

141 
	#SPDIFRX_TIMEOUT_VALUE
 0xFFFF

	)

149 
SPDIFRX_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

150 
SPDIFRX_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

151 
SPDIFRX_DMACxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

152 
SPDIFRX_DMACxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

153 
SPDIFRX_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

154 
SPDIFRX_Re˚iveC⁄åﬁFlow_IT
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

155 
SPDIFRX_Re˚iveD©aFlow_IT
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
);

156 
HAL_SètusTy≥Def
 
SPDIFRX_WaôOnFœgU¡ûTimeout
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

201 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_Inô
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

203 
uöt32_t
 
tm¥eg
 = 0;

206 if(
h•dif
 =
NULL
)

208  
HAL_ERROR
;

212 
	`as£π_∑øm
(
	`IS_STEREO_MODE
(
h•dif
->
Inô
.
SãªoMode
));

213 
	`as£π_∑øm
(
	`IS_SPDIFRX_INPUT_SELECT
(
h•dif
->
Inô
.
I≈utSñe˘i⁄
));

214 
	`as£π_∑øm
(
	`IS_SPDIFRX_MAX_RETRIES
(
h•dif
->
Inô
.
Rërõs
));

215 
	`as£π_∑øm
(
	`IS_SPDIFRX_WAIT_FOR_ACTIVITY
(
h•dif
->
Inô
.
WaôF‹A˘ivôy
));

216 
	`as£π_∑øm
(
	`IS_SPDIFRX_CHANNEL
(
h•dif
->
Inô
.
Ch™√lSñe˘i⁄
));

217 
	`as£π_∑øm
(
	`IS_SPDIFRX_DATA_FORMAT
(
h•dif
->
Inô
.
D©aF‹m©
));

218 
	`as£π_∑øm
(
	`IS_PREAMBLE_TYPE_MASK
(
h•dif
->
Inô
.
PªambÀTy≥Mask
));

219 
	`as£π_∑øm
(
	`IS_CHANNEL_STATUS_MASK
(
h•dif
->
Inô
.
Ch™√lSètusMask
));

220 
	`as£π_∑øm
(
	`IS_VALIDITY_MASK
(
h•dif
->
Inô
.
VÆidôyBôMask
));

221 
	`as£π_∑øm
(
	`IS_PARITY_ERROR_MASK
(
h•dif
->
Inô
.
P¨ôyEº‹Mask
));

223 if(
h•dif
->
Sèã
 =
HAL_SPDIFRX_STATE_RESET
)

226 
h•dif
->
Lock
 = 
HAL_UNLOCKED
;

228 
	`HAL_SPDIFRX_M•Inô
(
h•dif
);

232 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_BUSY
;

235 
	`__HAL_SPDIFRX_IDLE
(
h•dif
);

238 
tm¥eg
 = 
h•dif
->
In°™˚
->
CR
;

240 
tm¥eg
 &~((
uöt16_t
Ë
SPDIFRX_CR_RXSTEO
 | 
SPDIFRX_CR_DRFMT
 | 
SPDIFRX_CR_PMSK
 |

241 
SPDIFRX_CR_VMSK
 | 
SPDIFRX_CR_CUMSK
 | 
SPDIFRX_CR_PTMSK
 |

242 
SPDIFRX_CR_CHSEL
 | 
SPDIFRX_CR_NBTR
 | 
SPDIFRX_CR_WFA
 |

243 
SPDIFRX_CR_INSEL
);

246 
tm¥eg
 |((
uöt16_t
Ë
h•dif
->
Inô
.
SãªoMode
 |

247 
h•dif
->
Inô
.
I≈utSñe˘i⁄
 |

248 
h•dif
->
Inô
.
Rërõs
 |

249 
h•dif
->
Inô
.
WaôF‹A˘ivôy
 |

250 
h•dif
->
Inô
.
Ch™√lSñe˘i⁄
 |

251 
h•dif
->
Inô
.
D©aF‹m©
 |

252 
h•dif
->
Inô
.
PªambÀTy≥Mask
 |

253 
h•dif
->
Inô
.
Ch™√lSètusMask
 |

254 
h•dif
->
Inô
.
VÆidôyBôMask
 |

255 
h•dif
->
Inô
.
P¨ôyEº‹Mask
);

257 
h•dif
->
In°™˚
->
CR
 = 
tm¥eg
;

259 
h•dif
->
Eº‹Code
 = 
HAL_SPDIFRX_ERROR_NONE
;

262 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_READY
;

264  
HAL_OK
;

265 
	}
}

272 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_DeInô
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

275 if(
h•dif
 =
NULL
)

277  
HAL_ERROR
;

281 
	`as£π_∑øm
(
	`IS_SPDIFRX_ALL_INSTANCE
(
h•dif
->
In°™˚
));

283 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_BUSY
;

286 
	`__HAL_SPDIFRX_IDLE
(
h•dif
);

289 
	`HAL_SPDIFRX_M•DeInô
(
h•dif
);

291 
h•dif
->
Eº‹Code
 = 
HAL_SPDIFRX_ERROR_NONE
;

294 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_RESET
;

297 
	`__HAL_UNLOCK
(
h•dif
);

299  
HAL_OK
;

300 
	}
}

307 
__wók
 
	$HAL_SPDIFRX_M•Inô
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

312 
	}
}

319 
__wók
 
	$HAL_SPDIFRX_M•DeInô
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

324 
	}
}

333 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_SëD©aF‹m©
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
SPDIFRX_SëD©aF‹m©Ty≥Def
 
sD©aF‹m©
)

335 
uöt32_t
 
tm¥eg
 = 0;

338 if(
h•dif
 =
NULL
)

340  
HAL_ERROR
;

344 
	`as£π_∑øm
(
	`IS_STEREO_MODE
(
sD©aF‹m©
.
SãªoMode
));

345 
	`as£π_∑øm
(
	`IS_SPDIFRX_DATA_FORMAT
(
sD©aF‹m©
.
D©aF‹m©
));

346 
	`as£π_∑øm
(
	`IS_PREAMBLE_TYPE_MASK
(
sD©aF‹m©
.
PªambÀTy≥Mask
));

347 
	`as£π_∑øm
(
	`IS_CHANNEL_STATUS_MASK
(
sD©aF‹m©
.
Ch™√lSètusMask
));

348 
	`as£π_∑øm
(
	`IS_VALIDITY_MASK
(
sD©aF‹m©
.
VÆidôyBôMask
));

349 
	`as£π_∑øm
(
	`IS_PARITY_ERROR_MASK
(
sD©aF‹m©
.
P¨ôyEº‹Mask
));

352 
tm¥eg
 = 
h•dif
->
In°™˚
->
CR
;

354 if(((
tm¥eg
 & 
SPDIFRX_STATE_RCV
) == SPDIFRX_STATE_RCV) &&

355 (((
tm¥eg
 & 
SPDIFRX_CR_DRFMT
Ë!
sD©aF‹m©
.
D©aF‹m©
) ||

356 ((
tm¥eg
 & 
SPDIFRX_CR_RXSTEO
Ë!
sD©aF‹m©
.
SãªoMode
)))

358  
HAL_ERROR
;

361 
tm¥eg
 &~((
uöt16_t
Ë
SPDIFRX_CR_RXSTEO
 | 
SPDIFRX_CR_DRFMT
 | 
SPDIFRX_CR_PMSK
 |

362 
SPDIFRX_CR_VMSK
 | 
SPDIFRX_CR_CUMSK
 | 
SPDIFRX_CR_PTMSK
);

365 
tm¥eg
 |((
uöt16_t
Ë
sD©aF‹m©
.
SãªoMode
 |

366 
sD©aF‹m©
.
D©aF‹m©
 |

367 
sD©aF‹m©
.
PªambÀTy≥Mask
 |

368 
sD©aF‹m©
.
Ch™√lSètusMask
 |

369 
sD©aF‹m©
.
VÆidôyBôMask
 |

370 
sD©aF‹m©
.
P¨ôyEº‹Mask
);

372 
h•dif
->
In°™˚
->
CR
 = 
tm¥eg
;

374  
HAL_OK
;

375 
	}
}

432 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_Re˚iveD©aFlow
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
, uöt32_à
Timeout
)

435 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

437  
HAL_ERROR
;

440 if(
h•dif
->
Sèã
 =
HAL_SPDIFRX_STATE_READY
)

443 
	`__HAL_LOCK
(
h•dif
);

445 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_BUSY
;

448 
	`__HAL_SPDIFRX_SYNC
(
h•dif
);

451 if(
	`SPDIFRX_WaôOnFœgU¡ûTimeout
(
h•dif
, 
SPDIFRX_FLAG_SYNCD
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

453  
HAL_TIMEOUT
;

457 
	`__HAL_SPDIFRX_RCV
(
h•dif
);

460 
Size
 > 0)

463 if(
	`SPDIFRX_WaôOnFœgU¡ûTimeout
(
h•dif
, 
SPDIFRX_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

465  
HAL_TIMEOUT
;

468 (*
pD©a
++Ë
h•dif
->
In°™˚
->
DR
;

469 
Size
--;

473 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_READY
;

476 
	`__HAL_UNLOCK
(
h•dif
);

478  
HAL_OK
;

482  
HAL_BUSY
;

484 
	}
}

495 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_Re˚iveC⁄åﬁFlow
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
, uöt32_à
Timeout
)

498 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

500  
HAL_ERROR
;

503 if(
h•dif
->
Sèã
 =
HAL_SPDIFRX_STATE_READY
)

506 
	`__HAL_LOCK
(
h•dif
);

508 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_BUSY
;

511 
	`__HAL_SPDIFRX_SYNC
(
h•dif
);

514 if(
	`SPDIFRX_WaôOnFœgU¡ûTimeout
(
h•dif
, 
SPDIFRX_FLAG_SYNCD
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

516  
HAL_TIMEOUT
;

520 
	`__HAL_SPDIFRX_RCV
(
h•dif
);

523 
Size
 > 0)

526 if(
	`SPDIFRX_WaôOnFœgU¡ûTimeout
(
h•dif
, 
SPDIFRX_FLAG_CSRNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

528  
HAL_TIMEOUT
;

531 (*
pD©a
++Ë
h•dif
->
In°™˚
->
CSR
;

532 
Size
--;

536 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_READY
;

539 
	`__HAL_UNLOCK
(
h•dif
);

541  
HAL_OK
;

545  
HAL_BUSY
;

547 
	}
}

555 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_Re˚iveD©aFlow_IT
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
)

557 if((
h•dif
->
Sèã
 =
HAL_SPDIFRX_STATE_READY
Ë|| (h•dif->Sèã =
HAL_SPDIFRX_STATE_BUSY_CX
))

559 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

561  
HAL_ERROR
;

565 
	`__HAL_LOCK
(
h•dif
);

567 
h•dif
->
pRxBuffPå
 = 
pD©a
;

568 
h•dif
->
RxX„rSize
 = 
Size
;

569 
h•dif
->
RxX„rCou¡
 = 
Size
;

571 
h•dif
->
Eº‹Code
 = 
HAL_SPDIFRX_ERROR_NONE
;

574 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_BUSY_RX
;

578 
	`__HAL_SPDIFRX_ENABLE_IT
(
h•dif
, 
SPDIFRX_IT_PERRIE
);

581 
	`__HAL_SPDIFRX_ENABLE_IT
(
h•dif
, 
SPDIFRX_IT_OVRIE
);

584 
	`__HAL_UNLOCK
(
h•dif
);

587 
	`__HAL_SPDIFRX_ENABLE_IT
(
h•dif
, 
SPDIFRX_IT_RXNE
);

589 i‡((
SPDIFRX
->
CR
 & 
SPDIFRX_CR_SPDIFEN
Ë!
SPDIFRX_STATE_SYNC
 || (SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != 0x00)

592 
	`__HAL_SPDIFRX_SYNC
(
h•dif
);

595 if(
	`SPDIFRX_WaôOnFœgU¡ûTimeout
(
h•dif
, 
SPDIFRX_FLAG_SYNCD
, 
RESET
, 
SPDIFRX_TIMEOUT_VALUE
Ë!
HAL_OK
)

597  
HAL_TIMEOUT
;

601 
	`__HAL_SPDIFRX_RCV
(
h•dif
);

604  
HAL_OK
;

608  
HAL_BUSY
;

610 
	}
}

619 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_Re˚iveC⁄åﬁFlow_IT
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
)

621 if((
h•dif
->
Sèã
 =
HAL_SPDIFRX_STATE_READY
Ë|| (h•dif->Sèã =
HAL_SPDIFRX_STATE_BUSY_RX
))

623 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

625  
HAL_ERROR
;

629 
	`__HAL_LOCK
(
h•dif
);

631 
h•dif
->
pCsBuffPå
 = 
pD©a
;

632 
h•dif
->
CsX„rSize
 = 
Size
;

633 
h•dif
->
CsX„rCou¡
 = 
Size
;

635 
h•dif
->
Eº‹Code
 = 
HAL_SPDIFRX_ERROR_NONE
;

638 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_BUSY_CX
;

642 
	`__HAL_SPDIFRX_ENABLE_IT
(
h•dif
, 
SPDIFRX_IT_PERRIE
);

645 
	`__HAL_SPDIFRX_ENABLE_IT
(
h•dif
, 
SPDIFRX_IT_OVRIE
);

648 
	`__HAL_UNLOCK
(
h•dif
);

651 
	`__HAL_SPDIFRX_ENABLE_IT
(
h•dif
, 
SPDIFRX_IT_CSRNE
);

653 i‡((
SPDIFRX
->
CR
 & 
SPDIFRX_CR_SPDIFEN
Ë!
SPDIFRX_STATE_SYNC
 || (SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != 0x00)

656 
	`__HAL_SPDIFRX_SYNC
(
h•dif
);

659 if(
	`SPDIFRX_WaôOnFœgU¡ûTimeout
(
h•dif
, 
SPDIFRX_FLAG_SYNCD
, 
RESET
, 
SPDIFRX_TIMEOUT_VALUE
Ë!
HAL_OK
)

661  
HAL_TIMEOUT
;

665 
	`__HAL_SPDIFRX_RCV
(
h•dif
);

668  
HAL_OK
;

672  
HAL_BUSY
;

674 
	}
}

683 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_Re˚iveD©aFlow_DMA
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
)

686 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

688  
HAL_ERROR
;

691 if((
h•dif
->
Sèã
 =
HAL_SPDIFRX_STATE_READY
Ë|| (h•dif->Sèã =
HAL_SPDIFRX_STATE_BUSY_CX
))

693 
h•dif
->
pRxBuffPå
 = 
pD©a
;

694 
h•dif
->
RxX„rSize
 = 
Size
;

695 
h•dif
->
RxX„rCou¡
 = 
Size
;

698 
	`__HAL_LOCK
(
h•dif
);

700 
h•dif
->
Eº‹Code
 = 
HAL_SPDIFRX_ERROR_NONE
;

701 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_BUSY_RX
;

704 
h•dif
->
hdmaDrRx
->
X„rHÆfC∂tCÆlback
 = 
SPDIFRX_DMARxHÆfC∂t
;

707 
h•dif
->
hdmaDrRx
->
X„rC∂tCÆlback
 = 
SPDIFRX_DMARxC∂t
;

710 
h•dif
->
hdmaDrRx
->
X„rEº‹CÆlback
 = 
SPDIFRX_DMAEº‹
;

713 
	`HAL_DMA_Sèπ_IT
(
h•dif
->
hdmaDrRx
, (
uöt32_t
)&h•dif->
In°™˚
->
DR
, (uöt32_t)h•dif->
pRxBuffPå
, 
Size
);

716 
h•dif
->
In°™˚
->
CR
 |
SPDIFRX_CR_RXDMAEN
;

718 i‡((
SPDIFRX
->
CR
 & 
SPDIFRX_CR_SPDIFEN
Ë!
SPDIFRX_STATE_SYNC
 || (SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != 0x00)

721 
	`__HAL_SPDIFRX_SYNC
(
h•dif
);

724 if(
	`SPDIFRX_WaôOnFœgU¡ûTimeout
(
h•dif
, 
SPDIFRX_FLAG_SYNCD
, 
RESET
, 
SPDIFRX_TIMEOUT_VALUE
Ë!
HAL_OK
)

726  
HAL_TIMEOUT
;

730 
	`__HAL_SPDIFRX_RCV
(
h•dif
);

734 
	`__HAL_UNLOCK
(
h•dif
);

736  
HAL_OK
;

740  
HAL_BUSY
;

742 
	}
}

751 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_Re˚iveC⁄åﬁFlow_DMA
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Size
)

753 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

755  
HAL_ERROR
;

758 if((
h•dif
->
Sèã
 =
HAL_SPDIFRX_STATE_READY
Ë|| (h•dif->Sèã =
HAL_SPDIFRX_STATE_BUSY_RX
))

760 
h•dif
->
pCsBuffPå
 = 
pD©a
;

761 
h•dif
->
CsX„rSize
 = 
Size
;

762 
h•dif
->
CsX„rCou¡
 = 
Size
;

765 
	`__HAL_LOCK
(
h•dif
);

767 
h•dif
->
Eº‹Code
 = 
HAL_SPDIFRX_ERROR_NONE
;

768 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_BUSY_CX
;

771 
h•dif
->
hdmaCsRx
->
X„rHÆfC∂tCÆlback
 = 
SPDIFRX_DMACxHÆfC∂t
;

774 
h•dif
->
hdmaCsRx
->
X„rC∂tCÆlback
 = 
SPDIFRX_DMACxC∂t
;

777 
h•dif
->
hdmaCsRx
->
X„rEº‹CÆlback
 = 
SPDIFRX_DMAEº‹
;

780 
	`HAL_DMA_Sèπ_IT
(
h•dif
->
hdmaCsRx
, (
uöt32_t
)&h•dif->
In°™˚
->
CSR
, (uöt32_t)h•dif->
pCsBuffPå
, 
Size
);

783 
h•dif
->
In°™˚
->
CR
 |
SPDIFRX_CR_CBDMAEN
;

785 i‡((
SPDIFRX
->
CR
 & 
SPDIFRX_CR_SPDIFEN
Ë!
SPDIFRX_STATE_SYNC
 || (SPDIFRX->CR & SPDIFRX_CR_SPDIFEN) != 0x00)

788 
	`__HAL_SPDIFRX_SYNC
(
h•dif
);

791 if(
	`SPDIFRX_WaôOnFœgU¡ûTimeout
(
h•dif
, 
SPDIFRX_FLAG_SYNCD
, 
RESET
, 
SPDIFRX_TIMEOUT_VALUE
Ë!
HAL_OK
)

793  
HAL_TIMEOUT
;

797 
	`__HAL_SPDIFRX_RCV
(
h•dif
);

801 
	`__HAL_UNLOCK
(
h•dif
);

803  
HAL_OK
;

807  
HAL_BUSY
;

809 
	}
}

816 
HAL_SètusTy≥Def
 
	$HAL_SPDIFRX_DMASt›
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

819 
	`__HAL_LOCK
(
h•dif
);

822 
h•dif
->
In°™˚
->
CR
 &(
uöt16_t
)(~
SPDIFRX_CR_RXDMAEN
);

823 
h•dif
->
In°™˚
->
CR
 &(
uöt16_t
)(~
SPDIFRX_CR_CBDMAEN
);

826 
	`__HAL_DMA_DISABLE
(
h•dif
->
hdmaDrRx
);

827 
	`__HAL_DMA_DISABLE
(
h•dif
->
hdmaCsRx
);

830 
	`__HAL_SPDIFRX_IDLE
(
h•dif
);

832 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_READY
;

835 
	`__HAL_UNLOCK
(
h•dif
);

837  
HAL_OK
;

838 
	}
}

845 
	$HAL_SPDIFRX_IRQH™dÀr
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

848 if((
	`__HAL_SPDIFRX_GET_FLAG
(
h•dif
, 
SPDIFRX_FLAG_RXNE
Ë!
RESET
Ë&& (
	`__HAL_SPDIFRX_GET_IT_SOURCE
(h•dif, 
SPDIFRX_IT_RXNE
) != RESET))

850 
	`__HAL_SPDIFRX_CLEAR_IT
(
h•dif
, 
SPDIFRX_IT_RXNE
);

851 
	`SPDIFRX_Re˚iveD©aFlow_IT
(
h•dif
);

855 if((
	`__HAL_SPDIFRX_GET_FLAG
(
h•dif
, 
SPDIFRX_FLAG_CSRNE
Ë!
RESET
Ë&& (
	`__HAL_SPDIFRX_GET_IT_SOURCE
(h•dif, 
SPDIFRX_IT_CSRNE
) != RESET))

857 
	`__HAL_SPDIFRX_CLEAR_IT
(
h•dif
, 
SPDIFRX_IT_CSRNE
);

858 
	`SPDIFRX_Re˚iveC⁄åﬁFlow_IT
(
h•dif
);

862 if((
	`__HAL_SPDIFRX_GET_FLAG
(
h•dif
, 
SPDIFRX_FLAG_OVR
Ë!
RESET
Ë&& (
	`__HAL_SPDIFRX_GET_IT_SOURCE
(h•dif, 
SPDIFRX_IT_OVRIE
) != RESET))

864 
	`__HAL_SPDIFRX_CLEAR_IT
(
h•dif
, 
SPDIFRX_FLAG_OVR
);

867 
h•dif
->
Eº‹Code
 |
HAL_SPDIFRX_ERROR_OVR
;

870 
	`HAL_SPDIFRX_Eº‹CÆlback
(
h•dif
);

874 if((
	`__HAL_SPDIFRX_GET_FLAG
(
h•dif
, 
SPDIFRX_FLAG_PERR
Ë!
RESET
Ë&& (
	`__HAL_SPDIFRX_GET_IT_SOURCE
(h•dif, 
SPDIFRX_IT_PERRIE
) != RESET))

876 
	`__HAL_SPDIFRX_CLEAR_IT
(
h•dif
, 
SPDIFRX_FLAG_PERR
);

879 
h•dif
->
Eº‹Code
 |
HAL_SPDIFRX_ERROR_PE
;

882 
	`HAL_SPDIFRX_Eº‹CÆlback
(
h•dif
);

885 
	}
}

892 
__wók
 
	$HAL_SPDIFRX_RxHÆfC∂tCÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

897 
	}
}

904 
__wók
 
	$HAL_SPDIFRX_RxC∂tCÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

909 
	}
}

916 
__wók
 
	$HAL_SPDIFRX_CxHÆfC∂tCÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

921 
	}
}

928 
__wók
 
	$HAL_SPDIFRX_CxC∂tCÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

933 
	}
}

940 
__wók
 
	$HAL_SPDIFRX_Eº‹CÆlback
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

945 
	}
}

971 
HAL_SPDIFRX_SèãTy≥Def
 
	$HAL_SPDIFRX_GëSèã
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

973  
h•dif
->
Sèã
;

974 
	}
}

981 
uöt32_t
 
	$HAL_SPDIFRX_GëEº‹
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

983  
h•dif
->
Eº‹Code
;

984 
	}
}

995 
	$SPDIFRX_DMARxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

997 
SPDIFRX_H™dÀTy≥Def
* 
h•dif
 = ( SPDIFRX_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1000 
h•dif
->
In°™˚
->
CR
 &(
uöt16_t
)(~
SPDIFRX_CR_RXDMAEN
);

1001 
h•dif
->
RxX„rCou¡
 = 0;

1003 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_READY
;

1004 
	`HAL_SPDIFRX_RxC∂tCÆlback
(
h•dif
);

1005 
	}
}

1012 
	$SPDIFRX_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1014 
SPDIFRX_H™dÀTy≥Def
* 
h•dif
 = (SPDIFRX_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1016 
	`HAL_SPDIFRX_RxHÆfC∂tCÆlback
(
h•dif
);

1017 
	}
}

1025 
	$SPDIFRX_DMACxC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1027 
SPDIFRX_H™dÀTy≥Def
* 
h•dif
 = ( SPDIFRX_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1030 
h•dif
->
In°™˚
->
CR
 &(
uöt16_t
)(~
SPDIFRX_CR_CBDMAEN
);

1031 
h•dif
->
CsX„rCou¡
 = 0;

1033 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_READY
;

1034 
	`HAL_SPDIFRX_CxC∂tCÆlback
(
h•dif
);

1035 
	}
}

1042 
	$SPDIFRX_DMACxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1044 
SPDIFRX_H™dÀTy≥Def
* 
h•dif
 = (SPDIFRX_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1046 
	`HAL_SPDIFRX_CxHÆfC∂tCÆlback
(
h•dif
);

1047 
	}
}

1054 
	$SPDIFRX_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1056 
SPDIFRX_H™dÀTy≥Def
* 
h•dif
 = ( SPDIFRX_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1059 
h•dif
->
In°™˚
->
CR
 &(
uöt16_t
)(~(
SPDIFRX_CR_RXDMAEN
 | 
SPDIFRX_CR_CBDMAEN
));

1060 
h•dif
->
RxX„rCou¡
 = 0;

1062 
h•dif
->
Sèã

HAL_SPDIFRX_STATE_READY
;

1065 
h•dif
->
Eº‹Code
 |
HAL_SPDIFRX_ERROR_DMA
;

1066 
	`HAL_SPDIFRX_Eº‹CÆlback
(
h•dif
);

1067 
	}
}

1075 
	$SPDIFRX_Re˚iveD©aFlow_IT
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

1078 (*
h•dif
->
pRxBuffPå
++Ëh•dif->
In°™˚
->
DR
;

1079 
h•dif
->
RxX„rCou¡
--;

1081 if(
h•dif
->
RxX„rCou¡
 == 0)

1084 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_OVRIE
 | 
SPDIFRX_IT_PERRIE
 | 
SPDIFRX_IT_RXNE
);

1086 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_READY
;

1089 
	`__HAL_UNLOCK
(
h•dif
);

1091 
	`HAL_SPDIFRX_RxC∂tCÆlback
(
h•dif
);

1093 
	}
}

1100 
	$SPDIFRX_Re˚iveC⁄åﬁFlow_IT
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
)

1103 (*
h•dif
->
pCsBuffPå
++Ëh•dif->
In°™˚
->
CSR
;

1104 
h•dif
->
CsX„rCou¡
--;

1106 if(
h•dif
->
CsX„rCou¡
 == 0)

1109 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_CSRNE
);

1111 
h•dif
->
Sèã
 = 
HAL_SPDIFRX_STATE_READY
;

1114 
	`__HAL_UNLOCK
(
h•dif
);

1116 
	`HAL_SPDIFRX_CxC∂tCÆlback
(
h•dif
);

1118 
	}
}

1128 
HAL_SètusTy≥Def
 
	$SPDIFRX_WaôOnFœgU¡ûTimeout
(
SPDIFRX_H™dÀTy≥Def
 *
h•dif
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

1130 
uöt32_t
 
tick°¨t
 = 0;

1133 
tick°¨t
 = 
	`HAL_GëTick
();

1136 if(
Sètus
 =
RESET
)

1138 
	`__HAL_SPDIFRX_GET_FLAG
(
h•dif
, 
Fœg
Ë=
RESET
)

1141 if(
Timeout
 !
HAL_MAX_DELAY
)

1143 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1146 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_RXNE
);

1147 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_CSRNE
);

1148 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_PERRIE
);

1149 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_OVRIE
);

1150 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_SBLKIE
);

1151 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_SYNCDIE
);

1152 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_IFEIE
);

1154 
h•dif
->
Sèã

HAL_SPDIFRX_STATE_READY
;

1157 
	`__HAL_UNLOCK
(
h•dif
);

1159  
HAL_TIMEOUT
;

1166 
	`__HAL_SPDIFRX_GET_FLAG
(
h•dif
, 
Fœg
Ë!
RESET
)

1169 if(
Timeout
 !
HAL_MAX_DELAY
)

1171 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1174 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_RXNE
);

1175 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_CSRNE
);

1176 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_PERRIE
);

1177 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_OVRIE
);

1178 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_SBLKIE
);

1179 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_SYNCDIE
);

1180 
	`__HAL_SPDIFRX_DISABLE_IT
(
h•dif
, 
SPDIFRX_IT_IFEIE
);

1182 
h•dif
->
Sèã

HAL_SPDIFRX_STATE_READY
;

1185 
	`__HAL_UNLOCK
(
h•dif
);

1187  
HAL_TIMEOUT
;

1192  
HAL_OK
;

1193 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_spi.c

90 
	~"°m32f4xx_hÆ.h
"

101 #ifde‡
HAL_SPI_MODULE_ENABLED


105 
	#SPI_TIMEOUT_VALUE
 10

	)

112 
SPI_TxClo£IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
);

113 
SPI_TxISR
(
SPI_H™dÀTy≥Def
 *
h•i
);

114 
SPI_RxClo£IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
);

115 
SPI_2LöesRxISR
(
SPI_H™dÀTy≥Def
 *
h•i
);

116 
SPI_RxISR
(
SPI_H™dÀTy≥Def
 *
h•i
);

117 
SPI_DMAEndTønsmôRe˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
);

118 
SPI_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

119 
SPI_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

120 
SPI_DMATønsmôRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

121 
SPI_DMAHÆfTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

122 
SPI_DMAHÆfRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

123 
SPI_DMAHÆfTønsmôRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

124 
SPI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

125 
HAL_SètusTy≥Def
 
SPI_WaôOnFœgU¡ûTimeout
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

175 
HAL_SètusTy≥Def
 
	$HAL_SPI_Inô
(
SPI_H™dÀTy≥Def
 *
h•i
)

178 if(
h•i
 =
NULL
)

180  
HAL_ERROR
;

184 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
h•i
->
Inô
.
Mode
));

185 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
h•i
->
Inô
.
Dúe˘i⁄
));

186 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
h•i
->
Inô
.
D©aSize
));

187 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
h•i
->
Inô
.
CLKPﬁ¨ôy
));

188 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
h•i
->
Inô
.
CLKPha£
));

189 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
h•i
->
Inô
.
NSS
));

190 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
h•i
->
Inô
.
BaudR©ePªsˇÀr
));

191 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
h•i
->
Inô
.
Fú°Bô
));

192 
	`as£π_∑øm
(
	`IS_SPI_TIMODE
(
h•i
->
Inô
.
TIMode
));

193 
	`as£π_∑øm
(
	`IS_SPI_CRC_CALCULATION
(
h•i
->
Inô
.
CRCCÆcuœti⁄
));

194 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
h•i
->
Inô
.
CRCPﬁynomül
));

196 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_RESET
)

199 
h•i
->
Lock
 = 
HAL_UNLOCKED
;

201 
	`HAL_SPI_M•Inô
(
h•i
);

204 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY
;

207 
	`__HAL_SPI_DISABLE
(
h•i
);

212 
h•i
->
In°™˚
->
CR1
 = (h•i->
Inô
.
Mode
 | h•i->Inô.
Dúe˘i⁄
 | h•i->Inô.
D©aSize
 |

213 
h•i
->
Inô
.
CLKPﬁ¨ôy
 | h•i->Inô.
CLKPha£
 | (h•i->Inô.
NSS
 & 
SPI_CR1_SSM
) |

214 
h•i
->
Inô
.
BaudR©ePªsˇÀr
 | h•i->Inô.
Fú°Bô
 | h•i->Inô.
CRCCÆcuœti⁄
);

217 
h•i
->
In°™˚
->
CR2
 = (((h•i->
Inô
.
NSS
 >> 16Ë& 
SPI_CR2_SSOE
Ë| h•i->Inô.
TIMode
);

221 
h•i
->
In°™˚
->
CRCPR
 = h•i->
Inô
.
CRCPﬁynomül
;

224 
h•i
->
In°™˚
->
I2SCFGR
 &(
uöt32_t
)(~
SPI_I2SCFGR_I2SMOD
);

226 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

227 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

229  
HAL_OK
;

230 
	}
}

238 
HAL_SètusTy≥Def
 
	$HAL_SPI_DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
)

241 if(
h•i
 =
NULL
)

243  
HAL_ERROR
;

247 
	`__HAL_SPI_DISABLE
(
h•i
);

250 
	`HAL_SPI_M•DeInô
(
h•i
);

252 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

253 
h•i
->
Sèã
 = 
HAL_SPI_STATE_RESET
;

256 
	`__HAL_UNLOCK
(
h•i
);

258  
HAL_OK
;

259 
	}
}

267 
__wók
 
	$HAL_SPI_M•Inô
(
SPI_H™dÀTy≥Def
 *
h•i
)

272 
	}
}

280 
__wók
 
	$HAL_SPI_M•DeInô
(
SPI_H™dÀTy≥Def
 *
h•i
)

285 
	}
}

332 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

335 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

337 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

339  
HAL_ERROR
;

343 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

346 
	`__HAL_LOCK
(
h•i
);

349 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

350 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

352 
h•i
->
pTxBuffPå
 = 
pD©a
;

353 
h•i
->
TxX„rSize
 = 
Size
;

354 
h•i
->
TxX„rCou¡
 = 
Size
;

357 
h•i
->
TxISR
 = 0;

358 
h•i
->
RxISR
 = 0;

359 
h•i
->
RxX„rSize
 = 0;

360 
h•i
->
RxX„rCou¡
 = 0;

363 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

365 
	`SPI_RESET_CRC
(
h•i
);

368 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

371 
	`SPI_1LINE_TX
(
h•i
);

375 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

378 
	`__HAL_SPI_ENABLE
(
h•i
);

382 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

384 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
)|| (h•i->
TxX„rCou¡
 == 0x01))

386 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

387 
h•i
->
TxX„rCou¡
--;

389 
h•i
->
TxX„rCou¡
 > 0)

392 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

394  
HAL_TIMEOUT
;

396 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

397 
h•i
->
TxX„rCou¡
--;

400 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

402 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

408 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| (h•i->
TxX„rCou¡
 == 0x01))

410 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

411 
h•i
->
pTxBuffPå
+=2;

412 
h•i
->
TxX„rCou¡
--;

414 
h•i
->
TxX„rCou¡
 > 0)

417 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

419  
HAL_TIMEOUT
;

421 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

422 
h•i
->
pTxBuffPå
+=2;

423 
h•i
->
TxX„rCou¡
--;

426 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

428 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

433 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

435 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

436  
HAL_TIMEOUT
;

440 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
Timeout
Ë!
HAL_OK
)

442 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

443  
HAL_TIMEOUT
;

447 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

449 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

452 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

455 
	`__HAL_UNLOCK
(
h•i
);

457  
HAL_OK
;

461  
HAL_BUSY
;

463 
	}
}

474 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

476 
__IO
 
uöt16_t
 
tm¥eg
;

477 
uöt32_t
 
tmp
 = 0;

479 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

481 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

483  
HAL_ERROR
;

487 
	`__HAL_LOCK
(
h•i
);

490 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

491 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

493 
h•i
->
pRxBuffPå
 = 
pD©a
;

494 
h•i
->
RxX„rSize
 = 
Size
;

495 
h•i
->
RxX„rCou¡
 = 
Size
;

498 
h•i
->
RxISR
 = 0;

499 
h•i
->
TxISR
 = 0;

500 
h•i
->
TxX„rSize
 = 0;

501 
h•i
->
TxX„rCou¡
 = 0;

504 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

506 
	`SPI_1LINE_RX
(
h•i
);

510 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

512 
	`SPI_RESET_CRC
(
h•i
);

515 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& (h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
))

518 
	`__HAL_UNLOCK
(
h•i
);

521  
	`HAL_SPI_TønsmôRe˚ive
(
h•i
, 
pD©a
,ÖD©a, 
Size
, 
Timeout
);

525 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

528 
	`__HAL_SPI_ENABLE
(
h•i
);

532 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

534 
h•i
->
RxX„rCou¡
 > 1)

537 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

539  
HAL_TIMEOUT
;

542 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

543 
h•i
->
RxX„rCou¡
--;

546 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

548 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

554 
h•i
->
RxX„rCou¡
 > 1)

557 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

559  
HAL_TIMEOUT
;

562 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

563 
h•i
->
pRxBuffPå
+=2;

564 
h•i
->
RxX„rCou¡
--;

567 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

569 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

574 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

576  
HAL_TIMEOUT
;

580 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

582 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

587 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

588 
h•i
->
pRxBuffPå
+=2;

590 
h•i
->
RxX„rCou¡
--;

593 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

595 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

597 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_CRC
;

598  
HAL_TIMEOUT
;

602 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

603 
	`UNUSED
(
tm¥eg
);

606 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
)&&((h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)||(h•i->Inô.Dúe˘i⁄ =
SPI_DIRECTION_2LINES_RXONLY
)))

609 
	`__HAL_SPI_DISABLE
(
h•i
);

612 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

614 
tmp
 = 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
);

616 if((
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
Ë&& (
tmp
 !
RESET
))

618 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_CRC
;

621 
	`SPI_RESET_CRC
(
h•i
);

624 
	`__HAL_UNLOCK
(
h•i
);

626  
HAL_ERROR
;

630 
	`__HAL_UNLOCK
(
h•i
);

632  
HAL_OK
;

636  
HAL_BUSY
;

638 
	}
}

650 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

652 
__IO
 
uöt16_t
 
tm¥eg
;

653 
uöt32_t
 
tmp°©e
 = 0, 
tmp
 = 0;

655 
tmp°©e
 = 
h•i
->
Sèã
;

656 if((
tmp°©e
 =
HAL_SPI_STATE_READY
Ë|| (tmp°©ê=
HAL_SPI_STATE_BUSY_RX
))

658 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

660  
HAL_ERROR
;

664 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

667 
	`__HAL_LOCK
(
h•i
);

670 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

672 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

676 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

678 
h•i
->
pRxBuffPå
 = 
pRxD©a
;

679 
h•i
->
RxX„rSize
 = 
Size
;

680 
h•i
->
RxX„rCou¡
 = 
Size
;

682 
h•i
->
pTxBuffPå
 = 
pTxD©a
;

683 
h•i
->
TxX„rSize
 = 
Size
;

684 
h•i
->
TxX„rCou¡
 = 
Size
;

687 
h•i
->
RxISR
 = 0;

688 
h•i
->
TxISR
 = 0;

691 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

693 
	`SPI_RESET_CRC
(
h•i
);

697 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

700 
	`__HAL_SPI_ENABLE
(
h•i
);

704 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_16BIT
)

706 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| ((h•i->Inô.Modê=
SPI_MODE_MASTER
Ë&& (h•i->
TxX„rCou¡
 == 0x01)))

708 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

709 
h•i
->
pTxBuffPå
+=2;

710 
h•i
->
TxX„rCou¡
--;

712 if(
h•i
->
TxX„rCou¡
 == 0)

715 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

717 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

721 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

723  
HAL_TIMEOUT
;

726 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

727 
h•i
->
pRxBuffPå
+=2;

728 
h•i
->
RxX„rCou¡
--;

732 
h•i
->
TxX„rCou¡
 > 0)

735 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

737  
HAL_TIMEOUT
;

740 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

741 
h•i
->
pTxBuffPå
+=2;

742 
h•i
->
TxX„rCou¡
--;

745 if((
h•i
->
TxX„rCou¡
 =0Ë&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

747 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

751 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

753  
HAL_TIMEOUT
;

756 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

757 
h•i
->
pRxBuffPå
+=2;

758 
h•i
->
RxX„rCou¡
--;

761 if(
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
)

764 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

766  
HAL_TIMEOUT
;

769 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

770 
h•i
->
pRxBuffPå
+=2;

771 
h•i
->
RxX„rCou¡
--;

778 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
Ë|| ((h•i->Inô.Modê=
SPI_MODE_MASTER
Ë&& (h•i->
TxX„rCou¡
 == 0x01)))

780 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

781 
h•i
->
TxX„rCou¡
--;

783 if(
h•i
->
TxX„rCou¡
 == 0)

786 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

788 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

792 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

794  
HAL_TIMEOUT
;

797 (*
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

798 
h•i
->
RxX„rCou¡
--;

802 
h•i
->
TxX„rCou¡
 > 0)

805 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

807  
HAL_TIMEOUT
;

810 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

811 
h•i
->
TxX„rCou¡
--;

814 if((
h•i
->
TxX„rCou¡
 =0Ë&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

816 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

820 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

822  
HAL_TIMEOUT
;

825 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

826 
h•i
->
RxX„rCou¡
--;

828 if(
h•i
->
Inô
.
Mode
 =
SPI_MODE_SLAVE
)

831 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

833  
HAL_TIMEOUT
;

836 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

837 
h•i
->
RxX„rCou¡
--;

843 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

846 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

848 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_CRC
;

849  
HAL_TIMEOUT
;

852 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

853 
	`UNUSED
(
tm¥eg
);

857 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
Timeout
Ë!
HAL_OK
)

859 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

860  
HAL_TIMEOUT
;

863 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

865 
tmp
 = 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
);

867 if((
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
Ë&& (
tmp
 !
RESET
))

869 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_CRC
;

872 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

874 
	`SPI_RESET_CRC
(
h•i
);

878 
	`__HAL_UNLOCK
(
h•i
);

880  
HAL_ERROR
;

884 
	`__HAL_UNLOCK
(
h•i
);

886  
HAL_OK
;

890  
HAL_BUSY
;

892 
	}
}

902 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

904 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

906 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

908  
HAL_ERROR
;

912 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

915 
	`__HAL_LOCK
(
h•i
);

918 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

919 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

921 
h•i
->
TxISR
 = &
SPI_TxISR
;

922 
h•i
->
pTxBuffPå
 = 
pD©a
;

923 
h•i
->
TxX„rSize
 = 
Size
;

924 
h•i
->
TxX„rCou¡
 = 
Size
;

927 
h•i
->
RxISR
 = 0;

928 
h•i
->
RxX„rSize
 = 0;

929 
h•i
->
RxX„rCou¡
 = 0;

932 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

934 
	`SPI_1LINE_TX
(
h•i
);

938 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

940 
	`SPI_RESET_CRC
(
h•i
);

943 i‡(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

945 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_TXE
));

949 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_ERR
));

952 
	`__HAL_UNLOCK
(
h•i
);

955 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

958 
	`__HAL_SPI_ENABLE
(
h•i
);

961  
HAL_OK
;

965  
HAL_BUSY
;

967 
	}
}

977 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

979 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

981 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

983  
HAL_ERROR
;

987 
	`__HAL_LOCK
(
h•i
);

990 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

991 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

993 
h•i
->
RxISR
 = &
SPI_RxISR
;

994 
h•i
->
pRxBuffPå
 = 
pD©a
;

995 
h•i
->
RxX„rSize
 = 
Size
;

996 
h•i
->
RxX„rCou¡
 = 
Size
 ;

999 
h•i
->
TxISR
 = 0;

1000 
h•i
->
TxX„rSize
 = 0;

1001 
h•i
->
TxX„rCou¡
 = 0;

1004 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1006 
	`SPI_1LINE_RX
(
h•i
);

1008 if((
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (h•i->Inô.
Mode
 =
SPI_MODE_MASTER
))

1011 
	`__HAL_UNLOCK
(
h•i
);

1014  
	`HAL_SPI_TønsmôRe˚ive_IT
(
h•i
, 
pD©a
,ÖD©a, 
Size
);

1018 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1020 
	`SPI_RESET_CRC
(
h•i
);

1024 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

1027 
	`__HAL_UNLOCK
(
h•i
);

1034 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1037 
	`__HAL_SPI_ENABLE
(
h•i
);

1040  
HAL_OK
;

1044  
HAL_BUSY
;

1046 
	}
}

1057 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive_IT
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
)

1059 
uöt32_t
 
tmp°©e
 = 0;

1061 
tmp°©e
 = 
h•i
->
Sèã
;

1062 if((
tmp°©e
 =
HAL_SPI_STATE_READY
) || \

1063 ((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
Ë&& (h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (
tmp°©e
 =
HAL_SPI_STATE_BUSY_RX
)))

1065 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

1067  
HAL_ERROR
;

1071 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

1074 
	`__HAL_LOCK
(
h•i
);

1077 if(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_RX
)

1079 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1083 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1085 
h•i
->
TxISR
 = &
SPI_TxISR
;

1086 
h•i
->
pTxBuffPå
 = 
pTxD©a
;

1087 
h•i
->
TxX„rSize
 = 
Size
;

1088 
h•i
->
TxX„rCou¡
 = 
Size
;

1090 
h•i
->
RxISR
 = &
SPI_2LöesRxISR
;

1091 
h•i
->
pRxBuffPå
 = 
pRxD©a
;

1092 
h•i
->
RxX„rSize
 = 
Size
;

1093 
h•i
->
RxX„rCou¡
 = 
Size
;

1096 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1098 
	`SPI_RESET_CRC
(
h•i
);

1102 
	`__HAL_SPI_ENABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

1105 
	`__HAL_UNLOCK
(
h•i
);

1108 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1111 
	`__HAL_SPI_ENABLE
(
h•i
);

1114  
HAL_OK
;

1118  
HAL_BUSY
;

1120 
	}
}

1130 
HAL_SètusTy≥Def
 
	$HAL_SPI_Tønsmô_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1132 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

1134 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1136  
HAL_ERROR
;

1140 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES_OR_1LINE
(
h•i
->
Inô
.
Dúe˘i⁄
));

1143 
	`__HAL_LOCK
(
h•i
);

1146 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX
;

1147 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1149 
h•i
->
pTxBuffPå
 = 
pD©a
;

1150 
h•i
->
TxX„rSize
 = 
Size
;

1151 
h•i
->
TxX„rCou¡
 = 
Size
;

1154 
h•i
->
TxISR
 = 0;

1155 
h•i
->
RxISR
 = 0;

1156 
h•i
->
RxX„rSize
 = 0;

1157 
h•i
->
RxX„rCou¡
 = 0;

1160 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1162 
	`SPI_1LINE_TX
(
h•i
);

1166 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1168 
	`SPI_RESET_CRC
(
h•i
);

1172 
h•i
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfTønsmôC∂t
;

1175 
h•i
->
hdm©x
->
X„rC∂tCÆlback
 = 
SPI_DMATønsmôC∂t
;

1178 
h•i
->
hdm©x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1181 
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm©x
, (
uöt32_t
)h•i->
pTxBuffPå
, (uöt32_t)&h•i->
In°™˚
->
DR
, h•i->
TxX„rCou¡
);

1184 
	`__HAL_UNLOCK
(
h•i
);

1187 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1190 
	`__HAL_SPI_ENABLE
(
h•i
);

1194 
h•i
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

1196  
HAL_OK
;

1200  
HAL_BUSY
;

1202 
	}
}

1213 
HAL_SètusTy≥Def
 
	$HAL_SPI_Re˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

1215 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_READY
)

1217 if((
pD©a
 =
NULL
Ë|| (
Size
 == 0))

1219  
HAL_ERROR
;

1223 
	`__HAL_LOCK
(
h•i
);

1226 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_RX
;

1227 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1229 
h•i
->
pRxBuffPå
 = 
pD©a
;

1230 
h•i
->
RxX„rSize
 = 
Size
;

1231 
h•i
->
RxX„rCou¡
 = 
Size
;

1234 
h•i
->
RxISR
 = 0;

1235 
h•i
->
TxISR
 = 0;

1236 
h•i
->
TxX„rSize
 = 0;

1237 
h•i
->
TxX„rCou¡
 = 0;

1240 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)

1242 
	`SPI_1LINE_RX
(
h•i
);

1244 if((
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)&&(h•i->Inô.
Mode
 =
SPI_MODE_MASTER
))

1247 
	`__HAL_UNLOCK
(
h•i
);

1250  
	`HAL_SPI_TønsmôRe˚ive_DMA
(
h•i
, 
pD©a
,ÖD©a, 
Size
);

1254 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1256 
	`SPI_RESET_CRC
(
h•i
);

1260 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfRe˚iveC∂t
;

1263 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMARe˚iveC∂t
;

1266 
h•i
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1269 
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm¨x
, (
uöt32_t
)&h•i->
In°™˚
->
DR
, (uöt32_t)h•i->
pRxBuffPå
, h•i->
RxX„rCou¡
);

1272 
	`__HAL_UNLOCK
(
h•i
);

1275 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1278 
	`__HAL_SPI_ENABLE
(
h•i
);

1282 
h•i
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

1284  
HAL_OK
;

1288  
HAL_BUSY
;

1290 
	}
}

1302 
HAL_SètusTy≥Def
 
	$HAL_SPI_TønsmôRe˚ive_DMA
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
)

1304 
uöt32_t
 
tmp°©e
 = 0;

1305 
tmp°©e
 = 
h•i
->
Sèã
;

1306 if((
tmp°©e
 =
HAL_SPI_STATE_READY
Ë|| ((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
) && \

1307 (
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
Ë&& (
tmp°©e
 =
HAL_SPI_STATE_BUSY_RX
)))

1309 if((
pTxD©a
 =
NULL
 ) || (
pRxD©a
 =NULL ) || (
Size
 == 0))

1311  
HAL_ERROR
;

1315 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_2LINES
(
h•i
->
Inô
.
Dúe˘i⁄
));

1318 
	`__HAL_LOCK
(
h•i
);

1321 if(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_RX
)

1323 
h•i
->
Sèã
 = 
HAL_SPI_STATE_BUSY_TX_RX
;

1327 
h•i
->
Eº‹Code
 = 
HAL_SPI_ERROR_NONE
;

1329 
h•i
->
pTxBuffPå
 = (
uöt8_t
*)
pTxD©a
;

1330 
h•i
->
TxX„rSize
 = 
Size
;

1331 
h•i
->
TxX„rCou¡
 = 
Size
;

1333 
h•i
->
pRxBuffPå
 = (
uöt8_t
*)
pRxD©a
;

1334 
h•i
->
RxX„rSize
 = 
Size
;

1335 
h•i
->
RxX„rCou¡
 = 
Size
;

1338 
h•i
->
RxISR
 = 0;

1339 
h•i
->
TxISR
 = 0;

1342 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1344 
	`SPI_RESET_CRC
(
h•i
);

1348 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_RX
)

1351 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfRe˚iveC∂t
;

1353 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMARe˚iveC∂t
;

1358 
h•i
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
SPI_DMAHÆfTønsmôRe˚iveC∂t
;

1360 
h•i
->
hdm¨x
->
X„rC∂tCÆlback
 = 
SPI_DMATønsmôRe˚iveC∂t
;

1364 
h•i
->
hdm¨x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1367 
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm¨x
, (
uöt32_t
)&h•i->
In°™˚
->
DR
, (uöt32_t)h•i->
pRxBuffPå
, h•i->
RxX„rCou¡
);

1370 
h•i
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

1374 
h•i
->
hdm©x
->
X„rC∂tCÆlback
 = 
NULL
;

1376 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_TX_RX
)

1379 
h•i
->
hdm©x
->
X„rEº‹CÆlback
 = 
SPI_DMAEº‹
;

1383 
h•i
->
hdm©x
->
X„rEº‹CÆlback
 = 
NULL
;

1387 
	`HAL_DMA_Sèπ_IT
(
h•i
->
hdm©x
, (
uöt32_t
)h•i->
pTxBuffPå
, (uöt32_t)&h•i->
In°™˚
->
DR
, h•i->
TxX„rCou¡
);

1390 
	`__HAL_UNLOCK
(
h•i
);

1393 if((
h•i
->
In°™˚
->
CR1
 &
SPI_CR1_SPE
) != SPI_CR1_SPE)

1396 
	`__HAL_SPI_ENABLE
(
h•i
);

1400 
h•i
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

1402  
HAL_OK
;

1406  
HAL_BUSY
;

1408 
	}
}

1416 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMAPau£
(
SPI_H™dÀTy≥Def
 *
h•i
)

1419 
	`__HAL_LOCK
(
h•i
);

1422 
h•i
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

1423 
h•i
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

1426 
	`__HAL_UNLOCK
(
h•i
);

1428  
HAL_OK
;

1429 
	}
}

1437 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMAResume
(
SPI_H™dÀTy≥Def
 *
h•i
)

1440 
	`__HAL_LOCK
(
h•i
);

1443 
h•i
->
In°™˚
->
CR2
 |
SPI_CR2_TXDMAEN
;

1444 
h•i
->
In°™˚
->
CR2
 |
SPI_CR2_RXDMAEN
;

1447 
	`__HAL_UNLOCK
(
h•i
);

1449  
HAL_OK
;

1450 
	}
}

1458 
HAL_SètusTy≥Def
 
	$HAL_SPI_DMASt›
(
SPI_H™dÀTy≥Def
 *
h•i
)

1467 if(
h•i
->
hdm©x
 !
NULL
)

1469 
	`HAL_DMA_Ab‹t
(
h•i
->
hdm©x
);

1472 if(
h•i
->
hdm¨x
 !
NULL
)

1474 
	`HAL_DMA_Ab‹t
(
h•i
->
hdm¨x
);

1478 
h•i
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

1479 
h•i
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

1481 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1483  
HAL_OK
;

1484 
	}
}

1492 
	$HAL_SPI_IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
)

1494 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0, 
tmp3
 = 0;

1496 
tmp1
 = 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_RXNE
);

1497 
tmp2
 = 
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_RXNE
);

1498 
tmp3
 = 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_OVR
);

1500 if((
tmp1
 !
RESET
Ë&& (
tmp2
 !RESETË&& (
tmp3
 == RESET))

1502 
h•i
->
	`RxISR
(hspi);

1506 
tmp1
 = 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_TXE
);

1507 
tmp2
 = 
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_TXE
);

1509 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1511 
h•i
->
	`TxISR
(hspi);

1515 if(
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_ERR
Ë!
RESET
)

1518 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

1520 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_CRC
;

1521 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

1524 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_MODF
Ë!
RESET
)

1526 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_MODF
;

1527 
	`__HAL_SPI_CLEAR_MODFFLAG
(
h•i
);

1531 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_OVR
Ë!
RESET
)

1533 if(
h•i
->
Sèã
 !
HAL_SPI_STATE_BUSY_TX
)

1535 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_OVR
;

1536 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

1541 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_FRE
Ë!
RESET
)

1543 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FRE
;

1544 
	`__HAL_SPI_CLEAR_FREFLAG
(
h•i
);

1548 if(
h•i
->
Eº‹Code
!=
HAL_SPI_ERROR_NONE
)

1550 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1551 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

1554 
	}
}

1562 
__wók
 
	$HAL_SPI_TxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1567 
	}
}

1575 
__wók
 
	$HAL_SPI_RxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1580 
	}
}

1588 
__wók
 
	$HAL_SPI_TxRxC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1593 
	}
}

1601 
__wók
 
	$HAL_SPI_TxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1606 
	}
}

1614 
__wók
 
	$HAL_SPI_RxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1619 
	}
}

1627 
__wók
 
	$HAL_SPI_TxRxHÆfC∂tCÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1632 
	}
}

1640 
__wók
 
	$HAL_SPI_Eº‹CÆlback
(
SPI_H™dÀTy≥Def
 *
h•i
)

1647 
	}
}

1674 
HAL_SPI_SèãTy≥Def
 
	$HAL_SPI_GëSèã
(
SPI_H™dÀTy≥Def
 *
h•i
)

1676  
h•i
->
Sèã
;

1677 
	}
}

1685 
uöt32_t
 
	$HAL_SPI_GëEº‹
(
SPI_H™dÀTy≥Def
 *
h•i
)

1687  
h•i
->
Eº‹Code
;

1688 
	}
}

1700 
	$SPI_TxClo£IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
)

1703 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1705 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

1709 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_TXE
 ));

1712 if(
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_RXNE
Ë=
RESET
)

1714 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_ERR
));

1717 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1719 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

1723 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

1725 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

1729 if(
h•i
->
Eº‹Code
 =
HAL_SPI_ERROR_NONE
)

1732 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_TX_RX
)

1735 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1736 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

1741 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1742 
	`HAL_SPI_TxC∂tCÆlback
(
h•i
);

1748 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1750 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

1753 
	}
}

1761 
	$SPI_TxISR
(
SPI_H™dÀTy≥Def
 *
h•i
)

1764 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

1766 
h•i
->
In°™˚
->
DR
 = (*h•i->
pTxBuffPå
++);

1771 
h•i
->
In°™˚
->
DR
 = *((
uöt16_t
*)h•i->
pTxBuffPå
);

1772 
h•i
->
pTxBuffPå
+=2;

1774 
h•i
->
TxX„rCou¡
--;

1776 if(
h•i
->
TxX„rCou¡
 == 0)

1778 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1781 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

1783 
	`SPI_TxClo£IRQH™dÀr
(
h•i
);

1785 
	}
}

1793 
	$SPI_RxClo£IRQH™dÀr
(
SPI_H™dÀTy≥Def
 *
h•i
)

1795 
__IO
 
uöt16_t
 
tm¥eg
;

1797 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

1800 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1802 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

1806 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

1807 
	`UNUSED
(
tm¥eg
);

1810 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1812 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

1816 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

1818 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_CRC
;

1821 
	`SPI_RESET_CRC
(
h•i
);

1826 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_RXNE
));

1829 if(
	`__HAL_SPI_GET_IT_SOURCE
(
h•i
, 
SPI_IT_TXE
Ë=
RESET
)

1832 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_ERR
));

1834 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
)&&((h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)||(h•i->Inô.Dúe˘i⁄ =
SPI_DIRECTION_2LINES_RXONLY
)))

1837 
	`__HAL_SPI_DISABLE
(
h•i
);

1841 if(
h•i
->
Eº‹Code
 =
HAL_SPI_ERROR_NONE
)

1844 if(
h•i
->
Sèã
 =
HAL_SPI_STATE_BUSY_TX_RX
)

1847 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1848 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

1853 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1854 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

1860 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1862 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

1865 
	}
}

1873 
	$SPI_2LöesRxISR
(
SPI_H™dÀTy≥Def
 *
h•i
)

1876 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

1878 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

1883 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

1884 
h•i
->
pRxBuffPå
+=2;

1886 
h•i
->
RxX„rCou¡
--;

1888 if(
h•i
->
RxX„rCou¡
==0)

1890 
	`SPI_RxClo£IRQH™dÀr
(
h•i
);

1892 
	}
}

1900 
	$SPI_RxISR
(
SPI_H™dÀTy≥Def
 *
h•i
)

1903 if(
h•i
->
Inô
.
D©aSize
 =
SPI_DATASIZE_8BIT
)

1905 (*
h•i
->
pRxBuffPå
++Ëh•i->
In°™˚
->
DR
;

1910 *((
uöt16_t
*)
h•i
->
pRxBuffPå
Ëh•i->
In°™˚
->
DR
;

1911 
h•i
->
pRxBuffPå
+=2;

1913 
h•i
->
RxX„rCou¡
--;

1916 if((
h•i
->
RxX„rCou¡
 =1Ë&& (h•i->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
))

1919 
h•i
->
In°™˚
->
CR1
 |
SPI_CR1_CRCNEXT
;

1922 if(
h•i
->
RxX„rCou¡
 == 0)

1924 
	`SPI_RxClo£IRQH™dÀr
(
h•i
);

1926 
	}
}

1934 
	$SPI_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1936 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1939 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1942 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1944 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

1947 
h•i
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

1950 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

1952 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

1955 
h•i
->
TxX„rCou¡
 = 0;

1957 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

1961 if(
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)

1963 
	`__HAL_SPI_CLEAR_OVRFLAG
(
h•i
);

1967 if(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

1969 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

1973 
	`HAL_SPI_TxC∂tCÆlback
(
h•i
);

1975 
	}
}

1983 
	$SPI_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1985 
__IO
 
uöt16_t
 
tm¥eg
;

1987 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1989 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1991 if((
h•i
->
Inô
.
Dúe˘i⁄
 =
SPI_DIRECTION_2LINES
)&&(h•i->Inô.
Mode
 =
SPI_MODE_MASTER
))

1993 
	`SPI_DMAEndTønsmôRe˚ive
(
h•i
);

1998 if((
h•i
->
Inô
.
Mode
 =
SPI_MODE_MASTER
)&&((h•i->Inô.
Dúe˘i⁄
 =
SPI_DIRECTION_1LINE
)||(h•i->Inô.Dúe˘i⁄ =
SPI_DIRECTION_2LINES_RXONLY
)))

2001 
	`__HAL_SPI_DISABLE
(
h•i
);

2005 
h•i
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

2007 
h•i
->
RxX„rCou¡
 = 0;

2010 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2013 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2015 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

2019 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

2020 
	`UNUSED
(
tm¥eg
);

2023 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2025 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

2029 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

2031 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_CRC
;

2032 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

2037 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2040 if(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

2042 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2046 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

2051 
	`HAL_SPI_RxC∂tCÆlback
(
h•i
);

2053 
	}
}

2061 
	$SPI_DMAEndTønsmôRe˚ive
(
SPI_H™dÀTy≥Def
 *
h•i
)

2063 
__IO
 
uöt16_t
 
tm¥eg
;

2066 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2069 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë=
HAL_OK
)

2072 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_RXNE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2074 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

2078 
tm¥eg
 = 
h•i
->
In°™˚
->
DR
;

2079 
	`UNUSED
(
tm¥eg
);

2082 if(
	`__HAL_SPI_GET_FLAG
(
h•i
, 
SPI_FLAG_CRCERR
Ë!
RESET
)

2084 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_CRC
;

2085 
	`__HAL_SPI_CLEAR_CRCERRFLAG
(
h•i
);

2090 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_TXE
, 
RESET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2092 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

2095 
h•i
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_TXDMAEN
);

2098 if(
	`SPI_WaôOnFœgU¡ûTimeout
(
h•i
, 
SPI_FLAG_BSY
, 
SET
, 
SPI_TIMEOUT_VALUE
Ë!
HAL_OK
)

2100 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_FLAG
;

2104 
h•i
->
In°™˚
->
CR2
 &(
uöt32_t
)(~
SPI_CR2_RXDMAEN
);

2106 
h•i
->
TxX„rCou¡
 = 0;

2107 
h•i
->
RxX„rCou¡
 = 0;

2108 
	}
}

2116 
	$SPI_DMATønsmôRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2118 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2119 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

2121 
	`SPI_DMAEndTønsmôRe˚ive
(
h•i
);

2123 
h•i
->
Sèã
 = 
HAL_SPI_STATE_READY
;

2126 if(
h•i
->
Eº‹Code
 !
HAL_SPI_ERROR_NONE
)

2128 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2132 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

2137 
	`HAL_SPI_TxRxC∂tCÆlback
(
h•i
);

2139 
	}
}

2147 
	$SPI_DMAHÆfTønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2149 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2151 
	`HAL_SPI_TxHÆfC∂tCÆlback
(
h•i
);

2152 
	}
}

2160 
	$SPI_DMAHÆfRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2162 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2164 
	`HAL_SPI_RxHÆfC∂tCÆlback
(
h•i
);

2165 
	}
}

2173 
	$SPI_DMAHÆfTønsmôRe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2175 
SPI_H™dÀTy≥Def
* 
h•i
 = ( SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2177 
	`HAL_SPI_TxRxHÆfC∂tCÆlback
(
h•i
);

2178 
	}
}

2186 
	$SPI_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

2188 
SPI_H™dÀTy≥Def
* 
h•i
 = (SPI_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

2189 
h•i
->
TxX„rCou¡
 = 0;

2190 
h•i
->
RxX„rCou¡
 = 0;

2191 
h•i
->
Sèã

HAL_SPI_STATE_READY
;

2192 
h•i
->
Eº‹Code
 |
HAL_SPI_ERROR_DMA
;

2193 
	`HAL_SPI_Eº‹CÆlback
(
h•i
);

2194 
	}
}

2205 
HAL_SètusTy≥Def
 
	$SPI_WaôOnFœgU¡ûTimeout
(
SPI_H™dÀTy≥Def
 *
h•i
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

2207 
uöt32_t
 
tick°¨t
 = 0;

2210 
tick°¨t
 = 
	`HAL_GëTick
();

2213 if(
Sètus
 =
RESET
)

2215 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
Fœg
Ë=
RESET
)

2217 if(
Timeout
 !
HAL_MAX_DELAY
)

2219 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

2226 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

2229 
	`__HAL_SPI_DISABLE
(
h•i
);

2232 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2234 
	`SPI_RESET_CRC
(
h•i
);

2237 
h•i
->
Sèã

HAL_SPI_STATE_READY
;

2240 
	`__HAL_UNLOCK
(
h•i
);

2242  
HAL_TIMEOUT
;

2249 
	`__HAL_SPI_GET_FLAG
(
h•i
, 
Fœg
Ë!
RESET
)

2251 if(
Timeout
 !
HAL_MAX_DELAY
)

2253 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

2260 
	`__HAL_SPI_DISABLE_IT
(
h•i
, (
SPI_IT_TXE
 | 
SPI_IT_RXNE
 | 
SPI_IT_ERR
));

2263 
	`__HAL_SPI_DISABLE
(
h•i
);

2266 if(
h•i
->
Inô
.
CRCCÆcuœti⁄
 =
SPI_CRCCALCULATION_ENABLE
)

2268 
	`SPI_RESET_CRC
(
h•i
);

2271 
h•i
->
Sèã

HAL_SPI_STATE_READY
;

2274 
	`__HAL_UNLOCK
(
h•i
);

2276  
HAL_TIMEOUT
;

2281  
HAL_OK
;

2282 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sram.c

95 
	~"°m32f4xx_hÆ.h
"

105 #ifde‡
HAL_SRAM_MODULE_ENABLED


107 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) ||\

108 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) ||\

109 
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

143 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Inô
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
FMC_NORSRAM_TimögTy≥Def
 *
Timög
, FMC_NORSRAM_TimögTy≥De‡*
ExtTimög
)

146 if(
h§am
 =
NULL
)

148  
HAL_ERROR
;

151 if(
h§am
->
Sèã
 =
HAL_SRAM_STATE_RESET
)

154 
h§am
->
Lock
 = 
HAL_UNLOCKED
;

156 
	`HAL_SRAM_M•Inô
(
h§am
);

160 
	`FMC_NORSRAM_Inô
(
h§am
->
In°™˚
, &(h§am->
Inô
));

163 
	`FMC_NORSRAM_Timög_Inô
(
h§am
->
In°™˚
, 
Timög
, h§am->
Inô
.
NSB™k
);

166 
	`FMC_NORSRAM_Exãnded_Timög_Inô
(
h§am
->
Exãnded
, 
ExtTimög
, h§am->
Inô
.
NSB™k
, h§am->Inô.
ExãndedMode
);

169 
	`__FMC_NORSRAM_ENABLE
(
h§am
->
In°™˚
, h§am->
Inô
.
NSB™k
);

171  
HAL_OK
;

172 
	}
}

180 
HAL_SètusTy≥Def
 
	$HAL_SRAM_DeInô
(
SRAM_H™dÀTy≥Def
 *
h§am
)

183 
	`HAL_SRAM_M•DeInô
(
h§am
);

186 
	`FMC_NORSRAM_DeInô
(
h§am
->
In°™˚
, h§am->
Exãnded
, h§am->
Inô
.
NSB™k
);

188 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_RESET
;

191 
	`__HAL_UNLOCK
(
h§am
);

193  
HAL_OK
;

194 
	}
}

202 
__wók
 
	$HAL_SRAM_M•Inô
(
SRAM_H™dÀTy≥Def
 *
h§am
)

207 
	}
}

215 
__wók
 
	$HAL_SRAM_M•DeInô
(
SRAM_H™dÀTy≥Def
 *
h§am
)

220 
	}
}

228 
__wók
 
	$HAL_SRAM_DMA_X„rC∂tCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

233 
	}
}

241 
__wók
 
	$HAL_SRAM_DMA_X„rEº‹CÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
)

246 
	}
}

275 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Ród_8b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, 
uöt8_t
 *
pD°Buf„r
, uöt32_à
Buf„rSize
)

277 
__IO
 
uöt8_t
 * 
pSømAddªss
 = (uöt8_à*)
pAddªss
;

280 
	`__HAL_LOCK
(
h§am
);

283 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

286 ; 
Buf„rSize
 != 0; BufferSize--)

288 *
pD°Buf„r
 = *(
__IO
 
uöt8_t
 *)
pSømAddªss
;

289 
pD°Buf„r
++;

290 
pSømAddªss
++;

294 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

297 
	`__HAL_UNLOCK
(
h§am
);

299  
HAL_OK
;

300 
	}
}

311 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Wrôe_8b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, 
uöt8_t
 *
pSrcBuf„r
, uöt32_à
Buf„rSize
)

313 
__IO
 
uöt8_t
 * 
pSømAddªss
 = (uöt8_à*)
pAddªss
;

316 if(
h§am
->
Sèã
 =
HAL_SRAM_STATE_PROTECTED
)

318  
HAL_ERROR
;

322 
	`__HAL_LOCK
(
h§am
);

325 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

328 ; 
Buf„rSize
 != 0; BufferSize--)

330 *(
__IO
 
uöt8_t
 *)
pSømAddªss
 = *
pSrcBuf„r
;

331 
pSrcBuf„r
++;

332 
pSømAddªss
++;

336 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

339 
	`__HAL_UNLOCK
(
h§am
);

341  
HAL_OK
;

342 
	}
}

353 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Ród_16b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pD°Buf„r
, uöt32_à
Buf„rSize
)

355 
__IO
 
uöt16_t
 * 
pSømAddªss
 = (uöt16_à*)
pAddªss
;

358 
	`__HAL_LOCK
(
h§am
);

361 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

364 ; 
Buf„rSize
 != 0; BufferSize--)

366 *
pD°Buf„r
 = *(
__IO
 
uöt16_t
 *)
pSømAddªss
;

367 
pD°Buf„r
++;

368 
pSømAddªss
++;

372 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

375 
	`__HAL_UNLOCK
(
h§am
);

377  
HAL_OK
;

378 
	}
}

389 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Wrôe_16b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, 
uöt16_t
 *
pSrcBuf„r
, uöt32_à
Buf„rSize
)

391 
__IO
 
uöt16_t
 * 
pSømAddªss
 = (uöt16_à*)
pAddªss
;

394 if(
h§am
->
Sèã
 =
HAL_SRAM_STATE_PROTECTED
)

396  
HAL_ERROR
;

400 
	`__HAL_LOCK
(
h§am
);

403 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

406 ; 
Buf„rSize
 != 0; BufferSize--)

408 *(
__IO
 
uöt16_t
 *)
pSømAddªss
 = *
pSrcBuf„r
;

409 
pSrcBuf„r
++;

410 
pSømAddªss
++;

414 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

417 
	`__HAL_UNLOCK
(
h§am
);

419  
HAL_OK
;

420 
	}
}

431 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Ród_32b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pD°Buf„r
, uöt32_à
Buf„rSize
)

434 
	`__HAL_LOCK
(
h§am
);

437 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

440 ; 
Buf„rSize
 != 0; BufferSize--)

442 *
pD°Buf„r
 = *(
__IO
 
uöt32_t
 *)
pAddªss
;

443 
pD°Buf„r
++;

444 
pAddªss
++;

448 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

451 
	`__HAL_UNLOCK
(
h§am
);

453  
HAL_OK
;

454 
	}
}

465 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Wrôe_32b
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pSrcBuf„r
, uöt32_à
Buf„rSize
)

468 if(
h§am
->
Sèã
 =
HAL_SRAM_STATE_PROTECTED
)

470  
HAL_ERROR
;

474 
	`__HAL_LOCK
(
h§am
);

477 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

480 ; 
Buf„rSize
 != 0; BufferSize--)

482 *(
__IO
 
uöt32_t
 *)
pAddªss
 = *
pSrcBuf„r
;

483 
pSrcBuf„r
++;

484 
pAddªss
++;

488 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

491 
	`__HAL_UNLOCK
(
h§am
);

493  
HAL_OK
;

494 
	}
}

505 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Ród_DMA
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pD°Buf„r
, uöt32_à
Buf„rSize
)

508 
	`__HAL_LOCK
(
h§am
);

511 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

514 
h§am
->
hdma
->
X„rC∂tCÆlback
 = 
HAL_SRAM_DMA_X„rC∂tCÆlback
;

515 
h§am
->
hdma
->
X„rEº‹CÆlback
 = 
HAL_SRAM_DMA_X„rEº‹CÆlback
;

518 
	`HAL_DMA_Sèπ_IT
(
h§am
->
hdma
, (
uöt32_t
)
pAddªss
, (uöt32_t)
pD°Buf„r
, (uöt32_t)
Buf„rSize
);

521 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

524 
	`__HAL_UNLOCK
(
h§am
);

526  
HAL_OK
;

527 
	}
}

538 
HAL_SètusTy≥Def
 
	$HAL_SRAM_Wrôe_DMA
(
SRAM_H™dÀTy≥Def
 *
h§am
, 
uöt32_t
 *
pAddªss
, uöt32_à*
pSrcBuf„r
, uöt32_à
Buf„rSize
)

541 if(
h§am
->
Sèã
 =
HAL_SRAM_STATE_PROTECTED
)

543  
HAL_ERROR
;

547 
	`__HAL_LOCK
(
h§am
);

550 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

553 
h§am
->
hdma
->
X„rC∂tCÆlback
 = 
HAL_SRAM_DMA_X„rC∂tCÆlback
;

554 
h§am
->
hdma
->
X„rEº‹CÆlback
 = 
HAL_SRAM_DMA_X„rEº‹CÆlback
;

557 
	`HAL_DMA_Sèπ_IT
(
h§am
->
hdma
, (
uöt32_t
)
pSrcBuf„r
, (uöt32_t)
pAddªss
, (uöt32_t)
Buf„rSize
);

560 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

563 
	`__HAL_UNLOCK
(
h§am
);

565  
HAL_OK
;

566 
	}
}

593 
HAL_SètusTy≥Def
 
	$HAL_SRAM_WrôeO≥øti⁄_E«bÀ
(
SRAM_H™dÀTy≥Def
 *
h§am
)

596 
	`__HAL_LOCK
(
h§am
);

599 
	`FMC_NORSRAM_WrôeO≥øti⁄_E«bÀ
(
h§am
->
In°™˚
, h§am->
Inô
.
NSB™k
);

602 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_READY
;

605 
	`__HAL_UNLOCK
(
h§am
);

607  
HAL_OK
;

608 
	}
}

616 
HAL_SètusTy≥Def
 
	$HAL_SRAM_WrôeO≥øti⁄_DißbÀ
(
SRAM_H™dÀTy≥Def
 *
h§am
)

619 
	`__HAL_LOCK
(
h§am
);

622 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_BUSY
;

625 
	`FMC_NORSRAM_WrôeO≥øti⁄_DißbÀ
(
h§am
->
In°™˚
, h§am->
Inô
.
NSB™k
);

628 
h§am
->
Sèã
 = 
HAL_SRAM_STATE_PROTECTED
;

631 
	`__HAL_UNLOCK
(
h§am
);

633  
HAL_OK
;

634 
	}
}

661 
HAL_SRAM_SèãTy≥Def
 
	$HAL_SRAM_GëSèã
(
SRAM_H™dÀTy≥Def
 *
h§am
)

663  
h§am
->
Sèã
;

664 
	}
}

673 
	gSTM32F429xx
 || 
	gSTM32F439xx
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_tim.c

129 
	~"°m32f4xx_hÆ.h
"

140 #ifde‡
HAL_TIM_MODULE_ENABLED


150 
TIM_OC1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

151 
TIM_OC3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

152 
TIM_OC4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

154 
TIM_TI1_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
);

155 
TIM_TI2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

156 
uöt32_t
 
TIM_ICFûãr
);

157 
TIM_TI2_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
);

158 
TIM_TI3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

159 
uöt32_t
 
TIM_ICFûãr
);

160 
TIM_TI4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

161 
uöt32_t
 
TIM_ICFûãr
);

163 
TIM_ETR_SëC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_ExtTRGPªsˇÀr
,

164 
uöt32_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt32_à
ExtTRGFûãr
);

166 
TIM_ITRx_SëC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ITRx
);

167 
TIM_DMAPîiodEœp£dC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

168 
TIM_DMATriggîC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

169 
TIM_SœveTimî_SëC⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
,

170 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
);

208 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

211 if(
htim
 =
NULL
)

213  
HAL_ERROR
;

217 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

218 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

219 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

221 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

224 
htim
->
Lock
 = 
HAL_UNLOCKED
;

226 
	`HAL_TIM_Ba£_M•Inô
(
htim
);

230 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

233 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

236 
htim
->
Sèã

HAL_TIM_STATE_READY
;

238  
HAL_OK
;

239 
	}
}

247 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

250 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

252 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

255 
	`__HAL_TIM_DISABLE
(
htim
);

258 
	`HAL_TIM_Ba£_M•DeInô
(
htim
);

261 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

264 
	`__HAL_UNLOCK
(
htim
);

266  
HAL_OK
;

267 
	}
}

275 
__wók
 
	$HAL_TIM_Ba£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

280 
	}
}

288 
__wók
 
	$HAL_TIM_Ba£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

293 
	}
}

301 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
)

304 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

307 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

310 
	`__HAL_TIM_ENABLE
(
htim
);

313 
htim
->
Sèã

HAL_TIM_STATE_READY
;

316  
HAL_OK
;

317 
	}
}

325 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›
(
TIM_H™dÀTy≥Def
 *
htim
)

328 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

331 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

334 
	`__HAL_TIM_DISABLE
(
htim
);

337 
htim
->
Sèã

HAL_TIM_STATE_READY
;

340  
HAL_OK
;

341 
	}
}

349 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

352 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

355 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_UPDATE
);

358 
	`__HAL_TIM_ENABLE
(
htim
);

361  
HAL_OK
;

362 
	}
}

370 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

373 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

375 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_UPDATE
);

378 
	`__HAL_TIM_DISABLE
(
htim
);

381  
HAL_OK
;

382 
	}
}

392 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
)

395 
	`as£π_∑øm
(
	`IS_TIM_DMA_INSTANCE
(
htim
->
In°™˚
));

397 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

399  
HAL_BUSY
;

401 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

403 if((
pD©a
 =0 ) && (
Lígth
 > 0))

405  
HAL_ERROR
;

409 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

413 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

416 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

419 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
ARR
, 
Lígth
);

422 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_UPDATE
);

425 
	`__HAL_TIM_ENABLE
(
htim
);

428  
HAL_OK
;

429 
	}
}

437 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
)

440 
	`as£π_∑øm
(
	`IS_TIM_DMA_INSTANCE
(
htim
->
In°™˚
));

443 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_UPDATE
);

446 
	`__HAL_TIM_DISABLE
(
htim
);

449 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

452  
HAL_OK
;

453 
	}
}

486 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Inô
(
TIM_H™dÀTy≥Def
* 
htim
)

489 if(
htim
 =
NULL
)

491  
HAL_ERROR
;

495 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

496 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

497 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

499 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

502 
htim
->
Lock
 = 
HAL_UNLOCKED
;

504 
	`HAL_TIM_OC_M•Inô
(
htim
);

508 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

511 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

514 
htim
->
Sèã

HAL_TIM_STATE_READY
;

516  
HAL_OK
;

517 
	}
}

525 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

528 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

530 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

533 
	`__HAL_TIM_DISABLE
(
htim
);

536 
	`HAL_TIM_OC_M•DeInô
(
htim
);

539 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

542 
	`__HAL_UNLOCK
(
htim
);

544  
HAL_OK
;

545 
	}
}

553 
__wók
 
	$HAL_TIM_OC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

558 
	}
}

566 
__wók
 
	$HAL_TIM_OC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

571 
	}
}

585 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

588 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

591 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

593 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

596 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

600 
	`__HAL_TIM_ENABLE
(
htim
);

603  
HAL_OK
;

604 
	}
}

618 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

621 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

624 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

626 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

629 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

633 
	`__HAL_TIM_DISABLE
(
htim
);

636  
HAL_OK
;

637 
	}
}

651 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

654 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

656 
Ch™√l
)

658 
TIM_CHANNEL_1
:

661 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

665 
TIM_CHANNEL_2
:

668 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

672 
TIM_CHANNEL_3
:

675 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

679 
TIM_CHANNEL_4
:

682 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

691 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

693 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

696 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

700 
	`__HAL_TIM_ENABLE
(
htim
);

703  
HAL_OK
;

704 
	}
}

718 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

721 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

723 
Ch™√l
)

725 
TIM_CHANNEL_1
:

728 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

732 
TIM_CHANNEL_2
:

735 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

739 
TIM_CHANNEL_3
:

742 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

746 
TIM_CHANNEL_4
:

749 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

758 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

760 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

763 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

767 
	`__HAL_TIM_DISABLE
(
htim
);

770  
HAL_OK
;

771 
	}
}

787 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

790 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

792 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

794  
HAL_BUSY
;

796 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

798 if(((
uöt32_t
)
pD©a
 =0 ) && (
Lígth
 > 0))

800  
HAL_ERROR
;

804 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

807 
Ch™√l
)

809 
TIM_CHANNEL_1
:

812 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

815 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

818 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
);

821 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

825 
TIM_CHANNEL_2
:

828 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

831 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

834 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
);

837 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

841 
TIM_CHANNEL_3
:

844 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

847 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

850 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
,
Lígth
);

853 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

857 
TIM_CHANNEL_4
:

860 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

863 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

866 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR4
, 
Lígth
);

869 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

878 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

880 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

883 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

887 
	`__HAL_TIM_ENABLE
(
htim
);

890  
HAL_OK
;

891 
	}
}

905 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

908 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

910 
Ch™√l
)

912 
TIM_CHANNEL_1
:

915 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

919 
TIM_CHANNEL_2
:

922 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

926 
TIM_CHANNEL_3
:

929 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

933 
TIM_CHANNEL_4
:

936 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

945 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

947 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

950 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

954 
	`__HAL_TIM_DISABLE
(
htim
);

957 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

960  
HAL_OK
;

961 
	}
}

994 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

997 if(
htim
 =
NULL
)

999  
HAL_ERROR
;

1003 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1004 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

1005 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

1007 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

1010 
htim
->
Lock
 = 
HAL_UNLOCKED
;

1012 
	`HAL_TIM_PWM_M•Inô
(
htim
);

1016 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

1019 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

1022 
htim
->
Sèã

HAL_TIM_STATE_READY
;

1024  
HAL_OK
;

1025 
	}
}

1033 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1036 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1038 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1041 
	`__HAL_TIM_DISABLE
(
htim
);

1044 
	`HAL_TIM_PWM_M•DeInô
(
htim
);

1047 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

1050 
	`__HAL_UNLOCK
(
htim
);

1052  
HAL_OK
;

1053 
	}
}

1061 
__wók
 
	$HAL_TIM_PWM_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1066 
	}
}

1074 
__wók
 
	$HAL_TIM_PWM_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1079 
	}
}

1093 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1096 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1099 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1101 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1104 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1108 
	`__HAL_TIM_ENABLE
(
htim
);

1111  
HAL_OK
;

1112 
	}
}

1126 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1129 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1132 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1134 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1137 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1141 
	`__HAL_TIM_DISABLE
(
htim
);

1144 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1147  
HAL_OK
;

1148 
	}
}

1162 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1165 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1167 
Ch™√l
)

1169 
TIM_CHANNEL_1
:

1172 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1176 
TIM_CHANNEL_2
:

1179 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1183 
TIM_CHANNEL_3
:

1186 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

1190 
TIM_CHANNEL_4
:

1193 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

1202 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1204 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1207 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1211 
	`__HAL_TIM_ENABLE
(
htim
);

1214  
HAL_OK
;

1215 
	}
}

1229 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›_IT
 (
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1232 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1234 
Ch™√l
)

1236 
TIM_CHANNEL_1
:

1239 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1243 
TIM_CHANNEL_2
:

1246 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1250 
TIM_CHANNEL_3
:

1253 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1257 
TIM_CHANNEL_4
:

1260 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1269 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1271 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1274 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1278 
	`__HAL_TIM_DISABLE
(
htim
);

1281  
HAL_OK
;

1282 
	}
}

1298 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

1301 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1303 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

1305  
HAL_BUSY
;

1307 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

1309 if(((
uöt32_t
)
pD©a
 =0 ) && (
Lígth
 > 0))

1311  
HAL_ERROR
;

1315 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1318 
Ch™√l
)

1320 
TIM_CHANNEL_1
:

1323 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1326 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1329 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
);

1332 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1336 
TIM_CHANNEL_2
:

1339 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1342 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1345 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
);

1348 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1352 
TIM_CHANNEL_3
:

1355 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1358 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1361 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
,
Lígth
);

1364 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1368 
TIM_CHANNEL_4
:

1371 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1374 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1377 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR4
, 
Lígth
);

1380 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1389 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1391 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1394 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1398 
	`__HAL_TIM_ENABLE
(
htim
);

1401  
HAL_OK
;

1402 
	}
}

1416 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1419 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1421 
Ch™√l
)

1423 
TIM_CHANNEL_1
:

1426 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1430 
TIM_CHANNEL_2
:

1433 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1437 
TIM_CHANNEL_3
:

1440 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1444 
TIM_CHANNEL_4
:

1447 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1456 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1458 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1461 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1465 
	`__HAL_TIM_DISABLE
(
htim
);

1468 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1471  
HAL_OK
;

1472 
	}
}

1505 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1508 if(
htim
 =
NULL
)

1510  
HAL_ERROR
;

1514 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1515 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

1516 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

1518 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

1521 
htim
->
Lock
 = 
HAL_UNLOCKED
;

1523 
	`HAL_TIM_IC_M•Inô
(
htim
);

1527 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

1530 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

1533 
htim
->
Sèã

HAL_TIM_STATE_READY
;

1535  
HAL_OK
;

1536 
	}
}

1544 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1547 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1549 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1552 
	`__HAL_TIM_DISABLE
(
htim
);

1555 
	`HAL_TIM_IC_M•DeInô
(
htim
);

1558 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

1561 
	`__HAL_UNLOCK
(
htim
);

1563  
HAL_OK
;

1564 
	}
}

1572 
__wók
 
	$HAL_TIM_IC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1577 
	}
}

1585 
__wók
 
	$HAL_TIM_IC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1590 
	}
}

1604 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ
 (
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1607 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1610 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1613 
	`__HAL_TIM_ENABLE
(
htim
);

1616  
HAL_OK
;

1617 
	}
}

1631 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1634 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1637 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1640 
	`__HAL_TIM_DISABLE
(
htim
);

1643  
HAL_OK
;

1644 
	}
}

1658 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ_IT
 (
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1661 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1663 
Ch™√l
)

1665 
TIM_CHANNEL_1
:

1668 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1672 
TIM_CHANNEL_2
:

1675 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1679 
TIM_CHANNEL_3
:

1682 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

1686 
TIM_CHANNEL_4
:

1689 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

1697 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1700 
	`__HAL_TIM_ENABLE
(
htim
);

1703  
HAL_OK
;

1704 
	}
}

1718 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1721 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1723 
Ch™√l
)

1725 
TIM_CHANNEL_1
:

1728 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1732 
TIM_CHANNEL_2
:

1735 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1739 
TIM_CHANNEL_3
:

1742 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1746 
TIM_CHANNEL_4
:

1749 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1758 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1761 
	`__HAL_TIM_DISABLE
(
htim
);

1764  
HAL_OK
;

1765 
	}
}

1781 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

1784 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1785 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

1787 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

1789  
HAL_BUSY
;

1791 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

1793 if((
pD©a
 =0 ) && (
Lígth
 > 0))

1795  
HAL_ERROR
;

1799 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1803 
Ch™√l
)

1805 
TIM_CHANNEL_1
:

1808 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

1811 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1814 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a
, 
Lígth
);

1817 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1821 
TIM_CHANNEL_2
:

1824 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

1827 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1830 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a
, 
Lígth
);

1833 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1837 
TIM_CHANNEL_3
:

1840 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

1843 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1846 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)&htim->
In°™˚
->
CCR3
, (uöt32_t)
pD©a
, 
Lígth
);

1849 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1853 
TIM_CHANNEL_4
:

1856 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

1859 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1862 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)&htim->
In°™˚
->
CCR4
, (uöt32_t)
pD©a
, 
Lígth
);

1865 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1874 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1877 
	`__HAL_TIM_ENABLE
(
htim
);

1880  
HAL_OK
;

1881 
	}
}

1895 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1898 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1899 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

1901 
Ch™√l
)

1903 
TIM_CHANNEL_1
:

1906 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1910 
TIM_CHANNEL_2
:

1913 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1917 
TIM_CHANNEL_3
:

1920 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1924 
TIM_CHANNEL_4
:

1927 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1936 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1939 
	`__HAL_TIM_DISABLE
(
htim
);

1942 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1945  
HAL_OK
;

1946 
	}
}

1983 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
O√Pul£Mode
)

1986 if(
htim
 =
NULL
)

1988  
HAL_ERROR
;

1992 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1993 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

1994 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

1995 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
O√Pul£Mode
));

1997 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

2000 
htim
->
Lock
 = 
HAL_UNLOCKED
;

2002 
	`HAL_TIM_O√Pul£_M•Inô
(
htim
);

2006 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

2009 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

2012 
htim
->
In°™˚
->
CR1
 &~
TIM_CR1_OPM
;

2015 
htim
->
In°™˚
->
CR1
 |
O√Pul£Mode
;

2018 
htim
->
Sèã

HAL_TIM_STATE_READY
;

2020  
HAL_OK
;

2021 
	}
}

2029 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2032 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

2034 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2037 
	`__HAL_TIM_DISABLE
(
htim
);

2040 
	`HAL_TIM_O√Pul£_M•DeInô
(
htim
);

2043 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

2046 
	`__HAL_UNLOCK
(
htim
);

2048  
HAL_OK
;

2049 
	}
}

2057 
__wók
 
	$HAL_TIM_O√Pul£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

2062 
	}
}

2070 
__wók
 
	$HAL_TIM_O√Pul£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2075 
	}
}

2087 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2098 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2099 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2101 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

2104 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

2108  
HAL_OK
;

2109 
	}
}

2121 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2129 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2130 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2132 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

2135 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

2139 
	`__HAL_TIM_DISABLE
(
htim
);

2142  
HAL_OK
;

2143 
	}
}

2155 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2167 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2170 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2172 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2173 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2175 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

2178 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

2182  
HAL_OK
;

2183 
	}
}

2195 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2198 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2201 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2208 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2209 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2211 if(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

2214 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

2218 
	`__HAL_TIM_DISABLE
(
htim
);

2221  
HAL_OK
;

2222 
	}
}

2255 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Encodî_InôTy≥Def
* 
sC⁄fig
)

2257 
uöt32_t
 
tmpsm¸
 = 0;

2258 
uöt32_t
 
tmpccmr1
 = 0;

2259 
uöt32_t
 
tmpc˚r
 = 0;

2262 if(
htim
 =
NULL
)

2264  
HAL_ERROR
;

2268 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2269 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
sC⁄fig
->
EncodîMode
));

2270 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
IC1Sñe˘i⁄
));

2271 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
IC2Sñe˘i⁄
));

2272 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
IC1Pﬁ¨ôy
));

2273 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
IC2Pﬁ¨ôy
));

2274 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
IC1PªsˇÀr
));

2275 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
IC2PªsˇÀr
));

2276 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
IC1Fûãr
));

2277 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
IC2Fûãr
));

2279 if(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

2282 
htim
->
Lock
 = 
HAL_UNLOCKED
;

2284 
	`HAL_TIM_Encodî_M•Inô
(
htim
);

2288 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

2291 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

2294 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

2297 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

2300 
tmpccmr1
 = 
htim
->
In°™˚
->
CCMR1
;

2303 
tmpc˚r
 = 
htim
->
In°™˚
->
CCER
;

2306 
tmpsm¸
 |
sC⁄fig
->
EncodîMode
;

2309 
tmpccmr1
 &~(
TIM_CCMR1_CC1S
 | 
TIM_CCMR1_CC2S
);

2310 
tmpccmr1
 |(
sC⁄fig
->
IC1Sñe˘i⁄
 | (sC⁄fig->
IC2Sñe˘i⁄
 << 8));

2313 
tmpccmr1
 &~(
TIM_CCMR1_IC1PSC
 | 
TIM_CCMR1_IC2PSC
);

2314 
tmpccmr1
 &~(
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC2F
);

2315 
tmpccmr1
 |
sC⁄fig
->
IC1PªsˇÀr
 | (sC⁄fig->
IC2PªsˇÀr
 << 8);

2316 
tmpccmr1
 |(
sC⁄fig
->
IC1Fûãr
 << 4Ë| (sC⁄fig->
IC2Fûãr
 << 12);

2319 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC2P
);

2320 
tmpc˚r
 &~(
TIM_CCER_CC1NP
 | 
TIM_CCER_CC2NP
);

2321 
tmpc˚r
 |
sC⁄fig
->
IC1Pﬁ¨ôy
 | (sC⁄fig->
IC2Pﬁ¨ôy
 << 4);

2324 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

2327 
htim
->
In°™˚
->
CCMR1
 = 
tmpccmr1
;

2330 
htim
->
In°™˚
->
CCER
 = 
tmpc˚r
;

2333 
htim
->
Sèã

HAL_TIM_STATE_READY
;

2335  
HAL_OK
;

2336 
	}
}

2344 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2347 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

2349 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2352 
	`__HAL_TIM_DISABLE
(
htim
);

2355 
	`HAL_TIM_Encodî_M•DeInô
(
htim
);

2358 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

2361 
	`__HAL_UNLOCK
(
htim
);

2363  
HAL_OK
;

2364 
	}
}

2372 
__wók
 
	$HAL_TIM_Encodî_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

2377 
	}
}

2385 
__wók
 
	$HAL_TIM_Encodî_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2390 
	}
}

2403 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2406 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2409 
Ch™√l
)

2411 
TIM_CHANNEL_1
:

2413 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2416 
TIM_CHANNEL_2
:

2418 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2423 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2424 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2429 
	`__HAL_TIM_ENABLE
(
htim
);

2432  
HAL_OK
;

2433 
	}
}

2446 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2449 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2453 
Ch™√l
)

2455 
TIM_CHANNEL_1
:

2457 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2460 
TIM_CHANNEL_2
:

2462 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2467 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2468 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2473 
	`__HAL_TIM_DISABLE
(
htim
);

2476  
HAL_OK
;

2477 
	}
}

2490 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2493 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2497 
Ch™√l
)

2499 
TIM_CHANNEL_1
:

2501 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2502 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2505 
TIM_CHANNEL_2
:

2507 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2508 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2513 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2514 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2515 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2516 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2522 
	`__HAL_TIM_ENABLE
(
htim
);

2525  
HAL_OK
;

2526 
	}
}

2539 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2542 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2546 if(
Ch™√l
 =
TIM_CHANNEL_1
)

2548 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2551 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2553 if(
Ch™√l
 =
TIM_CHANNEL_2
)

2555 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2558 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2562 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2563 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2566 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2567 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2571 
	`__HAL_TIM_DISABLE
(
htim
);

2574 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2577  
HAL_OK
;

2578 
	}
}

2594 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a1
, uöt32_à*
pD©a2
, 
uöt16_t
 
Lígth
)

2597 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

2599 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

2601  
HAL_BUSY
;

2603 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

2605 if((((
pD©a1
 =0Ë|| (
pD©a2
 =0Ë)Ë&& (
Lígth
 > 0))

2607  
HAL_ERROR
;

2611 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2615 
Ch™√l
)

2617 
TIM_CHANNEL_1
:

2620 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2623 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2626 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_à)
pD©a1
, 
Lígth
);

2629 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2632 
	`__HAL_TIM_ENABLE
(
htim
);

2635 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2639 
TIM_CHANNEL_2
:

2642 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2645 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
;

2647 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a2
, 
Lígth
);

2650 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2653 
	`__HAL_TIM_ENABLE
(
htim
);

2656 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2660 
TIM_CHANNEL_ALL
:

2663 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2666 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2669 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a1
, 
Lígth
);

2672 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2675 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2678 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a2
, 
Lígth
);

2681 
	`__HAL_TIM_ENABLE
(
htim
);

2684 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2685 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2688 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2690 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2698  
HAL_OK
;

2699 
	}
}

2712 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2715 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

2719 if(
Ch™√l
 =
TIM_CHANNEL_1
)

2721 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2724 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2726 if(
Ch™√l
 =
TIM_CHANNEL_2
)

2728 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2731 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2735 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2736 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2739 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2740 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2744 
	`__HAL_TIM_DISABLE
(
htim
);

2747 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2750  
HAL_OK
;

2751 
	}
}

2775 
	$HAL_TIM_IRQH™dÀr
(
TIM_H™dÀTy≥Def
 *
htim
)

2778 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC1
Ë!
RESET
)

2780 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC1
Ë!=
RESET
)

2783 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC1
);

2784 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

2787 if((
htim
->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_CC1S
) != 0x00)

2789 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

2794 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

2795 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2797 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2802 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC2
Ë!
RESET
)

2804 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC2
Ë!=
RESET
)

2806 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC2
);

2807 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

2809 if((
htim
->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_CC2S
) != 0x00)

2811 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

2816 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

2817 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2819 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2823 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC3
Ë!
RESET
)

2825 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC3
Ë!=
RESET
)

2827 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC3
);

2828 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

2830 if((
htim
->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_CC3S
) != 0x00)

2832 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

2837 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

2838 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2840 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2844 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC4
Ë!
RESET
)

2846 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC4
Ë!=
RESET
)

2848 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC4
);

2849 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

2851 if((
htim
->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_CC4S
) != 0x00)

2853 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

2858 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

2859 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2861 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2865 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_UPDATE
Ë!
RESET
)

2867 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_UPDATE
Ë!=
RESET
)

2869 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_UPDATE
);

2870 
	`HAL_TIM_PîiodEœp£dCÆlback
(
htim
);

2874 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_BREAK
Ë!
RESET
)

2876 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_BREAK
Ë!=
RESET
)

2878 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_BREAK
);

2879 
	`HAL_TIMEx_BªakCÆlback
(
htim
);

2883 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_TRIGGER
Ë!
RESET
)

2885 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_TRIGGER
Ë!=
RESET
)

2887 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_TRIGGER
);

2888 
	`HAL_TIM_TriggîCÆlback
(
htim
);

2892 if(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_COM
Ë!
RESET
)

2894 if(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_COM
Ë!=
RESET
)

2896 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_FLAG_COM
);

2897 
	`HAL_TIMEx_Commuèti⁄CÆlback
(
htim
);

2900 
	}
}

2938 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

2941 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

2942 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
sC⁄fig
->
OCMode
));

2943 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
sC⁄fig
->
OCPﬁ¨ôy
));

2944 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
sC⁄fig
->
OCNPﬁ¨ôy
));

2945 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
sC⁄fig
->
OCNIdÀSèã
));

2946 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
sC⁄fig
->
OCIdÀSèã
));

2949 
	`__HAL_LOCK
(
htim
);

2951 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2953 
Ch™√l
)

2955 
TIM_CHANNEL_1
:

2957 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

2959 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

2963 
TIM_CHANNEL_2
:

2965 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

2967 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

2971 
TIM_CHANNEL_3
:

2973 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

2975 
	`TIM_OC3_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

2979 
TIM_CHANNEL_4
:

2981 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

2983 
	`TIM_OC4_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

2990 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2992 
	`__HAL_UNLOCK
(
htim
);

2994  
HAL_OK
;

2995 
	}
}

3011 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_IC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

3014 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3015 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
ICPﬁ¨ôy
));

3016 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
ICSñe˘i⁄
));

3017 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
ICPªsˇÀr
));

3018 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
ICFûãr
));

3020 
	`__HAL_LOCK
(
htim
);

3022 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3024 i‡(
Ch™√l
 =
TIM_CHANNEL_1
)

3027 
	`TIM_TI1_SëC⁄fig
(
htim
->
In°™˚
,

3028 
sC⁄fig
->
ICPﬁ¨ôy
,

3029 
sC⁄fig
->
ICSñe˘i⁄
,

3030 
sC⁄fig
->
ICFûãr
);

3033 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
;

3036 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
ICPªsˇÀr
;

3038 i‡(
Ch™√l
 =
TIM_CHANNEL_2
)

3041 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3043 
	`TIM_TI2_SëC⁄fig
(
htim
->
In°™˚
,

3044 
sC⁄fig
->
ICPﬁ¨ôy
,

3045 
sC⁄fig
->
ICSñe˘i⁄
,

3046 
sC⁄fig
->
ICFûãr
);

3049 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC2PSC
;

3052 
htim
->
In°™˚
->
CCMR1
 |(
sC⁄fig
->
ICPªsˇÀr
 << 8);

3054 i‡(
Ch™√l
 =
TIM_CHANNEL_3
)

3057 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

3059 
	`TIM_TI3_SëC⁄fig
(
htim
->
In°™˚
,

3060 
sC⁄fig
->
ICPﬁ¨ôy
,

3061 
sC⁄fig
->
ICSñe˘i⁄
,

3062 
sC⁄fig
->
ICFûãr
);

3065 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_IC3PSC
;

3068 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
ICPªsˇÀr
;

3073 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

3075 
	`TIM_TI4_SëC⁄fig
(
htim
->
In°™˚
,

3076 
sC⁄fig
->
ICPﬁ¨ôy
,

3077 
sC⁄fig
->
ICSñe˘i⁄
,

3078 
sC⁄fig
->
ICFûãr
);

3081 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_IC4PSC
;

3084 
htim
->
In°™˚
->
CCMR2
 |(
sC⁄fig
->
ICPªsˇÀr
 << 8);

3087 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3089 
	`__HAL_UNLOCK
(
htim
);

3091  
HAL_OK
;

3092 
	}
}

3108 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

3110 
	`__HAL_LOCK
(
htim
);

3113 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

3114 
	`as£π_∑øm
(
	`IS_TIM_PWM_MODE
(
sC⁄fig
->
OCMode
));

3115 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
sC⁄fig
->
OCPﬁ¨ôy
));

3116 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
sC⁄fig
->
OCNPﬁ¨ôy
));

3117 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
sC⁄fig
->
OCNIdÀSèã
));

3118 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
sC⁄fig
->
OCIdÀSèã
));

3119 
	`as£π_∑øm
(
	`IS_TIM_FAST_STATE
(
sC⁄fig
->
OCFa°Mode
));

3121 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3123 
Ch™√l
)

3125 
TIM_CHANNEL_1
:

3127 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3129 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3132 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC1PE
;

3135 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC1FE
;

3136 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
OCFa°Mode
;

3140 
TIM_CHANNEL_2
:

3142 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3144 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3147 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC2PE
;

3150 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC2FE
;

3151 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
OCFa°Mode
 << 8;

3155 
TIM_CHANNEL_3
:

3157 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

3159 
	`TIM_OC3_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3162 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC3PE
;

3165 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC3FE
;

3166 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
OCFa°Mode
;

3170 
TIM_CHANNEL_4
:

3172 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

3174 
	`TIM_OC4_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3177 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC4PE
;

3180 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC4FE
;

3181 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
OCFa°Mode
 << 8;

3189 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3191 
	`__HAL_UNLOCK
(
htim
);

3193  
HAL_OK
;

3194 
	}
}

3212 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_O√Pul£_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
OuçutCh™√l
, uöt32_à
I≈utCh™√l
)

3214 
TIM_OC_InôTy≥Def
 
ãmp1
;

3217 
	`as£π_∑øm
(
	`IS_TIM_OPM_CHANNELS
(
OuçutCh™√l
));

3218 
	`as£π_∑øm
(
	`IS_TIM_OPM_CHANNELS
(
I≈utCh™√l
));

3220 if(
OuçutCh™√l
 !
I≈utCh™√l
)

3222 
	`__HAL_LOCK
(
htim
);

3224 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3227 
ãmp1
.
OCMode
 = 
sC⁄fig
->OCMode;

3228 
ãmp1
.
Pul£
 = 
sC⁄fig
->Pulse;

3229 
ãmp1
.
OCPﬁ¨ôy
 = 
sC⁄fig
->OCPolarity;

3230 
ãmp1
.
OCNPﬁ¨ôy
 = 
sC⁄fig
->OCNPolarity;

3231 
ãmp1
.
OCIdÀSèã
 = 
sC⁄fig
->OCIdleState;

3232 
ãmp1
.
OCNIdÀSèã
 = 
sC⁄fig
->OCNIdleState;

3234 
OuçutCh™√l
)

3236 
TIM_CHANNEL_1
:

3238 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3240 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, &
ãmp1
);

3243 
TIM_CHANNEL_2
:

3245 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3247 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, &
ãmp1
);

3253 
I≈utCh™√l
)

3255 
TIM_CHANNEL_1
:

3257 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3259 
	`TIM_TI1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
->
ICPﬁ¨ôy
,

3260 
sC⁄fig
->
ICSñe˘i⁄
, sC⁄fig->
ICFûãr
);

3263 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
;

3266 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

3267 
htim
->
In°™˚
->
SMCR
 |
TIM_TS_TI1FP1
;

3270 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

3271 
htim
->
In°™˚
->
SMCR
 |
TIM_SLAVEMODE_TRIGGER
;

3274 
TIM_CHANNEL_2
:

3276 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3278 
	`TIM_TI2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
->
ICPﬁ¨ôy
,

3279 
sC⁄fig
->
ICSñe˘i⁄
, sC⁄fig->
ICFûãr
);

3282 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC2PSC
;

3285 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

3286 
htim
->
In°™˚
->
SMCR
 |
TIM_TS_TI2FP2
;

3289 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

3290 
htim
->
In°™˚
->
SMCR
 |
TIM_SLAVEMODE_TRIGGER
;

3298 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3300 
	`__HAL_UNLOCK
(
htim
);

3302  
HAL_OK
;

3306  
HAL_ERROR
;

3308 
	}
}

3349 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_WrôeSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
, uöt32_à
Bur°Reque°Src
,

3350 
uöt32_t
* 
Bur°Buf„r
, uöt32_à
Bur°Lígth
)

3353 
	`as£π_∑øm
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In°™˚
));

3354 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
Bur°Ba£Addªss
));

3355 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

3356 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
Bur°Lígth
));

3358 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

3360  
HAL_BUSY
;

3362 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

3364 if((
Bur°Buf„r
 =0 ) && (
Bur°Lígth
 > 0))

3366  
HAL_ERROR
;

3370 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3373 
Bur°Reque°Src
)

3375 
TIM_DMA_UPDATE
:

3378 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

3381 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3384 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8) + 1);

3387 
TIM_DMA_CC1
:

3390 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

3393 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3396 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8) + 1);

3399 
TIM_DMA_CC2
:

3402 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

3405 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3408 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8) + 1);

3411 
TIM_DMA_CC3
:

3414 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

3417 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3420 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8) + 1);

3423 
TIM_DMA_CC4
:

3426 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

3429 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3432 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8) + 1);

3435 
TIM_DMA_COM
:

3438 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄C∂t
;

3441 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3444 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8) + 1);

3447 
TIM_DMA_TRIGGER
:

3450 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rC∂tCÆlback
 = 
TIM_DMATriggîC∂t
;

3453 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3456 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
], (
uöt32_t
)
Bur°Buf„r
, (uöt32_t)&htim->
In°™˚
->
DMAR
, ((
Bur°Lígth
) >> 8) + 1);

3463 
htim
->
In°™˚
->
DCR
 = 
Bur°Ba£Addªss
 | 
Bur°Lígth
;

3466 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
Bur°Reque°Src
);

3468 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3471  
HAL_OK
;

3472 
	}
}

3481 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_WrôeSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
)

3484 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

3487 
Bur°Reque°Src
)

3489 
TIM_DMA_UPDATE
:

3491 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

3494 
TIM_DMA_CC1
:

3496 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

3499 
TIM_DMA_CC2
:

3501 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

3504 
TIM_DMA_CC3
:

3506 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

3509 
TIM_DMA_CC4
:

3511 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

3514 
TIM_DMA_COM
:

3516 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]);

3519 
TIM_DMA_TRIGGER
:

3521 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]);

3529 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
Bur°Reque°Src
);

3532  
HAL_OK
;

3533 
	}
}

3574 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_RódSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
, uöt32_à
Bur°Reque°Src
,

3575 
uöt32_t
 *
Bur°Buf„r
, uöt32_à
Bur°Lígth
)

3578 
	`as£π_∑øm
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In°™˚
));

3579 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
Bur°Ba£Addªss
));

3580 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

3581 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
Bur°Lígth
));

3583 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

3585  
HAL_BUSY
;

3587 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

3589 if((
Bur°Buf„r
 =0 ) && (
Bur°Lígth
 > 0))

3591  
HAL_ERROR
;

3595 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3598 
Bur°Reque°Src
)

3600 
TIM_DMA_UPDATE
:

3603 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

3606 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3609 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8) + 1);

3612 
TIM_DMA_CC1
:

3615 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3618 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3621 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8) + 1);

3624 
TIM_DMA_CC2
:

3627 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3630 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3633 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8) + 1);

3636 
TIM_DMA_CC3
:

3639 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3642 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3645 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8) + 1);

3648 
TIM_DMA_CC4
:

3651 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3654 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3657 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8) + 1);

3660 
TIM_DMA_COM
:

3663 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄C∂t
;

3666 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3669 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8) + 1);

3672 
TIM_DMA_TRIGGER
:

3675 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rC∂tCÆlback
 = 
TIM_DMATriggîC∂t
;

3678 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3681 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
, ((
Bur°Lígth
) >> 8) + 1);

3689 
htim
->
In°™˚
->
DCR
 = 
Bur°Ba£Addªss
 | 
Bur°Lígth
;

3692 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
Bur°Reque°Src
);

3694 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3697  
HAL_OK
;

3698 
	}
}

3707 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_RódSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
)

3710 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

3713 
Bur°Reque°Src
)

3715 
TIM_DMA_UPDATE
:

3717 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

3720 
TIM_DMA_CC1
:

3722 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

3725 
TIM_DMA_CC2
:

3727 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

3730 
TIM_DMA_CC3
:

3732 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

3735 
TIM_DMA_CC4
:

3737 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

3740 
TIM_DMA_COM
:

3742 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]);

3745 
TIM_DMA_TRIGGER
:

3747 
	`HAL_DMA_Ab‹t
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]);

3755 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
Bur°Reque°Src
);

3758  
HAL_OK
;

3759 
	}
}

3780 
HAL_SètusTy≥Def
 
	$HAL_TIM_Gíî©eEvít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
EvítSour˚
)

3783 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

3784 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
EvítSour˚
));

3787 
	`__HAL_LOCK
(
htim
);

3790 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3793 
htim
->
In°™˚
->
EGR
 = 
EvítSour˚
;

3796 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3798 
	`__HAL_UNLOCK
(
htim
);

3801  
HAL_OK
;

3802 
	}
}

3818 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figOCªfCÀ¨
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_CÀ¨I≈utC⁄figTy≥Def
 * 
sCÀ¨I≈utC⁄fig
, 
uöt32_t
 
Ch™√l
)

3821 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3822 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

3823 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_SOURCE
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSour˚
));

3824 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_POLARITY
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPﬁ¨ôy
));

3825 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_PRESCALER
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPªsˇÀr
));

3826 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_FILTER
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utFûãr
));

3829 
	`__HAL_LOCK
(
htim
);

3831 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3833 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSour˚
 =
TIM_CLEARINPUTSOURCE_ETR
)

3835 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

3836 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPªsˇÀr
,

3837 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPﬁ¨ôy
,

3838 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utFûãr
);

3841 
Ch™√l
)

3843 
TIM_CHANNEL_1
:

3845 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !
RESET
)

3848 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC1CE
;

3853 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC1CE
;

3857 
TIM_CHANNEL_2
:

3859 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3860 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !
RESET
)

3863 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC2CE
;

3868 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC2CE
;

3872 
TIM_CHANNEL_3
:

3874 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

3875 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !
RESET
)

3878 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC3CE
;

3883 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC3CE
;

3887 
TIM_CHANNEL_4
:

3889 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

3890 if(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !
RESET
)

3893 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC4CE
;

3898 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC4CE
;

3906 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3908 
	`__HAL_UNLOCK
(
htim
);

3910  
HAL_OK
;

3911 
	}
}

3921 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figClockSour˚
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_ClockC⁄figTy≥Def
 * 
sClockSour˚C⁄fig
)

3923 
uöt32_t
 
tmpsm¸
 = 0;

3926 
	`__HAL_LOCK
(
htim
);

3928 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3931 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE
(
sClockSour˚C⁄fig
->
ClockSour˚
));

3932 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

3933 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPRESCALER
(
sClockSour˚C⁄fig
->
ClockPªsˇÀr
));

3934 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

3937 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

3938 
tmpsm¸
 &~(
TIM_SMCR_SMS
 | 
TIM_SMCR_TS
);

3939 
tmpsm¸
 &~(
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
);

3940 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

3942 
sClockSour˚C⁄fig
->
ClockSour˚
)

3944 
TIM_CLOCKSOURCE_INTERNAL
:

3946 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

3948 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

3952 
TIM_CLOCKSOURCE_ETRMODE1
:

3954 
	`as£π_∑øm
(
	`IS_TIM_ETR_INSTANCE
(
htim
->
In°™˚
));

3956 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

3957 
sClockSour˚C⁄fig
->
ClockPªsˇÀr
,

3958 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3959 
sClockSour˚C⁄fig
->
ClockFûãr
);

3961 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

3963 
tmpsm¸
 &~(
TIM_SMCR_SMS
 | 
TIM_SMCR_TS
);

3965 
tmpsm¸
 |(
TIM_SLAVEMODE_EXTERNAL1
 | 
TIM_CLOCKSOURCE_ETRMODE1
);

3967 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

3971 
TIM_CLOCKSOURCE_ETRMODE2
:

3973 
	`as£π_∑øm
(
	`IS_TIM_ETR_INSTANCE
(
htim
->
In°™˚
));

3975 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

3976 
sClockSour˚C⁄fig
->
ClockPªsˇÀr
,

3977 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3978 
sClockSour˚C⁄fig
->
ClockFûãr
);

3980 
htim
->
In°™˚
->
SMCR
 |
TIM_SMCR_ECE
;

3984 
TIM_CLOCKSOURCE_TI1
:

3986 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3987 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

3988 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3989 
sClockSour˚C⁄fig
->
ClockFûãr
);

3990 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI1
);

3993 
TIM_CLOCKSOURCE_TI2
:

3995 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3996 
	`TIM_TI2_C⁄figI≈utSège
(
htim
->
In°™˚
,

3997 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

3998 
sClockSour˚C⁄fig
->
ClockFûãr
);

3999 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI2
);

4002 
TIM_CLOCKSOURCE_TI1ED
:

4004 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4005 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

4006 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

4007 
sClockSour˚C⁄fig
->
ClockFûãr
);

4008 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI1ED
);

4011 
TIM_CLOCKSOURCE_ITR0
:

4013 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4014 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_ITR0
);

4017 
TIM_CLOCKSOURCE_ITR1
:

4019 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4020 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_ITR1
);

4023 
TIM_CLOCKSOURCE_ITR2
:

4025 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4026 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_ITR2
);

4029 
TIM_CLOCKSOURCE_ITR3
:

4031 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4032 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_ITR3
);

4039 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

4041 
	`__HAL_UNLOCK
(
htim
);

4043  
HAL_OK
;

4044 
	}
}

4059 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figTI1I≈ut
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
TI1_Sñe˘i⁄
)

4061 
uöt32_t
 
tmp¸2
 = 0;

4064 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

4065 
	`as£π_∑øm
(
	`IS_TIM_TI1SELECTION
(
TI1_Sñe˘i⁄
));

4068 
tmp¸2
 = 
htim
->
In°™˚
->
CR2
;

4071 
tmp¸2
 &~
TIM_CR2_TI1S
;

4074 
tmp¸2
 |
TI1_Sñe˘i⁄
;

4077 
htim
->
In°™˚
->
CR2
 = 
tmp¸2
;

4079  
HAL_OK
;

4080 
	}
}

4092 
HAL_SètusTy≥Def
 
	$HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
)

4095 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
));

4096 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
sSœveC⁄fig
->
SœveMode
));

4097 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
sSœveC⁄fig
->
I≈utTriggî
));

4099 
	`__HAL_LOCK
(
htim
);

4101 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

4103 
	`TIM_SœveTimî_SëC⁄fig
(
htim
, 
sSœveC⁄fig
);

4106 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_TRIGGER
);

4109 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_TRIGGER
);

4111 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

4113 
	`__HAL_UNLOCK
(
htim
);

4115  
HAL_OK
;

4116 
	}
}

4127 
HAL_SètusTy≥Def
 
	$HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄_IT
(
TIM_H™dÀTy≥Def
 *
htim
,

4128 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
)

4131 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
));

4132 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
sSœveC⁄fig
->
SœveMode
));

4133 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
sSœveC⁄fig
->
I≈utTriggî
));

4135 
	`__HAL_LOCK
(
htim
);

4137 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

4139 
	`TIM_SœveTimî_SëC⁄fig
(
htim
, 
sSœveC⁄fig
);

4142 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_TRIGGER
);

4145 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_TRIGGER
);

4147 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

4149 
	`__HAL_UNLOCK
(
htim
);

4151  
HAL_OK
;

4152 
	}
}

4166 
uöt32_t
 
	$HAL_TIM_RódC≠tuªdVÆue
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

4168 
uöt32_t
 
tm¥eg
 = 0;

4170 
	`__HAL_LOCK
(
htim
);

4172 
Ch™√l
)

4174 
TIM_CHANNEL_1
:

4177 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4180 
tm¥eg
 = 
htim
->
In°™˚
->
CCR1
;

4184 
TIM_CHANNEL_2
:

4187 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4190 
tm¥eg
 = 
htim
->
In°™˚
->
CCR2
;

4195 
TIM_CHANNEL_3
:

4198 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

4201 
tm¥eg
 = 
htim
->
In°™˚
->
CCR3
;

4206 
TIM_CHANNEL_4
:

4209 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

4212 
tm¥eg
 = 
htim
->
In°™˚
->
CCR4
;

4221 
	`__HAL_UNLOCK
(
htim
);

4222  
tm¥eg
;

4223 
	}
}

4253 
__wók
 
	$HAL_TIM_PîiodEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4259 
	}
}

4266 
__wók
 
	$HAL_TIM_OC_DñayEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4271 
	}
}

4278 
__wók
 
	$HAL_TIM_IC_C≠tuªCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4283 
	}
}

4291 
__wók
 
	$HAL_TIM_PWM_Pul£FöishedCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4296 
	}
}

4304 
__wók
 
	$HAL_TIM_TriggîCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4309 
	}
}

4317 
__wók
 
	$HAL_TIM_Eº‹CÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

4322 
	}
}

4348 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_Ba£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4350  
htim
->
Sèã
;

4351 
	}
}

4359 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_OC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4361  
htim
->
Sèã
;

4362 
	}
}

4370 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_PWM_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4372  
htim
->
Sèã
;

4373 
	}
}

4381 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_IC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4383  
htim
->
Sèã
;

4384 
	}
}

4392 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_O√Pul£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4394  
htim
->
Sèã
;

4395 
	}
}

4403 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_Encodî_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

4405  
htim
->
Sèã
;

4406 
	}
}

4417 
	$TIM_Ba£_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_Ba£_InôTy≥Def
 *
Såu˘uª
)

4419 
uöt32_t
 
tmp¸1
 = 0;

4420 
tmp¸1
 = 
TIMx
->
CR1
;

4423 if(
	`IS_TIM_CC3_INSTANCE
(
TIMx
Ë!
RESET
)

4426 
tmp¸1
 &~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

4427 
tmp¸1
 |
Såu˘uª
->
Cou¡îMode
;

4430 if(
	`IS_TIM_CC1_INSTANCE
(
TIMx
Ë!
RESET
)

4433 
tmp¸1
 &~
TIM_CR1_CKD
;

4434 
tmp¸1
 |(
uöt32_t
)
Såu˘uª
->
ClockDivisi⁄
;

4437 
TIMx
->
CR1
 = 
tmp¸1
;

4440 
TIMx
->
ARR
 = (
uöt32_t
)
Såu˘uª
->
Pîiod
 ;

4443 
TIMx
->
PSC
 = (
uöt32_t
)
Såu˘uª
->
PªsˇÀr
;

4445 if(
	`IS_TIM_ADVANCED_INSTANCE
(
TIMx
Ë!
RESET
)

4448 
TIMx
->
RCR
 = 
Såu˘uª
->
Rïëôi⁄Cou¡î
;

4453 
TIMx
->
EGR
 = 
TIM_EGR_UG
;

4454 
	}
}

4476 
	$TIM_TI1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

4477 
uöt32_t
 
TIM_ICFûãr
)

4479 
uöt32_t
 
tmpccmr1
 = 0;

4480 
uöt32_t
 
tmpc˚r
 = 0;

4483 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

4484 
tmpccmr1
 = 
TIMx
->
CCMR1
;

4485 
tmpc˚r
 = 
TIMx
->
CCER
;

4488 if(
	`IS_TIM_CC2_INSTANCE
(
TIMx
Ë!
RESET
)

4490 
tmpccmr1
 &~
TIM_CCMR1_CC1S
;

4491 
tmpccmr1
 |
TIM_ICSñe˘i⁄
;

4495 
tmpccmr1
 &~
TIM_CCMR1_CC1S
;

4496 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
;

4500 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

4501 
tmpccmr1
 |((
TIM_ICFûãr
 << 4Ë& 
TIM_CCMR1_IC1F
);

4504 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

4505 
tmpc˚r
 |(
TIM_ICPﬁ¨ôy
 & (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

4508 
TIMx
->
CCMR1
 = 
tmpccmr1
;

4509 
TIMx
->
CCER
 = 
tmpc˚r
;

4510 
	}
}

4518 
	$TIM_OC2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

4520 
uöt32_t
 
tmpccmrx
 = 0;

4521 
uöt32_t
 
tmpc˚r
 = 0;

4522 
uöt32_t
 
tmp¸2
 = 0;

4525 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

4528 
tmpc˚r
 = 
TIMx
->
CCER
;

4530 
tmp¸2
 = 
TIMx
->
CR2
;

4533 
tmpccmrx
 = 
TIMx
->
CCMR1
;

4536 
tmpccmrx
 &~
TIM_CCMR1_OC2M
;

4537 
tmpccmrx
 &~
TIM_CCMR1_CC2S
;

4540 
tmpccmrx
 |(
OC_C⁄fig
->
OCMode
 << 8);

4543 
tmpc˚r
 &~
TIM_CCER_CC2P
;

4545 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 4);

4547 if(
	`IS_TIM_ADVANCED_INSTANCE
(
TIMx
Ë!
RESET
)

4549 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
OC_C⁄fig
->
OCNPﬁ¨ôy
));

4550 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
OC_C⁄fig
->
OCNIdÀSèã
));

4551 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
OC_C⁄fig
->
OCIdÀSèã
));

4554 
tmpc˚r
 &~
TIM_CCER_CC2NP
;

4556 
tmpc˚r
 |(
OC_C⁄fig
->
OCNPﬁ¨ôy
 << 4);

4558 
tmpc˚r
 &~
TIM_CCER_CC2NE
;

4561 
tmp¸2
 &~
TIM_CR2_OIS2
;

4562 
tmp¸2
 &~
TIM_CR2_OIS2N
;

4564 
tmp¸2
 |(
OC_C⁄fig
->
OCIdÀSèã
 << 2);

4566 
tmp¸2
 |(
OC_C⁄fig
->
OCNIdÀSèã
 << 2);

4569 
TIMx
->
CR2
 = 
tmp¸2
;

4572 
TIMx
->
CCMR1
 = 
tmpccmrx
;

4575 
TIMx
->
CCR2
 = 
OC_C⁄fig
->
Pul£
;

4578 
TIMx
->
CCER
 = 
tmpc˚r
;

4579 
	}
}

4587 
	$TIM_DMADñayPul£C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4589 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4591 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4593 if(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

4595 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

4597 if(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

4599 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

4601 if(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

4603 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

4605 if(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

4607 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

4610 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

4612 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

4613 
	}
}

4621 
	$TIM_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

4623 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4625 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4627 
	`HAL_TIM_Eº‹CÆlback
(
htim
);

4628 
	}
}

4636 
	$TIM_DMAC≠tuªC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4638 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4640 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4642 if(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

4644 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

4646 if(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

4648 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

4650 if(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

4652 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

4654 if(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

4656 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

4659 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

4661 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

4662 
	}
}

4677 
	$TIM_CCxCh™√lCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lSèã
)

4679 
uöt32_t
 
tmp
 = 0;

4682 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
TIMx
));

4683 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

4685 
tmp
 = 
TIM_CCER_CC1E
 << 
Ch™√l
;

4688 
TIMx
->
CCER
 &~
tmp
;

4691 
TIMx
->
CCER
 |(
uöt32_t
)(
Ch™√lSèã
 << 
Ch™√l
);

4692 
	}
}

4700 
	$TIM_DMAPîiodEœp£dC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4702 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4704 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4706 
	`HAL_TIM_PîiodEœp£dCÆlback
(
htim
);

4707 
	}
}

4715 
	$TIM_DMATriggîC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

4717 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

4719 
htim
->
Sèã

HAL_TIM_STATE_READY
;

4721 
	`HAL_TIM_TriggîCÆlback
(
htim
);

4722 
	}
}

4730 
	$TIM_OC1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

4732 
uöt32_t
 
tmpccmrx
 = 0;

4733 
uöt32_t
 
tmpc˚r
 = 0;

4734 
uöt32_t
 
tmp¸2
 = 0;

4737 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

4740 
tmpc˚r
 = 
TIMx
->
CCER
;

4742 
tmp¸2
 = 
TIMx
->
CR2
;

4745 
tmpccmrx
 = 
TIMx
->
CCMR1
;

4748 
tmpccmrx
 &~
TIM_CCMR1_OC1M
;

4749 
tmpccmrx
 &~
TIM_CCMR1_CC1S
;

4751 
tmpccmrx
 |
OC_C⁄fig
->
OCMode
;

4754 
tmpc˚r
 &~
TIM_CCER_CC1P
;

4756 
tmpc˚r
 |
OC_C⁄fig
->
OCPﬁ¨ôy
;

4759 if(
	`IS_TIM_ADVANCED_INSTANCE
(
TIMx
Ë!
RESET
)

4762 
tmpc˚r
 &~
TIM_CCER_CC1NP
;

4764 
tmpc˚r
 |
OC_C⁄fig
->
OCNPﬁ¨ôy
;

4766 
tmpc˚r
 &~
TIM_CCER_CC1NE
;

4769 
tmp¸2
 &~
TIM_CR2_OIS1
;

4770 
tmp¸2
 &~
TIM_CR2_OIS1N
;

4772 
tmp¸2
 |
OC_C⁄fig
->
OCIdÀSèã
;

4774 
tmp¸2
 |
OC_C⁄fig
->
OCNIdÀSèã
;

4777 
TIMx
->
CR2
 = 
tmp¸2
;

4780 
TIMx
->
CCMR1
 = 
tmpccmrx
;

4783 
TIMx
->
CCR1
 = 
OC_C⁄fig
->
Pul£
;

4786 
TIMx
->
CCER
 = 
tmpc˚r
;

4787 
	}
}

4795 
	$TIM_OC3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

4797 
uöt32_t
 
tmpccmrx
 = 0;

4798 
uöt32_t
 
tmpc˚r
 = 0;

4799 
uöt32_t
 
tmp¸2
 = 0;

4802 
TIMx
->
CCER
 &~
TIM_CCER_CC3E
;

4805 
tmpc˚r
 = 
TIMx
->
CCER
;

4807 
tmp¸2
 = 
TIMx
->
CR2
;

4810 
tmpccmrx
 = 
TIMx
->
CCMR2
;

4813 
tmpccmrx
 &~
TIM_CCMR2_OC3M
;

4814 
tmpccmrx
 &~
TIM_CCMR2_CC3S
;

4816 
tmpccmrx
 |
OC_C⁄fig
->
OCMode
;

4819 
tmpc˚r
 &~
TIM_CCER_CC3P
;

4821 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 8);

4823 if(
	`IS_TIM_ADVANCED_INSTANCE
(
TIMx
Ë!
RESET
)

4825 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
OC_C⁄fig
->
OCNPﬁ¨ôy
));

4826 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
OC_C⁄fig
->
OCNIdÀSèã
));

4827 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
OC_C⁄fig
->
OCIdÀSèã
));

4830 
tmpc˚r
 &~
TIM_CCER_CC3NP
;

4832 
tmpc˚r
 |(
OC_C⁄fig
->
OCNPﬁ¨ôy
 << 8);

4834 
tmpc˚r
 &~
TIM_CCER_CC3NE
;

4837 
tmp¸2
 &~
TIM_CR2_OIS3
;

4838 
tmp¸2
 &~
TIM_CR2_OIS3N
;

4840 
tmp¸2
 |(
OC_C⁄fig
->
OCIdÀSèã
 << 4);

4842 
tmp¸2
 |(
OC_C⁄fig
->
OCNIdÀSèã
 << 4);

4845 
TIMx
->
CR2
 = 
tmp¸2
;

4848 
TIMx
->
CCMR2
 = 
tmpccmrx
;

4851 
TIMx
->
CCR3
 = 
OC_C⁄fig
->
Pul£
;

4854 
TIMx
->
CCER
 = 
tmpc˚r
;

4855 
	}
}

4863 
	$TIM_OC4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

4865 
uöt32_t
 
tmpccmrx
 = 0;

4866 
uöt32_t
 
tmpc˚r
 = 0;

4867 
uöt32_t
 
tmp¸2
 = 0;

4870 
TIMx
->
CCER
 &~
TIM_CCER_CC4E
;

4873 
tmpc˚r
 = 
TIMx
->
CCER
;

4875 
tmp¸2
 = 
TIMx
->
CR2
;

4878 
tmpccmrx
 = 
TIMx
->
CCMR2
;

4881 
tmpccmrx
 &~
TIM_CCMR2_OC4M
;

4882 
tmpccmrx
 &~
TIM_CCMR2_CC4S
;

4885 
tmpccmrx
 |(
OC_C⁄fig
->
OCMode
 << 8);

4888 
tmpc˚r
 &~
TIM_CCER_CC4P
;

4890 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 12);

4893 if(
	`IS_TIM_ADVANCED_INSTANCE
(
TIMx
Ë!
RESET
)

4895 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
OC_C⁄fig
->
OCIdÀSèã
));

4897 
tmp¸2
 &~
TIM_CR2_OIS4
;

4899 
tmp¸2
 |(
OC_C⁄fig
->
OCIdÀSèã
 << 6);

4902 
TIMx
->
CR2
 = 
tmp¸2
;

4905 
TIMx
->
CCMR2
 = 
tmpccmrx
;

4908 
TIMx
->
CCR4
 = 
OC_C⁄fig
->
Pul£
;

4911 
TIMx
->
CCER
 = 
tmpc˚r
;

4912 
	}
}

4921 
	$TIM_SœveTimî_SëC⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
,

4922 
TIM_SœveC⁄figTy≥Def
 * 
sSœveC⁄fig
)

4924 
uöt32_t
 
tmpsm¸
 = 0;

4925 
uöt32_t
 
tmpccmr1
 = 0;

4926 
uöt32_t
 
tmpc˚r
 = 0;

4929 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

4932 
tmpsm¸
 &~
TIM_SMCR_TS
;

4934 
tmpsm¸
 |
sSœveC⁄fig
->
I≈utTriggî
;

4937 
tmpsm¸
 &~
TIM_SMCR_SMS
;

4939 
tmpsm¸
 |
sSœveC⁄fig
->
SœveMode
;

4942 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

4945 
sSœveC⁄fig
->
I≈utTriggî
)

4947 
TIM_TS_ETRF
:

4950 
	`as£π_∑øm
(
	`IS_TIM_ETR_INSTANCE
(
htim
->
In°™˚
));

4951 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPRESCALER
(
sSœveC⁄fig
->
TriggîPªsˇÀr
));

4952 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

4953 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

4955 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

4956 
sSœveC⁄fig
->
TriggîPªsˇÀr
,

4957 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

4958 
sSœveC⁄fig
->
TriggîFûãr
);

4962 
TIM_TS_TI1F_ED
:

4965 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4966 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

4969 
tmpc˚r
 = 
htim
->
In°™˚
->
CCER
;

4970 
htim
->
In°™˚
->
CCER
 &~
TIM_CCER_CC1E
;

4971 
tmpccmr1
 = 
htim
->
In°™˚
->
CCMR1
;

4974 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

4975 
tmpccmr1
 |((
sSœveC⁄fig
->
TriggîFûãr
) << 4);

4978 
htim
->
In°™˚
->
CCMR1
 = 
tmpccmr1
;

4979 
htim
->
In°™˚
->
CCER
 = 
tmpc˚r
;

4984 
TIM_TS_TI1FP1
:

4987 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4988 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

4989 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

4992 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

4993 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

4994 
sSœveC⁄fig
->
TriggîFûãr
);

4998 
TIM_TS_TI2FP2
:

5001 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5002 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

5003 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

5006 
	`TIM_TI2_C⁄figI≈utSège
(
htim
->
In°™˚
,

5007 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

5008 
sSœveC⁄fig
->
TriggîFûãr
);

5012 
TIM_TS_ITR0
:

5015 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5019 
TIM_TS_ITR1
:

5022 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5026 
TIM_TS_ITR2
:

5029 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5033 
TIM_TS_ITR3
:

5036 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5043 
	}
}

5058 
	$TIM_TI1_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
)

5060 
uöt32_t
 
tmpccmr1
 = 0;

5061 
uöt32_t
 
tmpc˚r
 = 0;

5064 
tmpc˚r
 = 
TIMx
->
CCER
;

5065 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

5066 
tmpccmr1
 = 
TIMx
->
CCMR1
;

5069 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

5070 
tmpccmr1
 |(
TIM_ICFûãr
 << 4);

5073 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

5074 
tmpc˚r
 |
TIM_ICPﬁ¨ôy
;

5077 
TIMx
->
CCMR1
 = 
tmpccmr1
;

5078 
TIMx
->
CCER
 = 
tmpc˚r
;

5079 
	}
}

5101 
	$TIM_TI2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

5102 
uöt32_t
 
TIM_ICFûãr
)

5104 
uöt32_t
 
tmpccmr1
 = 0;

5105 
uöt32_t
 
tmpc˚r
 = 0;

5108 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

5109 
tmpccmr1
 = 
TIMx
->
CCMR1
;

5110 
tmpc˚r
 = 
TIMx
->
CCER
;

5113 
tmpccmr1
 &~
TIM_CCMR1_CC2S
;

5114 
tmpccmr1
 |(
TIM_ICSñe˘i⁄
 << 8);

5117 
tmpccmr1
 &~
TIM_CCMR1_IC2F
;

5118 
tmpccmr1
 |((
TIM_ICFûãr
 << 12Ë& 
TIM_CCMR1_IC2F
);

5121 
tmpc˚r
 &~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

5122 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 4Ë& (
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

5125 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

5126 
TIMx
->
CCER
 = 
tmpc˚r
;

5127 
	}
}

5141 
	$TIM_TI2_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
)

5143 
uöt32_t
 
tmpccmr1
 = 0;

5144 
uöt32_t
 
tmpc˚r
 = 0;

5147 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

5148 
tmpccmr1
 = 
TIMx
->
CCMR1
;

5149 
tmpc˚r
 = 
TIMx
->
CCER
;

5152 
tmpccmr1
 &~
TIM_CCMR1_IC2F
;

5153 
tmpccmr1
 |(
TIM_ICFûãr
 << 12);

5156 
tmpc˚r
 &~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

5157 
tmpc˚r
 |(
TIM_ICPﬁ¨ôy
 << 4);

5160 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

5161 
TIMx
->
CCER
 = 
tmpc˚r
;

5162 
	}
}

5184 
	$TIM_TI3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

5185 
uöt32_t
 
TIM_ICFûãr
)

5187 
uöt32_t
 
tmpccmr2
 = 0;

5188 
uöt32_t
 
tmpc˚r
 = 0;

5191 
TIMx
->
CCER
 &~
TIM_CCER_CC3E
;

5192 
tmpccmr2
 = 
TIMx
->
CCMR2
;

5193 
tmpc˚r
 = 
TIMx
->
CCER
;

5196 
tmpccmr2
 &~
TIM_CCMR2_CC3S
;

5197 
tmpccmr2
 |
TIM_ICSñe˘i⁄
;

5200 
tmpccmr2
 &~
TIM_CCMR2_IC3F
;

5201 
tmpccmr2
 |((
TIM_ICFûãr
 << 4Ë& 
TIM_CCMR2_IC3F
);

5204 
tmpc˚r
 &~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

5205 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 8Ë& (
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
));

5208 
TIMx
->
CCMR2
 = 
tmpccmr2
;

5209 
TIMx
->
CCER
 = 
tmpc˚r
;

5210 
	}
}

5232 
	$TIM_TI4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

5233 
uöt32_t
 
TIM_ICFûãr
)

5235 
uöt32_t
 
tmpccmr2
 = 0;

5236 
uöt32_t
 
tmpc˚r
 = 0;

5239 
TIMx
->
CCER
 &~
TIM_CCER_CC4E
;

5240 
tmpccmr2
 = 
TIMx
->
CCMR2
;

5241 
tmpc˚r
 = 
TIMx
->
CCER
;

5244 
tmpccmr2
 &~
TIM_CCMR2_CC4S
;

5245 
tmpccmr2
 |(
TIM_ICSñe˘i⁄
 << 8);

5248 
tmpccmr2
 &~
TIM_CCMR2_IC4F
;

5249 
tmpccmr2
 |((
TIM_ICFûãr
 << 12Ë& 
TIM_CCMR2_IC4F
);

5252 
tmpc˚r
 &~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

5253 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 12Ë& (
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
));

5256 
TIMx
->
CCMR2
 = 
tmpccmr2
;

5257 
TIMx
->
CCER
 = 
tmpc˚r
 ;

5258 
	}
}

5275 
	$TIM_ITRx_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt16_t
 
TIM_ITRx
)

5277 
uöt32_t
 
tmpsm¸
 = 0;

5280 
tmpsm¸
 = 
TIMx
->
SMCR
;

5282 
tmpsm¸
 &~
TIM_SMCR_TS
;

5284 
tmpsm¸
 |
TIM_ITRx
 | 
TIM_SLAVEMODE_EXTERNAL1
;

5286 
TIMx
->
SMCR
 = 
tmpsm¸
;

5287 
	}
}

5306 
	$TIM_ETR_SëC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_ExtTRGPªsˇÀr
,

5307 
uöt32_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt32_à
ExtTRGFûãr
)

5309 
uöt32_t
 
tmpsm¸
 = 0;

5311 
tmpsm¸
 = 
TIMx
->
SMCR
;

5314 
tmpsm¸
 &~(
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
);

5317 
tmpsm¸
 |(
uöt32_t
)(
TIM_ExtTRGPªsˇÀr
 | (
TIM_ExtTRGPﬁ¨ôy
 | (
ExtTRGFûãr
 << 8)));

5320 
TIMx
->
SMCR
 = 
tmpsm¸
;

5321 
	}
}

5324 
	$HAL_TIM_PWM_Ch™gePul£Weôh
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
* 
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

5326 
Ch™√l
)

5328 
TIM_CHANNEL_1
:

5329 
htim
->
In°™˚
->
CCR1
 = 
sC⁄fig
->
Pul£
;

5331 
TIM_CHANNEL_2
:

5332 
htim
->
In°™˚
->
CCR2
 = 
sC⁄fig
->
Pul£
;

5334 
TIM_CHANNEL_3
:

5335 
htim
->
In°™˚
->
CCR3
 = 
sC⁄fig
->
Pul£
;

5337 
TIM_CHANNEL_4
:

5338 
htim
->
In°™˚
->
CCR4
 = 
sC⁄fig
->
Pul£
;

5341 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_tim_ex.c

100 
	~"°m32f4xx_hÆ.h
"

111 #ifde‡
HAL_TIM_MODULE_ENABLED


121 
TIM_CCxNCh™√lCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lNSèã
);

159 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_HÆlSís‹_InôTy≥Def
* 
sC⁄fig
)

161 
TIM_OC_InôTy≥Def
 
OC_C⁄fig
;

164 if(
htim
 =
NULL
)

166  
HAL_ERROR
;

169 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

170 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

171 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

172 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
IC1Pﬁ¨ôy
));

173 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
IC1PªsˇÀr
));

174 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
IC1Fûãr
));

177 
htim
->
Sèã

HAL_TIM_STATE_BUSY
;

180 
	`HAL_TIMEx_HÆlSís‹_M•Inô
(
htim
);

183 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

186 
	`TIM_TI1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
->
IC1Pﬁ¨ôy
, 
TIM_ICSELECTION_TRC
, sC⁄fig->
IC1Fûãr
);

189 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
;

191 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
IC1PªsˇÀr
;

194 
htim
->
In°™˚
->
CR2
 |
TIM_CR2_TI1S
;

197 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

198 
htim
->
In°™˚
->
SMCR
 |
TIM_TS_TI1F_ED
;

201 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

202 
htim
->
In°™˚
->
SMCR
 |
TIM_SLAVEMODE_RESET
;

205 
OC_C⁄fig
.
OCFa°Mode
 = 
TIM_OCFAST_DISABLE
;

206 
OC_C⁄fig
.
OCIdÀSèã
 = 
TIM_OCIDLESTATE_RESET
;

207 
OC_C⁄fig
.
OCMode
 = 
TIM_OCMODE_PWM2
;

208 
OC_C⁄fig
.
OCNIdÀSèã
 = 
TIM_OCNIDLESTATE_RESET
;

209 
OC_C⁄fig
.
OCNPﬁ¨ôy
 = 
TIM_OCNPOLARITY_HIGH
;

210 
OC_C⁄fig
.
OCPﬁ¨ôy
 = 
TIM_OCPOLARITY_HIGH
;

211 
OC_C⁄fig
.
Pul£
 = 
sC⁄fig
->
Commuèti⁄_Dñay
;

213 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, &
OC_C⁄fig
);

217 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_MMS
;

218 
htim
->
In°™˚
->
CR2
 |
TIM_TRGO_OC2REF
;

221 
htim
->
Sèã

HAL_TIM_STATE_READY
;

223  
HAL_OK
;

224 
	}
}

232 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

235 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

237 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

240 
	`__HAL_TIM_DISABLE
(
htim
);

243 
	`HAL_TIMEx_HÆlSís‹_M•DeInô
(
htim
);

246 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

249 
	`__HAL_UNLOCK
(
htim
);

251  
HAL_OK
;

252 
	}
}

260 
__wók
 
	$HAL_TIMEx_HÆlSís‹_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

265 
	}
}

273 
__wók
 
	$HAL_TIMEx_HÆlSís‹_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

278 
	}
}

286 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
)

289 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

293 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

296 
	`__HAL_TIM_ENABLE
(
htim
);

299  
HAL_OK
;

300 
	}
}

308 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_St›
(
TIM_H™dÀTy≥Def
 *
htim
)

311 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

315 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

318 
	`__HAL_TIM_DISABLE
(
htim
);

321  
HAL_OK
;

322 
	}
}

330 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

333 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

336 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

340 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

343 
	`__HAL_TIM_ENABLE
(
htim
);

346  
HAL_OK
;

347 
	}
}

355 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

358 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

362 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

365 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

368 
	`__HAL_TIM_DISABLE
(
htim
);

371  
HAL_OK
;

372 
	}
}

382 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
)

385 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

387 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

389  
HAL_BUSY
;

391 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

393 if(((
uöt32_t
)
pD©a
 =0 ) && (
Lígth
 > 0))

395  
HAL_ERROR
;

399 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

404 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

407 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

409 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

412 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a
, 
Lígth
);

415 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

418 
	`__HAL_TIM_ENABLE
(
htim
);

421  
HAL_OK
;

422 
	}
}

430 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
)

433 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

437 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

441 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

444 
	`__HAL_TIM_DISABLE
(
htim
);

447  
HAL_OK
;

448 
	}
}

486 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

489 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

492 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

495 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

498 
	`__HAL_TIM_ENABLE
(
htim
);

501  
HAL_OK
;

502 
	}
}

517 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

520 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

523 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

526 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

529 
	`__HAL_TIM_DISABLE
(
htim
);

532  
HAL_OK
;

533 
	}
}

548 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

551 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

553 
Ch™√l
)

555 
TIM_CHANNEL_1
:

558 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

562 
TIM_CHANNEL_2
:

565 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

569 
TIM_CHANNEL_3
:

572 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

576 
TIM_CHANNEL_4
:

579 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

588 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_BREAK
);

591 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

594 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

597 
	`__HAL_TIM_ENABLE
(
htim
);

600  
HAL_OK
;

601 
	}
}

616 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

619 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

621 
Ch™√l
)

623 
TIM_CHANNEL_1
:

626 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

630 
TIM_CHANNEL_2
:

633 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

637 
TIM_CHANNEL_3
:

640 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

644 
TIM_CHANNEL_4
:

647 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

656 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

659 if((
	`READ_REG
(
htim
->
In°™˚
->
CCER
Ë& (
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
)Ë=
RESET
)

661 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_BREAK
);

665 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

668 
	`__HAL_TIM_DISABLE
(
htim
);

671  
HAL_OK
;

672 
	}
}

689 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

692 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

694 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

696  
HAL_BUSY
;

698 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

700 if(((
uöt32_t
)
pD©a
 =0 ) && (
Lígth
 > 0))

702  
HAL_ERROR
;

706 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

709 
Ch™√l
)

711 
TIM_CHANNEL_1
:

714 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

717 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

720 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
);

723 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

727 
TIM_CHANNEL_2
:

730 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

733 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

736 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
);

739 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

743 
TIM_CHANNEL_3
:

746 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

749 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

752 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
,
Lígth
);

755 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

759 
TIM_CHANNEL_4
:

762 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

765 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

768 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR4
, 
Lígth
);

771 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

780 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

783 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

786 
	`__HAL_TIM_ENABLE
(
htim
);

789  
HAL_OK
;

790 
	}
}

805 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

808 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

810 
Ch™√l
)

812 
TIM_CHANNEL_1
:

815 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

819 
TIM_CHANNEL_2
:

822 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

826 
TIM_CHANNEL_3
:

829 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

833 
TIM_CHANNEL_4
:

836 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

845 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

848 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

851 
	`__HAL_TIM_DISABLE
(
htim
);

854 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

857  
HAL_OK
;

858 
	}
}

905 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

908 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

911 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

914 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

917 
	`__HAL_TIM_ENABLE
(
htim
);

920  
HAL_OK
;

921 
	}
}

935 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

938 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

941 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

944 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

947 
	`__HAL_TIM_DISABLE
(
htim
);

950  
HAL_OK
;

951 
	}
}

966 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

969 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

971 
Ch™√l
)

973 
TIM_CHANNEL_1
:

976 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

980 
TIM_CHANNEL_2
:

983 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

987 
TIM_CHANNEL_3
:

990 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

994 
TIM_CHANNEL_4
:

997 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

1006 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_BREAK
);

1009 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

1012 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1015 
	`__HAL_TIM_ENABLE
(
htim
);

1018  
HAL_OK
;

1019 
	}
}

1034 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_St›_IT
 (
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1037 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1039 
Ch™√l
)

1041 
TIM_CHANNEL_1
:

1044 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1048 
TIM_CHANNEL_2
:

1051 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1055 
TIM_CHANNEL_3
:

1058 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1062 
TIM_CHANNEL_4
:

1065 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1074 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

1077 if((
	`READ_REG
(
htim
->
In°™˚
->
CCER
Ë& (
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
)Ë=
RESET
)

1079 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_BREAK
);

1083 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1086 
	`__HAL_TIM_DISABLE
(
htim
);

1089  
HAL_OK
;

1090 
	}
}

1107 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

1110 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1112 if((
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
))

1114  
HAL_BUSY
;

1116 if((
htim
->
Sèã
 =
HAL_TIM_STATE_READY
))

1118 if(((
uöt32_t
)
pD©a
 =0 ) && (
Lígth
 > 0))

1120  
HAL_ERROR
;

1124 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1127 
Ch™√l
)

1129 
TIM_CHANNEL_1
:

1132 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1135 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1138 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
);

1141 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1145 
TIM_CHANNEL_2
:

1148 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1151 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1154 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
);

1157 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1161 
TIM_CHANNEL_3
:

1164 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1167 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1170 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
,
Lígth
);

1173 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1177 
TIM_CHANNEL_4
:

1180 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1183 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1186 
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR4
, 
Lígth
);

1189 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1198 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

1201 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1204 
	`__HAL_TIM_ENABLE
(
htim
);

1207  
HAL_OK
;

1208 
	}
}

1223 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1226 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1228 
Ch™√l
)

1230 
TIM_CHANNEL_1
:

1233 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1237 
TIM_CHANNEL_2
:

1240 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1244 
TIM_CHANNEL_3
:

1247 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1251 
TIM_CHANNEL_4
:

1254 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1263 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

1266 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1269 
	`__HAL_TIM_DISABLE
(
htim
);

1272 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1275  
HAL_OK
;

1276 
	}
}

1311 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_O√Pul£N_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

1314 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
OuçutCh™√l
));

1317 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
OuçutCh™√l
, 
TIM_CCxN_ENABLE
);

1320 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1323  
HAL_OK
;

1324 
	}
}

1337 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_O√Pul£N_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

1341 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
OuçutCh™√l
));

1344 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
OuçutCh™√l
, 
TIM_CCxN_DISABLE
);

1347 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1350 
	`__HAL_TIM_DISABLE
(
htim
);

1353  
HAL_OK
;

1354 
	}
}

1367 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_O√Pul£N_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

1370 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
OuçutCh™√l
));

1373 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1376 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1379 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
OuçutCh™√l
, 
TIM_CCxN_ENABLE
);

1382 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1385  
HAL_OK
;

1386 
	}
}

1399 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_O√Pul£N_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

1402 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
OuçutCh™√l
));

1405 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1408 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1411 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
OuçutCh™√l
, 
TIM_CCxN_DISABLE
);

1414 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1417 
	`__HAL_TIM_DISABLE
(
htim
);

1420  
HAL_OK
;

1421 
	}
}

1468 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_C⁄figCommuèti⁄Evít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
, uöt32_à
Commuèti⁄Sour˚
)

1471 
	`as£π_∑øm
(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
));

1472 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I≈utTriggî
));

1474 
	`__HAL_LOCK
(
htim
);

1476 i‡((
I≈utTriggî
 =
TIM_TS_ITR0
Ë|| (I≈utTriggî =
TIM_TS_ITR1
) ||

1477 (
I≈utTriggî
 =
TIM_TS_ITR2
Ë|| (I≈utTriggî =
TIM_TS_ITR3
))

1480 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

1481 
htim
->
In°™˚
->
SMCR
 |
I≈utTriggî
;

1485 
htim
->
In°™˚
->
CR2
 |
TIM_CR2_CCPC
;

1487 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_CCUS
;

1488 
htim
->
In°™˚
->
CR2
 |
Commuèti⁄Sour˚
;

1490 
	`__HAL_UNLOCK
(
htim
);

1492  
HAL_OK
;

1493 
	}
}

1518 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_C⁄figCommuèti⁄Evít_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
, uöt32_à
Commuèti⁄Sour˚
)

1521 
	`as£π_∑øm
(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
));

1522 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I≈utTriggî
));

1524 
	`__HAL_LOCK
(
htim
);

1526 i‡((
I≈utTriggî
 =
TIM_TS_ITR0
Ë|| (I≈utTriggî =
TIM_TS_ITR1
) ||

1527 (
I≈utTriggî
 =
TIM_TS_ITR2
Ë|| (I≈utTriggî =
TIM_TS_ITR3
))

1530 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

1531 
htim
->
In°™˚
->
SMCR
 |
I≈utTriggî
;

1535 
htim
->
In°™˚
->
CR2
 |
TIM_CR2_CCPC
;

1537 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_CCUS
;

1538 
htim
->
In°™˚
->
CR2
 |
Commuèti⁄Sour˚
;

1541 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_COM
);

1543 
	`__HAL_UNLOCK
(
htim
);

1545  
HAL_OK
;

1546 
	}
}

1572 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_C⁄figCommuèti⁄Evít_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
, uöt32_à
Commuèti⁄Sour˚
)

1575 
	`as£π_∑øm
(
	`IS_TIM_ADVANCED_INSTANCE
(
htim
->
In°™˚
));

1576 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I≈utTriggî
));

1578 
	`__HAL_LOCK
(
htim
);

1580 i‡((
I≈utTriggî
 =
TIM_TS_ITR0
Ë|| (I≈utTriggî =
TIM_TS_ITR1
) ||

1581 (
I≈utTriggî
 =
TIM_TS_ITR2
Ë|| (I≈utTriggî =
TIM_TS_ITR3
))

1584 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

1585 
htim
->
In°™˚
->
SMCR
 |
I≈utTriggî
;

1589 
htim
->
In°™˚
->
CR2
 |
TIM_CR2_CCPC
;

1591 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_CCUS
;

1592 
htim
->
In°™˚
->
CR2
 |
Commuèti⁄Sour˚
;

1596 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄C∂t
;

1598 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
;

1601 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_COM
);

1603 
	`__HAL_UNLOCK
(
htim
);

1605  
HAL_OK
;

1606 
	}
}

1617 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Ma°îC⁄figTy≥Def
 * 
sMa°îC⁄fig
)

1620 
	`as£π_∑øm
(
	`IS_TIM_MASTER_INSTANCE
(
htim
->
In°™˚
));

1621 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
sMa°îC⁄fig
->
Ma°îOuçutTriggî
));

1622 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
sMa°îC⁄fig
->
Ma°îSœveMode
));

1624 
	`__HAL_LOCK
(
htim
);

1626 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1629 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_MMS
;

1631 
htim
->
In°™˚
->
CR2
 |
sMa°îC⁄fig
->
Ma°îOuçutTriggî
;

1634 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_MSM
;

1636 
htim
->
In°™˚
->
SMCR
 |
sMa°îC⁄fig
->
Ma°îSœveMode
;

1638 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1640 
	`__HAL_UNLOCK
(
htim
);

1642  
HAL_OK
;

1643 
	}
}

1654 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_C⁄figBªakDódTime
(
TIM_H™dÀTy≥Def
 *
htim
,

1655 
TIM_BªakDódTimeC⁄figTy≥Def
 * 
sBªakDódTimeC⁄fig
)

1658 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

1659 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
sBªakDódTimeC⁄fig
->
OffSèãRunMode
));

1660 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
sBªakDódTimeC⁄fig
->
OffSèãIDLEMode
));

1661 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
sBªakDódTimeC⁄fig
->
LockLevñ
));

1662 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
sBªakDódTimeC⁄fig
->
BªakSèã
));

1663 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
sBªakDódTimeC⁄fig
->
BªakPﬁ¨ôy
));

1664 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
sBªakDódTimeC⁄fig
->
Autom©icOuçut
));

1665 
	`as£π_∑øm
(
	`IS_TIM_DEADTIME
(
sBªakDódTimeC⁄fig
->
DódTime
));

1668 
	`__HAL_LOCK
(
htim
);

1670 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1674 
htim
->
In°™˚
->
BDTR
 = (
uöt32_t
)
sBªakDódTimeC⁄fig
->
OffSèãRunMode
 |

1675 
sBªakDódTimeC⁄fig
->
OffSèãIDLEMode
 |

1676 
sBªakDódTimeC⁄fig
->
LockLevñ
 |

1677 
sBªakDódTimeC⁄fig
->
DódTime
 |

1678 
sBªakDódTimeC⁄fig
->
BªakSèã
 |

1679 
sBªakDódTimeC⁄fig
->
BªakPﬁ¨ôy
 |

1680 
sBªakDódTimeC⁄fig
->
Autom©icOuçut
;

1683 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1685 
	`__HAL_UNLOCK
(
htim
);

1687  
HAL_OK
;

1688 
	}
}

1709 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_Rem≠C⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Rem≠
)

1711 
	`__HAL_LOCK
(
htim
);

1714 
	`as£π_∑øm
(
	`IS_TIM_REMAP_INSTANCE
(
htim
->
In°™˚
));

1715 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
Rem≠
));

1718 
htim
->
In°™˚
->
OR
 = 
Rem≠
;

1720 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1722 
	`__HAL_UNLOCK
(
htim
);

1724  
HAL_OK
;

1725 
	}
}

1753 
__wók
 
	$HAL_TIMEx_Commuèti⁄CÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

1758 
	}
}

1766 
__wók
 
	$HAL_TIMEx_BªakCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

1771 
	}
}

1797 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

1799  
htim
->
Sèã
;

1800 
	}
}

1812 
	$TIMEx_DMACommuèti⁄C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1814 
TIM_H™dÀTy≥Def
* 
htim
 = ( TIM_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1816 
htim
->
Sèã

HAL_TIM_STATE_READY
;

1818 
	`HAL_TIMEx_Commuèti⁄CÆlback
(
htim
);

1819 
	}
}

1836 
	$TIM_CCxNCh™√lCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lNSèã
)

1838 
uöt32_t
 
tmp
 = 0;

1841 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
TIMx
));

1842 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNELS
(
Ch™√l
));

1844 
tmp
 = 
TIM_CCER_CC1NE
 << 
Ch™√l
;

1847 
TIMx
->
CCER
 &~
tmp
;

1850 
TIMx
->
CCER
 |(
uöt32_t
)(
Ch™√lNSèã
 << 
Ch™√l
);

1851 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_uart.c

157 
	~"°m32f4xx_hÆ.h
"

167 #ifde‡
HAL_UART_MODULE_ENABLED


174 
	#UART_TIMEOUT_VALUE
 22000

	)

184 
UART_SëC⁄fig
 (
UART_H™dÀTy≥Def
 *
hu¨t
);

185 
HAL_SètusTy≥Def
 
UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

186 
HAL_SètusTy≥Def
 
UART_EndTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

187 
HAL_SètusTy≥Def
 
UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
);

188 
UART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

189 
UART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

190 
UART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

191 
UART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

192 
UART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

193 
HAL_SètusTy≥Def
 
UART_WaôOnFœgU¡ûTimeout
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

240 
HAL_SètusTy≥Def
 
	$HAL_UART_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

243 if(
hu¨t
 =
NULL
)

245  
HAL_ERROR
;

249 if(
hu¨t
->
Inô
.
HwFlowCé
 !
UART_HWCONTROL_NONE
)

252 
	`as£π_∑øm
(
	`IS_UART_HWFLOW_INSTANCE
(
hu¨t
->
In°™˚
));

253 
	`as£π_∑øm
(
	`IS_UART_HARDWARE_FLOW_CONTROL
(
hu¨t
->
Inô
.
HwFlowCé
));

257 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

259 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

260 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

262 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_RESET
)

265 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

267 
	`HAL_UART_M•Inô
(
hu¨t
);

270 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

273 
	`__HAL_UART_DISABLE
(
hu¨t
);

276 
	`UART_SëC⁄fig
(
hu¨t
);

281 
hu¨t
->
In°™˚
->
CR2
 &~(
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
);

282 
hu¨t
->
In°™˚
->
CR3
 &~(
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
);

285 
	`__HAL_UART_ENABLE
(
hu¨t
);

288 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

289 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

291  
HAL_OK
;

292 
	}
}

301 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

304 if(
hu¨t
 =
NULL
)

306  
HAL_ERROR
;

310 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

311 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

312 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

314 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_RESET
)

317 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

319 
	`HAL_UART_M•Inô
(
hu¨t
);

322 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

325 
	`__HAL_UART_DISABLE
(
hu¨t
);

328 
	`UART_SëC⁄fig
(
hu¨t
);

333 
hu¨t
->
In°™˚
->
CR2
 &~(
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
);

334 
hu¨t
->
In°™˚
->
CR3
 &~(
USART_CR3_IREN
 | 
USART_CR3_SCEN
);

337 
hu¨t
->
In°™˚
->
CR3
 |
USART_CR3_HDSEL
;

340 
	`__HAL_UART_ENABLE
(
hu¨t
);

343 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

344 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

346  
HAL_OK
;

347 
	}
}

360 
HAL_SètusTy≥Def
 
	$HAL_LIN_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
BªakDëe˘Lígth
)

363 if(
hu¨t
 =
NULL
)

365  
HAL_ERROR
;

369 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

370 
	`as£π_∑øm
(
	`IS_UART_LIN_BREAK_DETECT_LENGTH
(
BªakDëe˘Lígth
));

371 
	`as£π_∑øm
(
	`IS_UART_LIN_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

372 
	`as£π_∑øm
(
	`IS_UART_LIN_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

374 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_RESET
)

377 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

379 
	`HAL_UART_M•Inô
(
hu¨t
);

382 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

385 
	`__HAL_UART_DISABLE
(
hu¨t
);

388 
	`UART_SëC⁄fig
(
hu¨t
);

393 
hu¨t
->
In°™˚
->
CR2
 &~(
USART_CR2_CLKEN
);

394 
hu¨t
->
In°™˚
->
CR3
 &~(
USART_CR3_HDSEL
 | 
USART_CR3_IREN
 | 
USART_CR3_SCEN
);

397 
hu¨t
->
In°™˚
->
CR2
 |
USART_CR2_LINEN
;

400 
hu¨t
->
In°™˚
->
CR2
 &~(
USART_CR2_LBDL
);

401 
hu¨t
->
In°™˚
->
CR2
 |
BªakDëe˘Lígth
;

404 
	`__HAL_UART_ENABLE
(
hu¨t
);

407 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

408 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

410  
HAL_OK
;

411 
	}
}

425 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 
Addªss
, 
uöt32_t
 
WakeUpMëhod
)

428 if(
hu¨t
 =
NULL
)

430  
HAL_ERROR
;

434 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

435 
	`as£π_∑øm
(
	`IS_UART_WAKEUPMETHOD
(
WakeUpMëhod
));

436 
	`as£π_∑øm
(
	`IS_UART_ADDRESS
(
Addªss
));

437 
	`as£π_∑øm
(
	`IS_UART_WORD_LENGTH
(
hu¨t
->
Inô
.
W‹dLígth
));

438 
	`as£π_∑øm
(
	`IS_UART_OVERSAMPLING
(
hu¨t
->
Inô
.
OvîSam∂ög
));

440 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_RESET
)

443 
hu¨t
->
Lock
 = 
HAL_UNLOCKED
;

445 
	`HAL_UART_M•Inô
(
hu¨t
);

448 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

451 
	`__HAL_UART_DISABLE
(
hu¨t
);

454 
	`UART_SëC⁄fig
(
hu¨t
);

459 
hu¨t
->
In°™˚
->
CR2
 &~(
USART_CR2_LINEN
 | 
USART_CR2_CLKEN
);

460 
hu¨t
->
In°™˚
->
CR3
 &~(
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
 | 
USART_CR3_IREN
);

463 
hu¨t
->
In°™˚
->
CR2
 &~(
USART_CR2_ADD
);

465 
hu¨t
->
In°™˚
->
CR2
 |
Addªss
;

468 
hu¨t
->
In°™˚
->
CR1
 &~(
USART_CR1_WAKE
);

469 
hu¨t
->
In°™˚
->
CR1
 |
WakeUpMëhod
;

472 
	`__HAL_UART_ENABLE
(
hu¨t
);

475 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

476 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

478  
HAL_OK
;

479 
	}
}

487 
HAL_SètusTy≥Def
 
	$HAL_UART_DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

490 if(
hu¨t
 =
NULL
)

492  
HAL_ERROR
;

496 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

498 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

501 
	`HAL_UART_M•DeInô
(
hu¨t
);

503 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

504 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_RESET
;

507 
	`__HAL_UNLOCK
(
hu¨t
);

509  
HAL_OK
;

510 
	}
}

518 
__wók
 
	$HAL_UART_M•Inô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

523 
	}
}

531 
__wók
 
	$HAL_UART_M•DeInô
(
UART_H™dÀTy≥Def
 *
hu¨t
)

536 
	}
}

603 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

605 
uöt16_t
* 
tmp
;

606 
uöt32_t
 
tmp1
 = 0;

608 
tmp1
 = 
hu¨t
->
Sèã
;

609 if((
tmp1
 =
HAL_UART_STATE_READY
Ë|| (tmp1 =
HAL_UART_STATE_BUSY_RX
))

611 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

613  
HAL_ERROR
;

617 
	`__HAL_LOCK
(
hu¨t
);

619 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

621 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

623 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

627 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

630 
hu¨t
->
TxX„rSize
 = 
Size
;

631 
hu¨t
->
TxX„rCou¡
 = 
Size
;

632 
hu¨t
->
TxX„rCou¡
 > 0)

634 
hu¨t
->
TxX„rCou¡
--;

635 if(
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
)

637 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

639  
HAL_TIMEOUT
;

641 
tmp
 = (
uöt16_t
*Ë
pD©a
;

642 
hu¨t
->
In°™˚
->
DR
 = (*
tmp
 & (
uöt16_t
)0x01FF);

643 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

645 
pD©a
 +=2;

649 
pD©a
 +=1;

654 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

656  
HAL_TIMEOUT
;

658 
hu¨t
->
In°™˚
->
DR
 = (*
pD©a
++ & (
uöt8_t
)0xFF);

662 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_TC
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

664  
HAL_TIMEOUT
;

668 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

670 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

674 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

678 
	`__HAL_UNLOCK
(
hu¨t
);

680  
HAL_OK
;

684  
HAL_BUSY
;

686 
	}
}

697 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

699 
uöt16_t
* 
tmp
;

700 
uöt32_t
 
tmp1
 = 0;

702 
tmp1
 = 
hu¨t
->
Sèã
;

703 if((
tmp1
 =
HAL_UART_STATE_READY
Ë|| (tmp1 =
HAL_UART_STATE_BUSY_TX
))

705 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

707  
HAL_ERROR
;

711 
	`__HAL_LOCK
(
hu¨t
);

713 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

715 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

717 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

721 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

724 
hu¨t
->
RxX„rSize
 = 
Size
;

725 
hu¨t
->
RxX„rCou¡
 = 
Size
;

728 
hu¨t
->
RxX„rCou¡
 > 0)

730 
hu¨t
->
RxX„rCou¡
--;

731 if(
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
)

733 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

735  
HAL_TIMEOUT
;

737 
tmp
 = (
uöt16_t
*Ë
pD©a
 ;

738 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

740 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

741 
pD©a
 +=2;

745 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

746 
pD©a
 +=1;

752 if(
	`UART_WaôOnFœgU¡ûTimeout
(
hu¨t
, 
UART_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

754  
HAL_TIMEOUT
;

756 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

758 *
pD©a
++ = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x00FF);

762 *
pD©a
++ = (
uöt8_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint8_t)0x007F);

769 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

771 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

775 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

778 
	`__HAL_UNLOCK
(
hu¨t
);

780  
HAL_OK
;

784  
HAL_BUSY
;

786 
	}
}

796 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

798 
uöt32_t
 
tmp
 = 0;

800 
tmp
 = 
hu¨t
->
Sèã
;

801 if((
tmp
 =
HAL_UART_STATE_READY
Ë|| (tm∞=
HAL_UART_STATE_BUSY_RX
))

803 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

805  
HAL_ERROR
;

809 
	`__HAL_LOCK
(
hu¨t
);

811 
hu¨t
->
pTxBuffPå
 = 
pD©a
;

812 
hu¨t
->
TxX„rSize
 = 
Size
;

813 
hu¨t
->
TxX„rCou¡
 = 
Size
;

815 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

817 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

819 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

823 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

827 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_PE
);

830 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

833 
	`__HAL_UNLOCK
(
hu¨t
);

836 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

838  
HAL_OK
;

842  
HAL_BUSY
;

844 
	}
}

854 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

856 
uöt32_t
 
tmp
 = 0;

858 
tmp
 = 
hu¨t
->
Sèã
;

859 if((
tmp
 =
HAL_UART_STATE_READY
Ë|| (tm∞=
HAL_UART_STATE_BUSY_TX
))

861 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

863  
HAL_ERROR
;

867 
	`__HAL_LOCK
(
hu¨t
);

869 
hu¨t
->
pRxBuffPå
 = 
pD©a
;

870 
hu¨t
->
RxX„rSize
 = 
Size
;

871 
hu¨t
->
RxX„rCou¡
 = 
Size
;

873 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

875 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

877 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

881 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

885 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_PE
);

888 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

891 
	`__HAL_UNLOCK
(
hu¨t
);

894 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

896  
HAL_OK
;

900  
HAL_BUSY
;

902 
	}
}

912 
HAL_SètusTy≥Def
 
	$HAL_UART_Tønsmô_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

914 
uöt32_t
 *
tmp
;

915 
uöt32_t
 
tmp1
 = 0;

917 
tmp1
 = 
hu¨t
->
Sèã
;

918 if((
tmp1
 =
HAL_UART_STATE_READY
Ë|| (tmp1 =
HAL_UART_STATE_BUSY_RX
))

920 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

922  
HAL_ERROR
;

926 
	`__HAL_LOCK
(
hu¨t
);

928 
hu¨t
->
pTxBuffPå
 = 
pD©a
;

929 
hu¨t
->
TxX„rSize
 = 
Size
;

930 
hu¨t
->
TxX„rCou¡
 = 
Size
;

932 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

934 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

936 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

940 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

944 
hu¨t
->
hdm©x
->
X„rC∂tCÆlback
 = 
UART_DMATønsmôC∂t
;

947 
hu¨t
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
UART_DMATxHÆfC∂t
;

950 
hu¨t
->
hdm©x
->
X„rEº‹CÆlback
 = 
UART_DMAEº‹
;

953 
tmp
 = (
uöt32_t
*)&
pD©a
;

954 
	`HAL_DMA_Sèπ_IT
(
hu¨t
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hu¨t->
In°™˚
->
DR
, 
Size
);

957 
	`__HAL_UART_CLEAR_FLAG
(
hu¨t
, 
UART_FLAG_TC
);

961 
hu¨t
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

964 
	`__HAL_UNLOCK
(
hu¨t
);

966  
HAL_OK
;

970  
HAL_BUSY
;

972 
	}
}

983 
HAL_SètusTy≥Def
 
	$HAL_UART_Re˚ive_DMA
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt8_t
 *
pD©a
, 
uöt16_t
 
Size
)

985 
uöt32_t
 *
tmp
;

986 
uöt32_t
 
tmp1
 = 0;

988 
tmp1
 = 
hu¨t
->
Sèã
;

989 if((
tmp1
 =
HAL_UART_STATE_READY
Ë|| (tmp1 =
HAL_UART_STATE_BUSY_TX
))

991 if((
pD©a
 =
NULL
 ) || (
Size
 == 0))

993  
HAL_ERROR
;

997 
	`__HAL_LOCK
(
hu¨t
);

999 
hu¨t
->
pRxBuffPå
 = 
pD©a
;

1000 
hu¨t
->
RxX„rSize
 = 
Size
;

1002 
hu¨t
->
Eº‹Code
 = 
HAL_UART_ERROR_NONE
;

1004 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

1006 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX_RX
;

1010 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

1014 
hu¨t
->
hdm¨x
->
X„rC∂tCÆlback
 = 
UART_DMARe˚iveC∂t
;

1017 
hu¨t
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
UART_DMARxHÆfC∂t
;

1020 
hu¨t
->
hdm¨x
->
X„rEº‹CÆlback
 = 
UART_DMAEº‹
;

1023 
tmp
 = (
uöt32_t
*)&
pD©a
;

1024 
	`HAL_DMA_Sèπ_IT
(
hu¨t
->
hdm¨x
, (
uöt32_t
)&hu¨t->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, 
Size
);

1028 
hu¨t
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

1031 
	`__HAL_UNLOCK
(
hu¨t
);

1033  
HAL_OK
;

1037  
HAL_BUSY
;

1039 
	}
}

1047 
HAL_SètusTy≥Def
 
	$HAL_UART_DMAPau£
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1050 
	`__HAL_LOCK
(
hu¨t
);

1052 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

1055 
hu¨t
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAT
);

1057 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

1060 
hu¨t
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAR
);

1062 i‡(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1065 
hu¨t
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAT
);

1066 
hu¨t
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAR
);

1070 
	`__HAL_UNLOCK
(
hu¨t
);

1072  
HAL_OK
;

1073 
	}
}

1081 
HAL_SètusTy≥Def
 
	$HAL_UART_DMAResume
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1084 
	`__HAL_LOCK
(
hu¨t
);

1086 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX
)

1089 
hu¨t
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

1091 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_RX
)

1094 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¨t
);

1096 
hu¨t
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

1098 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1101 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¨t
);

1103 
hu¨t
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

1104 
hu¨t
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

1108 
	`__HAL_UNLOCK
(
hu¨t
);

1110  
HAL_OK
;

1111 
	}
}

1119 
HAL_SètusTy≥Def
 
	$HAL_UART_DMASt›
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1128 
hu¨t
->
In°™˚
->
CR3
 &~
USART_CR3_DMAT
;

1129 
hu¨t
->
In°™˚
->
CR3
 &~
USART_CR3_DMAR
;

1132 if(
hu¨t
->
hdm©x
 !
NULL
)

1134 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm©x
);

1137 if(
hu¨t
->
hdm¨x
 !
NULL
)

1139 
	`HAL_DMA_Ab‹t
(
hu¨t
->
hdm¨x
);

1142 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1144  
HAL_OK
;

1145 
	}
}

1153 
	$HAL_UART_IRQH™dÀr
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1155 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1157 
tmp1
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_PE
);

1158 
tmp2
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_PE
);

1160 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1162 
	`__HAL_UART_CLEAR_PEFLAG
(
hu¨t
);

1164 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_PE
;

1167 
tmp1
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_FE
);

1168 
tmp2
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_ERR
);

1170 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1172 
	`__HAL_UART_CLEAR_FEFLAG
(
hu¨t
);

1174 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_FE
;

1177 
tmp1
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_NE
);

1178 
tmp2
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_ERR
);

1180 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1182 
	`__HAL_UART_CLEAR_NEFLAG
(
hu¨t
);

1184 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_NE
;

1187 
tmp1
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_ORE
);

1188 
tmp2
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_ERR
);

1190 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1192 
	`__HAL_UART_CLEAR_OREFLAG
(
hu¨t
);

1194 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_ORE
;

1197 
tmp1
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_RXNE
);

1198 
tmp2
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_RXNE
);

1200 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1202 
	`UART_Re˚ive_IT
(
hu¨t
);

1205 
tmp1
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_TXE
);

1206 
tmp2
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_TXE
);

1208 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1210 
	`UART_Tønsmô_IT
(
hu¨t
);

1213 
tmp1
 = 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
UART_FLAG_TC
);

1214 
tmp2
 = 
	`__HAL_UART_GET_IT_SOURCE
(
hu¨t
, 
UART_IT_TC
);

1216 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1218 
	`UART_EndTønsmô_IT
(
hu¨t
);

1221 if(
hu¨t
->
Eº‹Code
 !
HAL_UART_ERROR_NONE
)

1224 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1226 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

1228 
	}
}

1236 
__wók
 
	$HAL_UART_TxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1241 
	}
}

1249 
__wók
 
	$HAL_UART_TxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1254 
	}
}

1262 
__wók
 
	$HAL_UART_RxC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1267 
	}
}

1275 
__wók
 
	$HAL_UART_RxHÆfC∂tCÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1280 
	}
}

1288 
__wók
 
	$HAL_UART_Eº‹CÆlback
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1293 
	}
}

1322 
HAL_SètusTy≥Def
 
	$HAL_LIN_SídBªak
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1325 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

1328 
	`__HAL_LOCK
(
hu¨t
);

1330 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1333 
hu¨t
->
In°™˚
->
CR1
 |
USART_CR1_SBK
;

1335 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1338 
	`__HAL_UNLOCK
(
hu¨t
);

1340  
HAL_OK
;

1341 
	}
}

1349 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_E¡îMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1352 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

1355 
	`__HAL_LOCK
(
hu¨t
);

1357 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1360 
hu¨t
->
In°™˚
->
CR1
 |
USART_CR1_RWU
;

1362 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1365 
	`__HAL_UNLOCK
(
hu¨t
);

1367  
HAL_OK
;

1368 
	}
}

1376 
HAL_SètusTy≥Def
 
	$HAL_Mu…iPro˚ss‹_ExôMuãMode
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1379 
	`as£π_∑øm
(
	`IS_UART_INSTANCE
(
hu¨t
->
In°™˚
));

1382 
	`__HAL_LOCK
(
hu¨t
);

1384 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1387 
hu¨t
->
In°™˚
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_RWU
);

1389 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1392 
	`__HAL_UNLOCK
(
hu¨t
);

1394  
HAL_OK
;

1395 
	}
}

1403 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_E«bÀTønsmôãr
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1405 
uöt32_t
 
tm¥eg
 = 0x00;

1408 
	`__HAL_LOCK
(
hu¨t
);

1410 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1413 
tm¥eg
 = 
hu¨t
->
In°™˚
->
CR1
;

1416 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_TE
 | 
USART_CR1_RE
));

1419 
tm¥eg
 |(
uöt32_t
)
USART_CR1_TE
;

1422 
hu¨t
->
In°™˚
->
CR1
 = (
uöt32_t
)
tm¥eg
;

1424 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1427 
	`__HAL_UNLOCK
(
hu¨t
);

1429  
HAL_OK
;

1430 
	}
}

1438 
HAL_SètusTy≥Def
 
	$HAL_HÆfDu∂ex_E«bÀRe˚ivî
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1440 
uöt32_t
 
tm¥eg
 = 0x00;

1443 
	`__HAL_LOCK
(
hu¨t
);

1445 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY
;

1448 
tm¥eg
 = 
hu¨t
->
In°™˚
->
CR1
;

1451 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_TE
 | 
USART_CR1_RE
));

1454 
tm¥eg
 |(
uöt32_t
)
USART_CR1_RE
;

1457 
hu¨t
->
In°™˚
->
CR1
 = (
uöt32_t
)
tm¥eg
;

1459 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1462 
	`__HAL_UNLOCK
(
hu¨t
);

1464  
HAL_OK
;

1465 
	}
}

1495 
HAL_UART_SèãTy≥Def
 
	$HAL_UART_GëSèã
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1497  
hu¨t
->
Sèã
;

1498 
	}
}

1506 
uöt32_t
 
	$HAL_UART_GëEº‹
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1508  
hu¨t
->
Eº‹Code
;

1509 
	}
}

1520 
	$UART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1522 
UART_H™dÀTy≥Def
* 
hu¨t
 = ( UART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1524 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1526 
hu¨t
->
TxX„rCou¡
 = 0;

1530 
hu¨t
->
In°™˚
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_DMAT
);

1533 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_TC
);

1538 
	`HAL_UART_TxC∂tCÆlback
(
hu¨t
);

1540 
	}
}

1548 
	$UART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1550 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1552 
	`HAL_UART_TxHÆfC∂tCÆlback
(
hu¨t
);

1553 
	}
}

1560 
	$UART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1562 
UART_H™dÀTy≥Def
* 
hu¨t
 = ( UART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1564 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1566 
hu¨t
->
RxX„rCou¡
 = 0;

1570 
hu¨t
->
In°™˚
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_DMAR
);

1573 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1575 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

1579 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1582 
	`HAL_UART_RxC∂tCÆlback
(
hu¨t
);

1583 
	}
}

1591 
	$UART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1593 
UART_H™dÀTy≥Def
* 
hu¨t
 = (UART_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1595 
	`HAL_UART_RxHÆfC∂tCÆlback
(
hu¨t
);

1596 
	}
}

1603 
	$UART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1605 
UART_H™dÀTy≥Def
* 
hu¨t
 = ( UART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1606 
hu¨t
->
RxX„rCou¡
 = 0;

1607 
hu¨t
->
TxX„rCou¡
 = 0;

1608 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

1609 
hu¨t
->
Eº‹Code
 |
HAL_UART_ERROR_DMA
;

1610 
	`HAL_UART_Eº‹CÆlback
(
hu¨t
);

1611 
	}
}

1622 
HAL_SètusTy≥Def
 
	$UART_WaôOnFœgU¡ûTimeout
(
UART_H™dÀTy≥Def
 *
hu¨t
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

1624 
uöt32_t
 
tick°¨t
 = 0;

1627 
tick°¨t
 = 
	`HAL_GëTick
();

1630 if(
Sètus
 =
RESET
)

1632 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
Fœg
Ë=
RESET
)

1635 if(
Timeout
 !
HAL_MAX_DELAY
)

1637 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1640 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

1641 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

1642 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_PE
);

1643 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

1645 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

1648 
	`__HAL_UNLOCK
(
hu¨t
);

1650  
HAL_TIMEOUT
;

1657 
	`__HAL_UART_GET_FLAG
(
hu¨t
, 
Fœg
Ë!
RESET
)

1660 if(
Timeout
 !
HAL_MAX_DELAY
)

1662 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1665 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

1666 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

1667 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_PE
);

1668 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

1670 
hu¨t
->
Sèã

HAL_UART_STATE_READY
;

1673 
	`__HAL_UNLOCK
(
hu¨t
);

1675  
HAL_TIMEOUT
;

1680  
HAL_OK
;

1681 
	}
}

1689 
HAL_SètusTy≥Def
 
	$UART_Tønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1691 
uöt16_t
* 
tmp
;

1692 
uöt32_t
 
tmp1
 = 0;

1694 
tmp1
 = 
hu¨t
->
Sèã
;

1695 if((
tmp1
 =
HAL_UART_STATE_BUSY_TX
Ë|| (tmp1 =
HAL_UART_STATE_BUSY_TX_RX
))

1697 if(
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
)

1699 
tmp
 = (
uöt16_t
*Ë
hu¨t
->
pTxBuffPå
;

1700 
hu¨t
->
In°™˚
->
DR
 = (
uöt16_t
)(*
tmp
 & (uint16_t)0x01FF);

1701 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

1703 
hu¨t
->
pTxBuffPå
 += 2;

1707 
hu¨t
->
pTxBuffPå
 += 1;

1712 
hu¨t
->
In°™˚
->
DR
 = (
uöt8_t
)(*hu¨t->
pTxBuffPå
++ & (uint8_t)0x00FF);

1715 if(--
hu¨t
->
TxX„rCou¡
 == 0)

1718 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TXE
);

1721 
	`__HAL_UART_ENABLE_IT
(
hu¨t
, 
UART_IT_TC
);

1723  
HAL_OK
;

1727  
HAL_BUSY
;

1729 
	}
}

1738 
HAL_SètusTy≥Def
 
	$UART_EndTønsmô_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1741 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_TC
);

1744 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1746 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_RX
;

1751 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_PE
);

1754 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

1756 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1759 
	`HAL_UART_TxC∂tCÆlback
(
hu¨t
);

1761  
HAL_OK
;

1762 
	}
}

1770 
HAL_SètusTy≥Def
 
	$UART_Re˚ive_IT
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1772 
uöt16_t
* 
tmp
;

1773 
uöt32_t
 
tmp1
 = 0;

1775 
tmp1
 = 
hu¨t
->
Sèã
;

1776 if((
tmp1
 =
HAL_UART_STATE_BUSY_RX
Ë|| (tmp1 =
HAL_UART_STATE_BUSY_TX_RX
))

1778 if(
hu¨t
->
Inô
.
W‹dLígth
 =
UART_WORDLENGTH_9B
)

1780 
tmp
 = (
uöt16_t
*Ë
hu¨t
->
pRxBuffPå
;

1781 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

1783 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

1784 
hu¨t
->
pRxBuffPå
 += 2;

1788 *
tmp
 = (
uöt16_t
)(
hu¨t
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

1789 
hu¨t
->
pRxBuffPå
 += 1;

1794 if(
hu¨t
->
Inô
.
P¨ôy
 =
UART_PARITY_NONE
)

1796 *
hu¨t
->
pRxBuffPå
++ = (
uöt8_t
)(hu¨t->
In°™˚
->
DR
 & (uint8_t)0x00FF);

1800 *
hu¨t
->
pRxBuffPå
++ = (
uöt8_t
)(hu¨t->
In°™˚
->
DR
 & (uint8_t)0x007F);

1804 if(--
hu¨t
->
RxX„rCou¡
 == 0)

1806 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_RXNE
);

1809 if(
hu¨t
->
Sèã
 =
HAL_UART_STATE_BUSY_TX_RX
)

1811 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_BUSY_TX
;

1816 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_PE
);

1819 
	`__HAL_UART_DISABLE_IT
(
hu¨t
, 
UART_IT_ERR
);

1821 
hu¨t
->
Sèã
 = 
HAL_UART_STATE_READY
;

1823 
	`HAL_UART_RxC∂tCÆlback
(
hu¨t
);

1825  
HAL_OK
;

1827  
HAL_OK
;

1831  
HAL_BUSY
;

1833 
	}
}

1841 
	$UART_SëC⁄fig
(
UART_H™dÀTy≥Def
 *
hu¨t
)

1843 
uöt32_t
 
tm¥eg
 = 0x00;

1846 
	`as£π_∑øm
(
	`IS_UART_BAUDRATE
(
hu¨t
->
Inô
.
BaudR©e
));

1847 
	`as£π_∑øm
(
	`IS_UART_STOPBITS
(
hu¨t
->
Inô
.
St›Bôs
));

1848 
	`as£π_∑øm
(
	`IS_UART_PARITY
(
hu¨t
->
Inô
.
P¨ôy
));

1849 
	`as£π_∑øm
(
	`IS_UART_MODE
(
hu¨t
->
Inô
.
Mode
));

1852 
tm¥eg
 = 
hu¨t
->
In°™˚
->
CR2
;

1855 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

1858 
tm¥eg
 |(
uöt32_t
)
hu¨t
->
Inô
.
St›Bôs
;

1861 
hu¨t
->
In°™˚
->
CR2
 = (
uöt32_t
)
tm¥eg
;

1864 
tm¥eg
 = 
hu¨t
->
In°™˚
->
CR1
;

1867 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

1868 
USART_CR1_RE
 | 
USART_CR1_OVER8
));

1875 
tm¥eg
 |(
uöt32_t
)
hu¨t
->
Inô
.
W‹dLígth
 | hu¨t->Inô.
P¨ôy
 | hu¨t->Inô.
Mode
 | hu¨t->Inô.
OvîSam∂ög
;

1878 
hu¨t
->
In°™˚
->
CR1
 = (
uöt32_t
)
tm¥eg
;

1881 
tm¥eg
 = 
hu¨t
->
In°™˚
->
CR3
;

1884 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

1887 
tm¥eg
 |
hu¨t
->
Inô
.
HwFlowCé
;

1890 
hu¨t
->
In°™˚
->
CR3
 = (
uöt32_t
)
tm¥eg
;

1893 if(
hu¨t
->
Inô
.
OvîSam∂ög
 =
UART_OVERSAMPLING_8
)

1896 if((
hu¨t
->
In°™˚
 =
USART1
Ë|| (hu¨t->In°™˚ =
USART6
))

1898 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING8
(
	`HAL_RCC_GëPCLK2Fªq
(), hu¨t->
Inô
.
BaudR©e
);

1902 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING8
(
	`HAL_RCC_GëPCLK1Fªq
(), hu¨t->
Inô
.
BaudR©e
);

1908 if((
hu¨t
->
In°™˚
 =
USART1
Ë|| (hu¨t->In°™˚ =
USART6
))

1910 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING16
(
	`HAL_RCC_GëPCLK2Fªq
(), hu¨t->
Inô
.
BaudR©e
);

1914 
hu¨t
->
In°™˚
->
BRR
 = 
	`UART_BRR_SAMPLING16
(
	`HAL_RCC_GëPCLK1Fªq
(), hu¨t->
Inô
.
BaudR©e
);

1917 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_usart.c

136 
	~"°m32f4xx_hÆ.h
"

146 #ifde‡
HAL_USART_MODULE_ENABLED


152 
	#DUMMY_DATA
 0xFFFF

	)

153 
	#USART_TIMEOUT_VALUE
 22000

	)

164 
HAL_SètusTy≥Def
 
USART_Tønsmô_IT
(
USART_H™dÀTy≥Def
 *
hußπ
);

165 
HAL_SètusTy≥Def
 
USART_EndTønsmô_IT
(
USART_H™dÀTy≥Def
 *
hußπ
);

166 
HAL_SètusTy≥Def
 
USART_Re˚ive_IT
(
USART_H™dÀTy≥Def
 *
hußπ
);

167 
HAL_SètusTy≥Def
 
USART_TønsmôRe˚ive_IT
(
USART_H™dÀTy≥Def
 *
hußπ
);

168 
USART_SëC⁄fig
 (
USART_H™dÀTy≥Def
 *
hußπ
);

169 
USART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

170 
USART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

171 
USART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

172 
USART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

173 
USART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

174 
HAL_SètusTy≥Def
 
USART_WaôOnFœgU¡ûTimeout
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
);

222 
HAL_SètusTy≥Def
 
	$HAL_USART_Inô
(
USART_H™dÀTy≥Def
 *
hußπ
)

225 if(
hußπ
 =
NULL
)

227  
HAL_ERROR
;

231 
	`as£π_∑øm
(
	`IS_USART_INSTANCE
(
hußπ
->
In°™˚
));

233 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_RESET
)

236 
hußπ
->
Lock
 = 
HAL_UNLOCKED
;

238 
	`HAL_USART_M•Inô
(
hußπ
);

241 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY
;

244 
	`USART_SëC⁄fig
(
hußπ
);

249 
hußπ
->
In°™˚
->
CR2
 &~
USART_CR2_LINEN
;

250 
hußπ
->
In°™˚
->
CR3
 &~(
USART_CR3_IREN
 | 
USART_CR3_SCEN
 | 
USART_CR3_HDSEL
);

253 
	`__HAL_USART_ENABLE
(
hußπ
);

256 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

257 
hußπ
->
Sèã

HAL_USART_STATE_READY
;

259  
HAL_OK
;

260 
	}
}

268 
HAL_SètusTy≥Def
 
	$HAL_USART_DeInô
(
USART_H™dÀTy≥Def
 *
hußπ
)

271 if(
hußπ
 =
NULL
)

273  
HAL_ERROR
;

277 
	`as£π_∑øm
(
	`IS_USART_INSTANCE
(
hußπ
->
In°™˚
));

279 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY
;

282 
	`__HAL_USART_DISABLE
(
hußπ
);

285 
	`HAL_USART_M•DeInô
(
hußπ
);

287 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

288 
hußπ
->
Sèã
 = 
HAL_USART_STATE_RESET
;

291 
	`__HAL_UNLOCK
(
hußπ
);

293  
HAL_OK
;

294 
	}
}

302 
__wók
 
	$HAL_USART_M•Inô
(
USART_H™dÀTy≥Def
 *
hußπ
)

307 
	}
}

315 
__wók
 
	$HAL_USART_M•DeInô
(
USART_H™dÀTy≥Def
 *
hußπ
)

320 
	}
}

396 
HAL_SètusTy≥Def
 
	$HAL_USART_Tønsmô
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

398 
uöt16_t
* 
tmp
;

400 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

402 if((
pTxD©a
 =
NULL
Ë|| (
Size
 == 0))

404  
HAL_ERROR
;

408 
	`__HAL_LOCK
(
hußπ
);

410 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

411 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_TX
;

413 
hußπ
->
TxX„rSize
 = 
Size
;

414 
hußπ
->
TxX„rCou¡
 = 
Size
;

415 
hußπ
->
TxX„rCou¡
 > 0)

417 
hußπ
->
TxX„rCou¡
--;

418 if(
hußπ
->
Inô
.
W‹dLígth
 =
USART_WORDLENGTH_9B
)

421 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

423  
HAL_TIMEOUT
;

425 
tmp
 = (
uöt16_t
*Ë
pTxD©a
;

426 
hußπ
->
In°™˚
->
DR
 = (*
tmp
 & (
uöt16_t
)0x01FF);

427 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

429 
pTxD©a
 += 2;

433 
pTxD©a
 += 1;

438 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

440  
HAL_TIMEOUT
;

442 
hußπ
->
In°™˚
->
DR
 = (*
pTxD©a
++ & (
uöt8_t
)0xFF);

446 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_TC
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

448  
HAL_TIMEOUT
;

451 
hußπ
->
Sèã
 = 
HAL_USART_STATE_READY
;

454 
	`__HAL_UNLOCK
(
hußπ
);

456  
HAL_OK
;

460  
HAL_BUSY
;

462 
	}
}

473 
HAL_SètusTy≥Def
 
	$HAL_USART_Re˚ive
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pRxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

475 
uöt16_t
* 
tmp
;

477 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

479 if((
pRxD©a
 =
NULL
Ë|| (
Size
 == 0))

481  
HAL_ERROR
;

484 
	`__HAL_LOCK
(
hußπ
);

486 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

487 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_RX
;

489 
hußπ
->
RxX„rSize
 = 
Size
;

490 
hußπ
->
RxX„rCou¡
 = 
Size
;

492 
hußπ
->
RxX„rCou¡
 > 0)

494 
hußπ
->
RxX„rCou¡
--;

495 if(
hußπ
->
Inô
.
W‹dLígth
 =
USART_WORDLENGTH_9B
)

498 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

500  
HAL_TIMEOUT
;

503 
hußπ
->
In°™˚
->
DR
 = (
DUMMY_DATA
 & (
uöt16_t
)0x01FF);

506 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

508  
HAL_TIMEOUT
;

510 
tmp
 = (
uöt16_t
*Ë
pRxD©a
 ;

511 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

513 *
tmp
 = (
uöt16_t
)(
hußπ
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

514 
pRxD©a
 +=2;

518 *
tmp
 = (
uöt16_t
)(
hußπ
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

519 
pRxD©a
 +=1;

525 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

527  
HAL_TIMEOUT
;

531 
hußπ
->
In°™˚
->
DR
 = (
DUMMY_DATA
 & (
uöt16_t
)0x00FF);

534 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

536  
HAL_TIMEOUT
;

538 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

541 *
pRxD©a
++ = (
uöt8_t
)(
hußπ
->
In°™˚
->
DR
 & (uint8_t)0x00FF);

546 *
pRxD©a
++ = (
uöt8_t
)(
hußπ
->
In°™˚
->
DR
 & (uint8_t)0x007F);

552 
hußπ
->
Sèã
 = 
HAL_USART_STATE_READY
;

555 
	`__HAL_UNLOCK
(
hußπ
);

557  
HAL_OK
;

561  
HAL_BUSY
;

563 
	}
}

575 
HAL_SètusTy≥Def
 
	$HAL_USART_TønsmôRe˚ive
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
, 
uöt32_t
 
Timeout
)

577 
uöt16_t
* 
tmp
;

579 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

581 if((
pTxD©a
 =
NULL
Ë|| (
pRxD©a
 =NULLË|| (
Size
 == 0))

583  
HAL_ERROR
;

586 
	`__HAL_LOCK
(
hußπ
);

588 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

589 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_RX
;

591 
hußπ
->
RxX„rSize
 = 
Size
;

592 
hußπ
->
TxX„rSize
 = 
Size
;

593 
hußπ
->
TxX„rCou¡
 = 
Size
;

594 
hußπ
->
RxX„rCou¡
 = 
Size
;

597 
hußπ
->
TxX„rCou¡
 > 0)

599 
hußπ
->
TxX„rCou¡
--;

600 
hußπ
->
RxX„rCou¡
--;

601 if(
hußπ
->
Inô
.
W‹dLígth
 =
USART_WORDLENGTH_9B
)

604 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

606  
HAL_TIMEOUT
;

608 
tmp
 = (
uöt16_t
*Ë
pTxD©a
;

609 
hußπ
->
In°™˚
->
DR
 = (*
tmp
 & (
uöt16_t
)0x01FF);

610 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

612 
pTxD©a
 += 2;

616 
pTxD©a
 += 1;

620 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

622  
HAL_TIMEOUT
;

624 
tmp
 = (
uöt16_t
*Ë
pRxD©a
 ;

625 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

627 *
tmp
 = (
uöt16_t
)(
hußπ
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

628 
pRxD©a
 += 2;

632 *
tmp
 = (
uöt16_t
)(
hußπ
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

633 
pRxD©a
 += 1;

639 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_TXE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

641  
HAL_TIMEOUT
;

643 
hußπ
->
In°™˚
->
DR
 = (*
pTxD©a
++ & (
uöt8_t
)0x00FF);

646 if(
	`USART_WaôOnFœgU¡ûTimeout
(
hußπ
, 
USART_FLAG_RXNE
, 
RESET
, 
Timeout
Ë!
HAL_OK
)

648  
HAL_TIMEOUT
;

650 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

653 *
pRxD©a
++ = (
uöt8_t
)(
hußπ
->
In°™˚
->
DR
 & (uint8_t)0x00FF);

658 *
pRxD©a
++ = (
uöt8_t
)(
hußπ
->
In°™˚
->
DR
 & (uint8_t)0x007F);

663 
hußπ
->
Sèã
 = 
HAL_USART_STATE_READY
;

666 
	`__HAL_UNLOCK
(
hußπ
);

668  
HAL_OK
;

672  
HAL_BUSY
;

674 
	}
}

685 
HAL_SètusTy≥Def
 
	$HAL_USART_Tønsmô_IT
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, 
uöt16_t
 
Size
)

687 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

689 if((
pTxD©a
 =
NULL
Ë|| (
Size
 == 0))

691  
HAL_ERROR
;

695 
	`__HAL_LOCK
(
hußπ
);

697 
hußπ
->
pTxBuffPå
 = 
pTxD©a
;

698 
hußπ
->
TxX„rSize
 = 
Size
;

699 
hußπ
->
TxX„rCou¡
 = 
Size
;

701 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

702 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_TX
;

713 
	`__HAL_UNLOCK
(
hußπ
);

716 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_TXE
);

718  
HAL_OK
;

722  
HAL_BUSY
;

724 
	}
}

734 
HAL_SètusTy≥Def
 
	$HAL_USART_Re˚ive_IT
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pRxD©a
, 
uöt16_t
 
Size
)

736 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

738 if((
pRxD©a
 =
NULL
Ë|| (
Size
 == 0))

740  
HAL_ERROR
;

743 
	`__HAL_LOCK
(
hußπ
);

745 
hußπ
->
pRxBuffPå
 = 
pRxD©a
;

746 
hußπ
->
RxX„rSize
 = 
Size
;

747 
hußπ
->
RxX„rCou¡
 = 
Size
;

749 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

750 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_RX
;

753 
	`__HAL_UNLOCK
(
hußπ
);

756 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_RXNE
);

759 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_PE
);

762 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_ERR
);

765 
hußπ
->
In°™˚
->
DR
 = (
DUMMY_DATA
 & (
uöt16_t
)0x01FF);

767  
HAL_OK
;

771  
HAL_BUSY
;

773 
	}
}

784 
HAL_SètusTy≥Def
 
	$HAL_USART_TønsmôRe˚ive_IT
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
)

786 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

788 if((
pTxD©a
 =
NULL
Ë|| (
pRxD©a
 =NULLË|| (
Size
 == 0))

790  
HAL_ERROR
;

793 
	`__HAL_LOCK
(
hußπ
);

795 
hußπ
->
pRxBuffPå
 = 
pRxD©a
;

796 
hußπ
->
RxX„rSize
 = 
Size
;

797 
hußπ
->
RxX„rCou¡
 = 
Size
;

798 
hußπ
->
pTxBuffPå
 = 
pTxD©a
;

799 
hußπ
->
TxX„rSize
 = 
Size
;

800 
hußπ
->
TxX„rCou¡
 = 
Size
;

802 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

803 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_TX_RX
;

806 
	`__HAL_UNLOCK
(
hußπ
);

809 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_RXNE
);

812 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_PE
);

815 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_ERR
);

818 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_TXE
);

820  
HAL_OK
;

824  
HAL_BUSY
;

826 
	}
}

836 
HAL_SètusTy≥Def
 
	$HAL_USART_Tønsmô_DMA
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, 
uöt16_t
 
Size
)

838 
uöt32_t
 *
tmp
;

840 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

842 if((
pTxD©a
 =
NULL
Ë|| (
Size
 == 0))

844  
HAL_ERROR
;

847 
	`__HAL_LOCK
(
hußπ
);

849 
hußπ
->
pTxBuffPå
 = 
pTxD©a
;

850 
hußπ
->
TxX„rSize
 = 
Size
;

851 
hußπ
->
TxX„rCou¡
 = 
Size
;

853 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

854 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_TX
;

857 
hußπ
->
hdm©x
->
X„rC∂tCÆlback
 = 
USART_DMATønsmôC∂t
;

860 
hußπ
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
USART_DMATxHÆfC∂t
;

863 
hußπ
->
hdm©x
->
X„rEº‹CÆlback
 = 
USART_DMAEº‹
;

866 
tmp
 = (
uöt32_t
*)&
pTxD©a
;

867 
	`HAL_DMA_Sèπ_IT
(
hußπ
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hußπ->
In°™˚
->
DR
, 
Size
);

870 
	`__HAL_USART_CLEAR_FLAG
(
hußπ
, 
USART_FLAG_TC
);

874 
hußπ
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

877 
	`__HAL_UNLOCK
(
hußπ
);

879  
HAL_OK
;

883  
HAL_BUSY
;

885 
	}
}

897 
HAL_SètusTy≥Def
 
	$HAL_USART_Re˚ive_DMA
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pRxD©a
, 
uöt16_t
 
Size
)

899 
uöt32_t
 *
tmp
;

901 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

903 if((
pRxD©a
 =
NULL
Ë|| (
Size
 == 0))

905  
HAL_ERROR
;

909 
	`__HAL_LOCK
(
hußπ
);

911 
hußπ
->
pRxBuffPå
 = 
pRxD©a
;

912 
hußπ
->
RxX„rSize
 = 
Size
;

913 
hußπ
->
pTxBuffPå
 = 
pRxD©a
;

914 
hußπ
->
TxX„rSize
 = 
Size
;

916 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

917 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_RX
;

920 
hußπ
->
hdm¨x
->
X„rC∂tCÆlback
 = 
USART_DMARe˚iveC∂t
;

923 
hußπ
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
USART_DMARxHÆfC∂t
;

926 
hußπ
->
hdm¨x
->
X„rEº‹CÆlback
 = 
USART_DMAEº‹
;

929 
tmp
 = (
uöt32_t
*)&
pRxD©a
;

930 
	`HAL_DMA_Sèπ_IT
(
hußπ
->
hdm¨x
, (
uöt32_t
)&hußπ->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, 
Size
);

935 
	`HAL_DMA_Sèπ_IT
(
hußπ
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hußπ->
In°™˚
->
DR
, 
Size
);

939 
	`__HAL_USART_CLEAR_OREFLAG
(
hußπ
);

943 
hußπ
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

947 
hußπ
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

950 
	`__HAL_UNLOCK
(
hußπ
);

952  
HAL_OK
;

956  
HAL_BUSY
;

958 
	}
}

970 
HAL_SètusTy≥Def
 
	$HAL_USART_TønsmôRe˚ive_DMA
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt8_t
 *
pTxD©a
, uöt8_à*
pRxD©a
, 
uöt16_t
 
Size
)

972 
uöt32_t
 *
tmp
;

974 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_READY
)

976 if((
pTxD©a
 =
NULL
Ë|| (
pRxD©a
 =NULLË|| (
Size
 == 0))

978  
HAL_ERROR
;

981 
	`__HAL_LOCK
(
hußπ
);

983 
hußπ
->
pRxBuffPå
 = 
pRxD©a
;

984 
hußπ
->
RxX„rSize
 = 
Size
;

985 
hußπ
->
pTxBuffPå
 = 
pTxD©a
;

986 
hußπ
->
TxX„rSize
 = 
Size
;

988 
hußπ
->
Eº‹Code
 = 
HAL_USART_ERROR_NONE
;

989 
hußπ
->
Sèã
 = 
HAL_USART_STATE_BUSY_TX_RX
;

992 
hußπ
->
hdm¨x
->
X„rC∂tCÆlback
 = 
USART_DMARe˚iveC∂t
;

995 
hußπ
->
hdm¨x
->
X„rHÆfC∂tCÆlback
 = 
USART_DMARxHÆfC∂t
;

998 
hußπ
->
hdm©x
->
X„rC∂tCÆlback
 = 
USART_DMATønsmôC∂t
;

1001 
hußπ
->
hdm©x
->
X„rHÆfC∂tCÆlback
 = 
USART_DMATxHÆfC∂t
;

1004 
hußπ
->
hdm©x
->
X„rEº‹CÆlback
 = 
USART_DMAEº‹
;

1007 
hußπ
->
hdm¨x
->
X„rEº‹CÆlback
 = 
USART_DMAEº‹
;

1010 
tmp
 = (
uöt32_t
*)&
pRxD©a
;

1011 
	`HAL_DMA_Sèπ_IT
(
hußπ
->
hdm¨x
, (
uöt32_t
)&hußπ->
In°™˚
->
DR
, *(uöt32_t*)
tmp
, 
Size
);

1014 
tmp
 = (
uöt32_t
*)&
pTxD©a
;

1015 
	`HAL_DMA_Sèπ_IT
(
hußπ
->
hdm©x
, *(
uöt32_t
*)
tmp
, (uöt32_t)&hußπ->
In°™˚
->
DR
, 
Size
);

1018 
	`__HAL_USART_CLEAR_FLAG
(
hußπ
, 
USART_FLAG_TC
);

1021 
	`__HAL_USART_CLEAR_OREFLAG
(
hußπ
);

1025 
hußπ
->
In°™˚
->
CR3
 |
USART_CR3_DMAR
;

1029 
hußπ
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

1032 
	`__HAL_UNLOCK
(
hußπ
);

1034  
HAL_OK
;

1038  
HAL_BUSY
;

1040 
	}
}

1048 
HAL_SètusTy≥Def
 
	$HAL_USART_DMAPau£
(
USART_H™dÀTy≥Def
 *
hußπ
)

1051 
	`__HAL_LOCK
(
hußπ
);

1054 
hußπ
->
In°™˚
->
CR3
 &(
uöt32_t
)(~
USART_CR3_DMAT
);

1057 
	`__HAL_UNLOCK
(
hußπ
);

1059  
HAL_OK
;

1060 
	}
}

1068 
HAL_SètusTy≥Def
 
	$HAL_USART_DMAResume
(
USART_H™dÀTy≥Def
 *
hußπ
)

1071 
	`__HAL_LOCK
(
hußπ
);

1074 
hußπ
->
In°™˚
->
CR3
 |
USART_CR3_DMAT
;

1077 
	`__HAL_UNLOCK
(
hußπ
);

1079  
HAL_OK
;

1080 
	}
}

1088 
HAL_SètusTy≥Def
 
	$HAL_USART_DMASt›
(
USART_H™dÀTy≥Def
 *
hußπ
)

1097 if(
hußπ
->
hdm©x
 !
NULL
)

1099 
	`HAL_DMA_Ab‹t
(
hußπ
->
hdm©x
);

1102 if(
hußπ
->
hdm¨x
 !
NULL
)

1104 
	`HAL_DMA_Ab‹t
(
hußπ
->
hdm¨x
);

1108 
hußπ
->
In°™˚
->
CR3
 &~
USART_CR3_DMAT
;

1109 
hußπ
->
In°™˚
->
CR3
 &~
USART_CR3_DMAR
;

1111 
hußπ
->
Sèã
 = 
HAL_USART_STATE_READY
;

1113  
HAL_OK
;

1114 
	}
}

1122 
	$HAL_USART_IRQH™dÀr
(
USART_H™dÀTy≥Def
 *
hußπ
)

1124 
uöt32_t
 
tmp1
 = 0, 
tmp2
 = 0;

1126 
tmp1
 = 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_PE
);

1127 
tmp2
 = 
	`__HAL_USART_GET_IT_SOURCE
(
hußπ
, 
USART_IT_PE
);

1129 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1131 
	`__HAL_USART_CLEAR_PEFLAG
(
hußπ
);

1132 
hußπ
->
Eº‹Code
 |
HAL_USART_ERROR_PE
;

1135 
tmp1
 = 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_FE
);

1136 
tmp2
 = 
	`__HAL_USART_GET_IT_SOURCE
(
hußπ
, 
USART_IT_ERR
);

1138 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1140 
	`__HAL_USART_CLEAR_FEFLAG
(
hußπ
);

1141 
hußπ
->
Eº‹Code
 |
HAL_USART_ERROR_FE
;

1144 
tmp1
 = 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_NE
);

1145 
tmp2
 = 
	`__HAL_USART_GET_IT_SOURCE
(
hußπ
, 
USART_IT_ERR
);

1147 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1149 
	`__HAL_USART_CLEAR_NEFLAG
(
hußπ
);

1150 
hußπ
->
Eº‹Code
 |
HAL_USART_ERROR_NE
;

1153 
tmp1
 = 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_ORE
);

1154 
tmp2
 = 
	`__HAL_USART_GET_IT_SOURCE
(
hußπ
, 
USART_IT_ERR
);

1156 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1158 
	`__HAL_USART_CLEAR_OREFLAG
(
hußπ
);

1159 
hußπ
->
Eº‹Code
 |
HAL_USART_ERROR_ORE
;

1162 if(
hußπ
->
Eº‹Code
 !
HAL_USART_ERROR_NONE
)

1165 
hußπ
->
Sèã
 = 
HAL_USART_STATE_READY
;

1167 
	`HAL_USART_Eº‹CÆlback
(
hußπ
);

1170 
tmp1
 = 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_RXNE
);

1171 
tmp2
 = 
	`__HAL_USART_GET_IT_SOURCE
(
hußπ
, 
USART_IT_RXNE
);

1173 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1175 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_RX
)

1177 
	`USART_Re˚ive_IT
(
hußπ
);

1181 
	`USART_TønsmôRe˚ive_IT
(
hußπ
);

1185 
tmp1
 = 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_TXE
);

1186 
tmp2
 = 
	`__HAL_USART_GET_IT_SOURCE
(
hußπ
, 
USART_IT_TXE
);

1188 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1190 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_TX
)

1192 
	`USART_Tønsmô_IT
(
hußπ
);

1196 
	`USART_TønsmôRe˚ive_IT
(
hußπ
);

1200 
tmp1
 = 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_TC
);

1201 
tmp2
 = 
	`__HAL_USART_GET_IT_SOURCE
(
hußπ
, 
USART_IT_TC
);

1203 if((
tmp1
 !
RESET
Ë&& (
tmp2
 != RESET))

1205 
	`USART_EndTønsmô_IT
(
hußπ
);

1207 
	}
}

1215 
__wók
 
	$HAL_USART_TxC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
)

1220 
	}
}

1228 
__wók
 
	$HAL_USART_TxHÆfC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
)

1233 
	}
}

1241 
__wók
 
	$HAL_USART_RxC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
)

1246 
	}
}

1254 
__wók
 
	$HAL_USART_RxHÆfC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
)

1259 
	}
}

1267 
__wók
 
	$HAL_USART_TxRxC∂tCÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
)

1272 
	}
}

1280 
__wók
 
	$HAL_USART_Eº‹CÆlback
(
USART_H™dÀTy≥Def
 *
hußπ
)

1285 
	}
}

1316 
HAL_USART_SèãTy≥Def
 
	$HAL_USART_GëSèã
(
USART_H™dÀTy≥Def
 *
hußπ
)

1318  
hußπ
->
Sèã
;

1319 
	}
}

1327 
uöt32_t
 
	$HAL_USART_GëEº‹
(
USART_H™dÀTy≥Def
 *
hußπ
)

1329  
hußπ
->
Eº‹Code
;

1330 
	}
}

1342 
	$USART_DMATønsmôC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1344 
USART_H™dÀTy≥Def
* 
hußπ
 = ( USART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1346 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1348 
hußπ
->
TxX„rCou¡
 = 0;

1349 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_TX
)

1353 
	`CLEAR_BIT
(
hußπ
->
In°™˚
->
CR3
, 
USART_CR3_DMAT
);

1356 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_TC
);

1362 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_TX
)

1364 
	`HAL_USART_TxC∂tCÆlback
(
hußπ
);

1367 
	}
}

1375 
	$USART_DMATxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1377 
USART_H™dÀTy≥Def
* 
hußπ
 = (USART_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1379 
	`HAL_USART_TxHÆfC∂tCÆlback
(
hußπ
);

1380 
	}
}

1387 
	$USART_DMARe˚iveC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1389 
USART_H™dÀTy≥Def
* 
hußπ
 = ( USART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1391 if((
hdma
->
In°™˚
->
CR
 & 
DMA_SxCR_CIRC
) == 0)

1393 
hußπ
->
RxX„rCou¡
 = 0;

1394 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_RX
)

1398 
hußπ
->
In°™˚
->
CR3
 &~(
USART_CR3_DMAR
);

1400 
hußπ
->
Sèã

HAL_USART_STATE_READY
;

1401 
	`HAL_USART_RxC∂tCÆlback
(
hußπ
);

1408 
hußπ
->
In°™˚
->
CR3
 &~(
USART_CR3_DMAR
);

1409 
hußπ
->
In°™˚
->
CR3
 &~(
USART_CR3_DMAT
);

1411 
hußπ
->
Sèã

HAL_USART_STATE_READY
;

1412 
	`HAL_USART_TxRxC∂tCÆlback
(
hußπ
);

1418 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_RX
)

1420 
	`HAL_USART_RxC∂tCÆlback
(
hußπ
);

1425 
	`HAL_USART_TxRxC∂tCÆlback
(
hußπ
);

1428 
	}
}

1436 
	$USART_DMARxHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

1438 
USART_H™dÀTy≥Def
* 
hußπ
 = (USART_H™dÀTy≥Def*)((
DMA_H™dÀTy≥Def
*)
hdma
)->
P¨ít
;

1440 
	`HAL_USART_RxHÆfC∂tCÆlback
(
hußπ
);

1441 
	}
}

1448 
	$USART_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

1450 
USART_H™dÀTy≥Def
* 
hußπ
 = ( USART_H™dÀTy≥Def* )((
DMA_H™dÀTy≥Def
* )
hdma
)->
P¨ít
;

1452 
hußπ
->
RxX„rCou¡
 = 0;

1453 
hußπ
->
TxX„rCou¡
 = 0;

1454 
hußπ
->
Eº‹Code
 |
HAL_USART_ERROR_DMA
;

1455 
hußπ
->
Sèã

HAL_USART_STATE_READY
;

1457 
	`HAL_USART_Eº‹CÆlback
(
hußπ
);

1458 
	}
}

1469 
HAL_SètusTy≥Def
 
	$USART_WaôOnFœgU¡ûTimeout
(
USART_H™dÀTy≥Def
 *
hußπ
, 
uöt32_t
 
Fœg
, 
FœgSètus
 
Sètus
, uöt32_à
Timeout
)

1471 
uöt32_t
 
tick°¨t
 = 0;

1474 
tick°¨t
 = 
	`HAL_GëTick
();

1477 if(
Sètus
 =
RESET
)

1479 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
Fœg
Ë=
RESET
)

1482 if(
Timeout
 !
HAL_MAX_DELAY
)

1484 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1487 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_TXE
);

1488 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_RXNE
);

1489 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_PE
);

1490 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_ERR
);

1492 
hußπ
->
Sèã

HAL_USART_STATE_READY
;

1495 
	`__HAL_UNLOCK
(
hußπ
);

1497  
HAL_TIMEOUT
;

1504 
	`__HAL_USART_GET_FLAG
(
hußπ
, 
Fœg
Ë!
RESET
)

1507 if(
Timeout
 !
HAL_MAX_DELAY
)

1509 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1512 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_TXE
);

1513 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_RXNE
);

1514 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_PE
);

1515 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_ERR
);

1517 
hußπ
->
Sèã

HAL_USART_STATE_READY
;

1520 
	`__HAL_UNLOCK
(
hußπ
);

1522  
HAL_TIMEOUT
;

1527  
HAL_OK
;

1528 
	}
}

1538 
HAL_SètusTy≥Def
 
	$USART_Tønsmô_IT
(
USART_H™dÀTy≥Def
 *
hußπ
)

1540 
uöt16_t
* 
tmp
;

1542 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_TX
)

1544 if(
hußπ
->
Inô
.
W‹dLígth
 =
USART_WORDLENGTH_9B
)

1546 
tmp
 = (
uöt16_t
*Ë
hußπ
->
pTxBuffPå
;

1547 
hußπ
->
In°™˚
->
DR
 = (
uöt16_t
)(*
tmp
 & (uint16_t)0x01FF);

1548 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

1550 
hußπ
->
pTxBuffPå
 += 2;

1554 
hußπ
->
pTxBuffPå
 += 1;

1559 
hußπ
->
In°™˚
->
DR
 = (
uöt8_t
)(*hußπ->
pTxBuffPå
++ & (uint8_t)0x00FF);

1562 if(--
hußπ
->
TxX„rCou¡
 == 0)

1565 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_TXE
);

1568 
	`__HAL_USART_ENABLE_IT
(
hußπ
, 
USART_IT_TC
);

1570  
HAL_OK
;

1574  
HAL_BUSY
;

1576 
	}
}

1584 
HAL_SètusTy≥Def
 
	$USART_EndTønsmô_IT
(
USART_H™dÀTy≥Def
 *
hußπ
)

1587 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_TC
);

1590 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_ERR
);

1592 
hußπ
->
Sèã
 = 
HAL_USART_STATE_READY
;

1594 
	`HAL_USART_TxC∂tCÆlback
(
hußπ
);

1596  
HAL_OK
;

1597 
	}
}

1605 
HAL_SètusTy≥Def
 
	$USART_Re˚ive_IT
(
USART_H™dÀTy≥Def
 *
hußπ
)

1607 
uöt16_t
* 
tmp
;

1608 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_RX
)

1610 if(
hußπ
->
Inô
.
W‹dLígth
 =
USART_WORDLENGTH_9B
)

1612 
tmp
 = (
uöt16_t
*Ë
hußπ
->
pRxBuffPå
;

1613 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

1615 *
tmp
 = (
uöt16_t
)(
hußπ
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

1616 
hußπ
->
pRxBuffPå
 += 2;

1620 *
tmp
 = (
uöt16_t
)(
hußπ
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

1621 
hußπ
->
pRxBuffPå
 += 1;

1623 if(--
hußπ
->
RxX„rCou¡
 != 0x00)

1626 
hußπ
->
In°™˚
->
DR
 = (
DUMMY_DATA
 & (
uöt16_t
)0x01FF);

1631 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

1633 *
hußπ
->
pRxBuffPå
++ = (
uöt8_t
)(hußπ->
In°™˚
->
DR
 & (uint8_t)0x00FF);

1637 *
hußπ
->
pRxBuffPå
++ = (
uöt8_t
)(hußπ->
In°™˚
->
DR
 & (uint8_t)0x007F);

1640 if(--
hußπ
->
RxX„rCou¡
 != 0x00)

1643 
hußπ
->
In°™˚
->
DR
 = (
DUMMY_DATA
 & (
uöt16_t
)0x00FF);

1647 if(
hußπ
->
RxX„rCou¡
 == 0)

1650 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_RXNE
);

1653 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_PE
);

1656 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_ERR
);

1658 
hußπ
->
Sèã
 = 
HAL_USART_STATE_READY
;

1659 
	`HAL_USART_RxC∂tCÆlback
(
hußπ
);

1661  
HAL_OK
;

1663  
HAL_OK
;

1667  
HAL_BUSY
;

1669 
	}
}

1677 
HAL_SètusTy≥Def
 
	$USART_TønsmôRe˚ive_IT
(
USART_H™dÀTy≥Def
 *
hußπ
)

1679 
uöt16_t
* 
tmp
;

1681 if(
hußπ
->
Sèã
 =
HAL_USART_STATE_BUSY_TX_RX
)

1683 if(
hußπ
->
TxX„rCou¡
 != 0x00)

1685 if(
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_TXE
Ë!
RESET
)

1687 if(
hußπ
->
Inô
.
W‹dLígth
 =
USART_WORDLENGTH_9B
)

1689 
tmp
 = (
uöt16_t
*Ë
hußπ
->
pTxBuffPå
;

1690 
hußπ
->
In°™˚
->
DR
 = (
uöt16_t
)(*
tmp
 & (uint16_t)0x01FF);

1691 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

1693 
hußπ
->
pTxBuffPå
 += 2;

1697 
hußπ
->
pTxBuffPå
 += 1;

1702 
hußπ
->
In°™˚
->
DR
 = (
uöt8_t
)(*hußπ->
pTxBuffPå
++ & (uint8_t)0x00FF);

1704 
hußπ
->
TxX„rCou¡
--;

1707 if(
hußπ
->
TxX„rCou¡
 == 0)

1709 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_TXE
);

1714 if(
hußπ
->
RxX„rCou¡
 != 0x00)

1716 if(
	`__HAL_USART_GET_FLAG
(
hußπ
, 
USART_FLAG_RXNE
Ë!
RESET
)

1718 if(
hußπ
->
Inô
.
W‹dLígth
 =
USART_WORDLENGTH_9B
)

1720 
tmp
 = (
uöt16_t
*Ë
hußπ
->
pRxBuffPå
;

1721 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

1723 *
tmp
 = (
uöt16_t
)(
hußπ
->
In°™˚
->
DR
 & (uint16_t)0x01FF);

1724 
hußπ
->
pRxBuffPå
 += 2;

1728 *
tmp
 = (
uöt16_t
)(
hußπ
->
In°™˚
->
DR
 & (uint16_t)0x00FF);

1729 
hußπ
->
pRxBuffPå
 += 1;

1734 if(
hußπ
->
Inô
.
P¨ôy
 =
USART_PARITY_NONE
)

1736 *
hußπ
->
pRxBuffPå
++ = (
uöt8_t
)(hußπ->
In°™˚
->
DR
 & (uint8_t)0x00FF);

1740 *
hußπ
->
pRxBuffPå
++ = (
uöt8_t
)(hußπ->
In°™˚
->
DR
 & (uint8_t)0x007F);

1743 
hußπ
->
RxX„rCou¡
--;

1748 if(
hußπ
->
RxX„rCou¡
 == 0)

1750 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_RXNE
);

1753 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_PE
);

1756 
	`__HAL_USART_DISABLE_IT
(
hußπ
, 
USART_IT_ERR
);

1758 
hußπ
->
Sèã
 = 
HAL_USART_STATE_READY
;

1760 
	`HAL_USART_TxRxC∂tCÆlback
(
hußπ
);

1762  
HAL_OK
;

1765  
HAL_OK
;

1769  
HAL_BUSY
;

1771 
	}
}

1779 
	$USART_SëC⁄fig
(
USART_H™dÀTy≥Def
 *
hußπ
)

1781 
uöt32_t
 
tm¥eg
 = 0x00;

1784 
	`as£π_∑øm
(
	`IS_USART_INSTANCE
(
hußπ
->
In°™˚
));

1785 
	`as£π_∑øm
(
	`IS_USART_POLARITY
(
hußπ
->
Inô
.
CLKPﬁ¨ôy
));

1786 
	`as£π_∑øm
(
	`IS_USART_PHASE
(
hußπ
->
Inô
.
CLKPha£
));

1787 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
hußπ
->
Inô
.
CLKLa°Bô
));

1788 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
hußπ
->
Inô
.
BaudR©e
));

1789 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
hußπ
->
Inô
.
W‹dLígth
));

1790 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
hußπ
->
Inô
.
St›Bôs
));

1791 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
hußπ
->
Inô
.
P¨ôy
));

1792 
	`as£π_∑øm
(
	`IS_USART_MODE
(
hußπ
->
Inô
.
Mode
));

1796 
hußπ
->
In°™˚
->
CR1
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_TE
 | 
USART_CR1_RE
));

1799 
tm¥eg
 = 
hußπ
->
In°™˚
->
CR2
;

1801 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR2_CPHA
 | 
USART_CR2_CPOL
 | 
USART_CR2_CLKEN
 | 
USART_CR2_LBCL
 | 
USART_CR2_STOP
));

1807 
tm¥eg
 |(
uöt32_t
)(
USART_CLOCK_ENABLE
| 
hußπ
->
Inô
.
CLKPﬁ¨ôy
 |

1808 
hußπ
->
Inô
.
CLKPha£
| hußπ->Inô.
CLKLa°Bô
 | hußπ->Inô.
St›Bôs
);

1810 
hußπ
->
In°™˚
->
CR2
 = (
uöt32_t
)
tm¥eg
;

1813 
tm¥eg
 = 
hußπ
->
In°™˚
->
CR1
;

1816 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
USART_CR1_M
 | 
USART_CR1_PCE
 | 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

1817 
USART_CR1_RE
 | 
USART_CR1_OVER8
));

1824 
tm¥eg
 |(
uöt32_t
)
hußπ
->
Inô
.
W‹dLígth
 | hußπ->Inô.
P¨ôy
 | hußπ->Inô.
Mode
 | 
USART_CR1_OVER8
;

1827 
hußπ
->
In°™˚
->
CR1
 = (
uöt32_t
)
tm¥eg
;

1831 
hußπ
->
In°™˚
->
CR3
 &(
uöt32_t
)~((uöt32_t)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
));

1834 if((
hußπ
->
In°™˚
 =
USART1
Ë|| (hußπ->In°™˚ =
USART6
))

1836 
hußπ
->
In°™˚
->
BRR
 = 
	`USART_BRR
(
	`HAL_RCC_GëPCLK2Fªq
(), hußπ->
Inô
.
BaudR©e
);

1840 
hußπ
->
In°™˚
->
BRR
 = 
	`USART_BRR
(
	`HAL_RCC_GëPCLK1Fªq
(), hußπ->
Inô
.
BaudR©e
);

1842 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_wwdg.c

101 
	~"°m32f4xx_hÆ.h
"

112 #ifde‡
HAL_WWDG_MODULE_ENABLED


150 
HAL_SètusTy≥Def
 
	$HAL_WWDG_Inô
(
WWDG_H™dÀTy≥Def
 *
hwwdg
)

153 if(
hwwdg
 =
NULL
)

155  
HAL_ERROR
;

159 
	`as£π_∑øm
(
	`IS_WWDG_ALL_INSTANCE
(
hwwdg
->
In°™˚
));

160 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
hwwdg
->
Inô
.
PªsˇÀr
));

161 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW
(
hwwdg
->
Inô
.
Wödow
));

162 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
hwwdg
->
Inô
.
Cou¡î
));

164 if(
hwwdg
->
Sèã
 =
HAL_WWDG_STATE_RESET
)

167 
hwwdg
->
Lock
 = 
HAL_UNLOCKED
;

169 
	`HAL_WWDG_M•Inô
(
hwwdg
);

173 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_BUSY
;

176 
	`MODIFY_REG
(
hwwdg
->
In°™˚
->
CFR
, (
WWDG_CFR_WDGTB
 | 
WWDG_CFR_W
), (hwwdg->
Inô
.
PªsˇÀr
 | hwwdg->Inô.
Wödow
));

178 
	`MODIFY_REG
(
hwwdg
->
In°™˚
->
CR
, 
WWDG_CR_T
, hwwdg->
Inô
.
Cou¡î
);

181 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_READY
;

184  
HAL_OK
;

185 
	}
}

193 
HAL_SètusTy≥Def
 
	$HAL_WWDG_DeInô
(
WWDG_H™dÀTy≥Def
 *
hwwdg
)

196 if(
hwwdg
 =
NULL
)

198  
HAL_ERROR
;

202 
	`as£π_∑øm
(
	`IS_WWDG_ALL_INSTANCE
(
hwwdg
->
In°™˚
));

205 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_BUSY
;

208 
	`HAL_WWDG_M•DeInô
(
hwwdg
);

211 
hwwdg
->
In°™˚
->
CR
 = (
uöt32_t
)0x0000007F;

214 
hwwdg
->
In°™˚
->
CFR
 = (
uöt32_t
)0x0000007F;

217 
hwwdg
->
In°™˚
->
SR
 = 0;

220 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_RESET
;

223 
	`__HAL_UNLOCK
(
hwwdg
);

226  
HAL_OK
;

227 
	}
}

235 
__wók
 
	$HAL_WWDG_M•Inô
(
WWDG_H™dÀTy≥Def
 *
hwwdg
)

240 
	}
}

248 
__wók
 
	$HAL_WWDG_M•DeInô
(
WWDG_H™dÀTy≥Def
 *
hwwdg
)

253 
	}
}

282 
HAL_SètusTy≥Def
 
	$HAL_WWDG_Sèπ
(
WWDG_H™dÀTy≥Def
 *
hwwdg
)

285 
	`__HAL_LOCK
(
hwwdg
);

288 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_BUSY
;

291 
	`__HAL_WWDG_ENABLE
(
hwwdg
);

294 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_READY
;

297 
	`__HAL_UNLOCK
(
hwwdg
);

300  
HAL_OK
;

301 
	}
}

309 
HAL_SètusTy≥Def
 
	$HAL_WWDG_Sèπ_IT
(
WWDG_H™dÀTy≥Def
 *
hwwdg
)

312 
	`__HAL_LOCK
(
hwwdg
);

315 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_BUSY
;

318 
	`__HAL_WWDG_ENABLE_IT
(
hwwdg
, 
WWDG_IT_EWI
);

321 
	`__HAL_WWDG_ENABLE
(
hwwdg
);

324  
HAL_OK
;

325 
	}
}

334 
HAL_SètusTy≥Def
 
	$HAL_WWDG_Re‰esh
(
WWDG_H™dÀTy≥Def
 *
hwwdg
, 
uöt32_t
 
Cou¡î
)

337 
	`__HAL_LOCK
(
hwwdg
);

340 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_BUSY
;

343 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

346 
	`MODIFY_REG
(
hwwdg
->
In°™˚
->
CR
, (
uöt32_t
)
WWDG_CR_T
, 
Cou¡î
);

349 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_READY
;

352 
	`__HAL_UNLOCK
(
hwwdg
);

355  
HAL_OK
;

356 
	}
}

371 
	$HAL_WWDG_IRQH™dÀr
(
WWDG_H™dÀTy≥Def
 *
hwwdg
)

374 if(
	`__HAL_WWDG_GET_IT_SOURCE
(
hwwdg
, 
WWDG_IT_EWI
Ë!
RESET
)

377 if(
	`__HAL_WWDG_GET_FLAG
(
hwwdg
, 
WWDG_FLAG_EWIF
Ë!
RESET
)

380 
	`HAL_WWDG_WakeupCÆlback
(
hwwdg
);

383 
hwwdg
->
Sèã
 = 
HAL_WWDG_STATE_READY
;

386 
	`__HAL_WWDG_CLEAR_FLAG
(
hwwdg
, 
WWDG_FLAG_EWIF
);

389 
	`__HAL_UNLOCK
(
hwwdg
);

392 
	}
}

400 
__wók
 
	$HAL_WWDG_WakeupCÆlback
(
WWDG_H™dÀTy≥Def
* 
hwwdg
)

405 
	}
}

432 
HAL_WWDG_SèãTy≥Def
 
	$HAL_WWDG_GëSèã
(
WWDG_H™dÀTy≥Def
 *
hwwdg
)

434  
hwwdg
->
Sèã
;

435 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_fmc.c

77 
	~"°m32f4xx_hÆ.h
"

88 #i‡
deföed
 (
HAL_SRAM_MODULE_ENABLED
Ë|| deföed(
HAL_NOR_MODULE_ENABLED
Ë|| deföed(
HAL_NAND_MODULE_ENABLED
Ë|| deföed(
HAL_PCCARD_MODULE_ENABLED
Ë|| deföed(
HAL_SDRAM_MODULE_ENABLED
)

90 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

151 
HAL_SètusTy≥Def
 
	$FMC_NORSRAM_Inô
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FMC_NORSRAM_InôTy≥Def
* 
Inô
)

153 
uöt32_t
 
tm¥
 = 0;

156 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_DEVICE
(
Devi˚
));

157 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
Inô
->
NSB™k
));

158 
	`as£π_∑øm
(
	`IS_FMC_MUX
(
Inô
->
D©aAddªssMux
));

159 
	`as£π_∑øm
(
	`IS_FMC_MEMORY
(
Inô
->
Mem‹yTy≥
));

160 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_MEMORY_WIDTH
(
Inô
->
Mem‹yD©aWidth
));

161 
	`as£π_∑øm
(
	`IS_FMC_BURSTMODE
(
Inô
->
Bur°Ac˚ssMode
));

162 
	`as£π_∑øm
(
	`IS_FMC_WAIT_POLARITY
(
Inô
->
WaôSig«lPﬁ¨ôy
));

163 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

164 
	`as£π_∑øm
(
	`IS_FMC_WRAP_MODE
(
Inô
->
WøpMode
));

166 
	`as£π_∑øm
(
	`IS_FMC_WAIT_SIGNAL_ACTIVE
(
Inô
->
WaôSig«lA˘ive
));

167 
	`as£π_∑øm
(
	`IS_FMC_WRITE_OPERATION
(
Inô
->
WrôeO≥øti⁄
));

168 
	`as£π_∑øm
(
	`IS_FMC_WAITE_SIGNAL
(
Inô
->
WaôSig«l
));

169 
	`as£π_∑øm
(
	`IS_FMC_EXTENDED_MODE
(
Inô
->
ExãndedMode
));

170 
	`as£π_∑øm
(
	`IS_FMC_ASYNWAIT
(
Inô
->
Asynchr⁄ousWaô
));

171 
	`as£π_∑øm
(
	`IS_FMC_WRITE_BURST
(
Inô
->
WrôeBur°
));

172 
	`as£π_∑øm
(
	`IS_FMC_CONTINOUS_CLOCK
(
Inô
->
C⁄töuousClock
));

173 #i‡
	`deföed
 (
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

174 
	`as£π_∑øm
(
	`IS_FMC_WRITE_FIFO
(
Inô
->
WrôeFifo
));

175 
	`as£π_∑øm
(
	`IS_FMC_PAGESIZE
(
Inô
->
PageSize
));

179 
tm¥
 = 
Devi˚
->
BTCR
[
Inô
->
NSB™k
];

181 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

184 
tm¥
 &((
uöt32_t
)~(
FMC_BCR1_MBKEN
 | 
FMC_BCR1_MUXEN
 | 
FMC_BCR1_MTYP
 | \

185 
FMC_BCR1_MWID
 | 
FMC_BCR1_FACCEN
 | 
FMC_BCR1_BURSTEN
 | \

186 
FMC_BCR1_WAITPOL
 | 
FMC_BCR1_WRAPMOD
 | 
FMC_BCR1_WAITCFG
 | \

187 
FMC_BCR1_WREN
 | 
FMC_BCR1_WAITEN
 | 
FMC_BCR1_EXTMOD
 | \

188 
FMC_BCR1_ASYNCWAIT
 | 
FMC_BCR1_CBURSTRW
 | 
FMC_BCR1_CCLKEN
));

191 
tm¥
 |(
uöt32_t
)(
Inô
->
D©aAddªssMux
 |\

192 
Inô
->
Mem‹yTy≥
 |\

193 
Inô
->
Mem‹yD©aWidth
 |\

194 
Inô
->
Bur°Ac˚ssMode
 |\

195 
Inô
->
WaôSig«lPﬁ¨ôy
 |\

196 
Inô
->
WøpMode
 |\

197 
Inô
->
WaôSig«lA˘ive
 |\

198 
Inô
->
WrôeO≥øti⁄
 |\

199 
Inô
->
WaôSig«l
 |\

200 
Inô
->
ExãndedMode
 |\

201 
Inô
->
Asynchr⁄ousWaô
 |\

202 
Inô
->
WrôeBur°
 |\

203 
Inô
->
C⁄töuousClock
);

207 
tm¥
 &((
uöt32_t
)~(
FMC_BCR1_MBKEN
 | 
FMC_BCR1_MUXEN
 | 
FMC_BCR1_MTYP
 | \

208 
FMC_BCR1_MWID
 | 
FMC_BCR1_FACCEN
 | 
FMC_BCR1_BURSTEN
 | \

209 
FMC_BCR1_WAITPOL
 | 
FMC_BCR1_WAITCFG
 | 
FMC_BCR1_CPSIZE
 | \

210 
FMC_BCR1_WREN
 | 
FMC_BCR1_WAITEN
 | 
FMC_BCR1_EXTMOD
 | \

211 
FMC_BCR1_ASYNCWAIT
 | 
FMC_BCR1_CBURSTRW
 | 
FMC_BCR1_CCLKEN
 | \

212 
FMC_BCR1_WFDIS
));

215 
tm¥
 |(
uöt32_t
)(
Inô
->
D©aAddªssMux
 |\

216 
Inô
->
Mem‹yTy≥
 |\

217 
Inô
->
Mem‹yD©aWidth
 |\

218 
Inô
->
Bur°Ac˚ssMode
 |\

219 
Inô
->
WaôSig«lPﬁ¨ôy
 |\

220 
Inô
->
WaôSig«lA˘ive
 |\

221 
Inô
->
WrôeO≥øti⁄
 |\

222 
Inô
->
WaôSig«l
 |\

223 
Inô
->
ExãndedMode
 |\

224 
Inô
->
Asynchr⁄ousWaô
 |\

225 
Inô
->
WrôeBur°
 |\

226 
Inô
->
C⁄töuousClock
 |\

227 
Inô
->
PageSize
 |\

228 
Inô
->
WrôeFifo
);

231 if(
Inô
->
Mem‹yTy≥
 =
FMC_MEMORY_TYPE_NOR
)

233 
tm¥
 |(
uöt32_t
)
FMC_NORSRAM_FLASH_ACCESS_ENABLE
;

236 
Devi˚
->
BTCR
[
Inô
->
NSB™k
] = 
tm¥
;

239 if((
Inô
->
C⁄töuousClock
 =
FMC_CONTINUOUS_CLOCK_SYNC_ASYNC
Ë&& (Inô->
NSB™k
 !
FMC_NORSRAM_BANK1
))

241 
Inô
->
Bur°Ac˚ssMode
 = 
FMC_BURST_ACCESS_MODE_ENABLE
;

242 
Devi˚
->
BTCR
[
FMC_NORSRAM_BANK1
] |(
uöt32_t
)(
Inô
->
Bur°Ac˚ssMode
 |\

243 
Inô
->
C⁄töuousClock
);

246 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

247 if(
Inô
->
NSB™k
 !
FMC_NORSRAM_BANK1
)

249 
Devi˚
->
BTCR
[
FMC_NORSRAM_BANK1
] |(
uöt32_t
)(
Inô
->
WrôeFifo
);

253  
HAL_OK
;

254 
	}
}

263 
HAL_SètusTy≥Def
 
	$FMC_NORSRAM_DeInô
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FMC_NORSRAM_EXTENDED_Ty≥Def
 *
ExDevi˚
, 
uöt32_t
 
B™k
)

266 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_DEVICE
(
Devi˚
));

267 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_EXTENDED_DEVICE
(
ExDevi˚
));

268 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
B™k
));

271 
	`__FMC_NORSRAM_DISABLE
(
Devi˚
, 
B™k
);

275 if(
B™k
 =
FMC_NORSRAM_BANK1
)

277 
Devi˚
->
BTCR
[
B™k
] = 0x000030DB;

282 
Devi˚
->
BTCR
[
B™k
] = 0x000030D2;

285 
Devi˚
->
BTCR
[
B™k
 + 1] = 0x0FFFFFFF;

286 
ExDevi˚
->
BWTR
[
B™k
] = 0x0FFFFFFF;

288  
HAL_OK
;

289 
	}
}

299 
HAL_SètusTy≥Def
 
	$FMC_NORSRAM_Timög_Inô
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FMC_NORSRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

301 
uöt32_t
 
tm¥
 = 0;

304 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_DEVICE
(
Devi˚
));

305 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_SETUP_TIME
(
Timög
->
AddªssSëupTime
));

306 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_HOLD_TIME
(
Timög
->
AddªssHﬁdTime
));

307 
	`as£π_∑øm
(
	`IS_FMC_DATASETUP_TIME
(
Timög
->
D©aSëupTime
));

308 
	`as£π_∑øm
(
	`IS_FMC_TURNAROUND_TIME
(
Timög
->
BusTu∫AroundDuøti⁄
));

309 
	`as£π_∑øm
(
	`IS_FMC_CLK_DIV
(
Timög
->
CLKDivisi⁄
));

310 
	`as£π_∑øm
(
	`IS_FMC_DATA_LATENCY
(
Timög
->
D©aL©ícy
));

311 
	`as£π_∑øm
(
	`IS_FMC_ACCESS_MODE
(
Timög
->
Ac˚ssMode
));

312 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
B™k
));

315 
tm¥
 = 
Devi˚
->
BTCR
[
B™k
 + 1];

318 
tm¥
 &((
uöt32_t
)~(
FMC_BTR1_ADDSET
 | 
FMC_BTR1_ADDHLD
 | 
FMC_BTR1_DATAST
 | \

319 
FMC_BTR1_BUSTURN
 | 
FMC_BTR1_CLKDIV
 | 
FMC_BTR1_DATLAT
 | \

320 
FMC_BTR1_ACCMOD
));

323 
tm¥
 |(
uöt32_t
)(
Timög
->
AddªssSëupTime
 |\

324 ((
Timög
->
AddªssHﬁdTime
) << 4) |\

325 ((
Timög
->
D©aSëupTime
) << 8) |\

326 ((
Timög
->
BusTu∫AroundDuøti⁄
) << 16) |\

327 (((
Timög
->
CLKDivisi⁄
)-1) << 20) |\

328 (((
Timög
->
D©aL©ícy
)-2) << 24) |\

329 (
Timög
->
Ac˚ssMode
));

331 
Devi˚
->
BTCR
[
B™k
 + 1] = 
tm¥
;

334 if(
	`HAL_IS_BIT_SET
(
Devi˚
->
BTCR
[
FMC_NORSRAM_BANK1
], 
FMC_BCR1_CCLKEN
))

336 
tm¥
 = (
uöt32_t
)(
Devi˚
->
BTCR
[
FMC_NORSRAM_BANK1
 + 1] & ~(((uint32_t)0x0F) << 20));

337 
tm¥
 |(
uöt32_t
)(((
Timög
->
CLKDivisi⁄
)-1) << 20);

338 
Devi˚
->
BTCR
[
FMC_NORSRAM_BANK1
 + 1] = 
tm¥
;

341  
HAL_OK
;

342 
	}
}

352 
HAL_SètusTy≥Def
 
	$FMC_NORSRAM_Exãnded_Timög_Inô
(
FMC_NORSRAM_EXTENDED_Ty≥Def
 *
Devi˚
, 
FMC_NORSRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
, uöt32_à
ExãndedMode
)

354 
uöt32_t
 
tm¥
 = 0;

357 
	`as£π_∑øm
(
	`IS_FMC_EXTENDED_MODE
(
ExãndedMode
));

360 if(
ExãndedMode
 =
FMC_EXTENDED_MODE_ENABLE
)

363 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_EXTENDED_DEVICE
(
Devi˚
));

364 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_SETUP_TIME
(
Timög
->
AddªssSëupTime
));

365 
	`as£π_∑øm
(
	`IS_FMC_ADDRESS_HOLD_TIME
(
Timög
->
AddªssHﬁdTime
));

366 
	`as£π_∑øm
(
	`IS_FMC_DATASETUP_TIME
(
Timög
->
D©aSëupTime
));

367 
	`as£π_∑øm
(
	`IS_FMC_TURNAROUND_TIME
(
Timög
->
BusTu∫AroundDuøti⁄
));

368 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

369 
	`as£π_∑øm
(
	`IS_FMC_CLK_DIV
(
Timög
->
CLKDivisi⁄
));

370 
	`as£π_∑øm
(
	`IS_FMC_DATA_LATENCY
(
Timög
->
D©aL©ícy
));

372 
	`as£π_∑øm
(
	`IS_FMC_ACCESS_MODE
(
Timög
->
Ac˚ssMode
));

373 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
B™k
));

376 
tm¥
 = 
Devi˚
->
BWTR
[
B™k
];

378 #i‡
	`deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

380 
tm¥
 &((
uöt32_t
)~(
FMC_BWTR1_ADDSET
 | 
FMC_BWTR1_ADDHLD
 | 
FMC_BWTR1_DATAST
 | \

381 
FMC_BWTR1_BUSTURN
 | 
FMC_BWTR1_CLKDIV
 | 
FMC_BWTR1_DATLAT
 | \

382 
FMC_BWTR1_ACCMOD
));

384 
tm¥
 |(
uöt32_t
)(
Timög
->
AddªssSëupTime
 |\

385 ((
Timög
->
AddªssHﬁdTime
) << 4) |\

386 ((
Timög
->
D©aSëupTime
) << 8) |\

387 ((
Timög
->
BusTu∫AroundDuøti⁄
) << 16) |\

388 (((
Timög
->
CLKDivisi⁄
)-1) << 20) |\

389 (((
Timög
->
D©aL©ícy
)-2) << 24) |\

390 (
Timög
->
Ac˚ssMode
));

393 
tm¥
 &((
uöt32_t
)~(
FMC_BWTR1_ADDSET
 | 
FMC_BWTR1_ADDHLD
 | 
FMC_BWTR1_DATAST
 | \

394 
FMC_BWTR1_BUSTURN
 | 
FMC_BWTR1_ACCMOD
));

396 
tm¥
 |(
uöt32_t
)(
Timög
->
AddªssSëupTime
 |\

397 ((
Timög
->
AddªssHﬁdTime
) << 4) |\

398 ((
Timög
->
D©aSëupTime
) << 8) |\

399 ((
Timög
->
BusTu∫AroundDuøti⁄
) << 16) |\

400 (
Timög
->
Ac˚ssMode
));

403 
Devi˚
->
BWTR
[
B™k
] = 
tm¥
;

407 
Devi˚
->
BWTR
[
B™k
] = 0x0FFFFFFF;

410  
HAL_OK
;

411 
	}
}

436 
HAL_SètusTy≥Def
 
	$FMC_NORSRAM_WrôeO≥øti⁄_E«bÀ
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

439 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_DEVICE
(
Devi˚
));

440 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
B™k
));

443 
Devi˚
->
BTCR
[
B™k
] |
FMC_WRITE_OPERATION_ENABLE
;

445  
HAL_OK
;

446 
	}
}

454 
HAL_SètusTy≥Def
 
	$FMC_NORSRAM_WrôeO≥øti⁄_DißbÀ
(
FMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

457 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_DEVICE
(
Devi˚
));

458 
	`as£π_∑øm
(
	`IS_FMC_NORSRAM_BANK
(
B™k
));

461 
Devi˚
->
BTCR
[
B™k
] &~
FMC_WRITE_OPERATION_ENABLE
;

463  
HAL_OK
;

464 
	}
}

499 #i‡
deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

524 
HAL_SètusTy≥Def
 
	$FMC_NAND_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_InôTy≥Def
 *
Inô
)

526 
uöt32_t
 
tm¥
 = 0;

529 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

530 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
Inô
->
N™dB™k
));

531 
	`as£π_∑øm
(
	`IS_FMC_WAIT_FEATURE
(
Inô
->
Waô„©uª
));

532 
	`as£π_∑øm
(
	`IS_FMC_NAND_MEMORY_WIDTH
(
Inô
->
Mem‹yD©aWidth
));

533 
	`as£π_∑øm
(
	`IS_FMC_ECC_STATE
(
Inô
->
EccCompuèti⁄
));

534 
	`as£π_∑øm
(
	`IS_FMC_ECCPAGE_SIZE
(
Inô
->
ECCPageSize
));

535 
	`as£π_∑øm
(
	`IS_FMC_TCLR_TIME
(
Inô
->
TCLRSëupTime
));

536 
	`as£π_∑øm
(
	`IS_FMC_TAR_TIME
(
Inô
->
TARSëupTime
));

539 
tm¥
 = 
Devi˚
->
PCR
;

542 
tm¥
 &((
uöt32_t
)~(
FMC_PCR_PWAITEN
 | 
FMC_PCR_PBKEN
 | 
FMC_PCR_PTYP
 | \

543 
FMC_PCR_PWID
 | 
FMC_PCR_ECCEN
 | 
FMC_PCR_TCLR
 | \

544 
FMC_PCR_TAR
 | 
FMC_PCR_ECCPS
));

547 
tm¥
 |(
uöt32_t
)(
Inô
->
Waô„©uª
 |\

548 
FMC_PCR_MEMORY_TYPE_NAND
 |\

549 
Inô
->
Mem‹yD©aWidth
 |\

550 
Inô
->
EccCompuèti⁄
 |\

551 
Inô
->
ECCPageSize
 |\

552 ((
Inô
->
TCLRSëupTime
) << 9) |\

553 ((
Inô
->
TARSëupTime
) << 13));

556 
Devi˚
->
PCR
 = 
tm¥
;

558  
HAL_OK
;

559 
	}
}

569 
HAL_SètusTy≥Def
 
	$FMC_NAND_Comm⁄S∑˚_Timög_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

571 
uöt32_t
 
tm¥
 = 0;

574 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

575 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
Timög
->
SëupTime
));

576 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

577 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

578 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

579 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

582 
tm¥
 = 
Devi˚
->
PMEM
;

586 
tm¥
 &((
uöt32_t
)~(
FMC_PMEM_MEMSET2
 | 
FMC_PMEM_MEMWAIT2
 | 
FMC_PMEM_MEMHOLD2
 | \

587 
FMC_PMEM_MEMHIZ2
));

590 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

591 ((
Timög
->
WaôSëupTime
) << 8) |\

592 ((
Timög
->
HﬁdSëupTime
) << 16) |\

593 ((
Timög
->
HiZSëupTime
) << 24)

597 
Devi˚
->
PMEM
 = 
tm¥
;

599  
HAL_OK
;

600 
	}
}

610 
HAL_SètusTy≥Def
 
	$FMC_NAND_AâribuãS∑˚_Timög_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

612 
uöt32_t
 
tm¥
 = 0;

615 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

616 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
Timög
->
SëupTime
));

617 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

618 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

619 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

620 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

623 
tm¥
 = 
Devi˚
->
PATT
;

626 
tm¥
 &((
uöt32_t
)~(
FMC_PATT_ATTSET2
 | 
FMC_PATT_ATTWAIT2
 | 
FMC_PATT_ATTHOLD2
 | \

627 
FMC_PATT_ATTHIZ2
));

630 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

631 ((
Timög
->
WaôSëupTime
) << 8) |\

632 ((
Timög
->
HﬁdSëupTime
) << 16) |\

633 ((
Timög
->
HiZSëupTime
) << 24));

636 
Devi˚
->
PATT
 = 
tm¥
;

638  
HAL_OK
;

639 
	}
}

648 
HAL_SètusTy≥Def
 
	$FMC_NAND_DeInô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

651 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

652 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

655 
	`__FMC_NAND_DISABLE
(
Devi˚
, 
B™k
);

659 
Devi˚
->
PCR
 = 0x00000018;

660 
Devi˚
->
SR
 = 0x00000040;

661 
Devi˚
->
PMEM
 = 0xFCFCFCFC;

662 
Devi˚
->
PATT
 = 0xFCFCFCFC;

664  
HAL_OK
;

665 
	}
}

694 
HAL_SètusTy≥Def
 
	$FMC_NAND_ECC_E«bÀ
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

697 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

698 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

701 
Devi˚
->
PCR
 |
FMC_PCR_ECCEN
;

703  
HAL_OK
;

704 
	}
}

713 
HAL_SètusTy≥Def
 
	$FMC_NAND_ECC_DißbÀ
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

716 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

717 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

720 
Devi˚
->
PCR
 &~
FMC_PCR_ECCEN
;

722  
HAL_OK
;

723 
	}
}

733 
HAL_SètusTy≥Def
 
	$FMC_NAND_GëECC
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 *
ECCvÆ
, uöt32_à
B™k
, uöt32_à
Timeout
)

735 
uöt32_t
 
tick°¨t
 = 0;

738 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

739 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

742 
tick°¨t
 = 
	`HAL_GëTick
();

745 
	`__FMC_NAND_GET_FLAG
(
Devi˚
, 
B™k
, 
FMC_FLAG_FEMPT
Ë=
RESET
)

748 if(
Timeout
 !
HAL_MAX_DELAY
)

750 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

752  
HAL_TIMEOUT
;

758 *
ECCvÆ
 = (
uöt32_t
)
Devi˚
->
ECCR
;

760  
HAL_OK
;

761 
	}
}

791 
HAL_SètusTy≥Def
 
	$FMC_NAND_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_InôTy≥Def
 *
Inô
)

793 
uöt32_t
 
tm¥
 = 0;

796 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

797 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
Inô
->
N™dB™k
));

798 
	`as£π_∑øm
(
	`IS_FMC_WAIT_FEATURE
(
Inô
->
Waô„©uª
));

799 
	`as£π_∑øm
(
	`IS_FMC_NAND_MEMORY_WIDTH
(
Inô
->
Mem‹yD©aWidth
));

800 
	`as£π_∑øm
(
	`IS_FMC_ECC_STATE
(
Inô
->
EccCompuèti⁄
));

801 
	`as£π_∑øm
(
	`IS_FMC_ECCPAGE_SIZE
(
Inô
->
ECCPageSize
));

802 
	`as£π_∑øm
(
	`IS_FMC_TCLR_TIME
(
Inô
->
TCLRSëupTime
));

803 
	`as£π_∑øm
(
	`IS_FMC_TAR_TIME
(
Inô
->
TARSëupTime
));

805 if(
Inô
->
N™dB™k
 =
FMC_NAND_BANK2
)

808 
tm¥
 = 
Devi˚
->
PCR2
;

813 
tm¥
 = 
Devi˚
->
PCR3
;

817 
tm¥
 &((
uöt32_t
)~(
FMC_PCR2_PWAITEN
 | 
FMC_PCR2_PBKEN
 | 
FMC_PCR2_PTYP
 | \

818 
FMC_PCR2_PWID
 | 
FMC_PCR2_ECCEN
 | 
FMC_PCR2_TCLR
 | \

819 
FMC_PCR2_TAR
 | 
FMC_PCR2_ECCPS
));

822 
tm¥
 |(
uöt32_t
)(
Inô
->
Waô„©uª
 |\

823 
FMC_PCR_MEMORY_TYPE_NAND
 |\

824 
Inô
->
Mem‹yD©aWidth
 |\

825 
Inô
->
EccCompuèti⁄
 |\

826 
Inô
->
ECCPageSize
 |\

827 ((
Inô
->
TCLRSëupTime
) << 9) |\

828 ((
Inô
->
TARSëupTime
) << 13));

830 if(
Inô
->
N™dB™k
 =
FMC_NAND_BANK2
)

833 
Devi˚
->
PCR2
 = 
tm¥
;

838 
Devi˚
->
PCR3
 = 
tm¥
;

841  
HAL_OK
;

843 
	}
}

853 
HAL_SètusTy≥Def
 
	$FMC_NAND_Comm⁄S∑˚_Timög_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

855 
uöt32_t
 
tm¥
 = 0;

858 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

859 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
Timög
->
SëupTime
));

860 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

861 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

862 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

863 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

865 if(
B™k
 =
FMC_NAND_BANK2
)

868 
tm¥
 = 
Devi˚
->
PMEM2
;

873 
tm¥
 = 
Devi˚
->
PMEM3
;

877 
tm¥
 &((
uöt32_t
)~(
FMC_PMEM2_MEMSET2
 | 
FMC_PMEM2_MEMWAIT2
 | 
FMC_PMEM2_MEMHOLD2
 | \

878 
FMC_PMEM2_MEMHIZ2
));

881 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

882 ((
Timög
->
WaôSëupTime
) << 8) |\

883 ((
Timög
->
HﬁdSëupTime
) << 16) |\

884 ((
Timög
->
HiZSëupTime
) << 24)

887 if(
B™k
 =
FMC_NAND_BANK2
)

890 
Devi˚
->
PMEM2
 = 
tm¥
;

895 
Devi˚
->
PMEM3
 = 
tm¥
;

898  
HAL_OK
;

899 
	}
}

909 
HAL_SètusTy≥Def
 
	$FMC_NAND_AâribuãS∑˚_Timög_Inô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

911 
uöt32_t
 
tm¥
 = 0;

914 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

915 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
Timög
->
SëupTime
));

916 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

917 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

918 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

919 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

921 if(
B™k
 =
FMC_NAND_BANK2
)

924 
tm¥
 = 
Devi˚
->
PATT2
;

929 
tm¥
 = 
Devi˚
->
PATT3
;

933 
tm¥
 &((
uöt32_t
)~(
FMC_PATT2_ATTSET2
 | 
FMC_PATT2_ATTWAIT2
 | 
FMC_PATT2_ATTHOLD2
 | \

934 
FMC_PATT2_ATTHIZ2
));

937 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

938 ((
Timög
->
WaôSëupTime
) << 8) |\

939 ((
Timög
->
HﬁdSëupTime
) << 16) |\

940 ((
Timög
->
HiZSëupTime
) << 24));

942 if(
B™k
 =
FMC_NAND_BANK2
)

945 
Devi˚
->
PATT2
 = 
tm¥
;

950 
Devi˚
->
PATT3
 = 
tm¥
;

953  
HAL_OK
;

954 
	}
}

962 
HAL_SètusTy≥Def
 
	$FMC_NAND_DeInô
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

965 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

966 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

969 
	`__FMC_NAND_DISABLE
(
Devi˚
, 
B™k
);

972 if(
B™k
 =
FMC_NAND_BANK2
)

975 
Devi˚
->
PCR2
 = 0x00000018;

976 
Devi˚
->
SR2
 = 0x00000040;

977 
Devi˚
->
PMEM2
 = 0xFCFCFCFC;

978 
Devi˚
->
PATT2
 = 0xFCFCFCFC;

984 
Devi˚
->
PCR3
 = 0x00000018;

985 
Devi˚
->
SR3
 = 0x00000040;

986 
Devi˚
->
PMEM3
 = 0xFCFCFCFC;

987 
Devi˚
->
PATT3
 = 0xFCFCFCFC;

990  
HAL_OK
;

991 
	}
}

1017 
HAL_SètusTy≥Def
 
	$FMC_NAND_ECC_E«bÀ
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

1020 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

1021 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

1024 if(
B™k
 =
FMC_NAND_BANK2
)

1026 
Devi˚
->
PCR2
 |
FMC_PCR2_ECCEN
;

1030 
Devi˚
->
PCR3
 |
FMC_PCR3_ECCEN
;

1033  
HAL_OK
;

1034 
	}
}

1042 
HAL_SètusTy≥Def
 
	$FMC_NAND_ECC_DißbÀ
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

1045 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

1046 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

1049 if(
B™k
 =
FMC_NAND_BANK2
)

1051 
Devi˚
->
PCR2
 &~
FMC_PCR2_ECCEN
;

1055 
Devi˚
->
PCR3
 &~
FMC_PCR3_ECCEN
;

1058  
HAL_OK
;

1059 
	}
}

1069 
HAL_SètusTy≥Def
 
	$FMC_NAND_GëECC
(
FMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 *
ECCvÆ
, uöt32_à
B™k
, uöt32_à
Timeout
)

1071 
uöt32_t
 
tick°¨t
 = 0;

1074 
	`as£π_∑øm
(
	`IS_FMC_NAND_DEVICE
(
Devi˚
));

1075 
	`as£π_∑øm
(
	`IS_FMC_NAND_BANK
(
B™k
));

1078 
tick°¨t
 = 
	`HAL_GëTick
();

1081 
	`__FMC_NAND_GET_FLAG
(
Devi˚
, 
B™k
, 
FMC_FLAG_FEMPT
Ë=
RESET
)

1084 if(
Timeout
 !
HAL_MAX_DELAY
)

1086 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1088  
HAL_TIMEOUT
;

1093 if(
B™k
 =
FMC_NAND_BANK2
)

1096 *
ECCvÆ
 = (
uöt32_t
)
Devi˚
->
ECCR2
;

1101 *
ECCvÆ
 = (
uöt32_t
)
Devi˚
->
ECCR3
;

1104  
HAL_OK
;

1105 
	}
}

1116 #i‡
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
)

1164 
HAL_SètusTy≥Def
 
	$FMC_PCCARD_Inô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FMC_PCCARD_InôTy≥Def
 *
Inô
)

1166 
uöt32_t
 
tm¥
 = 0;

1169 
	`as£π_∑øm
(
	`IS_FMC_PCCARD_DEVICE
(
Devi˚
));

1170 
	`as£π_∑øm
(
	`IS_FMC_WAIT_FEATURE
(
Inô
->
Waô„©uª
));

1171 
	`as£π_∑øm
(
	`IS_FMC_TCLR_TIME
(
Inô
->
TCLRSëupTime
));

1172 
	`as£π_∑øm
(
	`IS_FMC_TAR_TIME
(
Inô
->
TARSëupTime
));

1175 
tm¥
 = 
Devi˚
->
PCR4
;

1178 
tm¥
 &((
uöt32_t
)~(
FMC_PCR4_TAR
 | 
FMC_PCR4_TCLR
 | 
FMC_PCR4_PWAITEN
 | \

1179 
FMC_PCR4_PWID
));

1182 
tm¥
 |(
uöt32_t
)(
Inô
->
Waô„©uª
 |\

1183 
FMC_NAND_PCC_MEM_BUS_WIDTH_16
 |\

1184 (
Inô
->
TCLRSëupTime
 << 9) |\

1185 (
Inô
->
TARSëupTime
 << 13));

1187 
Devi˚
->
PCR4
 = 
tm¥
;

1189  
HAL_OK
;

1190 
	}
}

1199 
HAL_SètusTy≥Def
 
	$FMC_PCCARD_Comm⁄S∑˚_Timög_Inô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
)

1201 
uöt32_t
 
tm¥
 = 0;

1204 
	`as£π_∑øm
(
	`IS_FMC_PCCARD_DEVICE
(
Devi˚
));

1205 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
Timög
->
SëupTime
));

1206 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

1207 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

1208 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

1211 
tm¥
 = 
Devi˚
->
PMEM4
;

1214 
tm¥
 &((
uöt32_t
)~(
FMC_PMEM4_MEMSET4
 | 
FMC_PMEM4_MEMWAIT4
 | 
FMC_PMEM4_MEMHOLD4
 | \

1215 
FMC_PMEM4_MEMHIZ4
));

1217 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

1218 ((
Timög
->
WaôSëupTime
) << 8) |\

1219 ((
Timög
->
HﬁdSëupTime
) << 16) |\

1220 ((
Timög
->
HiZSëupTime
) << 24));

1222 
Devi˚
->
PMEM4
 = 
tm¥
;

1224  
HAL_OK
;

1225 
	}
}

1234 
HAL_SètusTy≥Def
 
	$FMC_PCCARD_AâribuãS∑˚_Timög_Inô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
)

1236 
uöt32_t
 
tm¥
 = 0;

1239 
	`as£π_∑øm
(
	`IS_FMC_PCCARD_DEVICE
(
Devi˚
));

1240 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
Timög
->
SëupTime
));

1241 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

1242 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

1243 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

1246 
tm¥
 = 
Devi˚
->
PATT4
;

1249 
tm¥
 &((
uöt32_t
)~(
FMC_PATT4_ATTSET4
 | 
FMC_PATT4_ATTWAIT4
 | 
FMC_PATT4_ATTHOLD4
 | \

1250 
FMC_PATT4_ATTHIZ4
));

1253 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

1254 ((
Timög
->
WaôSëupTime
) << 8) |\

1255 ((
Timög
->
HﬁdSëupTime
) << 16) |\

1256 ((
Timög
->
HiZSëupTime
) << 24));

1257 
Devi˚
->
PATT4
 = 
tm¥
;

1259  
HAL_OK
;

1260 
	}
}

1269 
HAL_SètusTy≥Def
 
	$FMC_PCCARD_IOS∑˚_Timög_Inô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FMC_NAND_PCC_TimögTy≥Def
 *
Timög
)

1271 
uöt32_t
 
tm¥
 = 0;

1274 
	`as£π_∑øm
(
	`IS_FMC_PCCARD_DEVICE
(
Devi˚
));

1275 
	`as£π_∑øm
(
	`IS_FMC_SETUP_TIME
(
Timög
->
SëupTime
));

1276 
	`as£π_∑øm
(
	`IS_FMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

1277 
	`as£π_∑øm
(
	`IS_FMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

1278 
	`as£π_∑øm
(
	`IS_FMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

1281 
tm¥
 = 
Devi˚
->
PIO4
;

1284 
tm¥
 &((
uöt32_t
)~(
FMC_PIO4_IOSET4
 | 
FMC_PIO4_IOWAIT4
 | 
FMC_PIO4_IOHOLD4
 | \

1285 
FMC_PIO4_IOHIZ4
));

1288 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

1289 ((
Timög
->
WaôSëupTime
) << 8) |\

1290 ((
Timög
->
HﬁdSëupTime
) << 16) |\

1291 ((
Timög
->
HiZSëupTime
) << 24));

1293 
Devi˚
->
PIO4
 = 
tm¥
;

1295  
HAL_OK
;

1296 
	}
}

1303 
HAL_SètusTy≥Def
 
	$FMC_PCCARD_DeInô
(
FMC_PCCARD_Ty≥Def
 *
Devi˚
)

1306 
	`as£π_∑øm
(
	`IS_FMC_PCCARD_DEVICE
(
Devi˚
));

1309 
	`__FMC_PCCARD_DISABLE
(
Devi˚
);

1312 
Devi˚
->
PCR4
 = 0x00000018;

1313 
Devi˚
->
SR4
 = 0x00000000;

1314 
Devi˚
->
PMEM4
 = 0xFCFCFCFC;

1315 
Devi˚
->
PATT4
 = 0xFCFCFCFC;

1316 
Devi˚
->
PIO4
 = 0xFCFCFCFC;

1318  
HAL_OK
;

1319 
	}
}

1373 
HAL_SètusTy≥Def
 
	$FMC_SDRAM_Inô
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
FMC_SDRAM_InôTy≥Def
 *
Inô
)

1375 
uöt32_t
 
tm¥1
 = 0;

1376 
uöt32_t
 
tm¥2
 = 0;

1379 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1380 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
Inô
->
SDB™k
));

1381 
	`as£π_∑øm
(
	`IS_FMC_COLUMNBITS_NUMBER
(
Inô
->
CﬁumnBôsNumbî
));

1382 
	`as£π_∑øm
(
	`IS_FMC_ROWBITS_NUMBER
(
Inô
->
RowBôsNumbî
));

1383 
	`as£π_∑øm
(
	`IS_FMC_SDMEMORY_WIDTH
(
Inô
->
Mem‹yD©aWidth
));

1384 
	`as£π_∑øm
(
	`IS_FMC_INTERNALBANK_NUMBER
(
Inô
->
I¡î«lB™kNumbî
));

1385 
	`as£π_∑øm
(
	`IS_FMC_CAS_LATENCY
(
Inô
->
CASL©ícy
));

1386 
	`as£π_∑øm
(
	`IS_FMC_WRITE_PROTECTION
(
Inô
->
WrôePrŸe˘i⁄
));

1387 
	`as£π_∑øm
(
	`IS_FMC_SDCLOCK_PERIOD
(
Inô
->
SDClockPîiod
));

1388 
	`as£π_∑øm
(
	`IS_FMC_READ_BURST
(
Inô
->
RódBur°
));

1389 
	`as£π_∑øm
(
	`IS_FMC_READPIPE_DELAY
(
Inô
->
RódPùeDñay
));

1392 i‡(
Inô
->
SDB™k
 !
FMC_SDRAM_BANK2
)

1394 
tm¥1
 = 
Devi˚
->
SDCR
[
FMC_SDRAM_BANK1
];

1397 
tm¥1
 &((
uöt32_t
)~(
FMC_SDCR1_NC
 | 
FMC_SDCR1_NR
 | 
FMC_SDCR1_MWID
 | \

1398 
FMC_SDCR1_NB
 | 
FMC_SDCR1_CAS
 | 
FMC_SDCR1_WP
 | \

1399 
FMC_SDCR1_SDCLK
 | 
FMC_SDCR1_RBURST
 | 
FMC_SDCR1_RPIPE
));

1402 
tm¥1
 |(
uöt32_t
)(
Inô
->
CﬁumnBôsNumbî
 |\

1403 
Inô
->
RowBôsNumbî
 |\

1404 
Inô
->
Mem‹yD©aWidth
 |\

1405 
Inô
->
I¡î«lB™kNumbî
 |\

1406 
Inô
->
CASL©ícy
 |\

1407 
Inô
->
WrôePrŸe˘i⁄
 |\

1408 
Inô
->
SDClockPîiod
 |\

1409 
Inô
->
RódBur°
 |\

1410 
Inô
->
RódPùeDñay


1412 
Devi˚
->
SDCR
[
FMC_SDRAM_BANK1
] = 
tm¥1
;

1416 
tm¥1
 = 
Devi˚
->
SDCR
[
FMC_SDRAM_BANK1
];

1419 
tm¥1
 &((
uöt32_t
)~(
FMC_SDCR1_NC
 | 
FMC_SDCR1_NR
 | 
FMC_SDCR1_MWID
 | \

1420 
FMC_SDCR1_NB
 | 
FMC_SDCR1_CAS
 | 
FMC_SDCR1_WP
 | \

1421 
FMC_SDCR1_SDCLK
 | 
FMC_SDCR1_RBURST
 | 
FMC_SDCR1_RPIPE
));

1423 
tm¥1
 |(
uöt32_t
)(
Inô
->
SDClockPîiod
 |\

1424 
Inô
->
RódBur°
 |\

1425 
Inô
->
RódPùeDñay
);

1427 
tm¥2
 = 
Devi˚
->
SDCR
[
FMC_SDRAM_BANK2
];

1430 
tm¥2
 &((
uöt32_t
)~(
FMC_SDCR1_NC
 | 
FMC_SDCR1_NR
 | 
FMC_SDCR1_MWID
 | \

1431 
FMC_SDCR1_NB
 | 
FMC_SDCR1_CAS
 | 
FMC_SDCR1_WP
 | \

1432 
FMC_SDCR1_SDCLK
 | 
FMC_SDCR1_RBURST
 | 
FMC_SDCR1_RPIPE
));

1434 
tm¥2
 |(
uöt32_t
)(
Inô
->
CﬁumnBôsNumbî
 |\

1435 
Inô
->
RowBôsNumbî
 |\

1436 
Inô
->
Mem‹yD©aWidth
 |\

1437 
Inô
->
I¡î«lB™kNumbî
 |\

1438 
Inô
->
CASL©ícy
 |\

1439 
Inô
->
WrôePrŸe˘i⁄
);

1441 
Devi˚
->
SDCR
[
FMC_SDRAM_BANK1
] = 
tm¥1
;

1442 
Devi˚
->
SDCR
[
FMC_SDRAM_BANK2
] = 
tm¥2
;

1445  
HAL_OK
;

1446 
	}
}

1456 
HAL_SètusTy≥Def
 
	$FMC_SDRAM_Timög_Inô
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
FMC_SDRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

1458 
uöt32_t
 
tm¥1
 = 0;

1459 
uöt32_t
 
tm¥2
 = 0;

1462 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1463 
	`as£π_∑øm
(
	`IS_FMC_LOADTOACTIVE_DELAY
(
Timög
->
LﬂdToA˘iveDñay
));

1464 
	`as£π_∑øm
(
	`IS_FMC_EXITSELFREFRESH_DELAY
(
Timög
->
ExôSñfRe‰eshDñay
));

1465 
	`as£π_∑øm
(
	`IS_FMC_SELFREFRESH_TIME
(
Timög
->
SñfRe‰eshTime
));

1466 
	`as£π_∑øm
(
	`IS_FMC_ROWCYCLE_DELAY
(
Timög
->
RowCy˛eDñay
));

1467 
	`as£π_∑øm
(
	`IS_FMC_WRITE_RECOVERY_TIME
(
Timög
->
WrôeRecovîyTime
));

1468 
	`as£π_∑øm
(
	`IS_FMC_RP_DELAY
(
Timög
->
RPDñay
));

1469 
	`as£π_∑øm
(
	`IS_FMC_RCD_DELAY
(
Timög
->
RCDDñay
));

1470 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
B™k
));

1473 i‡(
B™k
 !
FMC_SDRAM_BANK2
)

1475 
tm¥1
 = 
Devi˚
->
SDTR
[
FMC_SDRAM_BANK1
];

1478 
tm¥1
 &((
uöt32_t
)~(
FMC_SDTR1_TMRD
 | 
FMC_SDTR1_TXSR
 | 
FMC_SDTR1_TRAS
 | \

1479 
FMC_SDTR1_TRC
 | 
FMC_SDTR1_TWR
 | 
FMC_SDTR1_TRP
 | \

1480 
FMC_SDTR1_TRCD
));

1482 
tm¥1
 |(
uöt32_t
)(((
Timög
->
LﬂdToA˘iveDñay
)-1) |\

1483 (((
Timög
->
ExôSñfRe‰eshDñay
)-1) << 4) |\

1484 (((
Timög
->
SñfRe‰eshTime
)-1) << 8) |\

1485 (((
Timög
->
RowCy˛eDñay
)-1) << 12) |\

1486 (((
Timög
->
WrôeRecovîyTime
)-1) <<16) |\

1487 (((
Timög
->
RPDñay
)-1) << 20) |\

1488 (((
Timög
->
RCDDñay
)-1) << 24));

1489 
Devi˚
->
SDTR
[
FMC_SDRAM_BANK1
] = 
tm¥1
;

1493 
tm¥1
 = 
Devi˚
->
SDTR
[
FMC_SDRAM_BANK2
];

1496 
tm¥1
 &((
uöt32_t
)~(
FMC_SDTR1_TMRD
 | 
FMC_SDTR1_TXSR
 | 
FMC_SDTR1_TRAS
 | \

1497 
FMC_SDTR1_TRC
 | 
FMC_SDTR1_TWR
 | 
FMC_SDTR1_TRP
 | \

1498 
FMC_SDTR1_TRCD
));

1500 
tm¥1
 |(
uöt32_t
)(((
Timög
->
LﬂdToA˘iveDñay
)-1) |\

1501 (((
Timög
->
ExôSñfRe‰eshDñay
)-1) << 4) |\

1502 (((
Timög
->
SñfRe‰eshTime
)-1) << 8) |\

1503 (((
Timög
->
WrôeRecovîyTime
)-1) <<16) |\

1504 (((
Timög
->
RCDDñay
)-1) << 24));

1506 
tm¥2
 = 
Devi˚
->
SDTR
[
FMC_SDRAM_BANK1
];

1509 
tm¥2
 &((
uöt32_t
)~(
FMC_SDTR1_TMRD
 | 
FMC_SDTR1_TXSR
 | 
FMC_SDTR1_TRAS
 | \

1510 
FMC_SDTR1_TRC
 | 
FMC_SDTR1_TWR
 | 
FMC_SDTR1_TRP
 | \

1511 
FMC_SDTR1_TRCD
));

1512 
tm¥2
 |(
uöt32_t
)((((
Timög
->
RowCy˛eDñay
)-1) << 12) |\

1513 (((
Timög
->
RPDñay
)-1) << 20));

1515 
Devi˚
->
SDTR
[
FMC_SDRAM_BANK2
] = 
tm¥1
;

1516 
Devi˚
->
SDTR
[
FMC_SDRAM_BANK1
] = 
tm¥2
;

1519  
HAL_OK
;

1520 
	}
}

1527 
HAL_SètusTy≥Def
 
	$FMC_SDRAM_DeInô
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

1530 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1531 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
B™k
));

1534 
Devi˚
->
SDCR
[
B™k
] = 0x000002D0;

1535 
Devi˚
->
SDTR
[
B™k
] = 0x0FFFFFFF;

1536 
Devi˚
->
SDCMR
 = 0x00000000;

1537 
Devi˚
->
SDRTR
 = 0x00000000;

1538 
Devi˚
->
SDSR
 = 0x00000000;

1540  
HAL_OK
;

1541 
	}
}

1567 
HAL_SètusTy≥Def
 
	$FMC_SDRAM_WrôePrŸe˘i⁄_E«bÀ
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

1570 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1571 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
B™k
));

1574 
Devi˚
->
SDCR
[
B™k
] |
FMC_SDRAM_WRITE_PROTECTION_ENABLE
;

1576  
HAL_OK
;

1577 
	}
}

1584 
HAL_SètusTy≥Def
 
	$FMC_SDRAM_WrôePrŸe˘i⁄_DißbÀ
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

1587 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1588 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
B™k
));

1591 
Devi˚
->
SDCR
[
B™k
] &~
FMC_SDRAM_WRITE_PROTECTION_ENABLE
;

1593  
HAL_OK
;

1594 
	}
}

1604 
HAL_SètusTy≥Def
 
	$FMC_SDRAM_SídComm™d
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
FMC_SDRAM_Comm™dTy≥Def
 *
Comm™d
, 
uöt32_t
 
Timeout
)

1606 
__IO
 
uöt32_t
 
tm¥
 = 0;

1607 
uöt32_t
 
tick°¨t
 = 0;

1610 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1611 
	`as£π_∑øm
(
	`IS_FMC_COMMAND_MODE
(
Comm™d
->
Comm™dMode
));

1612 
	`as£π_∑øm
(
	`IS_FMC_COMMAND_TARGET
(
Comm™d
->
Comm™dT¨gë
));

1613 
	`as£π_∑øm
(
	`IS_FMC_AUTOREFRESH_NUMBER
(
Comm™d
->
AutoRe‰eshNumbî
));

1614 
	`as£π_∑øm
(
	`IS_FMC_MODE_REGISTER
(
Comm™d
->
ModeRegi°îDeföôi⁄
));

1617 
tm¥
 = (
uöt32_t
)((
Comm™d
->
Comm™dMode
) |\

1618 (
Comm™d
->
Comm™dT¨gë
) |\

1619 (((
Comm™d
->
AutoRe‰eshNumbî
)-1) << 5) |\

1620 ((
Comm™d
->
ModeRegi°îDeföôi⁄
) << 9)

1623 
Devi˚
->
SDCMR
 = 
tm¥
;

1626 
tick°¨t
 = 
	`HAL_GëTick
();

1629 
	`HAL_IS_BIT_SET
(
Devi˚
->
SDSR
, 
FMC_SDSR_BUSY
))

1632 if(
Timeout
 !
HAL_MAX_DELAY
)

1634 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

1636  
HAL_TIMEOUT
;

1641  
HAL_OK
;

1642 
	}
}

1650 
HAL_SètusTy≥Def
 
	$FMC_SDRAM_ProgømRe‰eshR©e
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
Re‰eshR©e
)

1653 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1654 
	`as£π_∑øm
(
	`IS_FMC_REFRESH_RATE
(
Re‰eshR©e
));

1657 
Devi˚
->
SDRTR
 |(
Re‰eshR©e
<<1);

1659  
HAL_OK
;

1660 
	}
}

1668 
HAL_SètusTy≥Def
 
	$FMC_SDRAM_SëAutoRe‰eshNumbî
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
AutoRe‰eshNumbî
)

1671 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1672 
	`as£π_∑øm
(
	`IS_FMC_AUTOREFRESH_NUMBER
(
AutoRe‰eshNumbî
));

1675 
Devi˚
->
SDCMR
 |(
AutoRe‰eshNumbî
 << 5);

1677  
HAL_OK
;

1678 
	}
}

1689 
uöt32_t
 
	$FMC_SDRAM_GëModeSètus
(
FMC_SDRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

1691 
uöt32_t
 
tm¥eg
 = 0;

1694 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_DEVICE
(
Devi˚
));

1695 
	`as£π_∑øm
(
	`IS_FMC_SDRAM_BANK
(
B™k
));

1698 if(
B™k
 =
FMC_SDRAM_BANK1
)

1700 
tm¥eg
 = (
uöt32_t
)(
Devi˚
->
SDSR
 & 
FMC_SDSR_MODES1
);

1704 
tm¥eg
 = ((
uöt32_t
)(
Devi˚
->
SDSR
 & 
FMC_SDSR_MODES2
) >> 2);

1708  
tm¥eg
;

1709 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_fsmc.c

75 
	~"°m32f4xx_hÆ.h
"

86 #i‡
deföed
 (
HAL_SRAM_MODULE_ENABLED
Ë|| deföed(
HAL_NOR_MODULE_ENABLED
Ë|| deföed(
HAL_NAND_MODULE_ENABLED
Ë|| deföed(
HAL_PCCARD_MODULE_ENABLED
)

87 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

146 
HAL_SètusTy≥Def
 
	$FSMC_NORSRAM_Inô
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FSMC_NORSRAM_InôTy≥Def
* 
Inô
)

148 
uöt32_t
 
tm¥
 = 0;

151 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
Inô
->
NSB™k
));

152 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
Inô
->
D©aAddªssMux
));

153 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
Inô
->
Mem‹yTy≥
));

154 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_MEMORY_WIDTH
(
Inô
->
Mem‹yD©aWidth
));

155 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
Inô
->
Bur°Ac˚ssMode
));

156 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
Inô
->
WaôSig«lPﬁ¨ôy
));

157 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
Inô
->
WøpMode
));

158 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
Inô
->
WaôSig«lA˘ive
));

159 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
Inô
->
WrôeO≥øti⁄
));

160 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
Inô
->
WaôSig«l
));

161 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
Inô
->
ExãndedMode
));

162 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
Inô
->
Asynchr⁄ousWaô
));

163 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
Inô
->
WrôeBur°
));

166 
tm¥
 = 
Devi˚
->
BTCR
[
Inô
->
NSB™k
];

170 
tm¥
 &((
uöt32_t
)~(
FSMC_BCR1_MBKEN
 | 
FSMC_BCR1_MUXEN
 | 
FSMC_BCR1_MTYP
 | \

171 
FSMC_BCR1_MWID
 | 
FSMC_BCR1_FACCEN
 | 
FSMC_BCR1_BURSTEN
 | \

172 
FSMC_BCR1_WAITPOL
 | 
FSMC_BCR1_WRAPMOD
 | 
FSMC_BCR1_WAITCFG
 | \

173 
FSMC_BCR1_WREN
 | 
FSMC_BCR1_WAITEN
 | 
FSMC_BCR1_EXTMOD
 | \

174 
FSMC_BCR1_ASYNCWAIT
 | 
FSMC_BCR1_CBURSTRW
));

176 
tm¥
 |(
uöt32_t
)(
Inô
->
D©aAddªssMux
 |\

177 
Inô
->
Mem‹yTy≥
 |\

178 
Inô
->
Mem‹yD©aWidth
 |\

179 
Inô
->
Bur°Ac˚ssMode
 |\

180 
Inô
->
WaôSig«lPﬁ¨ôy
 |\

181 
Inô
->
WøpMode
 |\

182 
Inô
->
WaôSig«lA˘ive
 |\

183 
Inô
->
WrôeO≥øti⁄
 |\

184 
Inô
->
WaôSig«l
 |\

185 
Inô
->
ExãndedMode
 |\

186 
Inô
->
Asynchr⁄ousWaô
 |\

187 
Inô
->
WrôeBur°


190 if(
Inô
->
Mem‹yTy≥
 =
FSMC_MEMORY_TYPE_NOR
)

192 
tm¥
 |(
uöt32_t
)
FSMC_NORSRAM_FLASH_ACCESS_ENABLE
;

195 
Devi˚
->
BTCR
[
Inô
->
NSB™k
] = 
tm¥
;

197  
HAL_OK
;

198 
	}
}

207 
HAL_SètusTy≥Def
 
	$FSMC_NORSRAM_DeInô
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FSMC_NORSRAM_EXTENDED_Ty≥Def
 *
ExDevi˚
, 
uöt32_t
 
B™k
)

210 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_DEVICE
(
Devi˚
));

211 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_EXTENDED_DEVICE
(
ExDevi˚
));

214 
	`__FSMC_NORSRAM_DISABLE
(
Devi˚
, 
B™k
);

218 if(
B™k
 =
FSMC_NORSRAM_BANK1
)

220 
Devi˚
->
BTCR
[
B™k
] = 0x000030DB;

225 
Devi˚
->
BTCR
[
B™k
] = 0x000030D2;

228 
Devi˚
->
BTCR
[
B™k
 + 1] = 0x0FFFFFFF;

229 
ExDevi˚
->
BWTR
[
B™k
] = 0x0FFFFFFF;

231  
HAL_OK
;

232 
	}
}

243 
HAL_SètusTy≥Def
 
	$FSMC_NORSRAM_Timög_Inô
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
FSMC_NORSRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

245 
uöt32_t
 
tm¥
 = 0;

248 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
Timög
->
AddªssSëupTime
));

249 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
Timög
->
AddªssHﬁdTime
));

250 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
Timög
->
D©aSëupTime
));

251 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
Timög
->
BusTu∫AroundDuøti⁄
));

252 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
Timög
->
CLKDivisi⁄
));

253 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
Timög
->
D©aL©ícy
));

254 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
Timög
->
Ac˚ssMode
));

257 
tm¥
 = 
Devi˚
->
BTCR
[
B™k
 + 1];

260 
tm¥
 &((
uöt32_t
)~(
FSMC_BTR1_ADDSET
 | 
FSMC_BTR1_ADDHLD
 | 
FSMC_BTR1_DATAST
 | \

261 
FSMC_BTR1_BUSTURN
 | 
FSMC_BTR1_CLKDIV
 | 
FSMC_BTR1_DATLAT
 | \

262 
FSMC_BTR1_ACCMOD
));

265 
tm¥
 |(
uöt32_t
)(
Timög
->
AddªssSëupTime
 |\

266 ((
Timög
->
AddªssHﬁdTime
) << 4) |\

267 ((
Timög
->
D©aSëupTime
) << 8) |\

268 ((
Timög
->
BusTu∫AroundDuøti⁄
) << 16) |\

269 (((
Timög
->
CLKDivisi⁄
)-1) << 20) |\

270 (((
Timög
->
D©aL©ícy
)-2) << 24) |\

271 (
Timög
->
Ac˚ssMode
));

273 
Devi˚
->
BTCR
[
B™k
 + 1] = 
tm¥
;

275  
HAL_OK
;

276 
	}
}

286 
HAL_SètusTy≥Def
 
	$FSMC_NORSRAM_Exãnded_Timög_Inô
(
FSMC_NORSRAM_EXTENDED_Ty≥Def
 *
Devi˚
, 
FSMC_NORSRAM_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
, uöt32_à
ExãndedMode
)

288 
uöt32_t
 
tm¥
 = 0;

291 if(
ExãndedMode
 =
FSMC_EXTENDED_MODE_ENABLE
)

294 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
Timög
->
AddªssSëupTime
));

295 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
Timög
->
AddªssHﬁdTime
));

296 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
Timög
->
D©aSëupTime
));

297 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
Timög
->
BusTu∫AroundDuøti⁄
));

298 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
Timög
->
CLKDivisi⁄
));

299 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
Timög
->
D©aL©ícy
));

300 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
Timög
->
Ac˚ssMode
));

303 
tm¥
 = 
Devi˚
->
BWTR
[
B™k
];

306 
tm¥
 &((
uöt32_t
)~(
FSMC_BWTR1_ADDSET
 | 
FSMC_BWTR1_ADDHLD
 | 
FSMC_BWTR1_DATAST
 | \

307 
FSMC_BWTR1_BUSTURN
 | 
FSMC_BWTR1_CLKDIV
 | 
FSMC_BWTR1_DATLAT
 | \

308 
FSMC_BWTR1_ACCMOD
));

310 
tm¥
 |(
uöt32_t
)(
Timög
->
AddªssSëupTime
 |\

311 ((
Timög
->
AddªssHﬁdTime
) << 4) |\

312 ((
Timög
->
D©aSëupTime
) << 8) |\

313 ((
Timög
->
BusTu∫AroundDuøti⁄
) << 16) |\

314 (((
Timög
->
CLKDivisi⁄
)-1) << 20) |\

315 (((
Timög
->
D©aL©ícy
)-2) << 24) |\

316 (
Timög
->
Ac˚ssMode
));

318 
Devi˚
->
BWTR
[
B™k
] = 
tm¥
;

322 
Devi˚
->
BWTR
[
B™k
] = 0x0FFFFFFF;

325  
HAL_OK
;

326 
	}
}

352 
HAL_SètusTy≥Def
 
	$FSMC_NORSRAM_WrôeO≥øti⁄_E«bÀ
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

355 
Devi˚
->
BTCR
[
B™k
] |
FSMC_WRITE_OPERATION_ENABLE
;

357  
HAL_OK
;

358 
	}
}

366 
HAL_SètusTy≥Def
 
	$FSMC_NORSRAM_WrôeO≥øti⁄_DißbÀ
(
FSMC_NORSRAM_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

369 
Devi˚
->
BTCR
[
B™k
] &~
FSMC_WRITE_OPERATION_ENABLE
;

371  
HAL_OK
;

372 
	}
}

381 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
)

431 
HAL_SètusTy≥Def
 
	$FSMC_NAND_Inô
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_InôTy≥Def
 *
Inô
)

433 
uöt32_t
 
tm¥
 = 0;

436 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
Inô
->
N™dB™k
));

437 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
Inô
->
Waô„©uª
));

438 
	`as£π_∑øm
(
	`IS_FSMC_NAND_MEMORY_WIDTH
(
Inô
->
Mem‹yD©aWidth
));

439 
	`as£π_∑øm
(
	`IS_FSMC_ECC_STATE
(
Inô
->
EccCompuèti⁄
));

440 
	`as£π_∑øm
(
	`IS_FSMC_ECCPAGE_SIZE
(
Inô
->
ECCPageSize
));

441 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
Inô
->
TCLRSëupTime
));

442 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
Inô
->
TARSëupTime
));

444 if(
Inô
->
N™dB™k
 =
FSMC_NAND_BANK2
)

447 
tm¥
 = 
Devi˚
->
PCR2
;

452 
tm¥
 = 
Devi˚
->
PCR3
;

456 
tm¥
 &((
uöt32_t
)~(
FSMC_PCR2_PWAITEN
 | 
FSMC_PCR2_PBKEN
 | 
FSMC_PCR2_PTYP
 | \

457 
FSMC_PCR2_PWID
 | 
FSMC_PCR2_ECCEN
 | 
FSMC_PCR2_TCLR
 | \

458 
FSMC_PCR2_TAR
 | 
FSMC_PCR2_ECCPS
));

461 
tm¥
 |(
uöt32_t
)(
Inô
->
Waô„©uª
 |\

462 
FSMC_PCR_MEMORY_TYPE_NAND
 |\

463 
Inô
->
Mem‹yD©aWidth
 |\

464 
Inô
->
EccCompuèti⁄
 |\

465 
Inô
->
ECCPageSize
 |\

466 ((
Inô
->
TCLRSëupTime
) << 9) |\

467 ((
Inô
->
TARSëupTime
) << 13));

469 if(
Inô
->
N™dB™k
 =
FSMC_NAND_BANK2
)

472 
Devi˚
->
PCR2
 = 
tm¥
;

477 
Devi˚
->
PCR3
 = 
tm¥
;

480  
HAL_OK
;

481 
	}
}

491 
HAL_SètusTy≥Def
 
	$FSMC_NAND_Comm⁄S∑˚_Timög_Inô
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

493 
uöt32_t
 
tm¥
 = 0;

496 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
Timög
->
SëupTime
));

497 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

498 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

499 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

501 if(
B™k
 =
FSMC_NAND_BANK2
)

504 
tm¥
 = 
Devi˚
->
PMEM2
;

509 
tm¥
 = 
Devi˚
->
PMEM3
;

513 
tm¥
 &((
uöt32_t
)~(
FSMC_PMEM2_MEMSET2
 | 
FSMC_PMEM2_MEMWAIT2
 | 
FSMC_PMEM2_MEMHOLD2
 | \

514 
FSMC_PMEM2_MEMHIZ2
));

517 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

518 ((
Timög
->
WaôSëupTime
) << 8) |\

519 ((
Timög
->
HﬁdSëupTime
) << 16) |\

520 ((
Timög
->
HiZSëupTime
) << 24)

523 if(
B™k
 =
FSMC_NAND_BANK2
)

526 
Devi˚
->
PMEM2
 = 
tm¥
;

531 
Devi˚
->
PMEM3
 = 
tm¥
;

534  
HAL_OK
;

535 
	}
}

545 
HAL_SètusTy≥Def
 
	$FSMC_NAND_AâribuãS∑˚_Timög_Inô
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
, 
uöt32_t
 
B™k
)

547 
uöt32_t
 
tm¥
 = 0;

550 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
Timög
->
SëupTime
));

551 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

552 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

553 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

555 if(
B™k
 =
FSMC_NAND_BANK2
)

558 
tm¥
 = 
Devi˚
->
PATT2
;

563 
tm¥
 = 
Devi˚
->
PATT3
;

567 
tm¥
 &((
uöt32_t
)~(
FSMC_PATT2_ATTSET2
 | 
FSMC_PATT2_ATTWAIT2
 | 
FSMC_PATT2_ATTHOLD2
 | \

568 
FSMC_PATT2_ATTHIZ2
));

571 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

572 ((
Timög
->
WaôSëupTime
) << 8) |\

573 ((
Timög
->
HﬁdSëupTime
) << 16) |\

574 ((
Timög
->
HiZSëupTime
) << 24)

577 if(
B™k
 =
FSMC_NAND_BANK2
)

580 
Devi˚
->
PATT2
 = 
tm¥
;

585 
Devi˚
->
PATT3
 = 
tm¥
;

588  
HAL_OK
;

589 
	}
}

597 
HAL_SètusTy≥Def
 
	$FSMC_NAND_DeInô
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

600 
	`__FSMC_NAND_DISABLE
(
Devi˚
, 
B™k
);

603 if(
B™k
 =
FSMC_NAND_BANK2
)

606 
Devi˚
->
PCR2
 = 0x00000018;

607 
Devi˚
->
SR2
 = 0x00000040;

608 
Devi˚
->
PMEM2
 = 0xFCFCFCFC;

609 
Devi˚
->
PATT2
 = 0xFCFCFCFC;

615 
Devi˚
->
PCR3
 = 0x00000018;

616 
Devi˚
->
SR3
 = 0x00000040;

617 
Devi˚
->
PMEM3
 = 0xFCFCFCFC;

618 
Devi˚
->
PATT3
 = 0xFCFCFCFC;

621  
HAL_OK
;

622 
	}
}

648 
HAL_SètusTy≥Def
 
	$FSMC_NAND_ECC_E«bÀ
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

651 if(
B™k
 =
FSMC_NAND_BANK2
)

653 
Devi˚
->
PCR2
 |
FSMC_PCR2_ECCEN
;

657 
Devi˚
->
PCR3
 |
FSMC_PCR3_ECCEN
;

660  
HAL_OK
;

661 
	}
}

669 
HAL_SètusTy≥Def
 
	$FSMC_NAND_ECC_DißbÀ
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 
B™k
)

672 if(
B™k
 =
FSMC_NAND_BANK2
)

674 
Devi˚
->
PCR2
 &~
FSMC_PCR2_ECCEN
;

678 
Devi˚
->
PCR3
 &~
FSMC_PCR3_ECCEN
;

681  
HAL_OK
;

682 
	}
}

692 
HAL_SètusTy≥Def
 
	$FSMC_NAND_GëECC
(
FSMC_NAND_Ty≥Def
 *
Devi˚
, 
uöt32_t
 *
ECCvÆ
, uöt32_à
B™k
, uöt32_à
Timeout
)

694 
uöt32_t
 
tick°¨t
 = 0;

697 
	`as£π_∑øm
(
	`IS_FSMC_NAND_DEVICE
(
Devi˚
));

698 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
B™k
));

701 
tick°¨t
 = 
	`HAL_GëTick
();

704 
	`__FSMC_NAND_GET_FLAG
(
Devi˚
, 
B™k
, 
FSMC_FLAG_FEMPT
Ë=
RESET
)

707 if(
Timeout
 !
HAL_MAX_DELAY
)

709 if((
Timeout
 =0)||((
	`HAL_GëTick
(Ë- 
tick°¨t
 ) > Timeout))

711  
HAL_TIMEOUT
;

716 if(
B™k
 =
FSMC_NAND_BANK2
)

719 *
ECCvÆ
 = (
uöt32_t
)
Devi˚
->
ECCR2
;

724 *
ECCvÆ
 = (
uöt32_t
)
Devi˚
->
ECCR3
;

727  
HAL_OK
;

728 
	}
}

786 
HAL_SètusTy≥Def
 
	$FSMC_PCCARD_Inô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FSMC_PCCARD_InôTy≥Def
 *
Inô
)

788 
uöt32_t
 
tm¥
 = 0;

791 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
Inô
->
Waô„©uª
));

792 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
Inô
->
TCLRSëupTime
));

793 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
Inô
->
TARSëupTime
));

796 
tm¥
 = 
Devi˚
->
PCR4
;

799 
tm¥
 &((
uöt32_t
)~(
FSMC_PCR4_TAR
 | 
FSMC_PCR4_TCLR
 | 
FSMC_PCR4_PWAITEN
 | \

800 
FSMC_PCR4_PWID
));

803 
tm¥
 |(
uöt32_t
)(
Inô
->
Waô„©uª
 |\

804 
FSMC_NAND_PCC_MEM_BUS_WIDTH_16
 |\

805 (
Inô
->
TCLRSëupTime
 << 9) |\

806 (
Inô
->
TARSëupTime
 << 13));

808 
Devi˚
->
PCR4
 = 
tm¥
;

810  
HAL_OK
;

811 
	}
}

820 
HAL_SètusTy≥Def
 
	$FSMC_PCCARD_Comm⁄S∑˚_Timög_Inô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
)

822 
uöt32_t
 
tm¥
 = 0;

825 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
Timög
->
SëupTime
));

826 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

827 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

828 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

831 
tm¥
 = 
Devi˚
->
PMEM4
;

834 
tm¥
 &((
uöt32_t
)~(
FSMC_PMEM4_MEMSET4
 | 
FSMC_PMEM4_MEMWAIT4
 | 
FSMC_PMEM4_MEMHOLD4
 | \

835 
FSMC_PMEM4_MEMHIZ4
));

837 
tm¥
 |(
uöt32_t
)((
Timög
->
SëupTime
 |\

838 ((
Timög
->
WaôSëupTime
) << 8) |\

839 (
Timög
->
HﬁdSëupTime
) << 16) |\

840 ((
Timög
->
HiZSëupTime
) << 24));

842 
Devi˚
->
PMEM4
 = 
tm¥
;

844  
HAL_OK
;

845 
	}
}

854 
HAL_SètusTy≥Def
 
	$FSMC_PCCARD_AâribuãS∑˚_Timög_Inô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
)

856 
uöt32_t
 
tm¥
 = 0;

859 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
Timög
->
SëupTime
));

860 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

861 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

862 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

865 
tm¥
 = 
Devi˚
->
PATT4
;

868 
tm¥
 &((
uöt32_t
)~(
FSMC_PATT4_ATTSET4
 | 
FSMC_PATT4_ATTWAIT4
 | 
FSMC_PATT4_ATTHOLD4
 | \

869 
FSMC_PATT4_ATTHIZ4
));

872 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

873 ((
Timög
->
WaôSëupTime
) << 8) |\

874 ((
Timög
->
HﬁdSëupTime
) << 16) |\

875 ((
Timög
->
HiZSëupTime
) << 24));

876 
Devi˚
->
PATT4
 = 
tm¥
;

878  
HAL_OK
;

879 
	}
}

888 
HAL_SètusTy≥Def
 
	$FSMC_PCCARD_IOS∑˚_Timög_Inô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
, 
FSMC_NAND_PCC_TimögTy≥Def
 *
Timög
)

890 
uöt32_t
 
tm¥
 = 0;

893 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
Timög
->
SëupTime
));

894 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
Timög
->
WaôSëupTime
));

895 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
Timög
->
HﬁdSëupTime
));

896 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
Timög
->
HiZSëupTime
));

899 
tm¥
 = 
Devi˚
->
PIO4
;

902 
tm¥
 &((
uöt32_t
)~(
FSMC_PIO4_IOSET4
 | 
FSMC_PIO4_IOWAIT4
 | 
FSMC_PIO4_IOHOLD4
 | \

903 
FSMC_PIO4_IOHIZ4
));

906 
tm¥
 |(
uöt32_t
)(
Timög
->
SëupTime
 |\

907 ((
Timög
->
WaôSëupTime
) << 8) |\

908 ((
Timög
->
HﬁdSëupTime
) << 16) |\

909 ((
Timög
->
HiZSëupTime
) << 24));

911 
Devi˚
->
PIO4
 = 
tm¥
;

913  
HAL_OK
;

914 
	}
}

921 
HAL_SètusTy≥Def
 
	$FSMC_PCCARD_DeInô
(
FSMC_PCCARD_Ty≥Def
 *
Devi˚
)

924 
	`__FSMC_PCCARD_DISABLE
(
Devi˚
);

927 
Devi˚
->
PCR4
 = 0x00000018;

928 
Devi˚
->
SR4
 = 0x00000000;

929 
Devi˚
->
PMEM4
 = 0xFCFCFCFC;

930 
Devi˚
->
PATT4
 = 0xFCFCFCFC;

931 
Devi˚
->
PIO4
 = 0xFCFCFCFC;

933  
HAL_OK
;

934 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_sdmmc.c

169 
	~"°m32f4xx_hÆ.h
"

180 #i‡
deföed
(
HAL_SD_MODULE_ENABLED
Ë|| deföed(
HAL_MMC_MODULE_ENABLED
)

181 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

182 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

183 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

184 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

216 
HAL_SètusTy≥Def
 
	$SDIO_Inô
(
SDIO_Ty≥Def
 *
SDIOx
, 
SDIO_InôTy≥Def
 
Inô
)

218 
uöt32_t
 
tm¥eg
 = 0;

221 
	`as£π_∑øm
(
	`IS_SDIO_ALL_INSTANCE
(
SDIOx
));

222 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
Inô
.
ClockEdge
));

223 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
Inô
.
ClockBy∑ss
));

224 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
Inô
.
ClockPowîSave
));

225 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
Inô
.
BusWide
));

226 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
Inô
.
H¨dw¨eFlowC⁄åﬁ
));

227 
	`as£π_∑øm
(
	`IS_SDIO_CLKDIV
(
Inô
.
ClockDiv
));

230 
tm¥eg
 |(
Inô
.
ClockEdge
 |\

231 
Inô
.
ClockBy∑ss
 |\

232 
Inô
.
ClockPowîSave
 |\

233 
Inô
.
BusWide
 |\

234 
Inô
.
H¨dw¨eFlowC⁄åﬁ
 |\

235 
Inô
.
ClockDiv


239 
	`MODIFY_REG
(
SDIOx
->
CLKCR
, 
CLKCR_CLEAR_MASK
, 
tm¥eg
);

241  
HAL_OK
;

242 
	}
}

268 
uöt32_t
 
	$SDIO_RódFIFO
(
SDIO_Ty≥Def
 *
SDIOx
)

271  (
SDIOx
->
FIFO
);

272 
	}
}

280 
HAL_SètusTy≥Def
 
	$SDIO_WrôeFIFO
(
SDIO_Ty≥Def
 *
SDIOx
, 
uöt32_t
 *
pWrôeD©a
)

283 
SDIOx
->
FIFO
 = *
pWrôeD©a
;

285  
HAL_OK
;

286 
	}
}

312 
HAL_SètusTy≥Def
 
	$SDIO_PowîSèã_ON
(
SDIO_Ty≥Def
 *
SDIOx
)

315 
SDIOx
->
POWER
 = 
SDIO_POWER_PWRCTRL
;

317  
HAL_OK
;

318 
	}
}

325 
HAL_SètusTy≥Def
 
	$SDIO_PowîSèã_OFF
(
SDIO_Ty≥Def
 *
SDIOx
)

328 
SDIOx
->
POWER
 = (
uöt32_t
)0x00000000;

330  
HAL_OK
;

331 
	}
}

342 
uöt32_t
 
	$SDIO_GëPowîSèã
(
SDIO_Ty≥Def
 *
SDIOx
)

344  (
SDIOx
->
POWER
 & 
SDIO_POWER_PWRCTRL
);

345 
	}
}

355 
HAL_SètusTy≥Def
 
	$SDIO_SídComm™d
(
SDIO_Ty≥Def
 *
SDIOx
, 
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

357 
uöt32_t
 
tm¥eg
 = 0;

360 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
CmdIndex
));

361 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
Re•⁄£
));

362 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
WaôF‹I¡îru±
));

363 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
CPSM
));

366 
SDIOx
->
ARG
 = 
SDIO_CmdInôSåu˘
->
Argumít
;

369 
tm¥eg
 |(
uöt32_t
)(
SDIO_CmdInôSåu˘
->
CmdIndex
 |\

370 
SDIO_CmdInôSåu˘
->
Re•⁄£
 |\

371 
SDIO_CmdInôSåu˘
->
WaôF‹I¡îru±
 |\

372 
SDIO_CmdInôSåu˘
->
CPSM
);

375 
	`MODIFY_REG
(
SDIOx
->
CMD
, 
CMD_CLEAR_MASK
, 
tm¥eg
);

377  
HAL_OK
;

378 
	}
}

385 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
(
SDIO_Ty≥Def
 *
SDIOx
)

387  (
uöt8_t
)(
SDIOx
->
RESPCMD
);

388 
	}
}

401 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

403 
__IO
 
uöt32_t
 
tmp
 = 0;

406 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

409 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

411  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

412 
	}
}

422 
HAL_SètusTy≥Def
 
	$SDIO_D©aC⁄fig
(
SDIO_Ty≥Def
 *
SDIOx
, 
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

424 
uöt32_t
 
tm¥eg
 = 0;

427 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
D©aLígth
));

428 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
D©aBlockSize
));

429 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
Tøns„rDú
));

430 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
Tøns„rMode
));

431 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
DPSM
));

434 
SDIOx
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
D©aTimeOut
;

437 
SDIOx
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
D©aLígth
;

440 
tm¥eg
 |(
uöt32_t
)(
SDIO_D©aInôSåu˘
->
D©aBlockSize
 |\

441 
SDIO_D©aInôSåu˘
->
Tøns„rDú
 |\

442 
SDIO_D©aInôSåu˘
->
Tøns„rMode
 |\

443 
SDIO_D©aInôSåu˘
->
DPSM
);

446 
	`MODIFY_REG
(
SDIOx
->
DCTRL
, 
DCTRL_CLEAR_MASK
, 
tm¥eg
);

448  
HAL_OK
;

450 
	}
}

457 
uöt32_t
 
	$SDIO_GëD©aCou¡î
(
SDIO_Ty≥Def
 *
SDIOx
)

459  (
SDIOx
->
DCOUNT
);

460 
	}
}

467 
uöt32_t
 
	$SDIO_GëFIFOCou¡
(
SDIO_Ty≥Def
 *
SDIOx
)

469  (
SDIOx
->
FIFO
);

470 
	}
}

481 
HAL_SètusTy≥Def
 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

484 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

486 *(
__IO
 
uöt32_t
 *)
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

488  
HAL_OK
;

489 
	}
}

499 
	gSTM32F401xC
 || 
	gSTM32F401xE
 || 
	gSTM32F411xE
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_usb.c

59 
	~"°m32f4xx_hÆ.h
"

65 #i‡
deföed
(
HAL_PCD_MODULE_ENABLED
Ë|| deföed(
HAL_HCD_MODULE_ENABLED
)

66 #i‡
deföed
(
STM32F405xx
Ë|| deföed(
STM32F415xx
Ë|| deföed(
STM32F407xx
Ë|| deföed(
STM32F417xx
) || \

67 
deföed
(
STM32F427xx
Ë|| deföed(
STM32F437xx
Ë|| deföed(
STM32F429xx
Ë|| deföed(
STM32F439xx
) || \

68 
deföed
(
STM32F401xC
Ë|| deföed(
STM32F401xE
Ë|| deföed(
STM32F411xE
Ë|| deföed(
STM32F446xx
) || \

69 
deföed
(
STM32F469xx
Ë|| 
	$deföed
(
STM32F479xx
)

76 
HAL_SètusTy≥Def
 
	`USB_C‹eRe£t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

104 
HAL_SètusTy≥Def
 
	$USB_C‹eInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

106 i‡(
cfg
.
phy_ôÁ˚
 =
USB_OTG_ULPI_PHY
)

109 
USBx
->
GCCFG
 &~(
USB_OTG_GCCFG_PWRDWN
);

112 
USBx
->
GUSBCFG
 &~(
USB_OTG_GUSBCFG_TSDPS
 | 
USB_OTG_GUSBCFG_ULPIFSLS
 | 
USB_OTG_GUSBCFG_PHYSEL
);

115 
USBx
->
GUSBCFG
 &~(
USB_OTG_GUSBCFG_ULPIEVBUSD
 | 
USB_OTG_GUSBCFG_ULPIEVBUSI
);

116 if(
cfg
.
u£_exã∫Æ_vbus
 == 1)

118 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_ULPIEVBUSD
;

121 
	`USB_C‹eRe£t
(
USBx
);

126 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_PHYSEL
;

129 
	`USB_C‹eRe£t
(
USBx
);

132 
USBx
->
GCCFG
 = 
USB_OTG_GCCFG_PWRDWN
;

135 if(
cfg
.
dma_íabÀ
 =
ENABLE
)

137 
USBx
->
GAHBCFG
 |(
USB_OTG_GAHBCFG_HBSTLEN_1
 | 
USB_OTG_GAHBCFG_HBSTLEN_2
);

138 
USBx
->
GAHBCFG
 |
USB_OTG_GAHBCFG_DMAEN
;

141  
HAL_OK
;

142 
	}
}

150 
HAL_SètusTy≥Def
 
	$USB_E«bÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

152 
USBx
->
GAHBCFG
 |
USB_OTG_GAHBCFG_GINT
;

153  
HAL_OK
;

154 
	}
}

163 
HAL_SètusTy≥Def
 
	$USB_DißbÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

165 
USBx
->
GAHBCFG
 &~
USB_OTG_GAHBCFG_GINT
;

166  
HAL_OK
;

167 
	}
}

179 
HAL_SètusTy≥Def
 
	$USB_SëCuºítMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_ModeTy≥Def
 
mode
)

181 
USBx
->
GUSBCFG
 &~(
USB_OTG_GUSBCFG_FHMOD
 | 
USB_OTG_GUSBCFG_FDMOD
);

183 i‡–
mode
 =
USB_OTG_HOST_MODE
)

185 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_FHMOD
;

187 i‡–
mode
 =
USB_OTG_DEVICE_MODE
)

189 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_FDMOD
;

191 
	`HAL_Dñay
(50);

193  
HAL_OK
;

194 
	}
}

204 
HAL_SètusTy≥Def
 
	$USB_DevInô
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

206 
uöt32_t
 
i
 = 0;

209 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

210 
USBx
->
GCCFG
 |
USB_OTG_GCCFG_VBDEN
;

212 i‡(
cfg
.
vbus_£nsög_íabÀ
 == 0)

215 
USBx
->
GCCFG
 &~
USB_OTG_GCCFG_VBDEN
;

218 
USBx
->
GOTGCTL
 |
USB_OTG_GOTGCTL_BVALOEN
;

219 
USBx
->
GOTGCTL
 |
USB_OTG_GOTGCTL_BVALOVAL
;

222 
USBx
->
GCCFG
 |
USB_OTG_GCCFG_VBUSBSEN
;

224 i‡(
cfg
.
vbus_£nsög_íabÀ
 == 0)

226 
USBx
->
GCCFG
 |
USB_OTG_GCCFG_NOVBUSSENS
;

231 
USBx_PCGCCTL
 = 0;

234 
USBx_DEVICE
->
DCFG
 |
DCFG_FRAME_INTERVAL_80
;

236 if(
cfg
.
phy_ôÁ˚
 =
USB_OTG_ULPI_PHY
)

238 if(
cfg
.
•ìd
 =
USB_OTG_SPEED_HIGH
)

241 
	`USB_SëDevS≥ed
 (
USBx
 , 
USB_OTG_SPEED_HIGH
);

246 
	`USB_SëDevS≥ed
 (
USBx
 , 
USB_OTG_SPEED_HIGH_IN_FULL
);

252 
	`USB_SëDevS≥ed
 (
USBx
 , 
USB_OTG_SPEED_FULL
);

256 
	`USB_FlushTxFifo
(
USBx
 , 0x10);

257 
	`USB_FlushRxFifo
(
USBx
);

260 
USBx_DEVICE
->
DIEPMSK
 = 0;

261 
USBx_DEVICE
->
DOEPMSK
 = 0;

262 
USBx_DEVICE
->
DAINT
 = 0xFFFFFFFF;

263 
USBx_DEVICE
->
DAINTMSK
 = 0;

265 
i
 = 0; i < 
cfg
.
dev_ídpoöts
; i++)

267 i‡((
	`USBx_INEP
(
i
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == USB_OTG_DIEPCTL_EPENA)

269 
	`USBx_INEP
(
i
)->
DIEPCTL
 = (
USB_OTG_DIEPCTL_EPDIS
 | 
USB_OTG_DIEPCTL_SNAK
);

273 
	`USBx_INEP
(
i
)->
DIEPCTL
 = 0;

276 
	`USBx_INEP
(
i
)->
DIEPTSIZ
 = 0;

277 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFF;

280 
i
 = 0; i < 
cfg
.
dev_ídpoöts
; i++)

282 i‡((
	`USBx_OUTEP
(
i
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

284 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 = (
USB_OTG_DOEPCTL_EPDIS
 | 
USB_OTG_DOEPCTL_SNAK
);

288 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 = 0;

291 
	`USBx_OUTEP
(
i
)->
DOEPTSIZ
 = 0;

292 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFF;

295 
USBx_DEVICE
->
DIEPMSK
 &~(
USB_OTG_DIEPMSK_TXFURM
);

297 i‡(
cfg
.
dma_íabÀ
 == 1)

300 
USBx_DEVICE
->
DTHRCTL
 = (
USB_OTG_DTHRCTL_TXTHRLEN_6
 | 
USB_OTG_DTHRCTL_RXTHRLEN_6
);

301 
USBx_DEVICE
->
DTHRCTL
 |(
USB_OTG_DTHRCTL_RXTHREN
 | 
USB_OTG_DTHRCTL_ISOTHREN
 | 
USB_OTG_DTHRCTL_NONISOTHREN
);

303 
i

USBx_DEVICE
->
DTHRCTL
;

307 
USBx
->
GINTMSK
 = 0;

310 
USBx
->
GINTSTS
 = 0xBFFFFFFF;

313 i‡(
cfg
.
dma_íabÀ
 =
DISABLE
)

315 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_RXFLVLM
;

319 
USBx
->
GINTMSK
 |(
USB_OTG_GINTMSK_USBSUSPM
 | 
USB_OTG_GINTMSK_USBRST
 |\

320 
USB_OTG_GINTMSK_ENUMDNEM
 | 
USB_OTG_GINTMSK_IEPINT
 |\

321 
USB_OTG_GINTMSK_OEPINT
 | 
USB_OTG_GINTMSK_IISOIXFRM
|\

322 
USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 | 
USB_OTG_GINTMSK_WUIM
);

324 if(
cfg
.
Sof_íabÀ
)

326 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_SOFM
;

329 i‡(
cfg
.
vbus_£nsög_íabÀ
 =
ENABLE
)

331 
USBx
->
GINTMSK
 |(
USB_OTG_GINTMSK_SRQIM
 | 
USB_OTG_GINTMSK_OTGINT
);

334  
HAL_OK
;

335 
	}
}

346 
HAL_SètusTy≥Def
 
	$USB_FlushTxFifo
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
num
 )

348 
uöt32_t
 
cou¡
 = 0;

350 
USBx
->
GRSTCTL
 = ( 
USB_OTG_GRSTCTL_TXFFLSH
 |(
uöt32_t
)–
num
 << 6));

354 i‡(++
cou¡
 > 200000)

356  
HAL_TIMEOUT
;

359 (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_TXFFLSH
) == USB_OTG_GRSTCTL_TXFFLSH);

361  
HAL_OK
;

362 
	}
}

370 
HAL_SètusTy≥Def
 
	$USB_FlushRxFifo
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

372 
uöt32_t
 
cou¡
 = 0;

374 
USBx
->
GRSTCTL
 = 
USB_OTG_GRSTCTL_RXFFLSH
;

378 i‡(++
cou¡
 > 200000)

380  
HAL_TIMEOUT
;

383 (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_RXFFLSH
) == USB_OTG_GRSTCTL_RXFFLSH);

385  
HAL_OK
;

386 
	}
}

400 
HAL_SètusTy≥Def
 
	$USB_SëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
•ìd
)

402 
USBx_DEVICE
->
DCFG
 |
•ìd
;

403  
HAL_OK
;

404 
	}
}

415 
uöt8_t
 
	$USB_GëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

417 
uöt8_t
 
•ìd
 = 0;

419 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ
)

421 
•ìd
 = 
USB_OTG_SPEED_HIGH
;

423 i‡(((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
)||

424 ((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_FS_PHY_48MHZ
))

426 
•ìd
 = 
USB_OTG_SPEED_FULL
;

428 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_LS_PHY_6MHZ
)

430 
•ìd
 = 
USB_OTG_SPEED_LOW
;

433  
•ìd
;

434 
	}
}

442 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

444 i‡(
ï
->
is_ö
 == 1)

446 
USBx_DEVICE
->
DAINTMSK
 |
USB_OTG_DAINTMSK_IEPM
 & ((1 << (
ï
->
num
)));

448 i‡(((
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
Ë& 
USB_OTG_DIEPCTL_USBAEP
) == 0)

450 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |(”p->
max∑ckë
 & 
USB_OTG_DIEPCTL_MPSIZ
 ) | (ï->
ty≥
 << 18 ) |\

451 ((
ï
->
num
Ë<< 22 ) | (
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
Ë| (
USB_OTG_DIEPCTL_USBAEP
));

457 
USBx_DEVICE
->
DAINTMSK
 |
USB_OTG_DAINTMSK_OEPM
 & ((1 << (
ï
->
num
)) << 16);

459 i‡(((
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
Ë& 
USB_OTG_DOEPCTL_USBAEP
) == 0)

461 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |(”p->
max∑ckë
 & 
USB_OTG_DOEPCTL_MPSIZ
 ) | (ï->
ty≥
 << 18 ) |\

462 (
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
)| (
USB_OTG_DOEPCTL_USBAEP
));

465  
HAL_OK
;

466 
	}
}

473 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eDediˇãdEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

475 
__IO
 
uöt32_t
 
debug
 = 0;

478 i‡(
ï
->
is_ö
 == 1)

480 i‡(((
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
Ë& 
USB_OTG_DIEPCTL_USBAEP
) == 0)

482 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |(”p->
max∑ckë
 & 
USB_OTG_DIEPCTL_MPSIZ
 ) | (ï->
ty≥
 << 18 ) |\

483 ((
ï
->
num
Ë<< 22 ) | (
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
Ë| (
USB_OTG_DIEPCTL_USBAEP
));

487 
debug
 |((
ï
->
max∑ckë
 & 
USB_OTG_DIEPCTL_MPSIZ
 ) | (ï->
ty≥
 << 18 ) |\

488 ((
ï
->
num
Ë<< 22 ) | (
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
Ë| (
USB_OTG_DIEPCTL_USBAEP
));

490 
USBx_DEVICE
->
DEACHMSK
 |
USB_OTG_DAINTMSK_IEPM
 & ((1 << (
ï
->
num
)));

494 i‡(((
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
Ë& 
USB_OTG_DOEPCTL_USBAEP
) == 0)

496 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |(”p->
max∑ckë
 & 
USB_OTG_DOEPCTL_MPSIZ
 ) | (ï->
ty≥
 << 18 ) |\

497 ((
ï
->
num
Ë<< 22 ) | (
USB_OTG_DOEPCTL_USBAEP
));

499 
debug
 = (
uöt32_t
)(((uöt32_à)
USBx
Ë+ 
USB_OTG_OUT_ENDPOINT_BASE
 + (0)*
USB_OTG_EP_REG_SIZE
);

500 
debug
 = (
uöt32_t
 )&
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
;

501 
debug
 |((
ï
->
max∑ckë
 & 
USB_OTG_DOEPCTL_MPSIZ
 ) | (ï->
ty≥
 << 18 ) |\

502 ((
ï
->
num
Ë<< 22 ) | (
USB_OTG_DOEPCTL_USBAEP
));

505 
USBx_DEVICE
->
DEACHMSK
 |
USB_OTG_DAINTMSK_OEPM
 & ((1 << (
ï
->
num
)) << 16);

508  
HAL_OK
;

509 
	}
}

516 
HAL_SètusTy≥Def
 
	$USB_Dó˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

519 i‡(
ï
->
is_ö
 == 1)

521 
USBx_DEVICE
->
DEACHMSK
 &~(
USB_OTG_DAINTMSK_IEPM
 & ((1 << (
ï
->
num
))));

522 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_IEPM
 & ((1 << (
ï
->
num
))));

523 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 &~ 
USB_OTG_DIEPCTL_USBAEP
;

527 
USBx_DEVICE
->
DEACHMSK
 &~(
USB_OTG_DAINTMSK_OEPM
 & ((1 << (
ï
->
num
)) << 16));

528 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_OEPM
 & ((1 << (
ï
->
num
)) << 16));

529 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 &~
USB_OTG_DOEPCTL_USBAEP
;

531  
HAL_OK
;

532 
	}
}

540 
HAL_SètusTy≥Def
 
	$USB_Dó˘iv©eDediˇãdEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

543 i‡(
ï
->
is_ö
 == 1)

545 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 &~ 
USB_OTG_DIEPCTL_USBAEP
;

546 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_IEPM
 & ((1 << (
ï
->
num
))));

550 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 &~
USB_OTG_DOEPCTL_USBAEP
;

551 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_OEPM
 & ((1 << (
ï
->
num
)) << 16));

553  
HAL_OK
;

554 
	}
}

566 
HAL_SètusTy≥Def
 
	$USB_EPSèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
, 
uöt8_t
 
dma
)

568 
uöt16_t
 
pkt˙t
 = 0;

571 i‡(
ï
->
is_ö
 == 1)

574 i‡(
ï
->
x„r_Àn
 == 0)

576 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

577 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1 << 19)) ;

578 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

587 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

588 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

589 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & ((”p->
x„r_Àn
 +Ép->
max∑ckë
 -1)/Ép->maxpacket) << 19)) ;

590 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_XFRSIZ
 &Ép->
x„r_Àn
);

592 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

594 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_MULCNT
);

595 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_MULCNT
 & (1 << 29));

599 i‡(
dma
 == 1)

601 
	`USBx_INEP
(
ï
->
num
)->
DIEPDMA
 = (
uöt32_t
)”p->
dma_addr
);

605 i‡(
ï
->
ty≥
 !
EP_TYPE_ISOC
)

608 i‡(
ï
->
x„r_Àn
 > 0)

610 
USBx_DEVICE
->
DIEPEMPMSK
 |1 << 
ï
->
num
;

615 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

617 i‡((
USBx_DEVICE
->
DSTS
 & ( 1 << 8 )) == 0)

619 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SODDFRM
;

623 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
;

628 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |(
USB_OTG_DIEPCTL_CNAK
 | 
USB_OTG_DIEPCTL_EPENA
);

630 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

632 
	`USB_WrôePackë
(
USBx
, 
ï
->
x„r_buff
,Ép->
num
,Ép->
x„r_Àn
, 
dma
);

641 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_XFRSIZ
);

642 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_PKTCNT
);

644 i‡(
ï
->
x„r_Àn
 == 0)

646 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_XFRSIZ
 &Ép->
max∑ckë
);

647 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1 << 19)) ;

651 
pkt˙t
 = (
ï
->
x„r_Àn
 +Ép->
max∑ckë
 -1)/Ép->maxpacket;

652 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (
pkt˙t
 << 19)); ;

653 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_XFRSIZ
 & (ï->
max∑ckë
 * 
pkt˙t
));

656 i‡(
dma
 == 1)

658 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPDMA
 = (
uöt32_t
Îp->
x„r_buff
;

661 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

663 i‡((
USBx_DEVICE
->
DSTS
 & ( 1 << 8 )) == 0)

665 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SODDFRM
;

669 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
;

673 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |(
USB_OTG_DOEPCTL_CNAK
 | 
USB_OTG_DOEPCTL_EPENA
);

675  
HAL_OK
;

676 
	}
}

688 
HAL_SètusTy≥Def
 
	$USB_EP0SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
, 
uöt8_t
 
dma
)

691 i‡(
ï
->
is_ö
 == 1)

694 i‡(
ï
->
x„r_Àn
 == 0)

696 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

697 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1 << 19)) ;

698 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

707 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

708 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

710 if(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

712 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

714 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1 << 19)) ;

715 
	`USBx_INEP
(
ï
->
num
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_XFRSIZ
 &Ép->
x„r_Àn
);

719 i‡(
dma
 == 1)

721 
	`USBx_INEP
(
ï
->
num
)->
DIEPDMA
 = (
uöt32_t
)”p->
dma_addr
);

726 i‡(
ï
->
x„r_Àn
 > 0)

728 
USBx_DEVICE
->
DIEPEMPMSK
 |1 << (
ï
->
num
);

733 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |(
USB_OTG_DIEPCTL_CNAK
 | 
USB_OTG_DIEPCTL_EPENA
);

741 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_XFRSIZ
);

742 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_PKTCNT
);

744 i‡(
ï
->
x„r_Àn
 > 0)

746 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

749 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1 << 19));

750 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_XFRSIZ
 & (ï->
max∑ckë
));

753 i‡(
dma
 == 1)

755 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPDMA
 = (
uöt32_t
)”p->
x„r_buff
);

759 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |(
USB_OTG_DOEPCTL_CNAK
 | 
USB_OTG_DOEPCTL_EPENA
);

761  
HAL_OK
;

762 
	}
}

777 
HAL_SètusTy≥Def
 
	$USB_WrôePackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
§c
, uöt8_à
ch_ï_num
, 
uöt16_t
 
Àn
, uöt8_à
dma
)

779 
uöt32_t
 
cou¡32b
0 , 
i
= 0;

781 i‡(
dma
 == 0)

783 
cou¡32b
 = (
Àn
 + 3) / 4;

784 
i
 = 0; i < 
cou¡32b
; i++, 
§c
 += 4)

786 
	`USBx_DFIFO
(
ch_ï_num
Ë*((
__∑cked
 
uöt32_t
 *)
§c
);

789  
HAL_OK
;

790 
	}
}

805 *
	$USB_RódPackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
)

807 
uöt32_t
 
i
=0;

808 
uöt32_t
 
cou¡32b
 = (
Àn
 + 3) / 4;

810  
i
 = 0; i < 
cou¡32b
; i++, 
de°
 += 4 )

812 *(
__∑cked
 
uöt32_t
 *)
de°
 = 
	`USBx_DFIFO
(0);

815  ((*)
de°
);

816 
	}
}

824 
HAL_SètusTy≥Def
 
	$USB_EPSëSèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
USB_OTG_EPTy≥Def
 *
ï
)

826 i‡(
ï
->
is_ö
 == 1)

828 i‡(((
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
Ë& 
USB_OTG_DIEPCTL_EPENA
) == 0)

830 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 &~(
USB_OTG_DIEPCTL_EPDIS
);

832 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_STALL
;

836 i‡(((
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
Ë& 
USB_OTG_DOEPCTL_EPENA
) == 0)

838 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 &~(
USB_OTG_DOEPCTL_EPDIS
);

840 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_STALL
;

842  
HAL_OK
;

843 
	}
}

852 
HAL_SètusTy≥Def
 
	$USB_EPCÀ¨SèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

854 i‡(
ï
->
is_ö
 == 1)

856 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 &~
USB_OTG_DIEPCTL_STALL
;

857 i‡(
ï
->
ty≥
 =
EP_TYPE_INTR
 ||Ép->ty≥ =
EP_TYPE_BULK
)

859 
	`USBx_INEP
(
ï
->
num
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
;

864 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 &~
USB_OTG_DOEPCTL_STALL
;

865 i‡(
ï
->
ty≥
 =
EP_TYPE_INTR
 ||Ép->ty≥ =
EP_TYPE_BULK
)

867 
	`USBx_OUTEP
(
ï
->
num
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
;

870  
HAL_OK
;

871 
	}
}

878 
HAL_SètusTy≥Def
 
	$USB_St›Devi˚
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

880 
uöt32_t
 
i
;

883 
i
 = 0; i < 15 ; i++)

885 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFF;

886 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFF;

888 
USBx_DEVICE
->
DAINT
 = 0xFFFFFFFF;

891 
USBx_DEVICE
->
DIEPMSK
 = 0;

892 
USBx_DEVICE
->
DOEPMSK
 = 0;

893 
USBx_DEVICE
->
DAINTMSK
 = 0;

896 
	`USB_FlushRxFifo
(
USBx
);

897 
	`USB_FlushTxFifo
(
USBx
 , 0x10 );

899  
HAL_OK
;

900 
	}
}

909 
HAL_SètusTy≥Def
 
	$USB_SëDevAddªss
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
addªss
)

911 
USBx_DEVICE
->
DCFG
 &~ (
USB_OTG_DCFG_DAD
);

912 
USBx_DEVICE
->
DCFG
 |(
addªss
 << 4Ë& 
USB_OTG_DCFG_DAD
 ;

914  
HAL_OK
;

915 
	}
}

922 
HAL_SètusTy≥Def
 
	$USB_DevC⁄√˘
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

924 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_SDIS
 ;

925 
	`HAL_Dñay
(3);

927  
HAL_OK
;

928 
	}
}

935 
HAL_SètusTy≥Def
 
	$USB_DevDisc⁄√˘
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

937 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_SDIS
 ;

938 
	`HAL_Dñay
(3);

940  
HAL_OK
;

941 
	}
}

948 
uöt32_t
 
	$USB_RódI¡îru±s
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

950 
uöt32_t
 
v
 = 0;

952 
v
 = 
USBx
->
GINTSTS
;

953 
v
 &
USBx
->
GINTMSK
;

954  
v
;

955 
	}
}

962 
uöt32_t
 
	$USB_RódDevAŒOutEpI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

964 
uöt32_t
 
v
;

965 
v
 = 
USBx_DEVICE
->
DAINT
;

966 
v
 &
USBx_DEVICE
->
DAINTMSK
;

967  ((
v
 & 0xffff0000) >> 16);

968 
	}
}

975 
uöt32_t
 
	$USB_RódDevAŒInEpI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

977 
uöt32_t
 
v
;

978 
v
 = 
USBx_DEVICE
->
DAINT
;

979 
v
 &
USBx_DEVICE
->
DAINTMSK
;

980  ((
v
 & 0xFFFF));

981 
	}
}

990 
uöt32_t
 
	$USB_RódDevOutEPI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
)

992 
uöt32_t
 
v
;

993 
v
 = 
	`USBx_OUTEP
(
ïnum
)->
DOEPINT
;

994 
v
 &
USBx_DEVICE
->
DOEPMSK
;

995  
v
;

996 
	}
}

1005 
uöt32_t
 
	$USB_RódDevInEPI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ïnum
)

1007 
uöt32_t
 
v
, 
msk
, 
emp
;

1009 
msk
 = 
USBx_DEVICE
->
DIEPMSK
;

1010 
emp
 = 
USBx_DEVICE
->
DIEPEMPMSK
;

1011 
msk
 |((
emp
 >> 
ïnum
) & 0x1) << 7;

1012 
v
 = 
	`USBx_INEP
(
ïnum
)->
DIEPINT
 & 
msk
;

1013  
v
;

1014 
	}
}

1022 
	$USB_CÀ¨I¡îru±s
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
)

1024 
USBx
->
GINTSTS
 |
öãºu±
;

1025 
	}
}

1035 
uöt32_t
 
	$USB_GëMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1037  ((
USBx
->
GINTSTS
 ) & 0x1);

1038 
	}
}

1046 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eSëup
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1049 
	`USBx_INEP
(0)->
DIEPCTL
 &~
USB_OTG_DIEPCTL_MPSIZ
;

1051 if((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
Ë=
DSTS_ENUMSPD_LS_PHY_6MHZ
)

1053 
	`USBx_INEP
(0)->
DIEPCTL
 |= 3;

1055 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_CGINAK
;

1057  
HAL_OK
;

1058 
	}
}

1071 
HAL_SètusTy≥Def
 
	$USB_EP0_OutSèπ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
dma
, uöt8_à*
p£tup
)

1073 
	`USBx_OUTEP
(0)->
DOEPTSIZ
 = 0;

1074 
	`USBx_OUTEP
(0)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1 << 19)) ;

1075 
	`USBx_OUTEP
(0)->
DOEPTSIZ
 |= (3 * 8);

1076 
	`USBx_OUTEP
(0)->
DOEPTSIZ
 |
USB_OTG_DOEPTSIZ_STUPCNT
;

1078 i‡(
dma
 == 1)

1080 
	`USBx_OUTEP
(0)->
DOEPDMA
 = (
uöt32_t
)
p£tup
;

1082 
	`USBx_OUTEP
(0)->
DOEPCTL
 = 0x80008000;

1085  
HAL_OK
;

1086 
	}
}

1094 
HAL_SètusTy≥Def
 
	$USB_C‹eRe£t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1096 
uöt32_t
 
cou¡
 = 0;

1101 i‡(++
cou¡
 > 200000)

1103  
HAL_TIMEOUT
;

1106 (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_AHBIDL
) == 0);

1109 
cou¡
 = 0;

1110 
USBx
->
GRSTCTL
 |
USB_OTG_GRSTCTL_CSRST
;

1114 i‡(++
cou¡
 > 200000)

1116  
HAL_TIMEOUT
;

1119 (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_CSRST
) == USB_OTG_GRSTCTL_CSRST);

1121  
HAL_OK
;

1122 
	}
}

1133 
HAL_SètusTy≥Def
 
	$USB_Ho°Inô
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

1135 
uöt32_t
 
i
;

1138 
USBx_PCGCCTL
 = 0;

1141 #i‡
	`deföed
(
STM32F446xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
)

1142 
USBx
->
GCCFG
 |
USB_OTG_GCCFG_VBDEN
;

1144 
USBx
->
GCCFG
 &=~ (
USB_OTG_GCCFG_VBUSASEN
);

1145 
USBx
->
GCCFG
 &=~ (
USB_OTG_GCCFG_VBUSBSEN
);

1146 
USBx
->
GCCFG
 |
USB_OTG_GCCFG_NOVBUSSENS
;

1150 if((
cfg
.
•ìd
 =
USB_OTG_SPEED_FULL
)&&

1151 (
USBx
 !
USB_OTG_FS
))

1153 
USBx_HOST
->
HCFG
 |
USB_OTG_HCFG_FSLSS
;

1157 
USBx_HOST
->
HCFG
 &~(
USB_OTG_HCFG_FSLSS
);

1161 
	`USB_FlushTxFifo
(
USBx
, 0x10 );

1162 
	`USB_FlushRxFifo
(
USBx
);

1165 
i
 = 0; i < 
cfg
.
Ho°_ch™√ls
; i++)

1167 
	`USBx_HC
(
i
)->
HCINT
 = 0xFFFFFFFF;

1168 
	`USBx_HC
(
i
)->
HCINTMSK
 = 0;

1172 
	`USB_DriveVbus
(
USBx
, 1);

1174 
	`HAL_Dñay
(200);

1177 
USBx
->
GINTMSK
 = 0;

1180 
USBx
->
GINTSTS
 = 0xFFFFFFFF;

1182 if(
USBx
 =
USB_OTG_FS
)

1185 
USBx
->
GRXFSIZ
 = (
uöt32_t
 )0x80;

1186 
USBx
->
DIEPTXF0_HNPTXFSIZ
 = (
uöt32_t
 )(((0x60 << 16)& 
USB_OTG_NPTXFD
) | 0x80);

1187 
USBx
->
HPTXFSIZ
 = (
uöt32_t
 )(((0x40 << 16)& 
USB_OTG_HPTXFSIZ_PTXFD
) | 0xE0);

1192 
USBx
->
GRXFSIZ
 = (
uöt32_t
 )0x200;

1193 
USBx
->
DIEPTXF0_HNPTXFSIZ
 = (
uöt32_t
 )(((0x100 << 16)& 
USB_OTG_NPTXFD
) | 0x200);

1194 
USBx
->
HPTXFSIZ
 = (
uöt32_t
 )(((0xE0 << 16)& 
USB_OTG_HPTXFSIZ_PTXFD
) | 0x300);

1198 i‡(
cfg
.
dma_íabÀ
 =
DISABLE
)

1200 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_RXFLVLM
;

1204 
USBx
->
GINTMSK
 |(
USB_OTG_GINTMSK_PRTIM
 | 
USB_OTG_GINTMSK_HCIM
 |\

1205 
USB_OTG_GINTMSK_SOFM
 |
USB_OTG_GINTSTS_DISCINT
|\

1206 
USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 | 
USB_OTG_GINTMSK_WUIM
);

1208  
HAL_OK
;

1209 
	}
}

1221 
HAL_SètusTy≥Def
 
	$USB_InôFSLSPClkSñ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
‰eq
)

1223 
USBx_HOST
->
HCFG
 &~(
USB_OTG_HCFG_FSLSPCS
);

1224 
USBx_HOST
->
HCFG
 |(
‰eq
 & 
USB_OTG_HCFG_FSLSPCS
);

1226 i‡(
‰eq
 =
HCFG_48_MHZ
)

1228 
USBx_HOST
->
HFIR
 = (
uöt32_t
)48000;

1230 i‡(
‰eq
 =
HCFG_6_MHZ
)

1232 
USBx_HOST
->
HFIR
 = (
uöt32_t
)6000;

1234  
HAL_OK
;

1235 
	}
}

1244 
HAL_SètusTy≥Def
 
	$USB_Re£tP‹t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1246 
__IO
 
uöt32_t
 
h¥t0
;

1248 
h¥t0
 = 
USBx_HPRT0
;

1250 
h¥t0
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |\

1251 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
 );

1253 
USBx_HPRT0
 = (
USB_OTG_HPRT_PRST
 | 
h¥t0
);

1254 
	`HAL_Dñay
 (10);

1255 
USBx_HPRT0
 = ((~
USB_OTG_HPRT_PRST
Ë& 
h¥t0
);

1256  
HAL_OK
;

1257 
	}
}

1267 
HAL_SètusTy≥Def
 
	$USB_DriveVbus
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
°©e
)

1269 
__IO
 
uöt32_t
 
h¥t0
;

1271 
h¥t0
 = 
USBx_HPRT0
;

1272 
h¥t0
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |\

1273 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
 );

1275 i‡(((
h¥t0
 & 
USB_OTG_HPRT_PPWR
Ë=0 ) && (
°©e
 == 1 ))

1277 
USBx_HPRT0
 = (
USB_OTG_HPRT_PPWR
 | 
h¥t0
);

1279 i‡(((
h¥t0
 & 
USB_OTG_HPRT_PPWR
Ë=USB_OTG_HPRT_PPWRË&& (
°©e
 == 0 ))

1281 
USBx_HPRT0
 = ((~
USB_OTG_HPRT_PPWR
Ë& 
h¥t0
);

1283  
HAL_OK
;

1284 
	}
}

1295 
uöt32_t
 
	$USB_GëHo°S≥ed
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1297 
__IO
 
uöt32_t
 
h¥t0
;

1299 
h¥t0
 = 
USBx_HPRT0
;

1300  ((
h¥t0
 & 
USB_OTG_HPRT_PSPD
) >> 17);

1301 
	}
}

1308 
uöt32_t
 
	$USB_GëCuºítFøme
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1310  (
USBx_HOST
->
HFNUM
 & 
USB_OTG_HFNUM_FRNUM
);

1311 
	}
}

1337 
HAL_SètusTy≥Def
 
	$USB_HC_Inô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
,

1338 
uöt8_t
 
ch_num
,

1339 
uöt8_t
 
ïnum
,

1340 
uöt8_t
 
dev_addªss
,

1341 
uöt8_t
 
•ìd
,

1342 
uöt8_t
 
ï_ty≥
,

1343 
uöt16_t
 
mps
)

1347 
	`USBx_HC
(
ch_num
)->
HCINT
 = 0xFFFFFFFF;

1350 
ï_ty≥
)

1352 
EP_TYPE_CTRL
:

1353 
EP_TYPE_BULK
:

1355 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |\

1356 
USB_OTG_HCINTMSK_STALLM
 |\

1357 
USB_OTG_HCINTMSK_TXERRM
 |\

1358 
USB_OTG_HCINTMSK_DTERRM
 |\

1359 
USB_OTG_HCINTMSK_AHBERR
 |\

1360 
USB_OTG_HCINTMSK_NAKM
 ;

1362 i‡(
ïnum
 & 0x80)

1364 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 |
USB_OTG_HCINTMSK_BBERRM
;

1368 if(
USBx
 !
USB_OTG_FS
)

1370 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 |(
USB_OTG_HCINTMSK_NYET
 | 
USB_OTG_HCINTMSK_ACKM
);

1375 
EP_TYPE_INTR
:

1377 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |\

1378 
USB_OTG_HCINTMSK_STALLM
 |\

1379 
USB_OTG_HCINTMSK_TXERRM
 |\

1380 
USB_OTG_HCINTMSK_DTERRM
 |\

1381 
USB_OTG_HCINTMSK_NAKM
 |\

1382 
USB_OTG_HCINTMSK_AHBERR
 |\

1383 
USB_OTG_HCINTMSK_FRMORM
 ;

1385 i‡(
ïnum
 & 0x80)

1387 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 |
USB_OTG_HCINTMSK_BBERRM
;

1391 
EP_TYPE_ISOC
:

1393 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |\

1394 
USB_OTG_HCINTMSK_ACKM
 |\

1395 
USB_OTG_HCINTMSK_AHBERR
 |\

1396 
USB_OTG_HCINTMSK_FRMORM
 ;

1398 i‡(
ïnum
 & 0x80)

1400 
	`USBx_HC
(
ch_num
)->
HCINTMSK
 |(
USB_OTG_HCINTMSK_TXERRM
 | 
USB_OTG_HCINTMSK_BBERRM
);

1406 
USBx_HOST
->
HAINTMSK
 |(1 << 
ch_num
);

1409 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_HCIM
;

1412 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = (((
dev_addªss
 << 22Ë& 
USB_OTG_HCCHAR_DAD
) |\

1413 (((
ïnum
 & 0x7F)<< 11Ë& 
USB_OTG_HCCHAR_EPNUM
)|\

1414 ((((
ïnum
 & 0x80Ë=0x80)<< 15Ë& 
USB_OTG_HCCHAR_EPDIR
)|\

1415 (((
•ìd
 =
HPRT0_PRTSPD_LOW_SPEED
)<< 17Ë& 
USB_OTG_HCCHAR_LSDEV
)|\

1416 ((
ï_ty≥
 << 18Ë& 
USB_OTG_HCCHAR_EPTYP
)|\

1417 (
mps
 & 
USB_OTG_HCCHAR_MPSIZ
));

1419 i‡(
ï_ty≥
 =
EP_TYPE_INTR
)

1421 
	`USBx_HC
(
ch_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_ODDFRM
 ;

1424  
HAL_OK
;

1425 
	}
}

1437 #i‡
deföed
 (
__CC_ARM
)

1438 #¥agm®
O0


1439 #ñi‡
deföed
 (
__GNUC__
)

1440 #¥agm®
GCC
 
›timize
 ("O0")

1442 
HAL_SètusTy≥Def
 
	$USB_HC_SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_HCTy≥Def
 *
hc
, 
uöt8_t
 
dma
)

1444 
uöt8_t
 
is_odd‰ame
 = 0;

1445 
uöt16_t
 
Àn_w‹ds
 = 0;

1446 
uöt16_t
 
num_∑ckës
 = 0;

1447 
uöt16_t
 
max_hc_pkt_cou¡
 = 256;

1448 
uöt32_t
 
tm¥eg
 = 0;

1450 if((
USBx
 !
USB_OTG_FS
Ë&& (
hc
->
•ìd
 =
USB_OTG_SPEED_HIGH
))

1452 if((
dma
 =0Ë&& (
hc
->
do_pög
 == 1))

1454 
	`USB_DoPög
(
USBx
, 
hc
->
ch_num
);

1455  
HAL_OK
;

1457 if(
dma
 == 1)

1459 
	`USBx_HC
(
hc
->
ch_num
)->
HCINTMSK
 &~(
USB_OTG_HCINTMSK_NYET
 | 
USB_OTG_HCINTMSK_ACKM
);

1460 
hc
->
do_pög
 = 0;

1465 i‡(
hc
->
x„r_Àn
 > 0)

1467 
num_∑ckës
 = (
hc
->
x„r_Àn
 + hc->
max_∑ckë
 - 1) / hc->max_packet;

1469 i‡(
num_∑ckës
 > 
max_hc_pkt_cou¡
)

1471 
num_∑ckës
 = 
max_hc_pkt_cou¡
;

1472 
hc
->
x„r_Àn
 = 
num_∑ckës
 * hc->
max_∑ckë
;

1477 
num_∑ckës
 = 1;

1479 i‡(
hc
->
ï_is_ö
)

1481 
hc
->
x„r_Àn
 = 
num_∑ckës
 * hc->
max_∑ckë
;

1485 
	`USBx_HC
(
hc
->
ch_num
)->
HCTSIZ
 = (((hc->
x„r_Àn
Ë& 
USB_OTG_HCTSIZ_XFRSIZ
)) |\

1486 ((
num_∑ckës
 << 19Ë& 
USB_OTG_HCTSIZ_PKTCNT
) |\

1487 (((
hc
->
d©a_pid
Ë<< 29Ë& 
USB_OTG_HCTSIZ_DPID
);

1489 i‡(
dma
)

1492 
	`USBx_HC
(
hc
->
ch_num
)->
HCDMA
 = (
uöt32_t
)hc->
x„r_buff
;

1495 
is_odd‰ame
 = (
USBx_HOST
->
HFNUM
 & 0x01) ? 0 : 1;

1496 
	`USBx_HC
(
hc
->
ch_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_ODDFRM
;

1497 
	`USBx_HC
(
hc
->
ch_num
)->
HCCHAR
 |(
is_odd‰ame
 << 29);

1500 
tm¥eg
 = 
	`USBx_HC
(
hc
->
ch_num
)->
HCCHAR
;

1501 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

1502 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

1503 
	`USBx_HC
(
hc
->
ch_num
)->
HCCHAR
 = 
tm¥eg
;

1505 i‡(
dma
 == 0)

1507 if((
hc
->
ï_is_ö
 =0Ë&& (hc->
x„r_Àn
 > 0))

1509 
hc
->
ï_ty≥
)

1512 
EP_TYPE_CTRL
:

1513 
EP_TYPE_BULK
:

1515 
Àn_w‹ds
 = (
hc
->
x„r_Àn
 + 3) / 4;

1518 if(
Àn_w‹ds
 > (
USBx
->
HNPTXSTS
 & 0xFFFF))

1521 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_NPTXFEM
;

1525 
EP_TYPE_INTR
:

1526 
EP_TYPE_ISOC
:

1527 
Àn_w‹ds
 = (
hc
->
x„r_Àn
 + 3) / 4;

1529 if(
Àn_w‹ds
 > (
USBx_HOST
->
HPTXSTS
 & 0xFFFF))

1532 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_PTXFEM
;

1541 
	`USB_WrôePackë
(
USBx
, 
hc
->
x„r_buff
, hc->
ch_num
, hc->
x„r_Àn
, 0);

1545  
HAL_OK
;

1546 
	}
}

1553 
uöt32_t
 
	$USB_HC_RódI¡îru±
 (
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1555  ((
USBx_HOST
->
HAINT
) & 0xFFFF);

1556 
	}
}

1565 
HAL_SètusTy≥Def
 
	$USB_HC_HÆt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
hc_num
)

1567 
uöt32_t
 
cou¡
 = 0;

1570 i‡(((
	`USBx_HC
(
hc_num
)->
HCCHAR
Ë& (
HCCHAR_CTRL
 << 18)Ë|| ((USBx_HC(hc_num)->HCCHARË& (
HCCHAR_BULK
 << 18)))

1572 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHDIS
;

1574 i‡((
USBx
->
HNPTXSTS
 & 0xFFFF) == 0)

1576 
	`USBx_HC
(
hc_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_CHENA
;

1577 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1578 
	`USBx_HC
(
hc_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_EPDIR
;

1581 i‡(++
cou¡
 > 1000)

1586 (
	`USBx_HC
(
hc_num
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1590 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1595 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHDIS
;

1597 i‡((
USBx_HOST
->
HPTXSTS
 & 0xFFFF) == 0)

1599 
	`USBx_HC
(
hc_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_CHENA
;

1600 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1601 
	`USBx_HC
(
hc_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_EPDIR
;

1604 i‡(++
cou¡
 > 1000)

1609 (
	`USBx_HC
(
hc_num
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1613 
	`USBx_HC
(
hc_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1617  
HAL_OK
;

1618 
	}
}

1627 
HAL_SètusTy≥Def
 
	$USB_DoPög
(
USB_OTG_GlobÆTy≥Def
 *
USBx
 , 
uöt8_t
 
ch_num
)

1629 
uöt8_t
 
num_∑ckës
 = 1;

1630 
uöt32_t
 
tm¥eg
 = 0;

1632 
	`USBx_HC
(
ch_num
)->
HCTSIZ
 = ((
num_∑ckës
 << 19Ë& 
USB_OTG_HCTSIZ_PKTCNT
) |\

1633 
USB_OTG_HCTSIZ_DOPING
;

1636 
tm¥eg
 = 
	`USBx_HC
(
ch_num
)->
HCCHAR
;

1637 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

1638 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

1639 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = 
tm¥eg
;

1641  
HAL_OK
;

1642 
	}
}

1649 
HAL_SètusTy≥Def
 
	$USB_St›Ho°
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1651 
uöt8_t
 
i
;

1652 
uöt32_t
 
cou¡
 = 0;

1653 
uöt32_t
 
vÆue
;

1655 
	`USB_DißbÀGlobÆI¡
(
USBx
);

1658 
	`USB_FlushTxFifo
(
USBx
, 0x10);

1659 
	`USB_FlushRxFifo
(
USBx
);

1662 
i
 = 0; i <= 15; i++)

1665 
vÆue
 = 
	`USBx_HC
(
i
)->
HCCHAR
 ;

1666 
vÆue
 |
USB_OTG_HCCHAR_CHDIS
;

1667 
vÆue
 &~
USB_OTG_HCCHAR_CHENA
;

1668 
vÆue
 &~
USB_OTG_HCCHAR_EPDIR
;

1669 
	`USBx_HC
(
i
)->
HCCHAR
 = 
vÆue
;

1673 
i
 = 0; i <= 15; i++)

1675 
vÆue
 = 
	`USBx_HC
(
i
)->
HCCHAR
 ;

1677 
vÆue
 |
USB_OTG_HCCHAR_CHDIS
;

1678 
vÆue
 |
USB_OTG_HCCHAR_CHENA
;

1679 
vÆue
 &~
USB_OTG_HCCHAR_EPDIR
;

1681 
	`USBx_HC
(
i
)->
HCCHAR
 = 
vÆue
;

1684 i‡(++
cou¡
 > 1000)

1689 (
	`USBx_HC
(
i
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1693 
USBx_HOST
->
HAINT
 = 0xFFFFFFFF;

1694 
USBx
->
GINTSTS
 = 0xFFFFFFFF;

1695 
	`USB_E«bÀGlobÆI¡
(
USBx
);

1696  
HAL_OK
;

1697 
	}
}

1702 
	gSTM32F401xC
 || 
	gSTM32F401xE
 || 
	gSTM32F411xE
 || 
	gSTM32F446xx
 || 
	gSTM32F469xx
 || 
	gSTM32F479xx
 */

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\arm_common_tables.h

24 #i‚de‡
_ARM_COMMON_TABLES_H


25 
	#_ARM_COMMON_TABLES_H


	)

27 
	~"¨m_m©h.h
"

29 
uöt16_t
 
¨mBôRevTabÀ
[256];

30 
q15_t
 
¨mRecùTabÀQ15
[64];

31 
q31_t
 
¨mRecùTabÀQ31
[64];

32 c⁄° 
q31_t
 
ªÆC€fAQ31
[1024];

33 c⁄° 
q31_t
 
ªÆC€fBQ31
[1024];

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\arm_math.h

251 #i‚de‡
_ARM_MATH_H


252 
	#_ARM_MATH_H


	)

254 
	#__CMSIS_GENERIC


	)

256 #i‡
deföed
 (
ARM_MATH_CM4
)

257 
	~"c‹e_cm4.h
"

258 #ñi‡
deföed
 (
ARM_MATH_CM3
)

259 
	~"c‹e_cm3.h
"

260 #ñi‡
deföed
 (
ARM_MATH_CM0
)

261 
	~"c‹e_cm0.h
"

263 
	~"ARMCM4.h
"

267 #unde‡
__CMSIS_GENERIC


268 
	~"°rög.h
"

269 
	~"m©h.h
"

270 #ifdef 
__˝lu•lus


280 
	#DELTA_Q31
 (0x100)

	)

281 
	#DELTA_Q15
 0x5

	)

282 
	#INDEX_MASK
 0x0000003F

	)

283 
	#PI
 3.14159265358979f

	)

289 
	#TABLE_SIZE
 256

	)

290 
	#TABLE_SPACING_Q31
 0x800000

	)

291 
	#TABLE_SPACING_Q15
 0x80

	)

298 
	#INPUT_SPACING
 0xB60B61

	)

307 
ARM_MATH_SUCCESS
 = 0,

308 
ARM_MATH_ARGUMENT_ERROR
 = -1,

309 
ARM_MATH_LENGTH_ERROR
 = -2,

310 
ARM_MATH_SIZE_MISMATCH
 = -3,

311 
ARM_MATH_NANINF
 = -4,

312 
ARM_MATH_SINGULAR
 = -5,

313 
ARM_MATH_TEST_FAILURE
 = -6

314 } 
	t¨m_°©us
;

319 
öt8_t
 
	tq7_t
;

324 
öt16_t
 
	tq15_t
;

329 
öt32_t
 
	tq31_t
;

334 
öt64_t
 
	tq63_t
;

339 
	tÊﬂt32_t
;

344 
	tÊﬂt64_t
;

349 
	#__SIMD32
(
addr
Ë(*(
öt32_t
 **Ë& (addr))

	)

351 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

355 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1) << 0) & (int32_t)0x0000FFFF) | \

356 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
Ë& (öt32_t)0xFFFF0000Ë)

	)

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0) << 0) & (int32_t)0x000000FF) | \

367 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

368 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

369 (((
öt32_t
)(
v3
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

372 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3) << 0) & (int32_t)0x000000FF) | \

373 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

374 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

375 (((
öt32_t
)(
v0
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

383 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

384 
q63_t
 
x
)

386  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

387 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

393 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

394 
q63_t
 
x
)

396  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

397 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

403 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

404 
q31_t
 
x
)

406  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

407 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

413 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

414 
q31_t
 
x
)

416  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

417 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

424 
__INLINE
 
q63_t
 
mu…32x64
(

425 
q63_t
 
x
,

426 
q31_t
 
y
)

428  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

429 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

433 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& deföed ( 
__CC_ARM
 )

434 
	#__CLZ
 
__˛z


	)

437 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

439 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
);

442 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
)

444 
uöt32_t
 
cou¡
 = 0;

445 
uöt32_t
 
mask
 = 0x80000000;

447 (
d©a
 & 
mask
) == 0)

449 
cou¡
 += 1u;

450 
mask
 = mask >> 1u;

453 (
cou¡
);

463 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

464 
q31_t
 
ö
,

465 
q31_t
 * 
d°
,

466 
q31_t
 * 
pRecùTabÀ
)

469 
uöt32_t
 
out
, 
ãmpVÆ
;

470 
uöt32_t
 
ödex
, 
i
;

471 
uöt32_t
 
signBôs
;

473 if(
ö
 > 0)

475 
signBôs
 = 
__CLZ
(
ö
) - 1;

479 
signBôs
 = 
__CLZ
(-
ö
) - 1;

483 
ö
 = i¿<< 
signBôs
;

486 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

487 
ödex
 = (ödex & 
INDEX_MASK
);

490 
out
 = 
pRecùTabÀ
[
ödex
];

494 
i
 = 0u; i < 2u; i++)

496 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

497 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

500 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

504 *
d°
 = 
out
;

507  (
signBôs
 + 1u);

514 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

515 
q15_t
 
ö
,

516 
q15_t
 * 
d°
,

517 
q15_t
 * 
pRecùTabÀ
)

520 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

521 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

522 
uöt32_t
 
signBôs
 = 0;

524 if(
ö
 > 0)

526 
signBôs
 = 
__CLZ
(
ö
) - 17;

530 
signBôs
 = 
__CLZ
(-
ö
) - 17;

534 
ö
 = i¿<< 
signBôs
;

537 
ödex
 = 
ö
 >> 8;

538 
ödex
 = (ödex & 
INDEX_MASK
);

541 
out
 = 
pRecùTabÀ
[
ödex
];

545 
i
 = 0; i < 2; i++)

547 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

548 
ãmpVÆ
 = 0x7FFF -ÅempVal;

550 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

554 *
d°
 = 
out
;

557  (
signBôs
 + 1);

565 #i‡
deföed
(
ARM_MATH_CM0
)

567 
__INLINE
 
q31_t
 
__SSAT
(

568 
q31_t
 
x
,

569 
uöt32_t
 
y
)

571 
öt32_t
 
posMax
, 
√gMö
;

572 
uöt32_t
 
i
;

574 
posMax
 = 1;

575 
i
 = 0; i < (
y
 - 1); i++)

577 
posMax
 =ÖosMax * 2;

580 if(
x
 > 0)

582 
posMax
 = (posMax - 1);

584 if(
x
 > 
posMax
)

586 
x
 = 
posMax
;

591 
√gMö
 = -
posMax
;

593 if(
x
 < 
√gMö
)

595 
x
 = 
√gMö
;

598  (
x
);

610 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

615 
__INLINE
 
q31_t
 
__QADD8
(

616 
q31_t
 
x
,

617 
q31_t
 
y
)

620 
q31_t
 
sum
;

621 
q7_t
 
r
, 
s
, 
t
, 
u
;

623 
r
 = (Ë
x
;

624 
s
 = (Ë
y
;

626 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

627 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

628 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

629 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

631 
sum
 = (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

632 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

634  
sum
;

641 
__INLINE
 
q31_t
 
__QSUB8
(

642 
q31_t
 
x
,

643 
q31_t
 
y
)

646 
q31_t
 
sum
;

647 
q31_t
 
r
, 
s
, 
t
, 
u
;

649 
r
 = (Ë
x
;

650 
s
 = (Ë
y
;

652 
r
 = 
__SSAT
(‘ - 
s
), 8);

653 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

654 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

655 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

657 
sum
 =

658 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 & 0x000000FF);

660  
sum
;

670 
__INLINE
 
q31_t
 
__QADD16
(

671 
q31_t
 
x
,

672 
q31_t
 
y
)

675 
q31_t
 
sum
;

676 
q31_t
 
r
, 
s
;

678 
r
 = (Ë
x
;

679 
s
 = (Ë
y
;

681 
r
 = 
__SSAT
‘ + 
s
, 16);

682 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

684 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

686  
sum
;

693 
__INLINE
 
q31_t
 
__SHADD16
(

694 
q31_t
 
x
,

695 
q31_t
 
y
)

698 
q31_t
 
sum
;

699 
q31_t
 
r
, 
s
;

701 
r
 = (Ë
x
;

702 
s
 = (Ë
y
;

704 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

705 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

707 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

709  
sum
;

716 
__INLINE
 
q31_t
 
__QSUB16
(

717 
q31_t
 
x
,

718 
q31_t
 
y
)

721 
q31_t
 
sum
;

722 
q31_t
 
r
, 
s
;

724 
r
 = (Ë
x
;

725 
s
 = (Ë
y
;

727 
r
 = 
__SSAT
‘ - 
s
, 16);

728 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

730 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

732  
sum
;

738 
__INLINE
 
q31_t
 
__SHSUB16
(

739 
q31_t
 
x
,

740 
q31_t
 
y
)

743 
q31_t
 
diff
;

744 
q31_t
 
r
, 
s
;

746 
r
 = (Ë
x
;

747 
s
 = (Ë
y
;

749 
r
 = (‘ >> 1Ë- (
s
 >> 1));

750 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

752 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

754  
diff
;

760 
__INLINE
 
q31_t
 
__QASX
(

761 
q31_t
 
x
,

762 
q31_t
 
y
)

765 
q31_t
 
sum
 = 0;

767 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë+ (Ë
y
))) << 16) +

768 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 - (Ë(
y
 >> 16)));

770  
sum
;

776 
__INLINE
 
q31_t
 
__SHASX
(

777 
q31_t
 
x
,

778 
q31_t
 
y
)

781 
q31_t
 
sum
;

782 
q31_t
 
r
, 
s
;

784 
r
 = (Ë
x
;

785 
s
 = (Ë
y
;

787 
r
 = (‘ >> 1Ë- (
y
 >> 17));

788 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

790 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

792  
sum
;

799 
__INLINE
 
q31_t
 
__QSAX
(

800 
q31_t
 
x
,

801 
q31_t
 
y
)

804 
q31_t
 
sum
 = 0;

806 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë- (Ë
y
))) << 16) +

807 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 + (Ë(
y
 >> 16)));

809  
sum
;

815 
__INLINE
 
q31_t
 
__SHSAX
(

816 
q31_t
 
x
,

817 
q31_t
 
y
)

820 
q31_t
 
sum
;

821 
q31_t
 
r
, 
s
;

823 
r
 = (Ë
x
;

824 
s
 = (Ë
y
;

826 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

827 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

829 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

831  
sum
;

837 
__INLINE
 
q31_t
 
__SMUSDX
(

838 
q31_t
 
x
,

839 
q31_t
 
y
)

842  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) -

843 ((Ë(
x
 >> 16Ë* (Ë
y
)));

849 
__INLINE
 
q31_t
 
__SMUADX
(

850 
q31_t
 
x
,

851 
q31_t
 
y
)

854  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) +

855 ((Ë(
x
 >> 16Ë* (Ë
y
)));

861 
__INLINE
 
q31_t
 
__QADD
(

862 
q31_t
 
x
,

863 
q31_t
 
y
)

865  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

871 
__INLINE
 
q31_t
 
__QSUB
(

872 
q31_t
 
x
,

873 
q31_t
 
y
)

875  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

881 
__INLINE
 
q31_t
 
__SMLAD
(

882 
q31_t
 
x
,

883 
q31_t
 
y
,

884 
q31_t
 
sum
)

887  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

888 ((Ë
x
 * (Ë
y
));

894 
__INLINE
 
q31_t
 
__SMLADX
(

895 
q31_t
 
x
,

896 
q31_t
 
y
,

897 
q31_t
 
sum
)

900  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

901 ((Ë
x
 * (Ë(
y
 >> 16)));

907 
__INLINE
 
q31_t
 
__SMLSDX
(

908 
q31_t
 
x
,

909 
q31_t
 
y
,

910 
q31_t
 
sum
)

913  (
sum
 - ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

914 ((Ë
x
 * (Ë(
y
 >> 16)));

920 
__INLINE
 
q63_t
 
__SMLALD
(

921 
q31_t
 
x
,

922 
q31_t
 
y
,

923 
q63_t
 
sum
)

926  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

927 ((Ë
x
 * (Ë
y
));

933 
__INLINE
 
q63_t
 
__SMLALDX
(

934 
q31_t
 
x
,

935 
q31_t
 
y
,

936 
q63_t
 
sum
)

939  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë
y
)) +

940 ((Ë
x
 * (Ë(
y
 >> 16));

946 
__INLINE
 
q31_t
 
__SMUAD
(

947 
q31_t
 
x
,

948 
q31_t
 
y
)

951  (((
x
 >> 16Ë* (
y
 >> 16)) +

952 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

958 
__INLINE
 
q31_t
 
__SMUSD
(

959 
q31_t
 
x
,

960 
q31_t
 
y
)

963  (-((
x
 >> 16Ë* (
y
 >> 16)) +

964 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

978 
uöt16_t
 
numT≠s
;

979 
q7_t
 *
pSèã
;

980 
q7_t
 *
pC€ffs
;

981 } 
	t¨m_fú_ö°™˚_q7
;

988 
uöt16_t
 
numT≠s
;

989 
q15_t
 *
pSèã
;

990 
q15_t
 *
pC€ffs
;

991 } 
	t¨m_fú_ö°™˚_q15
;

998 
uöt16_t
 
numT≠s
;

999 
q31_t
 *
pSèã
;

1000 
q31_t
 *
pC€ffs
;

1001 } 
	t¨m_fú_ö°™˚_q31
;

1008 
uöt16_t
 
numT≠s
;

1009 
Êﬂt32_t
 *
pSèã
;

1010 
Êﬂt32_t
 *
pC€ffs
;

1011 } 
	t¨m_fú_ö°™˚_f32
;

1022 
¨m_fú_q7
(

1023 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1024 
q7_t
 * 
pSrc
,

1025 
q7_t
 * 
pD°
,

1026 
uöt32_t
 
blockSize
);

1038 
¨m_fú_öô_q7
(

1039 
¨m_fú_ö°™˚_q7
 * 
S
,

1040 
uöt16_t
 
numT≠s
,

1041 
q7_t
 * 
pC€ffs
,

1042 
q7_t
 * 
pSèã
,

1043 
uöt32_t
 
blockSize
);

1054 
¨m_fú_q15
(

1055 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1056 
q15_t
 * 
pSrc
,

1057 
q15_t
 * 
pD°
,

1058 
uöt32_t
 
blockSize
);

1068 
¨m_fú_Á°_q15
(

1069 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1070 
q15_t
 * 
pSrc
,

1071 
q15_t
 * 
pD°
,

1072 
uöt32_t
 
blockSize
);

1085 
¨m_°©us
 
¨m_fú_öô_q15
(

1086 
¨m_fú_ö°™˚_q15
 * 
S
,

1087 
uöt16_t
 
numT≠s
,

1088 
q15_t
 * 
pC€ffs
,

1089 
q15_t
 * 
pSèã
,

1090 
uöt32_t
 
blockSize
);

1100 
¨m_fú_q31
(

1101 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1102 
q31_t
 * 
pSrc
,

1103 
q31_t
 * 
pD°
,

1104 
uöt32_t
 
blockSize
);

1114 
¨m_fú_Á°_q31
(

1115 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1116 
q31_t
 * 
pSrc
,

1117 
q31_t
 * 
pD°
,

1118 
uöt32_t
 
blockSize
);

1129 
¨m_fú_öô_q31
(

1130 
¨m_fú_ö°™˚_q31
 * 
S
,

1131 
uöt16_t
 
numT≠s
,

1132 
q31_t
 * 
pC€ffs
,

1133 
q31_t
 * 
pSèã
,

1134 
uöt32_t
 
blockSize
);

1144 
¨m_fú_f32
(

1145 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1146 
Êﬂt32_t
 * 
pSrc
,

1147 
Êﬂt32_t
 * 
pD°
,

1148 
uöt32_t
 
blockSize
);

1159 
¨m_fú_öô_f32
(

1160 
¨m_fú_ö°™˚_f32
 * 
S
,

1161 
uöt16_t
 
numT≠s
,

1162 
Êﬂt32_t
 * 
pC€ffs
,

1163 
Êﬂt32_t
 * 
pSèã
,

1164 
uöt32_t
 
blockSize
);

1172 
öt8_t
 
numSèges
;

1173 
q15_t
 *
pSèã
;

1174 
q15_t
 *
pC€ffs
;

1175 
öt8_t
 
po°Shi·
;

1177 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1185 
uöt32_t
 
numSèges
;

1186 
q31_t
 *
pSèã
;

1187 
q31_t
 *
pC€ffs
;

1188 
uöt8_t
 
po°Shi·
;

1190 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1197 
uöt32_t
 
numSèges
;

1198 
Êﬂt32_t
 *
pSèã
;

1199 
Êﬂt32_t
 *
pC€ffs
;

1202 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1215 
¨m_biquad_ˇsˇde_df1_q15
(

1216 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1217 
q15_t
 * 
pSrc
,

1218 
q15_t
 * 
pD°
,

1219 
uöt32_t
 
blockSize
);

1231 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1232 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1233 
uöt8_t
 
numSèges
,

1234 
q15_t
 * 
pC€ffs
,

1235 
q15_t
 * 
pSèã
,

1236 
öt8_t
 
po°Shi·
);

1248 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1249 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1250 
q15_t
 * 
pSrc
,

1251 
q15_t
 * 
pD°
,

1252 
uöt32_t
 
blockSize
);

1264 
¨m_biquad_ˇsˇde_df1_q31
(

1265 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1266 
q31_t
 * 
pSrc
,

1267 
q31_t
 * 
pD°
,

1268 
uöt32_t
 
blockSize
);

1279 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1280 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1281 
q31_t
 * 
pSrc
,

1282 
q31_t
 * 
pD°
,

1283 
uöt32_t
 
blockSize
);

1295 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1296 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1297 
uöt8_t
 
numSèges
,

1298 
q31_t
 * 
pC€ffs
,

1299 
q31_t
 * 
pSèã
,

1300 
öt8_t
 
po°Shi·
);

1311 
¨m_biquad_ˇsˇde_df1_f32
(

1312 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1313 
Êﬂt32_t
 * 
pSrc
,

1314 
Êﬂt32_t
 * 
pD°
,

1315 
uöt32_t
 
blockSize
);

1326 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1327 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1328 
uöt8_t
 
numSèges
,

1329 
Êﬂt32_t
 * 
pC€ffs
,

1330 
Êﬂt32_t
 * 
pSèã
);

1339 
uöt16_t
 
numRows
;

1340 
uöt16_t
 
numCﬁs
;

1341 
Êﬂt32_t
 *
pD©a
;

1342 } 
	t¨m_m©rix_ö°™˚_f32
;

1350 
uöt16_t
 
numRows
;

1351 
uöt16_t
 
numCﬁs
;

1352 
q15_t
 *
pD©a
;

1354 } 
	t¨m_m©rix_ö°™˚_q15
;

1362 
uöt16_t
 
numRows
;

1363 
uöt16_t
 
numCﬁs
;

1364 
q31_t
 *
pD©a
;

1366 } 
	t¨m_m©rix_ö°™˚_q31
;

1379 
¨m_°©us
 
¨m_m©_add_f32
(

1380 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1381 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1382 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1393 
¨m_°©us
 
¨m_m©_add_q15
(

1394 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1395 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1396 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1407 
¨m_°©us
 
¨m_m©_add_q31
(

1408 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1409 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1410 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1421 
¨m_°©us
 
¨m_m©_å™s_f32
(

1422 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1423 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1434 
¨m_°©us
 
¨m_m©_å™s_q15
(

1435 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1436 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1446 
¨m_°©us
 
¨m_m©_å™s_q31
(

1447 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1448 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1460 
¨m_°©us
 
¨m_m©_mu…_f32
(

1461 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1462 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1463 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1474 
¨m_°©us
 
¨m_m©_mu…_q15
(

1475 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1476 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1477 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1478 
q15_t
 * 
pSèã
);

1490 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1491 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1492 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1493 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1494 
q15_t
 * 
pSèã
);

1505 
¨m_°©us
 
¨m_m©_mu…_q31
(

1506 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1507 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1508 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1519 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1520 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1521 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1522 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1534 
¨m_°©us
 
¨m_m©_sub_f32
(

1535 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1536 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1537 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1548 
¨m_°©us
 
¨m_m©_sub_q15
(

1549 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1550 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1551 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1562 
¨m_°©us
 
¨m_m©_sub_q31
(

1563 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1564 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1565 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1576 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1577 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1578 
Êﬂt32_t
 
sˇÀ
,

1579 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1591 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1592 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1593 
q15_t
 
sˇÀFø˘
,

1594 
öt32_t
 
shi·
,

1595 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1607 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1608 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1609 
q31_t
 
sˇÀFø˘
,

1610 
öt32_t
 
shi·
,

1611 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1623 
¨m_m©_öô_q31
(

1624 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1625 
uöt16_t
 
nRows
,

1626 
uöt16_t
 
nCﬁumns
,

1627 
q31_t
 *
pD©a
);

1638 
¨m_m©_öô_q15
(

1639 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1640 
uöt16_t
 
nRows
,

1641 
uöt16_t
 
nCﬁumns
,

1642 
q15_t
 *
pD©a
);

1653 
¨m_m©_öô_f32
(

1654 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1655 
uöt16_t
 
nRows
,

1656 
uöt16_t
 
nCﬁumns
,

1657 
Êﬂt32_t
 *
pD©a
);

1666 
q15_t
 
A0
;

1667 #ifde‡
ARM_MATH_CM0


1668 
q15_t
 
A1
;

1669 
q15_t
 
A2
;

1671 
q31_t
 
A1
;

1673 
q15_t
 
°©e
[3];

1674 
q15_t
 
Kp
;

1675 
q15_t
 
Ki
;

1676 
q15_t
 
Kd
;

1677 } 
	t¨m_pid_ö°™˚_q15
;

1684 
q31_t
 
A0
;

1685 
q31_t
 
A1
;

1686 
q31_t
 
A2
;

1687 
q31_t
 
°©e
[3];

1688 
q31_t
 
Kp
;

1689 
q31_t
 
Ki
;

1690 
q31_t
 
Kd
;

1692 } 
	t¨m_pid_ö°™˚_q31
;

1699 
Êﬂt32_t
 
A0
;

1700 
Êﬂt32_t
 
A1
;

1701 
Êﬂt32_t
 
A2
;

1702 
Êﬂt32_t
 
°©e
[3];

1703 
Êﬂt32_t
 
Kp
;

1704 
Êﬂt32_t
 
Ki
;

1705 
Êﬂt32_t
 
Kd
;

1706 } 
	t¨m_pid_ö°™˚_f32
;

1716 
¨m_pid_öô_f32
(

1717 
¨m_pid_ö°™˚_f32
 * 
S
,

1718 
öt32_t
 
ª£tSèãFœg
);

1725 
¨m_pid_ª£t_f32
(

1726 
¨m_pid_ö°™˚_f32
 * 
S
);

1735 
¨m_pid_öô_q31
(

1736 
¨m_pid_ö°™˚_q31
 * 
S
,

1737 
öt32_t
 
ª£tSèãFœg
);

1746 
¨m_pid_ª£t_q31
(

1747 
¨m_pid_ö°™˚_q31
 * 
S
);

1755 
¨m_pid_öô_q15
(

1756 
¨m_pid_ö°™˚_q15
 * 
S
,

1757 
öt32_t
 
ª£tSèãFœg
);

1764 
¨m_pid_ª£t_q15
(

1765 
¨m_pid_ö°™˚_q15
 * 
S
);

1773 
uöt32_t
 
nVÆues
;

1774 
Êﬂt32_t
 
x1
;

1775 
Êﬂt32_t
 
xS∑cög
;

1776 
Êﬂt32_t
 *
pYD©a
;

1777 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1785 
uöt16_t
 
numRows
;

1786 
uöt16_t
 
numCﬁs
;

1787 
Êﬂt32_t
 *
pD©a
;

1788 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1796 
uöt16_t
 
numRows
;

1797 
uöt16_t
 
numCﬁs
;

1798 
q31_t
 *
pD©a
;

1799 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1807 
uöt16_t
 
numRows
;

1808 
uöt16_t
 
numCﬁs
;

1809 
q15_t
 *
pD©a
;

1810 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1818 
uöt16_t
 
numRows
;

1819 
uöt16_t
 
numCﬁs
;

1820 
q7_t
 *
pD©a
;

1821 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1833 
¨m_mu…_q7
(

1834 
q7_t
 * 
pSrcA
,

1835 
q7_t
 * 
pSrcB
,

1836 
q7_t
 * 
pD°
,

1837 
uöt32_t
 
blockSize
);

1848 
¨m_mu…_q15
(

1849 
q15_t
 * 
pSrcA
,

1850 
q15_t
 * 
pSrcB
,

1851 
q15_t
 * 
pD°
,

1852 
uöt32_t
 
blockSize
);

1863 
¨m_mu…_q31
(

1864 
q31_t
 * 
pSrcA
,

1865 
q31_t
 * 
pSrcB
,

1866 
q31_t
 * 
pD°
,

1867 
uöt32_t
 
blockSize
);

1878 
¨m_mu…_f32
(

1879 
Êﬂt32_t
 * 
pSrcA
,

1880 
Êﬂt32_t
 * 
pSrcB
,

1881 
Êﬂt32_t
 * 
pD°
,

1882 
uöt32_t
 
blockSize
);

1891 
uöt16_t
 
f·Lí
;

1892 
uöt8_t
 
if·Fœg
;

1893 
uöt8_t
 
bôRevî£Fœg
;

1894 
q15_t
 *
pTwiddÀ
;

1895 
uöt16_t
 *
pBôRevTabÀ
;

1896 
uöt16_t
 
twidC€fModifõr
;

1897 
uöt16_t
 
bôRevFa˘‹
;

1898 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

1906 
uöt16_t
 
f·Lí
;

1907 
uöt8_t
 
if·Fœg
;

1908 
uöt8_t
 
bôRevî£Fœg
;

1909 
q31_t
 *
pTwiddÀ
;

1910 
uöt16_t
 *
pBôRevTabÀ
;

1911 
uöt16_t
 
twidC€fModifõr
;

1912 
uöt16_t
 
bôRevFa˘‹
;

1913 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

1921 
uöt16_t
 
f·Lí
;

1922 
uöt8_t
 
if·Fœg
;

1923 
uöt8_t
 
bôRevî£Fœg
;

1924 
Êﬂt32_t
 *
pTwiddÀ
;

1925 
uöt16_t
 *
pBôRevTabÀ
;

1926 
uöt16_t
 
twidC€fModifõr
;

1927 
uöt16_t
 
bôRevFa˘‹
;

1928 
Êﬂt32_t
 
⁄ebyf·Lí
;

1929 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

1938 
¨m_cf·_ødix4_q15
(

1939 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1940 
q15_t
 * 
pSrc
);

1951 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

1952 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1953 
uöt16_t
 
f·Lí
,

1954 
uöt8_t
 
if·Fœg
,

1955 
uöt8_t
 
bôRevî£Fœg
);

1964 
¨m_cf·_ødix4_q31
(

1965 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1966 
q31_t
 * 
pSrc
);

1977 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

1978 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1979 
uöt16_t
 
f·Lí
,

1980 
uöt8_t
 
if·Fœg
,

1981 
uöt8_t
 
bôRevî£Fœg
);

1990 
¨m_cf·_ødix4_f32
(

1991 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1992 
Êﬂt32_t
 * 
pSrc
);

2003 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2004 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2005 
uöt16_t
 
f·Lí
,

2006 
uöt8_t
 
if·Fœg
,

2007 
uöt8_t
 
bôRevî£Fœg
);

2024 
¨m_ødix4_buâîÊy_f32
(

2025 
Êﬂt32_t
 * 
pSrc
,

2026 
uöt16_t
 
f·Lí
,

2027 
Êﬂt32_t
 * 
pC€f
,

2028 
uöt16_t
 
twidC€fModifõr
);

2040 
¨m_ødix4_buâîÊy_övî£_f32
(

2041 
Êﬂt32_t
 * 
pSrc
,

2042 
uöt16_t
 
f·Lí
,

2043 
Êﬂt32_t
 * 
pC€f
,

2044 
uöt16_t
 
twidC€fModifõr
,

2045 
Êﬂt32_t
 
⁄ebyf·Lí
);

2056 
¨m_bôªvîßl_f32
(

2057 
Êﬂt32_t
 *
pSrc
,

2058 
uöt16_t
 
f·Size
,

2059 
uöt16_t
 
bôRevFa˘‹
,

2060 
uöt16_t
 *
pBôRevTab
);

2071 
¨m_ødix4_buâîÊy_q31
(

2072 
q31_t
 *
pSrc
,

2073 
uöt32_t
 
f·Lí
,

2074 
q31_t
 *
pC€f
,

2075 
uöt32_t
 
twidC€fModifõr
);

2086 
¨m_ødix4_buâîÊy_övî£_q31
(

2087 
q31_t
 * 
pSrc
,

2088 
uöt32_t
 
f·Lí
,

2089 
q31_t
 * 
pC€f
,

2090 
uöt32_t
 
twidC€fModifõr
);

2101 
¨m_bôªvîßl_q31
(

2102 
q31_t
 * 
pSrc
,

2103 
uöt32_t
 
f·Lí
,

2104 
uöt16_t
 
bôRevFa˘‹
,

2105 
uöt16_t
 *
pBôRevTab
);

2116 
¨m_ødix4_buâîÊy_q15
(

2117 
q15_t
 *
pSrc16
,

2118 
uöt32_t
 
f·Lí
,

2119 
q15_t
 *
pC€f16
,

2120 
uöt32_t
 
twidC€fModifõr
);

2131 
¨m_ødix4_buâîÊy_övî£_q15
(

2132 
q15_t
 *
pSrc16
,

2133 
uöt32_t
 
f·Lí
,

2134 
q15_t
 *
pC€f16
,

2135 
uöt32_t
 
twidC€fModifõr
);

2146 
¨m_bôªvîßl_q15
(

2147 
q15_t
 * 
pSrc
,

2148 
uöt32_t
 
f·Lí
,

2149 
uöt16_t
 
bôRevFa˘‹
,

2150 
uöt16_t
 *
pBôRevTab
);

2158 
uöt32_t
 
f·LíRól
;

2159 
uöt32_t
 
f·LíBy2
;

2160 
uöt8_t
 
if·FœgR
;

2161 
uöt8_t
 
bôRevî£FœgR
;

2162 
uöt32_t
 
twidC€fRModifõr
;

2163 
q15_t
 *
pTwiddÀARól
;

2164 
q15_t
 *
pTwiddÀBRól
;

2165 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2166 } 
	t¨m_rf·_ö°™˚_q15
;

2174 
uöt32_t
 
f·LíRól
;

2175 
uöt32_t
 
f·LíBy2
;

2176 
uöt8_t
 
if·FœgR
;

2177 
uöt8_t
 
bôRevî£FœgR
;

2178 
uöt32_t
 
twidC€fRModifõr
;

2179 
q31_t
 *
pTwiddÀARól
;

2180 
q31_t
 *
pTwiddÀBRól
;

2181 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2182 } 
	t¨m_rf·_ö°™˚_q31
;

2190 
uöt32_t
 
f·LíRól
;

2191 
uöt16_t
 
f·LíBy2
;

2192 
uöt8_t
 
if·FœgR
;

2193 
uöt8_t
 
bôRevî£FœgR
;

2194 
uöt32_t
 
twidC€fRModifõr
;

2195 
Êﬂt32_t
 *
pTwiddÀARól
;

2196 
Êﬂt32_t
 *
pTwiddÀBRól
;

2197 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2198 } 
	t¨m_rf·_ö°™˚_f32
;

2208 
¨m_rf·_q15
(

2209 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2210 
q15_t
 * 
pSrc
,

2211 
q15_t
 * 
pD°
);

2223 
¨m_°©us
 
¨m_rf·_öô_q15
(

2224 
¨m_rf·_ö°™˚_q15
 * 
S
,

2225 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2226 
uöt32_t
 
f·LíRól
,

2227 
uöt32_t
 
if·FœgR
,

2228 
uöt32_t
 
bôRevî£Fœg
);

2238 
¨m_rf·_q31
(

2239 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2240 
q31_t
 * 
pSrc
,

2241 
q31_t
 * 
pD°
);

2253 
¨m_°©us
 
¨m_rf·_öô_q31
(

2254 
¨m_rf·_ö°™˚_q31
 * 
S
,

2255 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2256 
uöt32_t
 
f·LíRól
,

2257 
uöt32_t
 
if·FœgR
,

2258 
uöt32_t
 
bôRevî£Fœg
);

2270 
¨m_°©us
 
¨m_rf·_öô_f32
(

2271 
¨m_rf·_ö°™˚_f32
 * 
S
,

2272 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2273 
uöt32_t
 
f·LíRól
,

2274 
uöt32_t
 
if·FœgR
,

2275 
uöt32_t
 
bôRevî£Fœg
);

2285 
¨m_rf·_f32
(

2286 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2287 
Êﬂt32_t
 * 
pSrc
,

2288 
Êﬂt32_t
 * 
pD°
);

2296 
uöt16_t
 
N
;

2297 
uöt16_t
 
Nby2
;

2298 
Êﬂt32_t
 
n‹mÆize
;

2299 
Êﬂt32_t
 *
pTwiddÀ
;

2300 
Êﬂt32_t
 *
pCosFa˘‹
;

2301 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2302 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2303 } 
	t¨m_d˘4_ö°™˚_f32
;

2316 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2317 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2318 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2319 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2320 
uöt16_t
 
N
,

2321 
uöt16_t
 
Nby2
,

2322 
Êﬂt32_t
 
n‹mÆize
);

2332 
¨m_d˘4_f32
(

2333 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2334 
Êﬂt32_t
 * 
pSèã
,

2335 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2343 
uöt16_t
 
N
;

2344 
uöt16_t
 
Nby2
;

2345 
q31_t
 
n‹mÆize
;

2346 
q31_t
 *
pTwiddÀ
;

2347 
q31_t
 *
pCosFa˘‹
;

2348 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2349 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2350 } 
	t¨m_d˘4_ö°™˚_q31
;

2363 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2364 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2365 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2366 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2367 
uöt16_t
 
N
,

2368 
uöt16_t
 
Nby2
,

2369 
q31_t
 
n‹mÆize
);

2379 
¨m_d˘4_q31
(

2380 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2381 
q31_t
 * 
pSèã
,

2382 
q31_t
 * 
pI∆öeBuf„r
);

2390 
uöt16_t
 
N
;

2391 
uöt16_t
 
Nby2
;

2392 
q15_t
 
n‹mÆize
;

2393 
q15_t
 *
pTwiddÀ
;

2394 
q15_t
 *
pCosFa˘‹
;

2395 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2396 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2397 } 
	t¨m_d˘4_ö°™˚_q15
;

2410 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2411 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2412 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2413 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2414 
uöt16_t
 
N
,

2415 
uöt16_t
 
Nby2
,

2416 
q15_t
 
n‹mÆize
);

2426 
¨m_d˘4_q15
(

2427 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2428 
q15_t
 * 
pSèã
,

2429 
q15_t
 * 
pI∆öeBuf„r
);

2440 
¨m_add_f32
(

2441 
Êﬂt32_t
 * 
pSrcA
,

2442 
Êﬂt32_t
 * 
pSrcB
,

2443 
Êﬂt32_t
 * 
pD°
,

2444 
uöt32_t
 
blockSize
);

2455 
¨m_add_q7
(

2456 
q7_t
 * 
pSrcA
,

2457 
q7_t
 * 
pSrcB
,

2458 
q7_t
 * 
pD°
,

2459 
uöt32_t
 
blockSize
);

2470 
¨m_add_q15
(

2471 
q15_t
 * 
pSrcA
,

2472 
q15_t
 * 
pSrcB
,

2473 
q15_t
 * 
pD°
,

2474 
uöt32_t
 
blockSize
);

2485 
¨m_add_q31
(

2486 
q31_t
 * 
pSrcA
,

2487 
q31_t
 * 
pSrcB
,

2488 
q31_t
 * 
pD°
,

2489 
uöt32_t
 
blockSize
);

2500 
¨m_sub_f32
(

2501 
Êﬂt32_t
 * 
pSrcA
,

2502 
Êﬂt32_t
 * 
pSrcB
,

2503 
Êﬂt32_t
 * 
pD°
,

2504 
uöt32_t
 
blockSize
);

2515 
¨m_sub_q7
(

2516 
q7_t
 * 
pSrcA
,

2517 
q7_t
 * 
pSrcB
,

2518 
q7_t
 * 
pD°
,

2519 
uöt32_t
 
blockSize
);

2530 
¨m_sub_q15
(

2531 
q15_t
 * 
pSrcA
,

2532 
q15_t
 * 
pSrcB
,

2533 
q15_t
 * 
pD°
,

2534 
uöt32_t
 
blockSize
);

2545 
¨m_sub_q31
(

2546 
q31_t
 * 
pSrcA
,

2547 
q31_t
 * 
pSrcB
,

2548 
q31_t
 * 
pD°
,

2549 
uöt32_t
 
blockSize
);

2560 
¨m_sˇÀ_f32
(

2561 
Êﬂt32_t
 * 
pSrc
,

2562 
Êﬂt32_t
 
sˇÀ
,

2563 
Êﬂt32_t
 * 
pD°
,

2564 
uöt32_t
 
blockSize
);

2576 
¨m_sˇÀ_q7
(

2577 
q7_t
 * 
pSrc
,

2578 
q7_t
 
sˇÀFø˘
,

2579 
öt8_t
 
shi·
,

2580 
q7_t
 * 
pD°
,

2581 
uöt32_t
 
blockSize
);

2593 
¨m_sˇÀ_q15
(

2594 
q15_t
 * 
pSrc
,

2595 
q15_t
 
sˇÀFø˘
,

2596 
öt8_t
 
shi·
,

2597 
q15_t
 * 
pD°
,

2598 
uöt32_t
 
blockSize
);

2610 
¨m_sˇÀ_q31
(

2611 
q31_t
 * 
pSrc
,

2612 
q31_t
 
sˇÀFø˘
,

2613 
öt8_t
 
shi·
,

2614 
q31_t
 * 
pD°
,

2615 
uöt32_t
 
blockSize
);

2625 
¨m_abs_q7
(

2626 
q7_t
 * 
pSrc
,

2627 
q7_t
 * 
pD°
,

2628 
uöt32_t
 
blockSize
);

2638 
¨m_abs_f32
(

2639 
Êﬂt32_t
 * 
pSrc
,

2640 
Êﬂt32_t
 * 
pD°
,

2641 
uöt32_t
 
blockSize
);

2651 
¨m_abs_q15
(

2652 
q15_t
 * 
pSrc
,

2653 
q15_t
 * 
pD°
,

2654 
uöt32_t
 
blockSize
);

2664 
¨m_abs_q31
(

2665 
q31_t
 * 
pSrc
,

2666 
q31_t
 * 
pD°
,

2667 
uöt32_t
 
blockSize
);

2678 
¨m_dŸ_¥od_f32
(

2679 
Êﬂt32_t
 * 
pSrcA
,

2680 
Êﬂt32_t
 * 
pSrcB
,

2681 
uöt32_t
 
blockSize
,

2682 
Êﬂt32_t
 * 
ªsu…
);

2693 
¨m_dŸ_¥od_q7
(

2694 
q7_t
 * 
pSrcA
,

2695 
q7_t
 * 
pSrcB
,

2696 
uöt32_t
 
blockSize
,

2697 
q31_t
 * 
ªsu…
);

2708 
¨m_dŸ_¥od_q15
(

2709 
q15_t
 * 
pSrcA
,

2710 
q15_t
 * 
pSrcB
,

2711 
uöt32_t
 
blockSize
,

2712 
q63_t
 * 
ªsu…
);

2723 
¨m_dŸ_¥od_q31
(

2724 
q31_t
 * 
pSrcA
,

2725 
q31_t
 * 
pSrcB
,

2726 
uöt32_t
 
blockSize
,

2727 
q63_t
 * 
ªsu…
);

2738 
¨m_shi·_q7
(

2739 
q7_t
 * 
pSrc
,

2740 
öt8_t
 
shi·Bôs
,

2741 
q7_t
 * 
pD°
,

2742 
uöt32_t
 
blockSize
);

2753 
¨m_shi·_q15
(

2754 
q15_t
 * 
pSrc
,

2755 
öt8_t
 
shi·Bôs
,

2756 
q15_t
 * 
pD°
,

2757 
uöt32_t
 
blockSize
);

2768 
¨m_shi·_q31
(

2769 
q31_t
 * 
pSrc
,

2770 
öt8_t
 
shi·Bôs
,

2771 
q31_t
 * 
pD°
,

2772 
uöt32_t
 
blockSize
);

2783 
¨m_off£t_f32
(

2784 
Êﬂt32_t
 * 
pSrc
,

2785 
Êﬂt32_t
 
off£t
,

2786 
Êﬂt32_t
 * 
pD°
,

2787 
uöt32_t
 
blockSize
);

2798 
¨m_off£t_q7
(

2799 
q7_t
 * 
pSrc
,

2800 
q7_t
 
off£t
,

2801 
q7_t
 * 
pD°
,

2802 
uöt32_t
 
blockSize
);

2813 
¨m_off£t_q15
(

2814 
q15_t
 * 
pSrc
,

2815 
q15_t
 
off£t
,

2816 
q15_t
 * 
pD°
,

2817 
uöt32_t
 
blockSize
);

2828 
¨m_off£t_q31
(

2829 
q31_t
 * 
pSrc
,

2830 
q31_t
 
off£t
,

2831 
q31_t
 * 
pD°
,

2832 
uöt32_t
 
blockSize
);

2842 
¨m_√g©e_f32
(

2843 
Êﬂt32_t
 * 
pSrc
,

2844 
Êﬂt32_t
 * 
pD°
,

2845 
uöt32_t
 
blockSize
);

2855 
¨m_√g©e_q7
(

2856 
q7_t
 * 
pSrc
,

2857 
q7_t
 * 
pD°
,

2858 
uöt32_t
 
blockSize
);

2868 
¨m_√g©e_q15
(

2869 
q15_t
 * 
pSrc
,

2870 
q15_t
 * 
pD°
,

2871 
uöt32_t
 
blockSize
);

2881 
¨m_√g©e_q31
(

2882 
q31_t
 * 
pSrc
,

2883 
q31_t
 * 
pD°
,

2884 
uöt32_t
 
blockSize
);

2892 
¨m_c›y_f32
(

2893 
Êﬂt32_t
 * 
pSrc
,

2894 
Êﬂt32_t
 * 
pD°
,

2895 
uöt32_t
 
blockSize
);

2904 
¨m_c›y_q7
(

2905 
q7_t
 * 
pSrc
,

2906 
q7_t
 * 
pD°
,

2907 
uöt32_t
 
blockSize
);

2916 
¨m_c›y_q15
(

2917 
q15_t
 * 
pSrc
,

2918 
q15_t
 * 
pD°
,

2919 
uöt32_t
 
blockSize
);

2928 
¨m_c›y_q31
(

2929 
q31_t
 * 
pSrc
,

2930 
q31_t
 * 
pD°
,

2931 
uöt32_t
 
blockSize
);

2939 
¨m_fûl_f32
(

2940 
Êﬂt32_t
 
vÆue
,

2941 
Êﬂt32_t
 * 
pD°
,

2942 
uöt32_t
 
blockSize
);

2951 
¨m_fûl_q7
(

2952 
q7_t
 
vÆue
,

2953 
q7_t
 * 
pD°
,

2954 
uöt32_t
 
blockSize
);

2963 
¨m_fûl_q15
(

2964 
q15_t
 
vÆue
,

2965 
q15_t
 * 
pD°
,

2966 
uöt32_t
 
blockSize
);

2975 
¨m_fûl_q31
(

2976 
q31_t
 
vÆue
,

2977 
q31_t
 * 
pD°
,

2978 
uöt32_t
 
blockSize
);

2990 
¨m_c⁄v_f32
(

2991 
Êﬂt32_t
 * 
pSrcA
,

2992 
uöt32_t
 
§cALí
,

2993 
Êﬂt32_t
 * 
pSrcB
,

2994 
uöt32_t
 
§cBLí
,

2995 
Êﬂt32_t
 * 
pD°
);

3007 
¨m_c⁄v_q15
(

3008 
q15_t
 * 
pSrcA
,

3009 
uöt32_t
 
§cALí
,

3010 
q15_t
 * 
pSrcB
,

3011 
uöt32_t
 
§cBLí
,

3012 
q15_t
 * 
pD°
);

3024 
¨m_c⁄v_Á°_q15
(

3025 
q15_t
 * 
pSrcA
,

3026 
uöt32_t
 
§cALí
,

3027 
q15_t
 * 
pSrcB
,

3028 
uöt32_t
 
§cBLí
,

3029 
q15_t
 * 
pD°
);

3041 
¨m_c⁄v_q31
(

3042 
q31_t
 * 
pSrcA
,

3043 
uöt32_t
 
§cALí
,

3044 
q31_t
 * 
pSrcB
,

3045 
uöt32_t
 
§cBLí
,

3046 
q31_t
 * 
pD°
);

3058 
¨m_c⁄v_Á°_q31
(

3059 
q31_t
 * 
pSrcA
,

3060 
uöt32_t
 
§cALí
,

3061 
q31_t
 * 
pSrcB
,

3062 
uöt32_t
 
§cBLí
,

3063 
q31_t
 * 
pD°
);

3075 
¨m_c⁄v_q7
(

3076 
q7_t
 * 
pSrcA
,

3077 
uöt32_t
 
§cALí
,

3078 
q7_t
 * 
pSrcB
,

3079 
uöt32_t
 
§cBLí
,

3080 
q7_t
 * 
pD°
);

3094 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3095 
Êﬂt32_t
 * 
pSrcA
,

3096 
uöt32_t
 
§cALí
,

3097 
Êﬂt32_t
 * 
pSrcB
,

3098 
uöt32_t
 
§cBLí
,

3099 
Êﬂt32_t
 * 
pD°
,

3100 
uöt32_t
 
fú°Index
,

3101 
uöt32_t
 
numPoöts
);

3115 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3116 
q15_t
 * 
pSrcA
,

3117 
uöt32_t
 
§cALí
,

3118 
q15_t
 * 
pSrcB
,

3119 
uöt32_t
 
§cBLí
,

3120 
q15_t
 * 
pD°
,

3121 
uöt32_t
 
fú°Index
,

3122 
uöt32_t
 
numPoöts
);

3136 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3137 
q15_t
 * 
pSrcA
,

3138 
uöt32_t
 
§cALí
,

3139 
q15_t
 * 
pSrcB
,

3140 
uöt32_t
 
§cBLí
,

3141 
q15_t
 * 
pD°
,

3142 
uöt32_t
 
fú°Index
,

3143 
uöt32_t
 
numPoöts
);

3157 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3158 
q31_t
 * 
pSrcA
,

3159 
uöt32_t
 
§cALí
,

3160 
q31_t
 * 
pSrcB
,

3161 
uöt32_t
 
§cBLí
,

3162 
q31_t
 * 
pD°
,

3163 
uöt32_t
 
fú°Index
,

3164 
uöt32_t
 
numPoöts
);

3179 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3180 
q31_t
 * 
pSrcA
,

3181 
uöt32_t
 
§cALí
,

3182 
q31_t
 * 
pSrcB
,

3183 
uöt32_t
 
§cBLí
,

3184 
q31_t
 * 
pD°
,

3185 
uöt32_t
 
fú°Index
,

3186 
uöt32_t
 
numPoöts
);

3200 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3201 
q7_t
 * 
pSrcA
,

3202 
uöt32_t
 
§cALí
,

3203 
q7_t
 * 
pSrcB
,

3204 
uöt32_t
 
§cBLí
,

3205 
q7_t
 * 
pD°
,

3206 
uöt32_t
 
fú°Index
,

3207 
uöt32_t
 
numPoöts
);

3216 
uöt8_t
 
M
;

3217 
uöt16_t
 
numT≠s
;

3218 
q15_t
 *
pC€ffs
;

3219 
q15_t
 *
pSèã
;

3220 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3228 
uöt8_t
 
M
;

3229 
uöt16_t
 
numT≠s
;

3230 
q31_t
 *
pC€ffs
;

3231 
q31_t
 *
pSèã
;

3233 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3241 
uöt8_t
 
M
;

3242 
uöt16_t
 
numT≠s
;

3243 
Êﬂt32_t
 *
pC€ffs
;

3244 
Êﬂt32_t
 *
pSèã
;

3246 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3259 
¨m_fú_decim©e_f32
(

3260 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3261 
Êﬂt32_t
 * 
pSrc
,

3262 
Êﬂt32_t
 * 
pD°
,

3263 
uöt32_t
 
blockSize
);

3278 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3279 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3280 
uöt16_t
 
numT≠s
,

3281 
uöt8_t
 
M
,

3282 
Êﬂt32_t
 * 
pC€ffs
,

3283 
Êﬂt32_t
 * 
pSèã
,

3284 
uöt32_t
 
blockSize
);

3295 
¨m_fú_decim©e_q15
(

3296 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3297 
q15_t
 * 
pSrc
,

3298 
q15_t
 * 
pD°
,

3299 
uöt32_t
 
blockSize
);

3310 
¨m_fú_decim©e_Á°_q15
(

3311 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3312 
q15_t
 * 
pSrc
,

3313 
q15_t
 * 
pD°
,

3314 
uöt32_t
 
blockSize
);

3330 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3331 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3332 
uöt16_t
 
numT≠s
,

3333 
uöt8_t
 
M
,

3334 
q15_t
 * 
pC€ffs
,

3335 
q15_t
 * 
pSèã
,

3336 
uöt32_t
 
blockSize
);

3347 
¨m_fú_decim©e_q31
(

3348 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3349 
q31_t
 * 
pSrc
,

3350 
q31_t
 * 
pD°
,

3351 
uöt32_t
 
blockSize
);

3362 
¨m_fú_decim©e_Á°_q31
(

3363 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3364 
q31_t
 * 
pSrc
,

3365 
q31_t
 * 
pD°
,

3366 
uöt32_t
 
blockSize
);

3381 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3382 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3383 
uöt16_t
 
numT≠s
,

3384 
uöt8_t
 
M
,

3385 
q31_t
 * 
pC€ffs
,

3386 
q31_t
 * 
pSèã
,

3387 
uöt32_t
 
blockSize
);

3397 
uöt8_t
 
L
;

3398 
uöt16_t
 
pha£Lígth
;

3399 
q15_t
 *
pC€ffs
;

3400 
q15_t
 *
pSèã
;

3401 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3409 
uöt8_t
 
L
;

3410 
uöt16_t
 
pha£Lígth
;

3411 
q31_t
 *
pC€ffs
;

3412 
q31_t
 *
pSèã
;

3413 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3421 
uöt8_t
 
L
;

3422 
uöt16_t
 
pha£Lígth
;

3423 
Êﬂt32_t
 *
pC€ffs
;

3424 
Êﬂt32_t
 *
pSèã
;

3425 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3437 
¨m_fú_öãΩﬁ©e_q15
(

3438 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3439 
q15_t
 * 
pSrc
,

3440 
q15_t
 * 
pD°
,

3441 
uöt32_t
 
blockSize
);

3456 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3457 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3458 
uöt8_t
 
L
,

3459 
uöt16_t
 
numT≠s
,

3460 
q15_t
 * 
pC€ffs
,

3461 
q15_t
 * 
pSèã
,

3462 
uöt32_t
 
blockSize
);

3473 
¨m_fú_öãΩﬁ©e_q31
(

3474 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3475 
q31_t
 * 
pSrc
,

3476 
q31_t
 * 
pD°
,

3477 
uöt32_t
 
blockSize
);

3491 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3492 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3493 
uöt8_t
 
L
,

3494 
uöt16_t
 
numT≠s
,

3495 
q31_t
 * 
pC€ffs
,

3496 
q31_t
 * 
pSèã
,

3497 
uöt32_t
 
blockSize
);

3509 
¨m_fú_öãΩﬁ©e_f32
(

3510 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3511 
Êﬂt32_t
 * 
pSrc
,

3512 
Êﬂt32_t
 * 
pD°
,

3513 
uöt32_t
 
blockSize
);

3527 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3528 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3529 
uöt8_t
 
L
,

3530 
uöt16_t
 
numT≠s
,

3531 
Êﬂt32_t
 * 
pC€ffs
,

3532 
Êﬂt32_t
 * 
pSèã
,

3533 
uöt32_t
 
blockSize
);

3541 
uöt8_t
 
numSèges
;

3542 
q63_t
 *
pSèã
;

3543 
q31_t
 *
pC€ffs
;

3544 
uöt8_t
 
po°Shi·
;

3546 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3557 
¨m_biquad_ˇs_df1_32x64_q31
(

3558 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3559 
q31_t
 * 
pSrc
,

3560 
q31_t
 * 
pD°
,

3561 
uöt32_t
 
blockSize
);

3573 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3574 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3575 
uöt8_t
 
numSèges
,

3576 
q31_t
 * 
pC€ffs
,

3577 
q63_t
 * 
pSèã
,

3578 
uöt8_t
 
po°Shi·
);

3588 
uöt8_t
 
numSèges
;

3589 
Êﬂt32_t
 *
pSèã
;

3590 
Êﬂt32_t
 *
pC€ffs
;

3591 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3603 
¨m_biquad_ˇsˇde_df2T_f32
(

3604 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3605 
Êﬂt32_t
 * 
pSrc
,

3606 
Êﬂt32_t
 * 
pD°
,

3607 
uöt32_t
 
blockSize
);

3619 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3620 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3621 
uöt8_t
 
numSèges
,

3622 
Êﬂt32_t
 * 
pC€ffs
,

3623 
Êﬂt32_t
 * 
pSèã
);

3633 
uöt16_t
 
numSèges
;

3634 
q15_t
 *
pSèã
;

3635 
q15_t
 *
pC€ffs
;

3636 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3644 
uöt16_t
 
numSèges
;

3645 
q31_t
 *
pSèã
;

3646 
q31_t
 *
pC€ffs
;

3647 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3655 
uöt16_t
 
numSèges
;

3656 
Êﬂt32_t
 *
pSèã
;

3657 
Êﬂt32_t
 *
pC€ffs
;

3658 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3669 
¨m_fú_œâi˚_öô_q15
(

3670 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3671 
uöt16_t
 
numSèges
,

3672 
q15_t
 * 
pC€ffs
,

3673 
q15_t
 * 
pSèã
);

3684 
¨m_fú_œâi˚_q15
(

3685 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3686 
q15_t
 * 
pSrc
,

3687 
q15_t
 * 
pD°
,

3688 
uöt32_t
 
blockSize
);

3699 
¨m_fú_œâi˚_öô_q31
(

3700 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3701 
uöt16_t
 
numSèges
,

3702 
q31_t
 * 
pC€ffs
,

3703 
q31_t
 * 
pSèã
);

3715 
¨m_fú_œâi˚_q31
(

3716 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3717 
q31_t
 * 
pSrc
,

3718 
q31_t
 * 
pD°
,

3719 
uöt32_t
 
blockSize
);

3730 
¨m_fú_œâi˚_öô_f32
(

3731 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3732 
uöt16_t
 
numSèges
,

3733 
Êﬂt32_t
 * 
pC€ffs
,

3734 
Êﬂt32_t
 * 
pSèã
);

3745 
¨m_fú_œâi˚_f32
(

3746 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3747 
Êﬂt32_t
 * 
pSrc
,

3748 
Êﬂt32_t
 * 
pD°
,

3749 
uöt32_t
 
blockSize
);

3756 
uöt16_t
 
numSèges
;

3757 
q15_t
 *
pSèã
;

3758 
q15_t
 *
pkC€ffs
;

3759 
q15_t
 *
pvC€ffs
;

3760 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3767 
uöt16_t
 
numSèges
;

3768 
q31_t
 *
pSèã
;

3769 
q31_t
 *
pkC€ffs
;

3770 
q31_t
 *
pvC€ffs
;

3771 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3778 
uöt16_t
 
numSèges
;

3779 
Êﬂt32_t
 *
pSèã
;

3780 
Êﬂt32_t
 *
pkC€ffs
;

3781 
Êﬂt32_t
 *
pvC€ffs
;

3782 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3793 
¨m_iú_œâi˚_f32
(

3794 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3795 
Êﬂt32_t
 * 
pSrc
,

3796 
Êﬂt32_t
 * 
pD°
,

3797 
uöt32_t
 
blockSize
);

3810 
¨m_iú_œâi˚_öô_f32
(

3811 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3812 
uöt16_t
 
numSèges
,

3813 
Êﬂt32_t
 *
pkC€ffs
,

3814 
Êﬂt32_t
 *
pvC€ffs
,

3815 
Êﬂt32_t
 *
pSèã
,

3816 
uöt32_t
 
blockSize
);

3828 
¨m_iú_œâi˚_q31
(

3829 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3830 
q31_t
 * 
pSrc
,

3831 
q31_t
 * 
pD°
,

3832 
uöt32_t
 
blockSize
);

3846 
¨m_iú_œâi˚_öô_q31
(

3847 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3848 
uöt16_t
 
numSèges
,

3849 
q31_t
 *
pkC€ffs
,

3850 
q31_t
 *
pvC€ffs
,

3851 
q31_t
 *
pSèã
,

3852 
uöt32_t
 
blockSize
);

3864 
¨m_iú_œâi˚_q15
(

3865 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3866 
q15_t
 * 
pSrc
,

3867 
q15_t
 * 
pD°
,

3868 
uöt32_t
 
blockSize
);

3882 
¨m_iú_œâi˚_öô_q15
(

3883 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3884 
uöt16_t
 
numSèges
,

3885 
q15_t
 *
pkC€ffs
,

3886 
q15_t
 *
pvC€ffs
,

3887 
q15_t
 *
pSèã
,

3888 
uöt32_t
 
blockSize
);

3896 
uöt16_t
 
numT≠s
;

3897 
Êﬂt32_t
 *
pSèã
;

3898 
Êﬂt32_t
 *
pC€ffs
;

3899 
Êﬂt32_t
 
mu
;

3900 } 
	t¨m_lms_ö°™˚_f32
;

3913 
¨m_lms_f32
(

3914 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

3915 
Êﬂt32_t
 * 
pSrc
,

3916 
Êﬂt32_t
 * 
pRef
,

3917 
Êﬂt32_t
 * 
pOut
,

3918 
Êﬂt32_t
 * 
pEº
,

3919 
uöt32_t
 
blockSize
);

3932 
¨m_lms_öô_f32
(

3933 
¨m_lms_ö°™˚_f32
 * 
S
,

3934 
uöt16_t
 
numT≠s
,

3935 
Êﬂt32_t
 * 
pC€ffs
,

3936 
Êﬂt32_t
 * 
pSèã
,

3937 
Êﬂt32_t
 
mu
,

3938 
uöt32_t
 
blockSize
);

3946 
uöt16_t
 
numT≠s
;

3947 
q15_t
 *
pSèã
;

3948 
q15_t
 *
pC€ffs
;

3949 
q15_t
 
mu
;

3950 
uöt32_t
 
po°Shi·
;

3951 } 
	t¨m_lms_ö°™˚_q15
;

3966 
¨m_lms_öô_q15
(

3967 
¨m_lms_ö°™˚_q15
 * 
S
,

3968 
uöt16_t
 
numT≠s
,

3969 
q15_t
 * 
pC€ffs
,

3970 
q15_t
 * 
pSèã
,

3971 
q15_t
 
mu
,

3972 
uöt32_t
 
blockSize
,

3973 
uöt32_t
 
po°Shi·
);

3986 
¨m_lms_q15
(

3987 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

3988 
q15_t
 * 
pSrc
,

3989 
q15_t
 * 
pRef
,

3990 
q15_t
 * 
pOut
,

3991 
q15_t
 * 
pEº
,

3992 
uöt32_t
 
blockSize
);

4001 
uöt16_t
 
numT≠s
;

4002 
q31_t
 *
pSèã
;

4003 
q31_t
 *
pC€ffs
;

4004 
q31_t
 
mu
;

4005 
uöt32_t
 
po°Shi·
;

4007 } 
	t¨m_lms_ö°™˚_q31
;

4020 
¨m_lms_q31
(

4021 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4022 
q31_t
 * 
pSrc
,

4023 
q31_t
 * 
pRef
,

4024 
q31_t
 * 
pOut
,

4025 
q31_t
 * 
pEº
,

4026 
uöt32_t
 
blockSize
);

4040 
¨m_lms_öô_q31
(

4041 
¨m_lms_ö°™˚_q31
 * 
S
,

4042 
uöt16_t
 
numT≠s
,

4043 
q31_t
 *
pC€ffs
,

4044 
q31_t
 *
pSèã
,

4045 
q31_t
 
mu
,

4046 
uöt32_t
 
blockSize
,

4047 
uöt32_t
 
po°Shi·
);

4055 
uöt16_t
 
numT≠s
;

4056 
Êﬂt32_t
 *
pSèã
;

4057 
Êﬂt32_t
 *
pC€ffs
;

4058 
Êﬂt32_t
 
mu
;

4059 
Êﬂt32_t
 
íîgy
;

4060 
Êﬂt32_t
 
x0
;

4061 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4074 
¨m_lms_n‹m_f32
(

4075 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4076 
Êﬂt32_t
 * 
pSrc
,

4077 
Êﬂt32_t
 * 
pRef
,

4078 
Êﬂt32_t
 * 
pOut
,

4079 
Êﬂt32_t
 * 
pEº
,

4080 
uöt32_t
 
blockSize
);

4093 
¨m_lms_n‹m_öô_f32
(

4094 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4095 
uöt16_t
 
numT≠s
,

4096 
Êﬂt32_t
 * 
pC€ffs
,

4097 
Êﬂt32_t
 * 
pSèã
,

4098 
Êﬂt32_t
 
mu
,

4099 
uöt32_t
 
blockSize
);

4107 
uöt16_t
 
numT≠s
;

4108 
q31_t
 *
pSèã
;

4109 
q31_t
 *
pC€ffs
;

4110 
q31_t
 
mu
;

4111 
uöt8_t
 
po°Shi·
;

4112 
q31_t
 *
ªcùTabÀ
;

4113 
q31_t
 
íîgy
;

4114 
q31_t
 
x0
;

4115 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4128 
¨m_lms_n‹m_q31
(

4129 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4130 
q31_t
 * 
pSrc
,

4131 
q31_t
 * 
pRef
,

4132 
q31_t
 * 
pOut
,

4133 
q31_t
 * 
pEº
,

4134 
uöt32_t
 
blockSize
);

4148 
¨m_lms_n‹m_öô_q31
(

4149 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4150 
uöt16_t
 
numT≠s
,

4151 
q31_t
 * 
pC€ffs
,

4152 
q31_t
 * 
pSèã
,

4153 
q31_t
 
mu
,

4154 
uöt32_t
 
blockSize
,

4155 
uöt8_t
 
po°Shi·
);

4163 
uöt16_t
 
numT≠s
;

4164 
q15_t
 *
pSèã
;

4165 
q15_t
 *
pC€ffs
;

4166 
q15_t
 
mu
;

4167 
uöt8_t
 
po°Shi·
;

4168 
q15_t
 *
ªcùTabÀ
;

4169 
q15_t
 
íîgy
;

4170 
q15_t
 
x0
;

4171 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4184 
¨m_lms_n‹m_q15
(

4185 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4186 
q15_t
 * 
pSrc
,

4187 
q15_t
 * 
pRef
,

4188 
q15_t
 * 
pOut
,

4189 
q15_t
 * 
pEº
,

4190 
uöt32_t
 
blockSize
);

4205 
¨m_lms_n‹m_öô_q15
(

4206 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4207 
uöt16_t
 
numT≠s
,

4208 
q15_t
 * 
pC€ffs
,

4209 
q15_t
 * 
pSèã
,

4210 
q15_t
 
mu
,

4211 
uöt32_t
 
blockSize
,

4212 
uöt8_t
 
po°Shi·
);

4224 
¨m_c‹ªœã_f32
(

4225 
Êﬂt32_t
 * 
pSrcA
,

4226 
uöt32_t
 
§cALí
,

4227 
Êﬂt32_t
 * 
pSrcB
,

4228 
uöt32_t
 
§cBLí
,

4229 
Êﬂt32_t
 * 
pD°
);

4241 
¨m_c‹ªœã_q15
(

4242 
q15_t
 * 
pSrcA
,

4243 
uöt32_t
 
§cALí
,

4244 
q15_t
 * 
pSrcB
,

4245 
uöt32_t
 
§cBLí
,

4246 
q15_t
 * 
pD°
);

4258 
¨m_c‹ªœã_Á°_q15
(

4259 
q15_t
 * 
pSrcA
,

4260 
uöt32_t
 
§cALí
,

4261 
q15_t
 * 
pSrcB
,

4262 
uöt32_t
 
§cBLí
,

4263 
q15_t
 * 
pD°
);

4275 
¨m_c‹ªœã_q31
(

4276 
q31_t
 * 
pSrcA
,

4277 
uöt32_t
 
§cALí
,

4278 
q31_t
 * 
pSrcB
,

4279 
uöt32_t
 
§cBLí
,

4280 
q31_t
 * 
pD°
);

4292 
¨m_c‹ªœã_Á°_q31
(

4293 
q31_t
 * 
pSrcA
,

4294 
uöt32_t
 
§cALí
,

4295 
q31_t
 * 
pSrcB
,

4296 
uöt32_t
 
§cBLí
,

4297 
q31_t
 * 
pD°
);

4309 
¨m_c‹ªœã_q7
(

4310 
q7_t
 * 
pSrcA
,

4311 
uöt32_t
 
§cALí
,

4312 
q7_t
 * 
pSrcB
,

4313 
uöt32_t
 
§cBLí
,

4314 
q7_t
 * 
pD°
);

4321 
uöt16_t
 
numT≠s
;

4322 
uöt16_t
 
°©eIndex
;

4323 
Êﬂt32_t
 *
pSèã
;

4324 
Êﬂt32_t
 *
pC€ffs
;

4325 
uöt16_t
 
maxDñay
;

4326 
öt32_t
 *
pT≠Dñay
;

4327 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4335 
uöt16_t
 
numT≠s
;

4336 
uöt16_t
 
°©eIndex
;

4337 
q31_t
 *
pSèã
;

4338 
q31_t
 *
pC€ffs
;

4339 
uöt16_t
 
maxDñay
;

4340 
öt32_t
 *
pT≠Dñay
;

4341 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4349 
uöt16_t
 
numT≠s
;

4350 
uöt16_t
 
°©eIndex
;

4351 
q15_t
 *
pSèã
;

4352 
q15_t
 *
pC€ffs
;

4353 
uöt16_t
 
maxDñay
;

4354 
öt32_t
 *
pT≠Dñay
;

4355 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4363 
uöt16_t
 
numT≠s
;

4364 
uöt16_t
 
°©eIndex
;

4365 
q7_t
 *
pSèã
;

4366 
q7_t
 *
pC€ffs
;

4367 
uöt16_t
 
maxDñay
;

4368 
öt32_t
 *
pT≠Dñay
;

4369 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4381 
¨m_fú_•¨£_f32
(

4382 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4383 
Êﬂt32_t
 * 
pSrc
,

4384 
Êﬂt32_t
 * 
pD°
,

4385 
Êﬂt32_t
 * 
pS¸©chIn
,

4386 
uöt32_t
 
blockSize
);

4400 
¨m_fú_•¨£_öô_f32
(

4401 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4402 
uöt16_t
 
numT≠s
,

4403 
Êﬂt32_t
 * 
pC€ffs
,

4404 
Êﬂt32_t
 * 
pSèã
,

4405 
öt32_t
 * 
pT≠Dñay
,

4406 
uöt16_t
 
maxDñay
,

4407 
uöt32_t
 
blockSize
);

4419 
¨m_fú_•¨£_q31
(

4420 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4421 
q31_t
 * 
pSrc
,

4422 
q31_t
 * 
pD°
,

4423 
q31_t
 * 
pS¸©chIn
,

4424 
uöt32_t
 
blockSize
);

4438 
¨m_fú_•¨£_öô_q31
(

4439 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4440 
uöt16_t
 
numT≠s
,

4441 
q31_t
 * 
pC€ffs
,

4442 
q31_t
 * 
pSèã
,

4443 
öt32_t
 * 
pT≠Dñay
,

4444 
uöt16_t
 
maxDñay
,

4445 
uöt32_t
 
blockSize
);

4458 
¨m_fú_•¨£_q15
(

4459 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4460 
q15_t
 * 
pSrc
,

4461 
q15_t
 * 
pD°
,

4462 
q15_t
 * 
pS¸©chIn
,

4463 
q31_t
 * 
pS¸©chOut
,

4464 
uöt32_t
 
blockSize
);

4479 
¨m_fú_•¨£_öô_q15
(

4480 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4481 
uöt16_t
 
numT≠s
,

4482 
q15_t
 * 
pC€ffs
,

4483 
q15_t
 * 
pSèã
,

4484 
öt32_t
 * 
pT≠Dñay
,

4485 
uöt16_t
 
maxDñay
,

4486 
uöt32_t
 
blockSize
);

4499 
¨m_fú_•¨£_q7
(

4500 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4501 
q7_t
 * 
pSrc
,

4502 
q7_t
 * 
pD°
,

4503 
q7_t
 * 
pS¸©chIn
,

4504 
q31_t
 * 
pS¸©chOut
,

4505 
uöt32_t
 
blockSize
);

4519 
¨m_fú_•¨£_öô_q7
(

4520 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4521 
uöt16_t
 
numT≠s
,

4522 
q7_t
 * 
pC€ffs
,

4523 
q7_t
 * 
pSèã
,

4524 
öt32_t
 *
pT≠Dñay
,

4525 
uöt16_t
 
maxDñay
,

4526 
uöt32_t
 
blockSize
);

4537 
¨m_sö_cos_f32
(

4538 
Êﬂt32_t
 
thëa
,

4539 
Êﬂt32_t
 *
pSöVÆ
,

4540 
Êﬂt32_t
 *
pCcosVÆ
);

4550 
¨m_sö_cos_q31
(

4551 
q31_t
 
thëa
,

4552 
q31_t
 *
pSöVÆ
,

4553 
q31_t
 *
pCosVÆ
);

4564 
¨m_cm∂x_c⁄j_f32
(

4565 
Êﬂt32_t
 * 
pSrc
,

4566 
Êﬂt32_t
 * 
pD°
,

4567 
uöt32_t
 
numSam∂es
);

4577 
¨m_cm∂x_c⁄j_q31
(

4578 
q31_t
 * 
pSrc
,

4579 
q31_t
 * 
pD°
,

4580 
uöt32_t
 
numSam∂es
);

4590 
¨m_cm∂x_c⁄j_q15
(

4591 
q15_t
 * 
pSrc
,

4592 
q15_t
 * 
pD°
,

4593 
uöt32_t
 
numSam∂es
);

4605 
¨m_cm∂x_mag_squ¨ed_f32
(

4606 
Êﬂt32_t
 * 
pSrc
,

4607 
Êﬂt32_t
 * 
pD°
,

4608 
uöt32_t
 
numSam∂es
);

4618 
¨m_cm∂x_mag_squ¨ed_q31
(

4619 
q31_t
 * 
pSrc
,

4620 
q31_t
 * 
pD°
,

4621 
uöt32_t
 
numSam∂es
);

4631 
¨m_cm∂x_mag_squ¨ed_q15
(

4632 
q15_t
 * 
pSrc
,

4633 
q15_t
 * 
pD°
,

4634 
uöt32_t
 
numSam∂es
);

4711 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4712 
¨m_pid_ö°™˚_f32
 * 
S
,

4713 
Êﬂt32_t
 
ö
)

4715 
Êﬂt32_t
 
out
;

4718 
out
 = (
S
->
A0
 * 
ö
) +

4719 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4722 
S
->
°©e
[1] = S->state[0];

4723 
S
->
°©e
[0] = 
ö
;

4724 
S
->
°©e
[2] = 
out
;

4727  (
out
);

4746 
__INLINE
 
q31_t
 
¨m_pid_q31
(

4747 
¨m_pid_ö°™˚_q31
 * 
S
,

4748 
q31_t
 
ö
)

4750 
q63_t
 
acc
;

4751 
q31_t
 
out
;

4754 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4757 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4760 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4763 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4766 
out
 +
S
->
°©e
[2];

4769 
S
->
°©e
[1] = S->state[0];

4770 
S
->
°©e
[0] = 
ö
;

4771 
S
->
°©e
[2] = 
out
;

4774  (
out
);

4794 
__INLINE
 
q15_t
 
¨m_pid_q15
(

4795 
¨m_pid_ö°™˚_q15
 * 
S
,

4796 
q15_t
 
ö
)

4798 
q63_t
 
acc
;

4799 
q15_t
 
out
;

4803 #ifde‡
ARM_MATH_CM0


4806 
acc
 = ((
q31_t
Ë
S
->
A0
 )* 
ö
 ;

4811 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

4815 #ifde‡
ARM_MATH_CM0


4818 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0] ;

4819 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1] ;

4824 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
)
__SIMD32
(S->
°©e
),ácc);

4829 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4832 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4835 
S
->
°©e
[1] = S->state[0];

4836 
S
->
°©e
[0] = 
ö
;

4837 
S
->
°©e
[2] = 
out
;

4840  (
out
);

4857 
¨m_°©us
 
¨m_m©_övî£_f32
(

4858 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

4859 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

4905 
__INLINE
 
¨m_˛¨ke_f32
(

4906 
Êﬂt32_t
 
Ia
,

4907 
Êﬂt32_t
 
Ib
,

4908 
Êﬂt32_t
 * 
pIÆpha
,

4909 
Êﬂt32_t
 * 
pIbëa
)

4912 *
pIÆpha
 = 
Ia
;

4915 *
pIbëa
 = ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

4934 
__INLINE
 
¨m_˛¨ke_q31
(

4935 
q31_t
 
Ia
,

4936 
q31_t
 
Ib
,

4937 
q31_t
 * 
pIÆpha
,

4938 
q31_t
 * 
pIbëa
)

4940 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

4943 *
pIÆpha
 = 
Ia
;

4946 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

4949 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

4952 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

4966 
¨m_q7_to_q31
(

4967 
q7_t
 * 
pSrc
,

4968 
q31_t
 * 
pD°
,

4969 
uöt32_t
 
blockSize
);

5009 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5010 
Êﬂt32_t
 
IÆpha
,

5011 
Êﬂt32_t
 
Ibëa
,

5012 
Êﬂt32_t
 * 
pIa
,

5013 
Êﬂt32_t
 * 
pIb
)

5016 *
pIa
 = 
IÆpha
;

5019 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5038 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5039 
q31_t
 
IÆpha
,

5040 
q31_t
 
Ibëa
,

5041 
q31_t
 * 
pIa
,

5042 
q31_t
 * 
pIb
)

5044 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5047 *
pIa
 = 
IÆpha
;

5050 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5053 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5056 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5071 
¨m_q7_to_q15
(

5072 
q7_t
 * 
pSrc
,

5073 
q15_t
 * 
pD°
,

5074 
uöt32_t
 
blockSize
);

5125 
__INLINE
 
¨m_∑rk_f32
(

5126 
Êﬂt32_t
 
IÆpha
,

5127 
Êﬂt32_t
 
Ibëa
,

5128 
Êﬂt32_t
 * 
pId
,

5129 
Êﬂt32_t
 * 
pIq
,

5130 
Êﬂt32_t
 
söVÆ
,

5131 
Êﬂt32_t
 
cosVÆ
)

5134 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5137 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5159 
__INLINE
 
¨m_∑rk_q31
(

5160 
q31_t
 
IÆpha
,

5161 
q31_t
 
Ibëa
,

5162 
q31_t
 * 
pId
,

5163 
q31_t
 * 
pIq
,

5164 
q31_t
 
söVÆ
,

5165 
q31_t
 
cosVÆ
)

5167 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5168 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5171 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5174 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5178 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5181 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5184 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5187 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5201 
¨m_q7_to_Êﬂt
(

5202 
q7_t
 * 
pSrc
,

5203 
Êﬂt32_t
 * 
pD°
,

5204 
uöt32_t
 
blockSize
);

5244 
__INLINE
 
¨m_öv_∑rk_f32
(

5245 
Êﬂt32_t
 
Id
,

5246 
Êﬂt32_t
 
Iq
,

5247 
Êﬂt32_t
 * 
pIÆpha
,

5248 
Êﬂt32_t
 * 
pIbëa
,

5249 
Êﬂt32_t
 
söVÆ
,

5250 
Êﬂt32_t
 
cosVÆ
)

5253 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5256 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5279 
__INLINE
 
¨m_öv_∑rk_q31
(

5280 
q31_t
 
Id
,

5281 
q31_t
 
Iq
,

5282 
q31_t
 * 
pIÆpha
,

5283 
q31_t
 * 
pIbëa
,

5284 
q31_t
 
söVÆ
,

5285 
q31_t
 
cosVÆ
)

5287 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5288 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5291 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5294 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5298 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5301 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5304 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5307 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5323 
¨m_q31_to_Êﬂt
(

5324 
q31_t
 * 
pSrc
,

5325 
Êﬂt32_t
 * 
pD°
,

5326 
uöt32_t
 
blockSize
);

5377 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5378 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5379 
Êﬂt32_t
 
x
)

5382 
Êﬂt32_t
 
y
;

5383 
Êﬂt32_t
 
x0
, 
x1
;

5384 
Êﬂt32_t
 
y0
, 
y1
;

5385 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5386 
öt32_t
 
i
;

5387 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5390 
i
 = (
x
 - 
S
->
x1
Ë/ 
xS∑cög
;

5392 if(
i
 < 0)

5395 
y
 = 
pYD©a
[0];

5397 if(
i
 >
S
->
nVÆues
)

5400 
y
 = 
pYD©a
[
S
->
nVÆues
-1];

5405 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5406 
x1
 = 
S
->x1 + (
i
 +1Ë* 
xS∑cög
;

5409 
y0
 = 
pYD©a
[
i
];

5410 
y1
 = 
pYD©a
[
i
 + 1];

5413 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0)/(
x1
-x0));

5418  (
y
);

5436 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(q31_à*
pYD©a
,

5437 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5439 
q31_t
 
y
;

5440 
q31_t
 
y0
, 
y1
;

5441 
q31_t
 
‰a˘
;

5442 
öt32_t
 
ödex
;

5447 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5449 if(
ödex
 >(
nVÆues
 - 1))

5451 (
pYD©a
[
nVÆues
 - 1]);

5453 if(
ödex
 < 0)

5455 (
pYD©a
[0]);

5462 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5465 
y0
 = 
pYD©a
[
ödex
];

5466 
y1
 = 
pYD©a
[
ödex
 + 1u];

5469 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5472 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5475  (
y
 << 1u);

5496 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(q15_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5498 
q63_t
 
y
;

5499 
q15_t
 
y0
, 
y1
;

5500 
q31_t
 
‰a˘
;

5501 
öt32_t
 
ödex
;

5506 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5508 if(
ödex
 >(
nVÆues
 - 1))

5510 (
pYD©a
[
nVÆues
 - 1]);

5512 if(
ödex
 < 0)

5514 (
pYD©a
[0]);

5520 
‰a˘
 = (
x
 & 0x000FFFFF);

5523 
y0
 = 
pYD©a
[
ödex
];

5524 
y1
 = 
pYD©a
[
ödex
 + 1u];

5527 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5530 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5533  (
y
 >> 20);

5553 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(q7_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5555 
q31_t
 
y
;

5556 
q7_t
 
y0
, 
y1
;

5557 
q31_t
 
‰a˘
;

5558 
öt32_t
 
ödex
;

5563 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5566 if(
ödex
 >(
nVÆues
 - 1))

5568 (
pYD©a
[
nVÆues
 - 1]);

5570 if(
ödex
 < 0)

5572 (
pYD©a
[0]);

5579 
‰a˘
 = (
x
 & 0x000FFFFF);

5582 
y0
 = 
pYD©a
[
ödex
];

5583 
y1
 = 
pYD©a
[
ödex
 + 1u];

5586 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5589 
y
 +(
y1
 * 
‰a˘
);

5592  (
y
 >> 20u);

5607 
Êﬂt32_t
 
¨m_sö_f32
(

5608 
Êﬂt32_t
 
x
);

5616 
q31_t
 
¨m_sö_q31
(

5617 
q31_t
 
x
);

5625 
q15_t
 
¨m_sö_q15
(

5626 
q15_t
 
x
);

5634 
Êﬂt32_t
 
¨m_cos_f32
(

5635 
Êﬂt32_t
 
x
);

5643 
q31_t
 
¨m_cos_q31
(

5644 
q31_t
 
x
);

5652 
q15_t
 
¨m_cos_q15
(

5653 
q15_t
 
x
);

5695 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5696 
Êﬂt32_t
 
ö
, flﬂt32_à*
pOut
)

5698 if(
ö
 > 0)

5702 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5703 *
pOut
 = 
__sqπf
(
ö
);

5705 *
pOut
 = 
sqπf
(
ö
);

5708  (
ARM_MATH_SUCCESS
);

5712 *
pOut
 = 0.0f;

5713  (
ARM_MATH_ARGUMENT_ERROR
);

5726 
¨m_°©us
 
¨m_sqπ_q31
(

5727 
q31_t
 
ö
, q31_à*
pOut
);

5736 
¨m_°©us
 
¨m_sqπ_q15
(

5737 
q15_t
 
ö
, q15_à*
pOut
);

5752 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

5753 
öt32_t
 * 
cúcBuf„r
,

5754 
öt32_t
 
L
,

5755 
uöt16_t
 * 
wrôeOff£t
,

5756 
öt32_t
 
buf„rInc
,

5757 c⁄° 
öt32_t
 * 
§c
,

5758 
öt32_t
 
§cInc
,

5759 
uöt32_t
 
blockSize
)

5761 
uöt32_t
 
i
 = 0u;

5762 
öt32_t
 
wOff£t
;

5766 
wOff£t
 = *
wrôeOff£t
;

5769 
i
 = 
blockSize
;

5771 
i
 > 0u)

5774 
cúcBuf„r
[
wOff£t
] = *
§c
;

5777 
§c
 +
§cInc
;

5780 
wOff£t
 +
buf„rInc
;

5781 if(
wOff£t
 >
L
)

5782 
wOff£t
 -
L
;

5785 
i
--;

5789 *
wrôeOff£t
 = 
wOff£t
;

5797 
__INLINE
 
¨m_cúcuœrRód_f32
(

5798 
öt32_t
 * 
cúcBuf„r
,

5799 
öt32_t
 
L
,

5800 
öt32_t
 * 
ªadOff£t
,

5801 
öt32_t
 
buf„rInc
,

5802 
öt32_t
 * 
d°
,

5803 
öt32_t
 * 
d°_ba£
,

5804 
öt32_t
 
d°_Àngth
,

5805 
öt32_t
 
d°Inc
,

5806 
uöt32_t
 
blockSize
)

5808 
uöt32_t
 
i
 = 0u;

5809 
öt32_t
 
rOff£t
, 
d°_íd
;

5813 
rOff£t
 = *
ªadOff£t
;

5814 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5817 
i
 = 
blockSize
;

5819 
i
 > 0u)

5822 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5825 
d°
 +
d°Inc
;

5827 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

5829 
d°
 = 
d°_ba£
;

5833 
rOff£t
 +
buf„rInc
;

5835 if(
rOff£t
 >
L
)

5837 
rOff£t
 -
L
;

5841 
i
--;

5845 *
ªadOff£t
 = 
rOff£t
;

5852 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

5853 
q15_t
 * 
cúcBuf„r
,

5854 
öt32_t
 
L
,

5855 
uöt16_t
 * 
wrôeOff£t
,

5856 
öt32_t
 
buf„rInc
,

5857 c⁄° 
q15_t
 * 
§c
,

5858 
öt32_t
 
§cInc
,

5859 
uöt32_t
 
blockSize
)

5861 
uöt32_t
 
i
 = 0u;

5862 
öt32_t
 
wOff£t
;

5866 
wOff£t
 = *
wrôeOff£t
;

5869 
i
 = 
blockSize
;

5871 
i
 > 0u)

5874 
cúcBuf„r
[
wOff£t
] = *
§c
;

5877 
§c
 +
§cInc
;

5880 
wOff£t
 +
buf„rInc
;

5881 if(
wOff£t
 >
L
)

5882 
wOff£t
 -
L
;

5885 
i
--;

5889 *
wrôeOff£t
 = 
wOff£t
;

5897 
__INLINE
 
¨m_cúcuœrRód_q15
(

5898 
q15_t
 * 
cúcBuf„r
,

5899 
öt32_t
 
L
,

5900 
öt32_t
 * 
ªadOff£t
,

5901 
öt32_t
 
buf„rInc
,

5902 
q15_t
 * 
d°
,

5903 
q15_t
 * 
d°_ba£
,

5904 
öt32_t
 
d°_Àngth
,

5905 
öt32_t
 
d°Inc
,

5906 
uöt32_t
 
blockSize
)

5908 
uöt32_t
 
i
 = 0;

5909 
öt32_t
 
rOff£t
, 
d°_íd
;

5913 
rOff£t
 = *
ªadOff£t
;

5915 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5918 
i
 = 
blockSize
;

5920 
i
 > 0u)

5923 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5926 
d°
 +
d°Inc
;

5928 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

5930 
d°
 = 
d°_ba£
;

5934 
rOff£t
 +
buf„rInc
;

5936 if(
rOff£t
 >
L
)

5938 
rOff£t
 -
L
;

5942 
i
--;

5946 *
ªadOff£t
 = 
rOff£t
;

5954 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

5955 
q7_t
 * 
cúcBuf„r
,

5956 
öt32_t
 
L
,

5957 
uöt16_t
 * 
wrôeOff£t
,

5958 
öt32_t
 
buf„rInc
,

5959 c⁄° 
q7_t
 * 
§c
,

5960 
öt32_t
 
§cInc
,

5961 
uöt32_t
 
blockSize
)

5963 
uöt32_t
 
i
 = 0u;

5964 
öt32_t
 
wOff£t
;

5968 
wOff£t
 = *
wrôeOff£t
;

5971 
i
 = 
blockSize
;

5973 
i
 > 0u)

5976 
cúcBuf„r
[
wOff£t
] = *
§c
;

5979 
§c
 +
§cInc
;

5982 
wOff£t
 +
buf„rInc
;

5983 if(
wOff£t
 >
L
)

5984 
wOff£t
 -
L
;

5987 
i
--;

5991 *
wrôeOff£t
 = 
wOff£t
;

5999 
__INLINE
 
¨m_cúcuœrRód_q7
(

6000 
q7_t
 * 
cúcBuf„r
,

6001 
öt32_t
 
L
,

6002 
öt32_t
 * 
ªadOff£t
,

6003 
öt32_t
 
buf„rInc
,

6004 
q7_t
 * 
d°
,

6005 
q7_t
 * 
d°_ba£
,

6006 
öt32_t
 
d°_Àngth
,

6007 
öt32_t
 
d°Inc
,

6008 
uöt32_t
 
blockSize
)

6010 
uöt32_t
 
i
 = 0;

6011 
öt32_t
 
rOff£t
, 
d°_íd
;

6015 
rOff£t
 = *
ªadOff£t
;

6017 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6020 
i
 = 
blockSize
;

6022 
i
 > 0u)

6025 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6028 
d°
 +
d°Inc
;

6030 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6032 
d°
 = 
d°_ba£
;

6036 
rOff£t
 +
buf„rInc
;

6038 if(
rOff£t
 >
L
)

6040 
rOff£t
 -
L
;

6044 
i
--;

6048 *
ªadOff£t
 = 
rOff£t
;

6060 
¨m_powî_q31
(

6061 
q31_t
 * 
pSrc
,

6062 
uöt32_t
 
blockSize
,

6063 
q63_t
 * 
pResu…
);

6073 
¨m_powî_f32
(

6074 
Êﬂt32_t
 * 
pSrc
,

6075 
uöt32_t
 
blockSize
,

6076 
Êﬂt32_t
 * 
pResu…
);

6086 
¨m_powî_q15
(

6087 
q15_t
 * 
pSrc
,

6088 
uöt32_t
 
blockSize
,

6089 
q63_t
 * 
pResu…
);

6099 
¨m_powî_q7
(

6100 
q7_t
 * 
pSrc
,

6101 
uöt32_t
 
blockSize
,

6102 
q31_t
 * 
pResu…
);

6112 
¨m_món_q7
(

6113 
q7_t
 * 
pSrc
,

6114 
uöt32_t
 
blockSize
,

6115 
q7_t
 * 
pResu…
);

6124 
¨m_món_q15
(

6125 
q15_t
 * 
pSrc
,

6126 
uöt32_t
 
blockSize
,

6127 
q15_t
 * 
pResu…
);

6136 
¨m_món_q31
(

6137 
q31_t
 * 
pSrc
,

6138 
uöt32_t
 
blockSize
,

6139 
q31_t
 * 
pResu…
);

6148 
¨m_món_f32
(

6149 
Êﬂt32_t
 * 
pSrc
,

6150 
uöt32_t
 
blockSize
,

6151 
Êﬂt32_t
 * 
pResu…
);

6161 
¨m_v¨_f32
(

6162 
Êﬂt32_t
 * 
pSrc
,

6163 
uöt32_t
 
blockSize
,

6164 
Êﬂt32_t
 * 
pResu…
);

6174 
¨m_v¨_q31
(

6175 
q31_t
 * 
pSrc
,

6176 
uöt32_t
 
blockSize
,

6177 
q63_t
 * 
pResu…
);

6187 
¨m_v¨_q15
(

6188 
q15_t
 * 
pSrc
,

6189 
uöt32_t
 
blockSize
,

6190 
q31_t
 * 
pResu…
);

6200 
¨m_rms_f32
(

6201 
Êﬂt32_t
 * 
pSrc
,

6202 
uöt32_t
 
blockSize
,

6203 
Êﬂt32_t
 * 
pResu…
);

6213 
¨m_rms_q31
(

6214 
q31_t
 * 
pSrc
,

6215 
uöt32_t
 
blockSize
,

6216 
q31_t
 * 
pResu…
);

6226 
¨m_rms_q15
(

6227 
q15_t
 * 
pSrc
,

6228 
uöt32_t
 
blockSize
,

6229 
q15_t
 * 
pResu…
);

6239 
¨m_°d_f32
(

6240 
Êﬂt32_t
 * 
pSrc
,

6241 
uöt32_t
 
blockSize
,

6242 
Êﬂt32_t
 * 
pResu…
);

6252 
¨m_°d_q31
(

6253 
q31_t
 * 
pSrc
,

6254 
uöt32_t
 
blockSize
,

6255 
q31_t
 * 
pResu…
);

6265 
¨m_°d_q15
(

6266 
q15_t
 * 
pSrc
,

6267 
uöt32_t
 
blockSize
,

6268 
q15_t
 * 
pResu…
);

6278 
¨m_cm∂x_mag_f32
(

6279 
Êﬂt32_t
 * 
pSrc
,

6280 
Êﬂt32_t
 * 
pD°
,

6281 
uöt32_t
 
numSam∂es
);

6291 
¨m_cm∂x_mag_q31
(

6292 
q31_t
 * 
pSrc
,

6293 
q31_t
 * 
pD°
,

6294 
uöt32_t
 
numSam∂es
);

6304 
¨m_cm∂x_mag_q15
(

6305 
q15_t
 * 
pSrc
,

6306 
q15_t
 * 
pD°
,

6307 
uöt32_t
 
numSam∂es
);

6319 
¨m_cm∂x_dŸ_¥od_q15
(

6320 
q15_t
 * 
pSrcA
,

6321 
q15_t
 * 
pSrcB
,

6322 
uöt32_t
 
numSam∂es
,

6323 
q31_t
 * 
ªÆResu…
,

6324 
q31_t
 * 
imagResu…
);

6336 
¨m_cm∂x_dŸ_¥od_q31
(

6337 
q31_t
 * 
pSrcA
,

6338 
q31_t
 * 
pSrcB
,

6339 
uöt32_t
 
numSam∂es
,

6340 
q63_t
 * 
ªÆResu…
,

6341 
q63_t
 * 
imagResu…
);

6353 
¨m_cm∂x_dŸ_¥od_f32
(

6354 
Êﬂt32_t
 * 
pSrcA
,

6355 
Êﬂt32_t
 * 
pSrcB
,

6356 
uöt32_t
 
numSam∂es
,

6357 
Êﬂt32_t
 * 
ªÆResu…
,

6358 
Êﬂt32_t
 * 
imagResu…
);

6369 
¨m_cm∂x_mu…_ªÆ_q15
(

6370 
q15_t
 * 
pSrcCm∂x
,

6371 
q15_t
 * 
pSrcRól
,

6372 
q15_t
 * 
pCm∂xD°
,

6373 
uöt32_t
 
numSam∂es
);

6384 
¨m_cm∂x_mu…_ªÆ_q31
(

6385 
q31_t
 * 
pSrcCm∂x
,

6386 
q31_t
 * 
pSrcRól
,

6387 
q31_t
 * 
pCm∂xD°
,

6388 
uöt32_t
 
numSam∂es
);

6399 
¨m_cm∂x_mu…_ªÆ_f32
(

6400 
Êﬂt32_t
 * 
pSrcCm∂x
,

6401 
Êﬂt32_t
 * 
pSrcRól
,

6402 
Êﬂt32_t
 * 
pCm∂xD°
,

6403 
uöt32_t
 
numSam∂es
);

6414 
¨m_mö_q7
(

6415 
q7_t
 * 
pSrc
,

6416 
uöt32_t
 
blockSize
,

6417 
q7_t
 * 
ªsu…
,

6418 
uöt32_t
 * 
ödex
);

6429 
¨m_mö_q15
(

6430 
q15_t
 * 
pSrc
,

6431 
uöt32_t
 
blockSize
,

6432 
q15_t
 * 
pResu…
,

6433 
uöt32_t
 * 
pIndex
);

6443 
¨m_mö_q31
(

6444 
q31_t
 * 
pSrc
,

6445 
uöt32_t
 
blockSize
,

6446 
q31_t
 * 
pResu…
,

6447 
uöt32_t
 * 
pIndex
);

6458 
¨m_mö_f32
(

6459 
Êﬂt32_t
 * 
pSrc
,

6460 
uöt32_t
 
blockSize
,

6461 
Êﬂt32_t
 * 
pResu…
,

6462 
uöt32_t
 * 
pIndex
);

6473 
¨m_max_q7
(

6474 
q7_t
 * 
pSrc
,

6475 
uöt32_t
 
blockSize
,

6476 
q7_t
 * 
pResu…
,

6477 
uöt32_t
 * 
pIndex
);

6488 
¨m_max_q15
(

6489 
q15_t
 * 
pSrc
,

6490 
uöt32_t
 
blockSize
,

6491 
q15_t
 * 
pResu…
,

6492 
uöt32_t
 * 
pIndex
);

6503 
¨m_max_q31
(

6504 
q31_t
 * 
pSrc
,

6505 
uöt32_t
 
blockSize
,

6506 
q31_t
 * 
pResu…
,

6507 
uöt32_t
 * 
pIndex
);

6518 
¨m_max_f32
(

6519 
Êﬂt32_t
 * 
pSrc
,

6520 
uöt32_t
 
blockSize
,

6521 
Êﬂt32_t
 * 
pResu…
,

6522 
uöt32_t
 * 
pIndex
);

6533 
¨m_cm∂x_mu…_cm∂x_q15
(

6534 
q15_t
 * 
pSrcA
,

6535 
q15_t
 * 
pSrcB
,

6536 
q15_t
 * 
pD°
,

6537 
uöt32_t
 
numSam∂es
);

6548 
¨m_cm∂x_mu…_cm∂x_q31
(

6549 
q31_t
 * 
pSrcA
,

6550 
q31_t
 * 
pSrcB
,

6551 
q31_t
 * 
pD°
,

6552 
uöt32_t
 
numSam∂es
);

6563 
¨m_cm∂x_mu…_cm∂x_f32
(

6564 
Êﬂt32_t
 * 
pSrcA
,

6565 
Êﬂt32_t
 * 
pSrcB
,

6566 
Êﬂt32_t
 * 
pD°
,

6567 
uöt32_t
 
numSam∂es
);

6576 
¨m_Êﬂt_to_q31
(

6577 
Êﬂt32_t
 * 
pSrc
,

6578 
q31_t
 * 
pD°
,

6579 
uöt32_t
 
blockSize
);

6588 
¨m_Êﬂt_to_q15
(

6589 
Êﬂt32_t
 * 
pSrc
,

6590 
q15_t
 * 
pD°
,

6591 
uöt32_t
 
blockSize
);

6600 
¨m_Êﬂt_to_q7
(

6601 
Êﬂt32_t
 * 
pSrc
,

6602 
q7_t
 * 
pD°
,

6603 
uöt32_t
 
blockSize
);

6613 
¨m_q31_to_q15
(

6614 
q31_t
 * 
pSrc
,

6615 
q15_t
 * 
pD°
,

6616 
uöt32_t
 
blockSize
);

6625 
¨m_q31_to_q7
(

6626 
q31_t
 * 
pSrc
,

6627 
q7_t
 * 
pD°
,

6628 
uöt32_t
 
blockSize
);

6637 
¨m_q15_to_Êﬂt
(

6638 
q15_t
 * 
pSrc
,

6639 
Êﬂt32_t
 * 
pD°
,

6640 
uöt32_t
 
blockSize
);

6650 
¨m_q15_to_q31
(

6651 
q15_t
 * 
pSrc
,

6652 
q31_t
 * 
pD°
,

6653 
uöt32_t
 
blockSize
);

6663 
¨m_q15_to_q7
(

6664 
q15_t
 * 
pSrc
,

6665 
q7_t
 * 
pD°
,

6666 
uöt32_t
 
blockSize
);

6740 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6741 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6742 
Êﬂt32_t
 
X
,

6743 
Êﬂt32_t
 
Y
)

6745 
Êﬂt32_t
 
out
;

6746 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6747 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6748 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6749 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6750 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6752 
xIndex
 = (
öt32_t
Ë
X
;

6753 
yIndex
 = (
öt32_t
Ë
Y
;

6757 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
-1Ë|| 
yIndex
 < 0 || yIndex > ( S->
numCﬁs
-1))

6763 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
-1Ë* 
S
->
numCﬁs
 ;

6767 
f00
 = 
pD©a
[
ödex
];

6768 
f01
 = 
pD©a
[
ödex
 + 1];

6771 
ödex
 = (
xIndex
-1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6775 
f10
 = 
pD©a
[
ödex
];

6776 
f11
 = 
pD©a
[
ödex
 + 1];

6779 
b1
 = 
f00
;

6780 
b2
 = 
f01
 - 
f00
;

6781 
b3
 = 
f10
 - 
f00
;

6782 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6785 
xdiff
 = 
X
 - 
xIndex
;

6788 
ydiff
 = 
Y
 - 
yIndex
;

6791 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6794  (
out
);

6807 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6808 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6809 
q31_t
 
X
,

6810 
q31_t
 
Y
)

6812 
q31_t
 
out
;

6813 
q31_t
 
acc
 = 0;

6814 
q31_t
 
x‰a˘
, 
y‰a˘
;

6815 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6816 
öt32_t
 
rI
, 
cI
;

6817 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6818 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6824 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

6829 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

6833 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6840 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

6843 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6844 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6848 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

6851 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6852 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6855 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

6856 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

6859 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

6860 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

6863 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

6864 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6867 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

6868 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6871  (
acc
 << 2u);

6883 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

6884 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

6885 
q31_t
 
X
,

6886 
q31_t
 
Y
)

6888 
q63_t
 
acc
 = 0;

6889 
q31_t
 
out
;

6890 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

6891 
q31_t
 
x‰a˘
, 
y‰a˘
;

6892 
öt32_t
 
rI
, 
cI
;

6893 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

6894 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6899 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6904 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6908 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6915 
x‰a˘
 = (
X
 & 0x000FFFFF);

6918 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6919 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6924 
y‰a˘
 = (
Y
 & 0x000FFFFF);

6927 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6928 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6934 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6935 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

6938 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

6939 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

6942 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6943 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6946 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

6947 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6951  (
acc
 >> 36);

6963 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

6964 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

6965 
q31_t
 
X
,

6966 
q31_t
 
Y
)

6968 
q63_t
 
acc
 = 0;

6969 
q31_t
 
out
;

6970 
q31_t
 
x‰a˘
, 
y‰a˘
;

6971 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

6972 
öt32_t
 
rI
, 
cI
;

6973 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

6974 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6979 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6984 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6988 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6995 
x‰a˘
 = (
X
 & 0x000FFFFF);

6998 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6999 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7004 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7007 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7008 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7011 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7012 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7015 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7016 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7019 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7020 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7023 
out
 = ((
y2
 * (
y‰a˘
)));

7024 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7027  (
acc
 >> 40);

7040 #ifdef 
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\core_cm4.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

76 
	#__CM4_CMSIS_VERSION_MAIN
 (0x02Ë

	)

77 
	#__CM4_CMSIS_VERSION_SUB
 (0x10Ë

	)

78 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM4_CMSIS_VERSION_SUB
Ë

	)

80 
	#__CORTEX_M
 (0x04Ë

	)

83 #i‡ 
deföed
 ( 
__CC_ARM
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
__ölöe


	)

87 #ñi‡
deföed
 ( 
__ICCARM__
 )

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
ölöe


	)

91 #ñi‡
deföed
 ( 
__GNUC__
 )

92 
	#__ASM
 
__asm


	)

93 
	#__INLINE
 
ölöe


	)

95 #ñi‡
deföed
 ( 
__TASKING__
 )

96 
	#__ASM
 
__asm


	)

97 
	#__INLINE
 
ölöe


	)

102 #i‡
deföed
 ( 
__CC_ARM
 )

103 #i‡
deföed
 
__TARGET_FPU_VFP


104 #i‡(
__FPU_PRESENT
 == 1)

105 
	#__FPU_USED
 1

	)

108 
	#__FPU_USED
 0

	)

111 
	#__FPU_USED
 0

	)

114 #ñi‡
deföed
 ( 
__ICCARM__
 )

115 #i‡
deföed
 
__ARMVFP__


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__TASKING__
 )

140 
	#__FPU_USED
 0

	)

143 
	~<°döt.h
>

144 
	~<c‹e_cmIn°r.h
>

145 
	~<c‹e_cmFunc.h
>

146 
	~<c‹e_cm4_simd.h
>

150 #i‚de‡
__CMSIS_GENERIC


152 #i‚de‡
__CORE_CM4_H_DEPENDANT


153 
	#__CORE_CM4_H_DEPENDANT


	)

156 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


157 #i‚de‡
__CM4_REV


158 
	#__CM4_REV
 0x0000

	)

162 #i‚de‡
__FPU_PRESENT


163 
	#__FPU_PRESENT
 0

	)

167 #i‚de‡
__MPU_PRESENT


168 
	#__MPU_PRESENT
 0

	)

172 #i‚de‡
__NVIC_PRIO_BITS


173 
	#__NVIC_PRIO_BITS
 4

	)

177 #i‚de‡
__Víd‹_SysTickC⁄fig


178 
	#__Víd‹_SysTickC⁄fig
 0

	)

184 #ifde‡
__˝lu•lus


185 
	#__I
 vﬁ©ûê

	)

187 
	#__I
 vﬁ©ûêc⁄°

	)

189 
	#__O
 vﬁ©ûê

	)

190 
	#__IO
 vﬁ©ûê

	)

222 #i‡(
__CORTEX_M
 != 0x04)

223 
uöt32_t
 
_ª£rved0
:27;

225 
uöt32_t
 
_ª£rved0
:16;

226 
uöt32_t
 
GE
:4;

227 
uöt32_t
 
_ª£rved1
:7;

229 
uöt32_t
 
Q
:1;

230 
uöt32_t
 
V
:1;

231 
uöt32_t
 
C
:1;

232 
uöt32_t
 
Z
:1;

233 
uöt32_t
 
N
:1;

234 } 
b
;

235 
uöt32_t
 
w
;

236 } 
	tAPSR_Ty≥
;

245 
uöt32_t
 
ISR
:9;

246 
uöt32_t
 
_ª£rved0
:23;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tIPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 #i‡(
__CORTEX_M
 != 0x04)

260 
uöt32_t
 
_ª£rved0
:15;

262 
uöt32_t
 
_ª£rved0
:7;

263 
uöt32_t
 
GE
:4;

264 
uöt32_t
 
_ª£rved1
:4;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
IT
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

284 
uöt32_t
 
nPRIV
:1;

285 
uöt32_t
 
SPSEL
:1;

286 
uöt32_t
 
FPCA
:1;

287 
uöt32_t
 
_ª£rved0
:29;

288 } 
b
;

289 
uöt32_t
 
w
;

290 } 
	tCONTROL_Ty≥
;

305 
__IO
 
uöt32_t
 
ISER
[8];

306 
uöt32_t
 
RESERVED0
[24];

307 
__IO
 
uöt32_t
 
ICER
[8];

308 
uöt32_t
 
RSERVED1
[24];

309 
__IO
 
uöt32_t
 
ISPR
[8];

310 
uöt32_t
 
RESERVED2
[24];

311 
__IO
 
uöt32_t
 
ICPR
[8];

312 
uöt32_t
 
RESERVED3
[24];

313 
__IO
 
uöt32_t
 
IABR
[8];

314 
uöt32_t
 
RESERVED4
[56];

315 
__IO
 
uöt8_t
 
IP
[240];

316 
uöt32_t
 
RESERVED5
[644];

317 
__O
 
uöt32_t
 
STIR
;

318 } 
	tNVIC_Ty≥
;

321 
	#NVIC_STIR_INTID_Pos
 0

	)

322 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

337 
__I
 
uöt32_t
 
CPUID
;

338 
__IO
 
uöt32_t
 
ICSR
;

339 
__IO
 
uöt32_t
 
VTOR
;

340 
__IO
 
uöt32_t
 
AIRCR
;

341 
__IO
 
uöt32_t
 
SCR
;

342 
__IO
 
uöt32_t
 
CCR
;

343 
__IO
 
uöt8_t
 
SHP
[12];

344 
__IO
 
uöt32_t
 
SHCSR
;

345 
__IO
 
uöt32_t
 
CFSR
;

346 
__IO
 
uöt32_t
 
HFSR
;

347 
__IO
 
uöt32_t
 
DFSR
;

348 
__IO
 
uöt32_t
 
MMFAR
;

349 
__IO
 
uöt32_t
 
BFAR
;

350 
__IO
 
uöt32_t
 
AFSR
;

351 
__I
 
uöt32_t
 
PFR
[2];

352 
__I
 
uöt32_t
 
DFR
;

353 
__I
 
uöt32_t
 
ADR
;

354 
__I
 
uöt32_t
 
MMFR
[4];

355 
__I
 
uöt32_t
 
ISAR
[5];

356 
uöt32_t
 
RESERVED0
[5];

357 
__IO
 
uöt32_t
 
CPACR
;

358 } 
	tSCB_Ty≥
;

361 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

362 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

364 
	#SCB_CPUID_VARIANT_Pos
 20

	)

365 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

367 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

368 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

370 
	#SCB_CPUID_PARTNO_Pos
 4

	)

371 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

373 
	#SCB_CPUID_REVISION_Pos
 0

	)

374 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

377 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

378 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

381 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

384 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

386 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

387 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

389 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

390 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

392 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

393 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

395 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

396 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

398 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

399 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

401 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

402 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

404 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

405 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

408 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

412 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

413 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

415 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

418 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

419 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

421 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

422 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

424 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

425 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

427 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

428 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

430 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

431 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

434 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

435 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

437 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

438 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

440 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

441 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

444 
	#SCB_CCR_STKALIGN_Pos
 9

	)

445 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

447 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

448 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

450 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

451 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

453 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

454 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

456 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

457 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

459 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

460 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

463 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

464 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

466 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

467 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

469 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

470 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

472 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

473 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

475 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

476 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

478 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

479 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

481 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

482 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

484 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

485 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

487 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

488 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

490 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

491 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

493 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

494 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

496 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

497 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

499 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

500 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

502 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

503 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

506 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

507 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

509 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

510 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

512 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

513 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

516 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

517 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

519 
	#SCB_HFSR_FORCED_Pos
 30

	)

520 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

522 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

523 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

526 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

527 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

529 
	#SCB_DFSR_VCATCH_Pos
 3

	)

530 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

532 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

533 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

535 
	#SCB_DFSR_BKPT_Pos
 1

	)

536 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

538 
	#SCB_DFSR_HALTED_Pos
 0

	)

539 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

554 
uöt32_t
 
RESERVED0
[1];

555 
__I
 
uöt32_t
 
ICTR
;

556 
__IO
 
uöt32_t
 
ACTLR
;

557 } 
	tSCnSCB_Ty≥
;

560 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

561 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

564 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

565 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

567 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

568 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

570 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

571 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

573 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

574 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

576 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

577 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

592 
__IO
 
uöt32_t
 
CTRL
;

593 
__IO
 
uöt32_t
 
LOAD
;

594 
__IO
 
uöt32_t
 
VAL
;

595 
__I
 
uöt32_t
 
CALIB
;

596 } 
	tSysTick_Ty≥
;

599 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

600 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

602 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

603 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

605 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

606 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

608 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

609 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

612 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

613 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

616 
	#SysTick_VAL_CURRENT_Pos
 0

	)

617 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

620 
	#SysTick_CALIB_NOREF_Pos
 31

	)

621 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

623 
	#SysTick_CALIB_SKEW_Pos
 30

	)

624 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

626 
	#SysTick_CALIB_TENMS_Pos
 0

	)

627 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

642 
__O
 union

644 
__O
 
uöt8_t
 
u8
;

645 
__O
 
uöt16_t
 
u16
;

646 
__O
 
uöt32_t
 
u32
;

647 } 
PORT
 [32];

648 
uöt32_t
 
RESERVED0
[864];

649 
__IO
 
uöt32_t
 
TER
;

650 
uöt32_t
 
RESERVED1
[15];

651 
__IO
 
uöt32_t
 
TPR
;

652 
uöt32_t
 
RESERVED2
[15];

653 
__IO
 
uöt32_t
 
TCR
;

654 } 
	tITM_Ty≥
;

657 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

658 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

661 
	#ITM_TCR_BUSY_Pos
 23

	)

662 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

664 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

665 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

667 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

668 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

670 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

671 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

673 
	#ITM_TCR_SWOENA_Pos
 4

	)

674 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

676 
	#ITM_TCR_TXENA_Pos
 3

	)

677 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

679 
	#ITM_TCR_SYNCENA_Pos
 2

	)

680 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

682 
	#ITM_TCR_TSENA_Pos
 1

	)

683 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

685 
	#ITM_TCR_ITMENA_Pos
 0

	)

686 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

691 #i‡(
__MPU_PRESENT
 == 1)

702 
__I
 
uöt32_t
 
TYPE
;

703 
__IO
 
uöt32_t
 
CTRL
;

704 
__IO
 
uöt32_t
 
RNR
;

705 
__IO
 
uöt32_t
 
RBAR
;

706 
__IO
 
uöt32_t
 
RASR
;

707 
__IO
 
uöt32_t
 
RBAR_A1
;

708 
__IO
 
uöt32_t
 
RASR_A1
;

709 
__IO
 
uöt32_t
 
RBAR_A2
;

710 
__IO
 
uöt32_t
 
RASR_A2
;

711 
__IO
 
uöt32_t
 
RBAR_A3
;

712 
__IO
 
uöt32_t
 
RASR_A3
;

713 } 
	tMPU_Ty≥
;

716 
	#MPU_TYPE_IREGION_Pos
 16

	)

717 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

719 
	#MPU_TYPE_DREGION_Pos
 8

	)

720 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

722 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

723 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

726 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

727 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

729 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

730 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

732 
	#MPU_CTRL_ENABLE_Pos
 0

	)

733 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

736 
	#MPU_RNR_REGION_Pos
 0

	)

737 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

740 
	#MPU_RBAR_ADDR_Pos
 5

	)

741 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

743 
	#MPU_RBAR_VALID_Pos
 4

	)

744 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

746 
	#MPU_RBAR_REGION_Pos
 0

	)

747 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

750 
	#MPU_RASR_ATTRS_Pos
 16

	)

751 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

753 
	#MPU_RASR_SRD_Pos
 8

	)

754 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

756 
	#MPU_RASR_SIZE_Pos
 1

	)

757 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

759 
	#MPU_RASR_ENABLE_Pos
 0

	)

760 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

766 #i‡(
__FPU_PRESENT
 == 1)

777 
uöt32_t
 
RESERVED0
[1];

778 
__IO
 
uöt32_t
 
FPCCR
;

779 
__IO
 
uöt32_t
 
FPCAR
;

780 
__IO
 
uöt32_t
 
FPDSCR
;

781 
__I
 
uöt32_t
 
MVFR0
;

782 
__I
 
uöt32_t
 
MVFR1
;

783 } 
	tFPU_Ty≥
;

786 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

787 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

789 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

790 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

792 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

793 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

795 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

796 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

798 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

799 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

801 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

802 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

804 
	#FPU_FPCCR_THREAD_Pos
 3

	)

805 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

807 
	#FPU_FPCCR_USER_Pos
 1

	)

808 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

810 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

811 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

814 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

815 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

818 
	#FPU_FPDSCR_AHP_Pos
 26

	)

819 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

821 
	#FPU_FPDSCR_DN_Pos
 25

	)

822 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

824 
	#FPU_FPDSCR_FZ_Pos
 24

	)

825 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

827 
	#FPU_FPDSCR_RMode_Pos
 22

	)

828 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

831 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

832 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

834 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

835 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

837 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

838 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

840 
	#FPU_MVFR0_Divide_Pos
 16

	)

841 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

843 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

844 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

846 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

847 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

849 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

850 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

852 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

853 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

856 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

857 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

859 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

860 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

862 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

863 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

865 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

866 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

882 
__IO
 
uöt32_t
 
DHCSR
;

883 
__O
 
uöt32_t
 
DCRSR
;

884 
__IO
 
uöt32_t
 
DCRDR
;

885 
__IO
 
uöt32_t
 
DEMCR
;

886 } 
	tC‹eDebug_Ty≥
;

889 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

890 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

892 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

893 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

895 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

896 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

898 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

899 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

901 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

902 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

904 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

905 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

907 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

908 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

910 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

911 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

913 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

914 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

916 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

917 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

919 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

920 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

922 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

923 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

926 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

927 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

929 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

930 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

933 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

934 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

936 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

937 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

939 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

940 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

942 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

943 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

945 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

946 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

948 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

949 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

951 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

952 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

954 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

955 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

957 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

958 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

960 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

961 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

963 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

964 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

966 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

967 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

969 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

970 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

980 
	#SCS_BASE
 (0xE000E000ULË

	)

981 
	#ITM_BASE
 (0xE0000000ULË

	)

982 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

983 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

984 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

985 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

987 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

988 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

989 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

990 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

991 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

992 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

994 #i‡(
__MPU_PRESENT
 == 1)

995 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

996 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

999 #i‡(
__FPU_PRESENT
 == 1)

1000 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1001 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1037 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1039 
uöt32_t
 
ªg_vÆue
;

1040 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1042 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1043 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1044 
ªg_vÆue
 = (reg_value |

1045 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1046 (
Pri‹ôyGroupTmp
 << 8));

1047 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1058 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1060  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1071 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1074 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1085 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1087 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1100 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1102 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1113 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1115 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1126 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1128 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1139 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1141 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1156 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1158 if(
IRQn
 < 0) {

1159 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1161 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1177 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1180 if(
IRQn
 < 0) {

1181 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1183 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1201 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1203 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1204 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1205 
uöt32_t
 
SubPri‹ôyBôs
;

1207 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1208 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1211 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1212 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1231 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1233 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1234 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1235 
uöt32_t
 
SubPri‹ôyBôs
;

1237 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1238 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1240 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1241 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1249 
__INLINE
 
NVIC_Sy°emRe£t
()

1251 
__DSB
();

1253 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1254 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1255 
SCB_AIRCR_SYSRESETREQ_Msk
);

1256 
__DSB
();

1270 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1281 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1283 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1285 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1286 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1287 
SysTick
->
VAL
 = 0;

1288 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1289 
SysTick_CTRL_TICKINT_Msk
 |

1290 
SysTick_CTRL_ENABLE_Msk
;

1306 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1307 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1319 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1321 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1322 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1323 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1325 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1326 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1328  (
	gch
);

1341 
__INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1342 
öt32_t
 
	gch
 = -1;

1344 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1345 
ch
 = 
ITM_RxBuf„r
;

1346 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1349  (
	gch
);

1361 
__INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1363 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1376 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\core_cm4_simd.h

24 #ifde‡
__˝lu•lus


28 #i‚de‡
__CORE_CM4_SIMD_H


29 
	#__CORE_CM4_SIMD_H


	)

43 #i‡ 
deföed
 ( 
__CC_ARM
 )

47 
	#__SADD8
 
__ßdd8


	)

48 
	#__QADD8
 
__qadd8


	)

49 
	#__SHADD8
 
__shadd8


	)

50 
	#__UADD8
 
__uadd8


	)

51 
	#__UQADD8
 
__uqadd8


	)

52 
	#__UHADD8
 
__uhadd8


	)

53 
	#__SSUB8
 
__ssub8


	)

54 
	#__QSUB8
 
__qsub8


	)

55 
	#__SHSUB8
 
__shsub8


	)

56 
	#__USUB8
 
__usub8


	)

57 
	#__UQSUB8
 
__uqsub8


	)

58 
	#__UHSUB8
 
__uhsub8


	)

59 
	#__SADD16
 
__ßdd16


	)

60 
	#__QADD16
 
__qadd16


	)

61 
	#__SHADD16
 
__shadd16


	)

62 
	#__UADD16
 
__uadd16


	)

63 
	#__UQADD16
 
__uqadd16


	)

64 
	#__UHADD16
 
__uhadd16


	)

65 
	#__SSUB16
 
__ssub16


	)

66 
	#__QSUB16
 
__qsub16


	)

67 
	#__SHSUB16
 
__shsub16


	)

68 
	#__USUB16
 
__usub16


	)

69 
	#__UQSUB16
 
__uqsub16


	)

70 
	#__UHSUB16
 
__uhsub16


	)

71 
	#__SASX
 
__ßsx


	)

72 
	#__QASX
 
__qasx


	)

73 
	#__SHASX
 
__shasx


	)

74 
	#__UASX
 
__uasx


	)

75 
	#__UQASX
 
__uqasx


	)

76 
	#__UHASX
 
__uhasx


	)

77 
	#__SSAX
 
__sßx


	)

78 
	#__QSAX
 
__qßx


	)

79 
	#__SHSAX
 
__shßx


	)

80 
	#__USAX
 
__ußx


	)

81 
	#__UQSAX
 
__uqßx


	)

82 
	#__UHSAX
 
__uhßx


	)

83 
	#__USAD8
 
__ußd8


	)

84 
	#__USADA8
 
__ußda8


	)

85 
	#__SSAT16
 
__sßt16


	)

86 
	#__USAT16
 
__ußt16


	)

87 
	#__UXTB16
 
__uxtb16


	)

88 
	#__UXTAB16
 
__uxèb16


	)

89 
	#__SXTB16
 
__sxtb16


	)

90 
	#__SXTAB16
 
__sxèb16


	)

91 
	#__SMUAD
 
__smuad


	)

92 
	#__SMUADX
 
__smuadx


	)

93 
	#__SMLAD
 
__smœd


	)

94 
	#__SMLADX
 
__smœdx


	)

95 
	#__SMLALD
 
__smœld


	)

96 
	#__SMLALDX
 
__smœldx


	)

97 
	#__SMUSD
 
__smusd


	)

98 
	#__SMUSDX
 
__smusdx


	)

99 
	#__SMLSD
 
__smlsd


	)

100 
	#__SMLSDX
 
__smlsdx


	)

101 
	#__SMLSLD
 
__sml¶d


	)

102 
	#__SMLSLDX
 
__sml¶dx


	)

103 
	#__SEL
 
__£l


	)

104 
	#__QADD
 
__qadd


	)

105 
	#__QSUB
 
__qsub


	)

107 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

108 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

110 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

111 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

118 #ñi‡
deföed
 ( 
__ICCARM__
 )

121 
	~<cmsis_ür.h
>

190 #ñi‡
deföed
 ( 
__GNUC__
 )

194 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

196 
uöt32_t
 
ªsu…
;

198 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

199 (
ªsu…
);

200 
	}
}

202 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

204 
uöt32_t
 
ªsu…
;

206 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

207 (
ªsu…
);

208 
	}
}

210 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

212 
uöt32_t
 
ªsu…
;

214 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

215 (
ªsu…
);

216 
	}
}

218 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

220 
uöt32_t
 
ªsu…
;

222 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

223 (
ªsu…
);

224 
	}
}

226 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

228 
uöt32_t
 
ªsu…
;

230 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

231 (
ªsu…
);

232 
	}
}

234 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

236 
uöt32_t
 
ªsu…
;

238 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

239 (
ªsu…
);

240 
	}
}

243 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

245 
uöt32_t
 
ªsu…
;

247 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

248 (
ªsu…
);

249 
	}
}

251 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

253 
uöt32_t
 
ªsu…
;

255 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

256 (
ªsu…
);

257 
	}
}

259 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

261 
uöt32_t
 
ªsu…
;

263 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

264 (
ªsu…
);

265 
	}
}

267 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

269 
uöt32_t
 
ªsu…
;

271 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

272 (
ªsu…
);

273 
	}
}

275 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

277 
uöt32_t
 
ªsu…
;

279 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

280 (
ªsu…
);

281 
	}
}

283 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

285 
uöt32_t
 
ªsu…
;

287 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

288 (
ªsu…
);

289 
	}
}

292 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

294 
uöt32_t
 
ªsu…
;

296 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

297 (
ªsu…
);

298 
	}
}

300 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

302 
uöt32_t
 
ªsu…
;

304 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

305 (
ªsu…
);

306 
	}
}

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

310 
uöt32_t
 
ªsu…
;

312 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

313 (
ªsu…
);

314 
	}
}

316 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

318 
uöt32_t
 
ªsu…
;

320 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

321 (
ªsu…
);

322 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

326 
uöt32_t
 
ªsu…
;

328 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

329 (
ªsu…
);

330 
	}
}

332 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

334 
uöt32_t
 
ªsu…
;

336 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

337 (
ªsu…
);

338 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

345 (
ªsu…
);

346 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

353 (
ªsu…
);

354 
	}
}

356 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

361 (
ªsu…
);

362 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

369 (
ªsu…
);

370 
	}
}

372 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

374 
uöt32_t
 
ªsu…
;

376 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

377 (
ªsu…
);

378 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

385 (
ªsu…
);

386 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

393 (
ªsu…
);

394 
	}
}

396 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

398 
uöt32_t
 
ªsu…
;

400 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

401 (
ªsu…
);

402 
	}
}

404 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

406 
uöt32_t
 
ªsu…
;

408 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

409 (
ªsu…
);

410 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

417 (
ªsu…
);

418 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

422 
uöt32_t
 
ªsu…
;

424 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

425 (
ªsu…
);

426 
	}
}

428 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

430 
uöt32_t
 
ªsu…
;

432 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

433 (
ªsu…
);

434 
	}
}

436 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

438 
uöt32_t
 
ªsu…
;

440 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

441 (
ªsu…
);

442 
	}
}

444 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

446 
uöt32_t
 
ªsu…
;

448 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

449 (
ªsu…
);

450 
	}
}

452 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

454 
uöt32_t
 
ªsu…
;

456 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

457 (
ªsu…
);

458 
	}
}

460 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

462 
uöt32_t
 
ªsu…
;

464 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

465 (
ªsu…
);

466 
	}
}

468 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

470 
uöt32_t
 
ªsu…
;

472 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

473 (
ªsu…
);

474 
	}
}

476 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

478 
uöt32_t
 
ªsu…
;

480 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

481 (
ªsu…
);

482 
	}
}

484 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

486 
uöt32_t
 
ªsu…
;

488 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

489 (
ªsu…
);

490 
	}
}

492 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

494 
uöt32_t
 
ªsu…
;

496 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

497 (
ªsu…
);

498 
	}
}

500 
	#__SSAT16
(
ARG1
,
ARG2
) \

502 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

503 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

504 
__RES
; \

505 })

	)

507 
	#__USAT16
(
ARG1
,
ARG2
) \

509 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

510 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

511 
__RES
; \

512 })

	)

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

516 
uöt32_t
 
ªsu…
;

518 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

519 (
ªsu…
);

520 
	}
}

522 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

524 
uöt32_t
 
ªsu…
;

526 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

527 (
ªsu…
);

528 
	}
}

530 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

532 
uöt32_t
 
ªsu…
;

534 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

535 (
ªsu…
);

536 
	}
}

538 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

540 
uöt32_t
 
ªsu…
;

542 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

543 (
ªsu…
);

544 
	}
}

546 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

548 
uöt32_t
 
ªsu…
;

550 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

551 (
ªsu…
);

552 
	}
}

554 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

556 
uöt32_t
 
ªsu…
;

558 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

559 (
ªsu…
);

560 
	}
}

562 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

564 
uöt32_t
 
ªsu…
;

566 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

567 (
ªsu…
);

568 
	}
}

570 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

572 
uöt32_t
 
ªsu…
;

574 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

575 (
ªsu…
);

576 
	}
}

578 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
) \

580 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

581 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

582 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

583 })

	)

585 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
) \

587 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

588 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

589 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

590 })

	)

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

594 
uöt32_t
 
ªsu…
;

596 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

597 (
ªsu…
);

598 
	}
}

600 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

602 
uöt32_t
 
ªsu…
;

604 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

605 (
ªsu…
);

606 
	}
}

608 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

610 
uöt32_t
 
ªsu…
;

612 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

613 (
ªsu…
);

614 
	}
}

616 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

618 
uöt32_t
 
ªsu…
;

620 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

621 (
ªsu…
);

622 
	}
}

624 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
) \

626 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

627 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

628 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

629 })

	)

631 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
) \

633 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

634 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

635 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

636 })

	)

638 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

640 
uöt32_t
 
ªsu…
;

642 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

643 (
ªsu…
);

644 
	}
}

646 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

648 
uöt32_t
 
ªsu…
;

650 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

651 (
ªsu…
);

652 
	}
}

654 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

656 
uöt32_t
 
ªsu…
;

658 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

659 (
ªsu…
);

660 
	}
}

662 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

664 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

665 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

666 
__RES
; \

667 })

	)

669 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

671 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

672 i‡(
ARG3
 == 0) \

673 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

675 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

676 
__RES
; \

677 })

	)

683 #ñi‡
deföed
 ( 
__TASKING__
 )

699 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\core_cmFunc.h

24 #i‚de‡
__CORE_CMFUNC_H


25 
	#__CORE_CMFUNC_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

50 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

52 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

53 (
__ªgC⁄åﬁ
);

54 
	}
}

63 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

65 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

66 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

67 
	}
}

76 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

78 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

79 (
__ªgIPSR
);

80 
	}
}

89 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

91 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

92 (
__ªgAPSR
);

93 
	}
}

102 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

104 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

105 (
__ªgXPSR
);

106 
	}
}

115 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

117 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

118 (
__ªgPro˚ssSèckPoöãr
);

119 
	}
}

128 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

130 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

131 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

132 
	}
}

141 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

154 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

156 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

157 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

158 
	}
}

167 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

169 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

170 (
__ªgPriMask
);

171 
	}
}

180 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

182 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

183 
__ªgPriMask
 = (
¥iMask
);

184 
	}
}

187 #i‡ (
__CORTEX_M
 >= 0x03)

194 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

202 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

211 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

213 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

214 (
__ªgBa£Pri
);

215 
	}
}

224 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

226 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

227 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

228 
	}
}

237 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

239 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

240 (
__ªgFau…Mask
);

241 
	}
}

250 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

252 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

253 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

254 
	}
}

259 #i‡ (
__CORTEX_M
 == 0x04)

267 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

269 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

270 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

271 (
__ªgÂs¸
);

275 
	}
}

284 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

286 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

287 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

288 
__ªgÂs¸
 = (
Âs¸
);

290 
	}
}

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

300 #ñi‡
deföed
 ( 
__GNUC__
 )

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_úq
()

310 
__ASM
 volatile ("cpsie i");

311 
	}
}

319 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_úq
()

321 
__ASM
 volatile ("cpsid i");

322 
	}
}

331 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

333 
uöt32_t
 
ªsu…
;

335 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

336 (
ªsu…
);

337 
	}
}

346 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

348 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

349 
	}
}

358 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

360 
uöt32_t
 
ªsu…
;

362 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

363 (
ªsu…
);

364 
	}
}

373 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

375 
uöt32_t
 
ªsu…
;

377 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

378 (
ªsu…
);

379 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

393 (
ªsu…
);

394 
	}
}

403 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

405 
uöt32_t
 
ªsu…
;

407 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

408 (
ªsu…
);

409 
	}
}

418 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

420 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) );

421 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

432 
uöt32_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

435 (
ªsu…
);

436 
	}
}

445 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

447 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) );

448 
	}
}

457 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

459 
uöt32_t
 
ªsu…
;

461 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

462 (
ªsu…
);

463 
	}
}

472 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

474 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

475 
	}
}

478 #i‡ (
__CORTEX_M
 >= 0x03)

485 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_Áu…_úq
()

487 
__ASM
 volatile ("cpsie f");

488 
	}
}

496 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_Áu…_úq
()

498 
__ASM
 volatile ("cpsid f");

499 
	}
}

508 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

510 
uöt32_t
 
ªsu…
;

512 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

513 (
ªsu…
);

514 
	}
}

523 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

525 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

526 
	}
}

535 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

537 
uöt32_t
 
ªsu…
;

539 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

540 (
ªsu…
);

541 
	}
}

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

552 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

553 
	}
}

558 #i‡ (
__CORTEX_M
 == 0x04)

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

568 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

569 
uöt32_t
 
ªsu…
;

571 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

572 (
ªsu…
);

576 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

587 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

588 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) );

590 
	}
}

595 #ñi‡
deföed
 ( 
__TASKING__
 )

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\core_cmInstr.h

24 #i‚de‡
__CORE_CMINSTR_H


25 
	#__CORE_CMINSTR_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

46 
	#__NOP
 
__n›


	)

54 
	#__WFI
 
__wfi


	)

62 
	#__WFE
 
__w„


	)

69 
	#__SEV
 
__£v


	)

78 
	#__ISB
(Ë
	`__isb
(0xF)

	)

86 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

94 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

104 
	#__REV
 
__ªv


	)

114 
__INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡ (
__CORTEX_M
 >= 0x03)

144 
	#__RBIT
 
__rbô


	)

154 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

164 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

174 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

186 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

198 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

210 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

218 
	#__CLREX
 
__˛ªx


	)

229 
	#__SSAT
 
__sßt


	)

240 
	#__USAT
 
__ußt


	)

250 
	#__CLZ
 
__˛z


	)

256 #ñi‡
deföed
 ( 
__ICCARM__
 )

259 
	~<cmsis_ür.h
>

262 #ñi‡
deföed
 ( 
__GNUC__
 )

269 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__NOP
()

271 
__ASM
 volatile ("nop");

272 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFI
()

282 
__ASM
 volatile ("wfi");

283 
	}
}

291 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFE
()

293 
__ASM
 volatile ("wfe");

294 
	}
}

301 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__SEV
()

303 
__ASM
 volatile ("sev");

304 
	}
}

313 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__ISB
()

315 
__ASM
 volatile ("isb");

316 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DSB
()

326 
__ASM
 volatile ("dsb");

327 
	}
}

335 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DMB
()

337 
__ASM
 volatile ("dmb");

338 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

353 (
ªsu…
);

354 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

369 (
ªsu…
);

370 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

385 (
ªsu…
);

386 
	}
}

389 #i‡ (
__CORTEX_M
 >= 0x03)

398 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

400 
uöt32_t
 
ªsu…
;

402 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

403 (
ªsu…
);

404 
	}
}

414 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

416 
uöt8_t
 
ªsu…
;

418 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

419 (
ªsu…
);

420 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

432 
uöt16_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

435 (
ªsu…
);

436 
	}
}

446 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

448 
uöt32_t
 
ªsu…
;

450 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

451 (
ªsu…
);

452 
	}
}

464 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

466 
uöt32_t
 
ªsu…
;

468 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

469 (
ªsu…
);

470 
	}
}

482 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

484 
uöt32_t
 
ªsu…
;

486 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

487 (
ªsu…
);

488 
	}
}

500 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

502 
uöt32_t
 
ªsu…
;

504 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

505 (
ªsu…
);

506 
	}
}

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__CLREX
()

516 
__ASM
 volatile ("clrex");

517 
	}
}

528 
	#__SSAT
(
ARG1
,
ARG2
) \

530 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

531 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

532 
__RES
; \

533 })

	)

544 
	#__USAT
(
ARG1
,
ARG2
) \

546 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

547 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

548 
__RES
; \

549 })

	)

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

561 
uöt8_t
 
ªsu…
;

563 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

564 (
ªsu…
);

565 
	}
}

572 #ñi‡
deföed
 ( 
__TASKING__
 )

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\main.h

39 #i‚de‡
__MAIN_H


40 
	#__MAIN_H


	)

43 
	~"°m32f4xx_hÆ.h
"

44 
	~"°m32f4xx_nu˛eo.h
"

51 
	#TIMx
 
TIM3


	)

52 
	#TIMx_CLK_ENABLE
 
__HAL_RCC_TIM3_CLK_ENABLE


	)

55 
	#TIMx_CHANNEL_GPIO_PORT
(Ë
	`__HAL_RCC_GPIOB_CLK_ENABLE
()

	)

56 
	#GPIO_PIN_CHANNEL1
 
GPIO_PIN_4


	)

57 
	#GPIO_PIN_CHANNEL2
 
GPIO_PIN_5


	)

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\stm32f401xe.h

52 #i‚de‡
__STM32F401xE_H


53 
	#__STM32F401xE_H


	)

55 #ifde‡
__˝lu•lus


67 
	#__CM4_REV
 0x0001

	)

68 
	#__MPU_PRESENT
 0

	)

69 
	#__NVIC_PRIO_BITS
 4

	)

70 
	#__Víd‹_SysTickC⁄fig
 0

	)

71 
	#__FPU_PRESENT
 1

	)

88 
N⁄MaskabÀI¡_IRQn
 = -14,

89 
Mem‹yM™agemít_IRQn
 = -12,

90 
BusFau…_IRQn
 = -11,

91 
UßgeFau…_IRQn
 = -10,

92 
SVCÆl_IRQn
 = -5,

93 
DebugM⁄ô‹_IRQn
 = -4,

94 
PídSV_IRQn
 = -2,

95 
SysTick_IRQn
 = -1,

97 
WWDG_IRQn
 = 0,

98 
PVD_IRQn
 = 1,

99 
TAMP_STAMP_IRQn
 = 2,

100 
RTC_WKUP_IRQn
 = 3,

101 
FLASH_IRQn
 = 4,

102 
RCC_IRQn
 = 5,

103 
EXTI0_IRQn
 = 6,

104 
EXTI1_IRQn
 = 7,

105 
EXTI2_IRQn
 = 8,

106 
EXTI3_IRQn
 = 9,

107 
EXTI4_IRQn
 = 10,

108 
DMA1_Såóm0_IRQn
 = 11,

109 
DMA1_Såóm1_IRQn
 = 12,

110 
DMA1_Såóm2_IRQn
 = 13,

111 
DMA1_Såóm3_IRQn
 = 14,

112 
DMA1_Såóm4_IRQn
 = 15,

113 
DMA1_Såóm5_IRQn
 = 16,

114 
DMA1_Såóm6_IRQn
 = 17,

115 
ADC_IRQn
 = 18,

116 
EXTI9_5_IRQn
 = 23,

117 
TIM1_BRK_TIM9_IRQn
 = 24,

118 
TIM1_UP_TIM10_IRQn
 = 25,

119 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

120 
TIM1_CC_IRQn
 = 27,

121 
TIM2_IRQn
 = 28,

122 
TIM3_IRQn
 = 29,

123 
TIM4_IRQn
 = 30,

124 
I2C1_EV_IRQn
 = 31,

125 
I2C1_ER_IRQn
 = 32,

126 
I2C2_EV_IRQn
 = 33,

127 
I2C2_ER_IRQn
 = 34,

128 
SPI1_IRQn
 = 35,

129 
SPI2_IRQn
 = 36,

130 
USART1_IRQn
 = 37,

131 
USART2_IRQn
 = 38,

132 
EXTI15_10_IRQn
 = 40,

133 
RTC_Aœrm_IRQn
 = 41,

134 
OTG_FS_WKUP_IRQn
 = 42,

135 
DMA1_Såóm7_IRQn
 = 47,

136 
SDIO_IRQn
 = 49,

137 
TIM5_IRQn
 = 50,

138 
SPI3_IRQn
 = 51,

139 
DMA2_Såóm0_IRQn
 = 56,

140 
DMA2_Såóm1_IRQn
 = 57,

141 
DMA2_Såóm2_IRQn
 = 58,

142 
DMA2_Såóm3_IRQn
 = 59,

143 
DMA2_Såóm4_IRQn
 = 60,

144 
OTG_FS_IRQn
 = 67,

145 
DMA2_Såóm5_IRQn
 = 68,

146 
DMA2_Såóm6_IRQn
 = 69,

147 
DMA2_Såóm7_IRQn
 = 70,

148 
USART6_IRQn
 = 71,

149 
I2C3_EV_IRQn
 = 72,

150 
I2C3_ER_IRQn
 = 73,

151 
FPU_IRQn
 = 81,

152 
SPI4_IRQn
 = 84

153 } 
	tIRQn_Ty≥
;

159 
	~"c‹e_cm4.h
"

160 
	~"sy°em_°m32f4xx.h
"

161 
	~<°döt.h
>

173 
__IO
 
uöt32_t
 
SR
;

174 
__IO
 
uöt32_t
 
CR1
;

175 
__IO
 
uöt32_t
 
CR2
;

176 
__IO
 
uöt32_t
 
SMPR1
;

177 
__IO
 
uöt32_t
 
SMPR2
;

178 
__IO
 
uöt32_t
 
JOFR1
;

179 
__IO
 
uöt32_t
 
JOFR2
;

180 
__IO
 
uöt32_t
 
JOFR3
;

181 
__IO
 
uöt32_t
 
JOFR4
;

182 
__IO
 
uöt32_t
 
HTR
;

183 
__IO
 
uöt32_t
 
LTR
;

184 
__IO
 
uöt32_t
 
SQR1
;

185 
__IO
 
uöt32_t
 
SQR2
;

186 
__IO
 
uöt32_t
 
SQR3
;

187 
__IO
 
uöt32_t
 
JSQR
;

188 
__IO
 
uöt32_t
 
JDR1
;

189 
__IO
 
uöt32_t
 
JDR2
;

190 
__IO
 
uöt32_t
 
JDR3
;

191 
__IO
 
uöt32_t
 
JDR4
;

192 
__IO
 
uöt32_t
 
DR
;

193 } 
	tADC_Ty≥Def
;

197 
__IO
 
uöt32_t
 
CSR
;

198 
__IO
 
uöt32_t
 
CCR
;

199 
__IO
 
uöt32_t
 
CDR
;

201 } 
	tADC_Comm⁄_Ty≥Def
;

209 
__IO
 
uöt32_t
 
DR
;

210 
__IO
 
uöt8_t
 
IDR
;

211 
uöt8_t
 
RESERVED0
;

212 
uöt16_t
 
RESERVED1
;

213 
__IO
 
uöt32_t
 
CR
;

214 } 
	tCRC_Ty≥Def
;

222 
__IO
 
uöt32_t
 
IDCODE
;

223 
__IO
 
uöt32_t
 
CR
;

224 
__IO
 
uöt32_t
 
APB1FZ
;

225 
__IO
 
uöt32_t
 
APB2FZ
;

226 }
	tDBGMCU_Ty≥Def
;

235 
__IO
 
uöt32_t
 
CR
;

236 
__IO
 
uöt32_t
 
NDTR
;

237 
__IO
 
uöt32_t
 
PAR
;

238 
__IO
 
uöt32_t
 
M0AR
;

239 
__IO
 
uöt32_t
 
M1AR
;

240 
__IO
 
uöt32_t
 
FCR
;

241 } 
	tDMA_Såóm_Ty≥Def
;

245 
__IO
 
uöt32_t
 
LISR
;

246 
__IO
 
uöt32_t
 
HISR
;

247 
__IO
 
uöt32_t
 
LIFCR
;

248 
__IO
 
uöt32_t
 
HIFCR
;

249 } 
	tDMA_Ty≥Def
;

258 
__IO
 
uöt32_t
 
IMR
;

259 
__IO
 
uöt32_t
 
EMR
;

260 
__IO
 
uöt32_t
 
RTSR
;

261 
__IO
 
uöt32_t
 
FTSR
;

262 
__IO
 
uöt32_t
 
SWIER
;

263 
__IO
 
uöt32_t
 
PR
;

264 } 
	tEXTI_Ty≥Def
;

272 
__IO
 
uöt32_t
 
ACR
;

273 
__IO
 
uöt32_t
 
KEYR
;

274 
__IO
 
uöt32_t
 
OPTKEYR
;

275 
__IO
 
uöt32_t
 
SR
;

276 
__IO
 
uöt32_t
 
CR
;

277 
__IO
 
uöt32_t
 
OPTCR
;

278 
__IO
 
uöt32_t
 
OPTCR1
;

279 } 
	tFLASH_Ty≥Def
;

287 
__IO
 
uöt32_t
 
MODER
;

288 
__IO
 
uöt32_t
 
OTYPER
;

289 
__IO
 
uöt32_t
 
OSPEEDR
;

290 
__IO
 
uöt32_t
 
PUPDR
;

291 
__IO
 
uöt32_t
 
IDR
;

292 
__IO
 
uöt32_t
 
ODR
;

293 
__IO
 
uöt32_t
 
BSRR
;

294 
__IO
 
uöt32_t
 
LCKR
;

295 
__IO
 
uöt32_t
 
AFR
[2];

296 } 
	tGPIO_Ty≥Def
;

304 
__IO
 
uöt32_t
 
MEMRMP
;

305 
__IO
 
uöt32_t
 
PMC
;

306 
__IO
 
uöt32_t
 
EXTICR
[4];

307 
uöt32_t
 
RESERVED
[2];

308 
__IO
 
uöt32_t
 
CMPCR
;

309 } 
	tSYSCFG_Ty≥Def
;

317 
__IO
 
uöt32_t
 
CR1
;

318 
__IO
 
uöt32_t
 
CR2
;

319 
__IO
 
uöt32_t
 
OAR1
;

320 
__IO
 
uöt32_t
 
OAR2
;

321 
__IO
 
uöt32_t
 
DR
;

322 
__IO
 
uöt32_t
 
SR1
;

323 
__IO
 
uöt32_t
 
SR2
;

324 
__IO
 
uöt32_t
 
CCR
;

325 
__IO
 
uöt32_t
 
TRISE
;

326 
__IO
 
uöt32_t
 
FLTR
;

327 } 
	tI2C_Ty≥Def
;

335 
__IO
 
uöt32_t
 
KR
;

336 
__IO
 
uöt32_t
 
PR
;

337 
__IO
 
uöt32_t
 
RLR
;

338 
__IO
 
uöt32_t
 
SR
;

339 } 
	tIWDG_Ty≥Def
;

347 
__IO
 
uöt32_t
 
CR
;

348 
__IO
 
uöt32_t
 
CSR
;

349 } 
	tPWR_Ty≥Def
;

357 
__IO
 
uöt32_t
 
CR
;

358 
__IO
 
uöt32_t
 
PLLCFGR
;

359 
__IO
 
uöt32_t
 
CFGR
;

360 
__IO
 
uöt32_t
 
CIR
;

361 
__IO
 
uöt32_t
 
AHB1RSTR
;

362 
__IO
 
uöt32_t
 
AHB2RSTR
;

363 
__IO
 
uöt32_t
 
AHB3RSTR
;

364 
uöt32_t
 
RESERVED0
;

365 
__IO
 
uöt32_t
 
APB1RSTR
;

366 
__IO
 
uöt32_t
 
APB2RSTR
;

367 
uöt32_t
 
RESERVED1
[2];

368 
__IO
 
uöt32_t
 
AHB1ENR
;

369 
__IO
 
uöt32_t
 
AHB2ENR
;

370 
__IO
 
uöt32_t
 
AHB3ENR
;

371 
uöt32_t
 
RESERVED2
;

372 
__IO
 
uöt32_t
 
APB1ENR
;

373 
__IO
 
uöt32_t
 
APB2ENR
;

374 
uöt32_t
 
RESERVED3
[2];

375 
__IO
 
uöt32_t
 
AHB1LPENR
;

376 
__IO
 
uöt32_t
 
AHB2LPENR
;

377 
__IO
 
uöt32_t
 
AHB3LPENR
;

378 
uöt32_t
 
RESERVED4
;

379 
__IO
 
uöt32_t
 
APB1LPENR
;

380 
__IO
 
uöt32_t
 
APB2LPENR
;

381 
uöt32_t
 
RESERVED5
[2];

382 
__IO
 
uöt32_t
 
BDCR
;

383 
__IO
 
uöt32_t
 
CSR
;

384 
uöt32_t
 
RESERVED6
[2];

385 
__IO
 
uöt32_t
 
SSCGR
;

386 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

388 } 
	tRCC_Ty≥Def
;

396 
__IO
 
uöt32_t
 
TR
;

397 
__IO
 
uöt32_t
 
DR
;

398 
__IO
 
uöt32_t
 
CR
;

399 
__IO
 
uöt32_t
 
ISR
;

400 
__IO
 
uöt32_t
 
PRER
;

401 
__IO
 
uöt32_t
 
WUTR
;

402 
__IO
 
uöt32_t
 
CALIBR
;

403 
__IO
 
uöt32_t
 
ALRMAR
;

404 
__IO
 
uöt32_t
 
ALRMBR
;

405 
__IO
 
uöt32_t
 
WPR
;

406 
__IO
 
uöt32_t
 
SSR
;

407 
__IO
 
uöt32_t
 
SHIFTR
;

408 
__IO
 
uöt32_t
 
TSTR
;

409 
__IO
 
uöt32_t
 
TSDR
;

410 
__IO
 
uöt32_t
 
TSSSR
;

411 
__IO
 
uöt32_t
 
CALR
;

412 
__IO
 
uöt32_t
 
TAFCR
;

413 
__IO
 
uöt32_t
 
ALRMASSR
;

414 
__IO
 
uöt32_t
 
ALRMBSSR
;

415 
uöt32_t
 
RESERVED7
;

416 
__IO
 
uöt32_t
 
BKP0R
;

417 
__IO
 
uöt32_t
 
BKP1R
;

418 
__IO
 
uöt32_t
 
BKP2R
;

419 
__IO
 
uöt32_t
 
BKP3R
;

420 
__IO
 
uöt32_t
 
BKP4R
;

421 
__IO
 
uöt32_t
 
BKP5R
;

422 
__IO
 
uöt32_t
 
BKP6R
;

423 
__IO
 
uöt32_t
 
BKP7R
;

424 
__IO
 
uöt32_t
 
BKP8R
;

425 
__IO
 
uöt32_t
 
BKP9R
;

426 
__IO
 
uöt32_t
 
BKP10R
;

427 
__IO
 
uöt32_t
 
BKP11R
;

428 
__IO
 
uöt32_t
 
BKP12R
;

429 
__IO
 
uöt32_t
 
BKP13R
;

430 
__IO
 
uöt32_t
 
BKP14R
;

431 
__IO
 
uöt32_t
 
BKP15R
;

432 
__IO
 
uöt32_t
 
BKP16R
;

433 
__IO
 
uöt32_t
 
BKP17R
;

434 
__IO
 
uöt32_t
 
BKP18R
;

435 
__IO
 
uöt32_t
 
BKP19R
;

436 } 
	tRTC_Ty≥Def
;

445 
__IO
 
uöt32_t
 
POWER
;

446 
__IO
 
uöt32_t
 
CLKCR
;

447 
__IO
 
uöt32_t
 
ARG
;

448 
__IO
 
uöt32_t
 
CMD
;

449 
__I
 
uöt32_t
 
RESPCMD
;

450 
__I
 
uöt32_t
 
RESP1
;

451 
__I
 
uöt32_t
 
RESP2
;

452 
__I
 
uöt32_t
 
RESP3
;

453 
__I
 
uöt32_t
 
RESP4
;

454 
__IO
 
uöt32_t
 
DTIMER
;

455 
__IO
 
uöt32_t
 
DLEN
;

456 
__IO
 
uöt32_t
 
DCTRL
;

457 
__I
 
uöt32_t
 
DCOUNT
;

458 
__I
 
uöt32_t
 
STA
;

459 
__IO
 
uöt32_t
 
ICR
;

460 
__IO
 
uöt32_t
 
MASK
;

461 
uöt32_t
 
RESERVED0
[2];

462 
__I
 
uöt32_t
 
FIFOCNT
;

463 
uöt32_t
 
RESERVED1
[13];

464 
__IO
 
uöt32_t
 
FIFO
;

465 } 
	tSDIO_Ty≥Def
;

473 
__IO
 
uöt32_t
 
CR1
;

474 
__IO
 
uöt32_t
 
CR2
;

475 
__IO
 
uöt32_t
 
SR
;

476 
__IO
 
uöt32_t
 
DR
;

477 
__IO
 
uöt32_t
 
CRCPR
;

478 
__IO
 
uöt32_t
 
RXCRCR
;

479 
__IO
 
uöt32_t
 
TXCRCR
;

480 
__IO
 
uöt32_t
 
I2SCFGR
;

481 
__IO
 
uöt32_t
 
I2SPR
;

482 } 
	tSPI_Ty≥Def
;

490 
__IO
 
uöt32_t
 
CR1
;

491 
__IO
 
uöt32_t
 
CR2
;

492 
__IO
 
uöt32_t
 
SMCR
;

493 
__IO
 
uöt32_t
 
DIER
;

494 
__IO
 
uöt32_t
 
SR
;

495 
__IO
 
uöt32_t
 
EGR
;

496 
__IO
 
uöt32_t
 
CCMR1
;

497 
__IO
 
uöt32_t
 
CCMR2
;

498 
__IO
 
uöt32_t
 
CCER
;

499 
__IO
 
uöt32_t
 
CNT
;

500 
__IO
 
uöt32_t
 
PSC
;

501 
__IO
 
uöt32_t
 
ARR
;

502 
__IO
 
uöt32_t
 
RCR
;

503 
__IO
 
uöt32_t
 
CCR1
;

504 
__IO
 
uöt32_t
 
CCR2
;

505 
__IO
 
uöt32_t
 
CCR3
;

506 
__IO
 
uöt32_t
 
CCR4
;

507 
__IO
 
uöt32_t
 
BDTR
;

508 
__IO
 
uöt32_t
 
DCR
;

509 
__IO
 
uöt32_t
 
DMAR
;

510 
__IO
 
uöt32_t
 
OR
;

511 } 
	tTIM_Ty≥Def
;

519 
__IO
 
uöt32_t
 
SR
;

520 
__IO
 
uöt32_t
 
DR
;

521 
__IO
 
uöt32_t
 
BRR
;

522 
__IO
 
uöt32_t
 
CR1
;

523 
__IO
 
uöt32_t
 
CR2
;

524 
__IO
 
uöt32_t
 
CR3
;

525 
__IO
 
uöt32_t
 
GTPR
;

526 } 
	tUSART_Ty≥Def
;

534 
__IO
 
uöt32_t
 
CR
;

535 
__IO
 
uöt32_t
 
CFR
;

536 
__IO
 
uöt32_t
 
SR
;

537 } 
	tWWDG_Ty≥Def
;

544 
__IO
 
uöt32_t
 
GOTGCTL
;

545 
__IO
 
uöt32_t
 
GOTGINT
;

546 
__IO
 
uöt32_t
 
GAHBCFG
;

547 
__IO
 
uöt32_t
 
GUSBCFG
;

548 
__IO
 
uöt32_t
 
GRSTCTL
;

549 
__IO
 
uöt32_t
 
GINTSTS
;

550 
__IO
 
uöt32_t
 
GINTMSK
;

551 
__IO
 
uöt32_t
 
GRXSTSR
;

552 
__IO
 
uöt32_t
 
GRXSTSP
;

553 
__IO
 
uöt32_t
 
GRXFSIZ
;

554 
__IO
 
uöt32_t
 
DIEPTXF0_HNPTXFSIZ
;

555 
__IO
 
uöt32_t
 
HNPTXSTS
;

556 
uöt32_t
 
Re£rved30
[2];

557 
__IO
 
uöt32_t
 
GCCFG
;

558 
__IO
 
uöt32_t
 
CID
;

559 
uöt32_t
 
Re£rved40
[48];

560 
__IO
 
uöt32_t
 
HPTXFSIZ
;

561 
__IO
 
uöt32_t
 
DIEPTXF
[0x0F];

563 
	tUSB_OTG_GlobÆTy≥Def
;

572 
__IO
 
uöt32_t
 
DCFG
;

573 
__IO
 
uöt32_t
 
DCTL
;

574 
__IO
 
uöt32_t
 
DSTS
;

575 
uöt32_t
 
Re£rved0C
;

576 
__IO
 
uöt32_t
 
DIEPMSK
;

577 
__IO
 
uöt32_t
 
DOEPMSK
;

578 
__IO
 
uöt32_t
 
DAINT
;

579 
__IO
 
uöt32_t
 
DAINTMSK
;

580 
uöt32_t
 
Re£rved20
;

581 
uöt32_t
 
Re£rved9
;

582 
__IO
 
uöt32_t
 
DVBUSDIS
;

583 
__IO
 
uöt32_t
 
DVBUSPULSE
;

584 
__IO
 
uöt32_t
 
DTHRCTL
;

585 
__IO
 
uöt32_t
 
DIEPEMPMSK
;

586 
__IO
 
uöt32_t
 
DEACHINT
;

587 
__IO
 
uöt32_t
 
DEACHMSK
;

588 
uöt32_t
 
Re£rved40
;

589 
__IO
 
uöt32_t
 
DINEP1MSK
;

590 
uöt32_t
 
Re£rved44
[15];

591 
__IO
 
uöt32_t
 
DOUTEP1MSK
;

593 
	tUSB_OTG_Devi˚Ty≥Def
;

601 
__IO
 
uöt32_t
 
DIEPCTL
;

602 
uöt32_t
 
Re£rved04
;

603 
__IO
 
uöt32_t
 
DIEPINT
;

604 
uöt32_t
 
Re£rved0C
;

605 
__IO
 
uöt32_t
 
DIEPTSIZ
;

606 
__IO
 
uöt32_t
 
DIEPDMA
;

607 
__IO
 
uöt32_t
 
DTXFSTS
;

608 
uöt32_t
 
Re£rved18
;

610 
	tUSB_OTG_INEndpoötTy≥Def
;

618 
__IO
 
uöt32_t
 
DOEPCTL
;

619 
uöt32_t
 
Re£rved04
;

620 
__IO
 
uöt32_t
 
DOEPINT
;

621 
uöt32_t
 
Re£rved0C
;

622 
__IO
 
uöt32_t
 
DOEPTSIZ
;

623 
__IO
 
uöt32_t
 
DOEPDMA
;

624 
uöt32_t
 
Re£rved18
[2];

626 
	tUSB_OTG_OUTEndpoötTy≥Def
;

634 
__IO
 
uöt32_t
 
HCFG
;

635 
__IO
 
uöt32_t
 
HFIR
;

636 
__IO
 
uöt32_t
 
HFNUM
;

637 
uöt32_t
 
Re£rved40C
;

638 
__IO
 
uöt32_t
 
HPTXSTS
;

639 
__IO
 
uöt32_t
 
HAINT
;

640 
__IO
 
uöt32_t
 
HAINTMSK
;

642 
	tUSB_OTG_Ho°Ty≥Def
;

650 
__IO
 
uöt32_t
 
HCCHAR
;

651 
__IO
 
uöt32_t
 
HCSPLT
;

652 
__IO
 
uöt32_t
 
HCINT
;

653 
__IO
 
uöt32_t
 
HCINTMSK
;

654 
__IO
 
uöt32_t
 
HCTSIZ
;

655 
__IO
 
uöt32_t
 
HCDMA
;

656 
uöt32_t
 
Re£rved
[2];

658 
	tUSB_OTG_Ho°Ch™√lTy≥Def
;

664 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

665 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

666 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

667 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

668 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

669 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

670 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

671 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x22380000Ë

	)

672 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

673 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42480000Ë

	)

674 
	#FLASH_END
 ((
uöt32_t
)0x0807FFFFË

	)

677 
	#SRAM_BASE
 
SRAM1_BASE


	)

678 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

682 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

683 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

684 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

685 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

688 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

689 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

690 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

691 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

692 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

693 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

694 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

695 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

696 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

697 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

698 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

699 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

700 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

701 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

702 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

703 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

706 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

707 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

708 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

709 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

710 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

711 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

712 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

713 
	#SPI4_BASE
 (
APB2PERIPH_BASE
 + 0x3400)

	)

714 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

715 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

716 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

717 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

718 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

721 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

722 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

723 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

724 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

725 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

726 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

727 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

728 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

729 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

730 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

731 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

732 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

733 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

734 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

735 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

736 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

737 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

738 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

739 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

740 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

741 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

742 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

743 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

744 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

745 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

746 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

747 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

750 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

753 
	#USB_OTG_FS_PERIPH_BASE
 ((
uöt32_t
 )0x50000000)

	)

755 
	#USB_OTG_GLOBAL_BASE
 ((
uöt32_t
 )0x000)

	)

756 
	#USB_OTG_DEVICE_BASE
 ((
uöt32_t
 )0x800)

	)

757 
	#USB_OTG_IN_ENDPOINT_BASE
 ((
uöt32_t
 )0x900)

	)

758 
	#USB_OTG_OUT_ENDPOINT_BASE
 ((
uöt32_t
 )0xB00)

	)

759 
	#USB_OTG_EP_REG_SIZE
 ((
uöt32_t
 )0x20)

	)

760 
	#USB_OTG_HOST_BASE
 ((
uöt32_t
 )0x400)

	)

761 
	#USB_OTG_HOST_PORT_BASE
 ((
uöt32_t
 )0x440)

	)

762 
	#USB_OTG_HOST_CHANNEL_BASE
 ((
uöt32_t
 )0x500)

	)

763 
	#USB_OTG_HOST_CHANNEL_SIZE
 ((
uöt32_t
 )0x20)

	)

764 
	#USB_OTG_PCGCCTL_BASE
 ((
uöt32_t
 )0xE00)

	)

765 
	#USB_OTG_FIFO_BASE
 ((
uöt32_t
 )0x1000)

	)

766 
	#USB_OTG_FIFO_SIZE
 ((
uöt32_t
 )0x1000)

	)

775 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

776 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

777 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

778 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

779 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

780 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

781 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

782 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

783 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

784 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

785 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

786 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

787 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

788 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

789 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

790 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

791 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

792 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

793 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

794 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

795 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

796 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

797 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

798 
	#SPI4
 ((
SPI_Ty≥Def
 *Ë
SPI4_BASE
)

	)

799 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

800 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

801 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

802 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

803 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

804 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

805 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

806 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

807 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

808 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

809 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

810 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

811 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

812 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

813 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

814 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

815 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

816 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

817 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

818 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

819 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

820 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

821 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

822 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

823 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

824 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

825 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

826 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

827 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

828 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

829 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

830 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

832 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

834 
	#USB_OTG_FS
 ((
USB_OTG_GlobÆTy≥Def
 *Ë
USB_OTG_FS_PERIPH_BASE
)

	)

858 
	#ADC_SR_AWD
 ((
uöt32_t
)0x00000001Ë

	)

859 
	#ADC_SR_EOC
 ((
uöt32_t
)0x00000002Ë

	)

860 
	#ADC_SR_JEOC
 ((
uöt32_t
)0x00000004Ë

	)

861 
	#ADC_SR_JSTRT
 ((
uöt32_t
)0x00000008Ë

	)

862 
	#ADC_SR_STRT
 ((
uöt32_t
)0x00000010Ë

	)

863 
	#ADC_SR_OVR
 ((
uöt32_t
)0x00000020Ë

	)

866 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

867 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

868 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

869 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

870 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

871 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

872 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

873 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

874 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

875 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

876 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

877 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

878 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

879 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

880 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

881 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

882 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

883 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

884 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

885 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

886 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

887 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

888 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

889 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

892 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

893 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

894 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

895 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

896 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

897 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

898 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

899 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

900 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

901 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

902 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

903 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

904 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

905 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

906 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

907 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

908 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

909 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

910 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

911 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

912 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

913 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

914 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

915 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

918 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

919 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

920 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

921 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

922 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

923 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

924 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

925 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

926 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

927 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

928 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

929 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

930 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

931 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

932 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

933 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

934 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

935 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

936 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

937 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

938 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

939 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

940 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

941 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

942 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

943 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

944 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

945 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

946 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

947 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

948 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

949 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

950 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

951 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

952 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

953 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

956 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

957 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

958 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

959 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

960 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

961 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

962 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

963 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

964 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

965 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

966 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

967 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

968 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

969 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

970 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

971 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

972 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

973 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

974 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

975 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

976 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

977 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

978 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

979 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

980 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

981 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

982 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

983 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

984 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

985 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

986 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

987 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

988 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

989 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

990 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

991 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

992 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

993 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

994 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

995 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

998 
	#ADC_JOFR1_JOFFSET1
 ((
uöt32_t
)0x0FFFË

	)

1001 
	#ADC_JOFR2_JOFFSET2
 ((
uöt32_t
)0x0FFFË

	)

1004 
	#ADC_JOFR3_JOFFSET3
 ((
uöt32_t
)0x0FFFË

	)

1007 
	#ADC_JOFR4_JOFFSET4
 ((
uöt32_t
)0x0FFFË

	)

1010 
	#ADC_HTR_HT
 ((
uöt32_t
)0x0FFFË

	)

1013 
	#ADC_LTR_LT
 ((
uöt32_t
)0x0FFFË

	)

1016 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

1017 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

1018 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

1019 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

1020 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

1021 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

1022 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

1023 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

1024 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

1025 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

1026 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

1027 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

1028 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

1029 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

1030 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

1031 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

1032 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

1033 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

1034 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

1035 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

1036 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

1037 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

1038 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

1039 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

1040 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

1041 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

1042 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

1043 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

1044 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

1047 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

1048 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

1049 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

1050 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

1051 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

1052 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

1053 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

1054 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

1055 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

1056 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

1057 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

1058 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

1059 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

1060 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

1061 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

1062 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

1063 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

1064 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

1065 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

1066 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

1067 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

1068 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

1069 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

1070 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

1071 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

1072 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

1073 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

1074 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

1075 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

1076 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

1077 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

1078 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

1079 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

1080 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

1081 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

1082 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

1085 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

1086 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1087 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1088 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1089 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1090 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1091 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1092 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1093 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1094 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1095 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1096 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1097 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1098 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1099 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1100 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1101 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1102 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1103 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1104 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1105 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1106 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1107 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1108 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1109 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

1110 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

1111 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

1112 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

1113 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

1114 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

1115 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

1116 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

1117 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

1118 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

1119 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

1120 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

1123 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

1124 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

1125 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

1126 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

1127 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

1128 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

1129 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

1130 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

1131 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

1132 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

1133 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

1134 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

1135 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

1136 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

1137 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

1138 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

1139 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

1140 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

1141 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

1142 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

1143 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

1144 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

1145 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

1146 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

1147 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

1148 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

1149 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

1152 
	#ADC_JDR1_JDATA
 ((
uöt32_t
)0xFFFFË

	)

1155 
	#ADC_JDR2_JDATA
 ((
uöt32_t
)0xFFFFË

	)

1158 
	#ADC_JDR3_JDATA
 ((
uöt32_t
)0xFFFFË

	)

1161 
	#ADC_JDR4_JDATA
 ((
uöt32_t
)0xFFFFË

	)

1164 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

1165 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

1168 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

1169 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

1170 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

1171 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

1172 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

1173 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

1174 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

1175 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

1176 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

1177 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

1178 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

1179 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

1180 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

1181 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

1182 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

1183 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

1184 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

1185 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

1188 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

1189 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

1190 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

1191 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

1192 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

1193 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

1194 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

1195 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

1196 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

1197 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

1198 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

1199 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

1200 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

1201 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

1202 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

1203 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

1204 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

1205 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

1206 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

1207 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

1210 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

1211 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

1219 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

1223 
	#CRC_IDR_IDR
 ((
uöt32_t
)0xFFË

	)

1227 
	#CRC_CR_RESET
 ((
uöt32_t
)0x01Ë

	)

1241 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

1242 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

1243 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

1244 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

1245 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

1246 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

1247 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

1248 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

1249 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

1250 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

1251 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

1252 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

1253 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

1254 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

1255 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

1256 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

1257 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

1258 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

1259 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

1260 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

1261 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

1262 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

1263 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

1264 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

1265 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

1266 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

1267 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

1268 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

1269 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

1270 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

1271 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

1272 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

1273 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

1274 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

1275 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

1278 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

1279 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

1280 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

1281 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

1282 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

1283 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

1284 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

1285 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

1286 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

1287 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

1288 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

1289 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

1290 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

1291 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

1292 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

1293 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

1294 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

1297 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

1298 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

1299 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

1300 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

1301 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

1302 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

1303 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

1304 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

1305 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

1308 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

1309 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

1310 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

1311 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

1312 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

1313 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

1314 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

1315 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

1316 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

1317 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

1318 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

1319 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

1320 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

1321 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

1322 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

1323 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

1324 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

1325 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

1326 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

1327 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

1330 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

1331 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

1332 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

1333 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

1334 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

1335 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

1336 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

1337 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

1338 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

1339 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

1340 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

1341 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

1342 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

1343 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

1344 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

1345 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

1346 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

1347 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

1348 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

1349 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

1352 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

1353 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

1354 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

1355 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

1356 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

1357 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

1358 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

1359 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

1360 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

1361 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

1362 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

1363 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

1364 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

1365 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

1366 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

1367 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

1368 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

1369 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

1370 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

1371 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

1374 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

1375 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

1376 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

1377 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

1378 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

1379 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

1380 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

1381 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

1382 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

1383 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

1384 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

1385 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

1386 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

1387 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

1388 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

1389 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

1390 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

1391 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

1392 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

1393 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

1402 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

1403 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

1404 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

1405 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

1406 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

1407 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

1408 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

1409 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

1410 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

1411 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

1412 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

1413 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

1414 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

1415 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

1416 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

1417 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

1418 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

1419 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

1420 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

1421 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

1422 
	#EXTI_IMR_MR20
 ((
uöt32_t
)0x00100000Ë

	)

1423 
	#EXTI_IMR_MR21
 ((
uöt32_t
)0x00200000Ë

	)

1424 
	#EXTI_IMR_MR22
 ((
uöt32_t
)0x00400000Ë

	)

1427 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

1428 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

1429 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

1430 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

1431 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

1432 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

1433 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

1434 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

1435 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

1436 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

1437 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

1438 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

1439 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

1440 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

1441 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

1442 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

1443 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

1444 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

1445 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

1446 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

1447 
	#EXTI_EMR_MR20
 ((
uöt32_t
)0x00100000Ë

	)

1448 
	#EXTI_EMR_MR21
 ((
uöt32_t
)0x00200000Ë

	)

1449 
	#EXTI_EMR_MR22
 ((
uöt32_t
)0x00400000Ë

	)

1452 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

1453 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

1454 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

1455 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

1456 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

1457 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

1458 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

1459 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

1460 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

1461 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

1462 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

1463 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

1464 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

1465 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

1466 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

1467 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

1468 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

1469 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

1470 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

1471 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

1472 
	#EXTI_RTSR_TR20
 ((
uöt32_t
)0x00100000Ë

	)

1473 
	#EXTI_RTSR_TR21
 ((
uöt32_t
)0x00200000Ë

	)

1474 
	#EXTI_RTSR_TR22
 ((
uöt32_t
)0x00400000Ë

	)

1477 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

1478 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

1479 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

1480 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

1481 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

1482 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

1483 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

1484 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

1485 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

1486 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

1487 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

1488 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

1489 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

1490 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

1491 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

1492 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

1493 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

1494 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

1495 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

1496 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

1497 
	#EXTI_FTSR_TR20
 ((
uöt32_t
)0x00100000Ë

	)

1498 
	#EXTI_FTSR_TR21
 ((
uöt32_t
)0x00200000Ë

	)

1499 
	#EXTI_FTSR_TR22
 ((
uöt32_t
)0x00400000Ë

	)

1502 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

1503 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

1504 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

1505 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

1506 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

1507 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

1508 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

1509 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

1510 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

1511 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

1512 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

1513 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

1514 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

1515 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

1516 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

1517 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

1518 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

1519 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

1520 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

1521 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

1522 
	#EXTI_SWIER_SWIER20
 ((
uöt32_t
)0x00100000Ë

	)

1523 
	#EXTI_SWIER_SWIER21
 ((
uöt32_t
)0x00200000Ë

	)

1524 
	#EXTI_SWIER_SWIER22
 ((
uöt32_t
)0x00400000Ë

	)

1527 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

1528 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

1529 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

1530 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

1531 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

1532 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

1533 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

1534 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

1535 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

1536 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

1537 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

1538 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

1539 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

1540 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

1541 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

1542 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

1543 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

1544 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

1545 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

1546 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

1547 
	#EXTI_PR_PR20
 ((
uöt32_t
)0x00100000Ë

	)

1548 
	#EXTI_PR_PR21
 ((
uöt32_t
)0x00200000Ë

	)

1549 
	#EXTI_PR_PR22
 ((
uöt32_t
)0x00400000Ë

	)

1557 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x0000000F)

	)

1558 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

1559 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

1560 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

1561 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

1562 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

1563 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

1564 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

1565 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

1567 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

1568 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

1569 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

1570 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

1571 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

1572 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

1573 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

1576 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

1577 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

1578 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

1579 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

1580 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

1581 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

1582 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

1585 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

1586 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

1587 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

1588 
	#FLASH_CR_SNB
 ((
uöt32_t
)0x000000F8)

	)

1589 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

1590 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

1591 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

1592 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

1593 
	#FLASH_CR_SNB_4
 ((
uöt32_t
)0x00000080)

	)

1594 
	#FLASH_CR_PSIZE
 ((
uöt32_t
)0x00000300)

	)

1595 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

1596 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

1597 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

1598 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

1599 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

1602 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

1603 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

1604 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

1605 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

1606 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

1608 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

1609 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

1610 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

1611 
	#FLASH_OPTCR_RDP
 ((
uöt32_t
)0x0000FF00)

	)

1612 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

1613 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

1614 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

1615 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

1616 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

1617 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

1618 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

1619 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

1620 
	#FLASH_OPTCR_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

1621 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

1622 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

1623 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

1624 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

1625 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

1626 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

1627 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

1628 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

1629 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

1630 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

1631 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

1632 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

1635 
	#FLASH_OPTCR1_nWRP
 ((
uöt32_t
)0x0FFF0000)

	)

1636 
	#FLASH_OPTCR1_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

1637 
	#FLASH_OPTCR1_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

1638 
	#FLASH_OPTCR1_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

1639 
	#FLASH_OPTCR1_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

1640 
	#FLASH_OPTCR1_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

1641 
	#FLASH_OPTCR1_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

1642 
	#FLASH_OPTCR1_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

1643 
	#FLASH_OPTCR1_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

1644 
	#FLASH_OPTCR1_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

1645 
	#FLASH_OPTCR1_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

1646 
	#FLASH_OPTCR1_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

1647 
	#FLASH_OPTCR1_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

1655 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

1656 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

1657 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

1659 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

1660 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

1661 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

1663 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

1664 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

1665 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

1667 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

1668 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

1669 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

1671 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

1672 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

1673 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

1675 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

1676 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

1677 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

1679 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

1680 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

1681 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

1683 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

1684 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

1685 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

1687 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

1688 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

1689 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

1691 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

1692 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

1693 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

1695 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

1696 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

1697 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

1699 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

1700 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

1701 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

1703 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

1704 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

1705 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

1707 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

1708 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

1709 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

1711 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

1712 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

1713 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

1715 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

1716 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

1717 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

1720 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

1721 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

1722 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

1723 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

1724 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

1725 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

1726 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

1727 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

1728 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

1729 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

1730 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

1731 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

1732 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

1733 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

1734 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

1735 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

1738 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

1739 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

1740 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

1742 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

1743 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

1744 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

1746 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

1747 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

1748 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

1750 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

1751 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

1752 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

1754 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

1755 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

1756 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

1758 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

1759 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

1760 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

1762 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

1763 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

1764 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

1766 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

1767 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

1768 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

1770 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

1771 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

1772 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

1774 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

1775 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

1776 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

1778 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

1779 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

1780 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

1782 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

1783 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

1784 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

1786 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

1787 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

1788 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

1790 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

1791 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

1792 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

1794 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

1795 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

1796 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

1798 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

1799 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

1800 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

1803 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

1804 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

1805 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

1807 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

1808 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

1809 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

1811 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

1812 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

1813 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

1815 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

1816 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

1817 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

1819 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

1820 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

1821 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

1823 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

1824 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

1825 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

1827 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

1828 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

1829 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

1831 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

1832 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

1833 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

1835 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

1836 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

1837 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

1839 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

1840 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

1841 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

1843 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

1844 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

1845 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

1847 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

1848 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

1849 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

1851 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

1852 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

1853 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

1855 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

1856 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

1857 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

1859 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

1860 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

1861 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

1863 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

1864 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

1865 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

1868 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

1869 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

1870 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

1871 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

1872 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

1873 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

1874 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

1875 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

1876 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

1877 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

1878 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

1879 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

1880 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

1881 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

1882 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

1883 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

1885 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

1886 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

1887 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

1888 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

1889 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

1890 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

1891 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

1892 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

1893 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

1894 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

1895 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

1896 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

1897 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

1898 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

1899 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

1900 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

1903 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

1904 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

1905 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

1906 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

1907 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

1908 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

1909 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

1910 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

1911 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

1912 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

1913 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

1914 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

1915 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

1916 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

1917 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

1918 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

1920 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

1921 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

1922 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

1923 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

1924 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

1925 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

1926 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

1927 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

1928 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

1929 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

1930 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

1931 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

1932 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

1933 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

1934 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

1935 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

1938 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

1939 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

1940 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

1941 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

1942 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

1943 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

1944 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

1945 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

1946 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

1947 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

1948 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

1949 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

1950 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

1951 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

1952 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

1953 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

1954 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

1955 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

1956 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

1957 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

1958 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

1959 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

1960 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

1961 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

1962 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

1963 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

1964 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

1965 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

1966 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

1967 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

1968 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

1969 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

1972 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001)

	)

1973 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002)

	)

1974 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004)

	)

1975 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008)

	)

1976 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010)

	)

1977 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020)

	)

1978 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040)

	)

1979 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080)

	)

1980 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100)

	)

1981 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200)

	)

1982 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400)

	)

1983 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800)

	)

1984 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000)

	)

1985 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000)

	)

1986 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000)

	)

1987 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000)

	)

1988 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000)

	)

1996 
	#I2C_CR1_PE
 ((
uöt32_t
)0x00000001Ë

	)

1997 
	#I2C_CR1_SMBUS
 ((
uöt32_t
)0x00000002Ë

	)

1998 
	#I2C_CR1_SMBTYPE
 ((
uöt32_t
)0x00000008Ë

	)

1999 
	#I2C_CR1_ENARP
 ((
uöt32_t
)0x00000010Ë

	)

2000 
	#I2C_CR1_ENPEC
 ((
uöt32_t
)0x00000020Ë

	)

2001 
	#I2C_CR1_ENGC
 ((
uöt32_t
)0x00000040Ë

	)

2002 
	#I2C_CR1_NOSTRETCH
 ((
uöt32_t
)0x00000080Ë

	)

2003 
	#I2C_CR1_START
 ((
uöt32_t
)0x00000100Ë

	)

2004 
	#I2C_CR1_STOP
 ((
uöt32_t
)0x00000200Ë

	)

2005 
	#I2C_CR1_ACK
 ((
uöt32_t
)0x00000400Ë

	)

2006 
	#I2C_CR1_POS
 ((
uöt32_t
)0x00000800Ë

	)

2007 
	#I2C_CR1_PEC
 ((
uöt32_t
)0x00001000Ë

	)

2008 
	#I2C_CR1_ALERT
 ((
uöt32_t
)0x00002000Ë

	)

2009 
	#I2C_CR1_SWRST
 ((
uöt32_t
)0x00008000Ë

	)

2012 
	#I2C_CR2_FREQ
 ((
uöt32_t
)0x0000003FË

	)

2013 
	#I2C_CR2_FREQ_0
 ((
uöt32_t
)0x00000001Ë

	)

2014 
	#I2C_CR2_FREQ_1
 ((
uöt32_t
)0x00000002Ë

	)

2015 
	#I2C_CR2_FREQ_2
 ((
uöt32_t
)0x00000004Ë

	)

2016 
	#I2C_CR2_FREQ_3
 ((
uöt32_t
)0x00000008Ë

	)

2017 
	#I2C_CR2_FREQ_4
 ((
uöt32_t
)0x00000010Ë

	)

2018 
	#I2C_CR2_FREQ_5
 ((
uöt32_t
)0x00000020Ë

	)

2020 
	#I2C_CR2_ITERREN
 ((
uöt32_t
)0x00000100Ë

	)

2021 
	#I2C_CR2_ITEVTEN
 ((
uöt32_t
)0x00000200Ë

	)

2022 
	#I2C_CR2_ITBUFEN
 ((
uöt32_t
)0x00000400Ë

	)

2023 
	#I2C_CR2_DMAEN
 ((
uöt32_t
)0x00000800Ë

	)

2024 
	#I2C_CR2_LAST
 ((
uöt32_t
)0x00001000Ë

	)

2027 
	#I2C_OAR1_ADD1_7
 ((
uöt32_t
)0x000000FEË

	)

2028 
	#I2C_OAR1_ADD8_9
 ((
uöt32_t
)0x00000300Ë

	)

2030 
	#I2C_OAR1_ADD0
 ((
uöt32_t
)0x00000001Ë

	)

2031 
	#I2C_OAR1_ADD1
 ((
uöt32_t
)0x00000002Ë

	)

2032 
	#I2C_OAR1_ADD2
 ((
uöt32_t
)0x00000004Ë

	)

2033 
	#I2C_OAR1_ADD3
 ((
uöt32_t
)0x00000008Ë

	)

2034 
	#I2C_OAR1_ADD4
 ((
uöt32_t
)0x00000010Ë

	)

2035 
	#I2C_OAR1_ADD5
 ((
uöt32_t
)0x00000020Ë

	)

2036 
	#I2C_OAR1_ADD6
 ((
uöt32_t
)0x00000040Ë

	)

2037 
	#I2C_OAR1_ADD7
 ((
uöt32_t
)0x00000080Ë

	)

2038 
	#I2C_OAR1_ADD8
 ((
uöt32_t
)0x00000100Ë

	)

2039 
	#I2C_OAR1_ADD9
 ((
uöt32_t
)0x00000200Ë

	)

2041 
	#I2C_OAR1_ADDMODE
 ((
uöt32_t
)0x00008000Ë

	)

2044 
	#I2C_OAR2_ENDUAL
 ((
uöt32_t
)0x00000001Ë

	)

2045 
	#I2C_OAR2_ADD2
 ((
uöt32_t
)0x000000FEË

	)

2048 
	#I2C_DR_DR
 ((
uöt32_t
)0x000000FFË

	)

2051 
	#I2C_SR1_SB
 ((
uöt32_t
)0x00000001Ë

	)

2052 
	#I2C_SR1_ADDR
 ((
uöt32_t
)0x00000002Ë

	)

2053 
	#I2C_SR1_BTF
 ((
uöt32_t
)0x00000004Ë

	)

2054 
	#I2C_SR1_ADD10
 ((
uöt32_t
)0x00000008Ë

	)

2055 
	#I2C_SR1_STOPF
 ((
uöt32_t
)0x00000010Ë

	)

2056 
	#I2C_SR1_RXNE
 ((
uöt32_t
)0x00000040Ë

	)

2057 
	#I2C_SR1_TXE
 ((
uöt32_t
)0x00000080Ë

	)

2058 
	#I2C_SR1_BERR
 ((
uöt32_t
)0x00000100Ë

	)

2059 
	#I2C_SR1_ARLO
 ((
uöt32_t
)0x00000200Ë

	)

2060 
	#I2C_SR1_AF
 ((
uöt32_t
)0x00000400Ë

	)

2061 
	#I2C_SR1_OVR
 ((
uöt32_t
)0x00000800Ë

	)

2062 
	#I2C_SR1_PECERR
 ((
uöt32_t
)0x00001000Ë

	)

2063 
	#I2C_SR1_TIMEOUT
 ((
uöt32_t
)0x00004000Ë

	)

2064 
	#I2C_SR1_SMBALERT
 ((
uöt32_t
)0x00008000Ë

	)

2067 
	#I2C_SR2_MSL
 ((
uöt32_t
)0x00000001Ë

	)

2068 
	#I2C_SR2_BUSY
 ((
uöt32_t
)0x00000002Ë

	)

2069 
	#I2C_SR2_TRA
 ((
uöt32_t
)0x00000004Ë

	)

2070 
	#I2C_SR2_GENCALL
 ((
uöt32_t
)0x00000010Ë

	)

2071 
	#I2C_SR2_SMBDEFAULT
 ((
uöt32_t
)0x00000020Ë

	)

2072 
	#I2C_SR2_SMBHOST
 ((
uöt32_t
)0x00000040Ë

	)

2073 
	#I2C_SR2_DUALF
 ((
uöt32_t
)0x00000080Ë

	)

2074 
	#I2C_SR2_PEC
 ((
uöt32_t
)0x0000FF00Ë

	)

2077 
	#I2C_CCR_CCR
 ((
uöt32_t
)0x00000FFFË

	)

2078 
	#I2C_CCR_DUTY
 ((
uöt32_t
)0x00004000Ë

	)

2079 
	#I2C_CCR_FS
 ((
uöt32_t
)0x00008000Ë

	)

2082 
	#I2C_TRISE_TRISE
 ((
uöt32_t
)0x0000003FË

	)

2085 
	#I2C_FLTR_DNF
 ((
uöt32_t
)0x0000000FË

	)

2086 
	#I2C_FLTR_ANOFF
 ((
uöt32_t
)0x00000010Ë

	)

2094 
	#IWDG_KR_KEY
 ((
uöt32_t
)0xFFFFË

	)

2097 
	#IWDG_PR_PR
 ((
uöt32_t
)0x07Ë

	)

2098 
	#IWDG_PR_PR_0
 ((
uöt32_t
)0x01Ë

	)

2099 
	#IWDG_PR_PR_1
 ((
uöt32_t
)0x02Ë

	)

2100 
	#IWDG_PR_PR_2
 ((
uöt32_t
)0x04Ë

	)

2103 
	#IWDG_RLR_RL
 ((
uöt32_t
)0x0FFFË

	)

2106 
	#IWDG_SR_PVU
 ((
uöt32_t
)0x01Ë

	)

2107 
	#IWDG_SR_RVU
 ((
uöt32_t
)0x02Ë

	)

2116 
	#PWR_CR_LPDS
 ((
uöt32_t
)0x00000001Ë

	)

2117 
	#PWR_CR_PDDS
 ((
uöt32_t
)0x00000002Ë

	)

2118 
	#PWR_CR_CWUF
 ((
uöt32_t
)0x00000004Ë

	)

2119 
	#PWR_CR_CSBF
 ((
uöt32_t
)0x00000008Ë

	)

2120 
	#PWR_CR_PVDE
 ((
uöt32_t
)0x00000010Ë

	)

2122 
	#PWR_CR_PLS
 ((
uöt32_t
)0x000000E0Ë

	)

2123 
	#PWR_CR_PLS_0
 ((
uöt32_t
)0x00000020Ë

	)

2124 
	#PWR_CR_PLS_1
 ((
uöt32_t
)0x00000040Ë

	)

2125 
	#PWR_CR_PLS_2
 ((
uöt32_t
)0x00000080Ë

	)

2128 
	#PWR_CR_PLS_LEV0
 ((
uöt32_t
)0x00000000Ë

	)

2129 
	#PWR_CR_PLS_LEV1
 ((
uöt32_t
)0x00000020Ë

	)

2130 
	#PWR_CR_PLS_LEV2
 ((
uöt32_t
)0x00000040Ë

	)

2131 
	#PWR_CR_PLS_LEV3
 ((
uöt32_t
)0x00000060Ë

	)

2132 
	#PWR_CR_PLS_LEV4
 ((
uöt32_t
)0x00000080Ë

	)

2133 
	#PWR_CR_PLS_LEV5
 ((
uöt32_t
)0x000000A0Ë

	)

2134 
	#PWR_CR_PLS_LEV6
 ((
uöt32_t
)0x000000C0Ë

	)

2135 
	#PWR_CR_PLS_LEV7
 ((
uöt32_t
)0x000000E0Ë

	)

2137 
	#PWR_CR_DBP
 ((
uöt32_t
)0x00000100Ë

	)

2138 
	#PWR_CR_FPDS
 ((
uöt32_t
)0x00000200Ë

	)

2139 
	#PWR_CR_LPLVDS
 ((
uöt32_t
)0x00000400Ë

	)

2140 
	#PWR_CR_MRLVDS
 ((
uöt32_t
)0x00000800Ë

	)

2141 
	#PWR_CR_ADCDC1
 ((
uöt32_t
)0x00002000Ë

	)

2142 
	#PWR_CR_VOS
 ((
uöt32_t
)0x0000C000Ë

	)

2143 
	#PWR_CR_VOS_0
 ((
uöt32_t
)0x00004000Ë

	)

2144 
	#PWR_CR_VOS_1
 ((
uöt32_t
)0x00008000Ë

	)

2147 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

2150 
	#PWR_CSR_WUF
 ((
uöt32_t
)0x00000001Ë

	)

2151 
	#PWR_CSR_SBF
 ((
uöt32_t
)0x00000002Ë

	)

2152 
	#PWR_CSR_PVDO
 ((
uöt32_t
)0x00000004Ë

	)

2153 
	#PWR_CSR_BRR
 ((
uöt32_t
)0x00000008Ë

	)

2154 
	#PWR_CSR_EWUP
 ((
uöt32_t
)0x00000100Ë

	)

2155 
	#PWR_CSR_BRE
 ((
uöt32_t
)0x00000200Ë

	)

2156 
	#PWR_CSR_VOSRDY
 ((
uöt32_t
)0x00004000Ë

	)

2159 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

2167 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

2168 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

2170 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

2171 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

2172 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

2173 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

2174 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

2175 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

2177 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

2178 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

2179 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

2180 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

2181 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

2182 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

2183 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

2184 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

2185 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

2187 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

2188 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

2189 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

2190 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

2191 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

2192 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

2193 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

2194 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

2197 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

2198 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

2199 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

2200 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

2201 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

2202 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

2203 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

2205 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

2206 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

2207 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

2208 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

2209 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

2210 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

2211 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

2212 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

2213 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

2214 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

2216 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

2217 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

2218 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

2220 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

2221 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

2222 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

2224 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

2225 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

2226 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

2227 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

2228 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

2232 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

2233 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

2234 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

2236 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

2237 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

2238 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

2241 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

2242 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

2243 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

2245 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

2246 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

2247 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

2250 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

2251 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

2252 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

2253 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

2254 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

2256 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2257 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

2258 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

2259 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

2260 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

2261 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

2262 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

2263 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

2264 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

2267 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

2268 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

2269 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

2270 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

2272 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2273 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

2274 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

2275 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

2276 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

2279 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

2280 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

2281 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

2282 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

2284 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

2285 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

2286 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

2287 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

2288 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

2291 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

2292 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

2293 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

2294 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

2295 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

2296 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

2299 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

2300 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

2301 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

2303 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

2305 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

2306 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

2307 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

2308 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

2310 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

2311 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

2312 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

2313 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

2315 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

2316 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

2317 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

2320 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

2321 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

2322 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

2323 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

2324 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

2325 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

2327 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

2328 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

2329 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

2330 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

2331 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

2332 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

2333 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

2335 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

2336 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

2337 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

2338 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

2339 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

2340 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

2342 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

2345 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

2346 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

2347 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

2348 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

2349 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

2350 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

2351 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

2352 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

2353 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

2356 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

2361 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

2362 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

2363 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

2364 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

2365 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800)

	)

2366 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000)

	)

2367 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000)

	)

2368 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

2369 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

2370 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

2371 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

2372 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

2375 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

2376 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

2377 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

2378 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

2379 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

2380 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

2381 
	#RCC_APB2RSTR_SPI4RST
 ((
uöt32_t
)0x00002000)

	)

2382 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

2383 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

2384 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

2385 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

2388 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

2391 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

2392 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

2393 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

2394 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

2395 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

2396 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

2397 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

2398 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

2399 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

2400 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

2401 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

2404 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

2409 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

2410 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

2411 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

2412 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

2413 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

2414 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

2415 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

2416 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

2417 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

2418 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

2419 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

2420 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

2423 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

2424 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

2425 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

2426 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

2427 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

2428 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

2429 
	#RCC_APB2ENR_SPI4EN
 ((
uöt32_t
)0x00002000)

	)

2430 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

2431 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

2432 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

2433 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

2436 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

2437 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

2438 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

2439 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

2440 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

2441 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

2442 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

2443 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

2444 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

2445 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

2446 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

2447 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

2448 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

2451 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

2456 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

2457 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

2458 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

2459 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

2460 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

2461 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

2462 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

2463 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

2464 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

2465 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

2466 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

2467 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

2468 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

2471 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

2472 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

2473 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

2474 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

2475 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

2476 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

2477 
	#RCC_APB2LPENR_SPI4LPEN
 ((
uöt32_t
)0x00002000)

	)

2478 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

2479 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

2480 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

2481 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

2484 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

2485 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

2486 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

2488 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

2489 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

2490 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

2492 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

2493 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

2496 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

2497 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

2498 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

2499 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

2500 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

2501 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

2502 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

2503 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

2504 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

2505 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

2508 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

2509 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

2510 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

2511 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

2514 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

2515 
	#RCC_PLLI2SCFGR_PLLI2SN_0
 ((
uöt32_t
)0x00000040)

	)

2516 
	#RCC_PLLI2SCFGR_PLLI2SN_1
 ((
uöt32_t
)0x00000080)

	)

2517 
	#RCC_PLLI2SCFGR_PLLI2SN_2
 ((
uöt32_t
)0x00000100)

	)

2518 
	#RCC_PLLI2SCFGR_PLLI2SN_3
 ((
uöt32_t
)0x00000200)

	)

2519 
	#RCC_PLLI2SCFGR_PLLI2SN_4
 ((
uöt32_t
)0x00000400)

	)

2520 
	#RCC_PLLI2SCFGR_PLLI2SN_5
 ((
uöt32_t
)0x00000800)

	)

2521 
	#RCC_PLLI2SCFGR_PLLI2SN_6
 ((
uöt32_t
)0x00001000)

	)

2522 
	#RCC_PLLI2SCFGR_PLLI2SN_7
 ((
uöt32_t
)0x00002000)

	)

2523 
	#RCC_PLLI2SCFGR_PLLI2SN_8
 ((
uöt32_t
)0x00004000)

	)

2525 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

2526 
	#RCC_PLLI2SCFGR_PLLI2SR_0
 ((
uöt32_t
)0x10000000)

	)

2527 
	#RCC_PLLI2SCFGR_PLLI2SR_1
 ((
uöt32_t
)0x20000000)

	)

2528 
	#RCC_PLLI2SCFGR_PLLI2SR_2
 ((
uöt32_t
)0x40000000)

	)

2536 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

2537 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

2538 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

2539 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

2540 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

2541 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

2542 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

2543 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

2544 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

2545 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

2546 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

2547 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

2548 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

2549 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

2550 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

2551 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

2552 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

2553 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

2554 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

2555 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

2556 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

2557 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

2558 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

2559 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

2560 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

2561 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

2562 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

2565 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

2566 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

2567 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

2568 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

2569 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

2570 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

2571 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

2572 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

2573 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

2574 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

2575 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

2576 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

2577 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

2578 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

2579 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

2580 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

2581 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

2582 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

2583 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

2584 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

2585 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

2586 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

2587 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

2588 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

2589 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

2590 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

2591 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

2592 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

2595 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

2596 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

2597 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

2598 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

2599 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

2600 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

2601 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

2602 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

2603 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

2604 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

2605 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

2606 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

2607 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

2608 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

2609 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

2610 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

2611 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

2612 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

2613 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

2614 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

2615 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

2616 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

2617 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

2618 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

2619 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

2620 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

2623 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

2624 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

2625 
	#RTC_ISR_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

2626 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

2627 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

2628 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

2629 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

2630 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

2631 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

2632 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

2633 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

2634 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

2635 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

2636 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

2637 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

2638 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

2641 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

2642 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00007FFF)

	)

2645 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

2648 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

2649 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

2652 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

2653 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

2654 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

2655 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

2656 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

2657 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

2658 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

2659 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

2660 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

2661 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

2662 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

2663 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

2664 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

2665 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

2666 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

2667 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

2668 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

2669 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

2670 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

2671 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

2672 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

2673 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

2674 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

2675 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

2676 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

2677 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

2678 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

2679 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

2680 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

2681 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

2682 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

2683 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

2684 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

2685 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

2686 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

2687 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

2688 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

2689 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

2690 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

2691 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

2694 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

2695 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

2696 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

2697 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

2698 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

2699 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

2700 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

2701 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

2702 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

2703 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

2704 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

2705 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

2706 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

2707 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

2708 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

2709 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

2710 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

2711 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

2712 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

2713 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

2714 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

2715 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

2716 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

2717 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

2718 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

2719 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

2720 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

2721 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

2722 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

2723 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

2724 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

2725 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

2726 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

2727 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

2728 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

2729 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

2730 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

2731 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

2732 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

2733 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

2736 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

2739 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

2742 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

2743 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

2746 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

2747 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

2748 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

2749 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

2750 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

2751 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

2752 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

2753 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

2754 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

2755 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

2756 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

2757 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

2758 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

2759 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

2760 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

2761 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

2762 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

2763 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

2764 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

2765 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

2766 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

2767 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

2768 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

2769 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

2770 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

2771 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

2772 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

2775 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

2776 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

2777 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

2778 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

2779 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

2780 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

2781 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

2782 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

2783 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

2784 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

2785 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

2786 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

2787 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

2788 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

2789 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

2790 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

2791 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

2792 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

2795 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

2798 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

2799 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

2800 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

2801 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

2802 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

2803 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

2804 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

2805 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

2806 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

2807 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

2808 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

2809 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

2810 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

2813 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

2814 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

2815 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

2816 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

2817 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

2818 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

2819 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

2820 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

2821 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

2822 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

2823 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

2824 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

2825 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

2826 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

2827 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

2828 
	#RTC_TAFCR_TAMP2TRG
 ((
uöt32_t
)0x00000010)

	)

2829 
	#RTC_TAFCR_TAMP2E
 ((
uöt32_t
)0x00000008)

	)

2830 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

2831 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

2832 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

2835 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

2836 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

2837 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

2838 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

2839 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

2840 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

2843 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

2844 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

2845 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

2846 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

2847 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

2848 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

2851 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2854 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2857 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2860 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2863 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2866 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2869 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2872 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2875 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2878 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2881 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2884 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2887 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2890 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2893 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2896 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2899 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2902 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2905 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2908 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

2918 
	#SDIO_POWER_PWRCTRL
 ((
uöt32_t
)0x03Ë

	)

2919 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt32_t
)0x01Ë

	)

2920 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt32_t
)0x02Ë

	)

2923 
	#SDIO_CLKCR_CLKDIV
 ((
uöt32_t
)0x00FFË

	)

2924 
	#SDIO_CLKCR_CLKEN
 ((
uöt32_t
)0x0100Ë

	)

2925 
	#SDIO_CLKCR_PWRSAV
 ((
uöt32_t
)0x0200Ë

	)

2926 
	#SDIO_CLKCR_BYPASS
 ((
uöt32_t
)0x0400Ë

	)

2928 
	#SDIO_CLKCR_WIDBUS
 ((
uöt32_t
)0x1800Ë

	)

2929 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt32_t
)0x0800Ë

	)

2930 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt32_t
)0x1000Ë

	)

2932 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt32_t
)0x2000Ë

	)

2933 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt32_t
)0x4000Ë

	)

2936 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

2939 
	#SDIO_CMD_CMDINDEX
 ((
uöt32_t
)0x003FË

	)

2941 
	#SDIO_CMD_WAITRESP
 ((
uöt32_t
)0x00C0Ë

	)

2942 
	#SDIO_CMD_WAITRESP_0
 ((
uöt32_t
)0x0040Ë

	)

2943 
	#SDIO_CMD_WAITRESP_1
 ((
uöt32_t
)0x0080Ë

	)

2945 
	#SDIO_CMD_WAITINT
 ((
uöt32_t
)0x0100Ë

	)

2946 
	#SDIO_CMD_WAITPEND
 ((
uöt32_t
)0x0200Ë

	)

2947 
	#SDIO_CMD_CPSMEN
 ((
uöt32_t
)0x0400Ë

	)

2948 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt32_t
)0x0800Ë

	)

2949 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt32_t
)0x1000Ë

	)

2950 
	#SDIO_CMD_NIEN
 ((
uöt32_t
)0x2000Ë

	)

2951 
	#SDIO_CMD_CEATACMD
 ((
uöt32_t
)0x4000Ë

	)

2954 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt32_t
)0x3FË

	)

2957 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

2960 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

2963 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

2966 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

2969 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

2972 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

2975 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

2978 
	#SDIO_DCTRL_DTEN
 ((
uöt32_t
)0x0001Ë

	)

2979 
	#SDIO_DCTRL_DTDIR
 ((
uöt32_t
)0x0002Ë

	)

2980 
	#SDIO_DCTRL_DTMODE
 ((
uöt32_t
)0x0004Ë

	)

2981 
	#SDIO_DCTRL_DMAEN
 ((
uöt32_t
)0x0008Ë

	)

2983 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt32_t
)0x00F0Ë

	)

2984 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt32_t
)0x0010Ë

	)

2985 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt32_t
)0x0020Ë

	)

2986 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt32_t
)0x0040Ë

	)

2987 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt32_t
)0x0080Ë

	)

2989 
	#SDIO_DCTRL_RWSTART
 ((
uöt32_t
)0x0100Ë

	)

2990 
	#SDIO_DCTRL_RWSTOP
 ((
uöt32_t
)0x0200Ë

	)

2991 
	#SDIO_DCTRL_RWMOD
 ((
uöt32_t
)0x0400Ë

	)

2992 
	#SDIO_DCTRL_SDIOEN
 ((
uöt32_t
)0x0800Ë

	)

2995 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

2998 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

2999 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

3000 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

3001 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

3002 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

3003 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

3004 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

3005 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

3006 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

3007 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

3008 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

3009 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

3010 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

3011 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

3012 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

3013 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

3014 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

3015 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

3016 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

3017 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

3018 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

3019 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

3020 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

3021 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

3024 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

3025 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

3026 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

3027 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

3028 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

3029 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

3030 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

3031 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

3032 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

3033 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

3034 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

3035 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

3036 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

3039 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

3040 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

3041 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

3042 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

3043 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

3044 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

3045 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

3046 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

3047 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

3048 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

3049 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

3050 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

3051 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

3052 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

3053 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

3054 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

3055 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

3056 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

3057 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

3058 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

3059 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

3060 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

3061 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

3062 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

3065 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

3068 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3076 
	#SPI_CR1_CPHA
 ((
uöt32_t
)0x00000001Ë

	)

3077 
	#SPI_CR1_CPOL
 ((
uöt32_t
)0x00000002Ë

	)

3078 
	#SPI_CR1_MSTR
 ((
uöt32_t
)0x00000004Ë

	)

3080 
	#SPI_CR1_BR
 ((
uöt32_t
)0x00000038Ë

	)

3081 
	#SPI_CR1_BR_0
 ((
uöt32_t
)0x00000008Ë

	)

3082 
	#SPI_CR1_BR_1
 ((
uöt32_t
)0x00000010Ë

	)

3083 
	#SPI_CR1_BR_2
 ((
uöt32_t
)0x00000020Ë

	)

3085 
	#SPI_CR1_SPE
 ((
uöt32_t
)0x00000040Ë

	)

3086 
	#SPI_CR1_LSBFIRST
 ((
uöt32_t
)0x00000080Ë

	)

3087 
	#SPI_CR1_SSI
 ((
uöt32_t
)0x00000100Ë

	)

3088 
	#SPI_CR1_SSM
 ((
uöt32_t
)0x00000200Ë

	)

3089 
	#SPI_CR1_RXONLY
 ((
uöt32_t
)0x00000400Ë

	)

3090 
	#SPI_CR1_DFF
 ((
uöt32_t
)0x00000800Ë

	)

3091 
	#SPI_CR1_CRCNEXT
 ((
uöt32_t
)0x00001000Ë

	)

3092 
	#SPI_CR1_CRCEN
 ((
uöt32_t
)0x00002000Ë

	)

3093 
	#SPI_CR1_BIDIOE
 ((
uöt32_t
)0x00004000Ë

	)

3094 
	#SPI_CR1_BIDIMODE
 ((
uöt32_t
)0x00008000Ë

	)

3097 
	#SPI_CR2_RXDMAEN
 ((
uöt32_t
)0x00000001Ë

	)

3098 
	#SPI_CR2_TXDMAEN
 ((
uöt32_t
)0x00000002Ë

	)

3099 
	#SPI_CR2_SSOE
 ((
uöt32_t
)0x00000004Ë

	)

3100 
	#SPI_CR2_FRF
 ((
uöt32_t
)0x00000010Ë

	)

3101 
	#SPI_CR2_ERRIE
 ((
uöt32_t
)0x00000020Ë

	)

3102 
	#SPI_CR2_RXNEIE
 ((
uöt32_t
)0x00000040Ë

	)

3103 
	#SPI_CR2_TXEIE
 ((
uöt32_t
)0x00000080Ë

	)

3106 
	#SPI_SR_RXNE
 ((
uöt32_t
)0x00000001Ë

	)

3107 
	#SPI_SR_TXE
 ((
uöt32_t
)0x00000002Ë

	)

3108 
	#SPI_SR_CHSIDE
 ((
uöt32_t
)0x00000004Ë

	)

3109 
	#SPI_SR_UDR
 ((
uöt32_t
)0x00000008Ë

	)

3110 
	#SPI_SR_CRCERR
 ((
uöt32_t
)0x00000010Ë

	)

3111 
	#SPI_SR_MODF
 ((
uöt32_t
)0x00000020Ë

	)

3112 
	#SPI_SR_OVR
 ((
uöt32_t
)0x00000040Ë

	)

3113 
	#SPI_SR_BSY
 ((
uöt32_t
)0x00000080Ë

	)

3114 
	#SPI_SR_FRE
 ((
uöt32_t
)0x00000100Ë

	)

3117 
	#SPI_DR_DR
 ((
uöt32_t
)0x0000FFFFË

	)

3120 
	#SPI_CRCPR_CRCPOLY
 ((
uöt32_t
)0x0000FFFFË

	)

3123 
	#SPI_RXCRCR_RXCRC
 ((
uöt32_t
)0x0000FFFFË

	)

3126 
	#SPI_TXCRCR_TXCRC
 ((
uöt32_t
)0x0000FFFFË

	)

3129 
	#SPI_I2SCFGR_CHLEN
 ((
uöt32_t
)0x00000001Ë

	)

3131 
	#SPI_I2SCFGR_DATLEN
 ((
uöt32_t
)0x00000006Ë

	)

3132 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt32_t
)0x00000002Ë

	)

3133 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt32_t
)0x00000004Ë

	)

3135 
	#SPI_I2SCFGR_CKPOL
 ((
uöt32_t
)0x00000008Ë

	)

3137 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt32_t
)0x00000030Ë

	)

3138 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt32_t
)0x00000010Ë

	)

3139 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt32_t
)0x00000020Ë

	)

3141 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt32_t
)0x00000080Ë

	)

3143 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt32_t
)0x00000300Ë

	)

3144 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt32_t
)0x00000100Ë

	)

3145 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt32_t
)0x00000200Ë

	)

3147 
	#SPI_I2SCFGR_I2SE
 ((
uöt32_t
)0x00000400Ë

	)

3148 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt32_t
)0x00000800Ë

	)

3151 
	#SPI_I2SPR_I2SDIV
 ((
uöt32_t
)0x000000FFË

	)

3152 
	#SPI_I2SPR_ODD
 ((
uöt32_t
)0x00000100Ë

	)

3153 
	#SPI_I2SPR_MCKOE
 ((
uöt32_t
)0x00000200Ë

	)

3161 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000007Ë

	)

3162 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001)

	)

3163 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002)

	)

3164 
	#SYSCFG_MEMRMP_MEM_MODE_2
 ((
uöt32_t
)0x00000004)

	)

3167 
	#SYSCFG_PMC_ADC1DC2
 ((
uöt32_t
)0x00010000Ë

	)

3170 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt32_t
)0x000FË

	)

3171 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt32_t
)0x00F0Ë

	)

3172 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt32_t
)0x0F00Ë

	)

3173 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt32_t
)0xF000Ë

	)

3177 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt32_t
)0x0000Ë

	)

3178 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt32_t
)0x0001Ë

	)

3179 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt32_t
)0x0002Ë

	)

3180 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt32_t
)0x0003Ë

	)

3181 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt32_t
)0x0004Ë

	)

3182 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt32_t
)0x0007Ë

	)

3187 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt32_t
)0x0000Ë

	)

3188 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt32_t
)0x0010Ë

	)

3189 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt32_t
)0x0020Ë

	)

3190 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt32_t
)0x0030Ë

	)

3191 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt32_t
)0x0040Ë

	)

3192 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt32_t
)0x0070Ë

	)

3197 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt32_t
)0x0000Ë

	)

3198 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt32_t
)0x0100Ë

	)

3199 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt32_t
)0x0200Ë

	)

3200 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt32_t
)0x0300Ë

	)

3201 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt32_t
)0x0400Ë

	)

3202 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt32_t
)0x0700Ë

	)

3207 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt32_t
)0x0000Ë

	)

3208 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt32_t
)0x1000Ë

	)

3209 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt32_t
)0x2000Ë

	)

3210 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt32_t
)0x3000Ë

	)

3211 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt32_t
)0x4000Ë

	)

3212 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt32_t
)0x7000Ë

	)

3215 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt32_t
)0x000FË

	)

3216 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt32_t
)0x00F0Ë

	)

3217 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt32_t
)0x0F00Ë

	)

3218 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt32_t
)0xF000Ë

	)

3222 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt32_t
)0x0000Ë

	)

3223 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt32_t
)0x0001Ë

	)

3224 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt32_t
)0x0002Ë

	)

3225 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt32_t
)0x0003Ë

	)

3226 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt32_t
)0x0004Ë

	)

3227 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt32_t
)0x0007Ë

	)

3232 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt32_t
)0x0000Ë

	)

3233 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt32_t
)0x0010Ë

	)

3234 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt32_t
)0x0020Ë

	)

3235 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt32_t
)0x0030Ë

	)

3236 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt32_t
)0x0040Ë

	)

3237 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt32_t
)0x0070Ë

	)

3242 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt32_t
)0x0000Ë

	)

3243 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt32_t
)0x0100Ë

	)

3244 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt32_t
)0x0200Ë

	)

3245 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt32_t
)0x0300Ë

	)

3246 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt32_t
)0x0400Ë

	)

3247 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt32_t
)0x0700Ë

	)

3252 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt32_t
)0x0000Ë

	)

3253 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt32_t
)0x1000Ë

	)

3254 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt32_t
)0x2000Ë

	)

3255 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt32_t
)0x3000Ë

	)

3256 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt32_t
)0x4000Ë

	)

3257 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt32_t
)0x7000Ë

	)

3261 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt32_t
)0x000FË

	)

3262 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt32_t
)0x00F0Ë

	)

3263 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt32_t
)0x0F00Ë

	)

3264 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt32_t
)0xF000Ë

	)

3269 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt32_t
)0x0000Ë

	)

3270 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt32_t
)0x0001Ë

	)

3271 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt32_t
)0x0002Ë

	)

3272 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt32_t
)0x0003Ë

	)

3273 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt32_t
)0x0004Ë

	)

3274 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt32_t
)0x0007Ë

	)

3279 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt32_t
)0x0000Ë

	)

3280 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt32_t
)0x0010Ë

	)

3281 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt32_t
)0x0020Ë

	)

3282 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt32_t
)0x0030Ë

	)

3283 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt32_t
)0x0040Ë

	)

3284 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt32_t
)0x0070Ë

	)

3289 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt32_t
)0x0000Ë

	)

3290 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt32_t
)0x0100Ë

	)

3291 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt32_t
)0x0200Ë

	)

3292 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt32_t
)0x0300Ë

	)

3293 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt32_t
)0x0400Ë

	)

3294 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt32_t
)0x0700Ë

	)

3299 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt32_t
)0x0000Ë

	)

3300 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt32_t
)0x1000Ë

	)

3301 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt32_t
)0x2000Ë

	)

3302 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt32_t
)0x3000Ë

	)

3303 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt32_t
)0x4000Ë

	)

3304 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt32_t
)0x7000Ë

	)

3307 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt32_t
)0x000FË

	)

3308 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt32_t
)0x00F0Ë

	)

3309 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt32_t
)0x0F00Ë

	)

3310 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt32_t
)0xF000Ë

	)

3314 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt32_t
)0x0000Ë

	)

3315 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt32_t
)0x0001Ë

	)

3316 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt32_t
)0x0002Ë

	)

3317 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt32_t
)0x0003Ë

	)

3318 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt32_t
)0x0004Ë

	)

3319 
	#SYSCFG_EXTICR4_EXTI12_PH
 ((
uöt32_t
)0x0007Ë

	)

3324 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt32_t
)0x0000Ë

	)

3325 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt32_t
)0x0010Ë

	)

3326 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt32_t
)0x0020Ë

	)

3327 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt32_t
)0x0030Ë

	)

3328 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt32_t
)0x0040Ë

	)

3329 
	#SYSCFG_EXTICR4_EXTI13_PH
 ((
uöt32_t
)0x0070Ë

	)

3334 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt32_t
)0x0000Ë

	)

3335 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt32_t
)0x0100Ë

	)

3336 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt32_t
)0x0200Ë

	)

3337 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt32_t
)0x0300Ë

	)

3338 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt32_t
)0x0400Ë

	)

3339 
	#SYSCFG_EXTICR4_EXTI14_PH
 ((
uöt32_t
)0x0700Ë

	)

3344 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt32_t
)0x0000Ë

	)

3345 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt32_t
)0x1000Ë

	)

3346 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt32_t
)0x2000Ë

	)

3347 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt32_t
)0x3000Ë

	)

3348 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt32_t
)0x4000Ë

	)

3349 
	#SYSCFG_EXTICR4_EXTI15_PH
 ((
uöt32_t
)0x7000Ë

	)

3352 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

3353 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

3361 
	#TIM_CR1_CEN
 ((
uöt32_t
)0x0001Ë

	)

3362 
	#TIM_CR1_UDIS
 ((
uöt32_t
)0x0002Ë

	)

3363 
	#TIM_CR1_URS
 ((
uöt32_t
)0x0004Ë

	)

3364 
	#TIM_CR1_OPM
 ((
uöt32_t
)0x0008Ë

	)

3365 
	#TIM_CR1_DIR
 ((
uöt32_t
)0x0010Ë

	)

3367 
	#TIM_CR1_CMS
 ((
uöt32_t
)0x0060Ë

	)

3368 
	#TIM_CR1_CMS_0
 ((
uöt32_t
)0x0020Ë

	)

3369 
	#TIM_CR1_CMS_1
 ((
uöt32_t
)0x0040Ë

	)

3371 
	#TIM_CR1_ARPE
 ((
uöt32_t
)0x0080Ë

	)

3373 
	#TIM_CR1_CKD
 ((
uöt32_t
)0x0300Ë

	)

3374 
	#TIM_CR1_CKD_0
 ((
uöt32_t
)0x0100Ë

	)

3375 
	#TIM_CR1_CKD_1
 ((
uöt32_t
)0x0200Ë

	)

3378 
	#TIM_CR2_CCPC
 ((
uöt32_t
)0x0001Ë

	)

3379 
	#TIM_CR2_CCUS
 ((
uöt32_t
)0x0004Ë

	)

3380 
	#TIM_CR2_CCDS
 ((
uöt32_t
)0x0008Ë

	)

3382 
	#TIM_CR2_MMS
 ((
uöt32_t
)0x0070Ë

	)

3383 
	#TIM_CR2_MMS_0
 ((
uöt32_t
)0x0010Ë

	)

3384 
	#TIM_CR2_MMS_1
 ((
uöt32_t
)0x0020Ë

	)

3385 
	#TIM_CR2_MMS_2
 ((
uöt32_t
)0x0040Ë

	)

3387 
	#TIM_CR2_TI1S
 ((
uöt32_t
)0x0080Ë

	)

3388 
	#TIM_CR2_OIS1
 ((
uöt32_t
)0x0100Ë

	)

3389 
	#TIM_CR2_OIS1N
 ((
uöt32_t
)0x0200Ë

	)

3390 
	#TIM_CR2_OIS2
 ((
uöt32_t
)0x0400Ë

	)

3391 
	#TIM_CR2_OIS2N
 ((
uöt32_t
)0x0800Ë

	)

3392 
	#TIM_CR2_OIS3
 ((
uöt32_t
)0x1000Ë

	)

3393 
	#TIM_CR2_OIS3N
 ((
uöt32_t
)0x2000Ë

	)

3394 
	#TIM_CR2_OIS4
 ((
uöt32_t
)0x4000Ë

	)

3397 
	#TIM_SMCR_SMS
 ((
uöt32_t
)0x0007Ë

	)

3398 
	#TIM_SMCR_SMS_0
 ((
uöt32_t
)0x0001Ë

	)

3399 
	#TIM_SMCR_SMS_1
 ((
uöt32_t
)0x0002Ë

	)

3400 
	#TIM_SMCR_SMS_2
 ((
uöt32_t
)0x0004Ë

	)

3402 
	#TIM_SMCR_TS
 ((
uöt32_t
)0x0070Ë

	)

3403 
	#TIM_SMCR_TS_0
 ((
uöt32_t
)0x0010Ë

	)

3404 
	#TIM_SMCR_TS_1
 ((
uöt32_t
)0x0020Ë

	)

3405 
	#TIM_SMCR_TS_2
 ((
uöt32_t
)0x0040Ë

	)

3407 
	#TIM_SMCR_MSM
 ((
uöt32_t
)0x0080Ë

	)

3409 
	#TIM_SMCR_ETF
 ((
uöt32_t
)0x0F00Ë

	)

3410 
	#TIM_SMCR_ETF_0
 ((
uöt32_t
)0x0100Ë

	)

3411 
	#TIM_SMCR_ETF_1
 ((
uöt32_t
)0x0200Ë

	)

3412 
	#TIM_SMCR_ETF_2
 ((
uöt32_t
)0x0400Ë

	)

3413 
	#TIM_SMCR_ETF_3
 ((
uöt32_t
)0x0800Ë

	)

3415 
	#TIM_SMCR_ETPS
 ((
uöt32_t
)0x3000Ë

	)

3416 
	#TIM_SMCR_ETPS_0
 ((
uöt32_t
)0x1000Ë

	)

3417 
	#TIM_SMCR_ETPS_1
 ((
uöt32_t
)0x2000Ë

	)

3419 
	#TIM_SMCR_ECE
 ((
uöt32_t
)0x4000Ë

	)

3420 
	#TIM_SMCR_ETP
 ((
uöt32_t
)0x8000Ë

	)

3423 
	#TIM_DIER_UIE
 ((
uöt32_t
)0x0001Ë

	)

3424 
	#TIM_DIER_CC1IE
 ((
uöt32_t
)0x0002Ë

	)

3425 
	#TIM_DIER_CC2IE
 ((
uöt32_t
)0x0004Ë

	)

3426 
	#TIM_DIER_CC3IE
 ((
uöt32_t
)0x0008Ë

	)

3427 
	#TIM_DIER_CC4IE
 ((
uöt32_t
)0x0010Ë

	)

3428 
	#TIM_DIER_COMIE
 ((
uöt32_t
)0x0020Ë

	)

3429 
	#TIM_DIER_TIE
 ((
uöt32_t
)0x0040Ë

	)

3430 
	#TIM_DIER_BIE
 ((
uöt32_t
)0x0080Ë

	)

3431 
	#TIM_DIER_UDE
 ((
uöt32_t
)0x0100Ë

	)

3432 
	#TIM_DIER_CC1DE
 ((
uöt32_t
)0x0200Ë

	)

3433 
	#TIM_DIER_CC2DE
 ((
uöt32_t
)0x0400Ë

	)

3434 
	#TIM_DIER_CC3DE
 ((
uöt32_t
)0x0800Ë

	)

3435 
	#TIM_DIER_CC4DE
 ((
uöt32_t
)0x1000Ë

	)

3436 
	#TIM_DIER_COMDE
 ((
uöt32_t
)0x2000Ë

	)

3437 
	#TIM_DIER_TDE
 ((
uöt32_t
)0x4000Ë

	)

3440 
	#TIM_SR_UIF
 ((
uöt32_t
)0x0001Ë

	)

3441 
	#TIM_SR_CC1IF
 ((
uöt32_t
)0x0002Ë

	)

3442 
	#TIM_SR_CC2IF
 ((
uöt32_t
)0x0004Ë

	)

3443 
	#TIM_SR_CC3IF
 ((
uöt32_t
)0x0008Ë

	)

3444 
	#TIM_SR_CC4IF
 ((
uöt32_t
)0x0010Ë

	)

3445 
	#TIM_SR_COMIF
 ((
uöt32_t
)0x0020Ë

	)

3446 
	#TIM_SR_TIF
 ((
uöt32_t
)0x0040Ë

	)

3447 
	#TIM_SR_BIF
 ((
uöt32_t
)0x0080Ë

	)

3448 
	#TIM_SR_CC1OF
 ((
uöt32_t
)0x0200Ë

	)

3449 
	#TIM_SR_CC2OF
 ((
uöt32_t
)0x0400Ë

	)

3450 
	#TIM_SR_CC3OF
 ((
uöt32_t
)0x0800Ë

	)

3451 
	#TIM_SR_CC4OF
 ((
uöt32_t
)0x1000Ë

	)

3454 
	#TIM_EGR_UG
 ((
uöt32_t
)0x01Ë

	)

3455 
	#TIM_EGR_CC1G
 ((
uöt32_t
)0x02Ë

	)

3456 
	#TIM_EGR_CC2G
 ((
uöt32_t
)0x04Ë

	)

3457 
	#TIM_EGR_CC3G
 ((
uöt32_t
)0x08Ë

	)

3458 
	#TIM_EGR_CC4G
 ((
uöt32_t
)0x10Ë

	)

3459 
	#TIM_EGR_COMG
 ((
uöt32_t
)0x20Ë

	)

3460 
	#TIM_EGR_TG
 ((
uöt32_t
)0x40Ë

	)

3461 
	#TIM_EGR_BG
 ((
uöt32_t
)0x80Ë

	)

3464 
	#TIM_CCMR1_CC1S
 ((
uöt32_t
)0x0003Ë

	)

3465 
	#TIM_CCMR1_CC1S_0
 ((
uöt32_t
)0x0001Ë

	)

3466 
	#TIM_CCMR1_CC1S_1
 ((
uöt32_t
)0x0002Ë

	)

3468 
	#TIM_CCMR1_OC1FE
 ((
uöt32_t
)0x0004Ë

	)

3469 
	#TIM_CCMR1_OC1PE
 ((
uöt32_t
)0x0008Ë

	)

3471 
	#TIM_CCMR1_OC1M
 ((
uöt32_t
)0x0070Ë

	)

3472 
	#TIM_CCMR1_OC1M_0
 ((
uöt32_t
)0x0010Ë

	)

3473 
	#TIM_CCMR1_OC1M_1
 ((
uöt32_t
)0x0020Ë

	)

3474 
	#TIM_CCMR1_OC1M_2
 ((
uöt32_t
)0x0040Ë

	)

3476 
	#TIM_CCMR1_OC1CE
 ((
uöt32_t
)0x0080Ë

	)

3478 
	#TIM_CCMR1_CC2S
 ((
uöt32_t
)0x0300Ë

	)

3479 
	#TIM_CCMR1_CC2S_0
 ((
uöt32_t
)0x0100Ë

	)

3480 
	#TIM_CCMR1_CC2S_1
 ((
uöt32_t
)0x0200Ë

	)

3482 
	#TIM_CCMR1_OC2FE
 ((
uöt32_t
)0x0400Ë

	)

3483 
	#TIM_CCMR1_OC2PE
 ((
uöt32_t
)0x0800Ë

	)

3485 
	#TIM_CCMR1_OC2M
 ((
uöt32_t
)0x7000Ë

	)

3486 
	#TIM_CCMR1_OC2M_0
 ((
uöt32_t
)0x1000Ë

	)

3487 
	#TIM_CCMR1_OC2M_1
 ((
uöt32_t
)0x2000Ë

	)

3488 
	#TIM_CCMR1_OC2M_2
 ((
uöt32_t
)0x4000Ë

	)

3490 
	#TIM_CCMR1_OC2CE
 ((
uöt32_t
)0x8000Ë

	)

3494 
	#TIM_CCMR1_IC1PSC
 ((
uöt32_t
)0x000CË

	)

3495 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt32_t
)0x0004Ë

	)

3496 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt32_t
)0x0008Ë

	)

3498 
	#TIM_CCMR1_IC1F
 ((
uöt32_t
)0x00F0Ë

	)

3499 
	#TIM_CCMR1_IC1F_0
 ((
uöt32_t
)0x0010Ë

	)

3500 
	#TIM_CCMR1_IC1F_1
 ((
uöt32_t
)0x0020Ë

	)

3501 
	#TIM_CCMR1_IC1F_2
 ((
uöt32_t
)0x0040Ë

	)

3502 
	#TIM_CCMR1_IC1F_3
 ((
uöt32_t
)0x0080Ë

	)

3504 
	#TIM_CCMR1_IC2PSC
 ((
uöt32_t
)0x0C00Ë

	)

3505 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt32_t
)0x0400Ë

	)

3506 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt32_t
)0x0800Ë

	)

3508 
	#TIM_CCMR1_IC2F
 ((
uöt32_t
)0xF000Ë

	)

3509 
	#TIM_CCMR1_IC2F_0
 ((
uöt32_t
)0x1000Ë

	)

3510 
	#TIM_CCMR1_IC2F_1
 ((
uöt32_t
)0x2000Ë

	)

3511 
	#TIM_CCMR1_IC2F_2
 ((
uöt32_t
)0x4000Ë

	)

3512 
	#TIM_CCMR1_IC2F_3
 ((
uöt32_t
)0x8000Ë

	)

3515 
	#TIM_CCMR2_CC3S
 ((
uöt32_t
)0x0003Ë

	)

3516 
	#TIM_CCMR2_CC3S_0
 ((
uöt32_t
)0x0001Ë

	)

3517 
	#TIM_CCMR2_CC3S_1
 ((
uöt32_t
)0x0002Ë

	)

3519 
	#TIM_CCMR2_OC3FE
 ((
uöt32_t
)0x0004Ë

	)

3520 
	#TIM_CCMR2_OC3PE
 ((
uöt32_t
)0x0008Ë

	)

3522 
	#TIM_CCMR2_OC3M
 ((
uöt32_t
)0x0070Ë

	)

3523 
	#TIM_CCMR2_OC3M_0
 ((
uöt32_t
)0x0010Ë

	)

3524 
	#TIM_CCMR2_OC3M_1
 ((
uöt32_t
)0x0020Ë

	)

3525 
	#TIM_CCMR2_OC3M_2
 ((
uöt32_t
)0x0040Ë

	)

3527 
	#TIM_CCMR2_OC3CE
 ((
uöt32_t
)0x0080Ë

	)

3529 
	#TIM_CCMR2_CC4S
 ((
uöt32_t
)0x0300Ë

	)

3530 
	#TIM_CCMR2_CC4S_0
 ((
uöt32_t
)0x0100Ë

	)

3531 
	#TIM_CCMR2_CC4S_1
 ((
uöt32_t
)0x0200Ë

	)

3533 
	#TIM_CCMR2_OC4FE
 ((
uöt32_t
)0x0400Ë

	)

3534 
	#TIM_CCMR2_OC4PE
 ((
uöt32_t
)0x0800Ë

	)

3536 
	#TIM_CCMR2_OC4M
 ((
uöt32_t
)0x7000Ë

	)

3537 
	#TIM_CCMR2_OC4M_0
 ((
uöt32_t
)0x1000Ë

	)

3538 
	#TIM_CCMR2_OC4M_1
 ((
uöt32_t
)0x2000Ë

	)

3539 
	#TIM_CCMR2_OC4M_2
 ((
uöt32_t
)0x4000Ë

	)

3541 
	#TIM_CCMR2_OC4CE
 ((
uöt32_t
)0x8000Ë

	)

3545 
	#TIM_CCMR2_IC3PSC
 ((
uöt32_t
)0x000CË

	)

3546 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt32_t
)0x0004Ë

	)

3547 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt32_t
)0x0008Ë

	)

3549 
	#TIM_CCMR2_IC3F
 ((
uöt32_t
)0x00F0Ë

	)

3550 
	#TIM_CCMR2_IC3F_0
 ((
uöt32_t
)0x0010Ë

	)

3551 
	#TIM_CCMR2_IC3F_1
 ((
uöt32_t
)0x0020Ë

	)

3552 
	#TIM_CCMR2_IC3F_2
 ((
uöt32_t
)0x0040Ë

	)

3553 
	#TIM_CCMR2_IC3F_3
 ((
uöt32_t
)0x0080Ë

	)

3555 
	#TIM_CCMR2_IC4PSC
 ((
uöt32_t
)0x0C00Ë

	)

3556 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt32_t
)0x0400Ë

	)

3557 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt32_t
)0x0800Ë

	)

3559 
	#TIM_CCMR2_IC4F
 ((
uöt32_t
)0xF000Ë

	)

3560 
	#TIM_CCMR2_IC4F_0
 ((
uöt32_t
)0x1000Ë

	)

3561 
	#TIM_CCMR2_IC4F_1
 ((
uöt32_t
)0x2000Ë

	)

3562 
	#TIM_CCMR2_IC4F_2
 ((
uöt32_t
)0x4000Ë

	)

3563 
	#TIM_CCMR2_IC4F_3
 ((
uöt32_t
)0x8000Ë

	)

3566 
	#TIM_CCER_CC1E
 ((
uöt32_t
)0x0001Ë

	)

3567 
	#TIM_CCER_CC1P
 ((
uöt32_t
)0x0002Ë

	)

3568 
	#TIM_CCER_CC1NE
 ((
uöt32_t
)0x0004Ë

	)

3569 
	#TIM_CCER_CC1NP
 ((
uöt32_t
)0x0008Ë

	)

3570 
	#TIM_CCER_CC2E
 ((
uöt32_t
)0x0010Ë

	)

3571 
	#TIM_CCER_CC2P
 ((
uöt32_t
)0x0020Ë

	)

3572 
	#TIM_CCER_CC2NE
 ((
uöt32_t
)0x0040Ë

	)

3573 
	#TIM_CCER_CC2NP
 ((
uöt32_t
)0x0080Ë

	)

3574 
	#TIM_CCER_CC3E
 ((
uöt32_t
)0x0100Ë

	)

3575 
	#TIM_CCER_CC3P
 ((
uöt32_t
)0x0200Ë

	)

3576 
	#TIM_CCER_CC3NE
 ((
uöt32_t
)0x0400Ë

	)

3577 
	#TIM_CCER_CC3NP
 ((
uöt32_t
)0x0800Ë

	)

3578 
	#TIM_CCER_CC4E
 ((
uöt32_t
)0x1000Ë

	)

3579 
	#TIM_CCER_CC4P
 ((
uöt32_t
)0x2000Ë

	)

3580 
	#TIM_CCER_CC4NP
 ((
uöt32_t
)0x8000Ë

	)

3583 
	#TIM_CNT_CNT
 ((
uöt32_t
)0xFFFFË

	)

3586 
	#TIM_PSC_PSC
 ((
uöt32_t
)0xFFFFË

	)

3589 
	#TIM_ARR_ARR
 ((
uöt32_t
)0xFFFFË

	)

3592 
	#TIM_RCR_REP
 ((
uöt32_t
)0xFFË

	)

3595 
	#TIM_CCR1_CCR1
 ((
uöt32_t
)0xFFFFË

	)

3598 
	#TIM_CCR2_CCR2
 ((
uöt32_t
)0xFFFFË

	)

3601 
	#TIM_CCR3_CCR3
 ((
uöt32_t
)0xFFFFË

	)

3604 
	#TIM_CCR4_CCR4
 ((
uöt32_t
)0xFFFFË

	)

3607 
	#TIM_BDTR_DTG
 ((
uöt32_t
)0x00FFË

	)

3608 
	#TIM_BDTR_DTG_0
 ((
uöt32_t
)0x0001Ë

	)

3609 
	#TIM_BDTR_DTG_1
 ((
uöt32_t
)0x0002Ë

	)

3610 
	#TIM_BDTR_DTG_2
 ((
uöt32_t
)0x0004Ë

	)

3611 
	#TIM_BDTR_DTG_3
 ((
uöt32_t
)0x0008Ë

	)

3612 
	#TIM_BDTR_DTG_4
 ((
uöt32_t
)0x0010Ë

	)

3613 
	#TIM_BDTR_DTG_5
 ((
uöt32_t
)0x0020Ë

	)

3614 
	#TIM_BDTR_DTG_6
 ((
uöt32_t
)0x0040Ë

	)

3615 
	#TIM_BDTR_DTG_7
 ((
uöt32_t
)0x0080Ë

	)

3617 
	#TIM_BDTR_LOCK
 ((
uöt32_t
)0x0300Ë

	)

3618 
	#TIM_BDTR_LOCK_0
 ((
uöt32_t
)0x0100Ë

	)

3619 
	#TIM_BDTR_LOCK_1
 ((
uöt32_t
)0x0200Ë

	)

3621 
	#TIM_BDTR_OSSI
 ((
uöt32_t
)0x0400Ë

	)

3622 
	#TIM_BDTR_OSSR
 ((
uöt32_t
)0x0800Ë

	)

3623 
	#TIM_BDTR_BKE
 ((
uöt32_t
)0x1000Ë

	)

3624 
	#TIM_BDTR_BKP
 ((
uöt32_t
)0x2000Ë

	)

3625 
	#TIM_BDTR_AOE
 ((
uöt32_t
)0x4000Ë

	)

3626 
	#TIM_BDTR_MOE
 ((
uöt32_t
)0x8000Ë

	)

3629 
	#TIM_DCR_DBA
 ((
uöt32_t
)0x001FË

	)

3630 
	#TIM_DCR_DBA_0
 ((
uöt32_t
)0x0001Ë

	)

3631 
	#TIM_DCR_DBA_1
 ((
uöt32_t
)0x0002Ë

	)

3632 
	#TIM_DCR_DBA_2
 ((
uöt32_t
)0x0004Ë

	)

3633 
	#TIM_DCR_DBA_3
 ((
uöt32_t
)0x0008Ë

	)

3634 
	#TIM_DCR_DBA_4
 ((
uöt32_t
)0x0010Ë

	)

3636 
	#TIM_DCR_DBL
 ((
uöt32_t
)0x1F00Ë

	)

3637 
	#TIM_DCR_DBL_0
 ((
uöt32_t
)0x0100Ë

	)

3638 
	#TIM_DCR_DBL_1
 ((
uöt32_t
)0x0200Ë

	)

3639 
	#TIM_DCR_DBL_2
 ((
uöt32_t
)0x0400Ë

	)

3640 
	#TIM_DCR_DBL_3
 ((
uöt32_t
)0x0800Ë

	)

3641 
	#TIM_DCR_DBL_4
 ((
uöt32_t
)0x1000Ë

	)

3644 
	#TIM_DMAR_DMAB
 ((
uöt32_t
)0xFFFFË

	)

3647 
	#TIM_OR_TI4_RMP
 ((
uöt32_t
)0x00C0Ë

	)

3648 
	#TIM_OR_TI4_RMP_0
 ((
uöt32_t
)0x0040Ë

	)

3649 
	#TIM_OR_TI4_RMP_1
 ((
uöt32_t
)0x0080Ë

	)

3650 
	#TIM_OR_ITR1_RMP
 ((
uöt32_t
)0x0C00Ë

	)

3651 
	#TIM_OR_ITR1_RMP_0
 ((
uöt32_t
)0x0400Ë

	)

3652 
	#TIM_OR_ITR1_RMP_1
 ((
uöt32_t
)0x0800Ë

	)

3661 
	#USART_SR_PE
 ((
uöt32_t
)0x0001Ë

	)

3662 
	#USART_SR_FE
 ((
uöt32_t
)0x0002Ë

	)

3663 
	#USART_SR_NE
 ((
uöt32_t
)0x0004Ë

	)

3664 
	#USART_SR_ORE
 ((
uöt32_t
)0x0008Ë

	)

3665 
	#USART_SR_IDLE
 ((
uöt32_t
)0x0010Ë

	)

3666 
	#USART_SR_RXNE
 ((
uöt32_t
)0x0020Ë

	)

3667 
	#USART_SR_TC
 ((
uöt32_t
)0x0040Ë

	)

3668 
	#USART_SR_TXE
 ((
uöt32_t
)0x0080Ë

	)

3669 
	#USART_SR_LBD
 ((
uöt32_t
)0x0100Ë

	)

3670 
	#USART_SR_CTS
 ((
uöt32_t
)0x0200Ë

	)

3673 
	#USART_DR_DR
 ((
uöt32_t
)0x01FFË

	)

3676 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt32_t
)0x000FË

	)

3677 
	#USART_BRR_DIV_M™tisß
 ((
uöt32_t
)0xFFF0Ë

	)

3680 
	#USART_CR1_SBK
 ((
uöt32_t
)0x0001Ë

	)

3681 
	#USART_CR1_RWU
 ((
uöt32_t
)0x0002Ë

	)

3682 
	#USART_CR1_RE
 ((
uöt32_t
)0x0004Ë

	)

3683 
	#USART_CR1_TE
 ((
uöt32_t
)0x0008Ë

	)

3684 
	#USART_CR1_IDLEIE
 ((
uöt32_t
)0x0010Ë

	)

3685 
	#USART_CR1_RXNEIE
 ((
uöt32_t
)0x0020Ë

	)

3686 
	#USART_CR1_TCIE
 ((
uöt32_t
)0x0040Ë

	)

3687 
	#USART_CR1_TXEIE
 ((
uöt32_t
)0x0080Ë

	)

3688 
	#USART_CR1_PEIE
 ((
uöt32_t
)0x0100Ë

	)

3689 
	#USART_CR1_PS
 ((
uöt32_t
)0x0200Ë

	)

3690 
	#USART_CR1_PCE
 ((
uöt32_t
)0x0400Ë

	)

3691 
	#USART_CR1_WAKE
 ((
uöt32_t
)0x0800Ë

	)

3692 
	#USART_CR1_M
 ((
uöt32_t
)0x1000Ë

	)

3693 
	#USART_CR1_UE
 ((
uöt32_t
)0x2000Ë

	)

3694 
	#USART_CR1_OVER8
 ((
uöt32_t
)0x8000Ë

	)

3697 
	#USART_CR2_ADD
 ((
uöt32_t
)0x000FË

	)

3698 
	#USART_CR2_LBDL
 ((
uöt32_t
)0x0020Ë

	)

3699 
	#USART_CR2_LBDIE
 ((
uöt32_t
)0x0040Ë

	)

3700 
	#USART_CR2_LBCL
 ((
uöt32_t
)0x0100Ë

	)

3701 
	#USART_CR2_CPHA
 ((
uöt32_t
)0x0200Ë

	)

3702 
	#USART_CR2_CPOL
 ((
uöt32_t
)0x0400Ë

	)

3703 
	#USART_CR2_CLKEN
 ((
uöt32_t
)0x0800Ë

	)

3705 
	#USART_CR2_STOP
 ((
uöt32_t
)0x3000Ë

	)

3706 
	#USART_CR2_STOP_0
 ((
uöt32_t
)0x1000Ë

	)

3707 
	#USART_CR2_STOP_1
 ((
uöt32_t
)0x2000Ë

	)

3709 
	#USART_CR2_LINEN
 ((
uöt32_t
)0x4000Ë

	)

3712 
	#USART_CR3_EIE
 ((
uöt32_t
)0x0001Ë

	)

3713 
	#USART_CR3_IREN
 ((
uöt32_t
)0x0002Ë

	)

3714 
	#USART_CR3_IRLP
 ((
uöt32_t
)0x0004Ë

	)

3715 
	#USART_CR3_HDSEL
 ((
uöt32_t
)0x0008Ë

	)

3716 
	#USART_CR3_NACK
 ((
uöt32_t
)0x0010Ë

	)

3717 
	#USART_CR3_SCEN
 ((
uöt32_t
)0x0020Ë

	)

3718 
	#USART_CR3_DMAR
 ((
uöt32_t
)0x0040Ë

	)

3719 
	#USART_CR3_DMAT
 ((
uöt32_t
)0x0080Ë

	)

3720 
	#USART_CR3_RTSE
 ((
uöt32_t
)0x0100Ë

	)

3721 
	#USART_CR3_CTSE
 ((
uöt32_t
)0x0200Ë

	)

3722 
	#USART_CR3_CTSIE
 ((
uöt32_t
)0x0400Ë

	)

3723 
	#USART_CR3_ONEBIT
 ((
uöt32_t
)0x0800Ë

	)

3726 
	#USART_GTPR_PSC
 ((
uöt32_t
)0x00FFË

	)

3727 
	#USART_GTPR_PSC_0
 ((
uöt32_t
)0x0001Ë

	)

3728 
	#USART_GTPR_PSC_1
 ((
uöt32_t
)0x0002Ë

	)

3729 
	#USART_GTPR_PSC_2
 ((
uöt32_t
)0x0004Ë

	)

3730 
	#USART_GTPR_PSC_3
 ((
uöt32_t
)0x0008Ë

	)

3731 
	#USART_GTPR_PSC_4
 ((
uöt32_t
)0x0010Ë

	)

3732 
	#USART_GTPR_PSC_5
 ((
uöt32_t
)0x0020Ë

	)

3733 
	#USART_GTPR_PSC_6
 ((
uöt32_t
)0x0040Ë

	)

3734 
	#USART_GTPR_PSC_7
 ((
uöt32_t
)0x0080Ë

	)

3736 
	#USART_GTPR_GT
 ((
uöt32_t
)0xFF00Ë

	)

3744 
	#WWDG_CR_T
 ((
uöt32_t
)0x7FË

	)

3745 
	#WWDG_CR_T0
 ((
uöt32_t
)0x01Ë

	)

3746 
	#WWDG_CR_T1
 ((
uöt32_t
)0x02Ë

	)

3747 
	#WWDG_CR_T2
 ((
uöt32_t
)0x04Ë

	)

3748 
	#WWDG_CR_T3
 ((
uöt32_t
)0x08Ë

	)

3749 
	#WWDG_CR_T4
 ((
uöt32_t
)0x10Ë

	)

3750 
	#WWDG_CR_T5
 ((
uöt32_t
)0x20Ë

	)

3751 
	#WWDG_CR_T6
 ((
uöt32_t
)0x40Ë

	)

3753 
	#WWDG_CR_WDGA
 ((
uöt32_t
)0x80Ë

	)

3756 
	#WWDG_CFR_W
 ((
uöt32_t
)0x007FË

	)

3757 
	#WWDG_CFR_W0
 ((
uöt32_t
)0x0001Ë

	)

3758 
	#WWDG_CFR_W1
 ((
uöt32_t
)0x0002Ë

	)

3759 
	#WWDG_CFR_W2
 ((
uöt32_t
)0x0004Ë

	)

3760 
	#WWDG_CFR_W3
 ((
uöt32_t
)0x0008Ë

	)

3761 
	#WWDG_CFR_W4
 ((
uöt32_t
)0x0010Ë

	)

3762 
	#WWDG_CFR_W5
 ((
uöt32_t
)0x0020Ë

	)

3763 
	#WWDG_CFR_W6
 ((
uöt32_t
)0x0040Ë

	)

3765 
	#WWDG_CFR_WDGTB
 ((
uöt32_t
)0x0180Ë

	)

3766 
	#WWDG_CFR_WDGTB0
 ((
uöt32_t
)0x0080Ë

	)

3767 
	#WWDG_CFR_WDGTB1
 ((
uöt32_t
)0x0100Ë

	)

3769 
	#WWDG_CFR_EWI
 ((
uöt32_t
)0x0200Ë

	)

3772 
	#WWDG_SR_EWIF
 ((
uöt32_t
)0x01Ë

	)

3781 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

3782 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

3785 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

3786 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

3787 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

3788 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

3790 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

3791 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

3792 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

3795 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

3796 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

3797 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

3798 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

3799 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

3800 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

3801 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

3802 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

3803 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

3804 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

3805 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

3806 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

3807 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

3808 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

3809 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

3810 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

3811 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

3813 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

3816 
	#DBGMCU_APB2_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

3817 
	#DBGMCU_APB2_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

3818 
	#DBGMCU_APB2_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

3819 
	#DBGMCU_APB2_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

3820 
	#DBGMCU_APB2_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

3828 
	#USB_OTG_GOTGCTL_SRQSCS
 ((
uöt32_t
)0x00000001Ë

	)

3829 
	#USB_OTG_GOTGCTL_SRQ
 ((
uöt32_t
)0x00000002Ë

	)

3830 
	#USB_OTG_GOTGCTL_HNGSCS
 ((
uöt32_t
)0x00000100Ë

	)

3831 
	#USB_OTG_GOTGCTL_HNPRQ
 ((
uöt32_t
)0x00000200Ë

	)

3832 
	#USB_OTG_GOTGCTL_HSHNPEN
 ((
uöt32_t
)0x00000400Ë

	)

3833 
	#USB_OTG_GOTGCTL_DHNPEN
 ((
uöt32_t
)0x00000800Ë

	)

3834 
	#USB_OTG_GOTGCTL_CIDSTS
 ((
uöt32_t
)0x00010000Ë

	)

3835 
	#USB_OTG_GOTGCTL_DBCT
 ((
uöt32_t
)0x00020000Ë

	)

3836 
	#USB_OTG_GOTGCTL_ASVLD
 ((
uöt32_t
)0x00040000Ë

	)

3837 
	#USB_OTG_GOTGCTL_BSVLD
 ((
uöt32_t
)0x00080000Ë

	)

3841 
	#USB_OTG_HCFG_FSLSPCS
 ((
uöt32_t
)0x00000003Ë

	)

3842 
	#USB_OTG_HCFG_FSLSPCS_0
 ((
uöt32_t
)0x00000001Ë

	)

3843 
	#USB_OTG_HCFG_FSLSPCS_1
 ((
uöt32_t
)0x00000002Ë

	)

3844 
	#USB_OTG_HCFG_FSLSS
 ((
uöt32_t
)0x00000004Ë

	)

3848 
	#USB_OTG_DCFG_DSPD
 ((
uöt32_t
)0x00000003Ë

	)

3849 
	#USB_OTG_DCFG_DSPD_0
 ((
uöt32_t
)0x00000001Ë

	)

3850 
	#USB_OTG_DCFG_DSPD_1
 ((
uöt32_t
)0x00000002Ë

	)

3851 
	#USB_OTG_DCFG_NZLSOHSK
 ((
uöt32_t
)0x00000004Ë

	)

3853 
	#USB_OTG_DCFG_DAD
 ((
uöt32_t
)0x000007F0Ë

	)

3854 
	#USB_OTG_DCFG_DAD_0
 ((
uöt32_t
)0x00000010Ë

	)

3855 
	#USB_OTG_DCFG_DAD_1
 ((
uöt32_t
)0x00000020Ë

	)

3856 
	#USB_OTG_DCFG_DAD_2
 ((
uöt32_t
)0x00000040Ë

	)

3857 
	#USB_OTG_DCFG_DAD_3
 ((
uöt32_t
)0x00000080Ë

	)

3858 
	#USB_OTG_DCFG_DAD_4
 ((
uöt32_t
)0x00000100Ë

	)

3859 
	#USB_OTG_DCFG_DAD_5
 ((
uöt32_t
)0x00000200Ë

	)

3860 
	#USB_OTG_DCFG_DAD_6
 ((
uöt32_t
)0x00000400Ë

	)

3862 
	#USB_OTG_DCFG_PFIVL
 ((
uöt32_t
)0x00001800Ë

	)

3863 
	#USB_OTG_DCFG_PFIVL_0
 ((
uöt32_t
)0x00000800Ë

	)

3864 
	#USB_OTG_DCFG_PFIVL_1
 ((
uöt32_t
)0x00001000Ë

	)

3866 
	#USB_OTG_DCFG_PERSCHIVL
 ((
uöt32_t
)0x03000000Ë

	)

3867 
	#USB_OTG_DCFG_PERSCHIVL_0
 ((
uöt32_t
)0x01000000Ë

	)

3868 
	#USB_OTG_DCFG_PERSCHIVL_1
 ((
uöt32_t
)0x02000000Ë

	)

3871 
	#USB_OTG_PCGCR_STPPCLK
 ((
uöt32_t
)0x00000001Ë

	)

3872 
	#USB_OTG_PCGCR_GATEHCLK
 ((
uöt32_t
)0x00000002Ë

	)

3873 
	#USB_OTG_PCGCR_PHYSUSP
 ((
uöt32_t
)0x00000010Ë

	)

3876 
	#USB_OTG_GOTGINT_SEDET
 ((
uöt32_t
)0x00000004Ë

	)

3877 
	#USB_OTG_GOTGINT_SRSSCHG
 ((
uöt32_t
)0x00000100Ë

	)

3878 
	#USB_OTG_GOTGINT_HNSSCHG
 ((
uöt32_t
)0x00000200Ë

	)

3879 
	#USB_OTG_GOTGINT_HNGDET
 ((
uöt32_t
)0x00020000Ë

	)

3880 
	#USB_OTG_GOTGINT_ADTOCHG
 ((
uöt32_t
)0x00040000Ë

	)

3881 
	#USB_OTG_GOTGINT_DBCDNE
 ((
uöt32_t
)0x00080000Ë

	)

3884 
	#USB_OTG_DCTL_RWUSIG
 ((
uöt32_t
)0x00000001Ë

	)

3885 
	#USB_OTG_DCTL_SDIS
 ((
uöt32_t
)0x00000002Ë

	)

3886 
	#USB_OTG_DCTL_GINSTS
 ((
uöt32_t
)0x00000004Ë

	)

3887 
	#USB_OTG_DCTL_GONSTS
 ((
uöt32_t
)0x00000008Ë

	)

3889 
	#USB_OTG_DCTL_TCTL
 ((
uöt32_t
)0x00000070Ë

	)

3890 
	#USB_OTG_DCTL_TCTL_0
 ((
uöt32_t
)0x00000010Ë

	)

3891 
	#USB_OTG_DCTL_TCTL_1
 ((
uöt32_t
)0x00000020Ë

	)

3892 
	#USB_OTG_DCTL_TCTL_2
 ((
uöt32_t
)0x00000040Ë

	)

3893 
	#USB_OTG_DCTL_SGINAK
 ((
uöt32_t
)0x00000080Ë

	)

3894 
	#USB_OTG_DCTL_CGINAK
 ((
uöt32_t
)0x00000100Ë

	)

3895 
	#USB_OTG_DCTL_SGONAK
 ((
uöt32_t
)0x00000200Ë

	)

3896 
	#USB_OTG_DCTL_CGONAK
 ((
uöt32_t
)0x00000400Ë

	)

3897 
	#USB_OTG_DCTL_POPRGDNE
 ((
uöt32_t
)0x00000800Ë

	)

3900 
	#USB_OTG_HFIR_FRIVL
 ((
uöt32_t
)0x0000FFFFË

	)

3903 
	#USB_OTG_HFNUM_FRNUM
 ((
uöt32_t
)0x0000FFFFË

	)

3904 
	#USB_OTG_HFNUM_FTREM
 ((
uöt32_t
)0xFFFF0000Ë

	)

3907 
	#USB_OTG_DSTS_SUSPSTS
 ((
uöt32_t
)0x00000001Ë

	)

3909 
	#USB_OTG_DSTS_ENUMSPD
 ((
uöt32_t
)0x00000006Ë

	)

3910 
	#USB_OTG_DSTS_ENUMSPD_0
 ((
uöt32_t
)0x00000002Ë

	)

3911 
	#USB_OTG_DSTS_ENUMSPD_1
 ((
uöt32_t
)0x00000004Ë

	)

3912 
	#USB_OTG_DSTS_EERR
 ((
uöt32_t
)0x00000008Ë

	)

3913 
	#USB_OTG_DSTS_FNSOF
 ((
uöt32_t
)0x003FFF00Ë

	)

3916 
	#USB_OTG_GAHBCFG_GINT
 ((
uöt32_t
)0x00000001Ë

	)

3918 
	#USB_OTG_GAHBCFG_HBSTLEN
 ((
uöt32_t
)0x0000001EË

	)

3919 
	#USB_OTG_GAHBCFG_HBSTLEN_0
 ((
uöt32_t
)0x00000002Ë

	)

3920 
	#USB_OTG_GAHBCFG_HBSTLEN_1
 ((
uöt32_t
)0x00000004Ë

	)

3921 
	#USB_OTG_GAHBCFG_HBSTLEN_2
 ((
uöt32_t
)0x00000008Ë

	)

3922 
	#USB_OTG_GAHBCFG_HBSTLEN_3
 ((
uöt32_t
)0x00000010Ë

	)

3923 
	#USB_OTG_GAHBCFG_DMAEN
 ((
uöt32_t
)0x00000020Ë

	)

3924 
	#USB_OTG_GAHBCFG_TXFELVL
 ((
uöt32_t
)0x00000080Ë

	)

3925 
	#USB_OTG_GAHBCFG_PTXFELVL
 ((
uöt32_t
)0x00000100Ë

	)

3929 
	#USB_OTG_GUSBCFG_TOCAL
 ((
uöt32_t
)0x00000007Ë

	)

3930 
	#USB_OTG_GUSBCFG_TOCAL_0
 ((
uöt32_t
)0x00000001Ë

	)

3931 
	#USB_OTG_GUSBCFG_TOCAL_1
 ((
uöt32_t
)0x00000002Ë

	)

3932 
	#USB_OTG_GUSBCFG_TOCAL_2
 ((
uöt32_t
)0x00000004Ë

	)

3933 
	#USB_OTG_GUSBCFG_PHYSEL
 ((
uöt32_t
)0x00000040Ë

	)

3934 
	#USB_OTG_GUSBCFG_SRPCAP
 ((
uöt32_t
)0x00000100Ë

	)

3935 
	#USB_OTG_GUSBCFG_HNPCAP
 ((
uöt32_t
)0x00000200Ë

	)

3937 
	#USB_OTG_GUSBCFG_TRDT
 ((
uöt32_t
)0x00003C00Ë

	)

3938 
	#USB_OTG_GUSBCFG_TRDT_0
 ((
uöt32_t
)0x00000400Ë

	)

3939 
	#USB_OTG_GUSBCFG_TRDT_1
 ((
uöt32_t
)0x00000800Ë

	)

3940 
	#USB_OTG_GUSBCFG_TRDT_2
 ((
uöt32_t
)0x00001000Ë

	)

3941 
	#USB_OTG_GUSBCFG_TRDT_3
 ((
uöt32_t
)0x00002000Ë

	)

3942 
	#USB_OTG_GUSBCFG_PHYLPCS
 ((
uöt32_t
)0x00008000Ë

	)

3943 
	#USB_OTG_GUSBCFG_ULPIFSLS
 ((
uöt32_t
)0x00020000Ë

	)

3944 
	#USB_OTG_GUSBCFG_ULPIAR
 ((
uöt32_t
)0x00040000Ë

	)

3945 
	#USB_OTG_GUSBCFG_ULPICSM
 ((
uöt32_t
)0x00080000Ë

	)

3946 
	#USB_OTG_GUSBCFG_ULPIEVBUSD
 ((
uöt32_t
)0x00100000Ë

	)

3947 
	#USB_OTG_GUSBCFG_ULPIEVBUSI
 ((
uöt32_t
)0x00200000Ë

	)

3948 
	#USB_OTG_GUSBCFG_TSDPS
 ((
uöt32_t
)0x00400000Ë

	)

3949 
	#USB_OTG_GUSBCFG_PCCI
 ((
uöt32_t
)0x00800000Ë

	)

3950 
	#USB_OTG_GUSBCFG_PTCI
 ((
uöt32_t
)0x01000000Ë

	)

3951 
	#USB_OTG_GUSBCFG_ULPIIPD
 ((
uöt32_t
)0x02000000Ë

	)

3952 
	#USB_OTG_GUSBCFG_FHMOD
 ((
uöt32_t
)0x20000000Ë

	)

3953 
	#USB_OTG_GUSBCFG_FDMOD
 ((
uöt32_t
)0x40000000Ë

	)

3954 
	#USB_OTG_GUSBCFG_CTXPKT
 ((
uöt32_t
)0x80000000Ë

	)

3957 
	#USB_OTG_GRSTCTL_CSRST
 ((
uöt32_t
)0x00000001Ë

	)

3958 
	#USB_OTG_GRSTCTL_HSRST
 ((
uöt32_t
)0x00000002Ë

	)

3959 
	#USB_OTG_GRSTCTL_FCRST
 ((
uöt32_t
)0x00000004Ë

	)

3960 
	#USB_OTG_GRSTCTL_RXFFLSH
 ((
uöt32_t
)0x00000010Ë

	)

3961 
	#USB_OTG_GRSTCTL_TXFFLSH
 ((
uöt32_t
)0x00000020Ë

	)

3963 
	#USB_OTG_GRSTCTL_TXFNUM
 ((
uöt32_t
)0x000007C0Ë

	)

3964 
	#USB_OTG_GRSTCTL_TXFNUM_0
 ((
uöt32_t
)0x00000040Ë

	)

3965 
	#USB_OTG_GRSTCTL_TXFNUM_1
 ((
uöt32_t
)0x00000080Ë

	)

3966 
	#USB_OTG_GRSTCTL_TXFNUM_2
 ((
uöt32_t
)0x00000100Ë

	)

3967 
	#USB_OTG_GRSTCTL_TXFNUM_3
 ((
uöt32_t
)0x00000200Ë

	)

3968 
	#USB_OTG_GRSTCTL_TXFNUM_4
 ((
uöt32_t
)0x00000400Ë

	)

3969 
	#USB_OTG_GRSTCTL_DMAREQ
 ((
uöt32_t
)0x40000000Ë

	)

3970 
	#USB_OTG_GRSTCTL_AHBIDL
 ((
uöt32_t
)0x80000000Ë

	)

3973 
	#USB_OTG_DIEPMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

3974 
	#USB_OTG_DIEPMSK_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

3975 
	#USB_OTG_DIEPMSK_TOM
 ((
uöt32_t
)0x00000008Ë

	)

3976 
	#USB_OTG_DIEPMSK_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

3977 
	#USB_OTG_DIEPMSK_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

3978 
	#USB_OTG_DIEPMSK_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

3979 
	#USB_OTG_DIEPMSK_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

3980 
	#USB_OTG_DIEPMSK_BIM
 ((
uöt32_t
)0x00000200Ë

	)

3983 
	#USB_OTG_HPTXSTS_PTXFSAVL
 ((
uöt32_t
)0x0000FFFFË

	)

3985 
	#USB_OTG_HPTXSTS_PTXQSAV
 ((
uöt32_t
)0x00FF0000Ë

	)

3986 
	#USB_OTG_HPTXSTS_PTXQSAV_0
 ((
uöt32_t
)0x00010000Ë

	)

3987 
	#USB_OTG_HPTXSTS_PTXQSAV_1
 ((
uöt32_t
)0x00020000Ë

	)

3988 
	#USB_OTG_HPTXSTS_PTXQSAV_2
 ((
uöt32_t
)0x00040000Ë

	)

3989 
	#USB_OTG_HPTXSTS_PTXQSAV_3
 ((
uöt32_t
)0x00080000Ë

	)

3990 
	#USB_OTG_HPTXSTS_PTXQSAV_4
 ((
uöt32_t
)0x00100000Ë

	)

3991 
	#USB_OTG_HPTXSTS_PTXQSAV_5
 ((
uöt32_t
)0x00200000Ë

	)

3992 
	#USB_OTG_HPTXSTS_PTXQSAV_6
 ((
uöt32_t
)0x00400000Ë

	)

3993 
	#USB_OTG_HPTXSTS_PTXQSAV_7
 ((
uöt32_t
)0x00800000Ë

	)

3995 
	#USB_OTG_HPTXSTS_PTXQTOP
 ((
uöt32_t
)0xFF000000Ë

	)

3996 
	#USB_OTG_HPTXSTS_PTXQTOP_0
 ((
uöt32_t
)0x01000000Ë

	)

3997 
	#USB_OTG_HPTXSTS_PTXQTOP_1
 ((
uöt32_t
)0x02000000Ë

	)

3998 
	#USB_OTG_HPTXSTS_PTXQTOP_2
 ((
uöt32_t
)0x04000000Ë

	)

3999 
	#USB_OTG_HPTXSTS_PTXQTOP_3
 ((
uöt32_t
)0x08000000Ë

	)

4000 
	#USB_OTG_HPTXSTS_PTXQTOP_4
 ((
uöt32_t
)0x10000000Ë

	)

4001 
	#USB_OTG_HPTXSTS_PTXQTOP_5
 ((
uöt32_t
)0x20000000Ë

	)

4002 
	#USB_OTG_HPTXSTS_PTXQTOP_6
 ((
uöt32_t
)0x40000000Ë

	)

4003 
	#USB_OTG_HPTXSTS_PTXQTOP_7
 ((
uöt32_t
)0x80000000Ë

	)

4006 
	#USB_OTG_HAINT_HAINT
 ((
uöt32_t
)0x0000FFFFË

	)

4009 
	#USB_OTG_DOEPMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

4010 
	#USB_OTG_DOEPMSK_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

4011 
	#USB_OTG_DOEPMSK_STUPM
 ((
uöt32_t
)0x00000008Ë

	)

4012 
	#USB_OTG_DOEPMSK_OTEPDM
 ((
uöt32_t
)0x00000010Ë

	)

4013 
	#USB_OTG_DOEPMSK_B2BSTUP
 ((
uöt32_t
)0x00000040Ë

	)

4014 
	#USB_OTG_DOEPMSK_OPEM
 ((
uöt32_t
)0x00000100Ë

	)

4015 
	#USB_OTG_DOEPMSK_BOIM
 ((
uöt32_t
)0x00000200Ë

	)

4018 
	#USB_OTG_GINTSTS_CMOD
 ((
uöt32_t
)0x00000001Ë

	)

4019 
	#USB_OTG_GINTSTS_MMIS
 ((
uöt32_t
)0x00000002Ë

	)

4020 
	#USB_OTG_GINTSTS_OTGINT
 ((
uöt32_t
)0x00000004Ë

	)

4021 
	#USB_OTG_GINTSTS_SOF
 ((
uöt32_t
)0x00000008Ë

	)

4022 
	#USB_OTG_GINTSTS_RXFLVL
 ((
uöt32_t
)0x00000010Ë

	)

4023 
	#USB_OTG_GINTSTS_NPTXFE
 ((
uöt32_t
)0x00000020Ë

	)

4024 
	#USB_OTG_GINTSTS_GINAKEFF
 ((
uöt32_t
)0x00000040Ë

	)

4025 
	#USB_OTG_GINTSTS_BOUTNAKEFF
 ((
uöt32_t
)0x00000080Ë

	)

4026 
	#USB_OTG_GINTSTS_ESUSP
 ((
uöt32_t
)0x00000400Ë

	)

4027 
	#USB_OTG_GINTSTS_USBSUSP
 ((
uöt32_t
)0x00000800Ë

	)

4028 
	#USB_OTG_GINTSTS_USBRST
 ((
uöt32_t
)0x00001000Ë

	)

4029 
	#USB_OTG_GINTSTS_ENUMDNE
 ((
uöt32_t
)0x00002000Ë

	)

4030 
	#USB_OTG_GINTSTS_ISOODRP
 ((
uöt32_t
)0x00004000Ë

	)

4031 
	#USB_OTG_GINTSTS_EOPF
 ((
uöt32_t
)0x00008000Ë

	)

4032 
	#USB_OTG_GINTSTS_IEPINT
 ((
uöt32_t
)0x00040000Ë

	)

4033 
	#USB_OTG_GINTSTS_OEPINT
 ((
uöt32_t
)0x00080000Ë

	)

4034 
	#USB_OTG_GINTSTS_IISOIXFR
 ((
uöt32_t
)0x00100000Ë

	)

4035 
	#USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
 ((
uöt32_t
)0x00200000Ë

	)

4036 
	#USB_OTG_GINTSTS_DATAFSUSP
 ((
uöt32_t
)0x00400000Ë

	)

4037 
	#USB_OTG_GINTSTS_HPRTINT
 ((
uöt32_t
)0x01000000Ë

	)

4038 
	#USB_OTG_GINTSTS_HCINT
 ((
uöt32_t
)0x02000000Ë

	)

4039 
	#USB_OTG_GINTSTS_PTXFE
 ((
uöt32_t
)0x04000000Ë

	)

4040 
	#USB_OTG_GINTSTS_CIDSCHG
 ((
uöt32_t
)0x10000000Ë

	)

4041 
	#USB_OTG_GINTSTS_DISCINT
 ((
uöt32_t
)0x20000000Ë

	)

4042 
	#USB_OTG_GINTSTS_SRQINT
 ((
uöt32_t
)0x40000000Ë

	)

4043 
	#USB_OTG_GINTSTS_WKUINT
 ((
uöt32_t
)0x80000000Ë

	)

4046 
	#USB_OTG_GINTMSK_MMISM
 ((
uöt32_t
)0x00000002Ë

	)

4047 
	#USB_OTG_GINTMSK_OTGINT
 ((
uöt32_t
)0x00000004Ë

	)

4048 
	#USB_OTG_GINTMSK_SOFM
 ((
uöt32_t
)0x00000008Ë

	)

4049 
	#USB_OTG_GINTMSK_RXFLVLM
 ((
uöt32_t
)0x00000010Ë

	)

4050 
	#USB_OTG_GINTMSK_NPTXFEM
 ((
uöt32_t
)0x00000020Ë

	)

4051 
	#USB_OTG_GINTMSK_GINAKEFFM
 ((
uöt32_t
)0x00000040Ë

	)

4052 
	#USB_OTG_GINTMSK_GONAKEFFM
 ((
uöt32_t
)0x00000080Ë

	)

4053 
	#USB_OTG_GINTMSK_ESUSPM
 ((
uöt32_t
)0x00000400Ë

	)

4054 
	#USB_OTG_GINTMSK_USBSUSPM
 ((
uöt32_t
)0x00000800Ë

	)

4055 
	#USB_OTG_GINTMSK_USBRST
 ((
uöt32_t
)0x00001000Ë

	)

4056 
	#USB_OTG_GINTMSK_ENUMDNEM
 ((
uöt32_t
)0x00002000Ë

	)

4057 
	#USB_OTG_GINTMSK_ISOODRPM
 ((
uöt32_t
)0x00004000Ë

	)

4058 
	#USB_OTG_GINTMSK_EOPFM
 ((
uöt32_t
)0x00008000Ë

	)

4059 
	#USB_OTG_GINTMSK_EPMISM
 ((
uöt32_t
)0x00020000Ë

	)

4060 
	#USB_OTG_GINTMSK_IEPINT
 ((
uöt32_t
)0x00040000Ë

	)

4061 
	#USB_OTG_GINTMSK_OEPINT
 ((
uöt32_t
)0x00080000Ë

	)

4062 
	#USB_OTG_GINTMSK_IISOIXFRM
 ((
uöt32_t
)0x00100000Ë

	)

4063 
	#USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 ((
uöt32_t
)0x00200000Ë

	)

4064 
	#USB_OTG_GINTMSK_FSUSPM
 ((
uöt32_t
)0x00400000Ë

	)

4065 
	#USB_OTG_GINTMSK_PRTIM
 ((
uöt32_t
)0x01000000Ë

	)

4066 
	#USB_OTG_GINTMSK_HCIM
 ((
uöt32_t
)0x02000000Ë

	)

4067 
	#USB_OTG_GINTMSK_PTXFEM
 ((
uöt32_t
)0x04000000Ë

	)

4068 
	#USB_OTG_GINTMSK_CIDSCHGM
 ((
uöt32_t
)0x10000000Ë

	)

4069 
	#USB_OTG_GINTMSK_DISCINT
 ((
uöt32_t
)0x20000000Ë

	)

4070 
	#USB_OTG_GINTMSK_SRQIM
 ((
uöt32_t
)0x40000000Ë

	)

4071 
	#USB_OTG_GINTMSK_WUIM
 ((
uöt32_t
)0x80000000Ë

	)

4074 
	#USB_OTG_DAINT_IEPINT
 ((
uöt32_t
)0x0000FFFFË

	)

4075 
	#USB_OTG_DAINT_OEPINT
 ((
uöt32_t
)0xFFFF0000Ë

	)

4078 
	#USB_OTG_HAINTMSK_HAINTM
 ((
uöt32_t
)0x0000FFFFË

	)

4081 
	#USB_OTG_GRXSTSP_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

4082 
	#USB_OTG_GRXSTSP_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

4083 
	#USB_OTG_GRXSTSP_DPID
 ((
uöt32_t
)0x00018000Ë

	)

4084 
	#USB_OTG_GRXSTSP_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

4087 
	#USB_OTG_DAINTMSK_IEPM
 ((
uöt32_t
)0x0000FFFFË

	)

4088 
	#USB_OTG_DAINTMSK_OEPM
 ((
uöt32_t
)0xFFFF0000Ë

	)

4092 
	#USB_OTG_CHNUM
 ((
uöt32_t
)0x0000000FË

	)

4093 
	#USB_OTG_CHNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

4094 
	#USB_OTG_CHNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

4095 
	#USB_OTG_CHNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

4096 
	#USB_OTG_CHNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

4097 
	#USB_OTG_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

4099 
	#USB_OTG_DPID
 ((
uöt32_t
)0x00018000Ë

	)

4100 
	#USB_OTG_DPID_0
 ((
uöt32_t
)0x00008000Ë

	)

4101 
	#USB_OTG_DPID_1
 ((
uöt32_t
)0x00010000Ë

	)

4103 
	#USB_OTG_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

4104 
	#USB_OTG_PKTSTS_0
 ((
uöt32_t
)0x00020000Ë

	)

4105 
	#USB_OTG_PKTSTS_1
 ((
uöt32_t
)0x00040000Ë

	)

4106 
	#USB_OTG_PKTSTS_2
 ((
uöt32_t
)0x00080000Ë

	)

4107 
	#USB_OTG_PKTSTS_3
 ((
uöt32_t
)0x00100000Ë

	)

4109 
	#USB_OTG_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

4110 
	#USB_OTG_EPNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

4111 
	#USB_OTG_EPNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

4112 
	#USB_OTG_EPNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

4113 
	#USB_OTG_EPNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

4115 
	#USB_OTG_FRMNUM
 ((
uöt32_t
)0x01E00000Ë

	)

4116 
	#USB_OTG_FRMNUM_0
 ((
uöt32_t
)0x00200000Ë

	)

4117 
	#USB_OTG_FRMNUM_1
 ((
uöt32_t
)0x00400000Ë

	)

4118 
	#USB_OTG_FRMNUM_2
 ((
uöt32_t
)0x00800000Ë

	)

4119 
	#USB_OTG_FRMNUM_3
 ((
uöt32_t
)0x01000000Ë

	)

4123 
	#USB_OTG_CHNUM
 ((
uöt32_t
)0x0000000FË

	)

4124 
	#USB_OTG_CHNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

4125 
	#USB_OTG_CHNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

4126 
	#USB_OTG_CHNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

4127 
	#USB_OTG_CHNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

4128 
	#USB_OTG_BCNT
 ((
uöt32_t
)0x00007FF0Ë

	)

4130 
	#USB_OTG_DPID
 ((
uöt32_t
)0x00018000Ë

	)

4131 
	#USB_OTG_DPID_0
 ((
uöt32_t
)0x00008000Ë

	)

4132 
	#USB_OTG_DPID_1
 ((
uöt32_t
)0x00010000Ë

	)

4134 
	#USB_OTG_PKTSTS
 ((
uöt32_t
)0x001E0000Ë

	)

4135 
	#USB_OTG_PKTSTS_0
 ((
uöt32_t
)0x00020000Ë

	)

4136 
	#USB_OTG_PKTSTS_1
 ((
uöt32_t
)0x00040000Ë

	)

4137 
	#USB_OTG_PKTSTS_2
 ((
uöt32_t
)0x00080000Ë

	)

4138 
	#USB_OTG_PKTSTS_3
 ((
uöt32_t
)0x00100000Ë

	)

4140 
	#USB_OTG_EPNUM
 ((
uöt32_t
)0x0000000FË

	)

4141 
	#USB_OTG_EPNUM_0
 ((
uöt32_t
)0x00000001Ë

	)

4142 
	#USB_OTG_EPNUM_1
 ((
uöt32_t
)0x00000002Ë

	)

4143 
	#USB_OTG_EPNUM_2
 ((
uöt32_t
)0x00000004Ë

	)

4144 
	#USB_OTG_EPNUM_3
 ((
uöt32_t
)0x00000008Ë

	)

4146 
	#USB_OTG_FRMNUM
 ((
uöt32_t
)0x01E00000Ë

	)

4147 
	#USB_OTG_FRMNUM_0
 ((
uöt32_t
)0x00200000Ë

	)

4148 
	#USB_OTG_FRMNUM_1
 ((
uöt32_t
)0x00400000Ë

	)

4149 
	#USB_OTG_FRMNUM_2
 ((
uöt32_t
)0x00800000Ë

	)

4150 
	#USB_OTG_FRMNUM_3
 ((
uöt32_t
)0x01000000Ë

	)

4153 
	#USB_OTG_GRXFSIZ_RXFD
 ((
uöt32_t
)0x0000FFFFË

	)

4156 
	#USB_OTG_DVBUSDIS_VBUSDT
 ((
uöt32_t
)0x0000FFFFË

	)

4159 
	#USB_OTG_NPTXFSA
 ((
uöt32_t
)0x0000FFFFË

	)

4160 
	#USB_OTG_NPTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

4161 
	#USB_OTG_TX0FSA
 ((
uöt32_t
)0x0000FFFFË

	)

4162 
	#USB_OTG_TX0FD
 ((
uöt32_t
)0xFFFF0000Ë

	)

4165 
	#USB_OTG_DVBUSPULSE_DVBUSP
 ((
uöt32_t
)0x00000FFFË

	)

4168 
	#USB_OTG_GNPTXSTS_NPTXFSAV
 ((
uöt32_t
)0x0000FFFFË

	)

4170 
	#USB_OTG_GNPTXSTS_NPTQXSAV
 ((
uöt32_t
)0x00FF0000Ë

	)

4171 
	#USB_OTG_GNPTXSTS_NPTQXSAV_0
 ((
uöt32_t
)0x00010000Ë

	)

4172 
	#USB_OTG_GNPTXSTS_NPTQXSAV_1
 ((
uöt32_t
)0x00020000Ë

	)

4173 
	#USB_OTG_GNPTXSTS_NPTQXSAV_2
 ((
uöt32_t
)0x00040000Ë

	)

4174 
	#USB_OTG_GNPTXSTS_NPTQXSAV_3
 ((
uöt32_t
)0x00080000Ë

	)

4175 
	#USB_OTG_GNPTXSTS_NPTQXSAV_4
 ((
uöt32_t
)0x00100000Ë

	)

4176 
	#USB_OTG_GNPTXSTS_NPTQXSAV_5
 ((
uöt32_t
)0x00200000Ë

	)

4177 
	#USB_OTG_GNPTXSTS_NPTQXSAV_6
 ((
uöt32_t
)0x00400000Ë

	)

4178 
	#USB_OTG_GNPTXSTS_NPTQXSAV_7
 ((
uöt32_t
)0x00800000Ë

	)

4180 
	#USB_OTG_GNPTXSTS_NPTXQTOP
 ((
uöt32_t
)0x7F000000Ë

	)

4181 
	#USB_OTG_GNPTXSTS_NPTXQTOP_0
 ((
uöt32_t
)0x01000000Ë

	)

4182 
	#USB_OTG_GNPTXSTS_NPTXQTOP_1
 ((
uöt32_t
)0x02000000Ë

	)

4183 
	#USB_OTG_GNPTXSTS_NPTXQTOP_2
 ((
uöt32_t
)0x04000000Ë

	)

4184 
	#USB_OTG_GNPTXSTS_NPTXQTOP_3
 ((
uöt32_t
)0x08000000Ë

	)

4185 
	#USB_OTG_GNPTXSTS_NPTXQTOP_4
 ((
uöt32_t
)0x10000000Ë

	)

4186 
	#USB_OTG_GNPTXSTS_NPTXQTOP_5
 ((
uöt32_t
)0x20000000Ë

	)

4187 
	#USB_OTG_GNPTXSTS_NPTXQTOP_6
 ((
uöt32_t
)0x40000000Ë

	)

4190 
	#USB_OTG_DTHRCTL_NONISOTHREN
 ((
uöt32_t
)0x00000001Ë

	)

4191 
	#USB_OTG_DTHRCTL_ISOTHREN
 ((
uöt32_t
)0x00000002Ë

	)

4193 
	#USB_OTG_DTHRCTL_TXTHRLEN
 ((
uöt32_t
)0x000007FCË

	)

4194 
	#USB_OTG_DTHRCTL_TXTHRLEN_0
 ((
uöt32_t
)0x00000004Ë

	)

4195 
	#USB_OTG_DTHRCTL_TXTHRLEN_1
 ((
uöt32_t
)0x00000008Ë

	)

4196 
	#USB_OTG_DTHRCTL_TXTHRLEN_2
 ((
uöt32_t
)0x00000010Ë

	)

4197 
	#USB_OTG_DTHRCTL_TXTHRLEN_3
 ((
uöt32_t
)0x00000020Ë

	)

4198 
	#USB_OTG_DTHRCTL_TXTHRLEN_4
 ((
uöt32_t
)0x00000040Ë

	)

4199 
	#USB_OTG_DTHRCTL_TXTHRLEN_5
 ((
uöt32_t
)0x00000080Ë

	)

4200 
	#USB_OTG_DTHRCTL_TXTHRLEN_6
 ((
uöt32_t
)0x00000100Ë

	)

4201 
	#USB_OTG_DTHRCTL_TXTHRLEN_7
 ((
uöt32_t
)0x00000200Ë

	)

4202 
	#USB_OTG_DTHRCTL_TXTHRLEN_8
 ((
uöt32_t
)0x00000400Ë

	)

4203 
	#USB_OTG_DTHRCTL_RXTHREN
 ((
uöt32_t
)0x00010000Ë

	)

4205 
	#USB_OTG_DTHRCTL_RXTHRLEN
 ((
uöt32_t
)0x03FE0000Ë

	)

4206 
	#USB_OTG_DTHRCTL_RXTHRLEN_0
 ((
uöt32_t
)0x00020000Ë

	)

4207 
	#USB_OTG_DTHRCTL_RXTHRLEN_1
 ((
uöt32_t
)0x00040000Ë

	)

4208 
	#USB_OTG_DTHRCTL_RXTHRLEN_2
 ((
uöt32_t
)0x00080000Ë

	)

4209 
	#USB_OTG_DTHRCTL_RXTHRLEN_3
 ((
uöt32_t
)0x00100000Ë

	)

4210 
	#USB_OTG_DTHRCTL_RXTHRLEN_4
 ((
uöt32_t
)0x00200000Ë

	)

4211 
	#USB_OTG_DTHRCTL_RXTHRLEN_5
 ((
uöt32_t
)0x00400000Ë

	)

4212 
	#USB_OTG_DTHRCTL_RXTHRLEN_6
 ((
uöt32_t
)0x00800000Ë

	)

4213 
	#USB_OTG_DTHRCTL_RXTHRLEN_7
 ((
uöt32_t
)0x01000000Ë

	)

4214 
	#USB_OTG_DTHRCTL_RXTHRLEN_8
 ((
uöt32_t
)0x02000000Ë

	)

4215 
	#USB_OTG_DTHRCTL_ARPEN
 ((
uöt32_t
)0x08000000Ë

	)

4218 
	#USB_OTG_DIEPEMPMSK_INEPTXFEM
 ((
uöt32_t
)0x0000FFFFË

	)

4221 
	#USB_OTG_DEACHINT_IEP1INT
 ((
uöt32_t
)0x00000002Ë

	)

4222 
	#USB_OTG_DEACHINT_OEP1INT
 ((
uöt32_t
)0x00020000Ë

	)

4225 
	#USB_OTG_GCCFG_PWRDWN
 ((
uöt32_t
)0x00010000Ë

	)

4226 
	#USB_OTG_GCCFG_I2CPADEN
 ((
uöt32_t
)0x00020000Ë

	)

4227 
	#USB_OTG_GCCFG_VBUSASEN
 ((
uöt32_t
)0x00040000Ë

	)

4228 
	#USB_OTG_GCCFG_VBUSBSEN
 ((
uöt32_t
)0x00080000Ë

	)

4229 
	#USB_OTG_GCCFG_SOFOUTEN
 ((
uöt32_t
)0x00100000Ë

	)

4230 
	#USB_OTG_GCCFG_NOVBUSSENS
 ((
uöt32_t
)0x00200000Ë

	)

4233 
	#USB_OTG_DEACHINTMSK_IEP1INTM
 ((
uöt32_t
)0x00000002Ë

	)

4234 
	#USB_OTG_DEACHINTMSK_OEP1INTM
 ((
uöt32_t
)0x00020000Ë

	)

4237 
	#USB_OTG_CID_PRODUCT_ID
 ((
uöt32_t
)0xFFFFFFFFË

	)

4240 
	#USB_OTG_DIEPEACHMSK1_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

4241 
	#USB_OTG_DIEPEACHMSK1_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

4242 
	#USB_OTG_DIEPEACHMSK1_TOM
 ((
uöt32_t
)0x00000008Ë

	)

4243 
	#USB_OTG_DIEPEACHMSK1_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

4244 
	#USB_OTG_DIEPEACHMSK1_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

4245 
	#USB_OTG_DIEPEACHMSK1_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

4246 
	#USB_OTG_DIEPEACHMSK1_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

4247 
	#USB_OTG_DIEPEACHMSK1_BIM
 ((
uöt32_t
)0x00000200Ë

	)

4248 
	#USB_OTG_DIEPEACHMSK1_NAKM
 ((
uöt32_t
)0x00002000Ë

	)

4251 
	#USB_OTG_HPRT_PCSTS
 ((
uöt32_t
)0x00000001Ë

	)

4252 
	#USB_OTG_HPRT_PCDET
 ((
uöt32_t
)0x00000002Ë

	)

4253 
	#USB_OTG_HPRT_PENA
 ((
uöt32_t
)0x00000004Ë

	)

4254 
	#USB_OTG_HPRT_PENCHNG
 ((
uöt32_t
)0x00000008Ë

	)

4255 
	#USB_OTG_HPRT_POCA
 ((
uöt32_t
)0x00000010Ë

	)

4256 
	#USB_OTG_HPRT_POCCHNG
 ((
uöt32_t
)0x00000020Ë

	)

4257 
	#USB_OTG_HPRT_PRES
 ((
uöt32_t
)0x00000040Ë

	)

4258 
	#USB_OTG_HPRT_PSUSP
 ((
uöt32_t
)0x00000080Ë

	)

4259 
	#USB_OTG_HPRT_PRST
 ((
uöt32_t
)0x00000100Ë

	)

4261 
	#USB_OTG_HPRT_PLSTS
 ((
uöt32_t
)0x00000C00Ë

	)

4262 
	#USB_OTG_HPRT_PLSTS_0
 ((
uöt32_t
)0x00000400Ë

	)

4263 
	#USB_OTG_HPRT_PLSTS_1
 ((
uöt32_t
)0x00000800Ë

	)

4264 
	#USB_OTG_HPRT_PPWR
 ((
uöt32_t
)0x00001000Ë

	)

4266 
	#USB_OTG_HPRT_PTCTL
 ((
uöt32_t
)0x0001E000Ë

	)

4267 
	#USB_OTG_HPRT_PTCTL_0
 ((
uöt32_t
)0x00002000Ë

	)

4268 
	#USB_OTG_HPRT_PTCTL_1
 ((
uöt32_t
)0x00004000Ë

	)

4269 
	#USB_OTG_HPRT_PTCTL_2
 ((
uöt32_t
)0x00008000Ë

	)

4270 
	#USB_OTG_HPRT_PTCTL_3
 ((
uöt32_t
)0x00010000Ë

	)

4272 
	#USB_OTG_HPRT_PSPD
 ((
uöt32_t
)0x00060000Ë

	)

4273 
	#USB_OTG_HPRT_PSPD_0
 ((
uöt32_t
)0x00020000Ë

	)

4274 
	#USB_OTG_HPRT_PSPD_1
 ((
uöt32_t
)0x00040000Ë

	)

4277 
	#USB_OTG_DOEPEACHMSK1_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

4278 
	#USB_OTG_DOEPEACHMSK1_EPDM
 ((
uöt32_t
)0x00000002Ë

	)

4279 
	#USB_OTG_DOEPEACHMSK1_TOM
 ((
uöt32_t
)0x00000008Ë

	)

4280 
	#USB_OTG_DOEPEACHMSK1_ITTXFEMSK
 ((
uöt32_t
)0x00000010Ë

	)

4281 
	#USB_OTG_DOEPEACHMSK1_INEPNMM
 ((
uöt32_t
)0x00000020Ë

	)

4282 
	#USB_OTG_DOEPEACHMSK1_INEPNEM
 ((
uöt32_t
)0x00000040Ë

	)

4283 
	#USB_OTG_DOEPEACHMSK1_TXFURM
 ((
uöt32_t
)0x00000100Ë

	)

4284 
	#USB_OTG_DOEPEACHMSK1_BIM
 ((
uöt32_t
)0x00000200Ë

	)

4285 
	#USB_OTG_DOEPEACHMSK1_BERRM
 ((
uöt32_t
)0x00001000Ë

	)

4286 
	#USB_OTG_DOEPEACHMSK1_NAKM
 ((
uöt32_t
)0x00002000Ë

	)

4287 
	#USB_OTG_DOEPEACHMSK1_NYETM
 ((
uöt32_t
)0x00004000Ë

	)

4290 
	#USB_OTG_HPTXFSIZ_PTXSA
 ((
uöt32_t
)0x0000FFFFË

	)

4291 
	#USB_OTG_HPTXFSIZ_PTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

4294 
	#USB_OTG_DIEPCTL_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

4295 
	#USB_OTG_DIEPCTL_USBAEP
 ((
uöt32_t
)0x00008000Ë

	)

4296 
	#USB_OTG_DIEPCTL_EONUM_DPID
 ((
uöt32_t
)0x00010000Ë

	)

4297 
	#USB_OTG_DIEPCTL_NAKSTS
 ((
uöt32_t
)0x00020000Ë

	)

4299 
	#USB_OTG_DIEPCTL_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

4300 
	#USB_OTG_DIEPCTL_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

4301 
	#USB_OTG_DIEPCTL_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

4302 
	#USB_OTG_DIEPCTL_STALL
 ((
uöt32_t
)0x00200000Ë

	)

4304 
	#USB_OTG_DIEPCTL_TXFNUM
 ((
uöt32_t
)0x03C00000Ë

	)

4305 
	#USB_OTG_DIEPCTL_TXFNUM_0
 ((
uöt32_t
)0x00400000Ë

	)

4306 
	#USB_OTG_DIEPCTL_TXFNUM_1
 ((
uöt32_t
)0x00800000Ë

	)

4307 
	#USB_OTG_DIEPCTL_TXFNUM_2
 ((
uöt32_t
)0x01000000Ë

	)

4308 
	#USB_OTG_DIEPCTL_TXFNUM_3
 ((
uöt32_t
)0x02000000Ë

	)

4309 
	#USB_OTG_DIEPCTL_CNAK
 ((
uöt32_t
)0x04000000Ë

	)

4310 
	#USB_OTG_DIEPCTL_SNAK
 ((
uöt32_t
)0x08000000Ë

	)

4311 
	#USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 ((
uöt32_t
)0x10000000Ë

	)

4312 
	#USB_OTG_DIEPCTL_SODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

4313 
	#USB_OTG_DIEPCTL_EPDIS
 ((
uöt32_t
)0x40000000Ë

	)

4314 
	#USB_OTG_DIEPCTL_EPENA
 ((
uöt32_t
)0x80000000Ë

	)

4317 
	#USB_OTG_HCCHAR_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

4319 
	#USB_OTG_HCCHAR_EPNUM
 ((
uöt32_t
)0x00007800Ë

	)

4320 
	#USB_OTG_HCCHAR_EPNUM_0
 ((
uöt32_t
)0x00000800Ë

	)

4321 
	#USB_OTG_HCCHAR_EPNUM_1
 ((
uöt32_t
)0x00001000Ë

	)

4322 
	#USB_OTG_HCCHAR_EPNUM_2
 ((
uöt32_t
)0x00002000Ë

	)

4323 
	#USB_OTG_HCCHAR_EPNUM_3
 ((
uöt32_t
)0x00004000Ë

	)

4324 
	#USB_OTG_HCCHAR_EPDIR
 ((
uöt32_t
)0x00008000Ë

	)

4325 
	#USB_OTG_HCCHAR_LSDEV
 ((
uöt32_t
)0x00020000Ë

	)

4327 
	#USB_OTG_HCCHAR_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

4328 
	#USB_OTG_HCCHAR_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

4329 
	#USB_OTG_HCCHAR_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

4331 
	#USB_OTG_HCCHAR_MC
 ((
uöt32_t
)0x00300000Ë

	)

4332 
	#USB_OTG_HCCHAR_MC_0
 ((
uöt32_t
)0x00100000Ë

	)

4333 
	#USB_OTG_HCCHAR_MC_1
 ((
uöt32_t
)0x00200000Ë

	)

4335 
	#USB_OTG_HCCHAR_DAD
 ((
uöt32_t
)0x1FC00000Ë

	)

4336 
	#USB_OTG_HCCHAR_DAD_0
 ((
uöt32_t
)0x00400000Ë

	)

4337 
	#USB_OTG_HCCHAR_DAD_1
 ((
uöt32_t
)0x00800000Ë

	)

4338 
	#USB_OTG_HCCHAR_DAD_2
 ((
uöt32_t
)0x01000000Ë

	)

4339 
	#USB_OTG_HCCHAR_DAD_3
 ((
uöt32_t
)0x02000000Ë

	)

4340 
	#USB_OTG_HCCHAR_DAD_4
 ((
uöt32_t
)0x04000000Ë

	)

4341 
	#USB_OTG_HCCHAR_DAD_5
 ((
uöt32_t
)0x08000000Ë

	)

4342 
	#USB_OTG_HCCHAR_DAD_6
 ((
uöt32_t
)0x10000000Ë

	)

4343 
	#USB_OTG_HCCHAR_ODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

4344 
	#USB_OTG_HCCHAR_CHDIS
 ((
uöt32_t
)0x40000000Ë

	)

4345 
	#USB_OTG_HCCHAR_CHENA
 ((
uöt32_t
)0x80000000Ë

	)

4349 
	#USB_OTG_HCSPLT_PRTADDR
 ((
uöt32_t
)0x0000007FË

	)

4350 
	#USB_OTG_HCSPLT_PRTADDR_0
 ((
uöt32_t
)0x00000001Ë

	)

4351 
	#USB_OTG_HCSPLT_PRTADDR_1
 ((
uöt32_t
)0x00000002Ë

	)

4352 
	#USB_OTG_HCSPLT_PRTADDR_2
 ((
uöt32_t
)0x00000004Ë

	)

4353 
	#USB_OTG_HCSPLT_PRTADDR_3
 ((
uöt32_t
)0x00000008Ë

	)

4354 
	#USB_OTG_HCSPLT_PRTADDR_4
 ((
uöt32_t
)0x00000010Ë

	)

4355 
	#USB_OTG_HCSPLT_PRTADDR_5
 ((
uöt32_t
)0x00000020Ë

	)

4356 
	#USB_OTG_HCSPLT_PRTADDR_6
 ((
uöt32_t
)0x00000040Ë

	)

4358 
	#USB_OTG_HCSPLT_HUBADDR
 ((
uöt32_t
)0x00003F80Ë

	)

4359 
	#USB_OTG_HCSPLT_HUBADDR_0
 ((
uöt32_t
)0x00000080Ë

	)

4360 
	#USB_OTG_HCSPLT_HUBADDR_1
 ((
uöt32_t
)0x00000100Ë

	)

4361 
	#USB_OTG_HCSPLT_HUBADDR_2
 ((
uöt32_t
)0x00000200Ë

	)

4362 
	#USB_OTG_HCSPLT_HUBADDR_3
 ((
uöt32_t
)0x00000400Ë

	)

4363 
	#USB_OTG_HCSPLT_HUBADDR_4
 ((
uöt32_t
)0x00000800Ë

	)

4364 
	#USB_OTG_HCSPLT_HUBADDR_5
 ((
uöt32_t
)0x00001000Ë

	)

4365 
	#USB_OTG_HCSPLT_HUBADDR_6
 ((
uöt32_t
)0x00002000Ë

	)

4367 
	#USB_OTG_HCSPLT_XACTPOS
 ((
uöt32_t
)0x0000C000Ë

	)

4368 
	#USB_OTG_HCSPLT_XACTPOS_0
 ((
uöt32_t
)0x00004000Ë

	)

4369 
	#USB_OTG_HCSPLT_XACTPOS_1
 ((
uöt32_t
)0x00008000Ë

	)

4370 
	#USB_OTG_HCSPLT_COMPLSPLT
 ((
uöt32_t
)0x00010000Ë

	)

4371 
	#USB_OTG_HCSPLT_SPLITEN
 ((
uöt32_t
)0x80000000Ë

	)

4374 
	#USB_OTG_HCINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

4375 
	#USB_OTG_HCINT_CHH
 ((
uöt32_t
)0x00000002Ë

	)

4376 
	#USB_OTG_HCINT_AHBERR
 ((
uöt32_t
)0x00000004Ë

	)

4377 
	#USB_OTG_HCINT_STALL
 ((
uöt32_t
)0x00000008Ë

	)

4378 
	#USB_OTG_HCINT_NAK
 ((
uöt32_t
)0x00000010Ë

	)

4379 
	#USB_OTG_HCINT_ACK
 ((
uöt32_t
)0x00000020Ë

	)

4380 
	#USB_OTG_HCINT_NYET
 ((
uöt32_t
)0x00000040Ë

	)

4381 
	#USB_OTG_HCINT_TXERR
 ((
uöt32_t
)0x00000080Ë

	)

4382 
	#USB_OTG_HCINT_BBERR
 ((
uöt32_t
)0x00000100Ë

	)

4383 
	#USB_OTG_HCINT_FRMOR
 ((
uöt32_t
)0x00000200Ë

	)

4384 
	#USB_OTG_HCINT_DTERR
 ((
uöt32_t
)0x00000400Ë

	)

4387 
	#USB_OTG_DIEPINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

4388 
	#USB_OTG_DIEPINT_EPDISD
 ((
uöt32_t
)0x00000002Ë

	)

4389 
	#USB_OTG_DIEPINT_TOC
 ((
uöt32_t
)0x00000008Ë

	)

4390 
	#USB_OTG_DIEPINT_ITTXFE
 ((
uöt32_t
)0x00000010Ë

	)

4391 
	#USB_OTG_DIEPINT_INEPNE
 ((
uöt32_t
)0x00000040Ë

	)

4392 
	#USB_OTG_DIEPINT_TXFE
 ((
uöt32_t
)0x00000080Ë

	)

4393 
	#USB_OTG_DIEPINT_TXFIFOUDRN
 ((
uöt32_t
)0x00000100Ë

	)

4394 
	#USB_OTG_DIEPINT_BNA
 ((
uöt32_t
)0x00000200Ë

	)

4395 
	#USB_OTG_DIEPINT_PKTDRPSTS
 ((
uöt32_t
)0x00000800Ë

	)

4396 
	#USB_OTG_DIEPINT_BERR
 ((
uöt32_t
)0x00001000Ë

	)

4397 
	#USB_OTG_DIEPINT_NAK
 ((
uöt32_t
)0x00002000Ë

	)

4400 
	#USB_OTG_HCINTMSK_XFRCM
 ((
uöt32_t
)0x00000001Ë

	)

4401 
	#USB_OTG_HCINTMSK_CHHM
 ((
uöt32_t
)0x00000002Ë

	)

4402 
	#USB_OTG_HCINTMSK_AHBERR
 ((
uöt32_t
)0x00000004Ë

	)

4403 
	#USB_OTG_HCINTMSK_STALLM
 ((
uöt32_t
)0x00000008Ë

	)

4404 
	#USB_OTG_HCINTMSK_NAKM
 ((
uöt32_t
)0x00000010Ë

	)

4405 
	#USB_OTG_HCINTMSK_ACKM
 ((
uöt32_t
)0x00000020Ë

	)

4406 
	#USB_OTG_HCINTMSK_NYET
 ((
uöt32_t
)0x00000040Ë

	)

4407 
	#USB_OTG_HCINTMSK_TXERRM
 ((
uöt32_t
)0x00000080Ë

	)

4408 
	#USB_OTG_HCINTMSK_BBERRM
 ((
uöt32_t
)0x00000100Ë

	)

4409 
	#USB_OTG_HCINTMSK_FRMORM
 ((
uöt32_t
)0x00000200Ë

	)

4410 
	#USB_OTG_HCINTMSK_DTERRM
 ((
uöt32_t
)0x00000400Ë

	)

4414 
	#USB_OTG_DIEPTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

4415 
	#USB_OTG_DIEPTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

4416 
	#USB_OTG_DIEPTSIZ_MULCNT
 ((
uöt32_t
)0x60000000Ë

	)

4418 
	#USB_OTG_HCTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

4419 
	#USB_OTG_HCTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

4420 
	#USB_OTG_HCTSIZ_DOPING
 ((
uöt32_t
)0x80000000Ë

	)

4421 
	#USB_OTG_HCTSIZ_DPID
 ((
uöt32_t
)0x60000000Ë

	)

4422 
	#USB_OTG_HCTSIZ_DPID_0
 ((
uöt32_t
)0x20000000Ë

	)

4423 
	#USB_OTG_HCTSIZ_DPID_1
 ((
uöt32_t
)0x40000000Ë

	)

4426 
	#USB_OTG_DIEPDMA_DMAADDR
 ((
uöt32_t
)0xFFFFFFFFË

	)

4429 
	#USB_OTG_HCDMA_DMAADDR
 ((
uöt32_t
)0xFFFFFFFFË

	)

4432 
	#USB_OTG_DTXFSTS_INEPTFSAV
 ((
uöt32_t
)0x0000FFFFË

	)

4435 
	#USB_OTG_DIEPTXF_INEPTXSA
 ((
uöt32_t
)0x0000FFFFË

	)

4436 
	#USB_OTG_DIEPTXF_INEPTXFD
 ((
uöt32_t
)0xFFFF0000Ë

	)

4440 
	#USB_OTG_DOEPCTL_MPSIZ
 ((
uöt32_t
)0x000007FFË

	)

4441 
	#USB_OTG_DOEPCTL_USBAEP
 ((
uöt32_t
)0x00008000Ë

	)

4442 
	#USB_OTG_DOEPCTL_NAKSTS
 ((
uöt32_t
)0x00020000Ë

	)

4443 
	#USB_OTG_DOEPCTL_SD0PID_SEVNFRM
 ((
uöt32_t
)0x10000000Ë

	)

4444 
	#USB_OTG_DOEPCTL_SODDFRM
 ((
uöt32_t
)0x20000000Ë

	)

4445 
	#USB_OTG_DOEPCTL_EPTYP
 ((
uöt32_t
)0x000C0000Ë

	)

4446 
	#USB_OTG_DOEPCTL_EPTYP_0
 ((
uöt32_t
)0x00040000Ë

	)

4447 
	#USB_OTG_DOEPCTL_EPTYP_1
 ((
uöt32_t
)0x00080000Ë

	)

4448 
	#USB_OTG_DOEPCTL_SNPM
 ((
uöt32_t
)0x00100000Ë

	)

4449 
	#USB_OTG_DOEPCTL_STALL
 ((
uöt32_t
)0x00200000Ë

	)

4450 
	#USB_OTG_DOEPCTL_CNAK
 ((
uöt32_t
)0x04000000Ë

	)

4451 
	#USB_OTG_DOEPCTL_SNAK
 ((
uöt32_t
)0x08000000Ë

	)

4452 
	#USB_OTG_DOEPCTL_EPDIS
 ((
uöt32_t
)0x40000000Ë

	)

4453 
	#USB_OTG_DOEPCTL_EPENA
 ((
uöt32_t
)0x80000000Ë

	)

4456 
	#USB_OTG_DOEPINT_XFRC
 ((
uöt32_t
)0x00000001Ë

	)

4457 
	#USB_OTG_DOEPINT_EPDISD
 ((
uöt32_t
)0x00000002Ë

	)

4458 
	#USB_OTG_DOEPINT_STUP
 ((
uöt32_t
)0x00000008Ë

	)

4459 
	#USB_OTG_DOEPINT_OTEPDIS
 ((
uöt32_t
)0x00000010Ë

	)

4460 
	#USB_OTG_DOEPINT_B2BSTUP
 ((
uöt32_t
)0x00000040Ë

	)

4461 
	#USB_OTG_DOEPINT_NYET
 ((
uöt32_t
)0x00004000Ë

	)

4465 
	#USB_OTG_DOEPTSIZ_XFRSIZ
 ((
uöt32_t
)0x0007FFFFË

	)

4466 
	#USB_OTG_DOEPTSIZ_PKTCNT
 ((
uöt32_t
)0x1FF80000Ë

	)

4468 
	#USB_OTG_DOEPTSIZ_STUPCNT
 ((
uöt32_t
)0x60000000Ë

	)

4469 
	#USB_OTG_DOEPTSIZ_STUPCNT_0
 ((
uöt32_t
)0x20000000Ë

	)

4470 
	#USB_OTG_DOEPTSIZ_STUPCNT_1
 ((
uöt32_t
)0x40000000Ë

	)

4473 
	#USB_OTG_PCGCCTL_STOPCLK
 ((
uöt32_t
)0x00000001Ë

	)

4474 
	#USB_OTG_PCGCCTL_GATECLK
 ((
uöt32_t
)0x00000002Ë

	)

4475 
	#USB_OTG_PCGCCTL_PHYSUSP
 ((
uöt32_t
)0x00000010Ë

	)

4490 
	#IS_ADC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1
)

	)

4493 
	#IS_CRC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
CRC
)

	)

4496 
	#IS_DMA_STREAM_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
DMA1_Såóm0
) || \

4497 ((
INSTANCE
Ë=
DMA1_Såóm1
) || \

4498 ((
INSTANCE
Ë=
DMA1_Såóm2
) || \

4499 ((
INSTANCE
Ë=
DMA1_Såóm3
) || \

4500 ((
INSTANCE
Ë=
DMA1_Såóm4
) || \

4501 ((
INSTANCE
Ë=
DMA1_Såóm5
) || \

4502 ((
INSTANCE
Ë=
DMA1_Såóm6
) || \

4503 ((
INSTANCE
Ë=
DMA1_Såóm7
) || \

4504 ((
INSTANCE
Ë=
DMA2_Såóm0
) || \

4505 ((
INSTANCE
Ë=
DMA2_Såóm1
) || \

4506 ((
INSTANCE
Ë=
DMA2_Såóm2
) || \

4507 ((
INSTANCE
Ë=
DMA2_Såóm3
) || \

4508 ((
INSTANCE
Ë=
DMA2_Såóm4
) || \

4509 ((
INSTANCE
Ë=
DMA2_Såóm5
) || \

4510 ((
INSTANCE
Ë=
DMA2_Såóm6
) || \

4511 ((
INSTANCE
Ë=
DMA2_Såóm7
))

	)

4514 
	#IS_GPIO_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
GPIOA
) || \

4515 ((
INSTANCE
Ë=
GPIOB
) || \

4516 ((
INSTANCE
Ë=
GPIOC
) || \

4517 ((
INSTANCE
Ë=
GPIOD
) || \

4518 ((
INSTANCE
Ë=
GPIOE
) || \

4519 ((
INSTANCE
Ë=
GPIOH
))

	)

4522 
	#IS_I2C_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
I2C1
) || \

4523 ((
INSTANCE
Ë=
I2C2
) || \

4524 ((
INSTANCE
Ë=
I2C3
))

	)

4527 
	#IS_I2S_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI2
) || \

4528 ((
INSTANCE
Ë=
SPI3
))

	)

4531 
	#IS_I2S_ALL_INSTANCE_EXT
(
PERIPH
Ë(((
INSTANCE
Ë=
SPI2
) || \

4532 ((
INSTANCE
Ë=
SPI3
) || \

4533 ((
INSTANCE
Ë=
I2S2ext
) || \

4534 ((
INSTANCE
Ë=
I2S3ext
))

	)

4537 
	#IS_RTC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
RTC
)

	)

4540 
	#IS_SPI_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI1
) || \

4541 ((
INSTANCE
Ë=
SPI2
) || \

4542 ((
INSTANCE
Ë=
SPI3
) || \

4543 ((
INSTANCE
Ë=
SPI4
))

	)

4546 
	#IS_SPI_ALL_INSTANCE_EXT
(
INSTANCE
Ë(((INSTANCEË=
SPI1
) || \

4547 ((
INSTANCE
Ë=
SPI2
) || \

4548 ((
INSTANCE
Ë=
SPI3
) || \

4549 ((
INSTANCE
Ë=
I2S2ext
) || \

4550 ((
INSTANCE
Ë=
I2S3ext
))

	)

4553 
	#IS_TIM_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4554 ((
INSTANCE
Ë=
TIM2
) || \

4555 ((
INSTANCE
Ë=
TIM3
) || \

4556 ((
INSTANCE
Ë=
TIM4
) || \

4557 ((
INSTANCE
Ë=
TIM5
) || \

4558 ((
INSTANCE
Ë=
TIM9
) || \

4559 ((
INSTANCE
Ë=
TIM10
) || \

4560 ((
INSTANCE
Ë=
TIM11
))

	)

4563 
	#IS_TIM_CC1_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4564 ((
INSTANCE
Ë=
TIM2
) || \

4565 ((
INSTANCE
Ë=
TIM3
) || \

4566 ((
INSTANCE
Ë=
TIM4
) || \

4567 ((
INSTANCE
Ë=
TIM5
) || \

4568 ((
INSTANCE
Ë=
TIM9
) || \

4569 ((
INSTANCE
Ë=
TIM10
) || \

4570 ((
INSTANCE
Ë=
TIM11
))

	)

4573 
	#IS_TIM_CC2_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4574 ((
INSTANCE
Ë=
TIM2
) || \

4575 ((
INSTANCE
Ë=
TIM3
) || \

4576 ((
INSTANCE
Ë=
TIM4
) || \

4577 ((
INSTANCE
Ë=
TIM5
) || \

4578 ((
INSTANCE
Ë=
TIM9
))

	)

4581 
	#IS_TIM_CC3_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4582 ((
INSTANCE
Ë=
TIM2
) || \

4583 ((
INSTANCE
Ë=
TIM3
) || \

4584 ((
INSTANCE
Ë=
TIM4
) || \

4585 ((
INSTANCE
Ë=
TIM5
))

	)

4588 
	#IS_TIM_CC4_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4589 ((
INSTANCE
Ë=
TIM2
) || \

4590 ((
INSTANCE
Ë=
TIM3
) || \

4591 ((
INSTANCE
Ë=
TIM4
) || \

4592 ((
INSTANCE
Ë=
TIM5
))

	)

4595 
	#IS_TIM_ADVANCED_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM1
)

	)

4598 
	#IS_TIM_XOR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4599 ((
INSTANCE
Ë=
TIM2
) || \

4600 ((
INSTANCE
Ë=
TIM3
) || \

4601 ((
INSTANCE
Ë=
TIM4
) || \

4602 ((
INSTANCE
Ë=
TIM5
))

	)

4605 
	#IS_TIM_DMA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4606 ((
INSTANCE
Ë=
TIM2
) || \

4607 ((
INSTANCE
Ë=
TIM3
) || \

4608 ((
INSTANCE
Ë=
TIM4
) || \

4609 ((
INSTANCE
Ë=
TIM5
))

	)

4612 
	#IS_TIM_DMA_CC_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4613 ((
INSTANCE
Ë=
TIM2
) || \

4614 ((
INSTANCE
Ë=
TIM3
) || \

4615 ((
INSTANCE
Ë=
TIM4
) || \

4616 ((
INSTANCE
Ë=
TIM5
))

	)

4619 
	#IS_TIM_CCDMA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4620 ((
INSTANCE
Ë=
TIM2
) || \

4621 ((
INSTANCE
Ë=
TIM3
) || \

4622 ((
INSTANCE
Ë=
TIM4
) || \

4623 ((
INSTANCE
Ë=
TIM5
))

	)

4626 
	#IS_TIM_DMABURST_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4627 ((
INSTANCE
Ë=
TIM2
) || \

4628 ((
INSTANCE
Ë=
TIM3
) || \

4629 ((
INSTANCE
Ë=
TIM4
) || \

4630 ((
INSTANCE
Ë=
TIM5
))

	)

4633 
	#IS_TIM_MASTER_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4634 ((
INSTANCE
Ë=
TIM2
) || \

4635 ((
INSTANCE
Ë=
TIM3
) || \

4636 ((
INSTANCE
Ë=
TIM4
) || \

4637 ((
INSTANCE
Ë=
TIM5
) || \

4638 ((
INSTANCE
Ë=
TIM9
))

	)

4641 
	#IS_TIM_SLAVE_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4642 ((
INSTANCE
Ë=
TIM2
) || \

4643 ((
INSTANCE
Ë=
TIM3
) || \

4644 ((
INSTANCE
Ë=
TIM4
) || \

4645 ((
INSTANCE
Ë=
TIM5
) || \

4646 ((
INSTANCE
Ë=
TIM9
))

	)

4649 
	#IS_TIM_32B_COUNTER_INSTANCE
(
INSTANCE
)(((INSTANCEË=
TIM2
) || \

4650 ((
INSTANCE
Ë=
TIM5
))

	)

4653 
	#IS_TIM_ETR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

4654 ((
INSTANCE
Ë=
TIM2
) || \

4655 ((
INSTANCE
Ë=
TIM3
) || \

4656 ((
INSTANCE
Ë=
TIM4
) || \

4657 ((
INSTANCE
Ë=
TIM5
))

	)

4660 
	#IS_TIM_REMAP_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM2
) || \

4661 ((
INSTANCE
Ë=
TIM5
) || \

4662 ((
INSTANCE
Ë=
TIM11
))

	)

4665 
	#IS_TIM_CCX_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

4666 ((((
INSTANCE
Ë=
TIM1
) && \

4667 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

4668 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

4669 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

4670 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

4672 (((
INSTANCE
Ë=
TIM2
) && \

4673 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

4674 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

4675 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

4676 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

4678 (((
INSTANCE
Ë=
TIM3
) && \

4679 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

4680 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

4681 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

4682 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

4684 (((
INSTANCE
Ë=
TIM4
) && \

4685 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

4686 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

4687 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

4688 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

4690 (((
INSTANCE
Ë=
TIM5
) && \

4691 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

4692 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

4693 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

4694 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

4696 (((
INSTANCE
Ë=
TIM9
) && \

4697 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

4698 ((
CHANNEL
Ë=
TIM_CHANNEL_2
))) \

4700 (((
INSTANCE
Ë=
TIM10
) && \

4701 (((
CHANNEL
Ë=
TIM_CHANNEL_1
))) \

4703 (((
INSTANCE
Ë=
TIM11
) && \

4704 (((
CHANNEL
Ë=
TIM_CHANNEL_1
))))

	)

4707 
	#IS_TIM_CCXN_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

4708 ((((
INSTANCE
Ë=
TIM1
) && \

4709 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

4710 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

4711 ((
CHANNEL
Ë=
TIM_CHANNEL_3
))))

	)

4714 
	#IS_USART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

4715 ((
INSTANCE
Ë=
USART2
) || \

4716 ((
INSTANCE
Ë=
USART6
))

	)

4719 
	#IS_UART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

4720 ((
INSTANCE
Ë=
USART2
) || \

4721 ((
INSTANCE
Ë=
USART6
))

	)

4724 
	#IS_UART_HWFLOW_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

4725 ((
INSTANCE
Ë=
USART2
) || \

4726 ((
INSTANCE
Ë=
USART6
))

	)

4729 
	#IS_SMARTCARD_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

4730 ((
INSTANCE
Ë=
USART2
) || \

4731 ((
INSTANCE
Ë=
USART6
))

	)

4734 
	#IS_IRDA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

4735 ((
INSTANCE
Ë=
USART2
) || \

4736 ((
INSTANCE
Ë=
USART6
))

	)

4739 
	#IS_IWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
IWDG
)

	)

4742 
	#IS_WWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
WWDG
)

	)

4745 
	#IS_SDIO_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
SDIO
)

	)

4748 
	#USB_OTG_FS_HOST_MAX_CHANNEL_NBR
 8

	)

4749 
	#USB_OTG_FS_MAX_IN_ENDPOINTS
 4

	)

4750 
	#USB_OTG_FS_MAX_OUT_ENDPOINTS
 4

	)

4751 
	#USB_OTG_FS_TOTAL_FIFO_SIZE
 1280

	)

4765 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\stm32f4xx.h

56 #i‚de‡
__STM32F4xx_H


57 
	#__STM32F4xx_H


	)

59 #ifde‡
__˝lu•lus


70 #i‡!
deföed
 (
STM32F4
)

71 
	#STM32F4


	)

77 #i‡!
deföed
 (
STM32F405xx
Ë&& !deföed (
STM32F415xx
Ë&& !deföed (
STM32F407xx
Ë&& !deföed (
STM32F417xx
) && \

78 !
deföed
 (
STM32F427xx
Ë&& !deföed (
STM32F437xx
Ë&& !deföed (
STM32F429xx
Ë&& !deföed (
STM32F439xx
) && \

79 !
deföed
 (
STM32F401xC
Ë&& !deföed (
STM32F401xE
Ë&& !deföed (
STM32F410Tx
Ë&& !deföed (
STM32F410Cx
) && \

80 !
deföed
 (
STM32F410Rx
Ë&& !deföed (
STM32F411xE
Ë&& !deföed (
STM32F446xx
Ë&& !deföed (
STM32F469xx
) && \

81 !
	$deföed
 (
STM32F479xx
)

109 #i‡!
	`deföed
 (
USE_HAL_DRIVER
)

121 
	#__STM32F4xx_CMSIS_DEVICE_VERSION_MAIN
 (0x02Ë

	)

122 
	#__STM32F4xx_CMSIS_DEVICE_VERSION_SUB1
 (0x04Ë

	)

123 
	#__STM32F4xx_CMSIS_DEVICE_VERSION_SUB2
 (0x00Ë

	)

124 
	#__STM32F4xx_CMSIS_DEVICE_VERSION_RC
 (0x00Ë

	)

125 
	#__STM32F4xx_CMSIS_DEVICE_VERSION
 ((
__STM32F4xx_CMSIS_DEVICE_VERSION_MAIN
 << 24)\

126 |(
__STM32F4xx_CMSIS_DEVICE_VERSION_SUB1
 << 16)\

127 |(
__STM32F4xx_CMSIS_DEVICE_VERSION_SUB2
 << 8 )\

128 |(
__STM32F4xx_CMSIS_DEVICE_VERSION
))

	)

138 #i‡
	`deföed
(
STM32F405xx
)

139 
	~"°m32f405xx.h
"

140 #ñi‡
	`deföed
(
STM32F415xx
)

141 
	~"°m32f415xx.h
"

142 #ñi‡
	`deföed
(
STM32F407xx
)

143 
	~"°m32f407xx.h
"

144 #ñi‡
	`deföed
(
STM32F417xx
)

145 
	~"°m32f417xx.h
"

146 #ñi‡
	`deföed
(
STM32F427xx
)

147 
	~"°m32f427xx.h
"

148 #ñi‡
	`deföed
(
STM32F437xx
)

149 
	~"°m32f437xx.h
"

150 #ñi‡
	`deföed
(
STM32F429xx
)

151 
	~"°m32f429xx.h
"

152 #ñi‡
	`deföed
(
STM32F439xx
)

153 
	~"°m32f439xx.h
"

154 #ñi‡
	`deföed
(
STM32F401xC
)

155 
	~"°m32f401xc.h
"

156 #ñi‡
	`deföed
(
STM32F401xE
)

157 
	~"°m32f401xe.h
"

158 #ñi‡
	`deföed
(
STM32F410Tx
)

159 
	~"°m32f410tx.h
"

160 #ñi‡
	`deföed
(
STM32F410Cx
)

161 
	~"°m32f410cx.h
"

162 #ñi‡
	`deföed
(
STM32F410Rx
)

163 
	~"°m32f410rx.h
"

164 #ñi‡
	`deföed
(
STM32F411xE
)

165 
	~"°m32f411xe.h
"

166 #ñi‡
	`deföed
(
STM32F446xx
)

167 
	~"°m32f446xx.h
"

168 #ñi‡
	`deföed
(
STM32F469xx
)

169 
	~"°m32f469xx.h
"

170 #ñi‡
	`deföed
(
STM32F479xx
)

171 
	~"°m32f479xx.h
"

185 
RESET
 = 0,

186 
SET
 = !
RESET


187 } 
	tFœgSètus
, 
	tITSètus
;

191 
DISABLE
 = 0,

192 
ENABLE
 = !
DISABLE


193 } 
	tFun˘i⁄ÆSèã
;

194 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

198 
ERROR
 = 0,

199 
SUCCESS
 = !
ERROR


200 } 
	tEº‹Sètus
;

210 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

212 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

214 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

216 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

218 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

220 
	#READ_REG
(
REG
Ë((REG))

	)

222 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

224 
	#POSITION_VAL
(
VAL
Ë(
	`__CLZ
(
	`__RBIT
(VAL)))

	)

231 #i‡
	`deföed
 (
USE_HAL_DRIVER
)

232 
	~"°m32f4xx_hÆ.h
"

235 #ifde‡
__˝lu•lus


236 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\stm32f4xx_hal_conf.h

39 #i‚de‡
__STM32F4xx_HAL_CONF_H


40 
	#__STM32F4xx_HAL_CONF_H


	)

42 #ifde‡
__˝lu•lus


46 
	~"c‹e_cm4.h
"

56 
	#HAL_MODULE_ENABLED


	)

57 
	#HAL_ADC_MODULE_ENABLED


	)

63 
	#HAL_DMA_MODULE_ENABLED


	)

66 
	#HAL_FLASH_MODULE_ENABLED


	)

73 
	#HAL_GPIO_MODULE_ENABLED


	)

78 
	#HAL_PWR_MODULE_ENABLED


	)

79 
	#HAL_RCC_MODULE_ENABLED


	)

84 
	#HAL_SPI_MODULE_ENABLED


	)

85 
	#HAL_TIM_MODULE_ENABLED


	)

91 
	#HAL_CORTEX_MODULE_ENABLED


	)

102 #i‡!
deföed
 (
HSE_VALUE
)

103 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

106 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

107 
	#HSE_STARTUP_TIMEOUT
 ((
uöt32_t
)5000Ë

	)

115 #i‡!
deföed
 (
HSI_VALUE
)

116 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

122 #i‡!
deföed
 (
LSI_VALUE
)

123 
	#LSI_VALUE
 ((
uöt32_t
)32000)

	)

125 
The
 
ªÆ
 
vÆue
 
may
 
v¨y
 
dïídög
 
⁄
 
the
 
v¨üti⁄s


126 
ö
 
vﬁège
 
™d
 
ãm≥øtuª
. */

130 #i‡!
deföed
 (
LSE_VALUE
)

131 
	#LSE_VALUE
 ((
uöt32_t
)32768Ë

	)

139 #i‡!
deföed
 (
EXTERNAL_CLOCK_VALUE
)

140 
	#EXTERNAL_CLOCK_VALUE
 ((
uöt32_t
)12288000Ë

	)

150 
	#VDD_VALUE
 ((
uöt32_t
)3300Ë

	)

151 
	#TICK_INT_PRIORITY
 ((
uöt32_t
)0x0FË

	)

152 
	#USE_RTOS
 0

	)

153 
	#PREFETCH_ENABLE
 1

	)

154 
	#INSTRUCTION_CACHE_ENABLE
 1

	)

155 
	#DATA_CACHE_ENABLE
 1

	)

169 
	#MAC_ADDR0
 2

	)

170 
	#MAC_ADDR1
 0

	)

171 
	#MAC_ADDR2
 0

	)

172 
	#MAC_ADDR3
 0

	)

173 
	#MAC_ADDR4
 0

	)

174 
	#MAC_ADDR5
 0

	)

177 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

178 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

179 
	#ETH_RXBUFNB
 ((
uöt32_t
)4Ë

	)

180 
	#ETH_TXBUFNB
 ((
uöt32_t
)4Ë

	)

185 
	#DP83848_PHY_ADDRESS
 0x01

	)

187 
	#PHY_RESET_DELAY
 ((
uöt32_t
)0x000000FF)

	)

189 
	#PHY_CONFIG_DELAY
 ((
uöt32_t
)0x00000FFF)

	)

191 
	#PHY_READ_TO
 ((
uöt32_t
)0x0000FFFF)

	)

192 
	#PHY_WRITE_TO
 ((
uöt32_t
)0x0000FFFF)

	)

196 
	#PHY_BCR
 ((
uöt16_t
)0x00Ë

	)

197 
	#PHY_BSR
 ((
uöt16_t
)0x01Ë

	)

199 
	#PHY_RESET
 ((
uöt16_t
)0x8000Ë

	)

200 
	#PHY_LOOPBACK
 ((
uöt16_t
)0x4000Ë

	)

201 
	#PHY_FULLDUPLEX_100M
 ((
uöt16_t
)0x2100Ë

	)

202 
	#PHY_HALFDUPLEX_100M
 ((
uöt16_t
)0x2000Ë

	)

203 
	#PHY_FULLDUPLEX_10M
 ((
uöt16_t
)0x0100Ë

	)

204 
	#PHY_HALFDUPLEX_10M
 ((
uöt16_t
)0x0000Ë

	)

205 
	#PHY_AUTONEGOTIATION
 ((
uöt16_t
)0x1000Ë

	)

206 
	#PHY_RESTART_AUTONEGOTIATION
 ((
uöt16_t
)0x0200Ë

	)

207 
	#PHY_POWERDOWN
 ((
uöt16_t
)0x0800Ë

	)

208 
	#PHY_ISOLATE
 ((
uöt16_t
)0x0400Ë

	)

210 
	#PHY_AUTONEGO_COMPLETE
 ((
uöt16_t
)0x0020Ë

	)

211 
	#PHY_LINKED_STATUS
 ((
uöt16_t
)0x0004Ë

	)

212 
	#PHY_JABBER_DETECTION
 ((
uöt16_t
)0x0002Ë

	)

216 
	#PHY_SR
 ((
uöt16_t
)0x10Ë

	)

217 
	#PHY_MICR
 ((
uöt16_t
)0x11Ë

	)

218 
	#PHY_MISR
 ((
uöt16_t
)0x12Ë

	)

220 
	#PHY_LINK_STATUS
 ((
uöt16_t
)0x0001Ë

	)

221 
	#PHY_SPEED_STATUS
 ((
uöt16_t
)0x0002Ë

	)

222 
	#PHY_DUPLEX_STATUS
 ((
uöt16_t
)0x0004Ë

	)

224 
	#PHY_MICR_INT_EN
 ((
uöt16_t
)0x0002Ë

	)

225 
	#PHY_MICR_INT_OE
 ((
uöt16_t
)0x0001Ë

	)

227 
	#PHY_MISR_LINK_INT_EN
 ((
uöt16_t
)0x0020Ë

	)

228 
	#PHY_LINK_INTERRUPT
 ((
uöt16_t
)0x2000Ë

	)

235 #ifde‡
HAL_RCC_MODULE_ENABLED


236 
	~"°m32f4xx_hÆ_rcc.h
"

239 #ifde‡
HAL_GPIO_MODULE_ENABLED


240 
	~"°m32f4xx_hÆ_gpio.h
"

243 #ifde‡
HAL_DMA_MODULE_ENABLED


244 
	~"°m32f4xx_hÆ_dma.h
"

247 #ifde‡
HAL_CORTEX_MODULE_ENABLED


248 
	~"°m32f4xx_hÆ_c‹ãx.h
"

251 #ifde‡
HAL_ADC_MODULE_ENABLED


252 
	~"°m32f4xx_hÆ_adc.h
"

255 #ifde‡
HAL_CAN_MODULE_ENABLED


256 
	~"°m32f4xx_hÆ_ˇn.h
"

259 #ifde‡
HAL_CRC_MODULE_ENABLED


260 
	~"°m32f4xx_hÆ_¸c.h
"

263 #ifde‡
HAL_CRYP_MODULE_ENABLED


264 
	~"°m32f4xx_hÆ_¸yp.h
"

267 #ifde‡
HAL_DMA2D_MODULE_ENABLED


268 
	~"°m32f4xx_hÆ_dma2d.h
"

271 #ifde‡
HAL_DAC_MODULE_ENABLED


272 
	~"°m32f4xx_hÆ_dac.h
"

275 #ifde‡
HAL_DCMI_MODULE_ENABLED


276 
	~"°m32f4xx_hÆ_dcmi.h
"

279 #ifde‡
HAL_ETH_MODULE_ENABLED


280 
	~"°m32f4xx_hÆ_ëh.h
"

283 #ifde‡
HAL_FLASH_MODULE_ENABLED


284 
	~"°m32f4xx_hÆ_Êash.h
"

287 #ifde‡
HAL_SRAM_MODULE_ENABLED


288 
	~"°m32f4xx_hÆ_§am.h
"

291 #ifde‡
HAL_NOR_MODULE_ENABLED


292 
	~"°m32f4xx_hÆ_n‹.h
"

295 #ifde‡
HAL_NAND_MODULE_ENABLED


296 
	~"°m32f4xx_hÆ_«nd.h
"

299 #ifde‡
HAL_PCCARD_MODULE_ENABLED


300 
	~"°m32f4xx_hÆ_pcˇrd.h
"

303 #ifde‡
HAL_SDRAM_MODULE_ENABLED


304 
	~"°m32f4xx_hÆ_sdøm.h
"

307 #ifde‡
HAL_HASH_MODULE_ENABLED


308 
	~"°m32f4xx_hÆ_hash.h
"

311 #ifde‡
HAL_I2C_MODULE_ENABLED


312 
	~"°m32f4xx_hÆ_i2c.h
"

315 #ifde‡
HAL_I2S_MODULE_ENABLED


316 
	~"°m32f4xx_hÆ_i2s.h
"

319 #ifde‡
HAL_IWDG_MODULE_ENABLED


320 
	~"°m32f4xx_hÆ_iwdg.h
"

323 #ifde‡
HAL_LTDC_MODULE_ENABLED


324 
	~"°m32f4xx_hÆ_…dc.h
"

327 #ifde‡
HAL_PWR_MODULE_ENABLED


328 
	~"°m32f4xx_hÆ_pwr.h
"

331 #ifde‡
HAL_RNG_MODULE_ENABLED


332 
	~"°m32f4xx_hÆ_∫g.h
"

335 #ifde‡
HAL_RTC_MODULE_ENABLED


336 
	~"°m32f4xx_hÆ_πc.h
"

339 #ifde‡
HAL_SAI_MODULE_ENABLED


340 
	~"°m32f4xx_hÆ_ßi.h
"

343 #ifde‡
HAL_SD_MODULE_ENABLED


344 
	~"°m32f4xx_hÆ_sd.h
"

347 #ifde‡
HAL_SPI_MODULE_ENABLED


348 
	~"°m32f4xx_hÆ_•i.h
"

351 #ifde‡
HAL_TIM_MODULE_ENABLED


352 
	~"°m32f4xx_hÆ_tim.h
"

355 #ifde‡
HAL_UART_MODULE_ENABLED


356 
	~"°m32f4xx_hÆ_u¨t.h
"

359 #ifde‡
HAL_USART_MODULE_ENABLED


360 
	~"°m32f4xx_hÆ_ußπ.h
"

363 #ifde‡
HAL_IRDA_MODULE_ENABLED


364 
	~"°m32f4xx_hÆ_úda.h
"

367 #ifde‡
HAL_SMARTCARD_MODULE_ENABLED


368 
	~"°m32f4xx_hÆ_sm¨tˇrd.h
"

371 #ifde‡
HAL_WWDG_MODULE_ENABLED


372 
	~"°m32f4xx_hÆ_wwdg.h
"

375 #ifde‡
HAL_PCD_MODULE_ENABLED


376 
	~"°m32f4xx_hÆ_pcd.h
"

379 #ifde‡
HAL_HCD_MODULE_ENABLED


380 
	~"°m32f4xx_hÆ_hcd.h
"

384 #ifde‡ 
USE_FULL_ASSERT


393 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

395 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

397 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

401 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\stm32f4xx_it.h

39 #i‚de‡
__STM32F4xx_IT_H


40 
	#__STM32F4xx_IT_H


	)

42 #ifde‡
__˝lu•lus


47 
	~"maö.h
"

54 
NMI_H™dÀr
();

55 
H¨dFau…_H™dÀr
();

56 
MemM™age_H™dÀr
();

57 
BusFau…_H™dÀr
();

58 
UßgeFau…_H™dÀr
();

59 
SVC_H™dÀr
();

60 
DebugM⁄_H™dÀr
();

61 
PídSV_H™dÀr
();

62 
SysTick_H™dÀr
();

63 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\system_stm32f4xx.h

33 #i‚de‡
__SYSTEM_STM32F4XX_H


34 
	#__SYSTEM_STM32F4XX_H


	)

36 #ifde‡
__˝lu•lus


53 
uöt32_t
 
Sy°emC‹eClock
;

80 
Sy°emInô
();

81 
Sy°emC‹eClockUpd©e
();

86 #ifde‡
__˝lu•lus


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\readme.txt

1 
You
 
have
 
to
 
£t
 
the
 
c‹ª˘
 
mem‹y
 
œyout
 
your
 
devi˚
 
ö
Åhê
lökî
 
	gs¸ùt
.

2 
PÀa£
 
check
 
the
 
FLASH
 
™d
 
SRAM
 
	gÀngth
.

4 
	ge
.
	gg
.

7 
	gMEMORY


9 
FLASH
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
	gLENGTH
 = 0x08000

10 
RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
	gLENGTH
 = 0x01000

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\main.c

40 
	~"maö.h
"

51 
	#PERIOD_VALUE
 (1800 - 1Ë

	)

52 
	#PULSE1_VALUE
 1350

	)

53 
	#PULSE2_VALUE
 900

	)

54 
	#PULSE3_VALUE
 600

	)

55 
	#PULSE4_VALUE
 5

	)

61 
TIM_H™dÀTy≥Def
 
	gTimH™dÀ
;

64 
TIM_OC_InôTy≥Def
 
	gsC⁄fig
;

67 
uöt32_t
 
	guwPªsˇÀrVÆue
 = 0;

70 
Sy°emClock_C⁄fig
();

71 
Eº‹_H™dÀr
();

80 
	$maö
()

82 
uöt16_t
 
u16PwmWeôh
 = 0;

83 
öt8_t
 
s8In¸emít
 = 100;

91 
	`HAL_Inô
();

94 
	`Sy°emClock_C⁄fig
();

97 
uwPªsˇÀrVÆue
 = ((
Sy°emC‹eClock
 /2) / 18000000) - 1;

107 
TimH™dÀ
.
In°™˚
 = 
TIMx
;

109 
TimH™dÀ
.
Inô
.
PªsˇÀr
 = 
uwPªsˇÀrVÆue
;

110 
TimH™dÀ
.
Inô
.
Pîiod
 = 
PERIOD_VALUE
;

111 
TimH™dÀ
.
Inô
.
ClockDivisi⁄
 = 0;

112 
TimH™dÀ
.
Inô
.
Cou¡îMode
 = 
TIM_COUNTERMODE_UP
;

113 if(
	`HAL_TIM_PWM_Inô
(&
TimH™dÀ
Ë!
HAL_OK
)

116 
	`Eº‹_H™dÀr
();

121 
sC⁄fig
.
OCMode
 = 
TIM_OCMODE_PWM1
;

122 
sC⁄fig
.
OCPﬁ¨ôy
 = 
TIM_OCPOLARITY_LOW
;

123 
sC⁄fig
.
OCFa°Mode
 = 
TIM_OCFAST_DISABLE
;

126 
sC⁄fig
.
Pul£
 = 
PULSE1_VALUE
;

127 if(
	`HAL_TIM_PWM_C⁄figCh™√l
(&
TimH™dÀ
, &
sC⁄fig
, 
TIM_CHANNEL_1
Ë!
HAL_OK
)

130 
	`Eº‹_H™dÀr
();

134 
sC⁄fig
.
Pul£
 = 
PULSE4_VALUE
;

135 if(
	`HAL_TIM_PWM_C⁄figCh™√l
(&
TimH™dÀ
, &
sC⁄fig
, 
TIM_CHANNEL_2
Ë!
HAL_OK
)

138 
	`Eº‹_H™dÀr
();

143 if(
	`HAL_TIM_PWM_Sèπ
(&
TimH™dÀ
, 
TIM_CHANNEL_1
Ë!
HAL_OK
)

146 
	`Eº‹_H™dÀr
();

149 if(
	`HAL_TIM_PWM_Sèπ
(&
TimH™dÀ
, 
TIM_CHANNEL_2
Ë!
HAL_OK
)

152 
	`Eº‹_H™dÀr
();

160 if((0 !
u16PwmWeôh
Ë&& (u16PwmWeôh < 
s8In¸emít
))

162 
u16PwmWeôh
 = 0;

166 
u16PwmWeôh
 +
s8In¸emít
;

169 if(
PERIOD_VALUE
 <
u16PwmWeôh
)

171 
u16PwmWeôh
 = 
PERIOD_VALUE
;

172 
s8In¸emít
 = -100;

174 if(0 =
u16PwmWeôh
)

176 
s8In¸emít
 = 100;

179 
sC⁄fig
.
Pul£
 = 
u16PwmWeôh
;

180 
	`HAL_TIM_PWM_Ch™gePul£Weôh
(&
TimH™dÀ
, &
sC⁄fig
, 
TIM_CHANNEL_1
);

181 
	`HAL_TIM_PWM_Ch™gePul£Weôh
(&
TimH™dÀ
, &
sC⁄fig
, 
TIM_CHANNEL_2
);

183 
	`HAL_Dñay
(100);

185 
	}
}

207 
	$Sy°emClock_C⁄fig
()

209 
RCC_ClkInôTy≥Def
 
RCC_ClkInôSåu˘
;

210 
RCC_OscInôTy≥Def
 
RCC_OscInôSåu˘
;

213 
	`__HAL_RCC_PWR_CLK_ENABLE
();

218 
	`__HAL_PWR_VOLTAGESCALING_CONFIG
(
PWR_REGULATOR_VOLTAGE_SCALE2
);

221 
RCC_OscInôSåu˘
.
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSI
;

222 
RCC_OscInôSåu˘
.
HSISèã
 = 
RCC_HSI_ON
;

223 
RCC_OscInôSåu˘
.
HSICÆibøti⁄VÆue
 = 0x10;

224 
RCC_OscInôSåu˘
.
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

225 
RCC_OscInôSåu˘
.
PLL
.
PLLSour˚
 = 
RCC_PLLSOURCE_HSI
;

226 
RCC_OscInôSåu˘
.
PLL
.
PLLM
 = 16;

227 
RCC_OscInôSåu˘
.
PLL
.
PLLN
 = 336;

228 
RCC_OscInôSåu˘
.
PLL
.
PLLP
 = 
RCC_PLLP_DIV4
;

229 
RCC_OscInôSåu˘
.
PLL
.
PLLQ
 = 7;

230 if(
	`HAL_RCC_OscC⁄fig
(&
RCC_OscInôSåu˘
Ë!
HAL_OK
)

232 
	`Eº‹_H™dÀr
();

237 
RCC_ClkInôSåu˘
.
ClockTy≥
 = (
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
);

238 
RCC_ClkInôSåu˘
.
SYSCLKSour˚
 = 
RCC_SYSCLKSOURCE_PLLCLK
;

239 
RCC_ClkInôSåu˘
.
AHBCLKDividî
 = 
RCC_SYSCLK_DIV1
;

240 
RCC_ClkInôSåu˘
.
APB1CLKDividî
 = 
RCC_HCLK_DIV2
;

241 
RCC_ClkInôSåu˘
.
APB2CLKDividî
 = 
RCC_HCLK_DIV1
;

242 if(
	`HAL_RCC_ClockC⁄fig
(&
RCC_ClkInôSåu˘
, 
FLASH_LATENCY_2
Ë!
HAL_OK
)

244 
	`Eº‹_H™dÀr
();

246 
	}
}

253 
	$Eº‹_H™dÀr
()

258 
	}
}

260 #ifde‡ 
USE_FULL_ASSERT


268 
	$as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
)

277 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\startup_stm32f4xx.S

32 .
sy¡ax
 
	gunifõd


33 .
¨ch
 
	g¨mv7
-
	gm


35 .
	g£˘i⁄
 .
	g°ack


36 .
	gÆign
 3

37 #ifde‡
__STACK_SIZE


38 .
equ
 
	gSèck_Size
, 
	g__STACK_SIZE


40 .
equ
 
	gSèck_Size
, 0x400

42 .
globl
 
	g__SèckT›


43 .
globl
 
__SèckLimô


44 
	g__SèckLimô
:

45 .
•a˚
 
Sèck_Size


46 .
size
 
__SèckLimô
, . - __StackLimit

47 
	g__SèckT›
:

48 .
size
 
__SèckT›
, . - 
	g__SèckT›


50 .
	g£˘i⁄
 .
	ghóp


51 .
	gÆign
 3

52 #ifde‡
__HEAP_SIZE


53 .
equ
 
	gHóp_Size
, 
	g__HEAP_SIZE


55 .
equ
 
	gHóp_Size
, 0xC00

57 .
globl
 
	g__HópBa£


58 .
globl
 
__HópLimô


59 
	g__HópBa£
:

60 .
Hóp_Size


61 .
•a˚
 
Hóp_Size


62 .
ídif


63 .
size
 
__HópBa£
, . - __HeapBase

64 
	g__HópLimô
:

65 .
size
 
__HópLimô
, . - 
	g__HópLimô


67 .
	g£˘i⁄
 .
	gi§_ve˘‹


68 .
	gÆign
 2

69 .
globl
 
__i§_ve˘‹


70 
	g__i§_ve˘‹
:

71 .
__SèckT›


72 .
Re£t_H™dÀr


73 .
NMI_H™dÀr


74 .
H¨dFau…_H™dÀr


75 .
MemM™age_H™dÀr


76 .
BusFau…_H™dÀr


77 .
UßgeFau…_H™dÀr


82 .
SVC_H™dÀr


83 .
DebugM⁄_H™dÀr


85 .
PídSV_H™dÀr


86 .
SysTick_H™dÀr


89 .
WWDG_IRQH™dÀr


90 .
PVD_IRQH™dÀr


91 .
TAMP_STAMP_IRQH™dÀr


92 .
RTC_WKUP_IRQH™dÀr


93 .
FLASH_IRQH™dÀr


94 .
RCC_IRQH™dÀr


95 .
EXTI0_IRQH™dÀr


96 .
EXTI1_IRQH™dÀr


97 .
EXTI2_IRQH™dÀr


98 .
EXTI3_IRQH™dÀr


99 .
EXTI4_IRQH™dÀr


100 .
DMA1_Såóm0_IRQH™dÀr


101 .
DMA1_Såóm1_IRQH™dÀr


102 .
DMA1_Såóm2_IRQH™dÀr


103 .
DMA1_Såóm3_IRQH™dÀr


104 .
DMA1_Såóm4_IRQH™dÀr


105 .
DMA1_Såóm5_IRQH™dÀr


106 .
DMA1_Såóm6_IRQH™dÀr


107 .
ADC_IRQH™dÀr


108 .
CAN1_TX_IRQH™dÀr


109 .
CAN1_RX0_IRQH™dÀr


110 .
CAN1_RX1_IRQH™dÀr


111 .
CAN1_SCE_IRQH™dÀr


112 .
EXTI9_5_IRQH™dÀr


113 .
TIM1_BRK_TIM9_IRQH™dÀr


114 .
TIM1_UP_TIM10_IRQH™dÀr


115 .
TIM1_TRG_COM_TIM11_IRQH™dÀr


116 .
TIM1_CC_IRQH™dÀr


117 .
TIM2_IRQH™dÀr


118 .
TIM3_IRQH™dÀr


119 .
TIM4_IRQH™dÀr


120 .
I2C1_EV_IRQH™dÀr


121 .
I2C1_ER_IRQH™dÀr


122 .
I2C2_EV_IRQH™dÀr


123 .
I2C2_ER_IRQH™dÀr


124 .
SPI1_IRQH™dÀr


125 .
SPI2_IRQH™dÀr


126 .
USART1_IRQH™dÀr


127 .
USART2_IRQH™dÀr


128 .
USART3_IRQH™dÀr


129 .
EXTI15_10_IRQH™dÀr


130 .
RTC_Aœrm_IRQH™dÀr


131 .
OTG_FS_WKUP_IRQH™dÀr


132 .
TIM8_BRK_TIM12_IRQH™dÀr


133 .
TIM8_UP_TIM13_IRQH™dÀr


134 .
TIM8_TRG_COM_TIM14_IRQH™dÀr


135 .
TIM8_CC_IRQH™dÀr


136 .
DMA1_Såóm7_IRQH™dÀr


137 .
FSMC_IRQH™dÀr


138 .
SDIO_IRQH™dÀr


139 .
TIM5_IRQH™dÀr


140 .
SPI3_IRQH™dÀr


141 .
UART4_IRQH™dÀr


142 .
UART5_IRQH™dÀr


143 .
TIM6_DAC_IRQH™dÀr


144 .
TIM7_IRQH™dÀr


145 .
DMA2_Såóm0_IRQH™dÀr


146 .
DMA2_Såóm1_IRQH™dÀr


147 .
DMA2_Såóm2_IRQH™dÀr


148 .
DMA2_Såóm3_IRQH™dÀr


149 .
DMA2_Såóm4_IRQH™dÀr


150 .
ETH_IRQH™dÀr


151 .
ETH_WKUP_IRQH™dÀr


152 .
CAN2_TX_IRQH™dÀr


153 .
CAN2_RX0_IRQH™dÀr


154 .
CAN2_RX1_IRQH™dÀr


155 .
CAN2_SCE_IRQH™dÀr


156 .
OTG_FS_IRQH™dÀr


157 .
DMA2_Såóm5_IRQH™dÀr


158 .
DMA2_Såóm6_IRQH™dÀr


159 .
DMA2_Såóm7_IRQH™dÀr


160 .
USART6_IRQH™dÀr


161 .
I2C3_EV_IRQH™dÀr


162 .
I2C3_ER_IRQH™dÀr


163 .
OTG_HS_EP1_OUT_IRQH™dÀr


164 .
OTG_HS_EP1_IN_IRQH™dÀr


165 .
OTG_HS_WKUP_IRQH™dÀr


166 .
OTG_HS_IRQH™dÀr


167 .
DCMI_IRQH™dÀr


168 .
CRYP_IRQH™dÀr


169 .
HASH_RNG_IRQH™dÀr


170 .
FPU_IRQH™dÀr


172 .
size
 
__i§_ve˘‹
, . - 
	g__i§_ve˘‹


174 .
	gãxt


175 .
	gthumb


176 .
	gthumb_func


177 .
	gÆign
 2

178 .
globl
 
	gRe£t_H™dÀr


179 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


180 
	gRe£t_H™dÀr
:

188 
ldr
 
r1
, =
__ëext


189 
ldr
 
r2
, =
__d©a_°¨t__


190 
ldr
 
r3
, =
__d©a_íd__


196 .
Êash_to_øm_lo›
:

197 
cmp
 
r2
, 
r3


198 
ôâ
 
…


199 
ldæt
 
	gr0
, [
r1
], #4

200 
°æt
 
	gr0
, [
r2
], #4

201 
	gb…
 .
	gÊash_to_øm_lo›


203 
subs
 
	gr3
, 
r2


204 
	gbÀ
 .
	gÊash_to_øm_lo›_íd


205 .
	gÊash_to_øm_lo›
:

206 
subs
 
r3
, #4

207 
ldr
 
	gr0
, [
r1
, 
r3
]

208 
°r
 
	gr0
, [
r2
, 
r3
]

209 
	gbgt
 .
	gÊash_to_øm_lo›


210 .
	gÊash_to_øm_lo›_íd
:

213 #i‚de‡
__NO_SYSTEM_INIT


214 
ldr
 
r0
, =
Sy°emInô


215 
blx
 
r0


218 
ldr
 
r0
, =
_°¨t


219 
bx
 
r0


220 .
poﬁ


221 .
size
 
Re£t_H™dÀr
, . - 
	gRe£t_H™dÀr


226 .
	gÆign
 1

227 .
	gthumb_func


228 .
wók
 
	g_°¨t


229 .
ty≥
 
	g_°¨t
, %
fun˘i⁄


230 
	g_°¨t
:

233 
ldr
 
r1
, = 
__bss_°¨t__


234 
ldr
 
r2
, = 
__bss_íd__


235 
movs
 
r3
, #0

236 
	gb
 .
	gfûl_zîo_bss


237 .
	glo›_zîo_bss
:

238 
°r
 
r3
, [
r1
], #4

240 .
	gfûl_zîo_bss
:

241 
cmp
 
r1
, 
r2


242 
	gbcc
 .
lo›_zîo_bss


245 
bl
 
maö


246 
	gb
 .

247 .
size
 
	g_°¨t
, . - _start

252 .
ma¸o
 
def_úq_h™dÀr
 
	gh™dÀr_«me


253 .
	gÆign
 1

254 .
	gthumb_func


255 .
	gwók
 \
	gh™dÀr_«me


256 .
	gty≥
 \
	gh™dÀr_«me
, %
	gfun˘i⁄


257 \
	gh™dÀr_«me
 :

258 
b
 .

259 .
size
 \
h™dÀr_«me
, . - \
	gh™dÀr_«me


260 .
ídm


262 
def_úq_h™dÀr
 
NMI_H™dÀr


263 
def_úq_h™dÀr
 
H¨dFau…_H™dÀr


264 
def_úq_h™dÀr
 
MemM™age_H™dÀr


265 
def_úq_h™dÀr
 
BusFau…_H™dÀr


266 
def_úq_h™dÀr
 
UßgeFau…_H™dÀr


267 
def_úq_h™dÀr
 
SVC_H™dÀr


268 
def_úq_h™dÀr
 
DebugM⁄_H™dÀr


269 
def_úq_h™dÀr
 
PídSV_H™dÀr


270 
def_úq_h™dÀr
 
SysTick_H™dÀr


271 
def_úq_h™dÀr
 
DeÁu…_H™dÀr


274 
def_úq_h™dÀr
 
WWDG_IRQH™dÀr


275 
def_úq_h™dÀr
 
PVD_IRQH™dÀr


276 
def_úq_h™dÀr
 
TAMP_STAMP_IRQH™dÀr


277 
def_úq_h™dÀr
 
RTC_WKUP_IRQH™dÀr


278 
def_úq_h™dÀr
 
FLASH_IRQH™dÀr


279 
def_úq_h™dÀr
 
RCC_IRQH™dÀr


280 
def_úq_h™dÀr
 
EXTI0_IRQH™dÀr


281 
def_úq_h™dÀr
 
EXTI1_IRQH™dÀr


282 
def_úq_h™dÀr
 
EXTI2_IRQH™dÀr


283 
def_úq_h™dÀr
 
EXTI3_IRQH™dÀr


284 
def_úq_h™dÀr
 
EXTI4_IRQH™dÀr


285 
def_úq_h™dÀr
 
DMA1_Såóm0_IRQH™dÀr


286 
def_úq_h™dÀr
 
DMA1_Såóm1_IRQH™dÀr


287 
def_úq_h™dÀr
 
DMA1_Såóm2_IRQH™dÀr


288 
def_úq_h™dÀr
 
DMA1_Såóm3_IRQH™dÀr


289 
def_úq_h™dÀr
 
DMA1_Såóm4_IRQH™dÀr


290 
def_úq_h™dÀr
 
DMA1_Såóm5_IRQH™dÀr


291 
def_úq_h™dÀr
 
DMA1_Såóm6_IRQH™dÀr


292 
def_úq_h™dÀr
 
ADC_IRQH™dÀr


293 
def_úq_h™dÀr
 
CAN1_TX_IRQH™dÀr


294 
def_úq_h™dÀr
 
CAN1_RX0_IRQH™dÀr


295 
def_úq_h™dÀr
 
CAN1_RX1_IRQH™dÀr


296 
def_úq_h™dÀr
 
CAN1_SCE_IRQH™dÀr


297 
def_úq_h™dÀr
 
EXTI9_5_IRQH™dÀr


298 
def_úq_h™dÀr
 
TIM1_BRK_TIM9_IRQH™dÀr


299 
def_úq_h™dÀr
 
TIM1_UP_TIM10_IRQH™dÀr


300 
def_úq_h™dÀr
 
TIM1_TRG_COM_TIM11_IRQH™dÀr


301 
def_úq_h™dÀr
 
TIM1_CC_IRQH™dÀr


302 
def_úq_h™dÀr
 
TIM2_IRQH™dÀr


303 
def_úq_h™dÀr
 
TIM3_IRQH™dÀr


304 
def_úq_h™dÀr
 
TIM4_IRQH™dÀr


305 
def_úq_h™dÀr
 
I2C1_EV_IRQH™dÀr


306 
def_úq_h™dÀr
 
I2C1_ER_IRQH™dÀr


307 
def_úq_h™dÀr
 
I2C2_EV_IRQH™dÀr


308 
def_úq_h™dÀr
 
I2C2_ER_IRQH™dÀr


309 
def_úq_h™dÀr
 
SPI1_IRQH™dÀr


310 
def_úq_h™dÀr
 
SPI2_IRQH™dÀr


311 
def_úq_h™dÀr
 
USART1_IRQH™dÀr


312 
def_úq_h™dÀr
 
USART2_IRQH™dÀr


313 
def_úq_h™dÀr
 
USART3_IRQH™dÀr


314 
def_úq_h™dÀr
 
EXTI15_10_IRQH™dÀr


315 
def_úq_h™dÀr
 
RTC_Aœrm_IRQH™dÀr


316 
def_úq_h™dÀr
 
OTG_FS_WKUP_IRQH™dÀr


317 
def_úq_h™dÀr
 
TIM8_BRK_TIM12_IRQH™dÀr


318 
def_úq_h™dÀr
 
TIM8_UP_TIM13_IRQH™dÀr


319 
def_úq_h™dÀr
 
TIM8_TRG_COM_TIM14_IRQH™dÀr


320 
def_úq_h™dÀr
 
TIM8_CC_IRQH™dÀr


321 
def_úq_h™dÀr
 
DMA1_Såóm7_IRQH™dÀr


322 
def_úq_h™dÀr
 
FSMC_IRQH™dÀr


323 
def_úq_h™dÀr
 
SDIO_IRQH™dÀr


324 
def_úq_h™dÀr
 
TIM5_IRQH™dÀr


325 
def_úq_h™dÀr
 
SPI3_IRQH™dÀr


326 
def_úq_h™dÀr
 
UART4_IRQH™dÀr


327 
def_úq_h™dÀr
 
UART5_IRQH™dÀr


328 
def_úq_h™dÀr
 
TIM6_DAC_IRQH™dÀr


329 
def_úq_h™dÀr
 
TIM7_IRQH™dÀr


330 
def_úq_h™dÀr
 
DMA2_Såóm0_IRQH™dÀr


331 
def_úq_h™dÀr
 
DMA2_Såóm1_IRQH™dÀr


332 
def_úq_h™dÀr
 
DMA2_Såóm2_IRQH™dÀr


333 
def_úq_h™dÀr
 
DMA2_Såóm3_IRQH™dÀr


334 
def_úq_h™dÀr
 
DMA2_Såóm4_IRQH™dÀr


335 
def_úq_h™dÀr
 
ETH_IRQH™dÀr


336 
def_úq_h™dÀr
 
ETH_WKUP_IRQH™dÀr


337 
def_úq_h™dÀr
 
CAN2_TX_IRQH™dÀr


338 
def_úq_h™dÀr
 
CAN2_RX0_IRQH™dÀr


339 
def_úq_h™dÀr
 
CAN2_RX1_IRQH™dÀr


340 
def_úq_h™dÀr
 
CAN2_SCE_IRQH™dÀr


341 
def_úq_h™dÀr
 
OTG_FS_IRQH™dÀr


342 
def_úq_h™dÀr
 
DMA2_Såóm5_IRQH™dÀr


343 
def_úq_h™dÀr
 
DMA2_Såóm6_IRQH™dÀr


344 
def_úq_h™dÀr
 
DMA2_Såóm7_IRQH™dÀr


345 
def_úq_h™dÀr
 
USART6_IRQH™dÀr


346 
def_úq_h™dÀr
 
I2C3_EV_IRQH™dÀr


347 
def_úq_h™dÀr
 
I2C3_ER_IRQH™dÀr


348 
def_úq_h™dÀr
 
OTG_HS_EP1_OUT_IRQH™dÀr


349 
def_úq_h™dÀr
 
OTG_HS_EP1_IN_IRQH™dÀr


350 
def_úq_h™dÀr
 
OTG_HS_WKUP_IRQH™dÀr


351 
def_úq_h™dÀr
 
OTG_HS_IRQH™dÀr


352 
def_úq_h™dÀr
 
DCMI_IRQH™dÀr


353 
def_úq_h™dÀr
 
CRYP_IRQH™dÀr


354 
def_úq_h™dÀr
 
HASH_RNG_IRQH™dÀr


355 
def_úq_h™dÀr
 
	gFPU_IRQH™dÀr


357 .
	gíd


	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\stm32f4xx_hal_msp.c

39 
	~"maö.h
"

70 
	$HAL_TIM_PWM_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

72 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
;

76 
	`TIMx_CLK_ENABLE
();

79 
	`TIMx_CHANNEL_GPIO_PORT
();

86 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_AF_PP
;

87 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_PULLUP
;

88 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_HIGH
;

89 
GPIO_InôSåu˘
.
A…î«ã
 = 
GPIO_AF2_TIM3
;

91 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_CHANNEL1
;

92 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

94 
GPIO_InôSåu˘
.
Pö
 = 
GPIO_PIN_CHANNEL2
;

95 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

96 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\stm32f4xx_it.c

41 
	~"maö.h
"

42 
	~"°m32f4xx_ô.h
"

69 
	$NMI_H™dÀr
()

71 
	}
}

78 
	$H¨dFau…_H™dÀr
()

84 
	}
}

91 
	$MemM™age_H™dÀr
()

97 
	}
}

104 
	$BusFau…_H™dÀr
()

110 
	}
}

117 
	$UßgeFau…_H™dÀr
()

123 
	}
}

130 
	$SVC_H™dÀr
()

132 
	}
}

139 
	$DebugM⁄_H™dÀr
()

141 
	}
}

148 
	$PídSV_H™dÀr
()

150 
	}
}

157 
	$SysTick_H™dÀr
()

159 
	`HAL_IncTick
();

160 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\system_stm32f4xx.c

66 
	~"°m32f4xx.h
"

68 #i‡!
deföed
 (
HSE_VALUE
)

69 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

72 #i‡!
deföed
 (
HSI_VALUE
)

73 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

97 
	#VECT_TAB_OFFSET
 0x00

	)

124 
uöt32_t
 
	gSy°emC‹eClock
 = 16000000;

125 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

150 
	$Sy°emInô
()

153 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

154 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

158 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

161 
RCC
->
CFGR
 = 0x00000000;

164 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

167 
RCC
->
PLLCFGR
 = 0x24003010;

170 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

173 
RCC
->
CIR
 = 0x00000000;

176 #ifde‡
VECT_TAB_SRAM


177 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

179 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

181 
	}
}

219 
	$Sy°emC‹eClockUpd©e
()

221 
uöt32_t
 
tmp
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

224 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

226 
tmp
)

229 
Sy°emC‹eClock
 = 
HSI_VALUE
;

232 
Sy°emC‹eClock
 = 
HSE_VALUE
;

239 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

240 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

242 i‡(
∂lsour˚
 != 0)

245 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

250 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

253 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

254 
Sy°emC‹eClock
 = 
∂lvco
/
∂Õ
;

257 
Sy°emC‹eClock
 = 
HSI_VALUE
;

262 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

264 
Sy°emC‹eClock
 >>
tmp
;

265 
	}
}

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\stm32f401re_flash.ld

33 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

34 
	$OUTPUT_ARCH
(
¨m
)

35 
	$SEARCH_DIR
(.)

38 
MEMORY


40 
	`ROM
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
LENGTH
 = 512
K


41 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 96
K


42 
	}
}

72 
	gSECTIONS


74 .
	gãxt
 :

76 
KEEP
(*(.
i§_ve˘‹
))

77 *(.
ãxt
*)

79 
KEEP
(*(.
öô
))

80 
KEEP
(*(.
föi
))

83 *
¸tbegö
.
o
(.
˘‹s
)

84 *
¸tbegö
?.
o
(.
˘‹s
)

85 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

86 *(
SORT
(.
˘‹s
.*))

87 *(.
˘‹s
)

90 *
¸tbegö
.
o
(.
dt‹s
)

91 *
¸tbegö
?.
o
(.
dt‹s
)

92 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

93 *(
SORT
(.
dt‹s
.*))

94 *(.
dt‹s
)

96 *(.
rod©a
*)

98 
KEEP
(*(.
eh_‰ame
*))

99 } > 
ROM


101 .
ARM
.
exèb
 :

103 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

104 } > 
ROM


106 
__exidx_°¨t
 = .;

107 .
	gARM
.
	gexidx
 :

109 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

110 } > 
ROM


111 
__exidx_íd
 = .;

113 
	g__ëext
 = .;

115 .
	gd©a
 : 
AT
 (
__ëext
)

117 
__d©a_°¨t__
 = .;

118 *(
	gvèbÀ
)

119 *(.
	gd©a
*)

121 . = 
ALIGN
(4);

123 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

124 
KEEP
(*(.
¥eöô_¨øy
))

125 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

127 . = 
ALIGN
(4);

129 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

130 
KEEP
(*(
SORT
(.
öô_¨øy
.*)))

131 
KEEP
(*(.
öô_¨øy
))

132 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

135 . = 
ALIGN
(4);

137 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

138 
KEEP
(*(
SORT
(.
föi_¨øy
.*)))

139 
KEEP
(*(.
föi_¨øy
))

140 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

142 . = 
ALIGN
(4);

144 
	g__d©a_íd__
 = .;

146 } > 
	gRAM


148 .
bss
 (
NOLOAD
):

150 
__bss_°¨t__
 = .;

151 *(.
	gbss
*)

152 *(
	gCOMMON
)

153 
	g__bss_íd__
 = .;

154 } > 
	gRAM


156 .
hóp
 (
NOLOAD
):

158 
__íd__
 = .;

159 
	gíd
 = 
__íd__
;

160 *(.
	ghóp
*)

161 
	g__HópLimô
 = .;

162 } > 
	gRAM


167 .
°ack_dummy
 (
NOLOAD
):

169 *(.
°ack
)

170 } > 
RAM


174 
__SèckT›
 = 
ORIGIN
(
RAM
Ë+ 
LENGTH
(RAM);

175 
	g__SèckLimô
 = 
__SèckT›
 - 
SIZEOF
(.
°ack_dummy
);

176 
PROVIDE
(
__°ack
 = 
__SèckT›
);

179 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

	@C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\stm32f401re_sram.ld

33 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

34 
	$OUTPUT_ARCH
(
¨m
)

35 
	$SEARCH_DIR
(.)

38 
MEMORY


40 
	`ROM
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
LENGTH
 = 512
K


41 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 96
K


42 
	}
}

72 
	gSECTIONS


74 .
	gãxt
 :

76 
KEEP
(*(.
i§_ve˘‹
))

77 *(.
ãxt
*)

79 
KEEP
(*(.
öô
))

80 
KEEP
(*(.
föi
))

83 *
¸tbegö
.
o
(.
˘‹s
)

84 *
¸tbegö
?.
o
(.
˘‹s
)

85 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

86 *(
SORT
(.
˘‹s
.*))

87 *(.
˘‹s
)

90 *
¸tbegö
.
o
(.
dt‹s
)

91 *
¸tbegö
?.
o
(.
dt‹s
)

92 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

93 *(
SORT
(.
dt‹s
.*))

94 *(.
dt‹s
)

96 *(.
rod©a
*)

98 
KEEP
(*(.
eh_‰ame
*))

99 } > 
RAM


101 .
ARM
.
exèb
 :

103 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

104 } > 
RAM


106 
__exidx_°¨t
 = .;

107 .
	gARM
.
	gexidx
 :

109 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

110 } > 
RAM


111 
__exidx_íd
 = .;

113 
	g__ëext
 = .;

115 .
	gd©a
 : 
AT
 (
__ëext
)

117 
__d©a_°¨t__
 = .;

118 *(
	gvèbÀ
)

119 *(.
	gd©a
*)

121 . = 
ALIGN
(4);

123 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

124 
KEEP
(*(.
¥eöô_¨øy
))

125 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

127 . = 
ALIGN
(4);

129 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

130 
KEEP
(*(
SORT
(.
öô_¨øy
.*)))

131 
KEEP
(*(.
öô_¨øy
))

132 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

135 . = 
ALIGN
(4);

137 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

138 
KEEP
(*(
SORT
(.
föi_¨øy
.*)))

139 
KEEP
(*(.
föi_¨øy
))

140 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

142 . = 
ALIGN
(4);

144 
	g__d©a_íd__
 = .;

146 } > 
	gRAM


148 .
bss
 (
NOLOAD
):

150 
__bss_°¨t__
 = .;

151 *(.
	gbss
*)

152 *(
	gCOMMON
)

153 
	g__bss_íd__
 = .;

154 } > 
	gRAM


156 .
hóp
 (
NOLOAD
):

158 
__íd__
 = .;

159 
	gíd
 = 
__íd__
;

160 *(.
	ghóp
*)

161 
	g__HópLimô
 = .;

162 } > 
	gRAM


167 .
°ack_dummy
 (
NOLOAD
):

169 . = 
ALIGN
(8);

170 *(.
	g°ack
)

171 } > 
RAM


175 
	g__SèckT›
 = 
ORIGIN
(
RAM
Ë+ 
LENGTH
(RAM);

176 
	g__SèckLimô
 = 
__SèckT›
 - 
SIZEOF
(.
°ack_dummy
);

177 
PROVIDE
(
__°ack
 = 
__SèckT›
);

180 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

	@
1
.
0
159
14470
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\BSP\stm32f4xx_nucleo.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\BSP\stm32f4xx_nucleo.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\Legacy\stm32_hal_legacy.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_adc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_adc_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_can.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_cec.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_conf_template.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_cortex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_crc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_cryp.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_cryp_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dac.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dac_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dcmi.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dcmi_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_def.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dma.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dma2d.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dma_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_dsi.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_eth.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_flash.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_flash_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_flash_ramfunc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_fmpi2c.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_fmpi2c_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_gpio.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_gpio_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_hash.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_hash_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_hcd.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2c_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2s.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_i2s_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_irda.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_iwdg.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_lptim.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_ltdc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_ltdc_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_nand.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_nor.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pccard.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pcd.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pcd_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pwr.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_pwr_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_qspi.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rcc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rcc_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rng.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rtc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_rtc_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sai.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sai_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sd.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sdram.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_smartcard.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_spdifrx.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_spi.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_sram.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_tim.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_tim_ex.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_uart.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_usart.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_hal_wwdg.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_ll_fmc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_ll_fsmc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_ll_sdmmc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Inc\stm32f4xx_ll_usb.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_adc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_adc_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_can.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cec.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cortex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_crc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cryp.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_cryp_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dac.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dac_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dcmi.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dcmi_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dma.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dma2d.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dma_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_dsi.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_eth.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_flash.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_flash_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_flash_ramfunc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_fmpi2c.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_fmpi2c_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_gpio.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_hash.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_hash_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_hcd.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_i2c.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_i2c_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_i2s.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_i2s_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_irda.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_iwdg.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_lptim.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_ltdc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_ltdc_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_msp_template.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_nand.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_nor.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pccard.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pcd.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pcd_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pwr.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_pwr_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_qspi.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rng.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rtc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rtc_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sai.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sai_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sd.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sdram.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_smartcard.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_spdifrx.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_spi.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_sram.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_tim.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_tim_ex.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_uart.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_usart.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_wwdg.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_fmc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_fsmc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_sdmmc.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\STM32F4xx_HAL_Driver\Src\stm32f4xx_ll_usb.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\arm_common_tables.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\arm_math.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\core_cm4.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\core_cm4_simd.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\core_cmFunc.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\cmsis\core_cmInstr.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\main.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\stm32f401xe.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\stm32f4xx.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\stm32f4xx_hal_conf.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\stm32f4xx_it.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\inc\system_stm32f4xx.h
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\readme.txt
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\main.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\startup_stm32f4xx.S
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\stm32f4xx_hal_msp.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\stm32f4xx_it.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\src\system_stm32f4xx.c
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\stm32f401re_flash.ld
C:\Projects\Nucleo\BareMetal_test\BareMetal_PWM\stm32f401re_sram.ld
